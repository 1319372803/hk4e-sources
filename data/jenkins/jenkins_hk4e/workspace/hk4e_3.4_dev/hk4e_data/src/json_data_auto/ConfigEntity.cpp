// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/json_data_auto/ConfigEntity.cpp

// Line 20: range 000000000E5FC1EA-000000000E5FC544
bool __cdecl data::ConfigCustomAttackSphere::fromJson(
        data::ConfigCustomAttackSphere *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *custom_attack_sphere__radius_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackSphere::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "customAttackSphere_Radius",
    (const std::allocator<char> *)(v2 + 48));
  custom_attack_sphere__radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( custom_attack_sphere__radius_ptr && !fromJson<float>(custom_attack_sphere__radius_ptr, (float *)this) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      30);
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[47])"fromJson for: customAttackSphere_Radius fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    v6 = ((_BYTE)this + 4) & 7;
    v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
    if ( (_BYTE)v7 )
      __asan_report_store1(&this->is_json_loaded, v6, v7);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 38: range 000000000E5FC546-000000000E5FC6B1
int32_t __cdecl data::ConfigCustomAttackSphere::getHashValue(const data::ConfigCustomAttackSphere *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 hash_code:39";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackSphere::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->custom_attack_sphere__radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 46: range 000000000E5FC6B2-000000000E5FCF45
bool __cdecl data::ConfigCustomAttackBox::fromJson(data::ConfigCustomAttackBox *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *custom_attack_box__size__x_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *custom_attack_box__size__y_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *custom_attack_box__size__z_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackBox::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "customAttackBox_Size_X",
    (const std::allocator<char> *)(v2 + 48));
  custom_attack_box__size__x_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( custom_attack_box__size__x_ptr
    && !fromJson<float>(custom_attack_box__size__x_ptr, &this->custom_attack_box__size__x) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      56);
    common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[44])"fromJson for: customAttackBox_Size_X fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "customAttackBox_Size_Y",
      (const std::allocator<char> *)(v2 + 64));
    custom_attack_box__size__y_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( custom_attack_box__size__y_ptr
      && !fromJson<float>(custom_attack_box__size__y_ptr, &this->custom_attack_box__size__y) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        68);
      common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[44])"fromJson for: customAttackBox_Size_Y fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "customAttackBox_Size_Z",
        (const std::allocator<char> *)(v2 + 80));
      custom_attack_box__size__z_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( custom_attack_box__size__z_ptr
        && !fromJson<float>(custom_attack_box__size__z_ptr, &this->custom_attack_box__size__z) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          80);
        common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[44])"fromJson for: customAttackBox_Size_Z fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        v6 = ((_BYTE)this + 12) & 7;
        v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
        if ( (_BYTE)v7 )
          __asan_report_store1(&this->is_json_loaded, v6, v7);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 88: range 000000000E5FCF46-000000000E5FD157
int32_t __cdecl data::ConfigCustomAttackBox::getHashValue(const data::ConfigCustomAttackBox *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 12 hash_code:89";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackBox::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->custom_attack_box__size__x, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->custom_attack_box__size__y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->custom_attack_box__size__y >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&this->custom_attack_box__size__y);
  }
  common::tools::HashUtils::appendHash(this->custom_attack_box__size__y, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->custom_attack_box__size__z >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->custom_attack_box__size__z >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&this->custom_attack_box__size__z);
  }
  common::tools::HashUtils::appendHash(this->custom_attack_box__size__z, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 98: range 000000000E5FD158-000000000E5FD740
bool __cdecl data::ConfigCustomAttackCircle::fromJson(
        data::ConfigCustomAttackCircle *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *custom_attack_circle__radius_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *custom_attack_circle__inner_radius_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackCircle::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "customAttackCircle_Radius",
    (const std::allocator<char> *)(v2 + 32));
  custom_attack_circle__radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( custom_attack_circle__radius_ptr
    && !fromJson<float>(custom_attack_circle__radius_ptr, &this->custom_attack_circle__radius) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      108);
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[47])"fromJson for: customAttackCircle_Radius fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "customAttackCircle_InnerRadius",
      (const std::allocator<char> *)(v2 + 48));
    custom_attack_circle__inner_radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( custom_attack_circle__inner_radius_ptr
      && !fromJson<float>(custom_attack_circle__inner_radius_ptr, &this->custom_attack_circle__inner_radius) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        120);
      common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[52])"fromJson for: customAttackCircle_InnerRadius fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v6 = ((_BYTE)this + 8) & 7;
      v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
      if ( (_BYTE)v7 )
        __asan_report_store1(&this->is_json_loaded, v6, v7);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 128: range 000000000E5FD742-000000000E5FD900
int32_t __cdecl data::ConfigCustomAttackCircle::getHashValue(const data::ConfigCustomAttackCircle *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:129";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackCircle::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->custom_attack_circle__radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->custom_attack_circle__inner_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->custom_attack_circle__inner_radius >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&this->custom_attack_circle__inner_radius);
  }
  common::tools::HashUtils::appendHash(this->custom_attack_circle__inner_radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 137: range 000000000E5FD902-000000000E5FE195
bool __cdecl data::ConfigCustomAttackShape::fromJson(
        data::ConfigCustomAttackShape *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *sphere_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *box_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *circle_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackShape::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "sphere",
    (const std::allocator<char> *)(v2 + 48));
  sphere_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( sphere_ptr && !data::ConfigCustomAttackSphere::fromJson(&this->sphere, sphere_ptr) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      147);
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[28])"fromJson for: sphere fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      off_1A3B17C0,
      (const std::allocator<char> *)(v2 + 64));
    box_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( box_ptr && !data::ConfigCustomAttackBox::fromJson(&this->box, box_ptr) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        159);
      common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[25])"fromJson for: box fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "circle",
        (const std::allocator<char> *)(v2 + 80));
      circle_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( circle_ptr && !data::ConfigCustomAttackCircle::fromJson(&this->circle, circle_ptr) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          171);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[28])"fromJson for: circle fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        v6 = ((_BYTE)this + 36) & 7;
        v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
        if ( (_BYTE)v7 )
          __asan_report_store1(&this->is_json_loaded, v6, v7);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 179: range 000000000E5FE196-000000000E5FE312
int32_t __cdecl data::ConfigCustomAttackShape::getHashValue(const data::ConfigCustomAttackShape *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:180";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomAttackShape::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigCustomAttackSphere::getHashValue(&this->sphere);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  v6 = data::ConfigCustomAttackBox::getHashValue(&this->box);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::ConfigCustomAttackCircle::getHashValue(&this->circle);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 189: range 000000000E5FE313-000000000E5FE548
data::ConfigHeadControlPtr __cdecl data::createConfigHeadControl(const std::string *name)
{
  const std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::key_type *v1; // rsi
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > >::pointer v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(const std::string *, unsigned __int64); // rcx
  data::ConfigHeadControlPtr result; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > >::_Base_ptr)"2 32 8 6 it:190 64 8 9 <unknown>";
  v2[2]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > >::_Base_ptr)data::createConfigHeadControl;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], v1);
  v2[4]._M_node = std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::find(
                    &data::g_ConfigHeadControlMap[abi:cxx11],
                    v1)._M_node;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], v1);
  v2[8]._M_node = std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::end(&data::g_ConfigHeadControlMap[abi:cxx11])._M_node;
  v5 = std::operator!=(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    v6 = std::_Rb_tree_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigHeadControl>>>::operator->(v2 + 4);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6->second);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 24LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
    v9 = *(void (__fastcall **)(const std::string *, unsigned __int64))v8;
    if ( *(_WORD *)(((unsigned __int64)name >> 3) + 0x7FFF8000) )
      v7 = __asan_report_store16();
    v9(name, v7);
  }
  else
  {
    std::shared_ptr<data::ConfigHeadControl>::shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)name, 0LL);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2>::element_type *)name;
  return result;
};

// Line 196: range 000000000E5FE54A-000000000E5FE977
void __cdecl data::ConfigHeadControl::foreachMember(
        data::ConfigHeadControl *const this,
        std::function<void(std::any&)> *p_func)
{
  std::any *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[320]; // [rsp+10h] [rbp-140h] BYREF

  v2 = (std::any *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = (std::any *)v3;
  }
  v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1102416563;
  v2->_M_storage._M_ptr = "8 32 16 24 use_head_control_any:197 64 16 22 max_yaw_degree_any:199 96 16 24 max_pitch_degree_"
                          "any:201 128 16 13 speed_any:203 160 16 20 weight_speed_any:205 192 16 29 use_white_anim_states"
                          "_any:207 224 16 19 anim_states_any:209 256 16 24 dont_anim_states_any:211";
  v2[1]._M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))data::ConfigHeadControl::foreachMember;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -202178560;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(v2 + 2, &this->use_head_control);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 2);
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(v2 + 4, &this->max_yaw_degree);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 4);
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(v2 + 6, &this->max_pitch_degree);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 6);
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(v2 + 8, &this->speed);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 8);
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(v2 + 10, &this->weight_speed);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 10);
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(v2 + 12, &this->use_white_anim_states);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 12);
  std::any::any<std::vector<std::string> &,std::vector<std::string>,std::any::_Manager_external<std::vector<std::string>>,true,true>(
    v2 + 14,
    &this->anim_states);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 14);
  std::any::any<std::vector<std::string> &,std::vector<std::string>,std::any::_Manager_external<std::vector<std::string>>,true,true>(
    v2 + 16,
    &this->dont_anim_states);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 16);
  std::any::~any(v2 + 16);
  std::any::~any(v2 + 14);
  std::any::~any(v2 + 12);
  std::any::~any(v2 + 10);
  std::any::~any(v2 + 8);
  std::any::~any(v2 + 6);
  std::any::~any(v2 + 4);
  std::any::~any(v2 + 2);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 216: range 000000000E5FE978-000000000E5FE9C2
std::shared_ptr<data::ConfigHeadControl> __cdecl data::ConfigHeadControl::clone(data::ConfigHeadControl *const this)
{
  data::ConfigHeadControl *v1; // rsi
  std::shared_ptr<data::ConfigHeadControl> result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigHeadControl,data::ConfigHeadControl&>(
    (common::tools::perf::allocator<data::ConfigHeadControl,data::ConfigHeadControl> *)this,
    v1);
  result._M_ptr = this;
  return result;
};

// Line 220: range 000000000E5FE9C4-000000000E5FFE82
bool __cdecl data::ConfigHeadControl::fromJson(data::ConfigHeadControl *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  data::StringArray *p_dont_anim_states; // rsi
  bool v7; // bl
  const Json::Value *use_head_control_ptr; // [rsp+10h] [rbp-500h]
  const Json::Value *max_yaw_degree_ptr; // [rsp+18h] [rbp-4F8h]
  const Json::Value *max_pitch_degree_ptr; // [rsp+20h] [rbp-4F0h]
  const Json::Value *speed_ptr; // [rsp+28h] [rbp-4E8h]
  const Json::Value *weight_speed_ptr; // [rsp+30h] [rbp-4E0h]
  const Json::Value *use_white_anim_states_ptr; // [rsp+38h] [rbp-4D8h]
  const Json::Value *anim_states_ptr; // [rsp+40h] [rbp-4D0h]
  const Json::Value *dont_anim_states_ptr; // [rsp+48h] [rbp-4C8h]
  char v18[1216]; // [rsp+50h] [rbp-4C0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1184LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "24 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <un"
                        "known> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unk"
                        "nown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unkn"
                        "own> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigHeadControl::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "useHeadControl",
    (const std::allocator<char> *)(v2 + 32));
  use_head_control_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( use_head_control_ptr && !fromJson<bool>(use_head_control_ptr, &this->use_head_control) )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      230);
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      (common::milog::MiLogStream *const)(v2 + 224),
      (const char (*)[36])"fromJson for: useHeadControl fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      "maxYawDegree",
      (const std::allocator<char> *)(v2 + 48));
    max_yaw_degree_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( max_yaw_degree_ptr && !fromJson<float>(max_yaw_degree_ptr, &this->max_yaw_degree) )
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        242);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 352),
        (const char (*)[34])"fromJson for: maxYawDegree fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 416),
        "maxPitchDegree",
        (const std::allocator<char> *)(v2 + 64));
      max_pitch_degree_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
      std::string::~string((void *)(v2 + 416));
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( max_pitch_degree_ptr && !fromJson<float>(max_pitch_degree_ptr, &this->max_pitch_degree) )
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 480),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          254);
        common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
          (common::milog::MiLogStream *const)(v2 + 480),
          (const char (*)[36])"fromJson for: maxPitchDegree fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 544),
          "speed",
          (const std::allocator<char> *)(v2 + 80));
        speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
        std::string::~string((void *)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( speed_ptr && !fromJson<float>(speed_ptr, &this->speed) )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            266);
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            (common::milog::MiLogStream *const)(v2 + 608),
            (const char (*)[27])"fromJson for: speed fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 672),
            "weightSpeed",
            (const std::allocator<char> *)(v2 + 96));
          weight_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
          std::string::~string((void *)(v2 + 672));
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( weight_speed_ptr && !fromJson<float>(weight_speed_ptr, &this->weight_speed) )
          {
            *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 736, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 736),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              278);
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              (common::milog::MiLogStream *const)(v2 + 736),
              (const char (*)[33])"fromJson for: weightSpeed fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 800),
              "useWhiteAnimStates",
              (const std::allocator<char> *)(v2 + 112));
            use_white_anim_states_ptr = jsonValueFind(jval, (const std::string *)(v2 + 800));
            std::string::~string((void *)(v2 + 800));
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( use_white_anim_states_ptr && !fromJson<bool>(use_white_anim_states_ptr, &this->use_white_anim_states) )
            {
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                290);
              common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                (common::milog::MiLogStream *const)(v2 + 864),
                (const char (*)[40])"fromJson for: useWhiteAnimStates fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 128);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 928),
                "animStates",
                (const std::allocator<char> *)(v2 + 128));
              anim_states_ptr = jsonValueFind(jval, (const std::string *)(v2 + 928));
              std::string::~string((void *)(v2 + 928));
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 128);
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
              if ( anim_states_ptr && !data::arrFromJson(anim_states_ptr, &this->anim_states) )
              {
                *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 992, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 992),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  302);
                common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  (common::milog::MiLogStream *const)(v2 + 992),
                  (const char (*)[32])"fromJson for: animStates fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 144);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1056),
                  "dontAnimStates",
                  (const std::allocator<char> *)(v2 + 144));
                p_dont_anim_states = (data::StringArray *)(v2 + 1056);
                dont_anim_states_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1056));
                std::string::~string((void *)(v2 + 1056));
                *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 144);
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
                if ( dont_anim_states_ptr
                  && (p_dont_anim_states = &this->dont_anim_states,
                      !data::arrFromJson(dont_anim_states_ptr, &this->dont_anim_states)) )
                {
                  *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1120, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1120),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    314);
                  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    (common::milog::MiLogStream *const)(v2 + 1120),
                    (const char (*)[36])"fromJson for: dontAnimStates fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
                  v5 = 0;
                }
                else
                {
                  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                    __asan_report_store1(&this->is_json_loaded, p_dont_anim_states, &this->is_json_loaded);
                  this->is_json_loaded = 1;
                  v5 = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v7 = v5;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8088) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8090) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1184LL, v18);
  }
  return v7;
};

// Line 321: range 000000000E5FFE84-000000000E6007D9
data::ConfigHeadControlPtr __cdecl data::ConfigHeadControl::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigHeadControlPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-208h]
  char v14[512]; // [rsp+20h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 16 7 ptr:334 96 32 9 <unknown> 160 32 9 <unknown> 224 32 13 type_name:328 "
                        "288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigHeadControl::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 224);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 224)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        331);
      common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[45])"fromJson for: ConfigHeadControl $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigHeadControl>::shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigHeadControl((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigHeadControl>((const std::shared_ptr<data::ConfigHeadControl> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          337);
        v6 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[43])"create ConfigHeadControl fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 224));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigHeadControl>::shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)jval, 0LL);
      }
      else
      {
        v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 48LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            342);
          v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                 (common::milog::MiLogStream *const)(v2 + 416),
                 (const std::string *)(v2 + 224));
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigHeadControl>::shared_ptr(
            (std::shared_ptr<data::ConfigHeadControl> *const)jval,
            0LL);
        }
        else
        {
          v10 = (__int64)std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v11 = *(_BYTE *)(((unsigned __int64)(v10 + 96) >> 3) + 0x7FFF8000);
          LOBYTE(v1) = v11 != 0;
          v12 = v11 < 0;
          if ( v12 )
            v10 = __asan_report_store1(v10 + 96, v1, v12);
          *(_BYTE *)(v10 + 96) = 1;
          std::shared_ptr<data::ConfigHeadControl>::shared_ptr(
            (std::shared_ptr<data::ConfigHeadControl> *const)jval,
            (std::shared_ptr<data::ConfigHeadControl> *)(v2 + 64));
        }
      }
      std::shared_ptr<data::ConfigHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 224));
  }
  else
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      325);
    common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[50])"jsonValueFind for: ConfigHeadControl $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigHeadControl>::shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 350: range 000000000E6007DA-000000000E600B0B
int32_t __cdecl data::ConfigHeadControl::getHashValue(const data::ConfigHeadControl *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t ArrHashValue; // eax
  int32_t v8; // eax
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:351";
  *(_QWORD *)(v2 + 16) = data::ConfigHeadControl::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(char *)(((unsigned __int64)&this->use_head_control >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->use_head_control, v1, &this->use_head_control);
  common::tools::HashUtils::appendHash(this->use_head_control, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->max_yaw_degree >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_yaw_degree >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->max_yaw_degree);
  }
  common::tools::HashUtils::appendHash(this->max_yaw_degree, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->max_pitch_degree >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_pitch_degree >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->max_pitch_degree);
  }
  common::tools::HashUtils::appendHash(this->max_pitch_degree, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->speed);
  }
  common::tools::HashUtils::appendHash(this->speed, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->weight_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->weight_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->weight_speed);
  }
  common::tools::HashUtils::appendHash(this->weight_speed, (int32_t *)(v2 + 32));
  v5 = ((_BYTE)this + 44) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->use_white_anim_states >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->use_white_anim_states >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&this->use_white_anim_states, v5, v6);
  common::tools::HashUtils::appendHash(this->use_white_anim_states, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->anim_states);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  v8 = data::getArrHashValue(&this->dont_anim_states);
  common::tools::HashUtils::appendHash(v8, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 367: range 000000000E6E7564-000000000E6E77A5
void __cdecl data::ConfigMonsterHeadControlRegister::ConfigMonsterHeadControlRegister(
        data::ConfigMonsterHeadControlRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigHeadControl> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigMonsterHeadControlRegister::ConfigMonsterHeadControlRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigMonsterHeadControl>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigMonsterHeadControl",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::operator[](
         &data::g_ConfigHeadControlMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigHeadControl>::operator=<data::ConfigMonsterHeadControl>(
    v4,
    (std::shared_ptr<data::ConfigMonsterHeadControl> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigMonsterHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigMonsterHeadControl> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 370: range 000000000E600B0C-000000000E600C3F
void __cdecl data::ConfigMonsterHeadControl::foreachMember(
        data::ConfigMonsterHeadControl *const this,
        std::function<void(std::any&)> *p_func)
{
  std::function<void(std::any&)> *v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[144]; // [rsp+10h] [rbp-90h] BYREF

  v2 = (std::function<void(std::any&)> *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::function<void(std::any&)> *)v3;
  }
  v2->_M_functor._M_unused._M_object = (void *)1102416563;
  *(_QWORD *)&v2->_M_functor._M_pod_data[8] = "1 32 32 9 <unknown>";
  v2->_M_manager = (std::_Function_base::_Manager_type)data::ConfigMonsterHeadControl::foreachMember;
  v4 = (unsigned __int64)v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  std::function<void ()(std::any &)>::function(v2 + 1, p_func);
  data::ConfigHeadControl::foreachMember(this, v2 + 1);
  std::function<void ()(std::any &)>::~function(v2 + 1);
  if ( v5 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_functor._M_unused._M_object = (void *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 375: range 000000000E600C40-000000000E600D50
std::shared_ptr<data::ConfigHeadControl> __cdecl data::ConfigMonsterHeadControl::clone(
        data::ConfigMonsterHeadControl *const this)
{
  data::ConfigMonsterHeadControl *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigHeadControl> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonsterHeadControl::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigMonsterHeadControl,data::ConfigMonsterHeadControl&>(
    (common::tools::perf::allocator<data::ConfigMonsterHeadControl,data::ConfigMonsterHeadControl> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigHeadControl>::shared_ptr<data::ConfigMonsterHeadControl,void>(
    (std::shared_ptr<data::ConfigHeadControl> *const)this,
    (std::shared_ptr<data::ConfigMonsterHeadControl> *)(v2 + 32));
  std::shared_ptr<data::ConfigMonsterHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigMonsterHeadControl> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 379: range 000000000E600D52-000000000E600D95
data::ConfigMonsterHeadControlPtr __cdecl data::ConfigMonsterHeadControlFactory::create(
        data::ConfigMonsterHeadControlFactory *const this)
{
  data::ConfigMonsterHeadControlPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigMonsterHeadControl>();
  result._M_ptr = (std::__shared_ptr<data::ConfigMonsterHeadControl,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 381: range 000000000E600D96-000000000E600FA9
bool __cdecl data::ConfigMonsterHeadControl::fromJson(
        data::ConfigMonsterHeadControl *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonsterHeadControl::fromJson;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( !data::ConfigHeadControl::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      384);
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
      (common::milog::MiLogStream *const)(v2 + 32),
      (const char (*)[39])"fromJson for: ConfigHeadControl fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, jval, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v6 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 391: range 000000000E600FAA-000000000E601AF0
data::ConfigMonsterHeadControlPtr __cdecl data::ConfigMonsterHeadControl::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigMonsterHeadControlPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 12 base_ptr:404 96 16 7 ptr:410 128 32 9 <unknown> 192 32 9 <unknown> "
                        "256 32 13 type_name:398 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonsterHeadControl::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        401);
      common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[52])"fromJson for: ConfigMonsterHeadControl $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigMonsterHeadControl>::shared_ptr(
        (std::shared_ptr<data::ConfigMonsterHeadControl> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigHeadControl((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigHeadControl>((const std::shared_ptr<data::ConfigHeadControl> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          407);
        v6 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[43])"create ConfigHeadControl fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigMonsterHeadControl>::shared_ptr(
          (std::shared_ptr<data::ConfigMonsterHeadControl> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigMonsterHeadControl,data::ConfigHeadControl>((const std::shared_ptr<data::ConfigHeadControl> *)(v2 + 96));
        if ( std::operator==<data::ConfigMonsterHeadControl>(
               (const std::shared_ptr<data::ConfigMonsterHeadControl> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            413);
          common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[43])"cast to ConfigMonsterHeadControlPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigMonsterHeadControl>::shared_ptr(
            (std::shared_ptr<data::ConfigMonsterHeadControl> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMonsterHeadControl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonsterHeadControl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              418);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigMonsterHeadControl>::shared_ptr(
              (std::shared_ptr<data::ConfigMonsterHeadControl> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigMonsterHeadControl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonsterHeadControl,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 96) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 96, v1, v12);
            *(_BYTE *)(v10 + 96) = 1;
            std::shared_ptr<data::ConfigMonsterHeadControl>::shared_ptr(
              (std::shared_ptr<data::ConfigMonsterHeadControl> *const)jval,
              (std::shared_ptr<data::ConfigMonsterHeadControl> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigMonsterHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigMonsterHeadControl> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      395);
    common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[57])"jsonValueFind for: ConfigMonsterHeadControl $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigMonsterHeadControl>::shared_ptr(
      (std::shared_ptr<data::ConfigMonsterHeadControl> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigMonsterHeadControl,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 426: range 000000000E601AF2-000000000E601B11
int32_t __cdecl data::ConfigMonsterHeadControl::getHashValue(const data::ConfigMonsterHeadControl *const this)
{
  return data::ConfigHeadControl::getHashValue(this);
};

// Line 433: range 000000000E601B12-000000000E602FDD
bool __cdecl data::ConfigEntityPoint::fromJson(data::ConfigEntityPoint *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  float *p_selected_point_radius; // rsi
  bool v7; // bl
  const Json::Value *element_absorb_ptr; // [rsp+10h] [rbp-500h]
  const Json::Value *element_pendant_ptr; // [rsp+18h] [rbp-4F8h]
  const Json::Value *element_drop_ptr; // [rsp+20h] [rbp-4F0h]
  const Json::Value *bullet_aim_ptr; // [rsp+28h] [rbp-4E8h]
  const Json::Value *hit_points_ptr; // [rsp+30h] [rbp-4E0h]
  const Json::Value *selected_points_ptr; // [rsp+38h] [rbp-4D8h]
  const Json::Value *ignore_transform_ptr; // [rsp+40h] [rbp-4D0h]
  const Json::Value *selected_point_radius_ptr; // [rsp+48h] [rbp-4C8h]
  char v18[1216]; // [rsp+50h] [rbp-4C0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1184LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "24 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <un"
                        "known> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unk"
                        "nown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unkn"
                        "own> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigEntityPoint::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "elementAbsorb",
    (const std::allocator<char> *)(v2 + 32));
  element_absorb_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( element_absorb_ptr && !fromJson<std::string>(element_absorb_ptr, &this->element_absorb) )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      443);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)(v2 + 224),
      (const char (*)[35])"fromJson for: elementAbsorb fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      "elementPendant",
      (const std::allocator<char> *)(v2 + 48));
    element_pendant_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( element_pendant_ptr && !fromJson<std::string>(element_pendant_ptr, &this->element_pendant) )
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        455);
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        (common::milog::MiLogStream *const)(v2 + 352),
        (const char (*)[36])"fromJson for: elementPendant fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 416),
        "elementDrop",
        (const std::allocator<char> *)(v2 + 64));
      element_drop_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
      std::string::~string((void *)(v2 + 416));
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( element_drop_ptr && !fromJson<std::string>(element_drop_ptr, &this->element_drop) )
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 480),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          467);
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          (common::milog::MiLogStream *const)(v2 + 480),
          (const char (*)[33])"fromJson for: elementDrop fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 544),
          "bulletAim",
          (const std::allocator<char> *)(v2 + 80));
        bullet_aim_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
        std::string::~string((void *)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( bullet_aim_ptr && !fromJson<std::string>(bullet_aim_ptr, &this->bullet_aim) )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            479);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 608),
            (const char (*)[31])"fromJson for: bulletAim fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 672),
            "hitPoints",
            (const std::allocator<char> *)(v2 + 96));
          hit_points_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
          std::string::~string((void *)(v2 + 672));
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( hit_points_ptr && !data::arrFromJson(hit_points_ptr, &this->hit_points) )
          {
            *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 736, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 736),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              491);
            common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              (common::milog::MiLogStream *const)(v2 + 736),
              (const char (*)[31])"fromJson for: hitPoints fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 800),
              "selectedPoints",
              (const std::allocator<char> *)(v2 + 112));
            selected_points_ptr = jsonValueFind(jval, (const std::string *)(v2 + 800));
            std::string::~string((void *)(v2 + 800));
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( selected_points_ptr && !data::arrFromJson(selected_points_ptr, &this->selected_points) )
            {
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                503);
              common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                (common::milog::MiLogStream *const)(v2 + 864),
                (const char (*)[36])"fromJson for: selectedPoints fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 128);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 928),
                "ignoreTransform",
                (const std::allocator<char> *)(v2 + 128));
              ignore_transform_ptr = jsonValueFind(jval, (const std::string *)(v2 + 928));
              std::string::~string((void *)(v2 + 928));
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 128);
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
              if ( ignore_transform_ptr && !fromJson<bool>(ignore_transform_ptr, &this->ignore_transform) )
              {
                *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 992, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 992),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  515);
                common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                  (common::milog::MiLogStream *const)(v2 + 992),
                  (const char (*)[37])"fromJson for: ignoreTransform fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 144);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1056),
                  "selectedPointRadius",
                  (const std::allocator<char> *)(v2 + 144));
                p_selected_point_radius = (float *)(v2 + 1056);
                selected_point_radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1056));
                std::string::~string((void *)(v2 + 1056));
                *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 144);
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
                if ( selected_point_radius_ptr
                  && (p_selected_point_radius = &this->selected_point_radius,
                      !fromJson<float>(selected_point_radius_ptr, &this->selected_point_radius)) )
                {
                  *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1120, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1120),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    527);
                  common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    (common::milog::MiLogStream *const)(v2 + 1120),
                    (const char (*)[41])"fromJson for: selectedPointRadius fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
                  v5 = 0;
                }
                else
                {
                  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                    __asan_report_store1(&this->is_json_loaded, p_selected_point_radius, &this->is_json_loaded);
                  this->is_json_loaded = 1;
                  v5 = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v7 = v5;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8088) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8090) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1184LL, v18);
  }
  return v7;
};

// Line 535: range 000000000E602FDE-000000000E60323C
int32_t __cdecl data::ConfigEntityPoint::getHashValue(const data::ConfigEntityPoint *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t ArrHashValue; // eax
  int32_t v6; // eax
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:536";
  *(_QWORD *)(v2 + 16) = data::ConfigEntityPoint::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->element_absorb, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->element_pendant, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->element_drop, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->bullet_aim, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->hit_points);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  v6 = data::getArrHashValue(&this->selected_points);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->ignore_transform >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->ignore_transform, v2 + 32, &this->ignore_transform);
  common::tools::HashUtils::appendHash(this->ignore_transform, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->selected_point_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->selected_point_radius >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->selected_point_radius);
  }
  common::tools::HashUtils::appendHash(this->selected_point_radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 550: range 000000000E60323E-000000000E604481
bool __cdecl data::ConfigMatLinearChangedByDistance::fromJson(
        data::ConfigMatLinearChangedByDistance *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  float *p_max_distance; // rsi
  bool v7; // bl
  const Json::Value *transform_name_ptr; // [rsp+18h] [rbp-478h]
  const Json::Value *texture_property_ptr; // [rsp+20h] [rbp-470h]
  const Json::Value *float_property_ptr; // [rsp+28h] [rbp-468h]
  const Json::Value *min_ratio_ptr; // [rsp+30h] [rbp-460h]
  const Json::Value *max_ratio_ptr; // [rsp+38h] [rbp-458h]
  const Json::Value *min_distance_ptr; // [rsp+40h] [rbp-450h]
  const Json::Value *max_distance_ptr; // [rsp+48h] [rbp-448h]
  char v17[1088]; // [rsp+50h] [rbp-440h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1056LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <u"
                        "nknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMatLinearChangedByDistance::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "transformName",
    (const std::allocator<char> *)(v2 + 48));
  transform_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( transform_name_ptr && !fromJson<std::string>(transform_name_ptr, &this->transform_name) )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      560);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)(v2 + 224),
      (const char (*)[35])"fromJson for: transformName fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      "textureProperty",
      (const std::allocator<char> *)(v2 + 64));
    texture_property_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( texture_property_ptr && !data::vecFromJson(texture_property_ptr, &this->texture_property) )
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        572);
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        (common::milog::MiLogStream *const)(v2 + 352),
        (const char (*)[37])"fromJson for: textureProperty fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 416),
        "floatProperty",
        (const std::allocator<char> *)(v2 + 80));
      float_property_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
      std::string::~string((void *)(v2 + 416));
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( float_property_ptr && !data::vecFromJson(float_property_ptr, &this->float_property) )
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 480),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          584);
        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
          (common::milog::MiLogStream *const)(v2 + 480),
          (const char (*)[35])"fromJson for: floatProperty fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 544),
          "minRatio",
          (const std::allocator<char> *)(v2 + 96));
        min_ratio_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
        std::string::~string((void *)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( min_ratio_ptr && !fromJson<float>(min_ratio_ptr, &this->min_ratio) )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            596);
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            (common::milog::MiLogStream *const)(v2 + 608),
            (const char (*)[30])"fromJson for: minRatio fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 672),
            "maxRatio",
            (const std::allocator<char> *)(v2 + 112));
          max_ratio_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
          std::string::~string((void *)(v2 + 672));
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( max_ratio_ptr && !fromJson<float>(max_ratio_ptr, &this->max_ratio) )
          {
            *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 736, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 736),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              608);
            common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)(v2 + 736),
              (const char (*)[30])"fromJson for: maxRatio fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 800),
              "minDistance",
              (const std::allocator<char> *)(v2 + 128));
            min_distance_ptr = jsonValueFind(jval, (const std::string *)(v2 + 800));
            std::string::~string((void *)(v2 + 800));
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( min_distance_ptr && !fromJson<float>(min_distance_ptr, &this->min_distance) )
            {
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                620);
              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                (common::milog::MiLogStream *const)(v2 + 864),
                (const char (*)[33])"fromJson for: minDistance fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 928),
                "maxDistance",
                (const std::allocator<char> *)(v2 + 144));
              p_max_distance = (float *)(v2 + 928);
              max_distance_ptr = jsonValueFind(jval, (const std::string *)(v2 + 928));
              std::string::~string((void *)(v2 + 928));
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( max_distance_ptr
                && (p_max_distance = &this->max_distance, !fromJson<float>(max_distance_ptr, &this->max_distance)) )
              {
                *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 992, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 992),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  632);
                common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  (common::milog::MiLogStream *const)(v2 + 992),
                  (const char (*)[33])"fromJson for: maxDistance fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
                v5 = 0;
              }
              else
              {
                if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                  __asan_report_store1(&this->is_json_loaded, p_max_distance, &this->is_json_loaded);
                this->is_json_loaded = 1;
                v5 = 1;
              }
            }
          }
        }
      }
    }
  }
  v7 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8080) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1056LL, v17);
  }
  return v7;
};

// Line 640: range 000000000E604482-000000000E604729
int32_t __cdecl data::ConfigMatLinearChangedByDistance::getHashValue(
        const data::ConfigMatLinearChangedByDistance *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t VecHashValue; // eax
  int32_t v6; // eax
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:641";
  *(_QWORD *)(v2 + 16) = data::ConfigMatLinearChangedByDistance::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->transform_name, (int32_t *)(v2 + 32));
  VecHashValue = data::getVecHashValue(&this->texture_property);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  v6 = data::getVecHashValue(&this->float_property);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->min_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->min_ratio);
  }
  common::tools::HashUtils::appendHash(this->min_ratio, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->max_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->max_ratio);
  }
  common::tools::HashUtils::appendHash(this->max_ratio, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->min_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->min_distance);
  }
  common::tools::HashUtils::appendHash(this->min_distance, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->max_distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->max_distance);
  }
  common::tools::HashUtils::appendHash(this->max_distance, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 653: range 000000000E60472A-000000000E604B18
bool __cdecl data::vecFromJson(const Json::Value *jval, data::ConfigMatLinearChangedByDistanceList *v)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // edx
  unsigned __int64 v6; // rax
  int v7; // r14d
  data::ConfigMatLinearChangedByDistance *v8; // rdx
  unsigned __int64 v9; // rax
  bool result; // al
  int v11; // [rsp+0h] [rbp-160h]
  char v12; // [rsp+8h] [rbp-158h]
  bool v13; // [rsp+Fh] [rbp-151h]
  uint32_t i; // [rsp+24h] [rbp-13Ch]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-138h]
  char v16[304]; // [rsp+30h] [rbp-130h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 32 9 <unknown> 112 104 8 elem:659";
  *(_QWORD *)(v2 + 16) = data::vecFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862726] = -218103808;
  v4[536862727] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v11, v12);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      v6 = ((v2 + 112) >> 3) + 2147450880;
      *(_DWORD *)v6 = 0;
      *(_DWORD *)(v6 + 4) = 0;
      *(_DWORD *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 12) = 0;
      data::ConfigMatLinearChangedByDistance::ConfigMatLinearChangedByDistance((data::ConfigMatLinearChangedByDistance *const)(v2 + 112));
      if ( !data::ConfigMatLinearChangedByDistance::fromJson(
              (data::ConfigMatLinearChangedByDistance *const)(v2 + 112),
              elem_jval) )
      {
        *(_DWORD *)(((v2 + 48) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 48, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 48),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "vecFromJson",
          662);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 48),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 48));
        *(_DWORD *)(((v2 + 48) >> 3) + 0x7FFF8000) = -117901064;
        v13 = 0;
        v7 = 0;
      }
      else
      {
        v8 = std::move<data::ConfigMatLinearChangedByDistance &>((data::ConfigMatLinearChangedByDistance *)(v2 + 112));
        std::vector<data::ConfigMatLinearChangedByDistance>::emplace_back<data::ConfigMatLinearChangedByDistance>(
          v,
          v8,
          v8);
        v7 = 1;
      }
      data::ConfigMatLinearChangedByDistance::~ConfigMatLinearChangedByDistance((data::ConfigMatLinearChangedByDistance *const)(v2 + 112));
      if ( v7 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    v9 = ((v2 + 112) >> 3) + 2147450880;
    *(_DWORD *)v9 = -117901064;
    *(_DWORD *)(v9 + 4) = -117901064;
    *(_DWORD *)(v9 + 8) = -117901064;
    *(_BYTE *)(v9 + 12) = -8;
    if ( v5 && v5 != 2 )
      goto LABEL_20;
  }
  v13 = 1;
LABEL_20:
  result = v13;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 672: range 000000000E604B19-000000000E604D65
int32_t __cdecl data::getVecHashValue(const data::ConfigMatLinearChangedByDistanceList *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::ConfigMatLinearChangedByDistance*,std::vector<data::ConfigMatLinearChangedByDistance> >::reference elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 13 hash_code:673 64 8 15 __for_begin:674 96 8 13 __for_end:674";
  *(_QWORD *)(v2 + 16) = data::getVecHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::ConfigMatLinearChangedByDistance>::const_iterator *)(v2 + 64) = std::vector<data::ConfigMatLinearChangedByDistance>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::ConfigMatLinearChangedByDistance>::const_iterator *)(v2 + 96) = std::vector<data::ConfigMatLinearChangedByDistance>::end(vec);
  while ( __gnu_cxx::operator!=<data::ConfigMatLinearChangedByDistance const*,std::vector<data::ConfigMatLinearChangedByDistance>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigMatLinearChangedByDistance*,std::vector<data::ConfigMatLinearChangedByDistance> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::ConfigMatLinearChangedByDistance*,std::vector<data::ConfigMatLinearChangedByDistance> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<data::ConfigMatLinearChangedByDistance const*,std::vector<data::ConfigMatLinearChangedByDistance>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigMatLinearChangedByDistance*,std::vector<data::ConfigMatLinearChangedByDistance> > *const)(v2 + 64));
    HashValue = data::ConfigMatLinearChangedByDistance::getHashValue(elem);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::ConfigMatLinearChangedByDistance const*,std::vector<data::ConfigMatLinearChangedByDistance>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigMatLinearChangedByDistance*,std::vector<data::ConfigMatLinearChangedByDistance> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 683: range 000000000E604D66-000000000E605FAE
bool __cdecl data::ConfigModel::fromJson(data::ConfigModel *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool v8; // bl
  const Json::Value *mat_linear_changed_by_distance_ptr; // [rsp+18h] [rbp-478h]
  const Json::Value *born_effect_ptr; // [rsp+20h] [rbp-470h]
  const Json::Value *attach_effect_ptr; // [rsp+28h] [rbp-468h]
  const Json::Value *ignore_dist_check_when_attach_effect_ptr; // [rsp+30h] [rbp-460h]
  const Json::Value *can_bake_mesh_ptr; // [rsp+38h] [rbp-458h]
  const Json::Value *set_per_object_shadow_group_id_ptr; // [rsp+40h] [rbp-450h]
  const Json::Value *has_character_renderering_ptr; // [rsp+48h] [rbp-448h]
  char v17[1088]; // [rsp+50h] [rbp-440h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1056LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <u"
                        "nknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigModel::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "matLinearChangedByDistance",
    (const std::allocator<char> *)(v2 + 48));
  mat_linear_changed_by_distance_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( mat_linear_changed_by_distance_ptr
    && !data::vecFromJson(mat_linear_changed_by_distance_ptr, &this->mat_linear_changed_by_distance) )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      693);
    common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
      (common::milog::MiLogStream *const)(v2 + 224),
      (const char (*)[48])"fromJson for: matLinearChangedByDistance fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      "bornEffect",
      (const std::allocator<char> *)(v2 + 64));
    born_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( born_effect_ptr && !fromJson<std::string>(born_effect_ptr, &this->born_effect) )
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        705);
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
        (common::milog::MiLogStream *const)(v2 + 352),
        (const char (*)[32])"fromJson for: bornEffect fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 416),
        "attachEffect",
        (const std::allocator<char> *)(v2 + 80));
      attach_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
      std::string::~string((void *)(v2 + 416));
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( attach_effect_ptr && !fromJson<std::string>(attach_effect_ptr, &this->attach_effect) )
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 480),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          717);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          (common::milog::MiLogStream *const)(v2 + 480),
          (const char (*)[34])"fromJson for: attachEffect fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 544),
          "ignoreDistCheckWhenAttachEffect",
          (const std::allocator<char> *)(v2 + 96));
        ignore_dist_check_when_attach_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
        std::string::~string((void *)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( ignore_dist_check_when_attach_effect_ptr
          && !fromJson<bool>(ignore_dist_check_when_attach_effect_ptr, &this->ignore_dist_check_when_attach_effect) )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            729);
          common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            (common::milog::MiLogStream *const)(v2 + 608),
            (const char (*)[53])"fromJson for: ignoreDistCheckWhenAttachEffect fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 672),
            "canBakeMesh",
            (const std::allocator<char> *)(v2 + 112));
          can_bake_mesh_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
          std::string::~string((void *)(v2 + 672));
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( can_bake_mesh_ptr && !fromJson<bool>(can_bake_mesh_ptr, &this->can_bake_mesh) )
          {
            *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 736, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 736),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              741);
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              (common::milog::MiLogStream *const)(v2 + 736),
              (const char (*)[33])"fromJson for: canBakeMesh fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 800),
              "setPerObjectShadowGroupID",
              (const std::allocator<char> *)(v2 + 128));
            set_per_object_shadow_group_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 800));
            std::string::~string((void *)(v2 + 800));
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( set_per_object_shadow_group_id_ptr
              && !fromJson<bool>(set_per_object_shadow_group_id_ptr, &this->set_per_object_shadow_group_id) )
            {
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                753);
              common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                (common::milog::MiLogStream *const)(v2 + 864),
                (const char (*)[47])"fromJson for: setPerObjectShadowGroupID fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 928),
                "hasCharacterRenderering",
                (const std::allocator<char> *)(v2 + 144));
              has_character_renderering_ptr = jsonValueFind(jval, (const std::string *)(v2 + 928));
              std::string::~string((void *)(v2 + 928));
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( has_character_renderering_ptr
                && !fromJson<bool>(has_character_renderering_ptr, &this->has_character_renderering) )
              {
                *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 992, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 992),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  765);
                common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                  (common::milog::MiLogStream *const)(v2 + 992),
                  (const char (*)[45])"fromJson for: hasCharacterRenderering fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
                v5 = 0;
              }
              else
              {
                v6 = ((_BYTE)this + 92) & 7;
                v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
                if ( (_BYTE)v7 )
                  __asan_report_store1(&this->is_json_loaded, v6, v7);
                this->is_json_loaded = 1;
                v5 = 1;
              }
            }
          }
        }
      }
    }
  }
  v8 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8080) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1056LL, v17);
  }
  return v8;
};

// Line 773: range 000000000E605FB0-000000000E606255
int32_t __cdecl data::ConfigModel::getHashValue(const data::ConfigModel *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t VecHashValue; // eax
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  int32_t result; // eax
  char v13[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:774";
  *(_QWORD *)(v2 + 16) = data::ConfigModel::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  VecHashValue = data::getVecHashValue(&this->mat_linear_changed_by_distance);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->born_effect, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->attach_effect, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->ignore_dist_check_when_attach_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(
      &this->ignore_dist_check_when_attach_effect,
      v2 + 32,
      &this->ignore_dist_check_when_attach_effect);
  common::tools::HashUtils::appendHash(this->ignore_dist_check_when_attach_effect, (int32_t *)(v2 + 32));
  v6 = ((_BYTE)this + 89) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->can_bake_mesh >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->can_bake_mesh >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&this->can_bake_mesh, v6, v7);
  common::tools::HashUtils::appendHash(this->can_bake_mesh, (int32_t *)(v2 + 32));
  v8 = ((_BYTE)this + 90) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->set_per_object_shadow_group_id >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->set_per_object_shadow_group_id >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&this->set_per_object_shadow_group_id, v8, v9);
  common::tools::HashUtils::appendHash(this->set_per_object_shadow_group_id, (int32_t *)(v2 + 32));
  v10 = ((_BYTE)this + 91) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&this->has_character_renderering >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&this->has_character_renderering >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&this->has_character_renderering, v10, v11);
  common::tools::HashUtils::appendHash(this->has_character_renderering, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 787: range 000000000E606256-000000000E6065B0
bool __cdecl data::ConfigDitherByStartDitherAction::fromJson(
        data::ConfigDitherByStartDitherAction *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *enable_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigDitherByStartDitherAction::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "enable",
    (const std::allocator<char> *)(v2 + 48));
  enable_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( enable_ptr && !fromJson<bool>(enable_ptr, &this->enable) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      797);
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[28])"fromJson for: enable fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    v6 = ((_BYTE)this + 1) & 7;
    v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
    if ( (_BYTE)v7 )
      __asan_report_store1(&this->is_json_loaded, v6, v7);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 805: range 000000000E6065B2-000000000E60671C
int32_t __cdecl data::ConfigDitherByStartDitherAction::getHashValue(
        const data::ConfigDitherByStartDitherAction *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:806";
  *(_QWORD *)(v2 + 16) = data::ConfigDitherByStartDitherAction::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  v5 = (unsigned __int8)this & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(this, v5, v6);
  common::tools::HashUtils::appendHash(this->enable, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 813: range 000000000E60671E-000000000E606A78
bool __cdecl data::ConfigDitherByBetweenCameraAndAvatar::fromJson(
        data::ConfigDitherByBetweenCameraAndAvatar *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *detect_dither_range_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigDitherByBetweenCameraAndAvatar::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "detectDitherRange",
    (const std::allocator<char> *)(v2 + 48));
  detect_dither_range_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( detect_dither_range_ptr && !fromJson<float>(detect_dither_range_ptr, (float *)this) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      823);
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[39])"fromJson for: detectDitherRange fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    v6 = ((_BYTE)this + 4) & 7;
    v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
    if ( (_BYTE)v7 )
      __asan_report_store1(&this->is_json_loaded, v6, v7);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 831: range 000000000E606A7A-000000000E606BE5
int32_t __cdecl data::ConfigDitherByBetweenCameraAndAvatar::getHashValue(
        const data::ConfigDitherByBetweenCameraAndAvatar *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:832";
  *(_QWORD *)(v2 + 16) = data::ConfigDitherByBetweenCameraAndAvatar::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->detect_dither_range, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 839: range 000000000E606BE6-000000000E606F40
bool __cdecl data::ConfigDitherByNormalBetweenCamera::fromJson(
        data::ConfigDitherByNormalBetweenCamera *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *detect_dither_range_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigDitherByNormalBetweenCamera::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "detectDitherRange",
    (const std::allocator<char> *)(v2 + 48));
  detect_dither_range_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( detect_dither_range_ptr && !fromJson<float>(detect_dither_range_ptr, (float *)this) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      849);
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[39])"fromJson for: detectDitherRange fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    v6 = ((_BYTE)this + 4) & 7;
    v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
    if ( (_BYTE)v7 )
      __asan_report_store1(&this->is_json_loaded, v6, v7);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 857: range 000000000E606F42-000000000E6070AD
int32_t __cdecl data::ConfigDitherByNormalBetweenCamera::getHashValue(
        const data::ConfigDitherByNormalBetweenCamera *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:858";
  *(_QWORD *)(v2 + 16) = data::ConfigDitherByNormalBetweenCamera::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->detect_dither_range, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 865: range 000000000E6070AE-000000000E607E50
bool __cdecl data::ConfigDither::fromJson(data::ConfigDither *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *show_dither_duration_ptr; // [rsp+18h] [rbp-348h]
  const Json::Value *start_dither_action_ptr; // [rsp+20h] [rbp-340h]
  const Json::Value *between_camera_and_avatar_ptr; // [rsp+28h] [rbp-338h]
  const Json::Value *normal_between_camera_ptr; // [rsp+30h] [rbp-330h]
  const Json::Value *hide_effect_when_dither_ptr; // [rsp+38h] [rbp-328h]
  char v13[800]; // [rsp+40h] [rbp-320h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(768LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "15 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 32 "
                        "9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9"
                        " <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigDither::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "showDitherDuration",
    (const std::allocator<char> *)(v2 + 48));
  show_dither_duration_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( show_dither_duration_ptr && !fromJson<float>(show_dither_duration_ptr, &this->show_dither_duration) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      875);
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[40])"fromJson for: showDitherDuration fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "startDitherAction",
      (const std::allocator<char> *)(v2 + 64));
    start_dither_action_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( start_dither_action_ptr
      && !data::ConfigDitherByStartDitherAction::fromJson(&this->start_dither_action, start_dither_action_ptr) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        887);
      common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[39])"fromJson for: startDitherAction fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "betweenCameraAndAvatar",
        (const std::allocator<char> *)(v2 + 80));
      between_camera_and_avatar_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( between_camera_and_avatar_ptr
        && !data::ConfigDitherByBetweenCameraAndAvatar::fromJson(
              &this->between_camera_and_avatar,
              between_camera_and_avatar_ptr) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          899);
        common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[44])"fromJson for: betweenCameraAndAvatar fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "normalBetweenCamera",
          (const std::allocator<char> *)(v2 + 96));
        normal_between_camera_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( normal_between_camera_ptr
          && !data::ConfigDitherByNormalBetweenCamera::fromJson(&this->normal_between_camera, normal_between_camera_ptr) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            911);
          common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[41])"fromJson for: normalBetweenCamera fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "hideEffectWhenDither",
            (const std::allocator<char> *)(v2 + 112));
          hide_effect_when_dither_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( hide_effect_when_dither_ptr
            && !fromJson<bool>(hide_effect_when_dither_ptr, &this->hide_effect_when_dither) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              923);
            common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[42])"fromJson for: hideEffectWhenDither fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            v6 = ((_BYTE)this + 25) & 7;
            v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
            if ( (_BYTE)v7 )
              __asan_report_store1(&this->is_json_loaded, v6, v7);
            this->is_json_loaded = 1;
            result = 1;
          }
        }
      }
    }
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 931: range 000000000E607E52-000000000E608072
int32_t __cdecl data::ConfigDither::getHashValue(const data::ConfigDither *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  __int64 v8; // rsi
  __int64 v9; // rdx
  int32_t result; // eax
  char v11[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:932";
  *(_QWORD *)(v2 + 16) = data::ConfigDither::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->show_dither_duration, (int32_t *)(v2 + 32));
  HashValue = data::ConfigDitherByStartDitherAction::getHashValue(&this->start_dither_action);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  v6 = data::ConfigDitherByBetweenCameraAndAvatar::getHashValue(&this->between_camera_and_avatar);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::ConfigDitherByNormalBetweenCamera::getHashValue(&this->normal_between_camera);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  v8 = ((_BYTE)this + 24) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->hide_effect_when_dither >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->hide_effect_when_dither >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&this->hide_effect_when_dither, v8, v9);
  common::tools::HashUtils::appendHash(this->hide_effect_when_dither, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 943: range 000000000E608074-000000000E608657
bool __cdecl data::ConfigGlobalValue::fromJson(data::ConfigGlobalValue *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::FloatMap *p_init_server_global_values; // rsi
  const Json::Value *server_global_values_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *init_server_global_values_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGlobalValue::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "serverGlobalValues",
    (const std::allocator<char> *)(v2 + 32));
  server_global_values_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( server_global_values_ptr && !data::arrFromJson(server_global_values_ptr, &this->server_global_values) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      953);
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[40])"fromJson for: serverGlobalValues fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "initServerGlobalValues",
      (const std::allocator<char> *)(v2 + 48));
    p_init_server_global_values = (data::FloatMap *)(v2 + 192);
    init_server_global_values_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( init_server_global_values_ptr
      && (p_init_server_global_values = &this->init_server_global_values,
          !data::mapFromJson(init_server_global_values_ptr, &this->init_server_global_values)) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        965);
      common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[44])"fromJson for: initServerGlobalValues fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_init_server_global_values, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 973: range 000000000E608658-000000000E6087B3
int32_t __cdecl data::ConfigGlobalValue::getHashValue(const data::ConfigGlobalValue *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t ArrHashValue; // eax
  int32_t MapHashValue; // eax
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 13 hash_code:974";
  *(_QWORD *)(v2 + 16) = data::ConfigGlobalValue::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  ArrHashValue = data::getArrHashValue(&this->server_global_values);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  MapHashValue = data::getMapHashValue(&this->init_server_global_values);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 982: range 000000000E6087B4-000000000E608B09
bool __cdecl data::ConfigEntityTags::fromJson(data::ConfigEntityTags *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigEntityTags *v5; // rsi
  bool result; // al
  const Json::Value *init_tags_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigEntityTags::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "initTags",
    (const std::allocator<char> *)(v2 + 48));
  v5 = (data::ConfigEntityTags *)(v2 + 64);
  init_tags_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( init_tags_ptr && (v5 = this, !data::arrFromJson(init_tags_ptr, &this->init_tags)) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      992);
    common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[30])"fromJson for: initTags fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1000: range 000000000E608B0A-000000000E608C44
int32_t __cdecl data::ConfigEntityTags::getHashValue(const data::ConfigEntityTags *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t ArrHashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:1001";
  *(_QWORD *)(v2 + 16) = data::ConfigEntityTags::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  ArrHashValue = data::getArrHashValue(&this->init_tags);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1008: range 000000000E608C45-000000000E608E7A
data::ConfigEntityPtr __cdecl data::createConfigEntity(const std::string *name)
{
  const std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *v1; // rsi
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > >::pointer v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(const std::string *, unsigned __int64); // rcx
  data::ConfigEntityPtr result; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > >::_Base_ptr)"2 32 8 7 it:1009 64 8 9 <unknown>";
  v2[2]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > >::_Base_ptr)data::createConfigEntity;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], v1);
  v2[4]._M_node = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::find(
                    &data::g_ConfigEntityMap[abi:cxx11],
                    v1)._M_node;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], v1);
  v2[8]._M_node = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::end(&data::g_ConfigEntityMap[abi:cxx11])._M_node;
  v5 = std::operator!=(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    v6 = std::_Rb_tree_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigEntity>>>::operator->(v2 + 4);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6->second);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 24LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
    v9 = *(void (__fastcall **)(const std::string *, unsigned __int64))v8;
    if ( *(_WORD *)(((unsigned __int64)name >> 3) + 0x7FFF8000) )
      v7 = __asan_report_store16();
    v9(name, v7);
  }
  else
  {
    std::shared_ptr<data::ConfigEntity>::shared_ptr((std::shared_ptr<data::ConfigEntity> *const)name, 0LL);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)name;
  return result;
};

// Line 1015: range 000000000E608E7C-000000000E6092BE
void __cdecl data::ConfigEntity::foreachMember(data::ConfigEntity *const this, std::function<void(std::any&)> *p_func)
{
  std::any *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[320]; // [rsp+10h] [rbp-140h] BYREF

  v2 = (std::any *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = (std::any *)v3;
  }
  v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1102416563;
  v2->_M_storage._M_ptr = "8 32 16 15 common_any:1016 64 16 21 head_control_any:1018 96 16 22 special_point_any:1020 128 "
                          "16 28 custom_attack_shape_any:1022 160 16 14 model_any:1024 192 16 15 dither_any:1026 224 16 2"
                          "1 global_value_any:1028 256 16 20 entity_tags_any:1030";
  v2[1]._M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))data::ConfigEntity::foreachMember;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -202178560;
  std::any::any<data::ConfigEntityCommon &,data::ConfigEntityCommon,std::any::_Manager_external<data::ConfigEntityCommon>,true,true>(
    v2 + 2,
    &this->common);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 2);
  std::any::any<std::shared_ptr<data::ConfigHeadControl> &,std::shared_ptr<data::ConfigHeadControl>,std::any::_Manager_external<std::shared_ptr<data::ConfigHeadControl>>,true,true>(
    v2 + 4,
    &this->head_control);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 4);
  std::any::any<data::ConfigEntityPoint &,data::ConfigEntityPoint,std::any::_Manager_external<data::ConfigEntityPoint>,true,true>(
    v2 + 6,
    &this->special_point);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 6);
  std::any::any<data::ConfigCustomAttackShape &,data::ConfigCustomAttackShape,std::any::_Manager_external<data::ConfigCustomAttackShape>,true,true>(
    v2 + 8,
    &this->custom_attack_shape);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 8);
  std::any::any<data::ConfigModel &,data::ConfigModel,std::any::_Manager_external<data::ConfigModel>,true,true>(
    v2 + 10,
    &this->model);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 10);
  std::any::any<data::ConfigDither &,data::ConfigDither,std::any::_Manager_external<data::ConfigDither>,true,true>(
    v2 + 12,
    &this->dither);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 12);
  std::any::any<data::ConfigGlobalValue &,data::ConfigGlobalValue,std::any::_Manager_external<data::ConfigGlobalValue>,true,true>(
    v2 + 14,
    &this->global_value);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 14);
  std::any::any<data::ConfigEntityTags &,data::ConfigEntityTags,std::any::_Manager_external<data::ConfigEntityTags>,true,true>(
    v2 + 16,
    &this->entity_tags);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 16);
  std::any::~any(v2 + 16);
  std::any::~any(v2 + 14);
  std::any::~any(v2 + 12);
  std::any::~any(v2 + 10);
  std::any::~any(v2 + 8);
  std::any::~any(v2 + 6);
  std::any::~any(v2 + 4);
  std::any::~any(v2 + 2);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 1035: range 000000000E6092C0-000000000E60930A
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigEntity::clone(data::ConfigEntity *const this)
{
  data::ConfigEntity *v1; // rsi
  std::shared_ptr<data::ConfigEntity> result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigEntity,data::ConfigEntity&>(
    (common::tools::perf::allocator<data::ConfigEntity,data::ConfigEntity> *)this,
    v1);
  result._M_ptr = this;
  return result;
};

// Line 1039: range 000000000E60930C-000000000E60A934
bool __cdecl data::ConfigEntity::fromJson(data::ConfigEntity *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  std::shared_ptr<data::ConfigHeadControl> *v6; // rax
  bool v7; // r15
  const Json::Value *v8; // rsi
  bool v9; // bl
  const Json::Value *common_ptr; // [rsp+10h] [rbp-550h]
  const Json::Value *head_control_ptr; // [rsp+18h] [rbp-548h]
  const Json::Value *special_point_ptr; // [rsp+20h] [rbp-540h]
  const Json::Value *custom_attack_shape_ptr; // [rsp+28h] [rbp-538h]
  const Json::Value *model_ptr; // [rsp+30h] [rbp-530h]
  const Json::Value *dither_ptr; // [rsp+38h] [rbp-528h]
  const Json::Value *global_value_ptr; // [rsp+40h] [rbp-520h]
  const Json::Value *entity_tags_ptr; // [rsp+48h] [rbp-518h]
  char v20[1296]; // [rsp+50h] [rbp-510h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "26 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 16 9 <unknown> 192 16 9 <unknown> 224 32 9 <un"
                        "known> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unk"
                        "nown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unkn"
                        "own> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigEntity::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 224),
    "common",
    (const std::allocator<char> *)(v2 + 32));
  common_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
  std::string::~string((void *)(v2 + 224));
  *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( common_ptr && !data::ConfigEntityCommon::fromJson(&this->common, common_ptr) )
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      1049);
    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
      (common::milog::MiLogStream *const)(v2 + 288),
      (const char (*)[28])"fromJson for: common fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 352),
      "headControl",
      (const std::allocator<char> *)(v2 + 48));
    head_control_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
    std::string::~string((void *)(v2 + 352));
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( head_control_ptr )
    {
      *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigHeadControl::parseFromJson((const Json::Value *)(v2 + 192));
      v6 = std::shared_ptr<data::ConfigHeadControl>::operator=(
             &this->head_control,
             (std::shared_ptr<data::ConfigHeadControl> *)(v2 + 192));
      v7 = std::operator==<data::ConfigHeadControl>(v6, 0LL);
      std::shared_ptr<data::ConfigHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)(v2 + 192));
      *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -1800;
      if ( v7 )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          1063);
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[33])"fromJson for: headControl fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      }
    }
    else
    {
      *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigHeadControl>();
      std::shared_ptr<data::ConfigHeadControl>::operator=(
        &this->head_control,
        (std::shared_ptr<data::ConfigHeadControl> *)(v2 + 160));
      std::shared_ptr<data::ConfigHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)(v2 + 160));
      *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -1800;
    }
    *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 480),
      "specialPoint",
      (const std::allocator<char> *)(v2 + 64));
    special_point_ptr = jsonValueFind(jval, (const std::string *)(v2 + 480));
    std::string::~string((void *)(v2 + 480));
    *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( special_point_ptr && !data::ConfigEntityPoint::fromJson(&this->special_point, special_point_ptr) )
    {
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 544, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 544),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        1074);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 544),
        (const char (*)[34])"fromJson for: specialPoint fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 608),
        "customAttackShape",
        (const std::allocator<char> *)(v2 + 80));
      custom_attack_shape_ptr = jsonValueFind(jval, (const std::string *)(v2 + 608));
      std::string::~string((void *)(v2 + 608));
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( custom_attack_shape_ptr
        && !data::ConfigCustomAttackShape::fromJson(&this->custom_attack_shape, custom_attack_shape_ptr) )
      {
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 672, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 672),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          1086);
        common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
          (common::milog::MiLogStream *const)(v2 + 672),
          (const char (*)[39])"fromJson for: customAttackShape fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 736),
          "model",
          (const std::allocator<char> *)(v2 + 96));
        model_ptr = jsonValueFind(jval, (const std::string *)(v2 + 736));
        std::string::~string((void *)(v2 + 736));
        *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( model_ptr && !data::ConfigModel::fromJson(&this->model, model_ptr) )
        {
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 800, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 800),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            1098);
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            (common::milog::MiLogStream *const)(v2 + 800),
            (const char (*)[27])"fromJson for: model fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 864),
            "dither",
            (const std::allocator<char> *)(v2 + 112));
          dither_ptr = jsonValueFind(jval, (const std::string *)(v2 + 864));
          std::string::~string((void *)(v2 + 864));
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( dither_ptr && !data::ConfigDither::fromJson(&this->dither, dither_ptr) )
          {
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 928) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 928, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 928),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              1110);
            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              (common::milog::MiLogStream *const)(v2 + 928),
              (const char (*)[28])"fromJson for: dither fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 928));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 992),
              "globalValue",
              (const std::allocator<char> *)(v2 + 128));
            global_value_ptr = jsonValueFind(jval, (const std::string *)(v2 + 992));
            std::string::~string((void *)(v2 + 992));
            *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( global_value_ptr && !data::ConfigGlobalValue::fromJson(&this->global_value, global_value_ptr) )
            {
              *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1056, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1056),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                1122);
              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                (common::milog::MiLogStream *const)(v2 + 1056),
                (const char (*)[33])"fromJson for: globalValue fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1056));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1120),
                "entityTags",
                (const std::allocator<char> *)(v2 + 144));
              v8 = (const Json::Value *)(v2 + 1120);
              entity_tags_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1120));
              std::string::~string((void *)(v2 + 1120));
              *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( entity_tags_ptr
                && (v8 = entity_tags_ptr, !data::ConfigEntityTags::fromJson(&this->entity_tags, entity_tags_ptr)) )
              {
                *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1184) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1184, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1184),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  1134);
                common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  (common::milog::MiLogStream *const)(v2 + 1184),
                  (const char (*)[32])"fromJson for: entityTags fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1184));
                v5 = 0;
              }
              else
              {
                if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                  __asan_report_store1(&this->is_json_loaded, v8, &this->is_json_loaded);
                this->is_json_loaded = 1;
                v5 = 1;
              }
            }
          }
        }
      }
    }
  }
  v9 = v5;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8070) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8080) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8088) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8090) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8098) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, v20);
  }
  return v9;
};

// Line 1141: range 000000000E60A936-000000000E60B291
data::ConfigEntityPtr __cdecl data::ConfigEntity::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigEntityPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-208h]
  char v14[512]; // [rsp+20h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 16 8 ptr:1154 96 32 9 <unknown> 160 32 9 <unknown> 224 32 14 type_name:114"
                        "8 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigEntity::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 224);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 224)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        1151);
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[40])"fromJson for: ConfigEntity $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigEntity>::shared_ptr((std::shared_ptr<data::ConfigEntity> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          1157);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 224));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigEntity>::shared_ptr((std::shared_ptr<data::ConfigEntity> *const)jval, 0LL);
      }
      else
      {
        v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 48LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            1162);
          v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                 (common::milog::MiLogStream *const)(v2 + 416),
                 (const std::string *)(v2 + 224));
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigEntity>::shared_ptr((std::shared_ptr<data::ConfigEntity> *const)jval, 0LL);
        }
        else
        {
          v10 = (__int64)std::__shared_ptr_access<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
          LOBYTE(v1) = v11 != 0;
          v12 = v11 < 0;
          if ( v12 )
            v10 = __asan_report_store1(v10 + 624, v1, v12);
          *(_BYTE *)(v10 + 624) = 1;
          std::shared_ptr<data::ConfigEntity>::shared_ptr(
            (std::shared_ptr<data::ConfigEntity> *const)jval,
            (std::shared_ptr<data::ConfigEntity> *)(v2 + 64));
        }
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 224));
  }
  else
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      1145);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[45])"jsonValueFind for: ConfigEntity $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigEntity>::shared_ptr((std::shared_ptr<data::ConfigEntity> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 1170: range 000000000E60B292-000000000E60B523
int32_t __cdecl data::ConfigEntity::getHashValue(const data::ConfigEntity *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  unsigned __int64 v6; // rax
  unsigned __int64 v7; // rdx
  int32_t v8; // eax
  int32_t v9; // eax
  int32_t v10; // eax
  int32_t v11; // eax
  int32_t v12; // eax
  int32_t v13; // eax
  int32_t v14; // eax
  int32_t result; // eax
  char v16[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:1171";
  *(_QWORD *)(v2 + 16) = data::ConfigEntity::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigEntityCommon::getHashValue(&this->common);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigHeadControl>(0LL, &this->head_control) )
  {
    v6 = (unsigned __int64)std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigHeadControl,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->head_control);
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8(v6);
    v7 = *(_QWORD *)v6 + 56LL;
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v6 = __asan_report_load8(*(_QWORD *)v6 + 56LL);
    v8 = (*(__int64 (__fastcall **)(unsigned __int64))v7)(v6);
    common::tools::HashUtils::appendHash(v8, (int32_t *)(v2 + 32));
  }
  v9 = data::ConfigEntityPoint::getHashValue(&this->special_point);
  common::tools::HashUtils::appendHash(v9, (int32_t *)(v2 + 32));
  v10 = data::ConfigCustomAttackShape::getHashValue(&this->custom_attack_shape);
  common::tools::HashUtils::appendHash(v10, (int32_t *)(v2 + 32));
  v11 = data::ConfigModel::getHashValue(&this->model);
  common::tools::HashUtils::appendHash(v11, (int32_t *)(v2 + 32));
  v12 = data::ConfigDither::getHashValue(&this->dither);
  common::tools::HashUtils::appendHash(v12, (int32_t *)(v2 + 32));
  v13 = data::ConfigGlobalValue::getHashValue(&this->global_value);
  common::tools::HashUtils::appendHash(v13, (int32_t *)(v2 + 32));
  v14 = data::ConfigEntityTags::getHashValue(&this->entity_tags);
  common::tools::HashUtils::appendHash(v14, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1188: range 000000000E60B524-000000000E60CEDD
bool __cdecl data::ConfigIntee::fromJson(data::ConfigIntee *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool v8; // bl
  const Json::Value *use_trigger_ptr; // [rsp+10h] [rbp-630h]
  const Json::Value *use_interaction_trigger_ptr; // [rsp+18h] [rbp-628h]
  const Json::Value *use_push_collider_ptr; // [rsp+20h] [rbp-620h]
  const Json::Value *use_head_control_trigger_ptr; // [rsp+28h] [rbp-618h]
  const Json::Value *trigger_radius_ptr; // [rsp+30h] [rbp-610h]
  const Json::Value *trigger_height_ptr; // [rsp+38h] [rbp-608h]
  const Json::Value *interaction_trigger_radius_ptr; // [rsp+40h] [rbp-600h]
  const Json::Value *head_ctrl_radius_ptr; // [rsp+48h] [rbp-5F8h]
  const Json::Value *trigger_offset_ptr; // [rsp+50h] [rbp-5F0h]
  const Json::Value *attention_angle_ptr; // [rsp+58h] [rbp-5E8h]
  char v20[1504]; // [rsp+60h] [rbp-5E0h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1472LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "30 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 32 9 <unkn"
                        "own> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unkno"
                        "wn> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknow"
                        "n> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unkn"
                        "own> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigIntee::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 192),
    "useTrigger",
    (const std::allocator<char> *)(v2 + 32));
  use_trigger_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
  std::string::~string((void *)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( use_trigger_ptr && !fromJson<bool>(use_trigger_ptr, &this->use_trigger) )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      1198);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[32])"fromJson for: useTrigger fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      "useInteractionTrigger",
      (const std::allocator<char> *)(v2 + 48));
    use_interaction_trigger_ptr = jsonValueFind(jval, (const std::string *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( use_interaction_trigger_ptr && !fromJson<bool>(use_interaction_trigger_ptr, &this->use_interaction_trigger) )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        1210);
      common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
        (common::milog::MiLogStream *const)(v2 + 384),
        (const char (*)[43])"fromJson for: useInteractionTrigger fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 448),
        "usePushCollider",
        (const std::allocator<char> *)(v2 + 64));
      use_push_collider_ptr = jsonValueFind(jval, (const std::string *)(v2 + 448));
      std::string::~string((void *)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( use_push_collider_ptr && !fromJson<bool>(use_push_collider_ptr, &this->use_push_collider) )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          1222);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          (common::milog::MiLogStream *const)(v2 + 512),
          (const char (*)[37])"fromJson for: usePushCollider fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 576),
          "useHeadControlTrigger",
          (const std::allocator<char> *)(v2 + 80));
        use_head_control_trigger_ptr = jsonValueFind(jval, (const std::string *)(v2 + 576));
        std::string::~string((void *)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( use_head_control_trigger_ptr
          && !fromJson<bool>(use_head_control_trigger_ptr, &this->use_head_control_trigger) )
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            1234);
          common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            (common::milog::MiLogStream *const)(v2 + 640),
            (const char (*)[43])"fromJson for: useHeadControlTrigger fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 704),
            "triggerRadius",
            (const std::allocator<char> *)(v2 + 96));
          trigger_radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
          std::string::~string((void *)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( trigger_radius_ptr && !fromJson<float>(trigger_radius_ptr, &this->trigger_radius) )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              1246);
            common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)(v2 + 768),
              (const char (*)[35])"fromJson for: triggerRadius fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 832),
              "triggerHeight",
              (const std::allocator<char> *)(v2 + 112));
            trigger_height_ptr = jsonValueFind(jval, (const std::string *)(v2 + 832));
            std::string::~string((void *)(v2 + 832));
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( trigger_height_ptr && !fromJson<float>(trigger_height_ptr, &this->trigger_height) )
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                1258);
              common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[35])"fromJson for: triggerHeight fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 128);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 960),
                "interactionTriggerRadius",
                (const std::allocator<char> *)(v2 + 128));
              interaction_trigger_radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 960));
              std::string::~string((void *)(v2 + 960));
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 128);
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
              if ( interaction_trigger_radius_ptr
                && !fromJson<float>(interaction_trigger_radius_ptr, &this->interaction_trigger_radius) )
              {
                *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1024, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1024),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  1270);
                common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                  (common::milog::MiLogStream *const)(v2 + 1024),
                  (const char (*)[46])"fromJson for: interactionTriggerRadius fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 144);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1088),
                  "headCtrlRadius",
                  (const std::allocator<char> *)(v2 + 144));
                head_ctrl_radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1088));
                std::string::~string((void *)(v2 + 1088));
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 144);
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
                if ( head_ctrl_radius_ptr && !fromJson<float>(head_ctrl_radius_ptr, &this->head_ctrl_radius) )
                {
                  *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1152, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1152),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    1282);
                  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    (common::milog::MiLogStream *const)(v2 + 1152),
                    (const char (*)[36])"fromJson for: headCtrlRadius fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 160);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1216),
                    "triggerOffset",
                    (const std::allocator<char> *)(v2 + 160));
                  trigger_offset_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1216));
                  std::string::~string((void *)(v2 + 1216));
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 160);
                  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                  if ( trigger_offset_ptr && !data::Vector::fromJson(&this->trigger_offset, trigger_offset_ptr) )
                  {
                    *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1280, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1280),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      1294);
                    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                      (common::milog::MiLogStream *const)(v2 + 1280),
                      (const char (*)[35])"fromJson for: triggerOffset fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 176);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1344),
                      "attentionAngle",
                      (const std::allocator<char> *)(v2 + 176));
                    attention_angle_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1344));
                    std::string::~string((void *)(v2 + 1344));
                    *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 176);
                    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                    if ( attention_angle_ptr && !fromJson<float>(attention_angle_ptr, &this->attention_angle) )
                    {
                      *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1408) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1408, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1408),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        1306);
                      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                        (common::milog::MiLogStream *const)(v2 + 1408),
                        (const char (*)[36])"fromJson for: attentionAngle fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1408));
                      v5 = 0;
                    }
                    else
                    {
                      v6 = ((_BYTE)this + 40) & 7;
                      v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
                      if ( (_BYTE)v7 )
                        __asan_report_store1(&this->is_json_loaded, v6, v7);
                      this->is_json_loaded = 1;
                      v5 = 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v8 = v5;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF807C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF809C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80AC) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B4) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1472LL, v20);
  }
  return v8;
};

// Line 1314: range 000000000E60CEDE-000000000E60D2F3
int32_t __cdecl data::ConfigIntee::getHashValue(const data::ConfigIntee *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  __int64 v11; // rsi
  __int64 v12; // rdx
  int32_t HashValue; // eax
  int32_t result; // eax
  char v15[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:1315";
  *(_QWORD *)(v2 + 16) = data::ConfigIntee::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  v5 = (unsigned __int8)this & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(this, v5, v6);
  common::tools::HashUtils::appendHash(this->use_trigger, (int32_t *)(v2 + 32));
  v7 = ((_BYTE)this + 1) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->use_interaction_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->use_interaction_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->use_interaction_trigger, v7, v8);
  common::tools::HashUtils::appendHash(this->use_interaction_trigger, (int32_t *)(v2 + 32));
  v9 = ((_BYTE)this + 2) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&this->use_push_collider >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->use_push_collider >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&this->use_push_collider, v9, v10);
  common::tools::HashUtils::appendHash(this->use_push_collider, (int32_t *)(v2 + 32));
  v11 = ((_BYTE)this + 3) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&this->use_head_control_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&this->use_head_control_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&this->use_head_control_trigger, v11, v12);
  common::tools::HashUtils::appendHash(this->use_head_control_trigger, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->trigger_radius);
  }
  common::tools::HashUtils::appendHash(this->trigger_radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_height >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->trigger_height);
  }
  common::tools::HashUtils::appendHash(this->trigger_height, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->interaction_trigger_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->interaction_trigger_radius >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->interaction_trigger_radius);
  }
  common::tools::HashUtils::appendHash(this->interaction_trigger_radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->head_ctrl_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->head_ctrl_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->head_ctrl_radius);
  }
  common::tools::HashUtils::appendHash(this->head_ctrl_radius, (int32_t *)(v2 + 32));
  HashValue = data::Vector::getHashValue(&this->trigger_offset);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->attention_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attention_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->attention_angle);
  }
  common::tools::HashUtils::appendHash(this->attention_angle, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1331: range 000000000E60D2F4-000000000E60DB87
bool __cdecl data::ConfigCharacterRendering::fromJson(
        data::ConfigCharacterRendering *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *override_light_dir_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *override_light_euler_angle_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *override_tick_interval_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCharacterRendering::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "overrideLightDir",
    (const std::allocator<char> *)(v2 + 48));
  override_light_dir_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( override_light_dir_ptr && !fromJson<bool>(override_light_dir_ptr, &this->override_light_dir) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      1341);
    common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[38])"fromJson for: overrideLightDir fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "overrideLightEulerAngle",
      (const std::allocator<char> *)(v2 + 64));
    override_light_euler_angle_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( override_light_euler_angle_ptr
      && !data::Vector::fromJson(&this->override_light_euler_angle, override_light_euler_angle_ptr) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        1353);
      common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[45])"fromJson for: overrideLightEulerAngle fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "overrideTickInterval",
        (const std::allocator<char> *)(v2 + 80));
      override_tick_interval_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( override_tick_interval_ptr && !fromJson<int>(override_tick_interval_ptr, &this->override_tick_interval) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          1365);
        common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[42])"fromJson for: overrideTickInterval fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        v6 = ((_BYTE)this + 24) & 7;
        v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
        if ( (_BYTE)v7 )
          __asan_report_store1(&this->is_json_loaded, v6, v7);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 1373: range 000000000E60DB88-000000000E60DD64
int32_t __cdecl data::ConfigCharacterRendering::getHashValue(const data::ConfigCharacterRendering *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t HashValue; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:1374";
  *(_QWORD *)(v2 + 16) = data::ConfigCharacterRendering::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  v5 = (unsigned __int8)this & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(this, v5, v6);
  common::tools::HashUtils::appendHash(this->override_light_dir, (int32_t *)(v2 + 32));
  HashValue = data::Vector::getHashValue(&this->override_light_euler_angle);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->override_tick_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->override_tick_interval >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->override_tick_interval);
  }
  common::tools::HashUtils::appendHash(this->override_tick_interval, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1383: range 000000000E60DD66-000000000E60E5F9
bool __cdecl data::ConfigPoseInitialParam::fromJson(data::ConfigPoseInitialParam *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::StringMap *p_bool_params; // rsi
  const Json::Value *int_params_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *float_params_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *bool_params_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPoseInitialParam::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "intParams",
    (const std::allocator<char> *)(v2 + 48));
  int_params_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( int_params_ptr && !data::mapFromJson(int_params_ptr, &this->int_params) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      1393);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[31])"fromJson for: intParams fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "floatParams",
      (const std::allocator<char> *)(v2 + 64));
    float_params_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( float_params_ptr && !data::mapFromJson(float_params_ptr, &this->float_params) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        1405);
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[33])"fromJson for: floatParams fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "boolParams",
        (const std::allocator<char> *)(v2 + 80));
      p_bool_params = (data::StringMap *)(v2 + 352);
      bool_params_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( bool_params_ptr
        && (p_bool_params = &this->bool_params, !data::mapFromJson(bool_params_ptr, &this->bool_params)) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          1417);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[32])"fromJson for: boolParams fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(&this->is_json_loaded, p_bool_params, &this->is_json_loaded);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 1425: range 000000000E60E5FA-000000000E60E776
int32_t __cdecl data::ConfigPoseInitialParam::getHashValue(const data::ConfigPoseInitialParam *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t MapHashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:1426";
  *(_QWORD *)(v2 + 16) = data::ConfigPoseInitialParam::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  MapHashValue = data::getMapHashValue(&this->int_params);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  v6 = data::getMapHashValue(&this->float_params);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::getMapHashValue(&this->bool_params);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1434: range 000000000E60E777-000000000E60EA55
const char *__cdecl data::enumValToStr(data::TouchInteractType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  switch ( e )
  {
    case Default_8:
      result = "Default";
      break;
    case NormalChest:
      result = "NormalChest";
      break;
    case FloraChest:
      result = "FloraChest";
      break;
    case MultipleReward:
      result = "MultipleReward";
      break;
    case SingleReward:
      result = "SingleReward";
      break;
    case OwnerOnlyReward:
      result = "OwnerOnlyReward";
      break;
    case GadgetChain:
      result = "GadgetChain";
      break;
    case WidgetMPSupport:
      result = "WidgetMPSupport";
      break;
    case PostUIInteractGadgetAction:
      result = "PostUIInteractGadgetAction";
      break;
    case GeneralUIInteract:
      result = "GeneralUIInteract";
      break;
    default:
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        1458);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
      break;
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1464: range 000000000E60EA56-000000000E60F762
bool __cdecl data::enumStrToVal(const std::string *s, data::TouchInteractType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::TouchInteractType> *i; // r14
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::TouchInteractType> >::pointer v10; // rax
  data::TouchInteractType second; // ecx
  char v12; // dl
  data::TouchInteractType *ea; // [rsp+10h] [rbp-3C0h]
  char v14[944]; // [rsp+20h] [rbp-3B0h] BYREF

  ea = e;
  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(896LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 8 7 it:1483 272 8 9 <unknown> 304 32 9 <unknown> 368 32 9 <unknown> 4"
                        "32 400 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = 61956;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862746] = -202116109;
  v4[536862747] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 304),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      1467);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 304),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::TouchInteractType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::TouchInteractType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[8],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 432),
        (const char (*)[8])"Default",
        (data::TouchInteractType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "Default");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[12],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 472),
        (const char (*)[12])"NormalChest",
        (data::TouchInteractType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "NormalChest");
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[11],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 512),
        (const char (*)[11])"FloraChest",
        (data::TouchInteractType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, "FloraChest");
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[15],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 552),
        (const char (*)[15])"MultipleReward",
        (data::TouchInteractType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, "MultipleReward");
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[13],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 592),
        (const char (*)[13])"SingleReward",
        (data::TouchInteractType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, "SingleReward");
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[16],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 632),
        (const char (*)[16])"OwnerOnlyReward",
        (data::TouchInteractType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, "OwnerOnlyReward");
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[12],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 672),
        (const char (*)[12])"GadgetChain",
        (data::TouchInteractType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, "GadgetChain");
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[16],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 712),
        (const char (*)[16])"WidgetMPSupport",
        (data::TouchInteractType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, "WidgetMPSupport");
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[27],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 752),
        (const char (*)[27])"PostUIInteractGadgetAction",
        (data::TouchInteractType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, "PostUIInteractGadgetAction");
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::TouchInteractType>::pair<char const(&)[18],data::TouchInteractType,true>(
        (std::pair<const std::string,data::TouchInteractType> *const)(v2 + 792),
        (const char (*)[18])"GeneralUIInteract",
        (data::TouchInteractType *)(v2 + 224));
      std::allocator<std::pair<std::string const,data::TouchInteractType>>::allocator((std::allocator<std::pair<const std::string,data::TouchInteractType> > *const)(v2 + 64));
      std::map<std::string,data::TouchInteractType>::map(
        &data::enumStrToVal(std::string const&,data::TouchInteractType &)::m,
        (std::initializer_list<std::pair<const std::string,data::TouchInteractType> >)__PAIR128__(10LL, v2 + 432),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::TouchInteractType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::TouchInteractType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::TouchInteractType>::~map,
        &data::enumStrToVal(std::string const&,data::TouchInteractType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::TouchInteractType>>::~allocator((std::allocator<std::pair<const std::string,data::TouchInteractType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::TouchInteractType> *)(v2 + 832);
            i != (std::pair<const std::string,data::TouchInteractType> *)(v2 + 432);
            std::pair<std::string const,data::TouchInteractType>::~pair(i) )
      {
        --i;
      }
      e = (data::TouchInteractType *)400;
      __asan_poison_stack_memory(v2 + 432, 400LL);
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, e);
    *(std::map<std::string,data::TouchInteractType>::iterator *)(v2 + 240) = std::map<std::string,data::TouchInteractType>::find(
                                                                               &data::enumStrToVal(std::string const&,data::TouchInteractType &)::m,
                                                                               s);
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 272, s);
    *(std::map<std::string,data::TouchInteractType>::iterator *)(v2 + 272) = std::map<std::string,data::TouchInteractType>::end(&data::enumStrToVal(std::string const&,data::TouchInteractType &)::m);
    v7 = (char *)(v2 + 272);
    v8 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::TouchInteractType> >::_Self *)(v2 + 240),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::TouchInteractType> >::_Self *)(v2 + 272));
    *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 368, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 368),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        1486);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 368),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
      result = 0;
    }
    else
    {
      v10 = std::_Rb_tree_iterator<std::pair<std::string const,data::TouchInteractType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::TouchInteractType> > *const)(v2 + 240));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(ea, v7);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 112) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1494: range 000000000E60F763-000000000E60F7F5
const char *__cdecl data::getDescription(data::TouchInteractType e)
{
  const char *result; // rax

  switch ( e )
  {
    case Default_8:
      result = (const char *)&unk_1A3B5020;
      break;
    case NormalChest:
      result = (const char *)&unk_1A3B5060;
      break;
    case FloraChest:
      result = (const char *)&unk_1A3B50A0;
      break;
    case MultipleReward:
      result = (const char *)&unk_1A3B50E0;
      break;
    case SingleReward:
      result = (const char *)&unk_1A3B5120;
      break;
    case OwnerOnlyReward:
      result = (const char *)&unk_1A3B5160;
      break;
    case GadgetChain:
      result = (const char *)&unk_1A3B5220;
      break;
    case WidgetMPSupport:
      result = (const char *)&unk_1A3B5260;
      break;
    case PostUIInteractGadgetAction:
      result = (const char *)&unk_1A3B52C0;
      break;
    case GeneralUIInteract:
      result = (const char *)&unk_1A3B5300;
      break;
    default:
      result = "unknown enum value!";
      break;
  }
  return result;
};

// Line 1523: range 000000000E60F7F6-000000000E60FA55
const char *__cdecl data::enumValToStr(data::GadgetInteractItemType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e )
  {
    if ( e == RegionalPlay )
    {
      result = "RegionalPlay";
    }
    else
    {
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        1531);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
  else
  {
    result = "Default";
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1537: range 000000000E60FA56-000000000E61028D
bool __cdecl data::enumStrToVal(const std::string *s, data::GadgetInteractItemType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::GadgetInteractItemType> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetInteractItemType> >::pointer v11; // rax
  data::GadgetInteractItemType second; // ecx
  char v13; // dl
  data::GadgetInteractItemType *ea; // [rsp+10h] [rbp-1E0h]
  char v15[464]; // [rsp+20h] [rbp-1D0h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(416LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 8 7 it:1548 144 8 9 <u"
                        "nknown> 176 32 9 <unknown> 240 32 9 <unknown> 304 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862732] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 176, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 176),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      1540);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 176),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::GadgetInteractItemType>::pair<char const(&)[8],data::GadgetInteractItemType,true>(
        (std::pair<const std::string,data::GadgetInteractItemType> *const)(v2 + 304),
        (const char (*)[8])"Default",
        (data::GadgetInteractItemType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "Default");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::GadgetInteractItemType>::pair<char const(&)[13],data::GadgetInteractItemType,true>(
        (std::pair<const std::string,data::GadgetInteractItemType> *const)(v2 + 344),
        (const char (*)[13])"RegionalPlay",
        (data::GadgetInteractItemType *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::GadgetInteractItemType>>::allocator((std::allocator<std::pair<const std::string,data::GadgetInteractItemType> > *const)(v2 + 64));
      std::map<std::string,data::GadgetInteractItemType>::map(
        &data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m,
        (std::initializer_list<std::pair<const std::string,data::GadgetInteractItemType> >)__PAIR128__(2LL, v2 + 304),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::GadgetInteractItemType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m);
      e = (data::GadgetInteractItemType *)&data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::GadgetInteractItemType>::~map,
        &data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::GadgetInteractItemType>>::~allocator((std::allocator<std::pair<const std::string,data::GadgetInteractItemType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::GadgetInteractItemType> *)(v2 + 384);
            i != (std::pair<const std::string,data::GadgetInteractItemType> *)(v2 + 304);
            std::pair<std::string const,data::GadgetInteractItemType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 304) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, e);
    *(std::map<std::string,data::GadgetInteractItemType>::iterator *)(v2 + 112) = std::map<std::string,data::GadgetInteractItemType>::find(
                                                                                    &data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m,
                                                                                    s);
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, s);
    *(std::map<std::string,data::GadgetInteractItemType>::iterator *)(v2 + 144) = std::map<std::string,data::GadgetInteractItemType>::end(&data::enumStrToVal(std::string const&,data::GadgetInteractItemType &)::m);
    v8 = (char *)(v2 + 144);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetInteractItemType> >::_Self *)(v2 + 112),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetInteractItemType> >::_Self *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 111) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        1551);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::GadgetInteractItemType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetInteractItemType> > *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 1559: range 000000000E61028E-000000000E6102BD
const char *__cdecl data::getDescription(data::GadgetInteractItemType e)
{
  if ( e == Default_9 )
    return (const char *)&unk_1A38A240;
  if ( e == RegionalPlay )
    return "RegionalPlay";
  return "unknown enum value!";
};

// Line 1572: range 000000000E6102BE-000000000E610568
const char *__cdecl data::enumValToStr(data::GadgetUIItemShowCondType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  switch ( e )
  {
    case NONE_16:
      result = "NONE";
      break;
    case HOST:
      result = "HOST";
      break;
    case GUEST:
      result = "GUEST";
      break;
    case CUSTOM_COOP_FRAME_CHECK:
      result = "CUSTOM_COOP_FRAME_CHECK";
      break;
    case GCG_CHAR_CHALLENGE_NEW:
      result = "GCG_CHAR_CHALLENGE_NEW";
      break;
    case GCG_PVP_ENTRY_NEW:
      result = "GCG_PVP_ENTRY_NEW";
      break;
    default:
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        1588);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
      break;
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1594: range 000000000E610569-000000000E611071
bool __cdecl data::enumStrToVal(const std::string *s, data::GadgetUIItemShowCondType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::GadgetUIItemShowCondType> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetUIItemShowCondType> >::pointer v11; // rax
  data::GadgetUIItemShowCondType second; // ecx
  char v13; // dl
  data::GadgetUIItemShowCondType *ea; // [rsp+10h] [rbp-2E0h]
  char v15[720]; // [rsp+20h] [rbp-2D0h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(672LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 8 7 it:1609 208 8 9 <unknown> 240 32 9 <unkno"
                        "wn> 304 32 9 <unknown> 368 240 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = 61956;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862739] = -202116109;
  v4[536862740] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 111) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 240),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      1597);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 240),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::GadgetUIItemShowCondType>::pair<char const(&)[5],data::GadgetUIItemShowCondType,true>(
        (std::pair<const std::string,data::GadgetUIItemShowCondType> *const)(v2 + 368),
        (const char (*)[5])"NONE",
        (data::GadgetUIItemShowCondType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "NONE");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::GadgetUIItemShowCondType>::pair<char const(&)[5],data::GadgetUIItemShowCondType,true>(
        (std::pair<const std::string,data::GadgetUIItemShowCondType> *const)(v2 + 408),
        (const char (*)[5])"HOST",
        (data::GadgetUIItemShowCondType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "HOST");
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::GadgetUIItemShowCondType>::pair<char const(&)[6],data::GadgetUIItemShowCondType,true>(
        (std::pair<const std::string,data::GadgetUIItemShowCondType> *const)(v2 + 448),
        (const char (*)[6])"GUEST",
        (data::GadgetUIItemShowCondType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, "GUEST");
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::GadgetUIItemShowCondType>::pair<char const(&)[24],data::GadgetUIItemShowCondType,true>(
        (std::pair<const std::string,data::GadgetUIItemShowCondType> *const)(v2 + 488),
        (const char (*)[24])"CUSTOM_COOP_FRAME_CHECK",
        (data::GadgetUIItemShowCondType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, "CUSTOM_COOP_FRAME_CHECK");
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::GadgetUIItemShowCondType>::pair<char const(&)[23],data::GadgetUIItemShowCondType,true>(
        (std::pair<const std::string,data::GadgetUIItemShowCondType> *const)(v2 + 528),
        (const char (*)[23])"GCG_CHAR_CHALLENGE_NEW",
        (data::GadgetUIItemShowCondType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, "GCG_CHAR_CHALLENGE_NEW");
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::GadgetUIItemShowCondType>::pair<char const(&)[18],data::GadgetUIItemShowCondType,true>(
        (std::pair<const std::string,data::GadgetUIItemShowCondType> *const)(v2 + 568),
        (const char (*)[18])"GCG_PVP_ENTRY_NEW",
        (data::GadgetUIItemShowCondType *)(v2 + 160));
      std::allocator<std::pair<std::string const,data::GadgetUIItemShowCondType>>::allocator((std::allocator<std::pair<const std::string,data::GadgetUIItemShowCondType> > *const)(v2 + 64));
      std::map<std::string,data::GadgetUIItemShowCondType>::map(
        &data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m,
        (std::initializer_list<std::pair<const std::string,data::GadgetUIItemShowCondType> >)__PAIR128__(6LL, v2 + 368),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::GadgetUIItemShowCondType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m);
      e = (data::GadgetUIItemShowCondType *)&data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::GadgetUIItemShowCondType>::~map,
        &data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::GadgetUIItemShowCondType>>::~allocator((std::allocator<std::pair<const std::string,data::GadgetUIItemShowCondType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::GadgetUIItemShowCondType> *)(v2 + 608);
            i != (std::pair<const std::string,data::GadgetUIItemShowCondType> *)(v2 + 368);
            std::pair<std::string const,data::GadgetUIItemShowCondType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 368) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_DWORD *)(v7 + 12) = -117901064;
      *(_DWORD *)(v7 + 16) = -117901064;
      *(_DWORD *)(v7 + 20) = -117901064;
      *(_DWORD *)(v7 + 24) = -117901064;
      *(_WORD *)(v7 + 28) = -1800;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 176, e);
    *(std::map<std::string,data::GadgetUIItemShowCondType>::iterator *)(v2 + 176) = std::map<std::string,data::GadgetUIItemShowCondType>::find(
                                                                                      &data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m,
                                                                                      s);
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, s);
    *(std::map<std::string,data::GadgetUIItemShowCondType>::iterator *)(v2 + 208) = std::map<std::string,data::GadgetUIItemShowCondType>::end(&data::enumStrToVal(std::string const&,data::GadgetUIItemShowCondType &)::m);
    v8 = (char *)(v2 + 208);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetUIItemShowCondType> >::_Self *)(v2 + 176),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetUIItemShowCondType> >::_Self *)(v2 + 208));
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 304, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 304),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        1612);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 304),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::GadgetUIItemShowCondType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetUIItemShowCondType> > *const)(v2 + 176));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 84) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 1620: range 000000000E611072-000000000E6110E0
const char *__cdecl data::getDescription(data::GadgetUIItemShowCondType e)
{
  const char *result; // rax

  switch ( e )
  {
    case NONE_16:
      result = (const char *)&unk_1A3B5760;
      break;
    case HOST:
      result = (const char *)&unk_1A3B57A0;
      break;
    case GUEST:
      result = (const char *)&unk_1A3B57E0;
      break;
    case CUSTOM_COOP_FRAME_CHECK:
      result = (const char *)&unk_1A3B5820;
      break;
    case GCG_CHAR_CHALLENGE_NEW:
      result = (const char *)&unk_1A3B5860;
      break;
    case GCG_PVP_ENTRY_NEW:
      result = (const char *)&unk_1A3B58A0;
      break;
    default:
      result = "unknown enum value!";
      break;
  }
  return result;
};

// Line 1641: range 000000000E6110E1-000000000E6113BD
bool __cdecl data::arrFromJson(const Json::Value *jval, data::GadgetUIShowCondTypeArray *v)
{
  bool v2; // r15
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int v6; // eax
  bool result; // al
  data::GadgetUIShowCondTypeArray *va; // [rsp+0h] [rbp-D0h]
  Json::Value *jvala; // [rsp+8h] [rbp-C8h]
  uint32_t i; // [rsp+14h] [rbp-BCh]
  const Json::Value *elem_jval; // [rsp+18h] [rbp-B8h]
  char v12[176]; // [rsp+20h] [rbp-B0h] BYREF

  jvala = (Json::Value *)jval;
  LODWORD(va) = (_DWORD)v;
  v3 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 48 4 9 elem:1647 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = data::arrFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -234556943;
  v5[536862723] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jvala); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[](jvala, i, (int)va, (char)jvala);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v6 = 0;
    }
    else
    {
      *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = 4;
      if ( !fromJson<data::GadgetUIItemShowCondType>(elem_jval, (data::GadgetUIItemShowCondType *)(v3 + 48)) )
      {
        *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 64, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 64),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "arrFromJson",
          1650);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 64),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
        *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v6 = 1;
      }
      else
      {
        std::vector<data::GadgetUIItemShowCondType>::push_back(
          va,
          (const std::vector<data::GadgetUIItemShowCondType>::value_type *)(v3 + 48));
        v6 = 2;
      }
    }
    *(_BYTE *)(((v3 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v6 && v6 != 2 )
      goto LABEL_17;
  }
  v2 = 1;
LABEL_17:
  result = v2;
  if ( v12 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1660: range 000000000E6113BE-000000000E61163F
int32_t __cdecl data::getArrHashValue(const data::GadgetUIShowCondTypeArray *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::GadgetUIItemShowCondType *v5; // rax
  int32_t result; // eax
  int32_t *elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:1661 64 8 16 __for_begin:1662 96 8 14 __for_end:1662";
  *(_QWORD *)(v2 + 16) = data::getArrHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::GadgetUIItemShowCondType>::const_iterator *)(v2 + 64) = std::vector<data::GadgetUIItemShowCondType>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::GadgetUIItemShowCondType>::const_iterator *)(v2 + 96) = std::vector<data::GadgetUIItemShowCondType>::end(vec);
  while ( __gnu_cxx::operator!=<data::GadgetUIItemShowCondType const*,std::vector<data::GadgetUIItemShowCondType>>(
            (const __gnu_cxx::__normal_iterator<const data::GadgetUIItemShowCondType*,std::vector<data::GadgetUIItemShowCondType> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::GadgetUIItemShowCondType*,std::vector<data::GadgetUIItemShowCondType> > *)(v2 + 96)) )
  {
    v5 = (data::GadgetUIItemShowCondType *)__gnu_cxx::__normal_iterator<data::GadgetUIItemShowCondType const*,std::vector<data::GadgetUIItemShowCondType>>::operator*((const __gnu_cxx::__normal_iterator<const data::GadgetUIItemShowCondType*,std::vector<data::GadgetUIItemShowCondType> > *const)(v2 + 64));
    elem = (int32_t *)v5;
    if ( *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)v5 & 7) + 3) >= *(_BYTE *)(((unsigned __int64)v5 >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(v5);
    }
    common::tools::HashUtils::appendHash(*elem, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::GadgetUIItemShowCondType const*,std::vector<data::GadgetUIItemShowCondType>>::operator++((__gnu_cxx::__normal_iterator<const data::GadgetUIItemShowCondType*,std::vector<data::GadgetUIItemShowCondType> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1671: range 000000000E611640-000000000E611875
data::ConfigGadgetUIBasePtr __cdecl data::createConfigGadgetUIBase(const std::string *name)
{
  const std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::key_type *v1; // rsi
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > >::pointer v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(const std::string *, unsigned __int64); // rcx
  data::ConfigGadgetUIBasePtr result; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > >::_Base_ptr)"2 32 8 7 it:1672 64 8 9 <unknown>";
  v2[2]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > >::_Base_ptr)data::createConfigGadgetUIBase;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], v1);
  v2[4]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::find(
                    &data::g_ConfigGadgetUIBaseMap[abi:cxx11],
                    v1)._M_node;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], v1);
  v2[8]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::end(&data::g_ConfigGadgetUIBaseMap[abi:cxx11])._M_node;
  v5 = std::operator!=(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    v6 = std::_Rb_tree_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetUIBase>>>::operator->(v2 + 4);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6->second);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 24LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
    v9 = *(void (__fastcall **)(const std::string *, unsigned __int64))v8;
    if ( *(_WORD *)(((unsigned __int64)name >> 3) + 0x7FFF8000) )
      v7 = __asan_report_store16();
    v9(name, v7);
  }
  else
  {
    std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr((std::shared_ptr<data::ConfigGadgetUIBase> *const)name, 0LL);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2>::element_type *)name;
  return result;
};

// Line 1678: range 000000000E611876-000000000E611EE2
void __cdecl data::ConfigGadgetUIBase::foreachMember(
        data::ConfigGadgetUIBase *const this,
        std::function<void(std::any&)> *p_func)
{
  std::any *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[480]; // [rsp+10h] [rbp-1E0h] BYREF

  v2 = (std::any *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(448LL);
    if ( v3 )
      v2 = (std::any *)v3;
  }
  v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1102416563;
  v2->_M_storage._M_ptr = "13 32 16 30 gadget_uibtn_cfg_path_any:1679 64 16 16 ui_name_any:1681 96 16 17 on_touch_any:168"
                          "3 128 16 21 touch_params_any:1685 160 16 23 show_comb_type_any:1687 192 16 24 show_cond_types_"
                          "any:1689 224 16 34 post_gadget_action_params_any:1691 256 16 13 icon_any:1693 288 16 19 group_"
                          "name_any:1695 320 16 18 item_type_any:1697 352 16 28 need_dialog_confirm_any:1699 384 16 29 co"
                          "nfirm_dialog_title_any:1701 416 16 31 confirm_dialog_content_any:1703";
  v2[1]._M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))data::ConfigGadgetUIBase::foreachMember;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -202178560;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 2,
    &this->gadget_uibtn_cfg_path);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 2);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(v2 + 4, &this->ui_name);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 4);
  std::any::any<data::TouchInteractType &,data::TouchInteractType,std::any::_Manager_internal<data::TouchInteractType>,true,true>(
    v2 + 6,
    &this->on_touch);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 6);
  std::any::any<std::vector<std::string> &,std::vector<std::string>,std::any::_Manager_external<std::vector<std::string>>,true,true>(
    v2 + 8,
    &this->touch_params);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 8);
  std::any::any<data::LogicType &,data::LogicType,std::any::_Manager_internal<data::LogicType>,true,true>(
    v2 + 10,
    &this->show_comb_type);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 10);
  std::any::any<std::vector<data::GadgetUIItemShowCondType> &,std::vector<data::GadgetUIItemShowCondType>,std::any::_Manager_external<std::vector<data::GadgetUIItemShowCondType>>,true,true>(
    v2 + 12,
    &this->show_cond_types);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 12);
  std::any::any<std::vector<float> &,std::vector<float>,std::any::_Manager_external<std::vector<float>>,true,true>(
    v2 + 14,
    &this->post_gadget_action_params);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 14);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(v2 + 16, &this->icon);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 16);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 18,
    &this->group_name);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 18);
  std::any::any<data::GadgetInteractItemType &,data::GadgetInteractItemType,std::any::_Manager_internal<data::GadgetInteractItemType>,true,true>(
    v2 + 20,
    &this->item_type);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 20);
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(v2 + 22, &this->need_dialog_confirm);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 22);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 24,
    &this->confirm_dialog_title);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 24);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 26,
    &this->confirm_dialog_content);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 26);
  std::any::~any(v2 + 26);
  std::any::~any(v2 + 24);
  std::any::~any(v2 + 22);
  std::any::~any(v2 + 20);
  std::any::~any(v2 + 18);
  std::any::~any(v2 + 16);
  std::any::~any(v2 + 14);
  std::any::~any(v2 + 12);
  std::any::~any(v2 + 10);
  std::any::~any(v2 + 8);
  std::any::~any(v2 + 6);
  std::any::~any(v2 + 4);
  std::any::~any(v2 + 2);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1708: range 000000000E611EE4-000000000E611F2E
std::shared_ptr<data::ConfigGadgetUIBase> __cdecl data::ConfigGadgetUIBase::clone(data::ConfigGadgetUIBase *const this)
{
  data::ConfigGadgetUIBase *v1; // rsi
  std::shared_ptr<data::ConfigGadgetUIBase> result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetUIBase,data::ConfigGadgetUIBase&>(
    (common::tools::perf::allocator<data::ConfigGadgetUIBase,data::ConfigGadgetUIBase> *)this,
    v1);
  result._M_ptr = this;
  return result;
};

// Line 1712: range 000000000E611F30-000000000E614383
bool __cdecl data::ConfigGadgetUIBase::fromJson(data::ConfigGadgetUIBase *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  bool v6; // r15
  bool v7; // r15
  bool v8; // r15
  std::string *p_confirm_dialog_content; // rsi
  bool v10; // bl
  const Json::Value *gadget_uibtn_cfg_path_ptr; // [rsp+18h] [rbp-8D8h]
  const Json::Value *ui_name_ptr; // [rsp+20h] [rbp-8D0h]
  Json::Value *on_touch_ptr; // [rsp+28h] [rbp-8C8h]
  const Json::Value *touch_params_ptr; // [rsp+30h] [rbp-8C0h]
  Json::Value *show_comb_type_ptr; // [rsp+38h] [rbp-8B8h]
  const Json::Value *show_cond_types_ptr; // [rsp+40h] [rbp-8B0h]
  const Json::Value *post_gadget_action_params_ptr; // [rsp+48h] [rbp-8A8h]
  const Json::Value *icon_ptr; // [rsp+50h] [rbp-8A0h]
  const Json::Value *group_name_ptr; // [rsp+58h] [rbp-898h]
  Json::Value *item_type_ptr; // [rsp+60h] [rbp-890h]
  const Json::Value *need_dialog_confirm_ptr; // [rsp+68h] [rbp-888h]
  const Json::Value *confirm_dialog_title_ptr; // [rsp+70h] [rbp-880h]
  const Json::Value *confirm_dialog_content_ptr; // [rsp+78h] [rbp-878h]
  char v26[2160]; // [rsp+80h] [rbp-870h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2112LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "42 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown"
                        "> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown>"
                        " 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown>"
                        " 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unkn"
                        "own> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 32 9 <"
                        "unknown> 1728 32 9 <unknown> 1792 32 9 <unknown> 1856 32 9 <unknown> 1920 32 9 <unknown> 1984 32"
                        " 9 <unknown> 2048 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIBase::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -218959118;
  v4[536862775] = -218959118;
  v4[536862777] = -218959118;
  v4[536862779] = -218959118;
  v4[536862781] = -218959118;
  v4[536862783] = -218959118;
  v4[536862785] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 256),
    "gadgetUIBtnCfgPath",
    (const std::allocator<char> *)(v2 + 48));
  gadget_uibtn_cfg_path_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
  std::string::~string((void *)(v2 + 256));
  *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( gadget_uibtn_cfg_path_ptr && !fromJson<std::string>(gadget_uibtn_cfg_path_ptr, &this->gadget_uibtn_cfg_path) )
  {
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 320),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      1722);
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      (common::milog::MiLogStream *const)(v2 + 320),
      (const char (*)[40])"fromJson for: gadgetUIBtnCfgPath fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 384),
      "uiName",
      (const std::allocator<char> *)(v2 + 64));
    ui_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
    std::string::~string((void *)(v2 + 384));
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( ui_name_ptr && !fromJson<std::string>(ui_name_ptr, &this->ui_name) )
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        1734);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v2 + 448),
        (const char (*)[28])"fromJson for: uiName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 512),
        "onTouch",
        (const std::allocator<char> *)(v2 + 80));
      on_touch_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 512));
      std::string::~string((void *)(v2 + 512));
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( !on_touch_ptr )
        goto LABEL_21;
      *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 576, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 576), (Json::Value_0 *)on_touch_ptr);
      v6 = !data::enumStrToVal((const std::string *)(v2 + 576), &this->on_touch);
      std::string::~string((void *)(v2 + 576));
      *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
      if ( v6 )
      {
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          1746);
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
          (common::milog::MiLogStream *const)(v2 + 640),
          (const char (*)[29])"fromJson for: onTouch fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
        v5 = 0;
      }
      else
      {
LABEL_21:
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 704),
          "touchParams",
          (const std::allocator<char> *)(v2 + 96));
        touch_params_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
        std::string::~string((void *)(v2 + 704));
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( touch_params_ptr && !data::arrFromJson(touch_params_ptr, &this->touch_params) )
        {
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 768, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 768),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            1758);
          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            (common::milog::MiLogStream *const)(v2 + 768),
            (const char (*)[33])"fromJson for: touchParams fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 832),
            "showCombType",
            (const std::allocator<char> *)(v2 + 112));
          show_comb_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 832));
          std::string::~string((void *)(v2 + 832));
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( !show_comb_type_ptr )
            goto LABEL_33;
          *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 896, 32LL);
          }
          Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 896), (Json::Value_0 *)show_comb_type_ptr);
          v7 = !data::enumStrToVal((const std::string *)(v2 + 896), &this->show_comb_type);
          std::string::~string((void *)(v2 + 896));
          *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
          if ( v7 )
          {
            *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 960, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 960),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              1770);
            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v2 + 960),
              (const char (*)[34])"fromJson for: showCombType fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
            v5 = 0;
          }
          else
          {
LABEL_33:
            *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1024),
              "showCondTypes",
              (const std::allocator<char> *)(v2 + 128));
            show_cond_types_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1024));
            std::string::~string((void *)(v2 + 1024));
            *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( show_cond_types_ptr && !data::arrFromJson(show_cond_types_ptr, &this->show_cond_types) )
            {
              *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1088, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1088),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                1782);
              common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                (common::milog::MiLogStream *const)(v2 + 1088),
                (const char (*)[35])"fromJson for: showCondTypes fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1152),
                "postGadgetActionParams",
                (const std::allocator<char> *)(v2 + 144));
              post_gadget_action_params_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1152));
              std::string::~string((void *)(v2 + 1152));
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( post_gadget_action_params_ptr
                && !data::arrFromJson(post_gadget_action_params_ptr, &this->post_gadget_action_params) )
              {
                *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1216, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1216),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  1794);
                common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  (common::milog::MiLogStream *const)(v2 + 1216),
                  (const char (*)[44])"fromJson for: postGadgetActionParams fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1280),
                  "icon",
                  (const std::allocator<char> *)(v2 + 160));
                icon_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1280));
                std::string::~string((void *)(v2 + 1280));
                *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( icon_ptr && !fromJson<std::string>(icon_ptr, &this->icon) )
                {
                  *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1344, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1344),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    1806);
                  common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                    (common::milog::MiLogStream *const)(v2 + 1344),
                    (const char (*)[26])"fromJson for: icon fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 176);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1408),
                    "groupName",
                    (const std::allocator<char> *)(v2 + 176));
                  group_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1408));
                  std::string::~string((void *)(v2 + 1408));
                  *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 176);
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                  if ( group_name_ptr && !fromJson<std::string>(group_name_ptr, &this->group_name) )
                  {
                    *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1472, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1472),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      1818);
                    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                      (common::milog::MiLogStream *const)(v2 + 1472),
                      (const char (*)[31])"fromJson for: groupName fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 192);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1536),
                      "itemType",
                      (const std::allocator<char> *)(v2 + 192));
                    item_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 1536));
                    std::string::~string((void *)(v2 + 1536));
                    *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 192);
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                    if ( !item_type_ptr )
                      goto LABEL_60;
                    *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1600) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1600, 32LL);
                    }
                    Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 1600), (Json::Value_0 *)item_type_ptr);
                    v8 = !data::enumStrToVal((const std::string *)(v2 + 1600), &this->item_type);
                    std::string::~string((void *)(v2 + 1600));
                    *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -117901064;
                    if ( v8 )
                    {
                      *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1664) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1664, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1664),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        1830);
                      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                        (common::milog::MiLogStream *const)(v2 + 1664),
                        (const char (*)[30])"fromJson for: itemType fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1664));
                      v5 = 0;
                    }
                    else
                    {
LABEL_60:
                      *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 208);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1728),
                        "needDialogConfirm",
                        (const std::allocator<char> *)(v2 + 208));
                      need_dialog_confirm_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1728));
                      std::string::~string((void *)(v2 + 1728));
                      *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 208);
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                      if ( need_dialog_confirm_ptr
                        && !fromJson<bool>(need_dialog_confirm_ptr, &this->need_dialog_confirm) )
                      {
                        *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1792) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1792, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1792),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          1842);
                        common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                          (common::milog::MiLogStream *const)(v2 + 1792),
                          (const char (*)[39])"fromJson for: needDialogConfirm fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1792));
                        v5 = 0;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 224);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 1856),
                          "confirmDialogTitle",
                          (const std::allocator<char> *)(v2 + 224));
                        confirm_dialog_title_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1856));
                        std::string::~string((void *)(v2 + 1856));
                        *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 224);
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                        if ( confirm_dialog_title_ptr
                          && !fromJson<std::string>(confirm_dialog_title_ptr, &this->confirm_dialog_title) )
                        {
                          *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 1920) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 1920, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 1920),
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/json_data_auto/ConfigEntity.cpp",
                            "fromJson",
                            1854);
                          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                            (common::milog::MiLogStream *const)(v2 + 1920),
                            (const char (*)[40])"fromJson for: confirmDialogTitle fails!");
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1920));
                          v5 = 0;
                        }
                        else
                        {
                          *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = 0;
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                          std::allocator<char>::allocator(v2 + 240);
                          std::string::basic_string<std::allocator<char>>(
                            (std::string *const)(v2 + 1984),
                            "confirmDialogContent",
                            (const std::allocator<char> *)(v2 + 240));
                          p_confirm_dialog_content = (std::string *)(v2 + 1984);
                          confirm_dialog_content_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1984));
                          std::string::~string((void *)(v2 + 1984));
                          *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -117901064;
                          std::allocator<char>::~allocator(v2 + 240);
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                          if ( confirm_dialog_content_ptr
                            && (p_confirm_dialog_content = &this->confirm_dialog_content,
                                !fromJson<std::string>(confirm_dialog_content_ptr, &this->confirm_dialog_content)) )
                          {
                            *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v2 + 2048) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) != 0
                              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v2 + 2048, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v2 + 2048),
                              &common::milog::MiLogDefault::default_log_obj_,
                              3u,
                              "./src/json_data_auto/ConfigEntity.cpp",
                              "fromJson",
                              1866);
                            common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                              (common::milog::MiLogStream *const)(v2 + 2048),
                              (const char (*)[42])"fromJson for: confirmDialogContent fails!");
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2048));
                            v5 = 0;
                          }
                          else
                          {
                            if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                              __asan_report_store1(
                                &this->is_json_loaded,
                                p_confirm_dialog_content,
                                &this->is_json_loaded);
                            this->is_json_loaded = 1;
                            v5 = 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v10 = v5;
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8084) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF808C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8094) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF809C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80AC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80BC) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80CC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80DC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80E4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80EC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80FC) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8104) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2112LL, v26);
  }
  return v10;
};

// Line 1873: range 000000000E614384-000000000E614CDF
data::ConfigGadgetUIBasePtr __cdecl data::ConfigGadgetUIBase::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetUIBasePtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-208h]
  char v14[512]; // [rsp+20h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 16 8 ptr:1886 96 32 9 <unknown> 160 32 9 <unknown> 224 32 14 type_name:188"
                        "0 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIBase::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 224);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 224)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        1883);
      common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[46])"fromJson for: ConfigGadgetUIBase $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr((std::shared_ptr<data::ConfigGadgetUIBase> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetUIBase((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetUIBase>((const std::shared_ptr<data::ConfigGadgetUIBase> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          1889);
        v6 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[44])"create ConfigGadgetUIBase fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 224));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetUIBase> *const)jval,
          0LL);
      }
      else
      {
        v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 48LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            1894);
          v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                 (common::milog::MiLogStream *const)(v2 + 416),
                 (const std::string *)(v2 + 224));
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetUIBase> *const)jval,
            0LL);
        }
        else
        {
          v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v11 = *(_BYTE *)(((unsigned __int64)(v10 + 312) >> 3) + 0x7FFF8000);
          LOBYTE(v1) = v11 != 0;
          v12 = v11 < 0;
          if ( v12 )
            v10 = __asan_report_store1(v10 + 312, v1, v12);
          *(_BYTE *)(v10 + 312) = 1;
          std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetUIBase> *const)jval,
            (std::shared_ptr<data::ConfigGadgetUIBase> *)(v2 + 64));
        }
      }
      std::shared_ptr<data::ConfigGadgetUIBase>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIBase> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 224));
  }
  else
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      1877);
    common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[51])"jsonValueFind for: ConfigGadgetUIBase $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr((std::shared_ptr<data::ConfigGadgetUIBase> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 1902: range 000000000E614CE0-000000000E615029
int32_t __cdecl data::ConfigGadgetUIBase::getHashValue(const data::ConfigGadgetUIBase *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t ArrHashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  __int64 v8; // rsi
  __int64 v9; // rdx
  int32_t result; // eax
  char v11[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:1903";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIBase::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->gadget_uibtn_cfg_path, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->ui_name, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->on_touch >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->on_touch >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->on_touch);
  }
  common::tools::HashUtils::appendHash(this->on_touch, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->touch_params);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->show_comb_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->show_comb_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->show_comb_type);
  }
  common::tools::HashUtils::appendHash(this->show_comb_type, (int32_t *)(v2 + 32));
  v6 = data::getArrHashValue(&this->show_cond_types);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::getArrHashValue(&this->post_gadget_action_params);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->icon, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->group_name, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->item_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->item_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->item_type);
  }
  common::tools::HashUtils::appendHash(this->item_type, (int32_t *)(v2 + 32));
  v8 = ((_BYTE)this - 12) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->need_dialog_confirm >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->need_dialog_confirm >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&this->need_dialog_confirm, v8, v9);
  common::tools::HashUtils::appendHash(this->need_dialog_confirm, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->confirm_dialog_title, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->confirm_dialog_content, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1924: range 000000000E6E9542-000000000E6E9783
void __cdecl data::ConfigGadgetUIExtraItemRegister::ConfigGadgetUIExtraItemRegister(
        data::ConfigGadgetUIExtraItemRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetUIBase> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetUIExtraItemRegister::ConfigGadgetUIExtraItemRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetUIExtraItem>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetUIExtraItem",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::operator[](
         &data::g_ConfigGadgetUIBaseMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetUIBase>::operator=<data::ConfigGadgetUIExtraItem>(
    v4,
    (std::shared_ptr<data::ConfigGadgetUIExtraItem> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetUIExtraItem>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 1927: range 000000000E61502A-000000000E6151FD
void __cdecl data::ConfigGadgetUIExtraItem::foreachMember(
        data::ConfigGadgetUIExtraItem *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 17 extra_id_any:1929 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIExtraItem::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetUIBase::foreachMember(
    (data::ConfigGadgetUIBase *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<int &,int,std::any::_Manager_internal<int>,true,true>((std::any *const)(v2 + 32), &this->extra_id);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1934: range 000000000E6151FE-000000000E61530E
std::shared_ptr<data::ConfigGadgetUIBase> __cdecl data::ConfigGadgetUIExtraItem::clone(
        data::ConfigGadgetUIExtraItem *const this)
{
  data::ConfigGadgetUIExtraItem *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetUIBase> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIExtraItem::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetUIExtraItem,data::ConfigGadgetUIExtraItem&>(
    (common::tools::perf::allocator<data::ConfigGadgetUIExtraItem,data::ConfigGadgetUIExtraItem> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr<data::ConfigGadgetUIExtraItem,void>(
    (std::shared_ptr<data::ConfigGadgetUIBase> *const)this,
    (std::shared_ptr<data::ConfigGadgetUIExtraItem> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetUIExtraItem>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1938: range 000000000E615310-000000000E615353
data::ConfigGadgetUIExtraItemPtr __cdecl data::ConfigGadgetUIExtraItemFactory::create(
        data::ConfigGadgetUIExtraItemFactory *const this)
{
  data::ConfigGadgetUIExtraItemPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetUIExtraItem>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 1940: range 000000000E615354-000000000E6157E0
bool __cdecl data::ConfigGadgetUIExtraItem::fromJson(
        data::ConfigGadgetUIExtraItem *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  int32_t *p_extra_id; // rsi
  const Json::Value *extra_id_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIExtraItem::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetUIBase::fromJson((data::ConfigGadgetUIBase *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      1943);
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[40])"fromJson for: ConfigGadgetUIBase fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "extraId",
      (const std::allocator<char> *)(v2 + 48));
    p_extra_id = (int32_t *)(v2 + 128);
    extra_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( extra_id_ptr && (p_extra_id = &this->extra_id, !fromJson<int>(extra_id_ptr, &this->extra_id)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        1955);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[29])"fromJson for: extraId fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_extra_id, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1962: range 000000000E6157E2-000000000E61632E
data::ConfigGadgetUIExtraItemPtr __cdecl data::ConfigGadgetUIExtraItem::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetUIExtraItemPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:1975 96 16 8 ptr:1981 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:1969 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIExtraItem::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        1972);
      common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[51])"fromJson for: ConfigGadgetUIExtraItem $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetUIExtraItem>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetUIBase((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetUIBase>((const std::shared_ptr<data::ConfigGadgetUIBase> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          1978);
        v6 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[44])"create ConfigGadgetUIBase fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetUIExtraItem>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetUIExtraItem,data::ConfigGadgetUIBase>((const std::shared_ptr<data::ConfigGadgetUIBase> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetUIExtraItem>(
               (const std::shared_ptr<data::ConfigGadgetUIExtraItem> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            1984);
          common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[42])"cast to ConfigGadgetUIExtraItemPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetUIExtraItem>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              1989);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetUIExtraItem>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 312) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 312, v1, v12);
            *(_BYTE *)(v10 + 312) = 1;
            std::shared_ptr<data::ConfigGadgetUIExtraItem>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)jval,
              (std::shared_ptr<data::ConfigGadgetUIExtraItem> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetUIExtraItem>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetUIBase>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIBase> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      1966);
    common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[56])"jsonValueFind for: ConfigGadgetUIExtraItem $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetUIExtraItem>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 1997: range 000000000E616330-000000000E6164AE
int32_t __cdecl data::ConfigGadgetUIExtraItem::getHashValue(const data::ConfigGadgetUIExtraItem *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:1998";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUIExtraItem::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetUIBase::getHashValue((const data::ConfigGadgetUIBase *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  if ( *(_BYTE *)(((unsigned __int64)&this->extra_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->extra_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->extra_id);
  }
  common::tools::HashUtils::appendHash(this->extra_id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2004: range 000000000E6164AF-000000000E61685C
bool __cdecl data::arrFromJson(const Json::Value *jval, data::GadgetUIExtraItemArray *v)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int v5; // eax
  unsigned __int64 v6; // rax
  void (__fastcall **v7)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v8)(unsigned __int64, unsigned __int64); // rcx
  int v9; // r14d
  bool result; // al
  int v11; // [rsp+0h] [rbp-E0h]
  char v12; // [rsp+8h] [rbp-D8h]
  bool v13; // [rsp+Fh] [rbp-D1h]
  uint32_t i; // [rsp+24h] [rbp-BCh]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-B8h]
  char v16[176]; // [rsp+30h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 13 elem_ptr:2010 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::arrFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v11, v12);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
      v6 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUIExtraItemFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIExtraItemFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigGadgetUIExtraItemFactory::instance_ptr);
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v6 = __asan_report_load8(v6);
      v7 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v6;
      if ( *(_BYTE *)((*(_QWORD *)v6 >> 3) + 0x7FFF8000LL) )
        v6 = __asan_report_load8(*(_QWORD *)v6);
      v8 = *v7;
      if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
        v6 = __asan_report_store16();
      v8(v2 + 32, v6);
      if ( std::operator==<data::ConfigGadgetUIExtraItem>(
             (const std::shared_ptr<data::ConfigGadgetUIExtraItem> *)(v2 + 32),
             0LL) )
      {
        *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 64, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 64),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "arrFromJson",
          2013);
        common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
          (common::milog::MiLogStream *const)(v2 + 64),
          (const char (*)[44])"elem_ptr is nullptr: GadgetUIExtraItemArray");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
        *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
        v13 = 0;
        v9 = 0;
      }
      else
      {
        std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>::push_back(
          v,
          (const std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>::value_type *)(v2 + 32));
        v9 = 1;
      }
      std::shared_ptr<data::ConfigGadgetUIExtraItem>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIExtraItem> *const)(v2 + 32));
      if ( v9 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = -1800;
    if ( v5 && v5 != 2 )
      goto LABEL_26;
  }
  v13 = 1;
LABEL_26:
  result = v13;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2023: range 000000000E61685D-000000000E616B18
int32_t __cdecl data::getArrHashValue(const data::GadgetUIExtraItemArray *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int32_t v7; // eax
  int32_t result; // eax
  const std::shared_ptr<data::ConfigGadgetUIExtraItem> *elem; // [rsp+18h] [rbp-A8h]
  char v10[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:2024 64 8 16 __for_begin:2025 96 8 14 __for_end:2025";
  *(_QWORD *)(v2 + 16) = data::getArrHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>::const_iterator *)(v2 + 64) = std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>::const_iterator *)(v2 + 96) = std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>::end(vec);
  while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigGadgetUIExtraItem> const*,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>>(
            (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetUIExtraItem>*,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetUIExtraItem>*,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGadgetUIExtraItem> const*,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetUIExtraItem>*,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>> > *const)(v2 + 64));
    if ( std::operator!=<data::ConfigGadgetUIExtraItem>(0LL, elem) )
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIExtraItem,(__gnu_cxx::_Lock_policy)2,false,false> *const)elem);
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(v5);
      v6 = *(_QWORD *)v5 + 56LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(*(_QWORD *)v5 + 56LL);
      v7 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
      common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 48));
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGadgetUIExtraItem> const*,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetUIExtraItem>*,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2039: range 000000000E6E97C0-000000000E6E9A01
void __cdecl data::ConfigGadgetUIRegister::ConfigGadgetUIRegister(data::ConfigGadgetUIRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetUIBase> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetUIRegister::ConfigGadgetUIRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetUI>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetUI",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::operator[](
         &data::g_ConfigGadgetUIBaseMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetUIBase>::operator=<data::ConfigGadgetUI>(
    v4,
    (std::shared_ptr<data::ConfigGadgetUI> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetUI>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 2042: range 000000000E616B1A-000000000E616F0A
void __cdecl data::ConfigGadgetUI::foreachMember(
        data::ConfigGadgetUI *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[304]; // [rsp+10h] [rbp-130h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 16 27 always_interactive_any:2044 64 16 31 can_interact_in_combat_any:2046 96 16 41 can_onl"
                        "y_interact_in_stand_still_any:2048 128 16 23 open_reward_id_any:2050 160 16 29 gadget_uiextra_it"
                        "ems_any:2052 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUI::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862727] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 192), p_func);
  data::ConfigGadgetUIBase::foreachMember(
    (data::ConfigGadgetUIBase *const)this,
    (std::function<void(std::any&)> *)(v2 + 192));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 32),
    &this->always_interactive);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 64),
    &this->can_interact_in_combat);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 96),
    &this->can_only_interact_in_stand_still);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<unsigned int &,unsigned int,std::any::_Manager_internal<unsigned int>,true,true>(
    (std::any *const)(v2 + 128),
    &this->open_reward_id);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>> &,std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>,std::any::_Manager_external<std::vector<std::shared_ptr<data::ConfigGadgetUIExtraItem>>>,true,true>(
    (std::any *const)(v2 + 160),
    &this->gadget_uiextra_items);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2057: range 000000000E616F0C-000000000E61701C
std::shared_ptr<data::ConfigGadgetUIBase> __cdecl data::ConfigGadgetUI::clone(data::ConfigGadgetUI *const this)
{
  data::ConfigGadgetUI *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetUIBase> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUI::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetUI,data::ConfigGadgetUI&>(
    (common::tools::perf::allocator<data::ConfigGadgetUI,data::ConfigGadgetUI> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetUIBase>::shared_ptr<data::ConfigGadgetUI,void>(
    (std::shared_ptr<data::ConfigGadgetUIBase> *const)this,
    (std::shared_ptr<data::ConfigGadgetUI> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetUI>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUIBase,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2061: range 000000000E61701E-000000000E617061
data::ConfigGadgetUIPtr __cdecl data::ConfigGadgetUIFactory::create(data::ConfigGadgetUIFactory *const this)
{
  data::ConfigGadgetUIPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetUI>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2063: range 000000000E617062-000000000E617F4C
bool __cdecl data::ConfigGadgetUI::fromJson(data::ConfigGadgetUI *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::GadgetUIExtraItemArray *p_gadget_uiextra_items; // rsi
  const Json::Value *always_interactive_ptr; // [rsp+18h] [rbp-388h]
  const Json::Value *can_interact_in_combat_ptr; // [rsp+20h] [rbp-380h]
  const Json::Value *can_only_interact_in_stand_still_ptr; // [rsp+28h] [rbp-378h]
  const Json::Value *open_reward_id_ptr; // [rsp+30h] [rbp-370h]
  const Json::Value *gadget_uiextra_items_ptr; // [rsp+38h] [rbp-368h]
  char v13[864]; // [rsp+40h] [rbp-360h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(832LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "16 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 32 "
                        "9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9"
                        " <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUI::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -202116109;
  if ( !data::ConfigGadgetUIBase::fromJson((data::ConfigGadgetUIBase *const)this, jval) )
  {
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      2066);
    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[40])"fromJson for: ConfigGadgetUIBase fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "alwaysInteractive",
      (const std::allocator<char> *)(v2 + 48));
    always_interactive_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( always_interactive_ptr && !fromJson<bool>(always_interactive_ptr, &this->always_interactive) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        2078);
      common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[39])"fromJson for: alwaysInteractive fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 320),
        "canInteractInCombat",
        (const std::allocator<char> *)(v2 + 64));
      can_interact_in_combat_ptr = jsonValueFind(jval, (const std::string *)(v2 + 320));
      std::string::~string((void *)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( can_interact_in_combat_ptr && !fromJson<bool>(can_interact_in_combat_ptr, &this->can_interact_in_combat) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          2090);
        common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
          (common::milog::MiLogStream *const)(v2 + 384),
          (const char (*)[41])"fromJson for: canInteractInCombat fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 448),
          "canOnlyInteractInStandStill",
          (const std::allocator<char> *)(v2 + 80));
        can_only_interact_in_stand_still_ptr = jsonValueFind(jval, (const std::string *)(v2 + 448));
        std::string::~string((void *)(v2 + 448));
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( can_only_interact_in_stand_still_ptr
          && !fromJson<bool>(can_only_interact_in_stand_still_ptr, &this->can_only_interact_in_stand_still) )
        {
          *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 512, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 512),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            2102);
          common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
            (common::milog::MiLogStream *const)(v2 + 512),
            (const char (*)[49])"fromJson for: canOnlyInteractInStandStill fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 576),
            "openRewardId",
            (const std::allocator<char> *)(v2 + 96));
          open_reward_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 576));
          std::string::~string((void *)(v2 + 576));
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( open_reward_id_ptr && !fromJson<unsigned int>(open_reward_id_ptr, &this->open_reward_id) )
          {
            *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 640, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 640),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              2114);
            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v2 + 640),
              (const char (*)[34])"fromJson for: openRewardId fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
            result = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 704),
              "gadgetUIExtraItems",
              (const std::allocator<char> *)(v2 + 112));
            p_gadget_uiextra_items = (data::GadgetUIExtraItemArray *)(v2 + 704);
            gadget_uiextra_items_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
            std::string::~string((void *)(v2 + 704));
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( gadget_uiextra_items_ptr
              && (p_gadget_uiextra_items = &this->gadget_uiextra_items,
                  !data::arrFromJson(gadget_uiextra_items_ptr, &this->gadget_uiextra_items)) )
            {
              *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 768, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 768),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                2126);
              common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                (common::milog::MiLogStream *const)(v2 + 768),
                (const char (*)[40])"fromJson for: gadgetUIExtraItems fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
              result = 0;
            }
            else
            {
              if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                __asan_report_store1(&this->is_json_loaded, p_gadget_uiextra_items, &this->is_json_loaded);
              this->is_json_loaded = 1;
              result = 1;
            }
          }
        }
      }
    }
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2133: range 000000000E617F4E-000000000E618A9A
data::ConfigGadgetUIPtr __cdecl data::ConfigGadgetUI::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetUIPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:2146 96 16 8 ptr:2152 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:2140 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUI::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        2143);
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[42])"fromJson for: ConfigGadgetUI $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetUI>::shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetUIBase((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetUIBase>((const std::shared_ptr<data::ConfigGadgetUIBase> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          2149);
        v6 = common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[44])"create ConfigGadgetUIBase fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetUI>::shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)jval, 0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetUI,data::ConfigGadgetUIBase>((const std::shared_ptr<data::ConfigGadgetUIBase> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetUI>((const std::shared_ptr<data::ConfigGadgetUI> *)(v2 + 96), 0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            2155);
          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[33])"cast to ConfigGadgetUIPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetUI>::shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)jval, 0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              2160);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetUI>::shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)jval, 0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 312) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 312, v1, v12);
            *(_BYTE *)(v10 + 312) = 1;
            std::shared_ptr<data::ConfigGadgetUI>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetUI> *const)jval,
              (std::shared_ptr<data::ConfigGadgetUI> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetUI>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetUIBase>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIBase> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      2137);
    common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[47])"jsonValueFind for: ConfigGadgetUI $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetUI>::shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 2168: range 000000000E618A9C-000000000E618D42
int32_t __cdecl data::ConfigGadgetUI::getHashValue(const data::ConfigGadgetUI *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  __int64 v11; // rsi
  __int64 v12; // rdx
  int32_t ArrHashValue; // eax
  int32_t result; // eax
  char v15[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:2169";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetUI::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetUIBase::getHashValue((const data::ConfigGadgetUIBase *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 57) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->always_interactive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->always_interactive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->always_interactive, v7, v8);
  common::tools::HashUtils::appendHash(this->always_interactive, (int32_t *)(v2 + 32));
  v9 = ((_BYTE)this + 58) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&this->can_interact_in_combat >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->can_interact_in_combat >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&this->can_interact_in_combat, v9, v10);
  common::tools::HashUtils::appendHash(this->can_interact_in_combat, (int32_t *)(v2 + 32));
  v11 = ((_BYTE)this + 59) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&this->can_only_interact_in_stand_still >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&this->can_only_interact_in_stand_still >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&this->can_only_interact_in_stand_still, v11, v12);
  common::tools::HashUtils::appendHash(this->can_only_interact_in_stand_still, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->open_reward_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->open_reward_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->open_reward_id);
  }
  common::tools::HashUtils::appendHash(this->open_reward_id, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->gadget_uiextra_items);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2179: range 000000000E618D43-000000000E61920F
const char *__cdecl data::enumValToStr(data::GadgetState e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e == Action03 )
  {
    result = "Action03";
    goto LABEL_48;
  }
  if ( e > Action03 )
    goto LABEL_43;
  switch ( e )
  {
    case Action02:
      result = "Action02";
      goto LABEL_48;
    case Action01:
      result = "Action01";
      goto LABEL_48;
    case StatueActive:
      result = "StatueActive";
      goto LABEL_48;
  }
  if ( e > CrystalDrain )
    goto LABEL_43;
  if ( e >= DestroyState )
  {
    switch ( e )
    {
      case DestroyState:
        result = "DestroyState";
        break;
      case CrystalResonate1:
        result = "CrystalResonate1";
        break;
      case CrystalResonate2:
        result = "CrystalResonate2";
        break;
      case CrystalExplode:
        result = "CrystalExplode";
        break;
      case CrystalDrain:
        result = "CrystalDrain";
        break;
      default:
        goto LABEL_43;
    }
  }
  else
  {
    if ( e > GearAction2 )
      goto LABEL_43;
    if ( e >= ExcitedState )
    {
      switch ( e )
      {
        case ExcitedState:
          result = "ExcitedState";
          break;
        case GearStart:
          result = "GearStart";
          break;
        case GearStop:
          result = "GearStop";
          break;
        case GearAction1:
          result = "GearAction1";
          break;
        case GearAction2:
          result = "GearAction2";
          break;
        default:
          goto LABEL_43;
      }
      goto LABEL_48;
    }
    if ( e > ChestRock )
    {
LABEL_43:
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        2227);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
      goto LABEL_48;
    }
    if ( e < ChestLocked )
    {
      if ( e == Default_4 )
      {
        result = "Default";
        goto LABEL_48;
      }
      if ( e == GatherDrop )
      {
        result = "GatherDrop";
        goto LABEL_48;
      }
      goto LABEL_43;
    }
    switch ( e )
    {
      case ChestLocked:
        result = "ChestLocked";
        break;
      case ChestOpened:
        result = "ChestOpened";
        break;
      case ChestTrap:
        result = "ChestTrap";
        break;
      case ChestBramble:
        result = "ChestBramble";
        break;
      case ChestFrozen:
        result = "ChestFrozen";
        break;
      case ChestRock:
        result = "ChestRock";
        break;
      default:
        goto LABEL_43;
    }
  }
LABEL_48:
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2233: range 000000000E619210-000000000E61A5B2
bool __cdecl data::enumStrToVal(const std::string *s, data::GadgetState *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  std::pair<const std::string,data::GadgetState> *i; // r14
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetState> >::pointer v10; // rax
  data::GadgetState second; // ecx
  char v12; // dl
  bool v13; // bl
  data::GadgetState *ea; // [rsp+10h] [rbp-6A0h]
  char v16[1680]; // [rsp+20h] [rbp-690h] BYREF

  ea = e;
  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1632LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "29 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 9"
                        " <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 8 7 it:2264 464 8 9 <unknown> 496 32 9 <unkno"
                        "wn> 560 32 9 <unknown> 624 880 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = 61956;
  v4[536862733] = -234881024;
  v4[536862734] = 62194;
  v4[536862734] = -234881024;
  v4[536862735] = 62194;
  v4[536862736] = -219021312;
  v4[536862737] = 62194;
  v4[536862738] = -219021312;
  v4[536862739] = 62194;
  v4[536862767] = -202116109;
  v4[536862768] = -202116109;
  v4[536862769] = -202116109;
  v4[536862770] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 496) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 527) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 496, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 496),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      2236);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 496),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 496));
    v5 = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::GadgetState &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::GadgetState &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[8],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 624),
        (const char (*)[8])"Default",
        (data::GadgetState *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "Default");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[11],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 664),
        (const char (*)[11])"GatherDrop",
        (data::GadgetState *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "GatherDrop");
      *(_DWORD *)(v2 + 112) = 101;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[12],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 704),
        (const char (*)[12])"ChestLocked",
        (data::GadgetState *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, "ChestLocked");
      *(_DWORD *)(v2 + 128) = 102;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[12],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 744),
        (const char (*)[12])"ChestOpened",
        (data::GadgetState *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, "ChestOpened");
      *(_DWORD *)(v2 + 144) = 103;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[10],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 784),
        (const char (*)[10])"ChestTrap",
        (data::GadgetState *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, "ChestTrap");
      *(_DWORD *)(v2 + 160) = 104;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[13],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 824),
        (const char (*)[13])"ChestBramble",
        (data::GadgetState *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, "ChestBramble");
      *(_DWORD *)(v2 + 176) = 105;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[12],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 864),
        (const char (*)[12])"ChestFrozen",
        (data::GadgetState *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, "ChestFrozen");
      *(_DWORD *)(v2 + 192) = 106;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[10],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 904),
        (const char (*)[10])"ChestRock",
        (data::GadgetState *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, "ChestRock");
      *(_DWORD *)(v2 + 208) = 200;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[13],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 944),
        (const char (*)[13])"ExcitedState",
        (data::GadgetState *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, "ExcitedState");
      *(_DWORD *)(v2 + 224) = 201;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[10],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 984),
        (const char (*)[10])"GearStart",
        (data::GadgetState *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, "GearStart");
      *(_DWORD *)(v2 + 240) = 202;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[9],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1024),
        (const char (*)[9])"GearStop",
        (data::GadgetState *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, "GearStop");
      *(_DWORD *)(v2 + 256) = 203;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[12],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1064),
        (const char (*)[12])"GearAction1",
        (data::GadgetState *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, "GearAction1");
      *(_DWORD *)(v2 + 272) = 204;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[12],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1104),
        (const char (*)[12])"GearAction2",
        (data::GadgetState *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, "GearAction2");
      *(_DWORD *)(v2 + 288) = 300;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[13],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1144),
        (const char (*)[13])"DestroyState",
        (data::GadgetState *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, "DestroyState");
      *(_DWORD *)(v2 + 304) = 301;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[17],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1184),
        (const char (*)[17])"CrystalResonate1",
        (data::GadgetState *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, "CrystalResonate1");
      *(_DWORD *)(v2 + 320) = 302;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[17],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1224),
        (const char (*)[17])"CrystalResonate2",
        (data::GadgetState *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, "CrystalResonate2");
      *(_DWORD *)(v2 + 336) = 303;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[15],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1264),
        (const char (*)[15])"CrystalExplode",
        (data::GadgetState *)(v2 + 336));
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 352, "CrystalExplode");
      *(_DWORD *)(v2 + 352) = 304;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[13],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1304),
        (const char (*)[13])"CrystalDrain",
        (data::GadgetState *)(v2 + 352));
      if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 368, "CrystalDrain");
      *(_DWORD *)(v2 + 368) = 401;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[13],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1344),
        (const char (*)[13])"StatueActive",
        (data::GadgetState *)(v2 + 368));
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 384, "StatueActive");
      *(_DWORD *)(v2 + 384) = 901;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[9],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1384),
        (const char (*)[9])"Action01",
        (data::GadgetState *)(v2 + 384));
      if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 400, "Action01");
      *(_DWORD *)(v2 + 400) = 902;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[9],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1424),
        (const char (*)[9])"Action02",
        (data::GadgetState *)(v2 + 400));
      if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 416, "Action02");
      *(_DWORD *)(v2 + 416) = 903;
      std::pair<std::string const,data::GadgetState>::pair<char const(&)[9],data::GadgetState,true>(
        (std::pair<const std::string,data::GadgetState> *const)(v2 + 1464),
        (const char (*)[9])"Action03",
        (data::GadgetState *)(v2 + 416));
      std::allocator<std::pair<std::string const,data::GadgetState>>::allocator((std::allocator<std::pair<const std::string,data::GadgetState> > *const)(v2 + 64));
      std::map<std::string,data::GadgetState>::map(
        &data::enumStrToVal(std::string const&,data::GadgetState &)::m,
        (std::initializer_list<std::pair<const std::string,data::GadgetState> >)__PAIR128__(22LL, v2 + 624),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::GadgetState>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::GadgetState &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::GadgetState>::~map,
        &data::enumStrToVal(std::string const&,data::GadgetState &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::GadgetState>>::~allocator((std::allocator<std::pair<const std::string,data::GadgetState> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::GadgetState> *)(v2 + 1504);
            i != (std::pair<const std::string,data::GadgetState> *)(v2 + 624);
            std::pair<std::string const,data::GadgetState>::~pair(i) )
      {
        --i;
      }
      e = (data::GadgetState *)880;
      __asan_poison_stack_memory(v2 + 624, 880LL);
      *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 432, e);
    *(std::map<std::string,data::GadgetState>::iterator *)(v2 + 432) = std::map<std::string,data::GadgetState>::find(
                                                                         &data::enumStrToVal(std::string const&,data::GadgetState &)::m,
                                                                         s);
    *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 464, s);
    *(std::map<std::string,data::GadgetState>::iterator *)(v2 + 464) = std::map<std::string,data::GadgetState>::end(&data::enumStrToVal(std::string const&,data::GadgetState &)::m);
    v7 = (char *)(v2 + 464);
    v8 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetState> >::_Self *)(v2 + 432),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetState> >::_Self *)(v2 + 464));
    *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 560) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 560) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 591) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 560, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 560),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        2267);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 560),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 560));
      v5 = 0;
    }
    else
    {
      v10 = std::_Rb_tree_iterator<std::pair<std::string const,data::GadgetState>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::GadgetState> > *const)(v2 + 432));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(ea, v7);
      }
      *ea = second;
      v5 = 1;
    }
  }
  v13 = v5;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 204) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1632LL, v16);
  }
  return v13;
};

// Line 2275: range 000000000E61A5B3-000000000E61A7F4
const char *__cdecl data::getDescription(data::GadgetState e)
{
  const char *result; // rax

  if ( e == Action03 )
    return (const char *)&unk_1A3B7FA0;
  if ( e > Action03 )
    return "unknown enum value!";
  switch ( e )
  {
    case Action02:
      return (const char *)&unk_1A3B7F60;
    case Action01:
      return (const char *)&unk_1A3B7F20;
    case StatueActive:
      return (const char *)&unk_1A3B7EE0;
  }
  if ( e > CrystalDrain )
    return "unknown enum value!";
  if ( e >= DestroyState )
  {
    switch ( e )
    {
      case DestroyState:
        result = (const char *)&unk_1A3B7DA0;
        break;
      case CrystalResonate1:
        result = (const char *)&unk_1A3B7DE0;
        break;
      case CrystalResonate2:
        result = (const char *)&unk_1A3B7E20;
        break;
      case CrystalExplode:
        result = (const char *)&unk_1A3B7E60;
        break;
      case CrystalDrain:
        result = (const char *)&unk_1A3B7EA0;
        break;
      default:
        return "unknown enum value!";
    }
  }
  else
  {
    if ( e > GearAction2 )
      return "unknown enum value!";
    if ( e >= ExcitedState )
    {
      switch ( e )
      {
        case ExcitedState:
          result = (const char *)&unk_1A3B7C60;
          break;
        case GearStart:
          result = (const char *)&unk_1A3B7CA0;
          break;
        case GearStop:
          result = (const char *)&unk_1A3B7CE0;
          break;
        case GearAction1:
          result = (const char *)&unk_1A3B7D20;
          break;
        case GearAction2:
          result = (const char *)&unk_1A3B7D60;
          break;
        default:
          return "unknown enum value!";
      }
      return result;
    }
    if ( e > ChestRock )
      return "unknown enum value!";
    if ( e < ChestLocked )
    {
      if ( e == Default_4 )
        return (const char *)&unk_1A3B79E0;
      if ( e == GatherDrop )
        return (const char *)&unk_1A3B7A20;
      return "unknown enum value!";
    }
    switch ( e )
    {
      case ChestLocked:
        result = (const char *)&unk_1A3B7A60;
        break;
      case ChestOpened:
        result = (const char *)&unk_1A3B7AA0;
        break;
      case ChestTrap:
        result = (const char *)&unk_1A3B7AE0;
        break;
      case ChestBramble:
        result = (const char *)&unk_1A3B7B40;
        break;
      case ChestFrozen:
        result = (const char *)&unk_1A3B7BA0;
        break;
      case ChestRock:
        result = (const char *)&unk_1A3B7C00;
        break;
      default:
        return "unknown enum value!";
    }
  }
  return result;
};

// Line 2329: range 000000000E61A7F5-000000000E61AA2A
data::ConfigGadgetPredicatePtr __cdecl data::createConfigGadgetPredicate(const std::string *name)
{
  const std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::key_type *v1; // rsi
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > >::pointer v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(const std::string *, unsigned __int64); // rcx
  data::ConfigGadgetPredicatePtr result; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > >::_Base_ptr)"2 32 8 7 it:2330 64 8 9 <unknown>";
  v2[2]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > >::_Base_ptr)data::createConfigGadgetPredicate;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], v1);
  v2[4]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::find(
                    &data::g_ConfigGadgetPredicateMap[abi:cxx11],
                    v1)._M_node;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], v1);
  v2[8]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::end(&data::g_ConfigGadgetPredicateMap[abi:cxx11])._M_node;
  v5 = std::operator!=(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    v6 = std::_Rb_tree_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetPredicate>>>::operator->(v2 + 4);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6->second);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 24LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
    v9 = *(void (__fastcall **)(const std::string *, unsigned __int64))v8;
    if ( *(_WORD *)(((unsigned __int64)name >> 3) + 0x7FFF8000) )
      v7 = __asan_report_store16();
    v9(name, v7);
  }
  else
  {
    std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetPredicate> *const)name,
      0LL);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2>::element_type *)name;
  return result;
};

// Line 2336: range 000000000E61AA2C-000000000E61AA3A
void __cdecl data::ConfigGadgetPredicate::foreachMember(
        data::ConfigGadgetPredicate *const this,
        std::function<void(std::any&)> *p_func)
{
  ;
};

// Line 2340: range 000000000E61AA3C-000000000E61AA86
std::shared_ptr<data::ConfigGadgetPredicate> __cdecl data::ConfigGadgetPredicate::clone(
        data::ConfigGadgetPredicate *const this)
{
  data::ConfigGadgetPredicate *v1; // rsi
  std::shared_ptr<data::ConfigGadgetPredicate> result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetPredicate,data::ConfigGadgetPredicate&>(
    (common::tools::perf::allocator<data::ConfigGadgetPredicate,data::ConfigGadgetPredicate> *)this,
    v1);
  result._M_ptr = this;
  return result;
};

// Line 2344: range 000000000E61AA88-000000000E61AAD9
bool __cdecl data::ConfigGadgetPredicate::fromJson(data::ConfigGadgetPredicate *const this, const Json::Value *jval)
{
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, jval, &this->is_json_loaded);
  this->is_json_loaded = 1;
  return 1;
};

// Line 2349: range 000000000E61AADA-000000000E61B42F
data::ConfigGadgetPredicatePtr __cdecl data::ConfigGadgetPredicate::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetPredicatePtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-208h]
  char v14[512]; // [rsp+20h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 16 8 ptr:2362 96 32 9 <unknown> 160 32 9 <unknown> 224 32 14 type_name:235"
                        "6 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetPredicate::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 224);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 224)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        2359);
      common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[49])"fromJson for: ConfigGadgetPredicate $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetPredicate> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetPredicate((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetPredicate>(
             (const std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          2365);
        v6 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[47])"create ConfigGadgetPredicate fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 224));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetPredicate> *const)jval,
          0LL);
      }
      else
      {
        v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 48LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            2370);
          v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                 (common::milog::MiLogStream *const)(v2 + 416),
                 (const std::string *)(v2 + 224));
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetPredicate> *const)jval,
            0LL);
        }
        else
        {
          v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v11 = *(_BYTE *)(((unsigned __int64)(v10 + 24) >> 3) + 0x7FFF8000);
          LOBYTE(v1) = v11 != 0;
          v12 = v11 < 0;
          if ( v12 )
            v10 = __asan_report_store1(v10 + 24, v1, v12);
          *(_BYTE *)(v10 + 24) = 1;
          std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetPredicate> *const)jval,
            (std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 64));
        }
      }
      std::shared_ptr<data::ConfigGadgetPredicate>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPredicate> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 224));
  }
  else
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      2353);
    common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[54])"jsonValueFind for: ConfigGadgetPredicate $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetPredicate> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 2378: range 000000000E61B430-000000000E61B443
int32_t __cdecl data::ConfigGadgetPredicate::getHashValue(const data::ConfigGadgetPredicate *const this)
{
  return 0;
};

// Line 2387: range 000000000E6EA8AA-000000000E6EAAEB
void __cdecl data::ConfigPredicateByTimeRegister::ConfigPredicateByTimeRegister(
        data::ConfigPredicateByTimeRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetPredicate> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigPredicateByTimeRegister::ConfigPredicateByTimeRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigPredicateByTime>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigPredicateByTime",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::operator[](
         &data::g_ConfigGadgetPredicateMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetPredicate>::operator=<data::ConfigPredicateByTime>(
    v4,
    (std::shared_ptr<data::ConfigPredicateByTime> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigPredicateByTime>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByTime> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 2390: range 000000000E61B444-000000000E61B614
void __cdecl data::ConfigPredicateByTime::foreachMember(
        data::ConfigPredicateByTime *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 17 is_night_any:2392 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByTime::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetPredicate::foreachMember(
    (data::ConfigGadgetPredicate *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 32), &this->is_night);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2397: range 000000000E61B616-000000000E61B726
std::shared_ptr<data::ConfigGadgetPredicate> __cdecl data::ConfigPredicateByTime::clone(
        data::ConfigPredicateByTime *const this)
{
  data::ConfigPredicateByTime *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetPredicate> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByTime::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigPredicateByTime,data::ConfigPredicateByTime&>(
    (common::tools::perf::allocator<data::ConfigPredicateByTime,data::ConfigPredicateByTime> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr<data::ConfigPredicateByTime,void>(
    (std::shared_ptr<data::ConfigGadgetPredicate> *const)this,
    (std::shared_ptr<data::ConfigPredicateByTime> *)(v2 + 32));
  std::shared_ptr<data::ConfigPredicateByTime>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByTime> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2401: range 000000000E61B728-000000000E61B76B
data::ConfigPredicateByTimePtr __cdecl data::ConfigPredicateByTimeFactory::create(
        data::ConfigPredicateByTimeFactory *const this)
{
  data::ConfigPredicateByTimePtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigPredicateByTime>();
  result._M_ptr = (std::__shared_ptr<data::ConfigPredicateByTime,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2403: range 000000000E61B76C-000000000E61BBF0
bool __cdecl data::ConfigPredicateByTime::fromJson(data::ConfigPredicateByTime *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool *p_is_night; // rsi
  const Json::Value *is_night_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByTime::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetPredicate::fromJson((data::ConfigGadgetPredicate *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      2406);
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[43])"fromJson for: ConfigGadgetPredicate fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "isNight",
      (const std::allocator<char> *)(v2 + 48));
    p_is_night = (bool *)(v2 + 128);
    is_night_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( is_night_ptr && (p_is_night = &this->is_night, !fromJson<bool>(is_night_ptr, &this->is_night)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        2418);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[29])"fromJson for: isNight fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_is_night, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2425: range 000000000E61BBF2-000000000E61C738
data::ConfigPredicateByTimePtr __cdecl data::ConfigPredicateByTime::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigPredicateByTimePtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:2438 96 16 8 ptr:2444 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:2432 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByTime::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        2435);
      common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[49])"fromJson for: ConfigPredicateByTime $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigPredicateByTime>::shared_ptr(
        (std::shared_ptr<data::ConfigPredicateByTime> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetPredicate((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetPredicate>(
             (const std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          2441);
        v6 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[47])"create ConfigGadgetPredicate fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigPredicateByTime>::shared_ptr(
          (std::shared_ptr<data::ConfigPredicateByTime> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigPredicateByTime,data::ConfigGadgetPredicate>((const std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 96));
        if ( std::operator==<data::ConfigPredicateByTime>(
               (const std::shared_ptr<data::ConfigPredicateByTime> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            2447);
          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[40])"cast to ConfigPredicateByTimePtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigPredicateByTime>::shared_ptr(
            (std::shared_ptr<data::ConfigPredicateByTime> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigPredicateByTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigPredicateByTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              2452);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigPredicateByTime>::shared_ptr(
              (std::shared_ptr<data::ConfigPredicateByTime> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigPredicateByTime,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigPredicateByTime,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 24) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 24, v1, v12);
            *(_BYTE *)(v10 + 24) = 1;
            std::shared_ptr<data::ConfigPredicateByTime>::shared_ptr(
              (std::shared_ptr<data::ConfigPredicateByTime> *const)jval,
              (std::shared_ptr<data::ConfigPredicateByTime> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigPredicateByTime>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByTime> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetPredicate>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPredicate> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      2429);
    common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[54])"jsonValueFind for: ConfigPredicateByTime $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigPredicateByTime>::shared_ptr(
      (std::shared_ptr<data::ConfigPredicateByTime> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigPredicateByTime,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 2460: range 000000000E61C73A-000000000E61C8B4
int32_t __cdecl data::ConfigPredicateByTime::getHashValue(const data::ConfigPredicateByTime *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:2461";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByTime::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetPredicate::getHashValue((const data::ConfigGadgetPredicate *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 25) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->is_night >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_night >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->is_night, v7, v8);
  common::tools::HashUtils::appendHash(this->is_night, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2470: range 000000000E6EAB64-000000000E6EADA5
void __cdecl data::ConfigPredicateByPlatformRegister::ConfigPredicateByPlatformRegister(
        data::ConfigPredicateByPlatformRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetPredicate> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigPredicateByPlatformRegister::ConfigPredicateByPlatformRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigPredicateByPlatform>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigPredicateByPlatform",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::operator[](
         &data::g_ConfigGadgetPredicateMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetPredicate>::operator=<data::ConfigPredicateByPlatform>(
    v4,
    (std::shared_ptr<data::ConfigPredicateByPlatform> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigPredicateByPlatform>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByPlatform> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 2473: range 000000000E61C8B6-000000000E61CA86
void __cdecl data::ConfigPredicateByPlatform::foreachMember(
        data::ConfigPredicateByPlatform *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 17 is_start_any:2475 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByPlatform::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetPredicate::foreachMember(
    (data::ConfigGadgetPredicate *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 32), &this->is_start);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2480: range 000000000E61CA88-000000000E61CB98
std::shared_ptr<data::ConfigGadgetPredicate> __cdecl data::ConfigPredicateByPlatform::clone(
        data::ConfigPredicateByPlatform *const this)
{
  data::ConfigPredicateByPlatform *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetPredicate> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByPlatform::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigPredicateByPlatform,data::ConfigPredicateByPlatform&>(
    (common::tools::perf::allocator<data::ConfigPredicateByPlatform,data::ConfigPredicateByPlatform> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr<data::ConfigPredicateByPlatform,void>(
    (std::shared_ptr<data::ConfigGadgetPredicate> *const)this,
    (std::shared_ptr<data::ConfigPredicateByPlatform> *)(v2 + 32));
  std::shared_ptr<data::ConfigPredicateByPlatform>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByPlatform> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2484: range 000000000E61CB9A-000000000E61CBDD
data::ConfigPredicateByPlatformPtr __cdecl data::ConfigPredicateByPlatformFactory::create(
        data::ConfigPredicateByPlatformFactory *const this)
{
  data::ConfigPredicateByPlatformPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigPredicateByPlatform>();
  result._M_ptr = (std::__shared_ptr<data::ConfigPredicateByPlatform,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2486: range 000000000E61CBDE-000000000E61D062
bool __cdecl data::ConfigPredicateByPlatform::fromJson(
        data::ConfigPredicateByPlatform *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool *p_is_start; // rsi
  const Json::Value *is_start_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByPlatform::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetPredicate::fromJson((data::ConfigGadgetPredicate *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      2489);
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[43])"fromJson for: ConfigGadgetPredicate fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "isStart",
      (const std::allocator<char> *)(v2 + 48));
    p_is_start = (bool *)(v2 + 128);
    is_start_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( is_start_ptr && (p_is_start = &this->is_start, !fromJson<bool>(is_start_ptr, &this->is_start)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        2501);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[29])"fromJson for: isStart fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_is_start, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2508: range 000000000E61D064-000000000E61DBAA
data::ConfigPredicateByPlatformPtr __cdecl data::ConfigPredicateByPlatform::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigPredicateByPlatformPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:2521 96 16 8 ptr:2527 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:2515 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByPlatform::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        2518);
      common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[53])"fromJson for: ConfigPredicateByPlatform $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigPredicateByPlatform>::shared_ptr(
        (std::shared_ptr<data::ConfigPredicateByPlatform> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetPredicate((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetPredicate>(
             (const std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          2524);
        v6 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[47])"create ConfigGadgetPredicate fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigPredicateByPlatform>::shared_ptr(
          (std::shared_ptr<data::ConfigPredicateByPlatform> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigPredicateByPlatform,data::ConfigGadgetPredicate>((const std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 96));
        if ( std::operator==<data::ConfigPredicateByPlatform>(
               (const std::shared_ptr<data::ConfigPredicateByPlatform> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            2530);
          common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[44])"cast to ConfigPredicateByPlatformPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigPredicateByPlatform>::shared_ptr(
            (std::shared_ptr<data::ConfigPredicateByPlatform> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigPredicateByPlatform,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigPredicateByPlatform,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              2535);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigPredicateByPlatform>::shared_ptr(
              (std::shared_ptr<data::ConfigPredicateByPlatform> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigPredicateByPlatform,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigPredicateByPlatform,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 24) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 24, v1, v12);
            *(_BYTE *)(v10 + 24) = 1;
            std::shared_ptr<data::ConfigPredicateByPlatform>::shared_ptr(
              (std::shared_ptr<data::ConfigPredicateByPlatform> *const)jval,
              (std::shared_ptr<data::ConfigPredicateByPlatform> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigPredicateByPlatform>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByPlatform> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetPredicate>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPredicate> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      2512);
    common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[58])"jsonValueFind for: ConfigPredicateByPlatform $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigPredicateByPlatform>::shared_ptr(
      (std::shared_ptr<data::ConfigPredicateByPlatform> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigPredicateByPlatform,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 2543: range 000000000E61DBAC-000000000E61DD26
int32_t __cdecl data::ConfigPredicateByPlatform::getHashValue(const data::ConfigPredicateByPlatform *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:2544";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByPlatform::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetPredicate::getHashValue((const data::ConfigGadgetPredicate *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 25) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->is_start >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_start >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->is_start, v7, v8);
  common::tools::HashUtils::appendHash(this->is_start, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2553: range 000000000E6EAE1E-000000000E6EB05F
void __cdecl data::ConfigPredicateByInteractRegister::ConfigPredicateByInteractRegister(
        data::ConfigPredicateByInteractRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetPredicate> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigPredicateByInteractRegister::ConfigPredicateByInteractRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigPredicateByInteract>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigPredicateByInteract",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::operator[](
         &data::g_ConfigGadgetPredicateMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetPredicate>::operator=<data::ConfigPredicateByInteract>(
    v4,
    (std::shared_ptr<data::ConfigPredicateByInteract> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigPredicateByInteract>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByInteract> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 2556: range 000000000E61DD28-000000000E61DEF8
void __cdecl data::ConfigPredicateByInteract::foreachMember(
        data::ConfigPredicateByInteract *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 27 is_enable_interact_any:2558 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByInteract::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetPredicate::foreachMember(
    (data::ConfigGadgetPredicate *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 32),
    &this->is_enable_interact);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2563: range 000000000E61DEFA-000000000E61E00A
std::shared_ptr<data::ConfigGadgetPredicate> __cdecl data::ConfigPredicateByInteract::clone(
        data::ConfigPredicateByInteract *const this)
{
  data::ConfigPredicateByInteract *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetPredicate> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByInteract::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigPredicateByInteract,data::ConfigPredicateByInteract&>(
    (common::tools::perf::allocator<data::ConfigPredicateByInteract,data::ConfigPredicateByInteract> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetPredicate>::shared_ptr<data::ConfigPredicateByInteract,void>(
    (std::shared_ptr<data::ConfigGadgetPredicate> *const)this,
    (std::shared_ptr<data::ConfigPredicateByInteract> *)(v2 + 32));
  std::shared_ptr<data::ConfigPredicateByInteract>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByInteract> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2567: range 000000000E61E00C-000000000E61E04F
data::ConfigPredicateByInteractPtr __cdecl data::ConfigPredicateByInteractFactory::create(
        data::ConfigPredicateByInteractFactory *const this)
{
  data::ConfigPredicateByInteractPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigPredicateByInteract>();
  result._M_ptr = (std::__shared_ptr<data::ConfigPredicateByInteract,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 2569: range 000000000E61E050-000000000E61E4D4
bool __cdecl data::ConfigPredicateByInteract::fromJson(
        data::ConfigPredicateByInteract *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool *p_is_enable_interact; // rsi
  const Json::Value *is_enable_interact_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByInteract::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetPredicate::fromJson((data::ConfigGadgetPredicate *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      2572);
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[43])"fromJson for: ConfigGadgetPredicate fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "isEnableInteract",
      (const std::allocator<char> *)(v2 + 48));
    p_is_enable_interact = (bool *)(v2 + 128);
    is_enable_interact_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( is_enable_interact_ptr
      && (p_is_enable_interact = &this->is_enable_interact,
          !fromJson<bool>(is_enable_interact_ptr, &this->is_enable_interact)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        2584);
      common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[38])"fromJson for: isEnableInteract fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_is_enable_interact, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2591: range 000000000E61E4D6-000000000E61F01C
data::ConfigPredicateByInteractPtr __cdecl data::ConfigPredicateByInteract::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigPredicateByInteractPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:2604 96 16 8 ptr:2610 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:2598 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByInteract::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        2601);
      common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[53])"fromJson for: ConfigPredicateByInteract $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigPredicateByInteract>::shared_ptr(
        (std::shared_ptr<data::ConfigPredicateByInteract> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetPredicate((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetPredicate>(
             (const std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          2607);
        v6 = common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[47])"create ConfigGadgetPredicate fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigPredicateByInteract>::shared_ptr(
          (std::shared_ptr<data::ConfigPredicateByInteract> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigPredicateByInteract,data::ConfigGadgetPredicate>((const std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 96));
        if ( std::operator==<data::ConfigPredicateByInteract>(
               (const std::shared_ptr<data::ConfigPredicateByInteract> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            2613);
          common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[44])"cast to ConfigPredicateByInteractPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigPredicateByInteract>::shared_ptr(
            (std::shared_ptr<data::ConfigPredicateByInteract> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigPredicateByInteract,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigPredicateByInteract,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              2618);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigPredicateByInteract>::shared_ptr(
              (std::shared_ptr<data::ConfigPredicateByInteract> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigPredicateByInteract,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigPredicateByInteract,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 24) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 24, v1, v12);
            *(_BYTE *)(v10 + 24) = 1;
            std::shared_ptr<data::ConfigPredicateByInteract>::shared_ptr(
              (std::shared_ptr<data::ConfigPredicateByInteract> *const)jval,
              (std::shared_ptr<data::ConfigPredicateByInteract> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigPredicateByInteract>::~shared_ptr((std::shared_ptr<data::ConfigPredicateByInteract> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetPredicate>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPredicate> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      2595);
    common::milog::MiLogStream::operator<<<char [58],(char *[58])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[58])"jsonValueFind for: ConfigPredicateByInteract $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigPredicateByInteract>::shared_ptr(
      (std::shared_ptr<data::ConfigPredicateByInteract> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigPredicateByInteract,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 2626: range 000000000E61F01E-000000000E61F198
int32_t __cdecl data::ConfigPredicateByInteract::getHashValue(const data::ConfigPredicateByInteract *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:2627";
  *(_QWORD *)(v2 + 16) = data::ConfigPredicateByInteract::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetPredicate::getHashValue((const data::ConfigGadgetPredicate *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 25) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->is_enable_interact >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_enable_interact >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->is_enable_interact, v7, v8);
  common::tools::HashUtils::appendHash(this->is_enable_interact, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2634: range 000000000E61F199-000000000E61F3CE
data::ConfigGadgetStateActionPtr __cdecl data::createConfigGadgetStateAction(const std::string *name)
{
  const std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *v1; // rsi
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > >::pointer v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(const std::string *, unsigned __int64); // rcx
  data::ConfigGadgetStateActionPtr result; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > >::_Base_ptr)"2 32 8 7 it:2635 64 8 9 <unknown>";
  v2[2]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > >::_Base_ptr)data::createConfigGadgetStateAction;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], v1);
  v2[4]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::find(
                    &data::g_ConfigGadgetStateActionMap[abi:cxx11],
                    v1)._M_node;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], v1);
  v2[8]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::end(&data::g_ConfigGadgetStateActionMap[abi:cxx11])._M_node;
  v5 = std::operator!=(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    v6 = std::_Rb_tree_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetStateAction>>>::operator->(v2 + 4);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6->second);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 24LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
    v9 = *(void (__fastcall **)(const std::string *, unsigned __int64))v8;
    if ( *(_WORD *)(((unsigned __int64)name >> 3) + 0x7FFF8000) )
      v7 = __asan_report_store16();
    v9(name, v7);
  }
  else
  {
    std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateAction> *const)name,
      0LL);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2>::element_type *)name;
  return result;
};

// Line 2641: range 000000000E61F3D0-000000000E61F559
void __cdecl data::ConfigGadgetStateAction::foreachMember(
        data::ConfigGadgetStateAction *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 21 gadget_state_any:2642 64 16 18 predicate_any:2644";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateAction::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -202178560;
  std::any::any<data::GadgetState &,data::GadgetState,std::any::_Manager_internal<data::GadgetState>,true,true>(
    (std::any *const)(v2 + 32),
    &this->gadget_state);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::any<std::shared_ptr<data::ConfigGadgetPredicate> &,std::shared_ptr<data::ConfigGadgetPredicate>,std::any::_Manager_external<std::shared_ptr<data::ConfigGadgetPredicate>>,true,true>(
    (std::any *const)(v2 + 64),
    &this->predicate);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 2649: range 000000000E61F55A-000000000E61F5A4
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateAction::clone(
        data::ConfigGadgetStateAction *const this)
{
  data::ConfigGadgetStateAction *v1; // rsi
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateAction,data::ConfigGadgetStateAction&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateAction,data::ConfigGadgetStateAction> *)this,
    v1);
  result._M_ptr = this;
  return result;
};

// Line 2653: range 000000000E61F5A6-000000000E61FDE5
bool __cdecl data::ConfigGadgetStateAction::fromJson(
        data::ConfigGadgetStateAction *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  bool result; // al
  const char *v7; // rsi
  std::shared_ptr<data::ConfigGadgetPredicate> *v8; // rax
  bool v9; // r14
  Json::Value *gadget_state_ptr; // [rsp+10h] [rbp-200h]
  const Json::Value *predicate_ptr; // [rsp+18h] [rbp-1F8h]
  char v12[496]; // [rsp+20h] [rbp-1F0h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(448LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 32 1 9 <unknown> 48 1 9 <unknown> 64 16 9 <unknown> 96 16 9 <unknown> 128 32 9 <unknown> 192 3"
                        "2 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateAction::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "gadgetState",
    (const std::allocator<char> *)(v2 + 32));
  gadget_state_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( !gadget_state_ptr )
    goto LABEL_11;
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 192, 32LL);
  }
  Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 192), (Json::Value_0 *)gadget_state_ptr);
  v5 = !data::enumStrToVal((const std::string *)(v2 + 192), &this->gadget_state);
  std::string::~string((void *)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      2663);
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[33])"fromJson for: gadgetState fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0;
  }
  else
  {
LABEL_11:
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      "predicate",
      (const std::allocator<char> *)(v2 + 48));
    predicate_ptr = jsonValueFind(jval, (const std::string *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( predicate_ptr )
    {
      *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigGadgetPredicate::parseFromJson((const Json::Value *)(v2 + 96));
      v8 = std::shared_ptr<data::ConfigGadgetPredicate>::operator=(
             &this->predicate,
             (std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 96));
      v7 = 0LL;
      v9 = std::operator==<data::ConfigGadgetPredicate>(v8, 0LL);
      std::shared_ptr<data::ConfigGadgetPredicate>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPredicate> *const)(v2 + 96));
      *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -1800;
      if ( v9 )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          1u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          2677);
        v7 = "fromJson for: predicate fails!";
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
          (common::milog::MiLogStream *const)(v2 + 384),
          (const char (*)[31])"fromJson for: predicate fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      }
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetPredicate>();
      v7 = (const char *)(v2 + 64);
      std::shared_ptr<data::ConfigGadgetPredicate>::operator=(
        &this->predicate,
        (std::shared_ptr<data::ConfigGadgetPredicate> *)(v2 + 64));
      std::shared_ptr<data::ConfigGadgetPredicate>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPredicate> *const)(v2 + 64));
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -1800;
    }
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, v7, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2683: range 000000000E61FDE6-000000000E62073B
data::ConfigGadgetStateActionPtr __cdecl data::ConfigGadgetStateAction::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateActionPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-208h]
  char v14[512]; // [rsp+20h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 16 8 ptr:2696 96 32 9 <unknown> 160 32 9 <unknown> 224 32 14 type_name:269"
                        "0 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateAction::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 224);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 224)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        2693);
      common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[51])"fromJson for: ConfigGadgetStateAction $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateAction> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          2699);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 224));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateAction> *const)jval,
          0LL);
      }
      else
      {
        v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 48LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            2704);
          v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                 (common::milog::MiLogStream *const)(v2 + 416),
                 (const std::string *)(v2 + 224));
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateAction> *const)jval,
            0LL);
        }
        else
        {
          v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
          LOBYTE(v1) = v11 != 0;
          v12 = v11 < 0;
          if ( v12 )
            v10 = __asan_report_store1(v10 + 48, v1, v12);
          *(_BYTE *)(v10 + 48) = 1;
          std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateAction> *const)jval,
            (std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64));
        }
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 224));
  }
  else
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      2687);
    common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[56])"jsonValueFind for: ConfigGadgetStateAction $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateAction> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 2712: range 000000000E62073C-000000000E62092C
int32_t __cdecl data::ConfigGadgetStateAction::getHashValue(const data::ConfigGadgetStateAction *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int32_t v7; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:2713";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateAction::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->gadget_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->gadget_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->gadget_state);
  }
  common::tools::HashUtils::appendHash(this->gadget_state, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigGadgetPredicate>(0LL, &this->predicate) )
  {
    v5 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetPredicate,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->predicate);
    if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(v5);
    v6 = *(_QWORD *)v5 + 56LL;
    if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
      v5 = __asan_report_load8(*(_QWORD *)v5 + 56LL);
    v7 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
    common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  }
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2724: range 000000000E62092E-000000000E6216D0
bool __cdecl data::ConfigGadgetTurnState::fromJson(data::ConfigGadgetTurnState *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *angle_around_x_ptr; // [rsp+18h] [rbp-348h]
  const Json::Value *angle_around_y_ptr; // [rsp+20h] [rbp-340h]
  const Json::Value *angle_around_z_ptr; // [rsp+28h] [rbp-338h]
  const Json::Value *lerp_curve_index_ptr; // [rsp+30h] [rbp-330h]
  const Json::Value *lerp_time_ptr; // [rsp+38h] [rbp-328h]
  char v13[800]; // [rsp+40h] [rbp-320h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(768LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "15 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 32 "
                        "9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9"
                        " <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetTurnState::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "angleAroundX",
    (const std::allocator<char> *)(v2 + 48));
  angle_around_x_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( angle_around_x_ptr && !fromJson<float>(angle_around_x_ptr, &this->angle_around_x) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      2734);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[34])"fromJson for: angleAroundX fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "angleAroundY",
      (const std::allocator<char> *)(v2 + 64));
    angle_around_y_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( angle_around_y_ptr && !fromJson<float>(angle_around_y_ptr, &this->angle_around_y) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        2746);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[34])"fromJson for: angleAroundY fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "angleAroundZ",
        (const std::allocator<char> *)(v2 + 80));
      angle_around_z_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( angle_around_z_ptr && !fromJson<float>(angle_around_z_ptr, &this->angle_around_z) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          2758);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[34])"fromJson for: angleAroundZ fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "lerpCurveIndex",
          (const std::allocator<char> *)(v2 + 96));
        lerp_curve_index_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( lerp_curve_index_ptr && !fromJson<unsigned int>(lerp_curve_index_ptr, &this->lerp_curve_index) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            2770);
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[36])"fromJson for: lerpCurveIndex fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "lerpTime",
            (const std::allocator<char> *)(v2 + 112));
          lerp_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( lerp_time_ptr && !fromJson<float>(lerp_time_ptr, &this->lerp_time) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              2782);
            common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[30])"fromJson for: lerpTime fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            v6 = ((_BYTE)this + 20) & 7;
            v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
            if ( (_BYTE)v7 )
              __asan_report_store1(&this->is_json_loaded, v6, v7);
            this->is_json_loaded = 1;
            result = 1;
          }
        }
      }
    }
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2790: range 000000000E6216D2-000000000E621987
int32_t __cdecl data::ConfigGadgetTurnState::getHashValue(const data::ConfigGadgetTurnState *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:2791";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetTurnState::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->angle_around_x, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->angle_around_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->angle_around_y >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->angle_around_y);
  }
  common::tools::HashUtils::appendHash(this->angle_around_y, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->angle_around_z >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->angle_around_z >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->angle_around_z);
  }
  common::tools::HashUtils::appendHash(this->angle_around_z, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_curve_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lerp_curve_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->lerp_curve_index);
  }
  common::tools::HashUtils::appendHash(this->lerp_curve_index, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lerp_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->lerp_time);
  }
  common::tools::HashUtils::appendHash(this->lerp_time, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2801: range 000000000E621988-000000000E622888
bool __cdecl data::mapFromJson(const Json::Value *jval, data::ConfigGadgetTurnStateMap *m)
{
  bool v2; // r15
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // al
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // r14
  _BOOL4 v9; // r14d
  common::milog::MiLogStream *v10; // rax
  unsigned __int64 v11; // rax
  const Json::Value *v12; // rsi
  unsigned __int64 v13; // rax
  __int64 v14; // rsi
  __int64 v15; // rsi
  __int64 v16; // rsi
  __int64 v17; // rdx
  data::ConfigGadgetTurnState *v18; // r8
  common::milog::MiLogStream *v19; // rax
  int v20; // r14d
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false,false>,bool> v21; // rax
  common::milog::MiLogStream *v22; // rax
  unsigned __int64 v23; // rax
  unsigned __int64 v24; // rax
  unsigned __int64 v25; // rax
  int v26; // edx
  char v29[848]; // [rsp+20h] [rbp-350h] BYREF

  v3 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(800LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "13 32 4 8 key:2806 48 16 8 cit:2803 80 16 9 <unknown> 112 24 10 value:2819 176 32 12 key_str:280"
                        "7 240 32 9 <unknown> 304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496 32 9 <unknown>"
                        " 560 40 13 tmp_jval:2802 640 40 13 key_jval:2805 720 40 15 value_jval:2818";
  *(_QWORD *)(v3 + 16) = data::mapFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = -218959360;
  v5[536862725] = 62194;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862730] = -219021312;
  v5[536862731] = 62194;
  v5[536862732] = -219021312;
  v5[536862733] = 62194;
  v5[536862734] = -219021312;
  v5[536862735] = 62194;
  v5[536862736] = -219021312;
  v5[536862737] = 62194;
  v5[536862738] = -234881024;
  v5[536862739] = -218959118;
  v5[536862741] = -218959360;
  v5[536862742] = 62194;
  v5[536862743] = -218103808;
  v5[536862744] = -202116109;
  Json::Value::Value((Json::Value *)(v3 + 560), jval);
  if ( *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  Json::Value::begin((Json::Value_0 *const)(v3 + 560));
  while ( 1 )
  {
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    Json::Value::end((Json::Value_0 *const)(v3 + 560));
    v6 = Json::ValueIteratorBase::operator!=(
           (const Json::ValueIteratorBase *const)(v3 + 48),
           (const Json::ValueIteratorBase::SelfType *)(v3 + 80));
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = -1800;
    if ( !v6 )
      break;
    v7 = ((v3 + 640) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    if ( *(char *)(((v3 + 640) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 679) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 89) & 7) >= *(_BYTE *)(((v3 + 679) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 640, 40LL);
    }
    Json::ValueIteratorBase::key((Json::ValueIteratorBase *)(v3 + 640));
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
    *(_DWORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v3 + 176);
    if ( !fromJson<std::string>((const Json::Value *)(v3 + 640), (std::string *)(v3 + 176)) )
    {
      *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        2810);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)(v3 + 240),
             (const char (*)[21])"key fromJson fails: ");
      *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 304) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 304, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v3 + 304), (Json::Value_0 *)(v3 + 640));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 304));
      std::string::~string((void *)(v3 + 304));
      *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 240));
      *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else if ( common::tools::StringUtils::strToNum<unsigned int>(
                (const std::string *)(v3 + 176),
                (unsigned int *)(v3 + 32),
                1) )
    {
      *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 368, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 368),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        2815);
      v10 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              (common::milog::MiLogStream *const)(v3 + 368),
              (const char (*)[17])"strToNum fails: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v3 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 368));
      *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v11 = ((v3 + 720) >> 3) + 2147450880;
      *(_DWORD *)v11 = 0;
      *(_BYTE *)(v11 + 4) = 0;
      v12 = Json::ValueIterator::operator*((Json::ValueIterator *const)(v3 + 48));
      Json::Value::Value((Json::Value *)(v3 + 720), v12);
      v13 = ((v3 + 112) >> 3) + 2147450880;
      *(_WORD *)v13 = 0;
      *(_BYTE *)(v13 + 2) = 0;
      if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 112, v12);
      *(_DWORD *)(v3 + 112) = 0;
      v14 = (((_BYTE)v3 + 116) & 7u) + 3;
      if ( *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 + 116) & 7) + 3) >= *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 116, v14);
      }
      *(_DWORD *)(v3 + 116) = 0;
      if ( *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 120, v14);
      *(_DWORD *)(v3 + 120) = 0;
      v15 = (((_BYTE)v3 + 124) & 7u) + 3;
      if ( *(_BYTE *)(((v3 + 124) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 + 124) & 7) + 3) >= *(_BYTE *)(((v3 + 124) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 124, v15);
      }
      *(_DWORD *)(v3 + 124) = 0;
      if ( *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 128, v15);
      *(_DWORD *)(v3 + 128) = 0;
      v16 = ((_BYTE)v3 - 124) & 7;
      v17 = (*(_BYTE *)(((v3 + 132) >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((v3 + 132) >> 3) + 0x7FFF8000));
      if ( (_BYTE)v17 )
        __asan_report_store1(v3 + 132, v16, v17);
      *(_BYTE *)(v3 + 132) = 0;
      if ( !data::ConfigGadgetTurnState::fromJson(
              (data::ConfigGadgetTurnState *const)(v3 + 112),
              (const Json::Value *)(v3 + 720)) )
      {
        *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 432) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 80 + 31) & 7) >= *(_BYTE *)(((v3 + 463) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 432, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 432),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "mapFromJson",
          2822);
        v19 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)(v3 + 432),
                (const char (*)[28])"value fromJson fails, key: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v19, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 432));
        *(_DWORD *)(((v3 + 432) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v20 = 0;
      }
      else
      {
        v21 = std::unordered_map<unsigned int,data::ConfigGadgetTurnState>::emplace<unsigned int &,data::ConfigGadgetTurnState&>(
                m,
                (unsigned int *)(v3 + 32),
                (data::ConfigGadgetTurnState *)(v3 + 112),
                (unsigned int *)(v3 + 32),
                v18);
        if ( !v21.second )
        {
          *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 496) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 16 + 31) & 7) >= *(_BYTE *)(((v3 + 527) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 496, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 496),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "mapFromJson",
            2827);
          v22 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 496),
                  (const char (*)[16])"key duplicate: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v22, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 496));
          *(_DWORD *)(((v3 + 496) >> 3) + 0x7FFF8000) = -117901064;
          v2 = 0;
          v20 = 0;
        }
        else
        {
          v20 = 1;
        }
      }
      Json::Value::~Value((Json::Value_0 *const)(v3 + 720));
      v9 = v20 == 1;
    }
    std::string::~string((void *)(v3 + 176));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 640));
    v23 = ((v3 + 640) >> 3) + 2147450880;
    *(_DWORD *)v23 = -117901064;
    *(_BYTE *)(v23 + 4) = -8;
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = -117901064;
    v24 = ((v3 + 720) >> 3) + 2147450880;
    *(_DWORD *)v24 = -117901064;
    *(_BYTE *)(v24 + 4) = -8;
    v25 = ((v3 + 112) >> 3) + 2147450880;
    *(_WORD *)v25 = -1800;
    *(_BYTE *)(v25 + 2) = -8;
    if ( !v9 )
    {
      v26 = 0;
      goto LABEL_48;
    }
    Json::ValueIterator::operator++((Json::ValueIterator *const)(v3 + 48));
  }
  v26 = 1;
LABEL_48:
  *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) = -1800;
  if ( v26 == 1 )
    v2 = 1;
  Json::Value::~Value((Json::Value_0 *const)(v3 + 560));
  if ( v29 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8060) = -168430091;
  }
  return v2;
};

// Line 2836: range 000000000E622889-000000000E622B59
int32_t __cdecl data::getMapHashValue(const data::ConfigGadgetTurnStateMap *map)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false,false>::reference v7; // [rsp+18h] [rbp-B8h]
  uint32_t *key; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::ConfigGadgetTurnState> >::type *val; // [rsp+28h] [rbp-A8h]
  char v10[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:2837 64 8 16 __for_begin:2838 96 8 14 __for_end:2838";
  *(_QWORD *)(v2 + 16) = data::getMapHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,data::ConfigGadgetTurnState>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::ConfigGadgetTurnState>::begin(map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<unsigned int,data::ConfigGadgetTurnState>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::ConfigGadgetTurnState>::end(map);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false> *)(v2 + 96)) )
  {
    v7 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false,false> *const)(v2 + 64));
    key = std::get<0ul,unsigned int const,data::ConfigGadgetTurnState>(v7);
    val = (std::tuple_element<1,const std::pair<unsigned int const,data::ConfigGadgetTurnState> >::type *)std::get<1ul,unsigned int const,data::ConfigGadgetTurnState>(v7);
    if ( *(_BYTE *)(((unsigned __int64)key >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)key & 7) + 3) >= *(_BYTE *)(((unsigned __int64)key >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(key);
    }
    common::tools::HashUtils::appendHash(*key, (int32_t *)(v2 + 48));
    HashValue = data::ConfigGadgetTurnState::getHashValue(val);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::ConfigGadgetTurnState>,false,false> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2849: range 000000000E622B5A-000000000E6239AC
bool __cdecl data::mapFromJson(const Json::Value *jval, data::ConfigGVTurnAvatarPosMap *m)
{
  bool v2; // r15
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // al
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // r14
  _BOOL4 v9; // r14d
  common::milog::MiLogStream *v10; // rax
  unsigned __int64 v11; // rax
  const Json::Value *v12; // rsi
  __int64 v13; // rsi
  __int64 v14; // rsi
  __int64 v15; // rdx
  data::Vector *v16; // r8
  common::milog::MiLogStream *v17; // rax
  int v18; // r14d
  std::pair<std::__detail::_Node_iterator<std::pair<unsigned int const,data::Vector>,false,false>,bool> v19; // rax
  common::milog::MiLogStream *v20; // rax
  unsigned __int64 v21; // rax
  unsigned __int64 v22; // rax
  int v23; // edx
  char v26[816]; // [rsp+20h] [rbp-330h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(768LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "13 32 4 8 key:2854 48 16 8 cit:2851 80 16 9 <unknown> 112 16 10 value:2867 144 32 12 key_str:285"
                        "5 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown>"
                        " 528 40 13 tmp_jval:2850 608 40 13 key_jval:2853 688 40 15 value_jval:2866";
  *(_QWORD *)(v3 + 16) = data::mapFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61956;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862737] = -234881024;
  v5[536862738] = -218959118;
  v5[536862740] = -218959360;
  v5[536862741] = 62194;
  v5[536862742] = -218103808;
  v5[536862743] = -202116109;
  Json::Value::Value((Json::Value *)(v3 + 528), jval);
  if ( *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  Json::Value::begin((Json::Value_0 *const)(v3 + 528));
  while ( 1 )
  {
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    Json::Value::end((Json::Value_0 *const)(v3 + 528));
    v6 = Json::ValueIteratorBase::operator!=(
           (const Json::ValueIteratorBase *const)(v3 + 48),
           (const Json::ValueIteratorBase::SelfType *)(v3 + 80));
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = -1800;
    if ( !v6 )
      break;
    v7 = ((v3 + 608) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 647) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 121) & 7) >= *(_BYTE *)(((v3 + 647) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 608, 40LL);
    }
    Json::ValueIteratorBase::key((Json::ValueIteratorBase *)(v3 + 608));
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = 4;
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v3 + 144);
    if ( !fromJson<std::string>((const Json::Value *)(v3 + 608), (std::string *)(v3 + 144)) )
    {
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 208, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 208),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        2858);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)(v3 + 208),
             (const char (*)[21])"key fromJson fails: ");
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v3 + 272), (Json::Value_0 *)(v3 + 608));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 272));
      std::string::~string((void *)(v3 + 272));
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else if ( common::tools::StringUtils::strToNum<unsigned int>(
                (const std::string *)(v3 + 144),
                (unsigned int *)(v3 + 32),
                1) )
    {
      *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        2863);
      v10 = common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(
              (common::milog::MiLogStream *const)(v3 + 336),
              (const char (*)[17])"strToNum fails: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, (const std::string *)(v3 + 144));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
      *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v11 = ((v3 + 688) >> 3) + 2147450880;
      *(_DWORD *)v11 = 0;
      *(_BYTE *)(v11 + 4) = 0;
      v12 = Json::ValueIterator::operator*((Json::ValueIterator *const)(v3 + 48));
      Json::Value::Value((Json::Value *)(v3 + 688), v12);
      *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 112, v12);
      *(_DWORD *)(v3 + 112) = 0;
      v13 = (((_BYTE)v3 + 116) & 7u) + 3;
      if ( *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 + 116) & 7) + 3) >= *(_BYTE *)(((v3 + 116) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 116, v13);
      }
      *(_DWORD *)(v3 + 116) = 0;
      if ( *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 120, v13);
      *(_DWORD *)(v3 + 120) = 0;
      v14 = ((_BYTE)v3 + 124) & 7;
      v15 = (*(_BYTE *)(((v3 + 124) >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v14 >= *(_BYTE *)(((v3 + 124) >> 3) + 0x7FFF8000));
      if ( (_BYTE)v15 )
        __asan_report_store1(v3 + 124, v14, v15);
      *(_BYTE *)(v3 + 124) = 0;
      if ( !data::Vector::fromJson((data::Vector *const)(v3 + 112), (const Json::Value *)(v3 + 688)) )
      {
        *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 112 + 31) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 400, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 400),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "mapFromJson",
          2870);
        v17 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)(v3 + 400),
                (const char (*)[28])"value fromJson fails, key: ");
        common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v17, (const unsigned int *)(v3 + 32));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
        *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v18 = 0;
      }
      else
      {
        v19 = std::unordered_map<unsigned int,data::Vector>::emplace<unsigned int &,data::Vector&>(
                m,
                (unsigned int *)(v3 + 32),
                (data::Vector *)(v3 + 112),
                (unsigned int *)(v3 + 32),
                v16);
        if ( !v19.second )
        {
          *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 464) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 464, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 464),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "mapFromJson",
            2875);
          v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 464),
                  (const char (*)[16])"key duplicate: ");
          common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v20, (const unsigned int *)(v3 + 32));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 464));
          *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = -117901064;
          v2 = 0;
          v18 = 0;
        }
        else
        {
          v18 = 1;
        }
      }
      Json::Value::~Value((Json::Value_0 *const)(v3 + 688));
      v9 = v18 == 1;
    }
    std::string::~string((void *)(v3 + 144));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 608));
    v21 = ((v3 + 608) >> 3) + 2147450880;
    *(_DWORD *)v21 = -117901064;
    *(_BYTE *)(v21 + 4) = -8;
    *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) = -8;
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = -117901064;
    v22 = ((v3 + 688) >> 3) + 2147450880;
    *(_DWORD *)v22 = -117901064;
    *(_BYTE *)(v22 + 4) = -8;
    *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -1800;
    if ( !v9 )
    {
      v23 = 0;
      goto LABEL_44;
    }
    Json::ValueIterator::operator++((Json::ValueIterator *const)(v3 + 48));
  }
  v23 = 1;
LABEL_44:
  *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) = -1800;
  if ( v23 == 1 )
    v2 = 1;
  Json::Value::~Value((Json::Value_0 *const)(v3 + 528));
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 96) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 2884: range 000000000E6239AD-000000000E623C7D
int32_t __cdecl data::getMapHashValue(const data::ConfigGVTurnAvatarPosMap *map)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::Vector>,false,false>::reference v7; // [rsp+18h] [rbp-B8h]
  uint32_t *key; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,const std::pair<unsigned int const,data::Vector> >::type *val; // [rsp+28h] [rbp-A8h]
  char v10[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:2885 64 8 16 __for_begin:2886 96 8 14 __for_end:2886";
  *(_QWORD *)(v2 + 16) = data::getMapHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<unsigned int,data::Vector>::const_iterator *)(v2 + 64) = std::unordered_map<unsigned int,data::Vector>::begin(map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<unsigned int,data::Vector>::const_iterator *)(v2 + 96) = std::unordered_map<unsigned int,data::Vector>::end(map);
  while ( std::__detail::operator!=<std::pair<unsigned int const,data::Vector>,false>(
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::Vector>,false> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<unsigned int const,data::Vector>,false> *)(v2 + 96)) )
  {
    v7 = std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::Vector>,false,false>::operator*((const std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::Vector>,false,false> *const)(v2 + 64));
    key = std::get<0ul,unsigned int const,data::Vector>(v7);
    val = (std::tuple_element<1,const std::pair<unsigned int const,data::Vector> >::type *)std::get<1ul,unsigned int const,data::Vector>(v7);
    if ( *(_BYTE *)(((unsigned __int64)key >> 3) + 0x7FFF8000) != 0
      && (char)(((unsigned __int8)key & 7) + 3) >= *(_BYTE *)(((unsigned __int64)key >> 3) + 0x7FFF8000) )
    {
      __asan_report_load4(key);
    }
    common::tools::HashUtils::appendHash(*key, (int32_t *)(v2 + 48));
    HashValue = data::Vector::getHashValue(val);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::Vector>,false,false>::operator++((std::__detail::_Node_const_iterator<std::pair<unsigned int const,data::Vector>,false,false> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2898: range 000000000E623C7E-000000000E623EB3
data::ConfigGadgetTurnPtr __cdecl data::createConfigGadgetTurn(const std::string *name)
{
  const std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::key_type *v1; // rsi
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > >::pointer v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(const std::string *, unsigned __int64); // rcx
  data::ConfigGadgetTurnPtr result; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > >::_Base_ptr)"2 32 8 7 it:2899 64 8 9 <unknown>";
  v2[2]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > >::_Base_ptr)data::createConfigGadgetTurn;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], v1);
  v2[4]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::find(
                    &data::g_ConfigGadgetTurnMap[abi:cxx11],
                    v1)._M_node;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], v1);
  v2[8]._M_node = std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::end(&data::g_ConfigGadgetTurnMap[abi:cxx11])._M_node;
  v5 = std::operator!=(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    v6 = std::_Rb_tree_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetTurn>>>::operator->(v2 + 4);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6->second);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 24LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
    v9 = *(void (__fastcall **)(const std::string *, unsigned __int64))v8;
    if ( *(_WORD *)(((unsigned __int64)name >> 3) + 0x7FFF8000) )
      v7 = __asan_report_store16();
    v9(name, v7);
  }
  else
  {
    std::shared_ptr<data::ConfigGadgetTurn>::shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)name, 0LL);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2>::element_type *)name;
  return result;
};

// Line 2905: range 000000000E623EB4-000000000E6245FD
void __cdecl data::ConfigGadgetTurn::foreachMember(
        data::ConfigGadgetTurn *const this,
        std::function<void(std::any&)> *p_func)
{
  std::any *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[544]; // [rsp+10h] [rbp-220h] BYREF

  v2 = (std::any *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(512LL);
    if ( v3 )
      v2 = (std::any *)v3;
  }
  v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1102416563;
  v2->_M_storage._M_ptr = "15 32 16 27 move_part_around_x_any:2906 64 16 29 anchor_part_around_x_any:2908 96 16 27 move_p"
                          "art_around_y_any:2910 128 16 29 anchor_part_around_y_any:2912 160 16 27 move_part_around_z_any"
                          ":2914 192 16 29 anchor_part_around_z_any:2916 224 16 34 audio_begin_turning_event_any:2918 256"
                          " 16 33 audio_stop_turning_event_any:2920 288 16 43 audio_begin_turning_event_around_x_any:2922"
                          " 320 16 42 audio_stop_turning_event_around_x_any:2924 352 16 43 audio_begin_turning_event_arou"
                          "nd_y_any:2926 384 16 42 audio_stop_turning_event_around_y_any:2928 416 16 43 audio_begin_turni"
                          "ng_event_around_z_any:2930 448 16 42 audio_stop_turning_event_around_z_any:2932 480 16 23 turn"
                          "_state_map_any:2934";
  v2[1]._M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))data::ConfigGadgetTurn::foreachMember;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862734] = -219021312;
  v4[536862735] = -202178560;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 2,
    &this->move_part_around_x);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 2);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 4,
    &this->anchor_part_around_x);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 4);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 6,
    &this->move_part_around_y);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 6);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 8,
    &this->anchor_part_around_y);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 8);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 10,
    &this->move_part_around_z);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 10);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 12,
    &this->anchor_part_around_z);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 12);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 14,
    &this->audio_begin_turning_event);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 14);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 16,
    &this->audio_stop_turning_event);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 16);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 18,
    &this->audio_begin_turning_event_around_x);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 18);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 20,
    &this->audio_stop_turning_event_around_x);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 20);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 22,
    &this->audio_begin_turning_event_around_y);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 22);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 24,
    &this->audio_stop_turning_event_around_y);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 24);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 26,
    &this->audio_begin_turning_event_around_z);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 26);
  std::any::any<data::ConfigWwiseString &,data::ConfigWwiseString,std::any::_Manager_external<data::ConfigWwiseString>,true,true>(
    v2 + 28,
    &this->audio_stop_turning_event_around_z);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 28);
  std::any::any<std::unordered_map<unsigned int,data::ConfigGadgetTurnState> &,std::unordered_map<unsigned int,data::ConfigGadgetTurnState>,std::any::_Manager_external<std::unordered_map<unsigned int,data::ConfigGadgetTurnState>>,true,true>(
    v2 + 30,
    &this->turn_state_map);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 30);
  std::any::~any(v2 + 30);
  std::any::~any(v2 + 28);
  std::any::~any(v2 + 26);
  std::any::~any(v2 + 24);
  std::any::~any(v2 + 22);
  std::any::~any(v2 + 20);
  std::any::~any(v2 + 18);
  std::any::~any(v2 + 16);
  std::any::~any(v2 + 14);
  std::any::~any(v2 + 12);
  std::any::~any(v2 + 10);
  std::any::~any(v2 + 8);
  std::any::~any(v2 + 6);
  std::any::~any(v2 + 4);
  std::any::~any(v2 + 2);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 2939: range 000000000E6245FE-000000000E624648
std::shared_ptr<data::ConfigGadgetTurn> __cdecl data::ConfigGadgetTurn::clone(data::ConfigGadgetTurn *const this)
{
  data::ConfigGadgetTurn *v1; // rsi
  std::shared_ptr<data::ConfigGadgetTurn> result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetTurn,data::ConfigGadgetTurn&>(
    (common::tools::perf::allocator<data::ConfigGadgetTurn,data::ConfigGadgetTurn> *)this,
    v1);
  result._M_ptr = this;
  return result;
};

// Line 2943: range 000000000E62464A-000000000E626CB7
bool __cdecl data::ConfigGadgetTurn::fromJson(data::ConfigGadgetTurn *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  data::ConfigGadgetTurnStateMap *p_turn_state_map; // rsi
  bool v7; // bl
  const Json::Value *move_part_around_x_ptr; // [rsp+18h] [rbp-938h]
  const Json::Value *anchor_part_around_x_ptr; // [rsp+20h] [rbp-930h]
  const Json::Value *move_part_around_y_ptr; // [rsp+28h] [rbp-928h]
  const Json::Value *anchor_part_around_y_ptr; // [rsp+30h] [rbp-920h]
  const Json::Value *move_part_around_z_ptr; // [rsp+38h] [rbp-918h]
  const Json::Value *anchor_part_around_z_ptr; // [rsp+40h] [rbp-910h]
  const Json::Value *audio_begin_turning_event_ptr; // [rsp+48h] [rbp-908h]
  const Json::Value *audio_stop_turning_event_ptr; // [rsp+50h] [rbp-900h]
  const Json::Value *audio_begin_turning_event_around_x_ptr; // [rsp+58h] [rbp-8F8h]
  const Json::Value *audio_stop_turning_event_around_x_ptr; // [rsp+60h] [rbp-8F0h]
  const Json::Value *audio_begin_turning_event_around_y_ptr; // [rsp+68h] [rbp-8E8h]
  const Json::Value *audio_stop_turning_event_around_y_ptr; // [rsp+70h] [rbp-8E0h]
  const Json::Value *audio_begin_turning_event_around_z_ptr; // [rsp+78h] [rbp-8D8h]
  const Json::Value *audio_stop_turning_event_around_z_ptr; // [rsp+80h] [rbp-8D0h]
  const Json::Value *turn_state_map_ptr; // [rsp+88h] [rbp-8C8h]
  char v25[2240]; // [rsp+90h] [rbp-8C0h] BYREF

  v2 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2208LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "45 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 32 9 <unknown> "
                        "352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 6"
                        "72 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 99"
                        "2 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown>"
                        " 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 32 9 <unknown> 1568 32 9 <unkn"
                        "own> 1632 32 9 <unknown> 1696 32 9 <unknown> 1760 32 9 <unknown> 1824 32 9 <unknown> 1888 32 9 <"
                        "unknown> 1952 32 9 <unknown> 2016 32 9 <unknown> 2080 32 9 <unknown> 2144 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetTurn::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -218959118;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -218959118;
  v4[536862780] = -218959118;
  v4[536862782] = -218959118;
  v4[536862784] = -218959118;
  v4[536862786] = -218959118;
  v4[536862788] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 288),
    "movePartAroundX",
    (const std::allocator<char> *)(v2 + 48));
  move_part_around_x_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
  std::string::~string((void *)(v2 + 288));
  *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( move_part_around_x_ptr && !fromJson<std::string>(move_part_around_x_ptr, &this->move_part_around_x) )
  {
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 352, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 352),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      2953);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      (common::milog::MiLogStream *const)(v2 + 352),
      (const char (*)[37])"fromJson for: movePartAroundX fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 416),
      "anchorPartAroundX",
      (const std::allocator<char> *)(v2 + 64));
    anchor_part_around_x_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
    std::string::~string((void *)(v2 + 416));
    *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( anchor_part_around_x_ptr && !fromJson<std::string>(anchor_part_around_x_ptr, &this->anchor_part_around_x) )
    {
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        2965);
      common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
        (common::milog::MiLogStream *const)(v2 + 480),
        (const char (*)[39])"fromJson for: anchorPartAroundX fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 544),
        "movePartAroundY",
        (const std::allocator<char> *)(v2 + 80));
      move_part_around_y_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
      std::string::~string((void *)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( move_part_around_y_ptr && !fromJson<std::string>(move_part_around_y_ptr, &this->move_part_around_y) )
      {
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          2977);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          (common::milog::MiLogStream *const)(v2 + 608),
          (const char (*)[37])"fromJson for: movePartAroundY fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 672),
          "anchorPartAroundY",
          (const std::allocator<char> *)(v2 + 96));
        anchor_part_around_y_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
        std::string::~string((void *)(v2 + 672));
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( anchor_part_around_y_ptr && !fromJson<std::string>(anchor_part_around_y_ptr, &this->anchor_part_around_y) )
        {
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 736, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 736),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            2989);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            (common::milog::MiLogStream *const)(v2 + 736),
            (const char (*)[39])"fromJson for: anchorPartAroundY fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 800),
            "movePartAroundZ",
            (const std::allocator<char> *)(v2 + 112));
          move_part_around_z_ptr = jsonValueFind(jval, (const std::string *)(v2 + 800));
          std::string::~string((void *)(v2 + 800));
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( move_part_around_z_ptr && !fromJson<std::string>(move_part_around_z_ptr, &this->move_part_around_z) )
          {
            *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 864, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 864),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              3001);
            common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              (common::milog::MiLogStream *const)(v2 + 864),
              (const char (*)[37])"fromJson for: movePartAroundZ fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 928),
              "anchorPartAroundZ",
              (const std::allocator<char> *)(v2 + 128));
            anchor_part_around_z_ptr = jsonValueFind(jval, (const std::string *)(v2 + 928));
            std::string::~string((void *)(v2 + 928));
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( anchor_part_around_z_ptr
              && !fromJson<std::string>(anchor_part_around_z_ptr, &this->anchor_part_around_z) )
            {
              *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                3013);
              common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                (common::milog::MiLogStream *const)(v2 + 992),
                (const char (*)[39])"fromJson for: anchorPartAroundZ fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1056),
                "audioBeginTurningEvent",
                (const std::allocator<char> *)(v2 + 144));
              audio_begin_turning_event_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1056));
              std::string::~string((void *)(v2 + 1056));
              *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( audio_begin_turning_event_ptr
                && !data::ConfigWwiseString::fromJson(&this->audio_begin_turning_event, audio_begin_turning_event_ptr) )
              {
                *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1120, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1120),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  3025);
                common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                  (common::milog::MiLogStream *const)(v2 + 1120),
                  (const char (*)[44])"fromJson for: audioBeginTurningEvent fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1184),
                  "audioStopTurningEvent",
                  (const std::allocator<char> *)(v2 + 160));
                audio_stop_turning_event_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1184));
                std::string::~string((void *)(v2 + 1184));
                *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( audio_stop_turning_event_ptr
                  && !data::ConfigWwiseString::fromJson(&this->audio_stop_turning_event, audio_stop_turning_event_ptr) )
                {
                  *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1248) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1248, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1248),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    3037);
                  common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
                    (common::milog::MiLogStream *const)(v2 + 1248),
                    (const char (*)[43])"fromJson for: audioStopTurningEvent fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1248));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 176);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1312),
                    "audioBeginTurningEventAroundX",
                    (const std::allocator<char> *)(v2 + 176));
                  audio_begin_turning_event_around_x_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1312));
                  std::string::~string((void *)(v2 + 1312));
                  *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 176);
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                  if ( audio_begin_turning_event_around_x_ptr
                    && !data::ConfigWwiseString::fromJson(
                          &this->audio_begin_turning_event_around_x,
                          audio_begin_turning_event_around_x_ptr) )
                  {
                    *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1376) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1376, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1376),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      3049);
                    common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                      (common::milog::MiLogStream *const)(v2 + 1376),
                      (const char (*)[51])"fromJson for: audioBeginTurningEventAroundX fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1376));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 192);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1440),
                      "audioStopTurningEventAroundX",
                      (const std::allocator<char> *)(v2 + 192));
                    audio_stop_turning_event_around_x_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1440));
                    std::string::~string((void *)(v2 + 1440));
                    *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 192);
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                    if ( audio_stop_turning_event_around_x_ptr
                      && !data::ConfigWwiseString::fromJson(
                            &this->audio_stop_turning_event_around_x,
                            audio_stop_turning_event_around_x_ptr) )
                    {
                      *(_DWORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1504) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1504, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1504),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        3061);
                      common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                        (common::milog::MiLogStream *const)(v2 + 1504),
                        (const char (*)[50])"fromJson for: audioStopTurningEventAroundX fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1504));
                      v5 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 208);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1568),
                        "audioBeginTurningEventAroundY",
                        (const std::allocator<char> *)(v2 + 208));
                      audio_begin_turning_event_around_y_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1568));
                      std::string::~string((void *)(v2 + 1568));
                      *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 208);
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                      if ( audio_begin_turning_event_around_y_ptr
                        && !data::ConfigWwiseString::fromJson(
                              &this->audio_begin_turning_event_around_y,
                              audio_begin_turning_event_around_y_ptr) )
                      {
                        *(_DWORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1632) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1632, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1632),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          3073);
                        common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                          (common::milog::MiLogStream *const)(v2 + 1632),
                          (const char (*)[51])"fromJson for: audioBeginTurningEventAroundY fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1632));
                        v5 = 0;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 224);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 1696),
                          "audioStopTurningEventAroundY",
                          (const std::allocator<char> *)(v2 + 224));
                        audio_stop_turning_event_around_y_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1696));
                        std::string::~string((void *)(v2 + 1696));
                        *(_DWORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 224);
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                        if ( audio_stop_turning_event_around_y_ptr
                          && !data::ConfigWwiseString::fromJson(
                                &this->audio_stop_turning_event_around_y,
                                audio_stop_turning_event_around_y_ptr) )
                        {
                          *(_DWORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 1760) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 1760, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 1760),
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/json_data_auto/ConfigEntity.cpp",
                            "fromJson",
                            3085);
                          common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                            (common::milog::MiLogStream *const)(v2 + 1760),
                            (const char (*)[50])"fromJson for: audioStopTurningEventAroundY fails!");
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1760));
                          v5 = 0;
                        }
                        else
                        {
                          *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = 0;
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                          std::allocator<char>::allocator(v2 + 240);
                          std::string::basic_string<std::allocator<char>>(
                            (std::string *const)(v2 + 1824),
                            "audioBeginTurningEventAroundZ",
                            (const std::allocator<char> *)(v2 + 240));
                          audio_begin_turning_event_around_z_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1824));
                          std::string::~string((void *)(v2 + 1824));
                          *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = -117901064;
                          std::allocator<char>::~allocator(v2 + 240);
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                          if ( audio_begin_turning_event_around_z_ptr
                            && !data::ConfigWwiseString::fromJson(
                                  &this->audio_begin_turning_event_around_z,
                                  audio_begin_turning_event_around_z_ptr) )
                          {
                            *(_DWORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v2 + 1888) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v2 + 1919) >> 3) + 0x7FFF8000) != 0
                              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1919) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v2 + 1888, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v2 + 1888),
                              &common::milog::MiLogDefault::default_log_obj_,
                              3u,
                              "./src/json_data_auto/ConfigEntity.cpp",
                              "fromJson",
                              3097);
                            common::milog::MiLogStream::operator<<<char [51],(char *[51])0>(
                              (common::milog::MiLogStream *const)(v2 + 1888),
                              (const char (*)[51])"fromJson for: audioBeginTurningEventAroundZ fails!");
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1888));
                            v5 = 0;
                          }
                          else
                          {
                            *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = 0;
                            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
                            std::allocator<char>::allocator(v2 + 256);
                            std::string::basic_string<std::allocator<char>>(
                              (std::string *const)(v2 + 1952),
                              "audioStopTurningEventAroundZ",
                              (const std::allocator<char> *)(v2 + 256));
                            audio_stop_turning_event_around_z_ptr = jsonValueFind(
                                                                      jval,
                                                                      (const std::string *)(v2 + 1952));
                            std::string::~string((void *)(v2 + 1952));
                            *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = -117901064;
                            std::allocator<char>::~allocator(v2 + 256);
                            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                            if ( audio_stop_turning_event_around_z_ptr
                              && !data::ConfigWwiseString::fromJson(
                                    &this->audio_stop_turning_event_around_z,
                                    audio_stop_turning_event_around_z_ptr) )
                            {
                              *(_DWORD *)(((v2 + 2016) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v2 + 2016) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v2 + 2047) >> 3) + 0x7FFF8000) != 0
                                && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 2047) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v2 + 2016, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v2 + 2016),
                                &common::milog::MiLogDefault::default_log_obj_,
                                3u,
                                "./src/json_data_auto/ConfigEntity.cpp",
                                "fromJson",
                                3109);
                              common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                                (common::milog::MiLogStream *const)(v2 + 2016),
                                (const char (*)[50])"fromJson for: audioStopTurningEventAroundZ fails!");
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2016));
                              v5 = 0;
                            }
                            else
                            {
                              *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = 0;
                              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
                              std::allocator<char>::allocator(v2 + 272);
                              std::string::basic_string<std::allocator<char>>(
                                (std::string *const)(v2 + 2080),
                                "turnStateMap",
                                (const std::allocator<char> *)(v2 + 272));
                              p_turn_state_map = (data::ConfigGadgetTurnStateMap *)(v2 + 2080);
                              turn_state_map_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2080));
                              std::string::~string((void *)(v2 + 2080));
                              *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = -117901064;
                              std::allocator<char>::~allocator(v2 + 272);
                              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
                              if ( turn_state_map_ptr
                                && (p_turn_state_map = &this->turn_state_map,
                                    !data::mapFromJson(turn_state_map_ptr, &this->turn_state_map)) )
                              {
                                *(_DWORD *)(((v2 + 2144) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v2 + 2144) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v2 + 2144, 32LL);
                                }
                                common::milog::MiLogStream::create(
                                  (common::milog::MiLogStream *)(v2 + 2144),
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  3u,
                                  "./src/json_data_auto/ConfigEntity.cpp",
                                  "fromJson",
                                  3121);
                                common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                  (common::milog::MiLogStream *const)(v2 + 2144),
                                  (const char (*)[34])"fromJson for: turnStateMap fails!");
                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2144));
                                v5 = 0;
                              }
                              else
                              {
                                if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                                  __asan_report_store1(&this->is_json_loaded, p_turn_state_map, &this->is_json_loaded);
                                this->is_json_loaded = 1;
                                v5 = 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v7 = v5;
  if ( v25 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8088) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8090) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8098) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80C8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80D8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80E0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80F8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8100) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8108) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8110) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2208LL, v25);
  }
  return v7;
};

// Line 3128: range 000000000E626CB8-000000000E627613
data::ConfigGadgetTurnPtr __cdecl data::ConfigGadgetTurn::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetTurnPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-208h]
  char v14[512]; // [rsp+20h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 16 8 ptr:3141 96 32 9 <unknown> 160 32 9 <unknown> 224 32 14 type_name:313"
                        "5 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetTurn::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 224);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 224)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3138);
      common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[44])"fromJson for: ConfigGadgetTurn $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetTurn>::shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetTurn((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetTurn>((const std::shared_ptr<data::ConfigGadgetTurn> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3144);
        v6 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[42])"create ConfigGadgetTurn fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 224));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetTurn>::shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)jval, 0LL);
      }
      else
      {
        v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 48LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3149);
          v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                 (common::milog::MiLogStream *const)(v2 + 416),
                 (const std::string *)(v2 + 224));
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetTurn>::shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)jval, 0LL);
        }
        else
        {
          v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v11 = *(_BYTE *)(((unsigned __int64)(v10 + 592) >> 3) + 0x7FFF8000);
          LOBYTE(v1) = v11 != 0;
          v12 = v11 < 0;
          if ( v12 )
            v10 = __asan_report_store1(v10 + 592, v1, v12);
          *(_BYTE *)(v10 + 592) = 1;
          std::shared_ptr<data::ConfigGadgetTurn>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetTurn> *const)jval,
            (std::shared_ptr<data::ConfigGadgetTurn> *)(v2 + 64));
        }
      }
      std::shared_ptr<data::ConfigGadgetTurn>::~shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 224));
  }
  else
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3132);
    common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[49])"jsonValueFind for: ConfigGadgetTurn $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetTurn>::shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3157: range 000000000E627614-000000000E6278F2
int32_t __cdecl data::ConfigGadgetTurn::getHashValue(const data::ConfigGadgetTurn *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  int32_t v8; // eax
  int32_t v9; // eax
  int32_t v10; // eax
  int32_t v11; // eax
  int32_t v12; // eax
  int32_t MapHashValue; // eax
  int32_t result; // eax
  char v15[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3158";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetTurn::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->move_part_around_x, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->anchor_part_around_x, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->move_part_around_y, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->anchor_part_around_y, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->move_part_around_z, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->anchor_part_around_z, (int32_t *)(v2 + 32));
  HashValue = data::ConfigWwiseString::getHashValue(&this->audio_begin_turning_event);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  v6 = data::ConfigWwiseString::getHashValue(&this->audio_stop_turning_event);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::ConfigWwiseString::getHashValue(&this->audio_begin_turning_event_around_x);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  v8 = data::ConfigWwiseString::getHashValue(&this->audio_stop_turning_event_around_x);
  common::tools::HashUtils::appendHash(v8, (int32_t *)(v2 + 32));
  v9 = data::ConfigWwiseString::getHashValue(&this->audio_begin_turning_event_around_y);
  common::tools::HashUtils::appendHash(v9, (int32_t *)(v2 + 32));
  v10 = data::ConfigWwiseString::getHashValue(&this->audio_stop_turning_event_around_y);
  common::tools::HashUtils::appendHash(v10, (int32_t *)(v2 + 32));
  v11 = data::ConfigWwiseString::getHashValue(&this->audio_begin_turning_event_around_z);
  common::tools::HashUtils::appendHash(v11, (int32_t *)(v2 + 32));
  v12 = data::ConfigWwiseString::getHashValue(&this->audio_stop_turning_event_around_z);
  common::tools::HashUtils::appendHash(v12, (int32_t *)(v2 + 32));
  MapHashValue = data::getMapHashValue(&this->turn_state_map);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3181: range 000000000E6EB1D0-000000000E6EB411
void __cdecl data::ConfigGlobalValueTurnRegister::ConfigGlobalValueTurnRegister(
        data::ConfigGlobalValueTurnRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetTurn> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGlobalValueTurnRegister::ConfigGlobalValueTurnRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGlobalValueTurn>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGlobalValueTurn",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::operator[](
         &data::g_ConfigGadgetTurnMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetTurn>::operator=<data::ConfigGlobalValueTurn>(
    v4,
    (std::shared_ptr<data::ConfigGlobalValueTurn> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGlobalValueTurn>::~shared_ptr((std::shared_ptr<data::ConfigGlobalValueTurn> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3184: range 000000000E6278F4-000000000E627BDB
void __cdecl data::ConfigGlobalValueTurn::foreachMember(
        data::ConfigGlobalValueTurn *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[240]; // [rsp+10h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 16 26 global_value_name_any:3186 64 16 37 avatar_target_pos_gvkey_name_any:3188 96 16 30 av"
                        "atar_target_pos_map_any:3190 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGlobalValueTurn::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 128), p_func);
  data::ConfigGadgetTurn::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 128));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 32),
    &this->global_value_name);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 64),
    &this->avatar_target_pos_gvkey_name);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::unordered_map<unsigned int,data::Vector> &,std::unordered_map<unsigned int,data::Vector>,std::any::_Manager_external<std::unordered_map<unsigned int,data::Vector>>,true,true>(
    (std::any *const)(v2 + 96),
    &this->avatar_target_pos_map);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3195: range 000000000E627BDC-000000000E627CEC
std::shared_ptr<data::ConfigGadgetTurn> __cdecl data::ConfigGlobalValueTurn::clone(
        data::ConfigGlobalValueTurn *const this)
{
  data::ConfigGlobalValueTurn *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetTurn> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGlobalValueTurn::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGlobalValueTurn,data::ConfigGlobalValueTurn&>(
    (common::tools::perf::allocator<data::ConfigGlobalValueTurn,data::ConfigGlobalValueTurn> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetTurn>::shared_ptr<data::ConfigGlobalValueTurn,void>(
    (std::shared_ptr<data::ConfigGadgetTurn> *const)this,
    (std::shared_ptr<data::ConfigGlobalValueTurn> *)(v2 + 32));
  std::shared_ptr<data::ConfigGlobalValueTurn>::~shared_ptr((std::shared_ptr<data::ConfigGlobalValueTurn> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 3199: range 000000000E627CEE-000000000E627D31
data::ConfigGlobalValueTurnPtr __cdecl data::ConfigGlobalValueTurnFactory::create(
        data::ConfigGlobalValueTurnFactory *const this)
{
  data::ConfigGlobalValueTurnPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGlobalValueTurn>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3201: range 000000000E627D32-000000000E6286F3
bool __cdecl data::ConfigGlobalValueTurn::fromJson(data::ConfigGlobalValueTurn *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::ConfigGVTurnAvatarPosMap *p_avatar_target_pos_map; // rsi
  const Json::Value *global_value_name_ptr; // [rsp+18h] [rbp-258h]
  const Json::Value *avatar_target_pos_gvkey_name_ptr; // [rsp+20h] [rbp-250h]
  const Json::Value *avatar_target_pos_map_ptr; // [rsp+28h] [rbp-248h]
  char v11[576]; // [rsp+30h] [rbp-240h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 3"
                        "2 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGlobalValueTurn::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -202116109;
  if ( !data::ConfigGadgetTurn::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3204);
    common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
      (common::milog::MiLogStream *const)(v2 + 96),
      (const char (*)[38])"fromJson for: ConfigGadgetTurn fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 160),
      "globalValueName",
      (const std::allocator<char> *)(v2 + 48));
    global_value_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
    std::string::~string((void *)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( global_value_name_ptr && !fromJson<std::string>(global_value_name_ptr, &this->global_value_name) )
    {
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3216);
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        (common::milog::MiLogStream *const)(v2 + 224),
        (const char (*)[37])"fromJson for: globalValueName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 288),
        "avatarTargetPosGVKeyName",
        (const std::allocator<char> *)(v2 + 64));
      avatar_target_pos_gvkey_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
      std::string::~string((void *)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( avatar_target_pos_gvkey_name_ptr
        && !fromJson<std::string>(avatar_target_pos_gvkey_name_ptr, &this->avatar_target_pos_gvkey_name) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          3228);
        common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
          (common::milog::MiLogStream *const)(v2 + 352),
          (const char (*)[46])"fromJson for: avatarTargetPosGVKeyName fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 416),
          "avatarTargetPosMap",
          (const std::allocator<char> *)(v2 + 80));
        p_avatar_target_pos_map = (data::ConfigGVTurnAvatarPosMap *)(v2 + 416);
        avatar_target_pos_map_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
        std::string::~string((void *)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( avatar_target_pos_map_ptr
          && (p_avatar_target_pos_map = &this->avatar_target_pos_map,
              !data::mapFromJson(avatar_target_pos_map_ptr, &this->avatar_target_pos_map)) )
        {
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            3240);
          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            (common::milog::MiLogStream *const)(v2 + 480),
            (const char (*)[40])"fromJson for: avatarTargetPosMap fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
          result = 0;
        }
        else
        {
          if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
            __asan_report_store1(&this->is_json_loaded, p_avatar_target_pos_map, &this->is_json_loaded);
          this->is_json_loaded = 1;
          result = 1;
        }
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 3247: range 000000000E6286F4-000000000E629240
data::ConfigGlobalValueTurnPtr __cdecl data::ConfigGlobalValueTurn::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGlobalValueTurnPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3260 96 16 8 ptr:3266 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3254 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGlobalValueTurn::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3257);
      common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[49])"fromJson for: ConfigGlobalValueTurn $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGlobalValueTurn>::shared_ptr(
        (std::shared_ptr<data::ConfigGlobalValueTurn> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetTurn((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetTurn>((const std::shared_ptr<data::ConfigGadgetTurn> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3263);
        v6 = common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[42])"create ConfigGadgetTurn fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGlobalValueTurn>::shared_ptr(
          (std::shared_ptr<data::ConfigGlobalValueTurn> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGlobalValueTurn,data::ConfigGadgetTurn>((const std::shared_ptr<data::ConfigGadgetTurn> *)(v2 + 96));
        if ( std::operator==<data::ConfigGlobalValueTurn>(
               (const std::shared_ptr<data::ConfigGlobalValueTurn> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3269);
          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[40])"cast to ConfigGlobalValueTurnPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGlobalValueTurn>::shared_ptr(
            (std::shared_ptr<data::ConfigGlobalValueTurn> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3274);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGlobalValueTurn>::shared_ptr(
              (std::shared_ptr<data::ConfigGlobalValueTurn> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 592) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 592, v1, v12);
            *(_BYTE *)(v10 + 592) = 1;
            std::shared_ptr<data::ConfigGlobalValueTurn>::shared_ptr(
              (std::shared_ptr<data::ConfigGlobalValueTurn> *const)jval,
              (std::shared_ptr<data::ConfigGlobalValueTurn> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGlobalValueTurn>::~shared_ptr((std::shared_ptr<data::ConfigGlobalValueTurn> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetTurn>::~shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3251);
    common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[54])"jsonValueFind for: ConfigGlobalValueTurn $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGlobalValueTurn>::shared_ptr(
      (std::shared_ptr<data::ConfigGlobalValueTurn> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3282: range 000000000E629242-000000000E6293C3
int32_t __cdecl data::ConfigGlobalValueTurn::getHashValue(const data::ConfigGlobalValueTurn *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t MapHashValue; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3283";
  *(_QWORD *)(v2 + 16) = data::ConfigGlobalValueTurn::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetTurn::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  common::tools::HashUtils::appendHash(&this->global_value_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->avatar_target_pos_gvkey_name, (int32_t *)(v2 + 32));
  MapHashValue = data::getMapHashValue(&this->avatar_target_pos_map);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3294: range 000000000E6EB48A-000000000E6EB6CB
void __cdecl data::ConfigGadgetStateFireEffectRegister::ConfigGadgetStateFireEffectRegister(
        data::ConfigGadgetStateFireEffectRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateFireEffectRegister::ConfigGadgetStateFireEffectRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateFireEffect>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateFireEffect",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateFireEffect>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateFireEffect> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateFireEffect>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3297: range 000000000E6293C4-000000000E62961A
void __cdecl data::ConfigGadgetStateFireEffect::foreachMember(
        data::ConfigGadgetStateFireEffect *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[208]; // [rsp+10h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 18 root_name_any:3299 64 16 23 effect_pattern_any:3301 96 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireEffect::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862724] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 96), p_func);
  data::ConfigGadgetStateAction::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 96));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 32),
    &this->root_name);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 64),
    &this->effect_pattern);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3306: range 000000000E62961C-000000000E62972C
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateFireEffect::clone(
        data::ConfigGadgetStateFireEffect *const this)
{
  data::ConfigGadgetStateFireEffect *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireEffect::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateFireEffect,data::ConfigGadgetStateFireEffect&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateFireEffect,data::ConfigGadgetStateFireEffect> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateFireEffect,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateFireEffect> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateFireEffect>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 3310: range 000000000E62972E-000000000E629771
data::ConfigGadgetStateFireEffectPtr __cdecl data::ConfigGadgetStateFireEffectFactory::create(
        data::ConfigGadgetStateFireEffectFactory *const this)
{
  data::ConfigGadgetStateFireEffectPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateFireEffect>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateFireEffect,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3312: range 000000000E629772-000000000E629E7A
bool __cdecl data::ConfigGadgetStateFireEffect::fromJson(
        data::ConfigGadgetStateFireEffect *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::string *p_effect_pattern; // rsi
  const Json::Value *root_name_ptr; // [rsp+10h] [rbp-1B0h]
  const Json::Value *effect_pattern_ptr; // [rsp+18h] [rbp-1A8h]
  char v10[416]; // [rsp+20h] [rbp-1A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 "
                        "32 9 <unknown> 320 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireEffect::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3315);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "rootName",
      (const std::allocator<char> *)(v2 + 32));
    root_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 32);
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( root_name_ptr && !fromJson<std::string>(root_name_ptr, &this->root_name) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3327);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[30])"fromJson for: rootName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 48);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 256),
        "effectPattern",
        (const std::allocator<char> *)(v2 + 48));
      p_effect_pattern = (std::string *)(v2 + 256);
      effect_pattern_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
      std::string::~string((void *)(v2 + 256));
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 48);
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( effect_pattern_ptr
        && (p_effect_pattern = &this->effect_pattern, !fromJson<std::string>(effect_pattern_ptr, &this->effect_pattern)) )
      {
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          3339);
        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
          (common::milog::MiLogStream *const)(v2 + 320),
          (const char (*)[35])"fromJson for: effectPattern fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
        result = 0;
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(&this->is_json_loaded, p_effect_pattern, &this->is_json_loaded);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3346: range 000000000E629E7C-000000000E62A9C2
data::ConfigGadgetStateFireEffectPtr __cdecl data::ConfigGadgetStateFireEffect::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateFireEffectPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3359 96 16 8 ptr:3365 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3353 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireEffect::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3356);
      common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[55])"fromJson for: ConfigGadgetStateFireEffect $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateFireEffect>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3362);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateFireEffect>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateFireEffect,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateFireEffect>(
               (const std::shared_ptr<data::ConfigGadgetStateFireEffect> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3368);
          common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[46])"cast to ConfigGadgetStateFireEffectPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateFireEffect>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateFireEffect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateFireEffect,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3373);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateFireEffect>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateFireEffect,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateFireEffect,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateFireEffect>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateFireEffect> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateFireEffect>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3350);
    common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[60])"jsonValueFind for: ConfigGadgetStateFireEffect $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateFireEffect>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateFireEffect> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateFireEffect,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3381: range 000000000E62A9C4-000000000E62AB1C
int32_t __cdecl data::ConfigGadgetStateFireEffect::getHashValue(const data::ConfigGadgetStateFireEffect *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3382";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireEffect::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  common::tools::HashUtils::appendHash(&this->root_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->effect_pattern, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3392: range 000000000E6EB744-000000000E6EB985
void __cdecl data::ConfigGadgetStateSetAnimTriggerRegister::ConfigGadgetStateSetAnimTriggerRegister(
        data::ConfigGadgetStateSetAnimTriggerRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateSetAnimTriggerRegister::ConfigGadgetStateSetAnimTriggerRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimTrigger>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateSetAnimTrigger",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateSetAnimTrigger>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3395: range 000000000E62AB1E-000000000E62ACEE
void __cdecl data::ConfigGadgetStateSetAnimTrigger::foreachMember(
        data::ConfigGadgetStateSetAnimTrigger *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 19 trigger_id_any:3397 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimTrigger::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetStateAction::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 32),
    &this->trigger_id);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3402: range 000000000E62ACF0-000000000E62AE00
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateSetAnimTrigger::clone(
        data::ConfigGadgetStateSetAnimTrigger *const this)
{
  data::ConfigGadgetStateSetAnimTrigger *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimTrigger::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimTrigger,data::ConfigGadgetStateSetAnimTrigger&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateSetAnimTrigger,data::ConfigGadgetStateSetAnimTrigger> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateSetAnimTrigger,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 3406: range 000000000E62AE02-000000000E62AE45
data::ConfigGadgetStateSetAnimTriggerPtr __cdecl data::ConfigGadgetStateSetAnimTriggerFactory::create(
        data::ConfigGadgetStateSetAnimTriggerFactory *const this)
{
  data::ConfigGadgetStateSetAnimTriggerPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimTrigger>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateSetAnimTrigger,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3408: range 000000000E62AE46-000000000E62B2CA
bool __cdecl data::ConfigGadgetStateSetAnimTrigger::fromJson(
        data::ConfigGadgetStateSetAnimTrigger *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::string *p_trigger_id; // rsi
  const Json::Value *trigger_id_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimTrigger::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3411);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "triggerID",
      (const std::allocator<char> *)(v2 + 48));
    p_trigger_id = (std::string *)(v2 + 128);
    trigger_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( trigger_id_ptr && (p_trigger_id = &this->trigger_id, !fromJson<std::string>(trigger_id_ptr, &this->trigger_id)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3423);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[31])"fromJson for: triggerID fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_trigger_id, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3430: range 000000000E62B2CC-000000000E62BE12
data::ConfigGadgetStateSetAnimTriggerPtr __cdecl data::ConfigGadgetStateSetAnimTrigger::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateSetAnimTriggerPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3443 96 16 8 ptr:3449 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3437 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimTrigger::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3440);
      common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[59])"fromJson for: ConfigGadgetStateSetAnimTrigger $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3446);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateSetAnimTrigger,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateSetAnimTrigger>(
               (const std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3452);
          common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[50])"cast to ConfigGadgetStateSetAnimTriggerPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateSetAnimTrigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateSetAnimTrigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3457);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateSetAnimTrigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateSetAnimTrigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3434);
    common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[64])"jsonValueFind for: ConfigGadgetStateSetAnimTrigger $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateSetAnimTrigger> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateSetAnimTrigger,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3465: range 000000000E62BE14-000000000E62BF54
int32_t __cdecl data::ConfigGadgetStateSetAnimTrigger::getHashValue(
        const data::ConfigGadgetStateSetAnimTrigger *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3466";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimTrigger::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  common::tools::HashUtils::appendHash(&this->trigger_id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3475: range 000000000E6EB9FE-000000000E6EBC3F
void __cdecl data::ConfigGadgetStateSetAnimIntRegister::ConfigGadgetStateSetAnimIntRegister(
        data::ConfigGadgetStateSetAnimIntRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateSetAnimIntRegister::ConfigGadgetStateSetAnimIntRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimInt>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateSetAnimInt",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateSetAnimInt>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3478: range 000000000E62BF56-000000000E62C234
void __cdecl data::ConfigGadgetStateSetAnimInt::foreachMember(
        data::ConfigGadgetStateSetAnimInt *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[240]; // [rsp+10h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 16 15 int_id_any:3480 64 16 14 value_any:3482 96 16 19 sync_state_any:3484 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimInt::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 128), p_func);
  data::ConfigGadgetStateAction::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 128));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 32),
    &this->int_id);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<int &,int,std::any::_Manager_internal<int>,true,true>((std::any *const)(v2 + 64), &this->value);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 96), &this->sync_state);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3489: range 000000000E62C236-000000000E62C346
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateSetAnimInt::clone(
        data::ConfigGadgetStateSetAnimInt *const this)
{
  data::ConfigGadgetStateSetAnimInt *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimInt::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimInt,data::ConfigGadgetStateSetAnimInt&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateSetAnimInt,data::ConfigGadgetStateSetAnimInt> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateSetAnimInt,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 3493: range 000000000E62C348-000000000E62C38B
data::ConfigGadgetStateSetAnimIntPtr __cdecl data::ConfigGadgetStateSetAnimIntFactory::create(
        data::ConfigGadgetStateSetAnimIntFactory *const this)
{
  data::ConfigGadgetStateSetAnimIntPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimInt>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateSetAnimInt,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3495: range 000000000E62C38C-000000000E62CD3F
bool __cdecl data::ConfigGadgetStateSetAnimInt::fromJson(
        data::ConfigGadgetStateSetAnimInt *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool *p_sync_state; // rsi
  const Json::Value *int_id_ptr; // [rsp+18h] [rbp-258h]
  const Json::Value *value_ptr; // [rsp+20h] [rbp-250h]
  const Json::Value *sync_state_ptr; // [rsp+28h] [rbp-248h]
  char v11[576]; // [rsp+30h] [rbp-240h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 3"
                        "2 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimInt::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3498);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 96),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 160),
      "intID",
      (const std::allocator<char> *)(v2 + 48));
    int_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
    std::string::~string((void *)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( int_id_ptr && !fromJson<std::string>(int_id_ptr, &this->int_id) )
    {
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3510);
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
        (common::milog::MiLogStream *const)(v2 + 224),
        (const char (*)[27])"fromJson for: intID fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 288),
        "value",
        (const std::allocator<char> *)(v2 + 64));
      value_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
      std::string::~string((void *)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( value_ptr && !fromJson<int>(value_ptr, &this->value) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          3522);
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
          (common::milog::MiLogStream *const)(v2 + 352),
          (const char (*)[27])"fromJson for: value fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 416),
          "syncState",
          (const std::allocator<char> *)(v2 + 80));
        p_sync_state = (bool *)(v2 + 416);
        sync_state_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
        std::string::~string((void *)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( sync_state_ptr && (p_sync_state = &this->sync_state, !fromJson<bool>(sync_state_ptr, &this->sync_state)) )
        {
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            3534);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 480),
            (const char (*)[31])"fromJson for: syncState fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
          result = 0;
        }
        else
        {
          if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
            __asan_report_store1(&this->is_json_loaded, p_sync_state, &this->is_json_loaded);
          this->is_json_loaded = 1;
          result = 1;
        }
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 3541: range 000000000E62CD40-000000000E62D886
data::ConfigGadgetStateSetAnimIntPtr __cdecl data::ConfigGadgetStateSetAnimInt::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateSetAnimIntPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3554 96 16 8 ptr:3560 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3548 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimInt::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3551);
      common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[55])"fromJson for: ConfigGadgetStateSetAnimInt $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3557);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateSetAnimInt,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateSetAnimInt>(
               (const std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3563);
          common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[46])"cast to ConfigGadgetStateSetAnimIntPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateSetAnimInt,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateSetAnimInt,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3568);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateSetAnimInt,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateSetAnimInt,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3545);
    common::milog::MiLogStream::operator<<<char [60],(char *[60])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[60])"jsonValueFind for: ConfigGadgetStateSetAnimInt $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateSetAnimInt>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateSetAnimInt> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateSetAnimInt,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3576: range 000000000E62D888-000000000E62DA63
int32_t __cdecl data::ConfigGadgetStateSetAnimInt::getHashValue(const data::ConfigGadgetStateSetAnimInt *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3577";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSetAnimInt::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  common::tools::HashUtils::appendHash(&this->int_id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->value);
  }
  common::tools::HashUtils::appendHash(this->value, (int32_t *)(v2 + 32));
  v7 = ((_BYTE)this + 92) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->sync_state >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->sync_state >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->sync_state, v7, v8);
  common::tools::HashUtils::appendHash(this->sync_state, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3588: range 000000000E6EBCB8-000000000E6EBEF9
void __cdecl data::ConfigGadgetStateFireAISoundRegister::ConfigGadgetStateFireAISoundRegister(
        data::ConfigGadgetStateFireAISoundRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateFireAISoundRegister::ConfigGadgetStateFireAISoundRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateFireAISound>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateFireAISound",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateFireAISound>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateFireAISound> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateFireAISound>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3591: range 000000000E62DA64-000000000E62DC34
void __cdecl data::ConfigGadgetStateFireAISound::foreachMember(
        data::ConfigGadgetStateFireAISound *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 volume_any:3593 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireAISound::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetStateAction::foreachMember(
    (data::ConfigGadgetStateAction *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>((std::any *const)(v2 + 32), &this->volume);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3598: range 000000000E62DC36-000000000E62DD46
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateFireAISound::clone(
        data::ConfigGadgetStateFireAISound *const this)
{
  data::ConfigGadgetStateFireAISound *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireAISound::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateFireAISound,data::ConfigGadgetStateFireAISound&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateFireAISound,data::ConfigGadgetStateFireAISound> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateFireAISound,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateFireAISound> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateFireAISound>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3602: range 000000000E62DD48-000000000E62DD8B
data::ConfigGadgetStateFireAISoundPtr __cdecl data::ConfigGadgetStateFireAISoundFactory::create(
        data::ConfigGadgetStateFireAISoundFactory *const this)
{
  data::ConfigGadgetStateFireAISoundPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateFireAISound>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateFireAISound,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3604: range 000000000E62DD8C-000000000E62E210
bool __cdecl data::ConfigGadgetStateFireAISound::fromJson(
        data::ConfigGadgetStateFireAISound *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  float *p_volume; // rsi
  const Json::Value *volume_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireAISound::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson((data::ConfigGadgetStateAction *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3607);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "volume",
      (const std::allocator<char> *)(v2 + 48));
    p_volume = (float *)(v2 + 128);
    volume_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( volume_ptr && (p_volume = &this->volume, !fromJson<float>(volume_ptr, &this->volume)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3619);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[28])"fromJson for: volume fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_volume, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3626: range 000000000E62E212-000000000E62ED58
data::ConfigGadgetStateFireAISoundPtr __cdecl data::ConfigGadgetStateFireAISound::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateFireAISoundPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3639 96 16 8 ptr:3645 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3633 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireAISound::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3636);
      common::milog::MiLogStream::operator<<<char [56],(char *[56])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[56])"fromJson for: ConfigGadgetStateFireAISound $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateFireAISound>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3642);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateFireAISound>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateFireAISound,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateFireAISound>(
               (const std::shared_ptr<data::ConfigGadgetStateFireAISound> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3648);
          common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[47])"cast to ConfigGadgetStateFireAISoundPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateFireAISound>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateFireAISound,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateFireAISound,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3653);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateFireAISound>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateFireAISound,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateFireAISound,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateFireAISound>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateFireAISound> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateFireAISound>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3630);
    common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[61])"jsonValueFind for: ConfigGadgetStateFireAISound $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateFireAISound>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateFireAISound> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateFireAISound,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3661: range 000000000E62ED5A-000000000E62EED5
int32_t __cdecl data::ConfigGadgetStateFireAISound::getHashValue(const data::ConfigGadgetStateFireAISound *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3662";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateFireAISound::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue((const data::ConfigGadgetStateAction *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  if ( *(_BYTE *)(((unsigned __int64)&this->volume >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->volume >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->volume);
  }
  common::tools::HashUtils::appendHash(this->volume, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3671: range 000000000E6EBF72-000000000E6EC1B3
void __cdecl data::ConfigGadgetStateEnableGadgetInteeRegister::ConfigGadgetStateEnableGadgetInteeRegister(
        data::ConfigGadgetStateEnableGadgetInteeRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateEnableGadgetInteeRegister::ConfigGadgetStateEnableGadgetInteeRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetIntee>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateEnableGadgetIntee",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateEnableGadgetIntee>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3674: range 000000000E62EED6-000000000E62F0A6
void __cdecl data::ConfigGadgetStateEnableGadgetIntee::foreachMember(
        data::ConfigGadgetStateEnableGadgetIntee *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 enable_any:3676 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetIntee::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetStateAction::foreachMember(
    (data::ConfigGadgetStateAction *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 32), &this->enable);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3681: range 000000000E62F0A8-000000000E62F1B8
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateEnableGadgetIntee::clone(
        data::ConfigGadgetStateEnableGadgetIntee *const this)
{
  data::ConfigGadgetStateEnableGadgetIntee *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetIntee::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetIntee,data::ConfigGadgetStateEnableGadgetIntee&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateEnableGadgetIntee,data::ConfigGadgetStateEnableGadgetIntee> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3685: range 000000000E62F1BA-000000000E62F1FD
data::ConfigGadgetStateEnableGadgetInteePtr __cdecl data::ConfigGadgetStateEnableGadgetInteeFactory::create(
        data::ConfigGadgetStateEnableGadgetInteeFactory *const this)
{
  data::ConfigGadgetStateEnableGadgetInteePtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetIntee>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateEnableGadgetIntee,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3687: range 000000000E62F1FE-000000000E62F682
bool __cdecl data::ConfigGadgetStateEnableGadgetIntee::fromJson(
        data::ConfigGadgetStateEnableGadgetIntee *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool *p_enable; // rsi
  const Json::Value *enable_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetIntee::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson((data::ConfigGadgetStateAction *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3690);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "enable",
      (const std::allocator<char> *)(v2 + 48));
    p_enable = (bool *)(v2 + 128);
    enable_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( enable_ptr && (p_enable = &this->enable, !fromJson<bool>(enable_ptr, &this->enable)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3702);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[28])"fromJson for: enable fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_enable, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3709: range 000000000E62F684-000000000E6301CA
data::ConfigGadgetStateEnableGadgetInteePtr __cdecl data::ConfigGadgetStateEnableGadgetIntee::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateEnableGadgetInteePtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3722 96 16 8 ptr:3728 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3716 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetIntee::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3719);
      common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[62])"fromJson for: ConfigGadgetStateEnableGadgetIntee $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3725);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateEnableGadgetIntee,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateEnableGadgetIntee>(
               (const std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3731);
          common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[53])"cast to ConfigGadgetStateEnableGadgetInteePtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetIntee,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetIntee,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3736);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetIntee,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetIntee,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3713);
    common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[67])"jsonValueFind for: ConfigGadgetStateEnableGadgetIntee $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateEnableGadgetIntee> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateEnableGadgetIntee,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3744: range 000000000E6301CC-000000000E630346
int32_t __cdecl data::ConfigGadgetStateEnableGadgetIntee::getHashValue(
        const data::ConfigGadgetStateEnableGadgetIntee *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3745";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetIntee::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue((const data::ConfigGadgetStateAction *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 49) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->enable, v7, v8);
  common::tools::HashUtils::appendHash(this->enable, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3754: range 000000000E6EC22C-000000000E6EC46D
void __cdecl data::ConfigGadgetStateDynamicPickableHintRegister::ConfigGadgetStateDynamicPickableHintRegister(
        data::ConfigGadgetStateDynamicPickableHintRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateDynamicPickableHintRegister::ConfigGadgetStateDynamicPickableHintRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateDynamicPickableHint>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateDynamicPickableHint",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateDynamicPickableHint>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3757: range 000000000E630348-000000000E630518
void __cdecl data::ConfigGadgetStateDynamicPickableHint::foreachMember(
        data::ConfigGadgetStateDynamicPickableHint *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 20 material_id_any:3759 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDynamicPickableHint::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetStateAction::foreachMember(
    (data::ConfigGadgetStateAction *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<unsigned int &,unsigned int,std::any::_Manager_internal<unsigned int>,true,true>(
    (std::any *const)(v2 + 32),
    &this->material_id);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3764: range 000000000E63051A-000000000E63062A
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateDynamicPickableHint::clone(
        data::ConfigGadgetStateDynamicPickableHint *const this)
{
  data::ConfigGadgetStateDynamicPickableHint *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDynamicPickableHint::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateDynamicPickableHint,data::ConfigGadgetStateDynamicPickableHint&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateDynamicPickableHint,data::ConfigGadgetStateDynamicPickableHint> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateDynamicPickableHint,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3768: range 000000000E63062C-000000000E63066F
data::ConfigGadgetStateDynamicPickableHintPtr __cdecl data::ConfigGadgetStateDynamicPickableHintFactory::create(
        data::ConfigGadgetStateDynamicPickableHintFactory *const this)
{
  data::ConfigGadgetStateDynamicPickableHintPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateDynamicPickableHint>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateDynamicPickableHint,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3770: range 000000000E630670-000000000E630AF4
bool __cdecl data::ConfigGadgetStateDynamicPickableHint::fromJson(
        data::ConfigGadgetStateDynamicPickableHint *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  uint32_t *p_material_id; // rsi
  const Json::Value *material_id_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDynamicPickableHint::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson((data::ConfigGadgetStateAction *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3773);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "materialID",
      (const std::allocator<char> *)(v2 + 48));
    p_material_id = (uint32_t *)(v2 + 128);
    material_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( material_id_ptr
      && (p_material_id = &this->material_id, !fromJson<unsigned int>(material_id_ptr, &this->material_id)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3785);
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[32])"fromJson for: materialID fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_material_id, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3792: range 000000000E630AF6-000000000E63163C
data::ConfigGadgetStateDynamicPickableHintPtr __cdecl data::ConfigGadgetStateDynamicPickableHint::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateDynamicPickableHintPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3805 96 16 8 ptr:3811 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3799 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDynamicPickableHint::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3802);
      common::milog::MiLogStream::operator<<<char [64],(char *[64])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[64])"fromJson for: ConfigGadgetStateDynamicPickableHint $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3808);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateDynamicPickableHint,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateDynamicPickableHint>(
               (const std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3814);
          common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[55])"cast to ConfigGadgetStateDynamicPickableHintPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateDynamicPickableHint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateDynamicPickableHint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3819);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateDynamicPickableHint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateDynamicPickableHint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3796);
    common::milog::MiLogStream::operator<<<char [69],(char *[69])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[69])"jsonValueFind for: ConfigGadgetStateDynamicPickableHint $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateDynamicPickableHint> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateDynamicPickableHint,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3827: range 000000000E63163E-000000000E6317B7
int32_t __cdecl data::ConfigGadgetStateDynamicPickableHint::getHashValue(
        const data::ConfigGadgetStateDynamicPickableHint *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3828";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDynamicPickableHint::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue((const data::ConfigGadgetStateAction *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  if ( *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->material_id);
  }
  common::tools::HashUtils::appendHash(this->material_id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3837: range 000000000E6EC4E6-000000000E6EC727
void __cdecl data::ConfigGadgetStateEnableGadgetExtraButtonRegister::ConfigGadgetStateEnableGadgetExtraButtonRegister(
        data::ConfigGadgetStateEnableGadgetExtraButtonRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateEnableGadgetExtraButtonRegister::ConfigGadgetStateEnableGadgetExtraButtonRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetExtraButton>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateEnableGadgetExtraButton",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateEnableGadgetExtraButton>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3840: range 000000000E6317B8-000000000E631A0E
void __cdecl data::ConfigGadgetStateEnableGadgetExtraButton::foreachMember(
        data::ConfigGadgetStateEnableGadgetExtraButton *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[208]; // [rsp+10h] [rbp-D0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(160LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 32 16 15 enable_any:3842 64 16 17 extra_id_any:3844 96 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetExtraButton::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862724] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 96), p_func);
  data::ConfigGadgetStateAction::foreachMember(
    (data::ConfigGadgetStateAction *const)this,
    (std::function<void(std::any&)> *)(v2 + 96));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 32), &this->enable);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<int &,int,std::any::_Manager_internal<int>,true,true>((std::any *const)(v2 + 64), &this->extra_id);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3849: range 000000000E631A10-000000000E631B20
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateEnableGadgetExtraButton::clone(
        data::ConfigGadgetStateEnableGadgetExtraButton *const this)
{
  data::ConfigGadgetStateEnableGadgetExtraButton *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetExtraButton::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetExtraButton,data::ConfigGadgetStateEnableGadgetExtraButton&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateEnableGadgetExtraButton,data::ConfigGadgetStateEnableGadgetExtraButton> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3853: range 000000000E631B22-000000000E631B65
data::ConfigGadgetStateEnableGadgetExtraButtonPtr __cdecl data::ConfigGadgetStateEnableGadgetExtraButtonFactory::create(
        data::ConfigGadgetStateEnableGadgetExtraButtonFactory *const this)
{
  data::ConfigGadgetStateEnableGadgetExtraButtonPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetExtraButton>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3855: range 000000000E631B66-000000000E63226E
bool __cdecl data::ConfigGadgetStateEnableGadgetExtraButton::fromJson(
        data::ConfigGadgetStateEnableGadgetExtraButton *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  int32_t *p_extra_id; // rsi
  const Json::Value *enable_ptr; // [rsp+10h] [rbp-1B0h]
  const Json::Value *extra_id_ptr; // [rsp+18h] [rbp-1A8h]
  char v10[416]; // [rsp+20h] [rbp-1A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 "
                        "32 9 <unknown> 320 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetExtraButton::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson((data::ConfigGadgetStateAction *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3858);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "enable",
      (const std::allocator<char> *)(v2 + 32));
    enable_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 32);
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( enable_ptr && !fromJson<bool>(enable_ptr, &this->enable) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3870);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[28])"fromJson for: enable fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 48);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 256),
        "extraId",
        (const std::allocator<char> *)(v2 + 48));
      p_extra_id = (int32_t *)(v2 + 256);
      extra_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
      std::string::~string((void *)(v2 + 256));
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 48);
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( extra_id_ptr && (p_extra_id = &this->extra_id, !fromJson<int>(extra_id_ptr, &this->extra_id)) )
      {
        *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 320, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 320),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          3882);
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
          (common::milog::MiLogStream *const)(v2 + 320),
          (const char (*)[29])"fromJson for: extraId fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
        result = 0;
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(&this->is_json_loaded, p_extra_id, &this->is_json_loaded);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3889: range 000000000E632270-000000000E632DB6
data::ConfigGadgetStateEnableGadgetExtraButtonPtr __cdecl data::ConfigGadgetStateEnableGadgetExtraButton::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateEnableGadgetExtraButtonPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3902 96 16 8 ptr:3908 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3896 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetExtraButton::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3899);
      common::milog::MiLogStream::operator<<<char [68],(char *[68])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[68])"fromJson for: ConfigGadgetStateEnableGadgetExtraButton $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3905);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateEnableGadgetExtraButton,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateEnableGadgetExtraButton>(
               (const std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3911);
          common::milog::MiLogStream::operator<<<char [59],(char *[59])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[59])"cast to ConfigGadgetStateEnableGadgetExtraButtonPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetExtraButton,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetExtraButton,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              3916);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetExtraButton,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateEnableGadgetExtraButton,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3893);
    common::milog::MiLogStream::operator<<<char [73],(char *[73])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[73])"jsonValueFind for: ConfigGadgetStateEnableGadgetExtraButton $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButton,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 3924: range 000000000E632DB8-000000000E632F83
int32_t __cdecl data::ConfigGadgetStateEnableGadgetExtraButton::getHashValue(
        const data::ConfigGadgetStateEnableGadgetExtraButton *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:3925";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableGadgetExtraButton::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue((const data::ConfigGadgetStateAction *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 49) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->enable, v7, v8);
  common::tools::HashUtils::appendHash(this->enable, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->extra_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->extra_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->extra_id);
  }
  common::tools::HashUtils::appendHash(this->extra_id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3935: range 000000000E6EC7A0-000000000E6EC9E1
void __cdecl data::ConfigGadgetStateEnableActionRegister::ConfigGadgetStateEnableActionRegister(
        data::ConfigGadgetStateEnableActionRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateEnableActionRegister::ConfigGadgetStateEnableActionRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateEnableAction>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateEnableAction",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateEnableAction>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateEnableAction> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateEnableAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 3938: range 000000000E632F84-000000000E633154
void __cdecl data::ConfigGadgetStateEnableAction::foreachMember(
        data::ConfigGadgetStateEnableAction *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 15 enable_any:3940 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableAction::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadgetStateAction::foreachMember(
    (data::ConfigGadgetStateAction *const)this,
    (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 32), &this->enable);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 3945: range 000000000E633156-000000000E633266
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateEnableAction::clone(
        data::ConfigGadgetStateEnableAction *const this)
{
  data::ConfigGadgetStateEnableAction *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableAction::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateEnableAction,data::ConfigGadgetStateEnableAction&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateEnableAction,data::ConfigGadgetStateEnableAction> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateEnableAction,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateEnableAction> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateEnableAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3949: range 000000000E633268-000000000E6332AB
data::ConfigGadgetStateEnableActionPtr __cdecl data::ConfigGadgetStateEnableActionFactory::create(
        data::ConfigGadgetStateEnableActionFactory *const this)
{
  data::ConfigGadgetStateEnableActionPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateEnableAction>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateEnableAction,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 3951: range 000000000E6332AC-000000000E633730
bool __cdecl data::ConfigGadgetStateEnableAction::fromJson(
        data::ConfigGadgetStateEnableAction *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool *p_enable; // rsi
  const Json::Value *enable_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableAction::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson((data::ConfigGadgetStateAction *const)this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      3954);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "enable",
      (const std::allocator<char> *)(v2 + 48));
    p_enable = (bool *)(v2 + 128);
    enable_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( enable_ptr && (p_enable = &this->enable, !fromJson<bool>(enable_ptr, &this->enable)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        3966);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[28])"fromJson for: enable fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_enable, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3973: range 000000000E633732-000000000E634278
data::ConfigGadgetStateEnableActionPtr __cdecl data::ConfigGadgetStateEnableAction::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateEnableActionPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:3986 96 16 8 ptr:3992 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:3980 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableAction::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        3983);
      common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[57])"fromJson for: ConfigGadgetStateEnableAction $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateEnableAction>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          3989);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateEnableAction>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateEnableAction,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateEnableAction>(
               (const std::shared_ptr<data::ConfigGadgetStateEnableAction> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            3995);
          common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[48])"cast to ConfigGadgetStateEnableActionPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateEnableAction>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateEnableAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateEnableAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              4000);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateEnableAction>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateEnableAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateEnableAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateEnableAction>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateEnableAction> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateEnableAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      3977);
    common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[62])"jsonValueFind for: ConfigGadgetStateEnableAction $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateEnableAction>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateEnableAction> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateEnableAction,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 4008: range 000000000E63427A-000000000E6343F4
int32_t __cdecl data::ConfigGadgetStateEnableAction::getHashValue(
        const data::ConfigGadgetStateEnableAction *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:4009";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateEnableAction::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue((const data::ConfigGadgetStateAction *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 49) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->enable, v7, v8);
  common::tools::HashUtils::appendHash(this->enable, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4018: range 000000000E6ECA5A-000000000E6ECC9B
void __cdecl data::ConfigGadgetStateDisableRadarHintRegister::ConfigGadgetStateDisableRadarHintRegister(
        data::ConfigGadgetStateDisableRadarHintRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateDisableRadarHintRegister::ConfigGadgetStateDisableRadarHintRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateDisableRadarHint>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateDisableRadarHint",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateDisableRadarHint>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4021: range 000000000E6343F6-000000000E634529
void __cdecl data::ConfigGadgetStateDisableRadarHint::foreachMember(
        data::ConfigGadgetStateDisableRadarHint *const this,
        std::function<void(std::any&)> *p_func)
{
  std::function<void(std::any&)> *v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[144]; // [rsp+10h] [rbp-90h] BYREF

  v2 = (std::function<void(std::any&)> *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::function<void(std::any&)> *)v3;
  }
  v2->_M_functor._M_unused._M_object = (void *)1102416563;
  *(_QWORD *)&v2->_M_functor._M_pod_data[8] = "1 32 32 9 <unknown>";
  v2->_M_manager = (std::_Function_base::_Manager_type)data::ConfigGadgetStateDisableRadarHint::foreachMember;
  v4 = (unsigned __int64)v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  std::function<void ()(std::any &)>::function(v2 + 1, p_func);
  data::ConfigGadgetStateAction::foreachMember(this, v2 + 1);
  std::function<void ()(std::any &)>::~function(v2 + 1);
  if ( v5 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_functor._M_unused._M_object = (void *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 4026: range 000000000E63452A-000000000E63463A
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateDisableRadarHint::clone(
        data::ConfigGadgetStateDisableRadarHint *const this)
{
  data::ConfigGadgetStateDisableRadarHint *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDisableRadarHint::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateDisableRadarHint,data::ConfigGadgetStateDisableRadarHint&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateDisableRadarHint,data::ConfigGadgetStateDisableRadarHint> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateDisableRadarHint,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 4030: range 000000000E63463C-000000000E63467F
data::ConfigGadgetStateDisableRadarHintPtr __cdecl data::ConfigGadgetStateDisableRadarHintFactory::create(
        data::ConfigGadgetStateDisableRadarHintFactory *const this)
{
  data::ConfigGadgetStateDisableRadarHintPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateDisableRadarHint>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateDisableRadarHint,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4032: range 000000000E634680-000000000E634893
bool __cdecl data::ConfigGadgetStateDisableRadarHint::fromJson(
        data::ConfigGadgetStateDisableRadarHint *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  char v6[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDisableRadarHint::fromJson;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4035);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 32),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, jval, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v6 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4042: range 000000000E634894-000000000E6353DA
data::ConfigGadgetStateDisableRadarHintPtr __cdecl data::ConfigGadgetStateDisableRadarHint::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateDisableRadarHintPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:4055 96 16 8 ptr:4061 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:4049 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateDisableRadarHint::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        4052);
      common::milog::MiLogStream::operator<<<char [61],(char *[61])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[61])"fromJson for: ConfigGadgetStateDisableRadarHint $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          4058);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateDisableRadarHint,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateDisableRadarHint>(
               (const std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            4064);
          common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[52])"cast to ConfigGadgetStateDisableRadarHintPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateDisableRadarHint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateDisableRadarHint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              4069);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateDisableRadarHint,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateDisableRadarHint,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      4046);
    common::milog::MiLogStream::operator<<<char [66],(char *[66])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[66])"jsonValueFind for: ConfigGadgetStateDisableRadarHint $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateDisableRadarHint>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateDisableRadarHint> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateDisableRadarHint,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 4077: range 000000000E6353DC-000000000E6353FB
int32_t __cdecl data::ConfigGadgetStateDisableRadarHint::getHashValue(
        const data::ConfigGadgetStateDisableRadarHint *const this)
{
  return data::ConfigGadgetStateAction::getHashValue(this);
};

// Line 4083: range 000000000E6353FC-000000000E635697
const char *__cdecl data::enumValToStr(data::AnimatorParamType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e == Float_0 )
  {
    result = "Float";
  }
  else
  {
    if ( e <= Float_0 )
    {
      switch ( e )
      {
        case Int_0:
          result = off_1A3BC4C0;
          goto LABEL_19;
        case Trigger_0:
          result = "Trigger";
          goto LABEL_19;
        case Bool_0:
          result = "Bool";
          goto LABEL_19;
      }
    }
    if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v1 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v1 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumValToStr",
      4095);
    v5 = "invalid e:";
    v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v1 + 64),
           (const char (*)[11])"invalid e:");
    v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(v1 + 48, v5);
    }
    *(_DWORD *)(v1 + 48) = e;
    common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
    result = (const char *)&unk_1A36E8A0;
  }
LABEL_19:
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4101: range 000000000E635698-000000000E63601C
bool __cdecl data::enumStrToVal(const std::string *s, data::AnimatorParamType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::AnimatorParamType> *i; // r14
  _DWORD *v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::AnimatorParamType> >::pointer v11; // rax
  data::AnimatorParamType second; // ecx
  char v13; // dl
  data::AnimatorParamType *ea; // [rsp+10h] [rbp-260h]
  char v15[592]; // [rsp+20h] [rbp-250h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 8 7 it:4114 160 8 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 160 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234556924;
  v4[536862723] = -234556924;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862735] = -202116109;
  v4[536862736] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      4104);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 64, e);
      *(_DWORD *)(v2 + 64) = 0;
      std::pair<std::string const,data::AnimatorParamType>::pair<char const(&)[8],data::AnimatorParamType,true>(
        (std::pair<const std::string,data::AnimatorParamType> *const)(v2 + 320),
        (const char (*)[8])"Trigger",
        (data::AnimatorParamType *)(v2 + 64));
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, "Trigger");
      *(_DWORD *)(v2 + 80) = 1;
      std::pair<std::string const,data::AnimatorParamType>::pair<char const(&)[5],data::AnimatorParamType,true>(
        (std::pair<const std::string,data::AnimatorParamType> *const)(v2 + 360),
        (const char (*)[5])"Bool",
        (data::AnimatorParamType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "Bool");
      *(_DWORD *)(v2 + 96) = 2;
      std::pair<std::string const,data::AnimatorParamType>::pair<char const(&)[4],data::AnimatorParamType,true>(
        (std::pair<const std::string,data::AnimatorParamType> *const)(v2 + 400),
        (const char (*)[4])off_1A3BC4C0,
        (data::AnimatorParamType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, off_1A3BC4C0);
      *(_DWORD *)(v2 + 112) = 3;
      std::pair<std::string const,data::AnimatorParamType>::pair<char const(&)[6],data::AnimatorParamType,true>(
        (std::pair<const std::string,data::AnimatorParamType> *const)(v2 + 440),
        (const char (*)[6])"Float",
        (data::AnimatorParamType *)(v2 + 112));
      std::allocator<std::pair<std::string const,data::AnimatorParamType>>::allocator((std::allocator<std::pair<const std::string,data::AnimatorParamType> > *const)(v2 + 48));
      std::map<std::string,data::AnimatorParamType>::map(
        &data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m,
        (std::initializer_list<std::pair<const std::string,data::AnimatorParamType> >)__PAIR128__(4LL, v2 + 320),
        (const std::less<std::string > *)(v2 + 32),
        (const std::map<std::string,data::AnimatorParamType>::allocator_type *)(v2 + 48));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m);
      e = (data::AnimatorParamType *)&data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::AnimatorParamType>::~map,
        &data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::AnimatorParamType>>::~allocator((std::allocator<std::pair<const std::string,data::AnimatorParamType> > *const)(v2 + 48));
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::AnimatorParamType> *)(v2 + 480);
            i != (std::pair<const std::string,data::AnimatorParamType> *)(v2 + 320);
            std::pair<std::string const,data::AnimatorParamType>::~pair(i) )
      {
        --i;
      }
      v7 = (_DWORD *)(((v2 + 320) >> 3) + 2147450880);
      *v7 = -117901064;
      v7[1] = -117901064;
      v7[2] = -117901064;
      v7[3] = -117901064;
      v7[4] = -117901064;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, e);
    *(std::map<std::string,data::AnimatorParamType>::iterator *)(v2 + 128) = std::map<std::string,data::AnimatorParamType>::find(
                                                                               &data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m,
                                                                               s);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, s);
    *(std::map<std::string,data::AnimatorParamType>::iterator *)(v2 + 160) = std::map<std::string,data::AnimatorParamType>::end(&data::enumStrToVal(std::string const&,data::AnimatorParamType &)::m);
    v8 = (char *)(v2 + 160);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::AnimatorParamType> >::_Self *)(v2 + 128),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::AnimatorParamType> >::_Self *)(v2 + 160));
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        4117);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 256),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::AnimatorParamType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::AnimatorParamType> > *const)(v2 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 4125: range 000000000E63601D-000000000E636076
const char *__cdecl data::getDescription(data::AnimatorParamType e)
{
  if ( e == Float_0 )
    return "Float";
  if ( e <= Float_0 )
  {
    switch ( e )
    {
      case Int_0:
        return off_1A3BC4C0;
      case Trigger_0:
        return "Trigger";
      case Bool_0:
        return "Bool";
    }
  }
  return "unknown enum value!";
};

// Line 4145: range 000000000E6ED424-000000000E6ED665
void __cdecl data::ConfigGadgetStateSendEffectTriggerRegister::ConfigGadgetStateSendEffectTriggerRegister(
        data::ConfigGadgetStateSendEffectTriggerRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigGadgetStateAction> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetStateSendEffectTriggerRegister::ConfigGadgetStateSendEffectTriggerRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateSendEffectTrigger>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadgetStateSendEffectTrigger",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::operator[](
         &data::g_ConfigGadgetStateActionMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigGadgetStateAction>::operator=<data::ConfigGadgetStateSendEffectTrigger>(
    v4,
    (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 4148: range 000000000E636078-000000000E6363E9
void __cdecl data::ConfigGadgetStateSendEffectTrigger::foreachMember(
        data::ConfigGadgetStateSendEffectTrigger *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[272]; // [rsp+10h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 16 18 parameter_any:4150 64 16 13 type_any:4152 96 16 14 value_any:4154 128 16 23 effect_pa"
                        "ttern_any:4156 160 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSendEffectTrigger::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862726] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 160), p_func);
  data::ConfigGadgetStateAction::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 160));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 32),
    &this->parameter);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::AnimatorParamType &,data::AnimatorParamType,std::any::_Manager_internal<data::AnimatorParamType>,true,true>(
    (std::any *const)(v2 + 64),
    &this->type);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<int &,int,std::any::_Manager_internal<int>,true,true>((std::any *const)(v2 + 96), &this->value);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 128),
    &this->effect_pattern);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
};

// Line 4161: range 000000000E6363EA-000000000E6364FA
std::shared_ptr<data::ConfigGadgetStateAction> __cdecl data::ConfigGadgetStateSendEffectTrigger::clone(
        data::ConfigGadgetStateSendEffectTrigger *const this)
{
  data::ConfigGadgetStateSendEffectTrigger *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigGadgetStateAction> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSendEffectTrigger::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadgetStateSendEffectTrigger,data::ConfigGadgetStateSendEffectTrigger&>(
    (common::tools::perf::allocator<data::ConfigGadgetStateSendEffectTrigger,data::ConfigGadgetStateSendEffectTrigger> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigGadgetStateAction>::shared_ptr<data::ConfigGadgetStateSendEffectTrigger,void>(
    (std::shared_ptr<data::ConfigGadgetStateAction> *const)this,
    (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 4165: range 000000000E6364FC-000000000E63653F
data::ConfigGadgetStateSendEffectTriggerPtr __cdecl data::ConfigGadgetStateSendEffectTriggerFactory::create(
        data::ConfigGadgetStateSendEffectTriggerFactory *const this)
{
  data::ConfigGadgetStateSendEffectTriggerPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigGadgetStateSendEffectTrigger>();
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateSendEffectTrigger,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 4167: range 000000000E636540-000000000E63728E
bool __cdecl data::ConfigGadgetStateSendEffectTrigger::fromJson(
        data::ConfigGadgetStateSendEffectTrigger *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool v6; // r14
  std::string *p_effect_pattern; // rsi
  const Json::Value *parameter_ptr; // [rsp+10h] [rbp-330h]
  Json::Value *type_ptr; // [rsp+18h] [rbp-328h]
  const Json::Value *value_ptr; // [rsp+20h] [rbp-320h]
  const Json::Value *effect_pattern_ptr; // [rsp+28h] [rbp-318h]
  char v13[784]; // [rsp+30h] [rbp-310h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(736LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 "
                        "9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9"
                        " <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSendEffectTrigger::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -202116109;
  if ( !data::ConfigGadgetStateAction::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4170);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 96),
      (const char (*)[45])"fromJson for: ConfigGadgetStateAction fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 160),
      "parameter",
      (const std::allocator<char> *)(v2 + 32));
    parameter_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
    std::string::~string((void *)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 32);
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( parameter_ptr && !fromJson<std::string>(parameter_ptr, &this->parameter) )
    {
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        4182);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        (common::milog::MiLogStream *const)(v2 + 224),
        (const char (*)[31])"fromJson for: parameter fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 48);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 288),
        "type",
        (const std::allocator<char> *)(v2 + 48));
      type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 288));
      std::string::~string((void *)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 48);
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( !type_ptr )
        goto LABEL_20;
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 352), (Json::Value_0 *)type_ptr);
      v6 = !data::enumStrToVal((const std::string *)(v2 + 352), &this->type);
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      if ( v6 )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          4194);
        common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[26])"fromJson for: type fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
LABEL_20:
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 64);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 480),
          "value",
          (const std::allocator<char> *)(v2 + 64));
        value_ptr = jsonValueFind(jval, (const std::string *)(v2 + 480));
        std::string::~string((void *)(v2 + 480));
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 64);
        *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( value_ptr && !fromJson<int>(value_ptr, &this->value) )
        {
          *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 544, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 544),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            4206);
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            (common::milog::MiLogStream *const)(v2 + 544),
            (const char (*)[27])"fromJson for: value fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 80);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 608),
            "effectPattern",
            (const std::allocator<char> *)(v2 + 80));
          p_effect_pattern = (std::string *)(v2 + 608);
          effect_pattern_ptr = jsonValueFind(jval, (const std::string *)(v2 + 608));
          std::string::~string((void *)(v2 + 608));
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 80);
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
          if ( effect_pattern_ptr
            && (p_effect_pattern = &this->effect_pattern,
                !fromJson<std::string>(effect_pattern_ptr, &this->effect_pattern)) )
          {
            *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 672, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 672),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              4218);
            common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)(v2 + 672),
              (const char (*)[35])"fromJson for: effectPattern fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
            result = 0;
          }
          else
          {
            if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
              __asan_report_store1(&this->is_json_loaded, p_effect_pattern, &this->is_json_loaded);
            this->is_json_loaded = 1;
            result = 1;
          }
        }
      }
    }
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 4225: range 000000000E637290-000000000E637DD6
data::ConfigGadgetStateSendEffectTriggerPtr __cdecl data::ConfigGadgetStateSendEffectTrigger::parseFromJson(
        const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetStateSendEffectTriggerPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:4238 96 16 8 ptr:4244 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:4232 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSendEffectTrigger::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        4235);
      common::milog::MiLogStream::operator<<<char [62],(char *[62])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[62])"fromJson for: ConfigGadgetStateSendEffectTrigger $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::shared_ptr(
        (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigGadgetStateAction((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 64),
             0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          4241);
        v6 = common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[49])"create ConfigGadgetStateAction fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::shared_ptr(
          (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadgetStateSendEffectTrigger,data::ConfigGadgetStateAction>((const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadgetStateSendEffectTrigger>(
               (const std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            4247);
          common::milog::MiLogStream::operator<<<char [53],(char *[53])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[53])"cast to ConfigGadgetStateSendEffectTriggerPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::shared_ptr(
            (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateSendEffectTrigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateSendEffectTrigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              4252);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadgetStateSendEffectTrigger,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateSendEffectTrigger,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 48) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 48, v1, v12);
            *(_BYTE *)(v10 + 48) = 1;
            std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::shared_ptr(
              (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)jval,
              (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      4229);
    common::milog::MiLogStream::operator<<<char [67],(char *[67])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[67])"jsonValueFind for: ConfigGadgetStateSendEffectTrigger $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger>::shared_ptr(
      (std::shared_ptr<data::ConfigGadgetStateSendEffectTrigger> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadgetStateSendEffectTrigger,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 4260: range 000000000E637DD8-000000000E637FCA
int32_t __cdecl data::ConfigGadgetStateSendEffectTrigger::getHashValue(
        const data::ConfigGadgetStateSendEffectTrigger *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:4261";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetStateSendEffectTrigger::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadgetStateAction::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  common::tools::HashUtils::appendHash(&this->parameter, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->type);
  }
  common::tools::HashUtils::appendHash(this->type, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->value);
  }
  common::tools::HashUtils::appendHash(this->value, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->effect_pattern, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4270: range 000000000E637FCB-000000000E63832C
bool __cdecl data::vecFromJson(const Json::Value *jval, data::ConfigGadgetStateActionList *v)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int v5; // eax
  int v6; // r14d
  bool result; // al
  int v8; // [rsp+0h] [rbp-E0h]
  char v9; // [rsp+8h] [rbp-D8h]
  bool v10; // [rsp+Fh] [rbp-D1h]
  uint32_t i; // [rsp+24h] [rbp-BCh]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-B8h]
  char v13[176]; // [rsp+30h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 13 elem_ptr:4276 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::vecFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v8, v9);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigGadgetStateAction::parseFromJson((const Json::Value *)(v2 + 32));
      if ( std::operator==<data::ConfigGadgetStateAction>(
             (const std::shared_ptr<data::ConfigGadgetStateAction> *)(v2 + 32),
             0LL) )
      {
        *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 64, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 64),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "vecFromJson",
          4279);
        common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
          (common::milog::MiLogStream *const)(v2 + 64),
          (const char (*)[49])"elem_ptr is nullptr: ConfigGadgetStateActionList");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
        *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
        v10 = 0;
        v6 = 0;
      }
      else
      {
        std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>::push_back(
          v,
          (const std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>::value_type *)(v2 + 32));
        v6 = 1;
      }
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v2 + 32));
      if ( v6 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = -1800;
    if ( v5 && v5 != 2 )
      goto LABEL_22;
  }
  v10 = 1;
LABEL_22:
  result = v10;
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4289: range 000000000E63832D-000000000E6385E8
int32_t __cdecl data::getVecHashValue(const data::ConfigGadgetStateActionList *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int32_t v7; // eax
  int32_t result; // eax
  const std::shared_ptr<data::ConfigGadgetStateAction> *elem; // [rsp+18h] [rbp-A8h]
  char v10[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:4290 64 8 16 __for_begin:4291 96 8 14 __for_end:4291";
  *(_QWORD *)(v2 + 16) = data::getVecHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>::const_iterator *)(v2 + 64) = std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>::const_iterator *)(v2 + 96) = std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>::end(vec);
  while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigGadgetStateAction> const*,std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>>(
            (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetStateAction>*,std::vector<std::shared_ptr<data::ConfigGadgetStateAction>> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetStateAction>*,std::vector<std::shared_ptr<data::ConfigGadgetStateAction>> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGadgetStateAction> const*,std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetStateAction>*,std::vector<std::shared_ptr<data::ConfigGadgetStateAction>> > *const)(v2 + 64));
    if ( std::operator!=<data::ConfigGadgetStateAction>(0LL, elem) )
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetStateAction,(__gnu_cxx::_Lock_policy)2,false,false> *const)elem);
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(v5);
      v6 = *(_QWORD *)v5 + 56LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(*(_QWORD *)v5 + 56LL);
      v7 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
      common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 48));
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigGadgetStateAction> const*,std::vector<std::shared_ptr<data::ConfigGadgetStateAction>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigGadgetStateAction>*,std::vector<std::shared_ptr<data::ConfigGadgetStateAction>> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4303: range 000000000E6385EA-000000000E639387
bool __cdecl data::ConfigGadgetAction::fromJson(data::ConfigGadgetAction *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::ConfigGadgetStateActionList *p_post_uiinteract_action_list; // rsi
  const Json::Value *trigger_enter_action_list_ptr; // [rsp+18h] [rbp-348h]
  const Json::Value *gadget_state_action_list_ptr; // [rsp+20h] [rbp-340h]
  const Json::Value *platform_action_list_ptr; // [rsp+28h] [rbp-338h]
  const Json::Value *interact_action_list_ptr; // [rsp+30h] [rbp-330h]
  const Json::Value *post_uiinteract_action_list_ptr; // [rsp+38h] [rbp-328h]
  char v13[800]; // [rsp+40h] [rbp-320h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(768LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "15 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 32 "
                        "9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9"
                        " <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetAction::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "triggerEnterActionList",
    (const std::allocator<char> *)(v2 + 48));
  trigger_enter_action_list_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( trigger_enter_action_list_ptr
    && !data::vecFromJson(trigger_enter_action_list_ptr, &this->trigger_enter_action_list) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4313);
    common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[44])"fromJson for: triggerEnterActionList fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "gadgetStateActionList",
      (const std::allocator<char> *)(v2 + 64));
    gadget_state_action_list_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( gadget_state_action_list_ptr
      && !data::vecFromJson(gadget_state_action_list_ptr, &this->gadget_state_action_list) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        4325);
      common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[43])"fromJson for: gadgetStateActionList fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "platformActionList",
        (const std::allocator<char> *)(v2 + 80));
      platform_action_list_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( platform_action_list_ptr && !data::vecFromJson(platform_action_list_ptr, &this->platform_action_list) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          4337);
        common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[40])"fromJson for: platformActionList fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "interactActionList",
          (const std::allocator<char> *)(v2 + 96));
        interact_action_list_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( interact_action_list_ptr && !data::vecFromJson(interact_action_list_ptr, &this->interact_action_list) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            4349);
          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[40])"fromJson for: interactActionList fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "postUIInteractActionList",
            (const std::allocator<char> *)(v2 + 112));
          p_post_uiinteract_action_list = (data::ConfigGadgetStateActionList *)(v2 + 640);
          post_uiinteract_action_list_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( post_uiinteract_action_list_ptr
            && (p_post_uiinteract_action_list = &this->post_uiinteract_action_list,
                !data::vecFromJson(post_uiinteract_action_list_ptr, &this->post_uiinteract_action_list)) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              4361);
            common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[46])"fromJson for: postUIInteractActionList fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
              __asan_report_store1(&this->is_json_loaded, p_post_uiinteract_action_list, &this->is_json_loaded);
            this->is_json_loaded = 1;
            result = 1;
          }
        }
      }
    }
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4369: range 000000000E639388-000000000E639546
int32_t __cdecl data::ConfigGadgetAction::getHashValue(const data::ConfigGadgetAction *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t VecHashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  int32_t v8; // eax
  int32_t v9; // eax
  int32_t result; // eax
  char v11[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:4370";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetAction::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  VecHashValue = data::getVecHashValue(&this->trigger_enter_action_list);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  v6 = data::getVecHashValue(&this->gadget_state_action_list);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::getVecHashValue(&this->platform_action_list);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  v8 = data::getVecHashValue(&this->interact_action_list);
  common::tools::HashUtils::appendHash(v8, (int32_t *)(v2 + 32));
  v9 = data::getVecHashValue(&this->post_uiinteract_action_list);
  common::tools::HashUtils::appendHash(v9, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4380: range 000000000E639547-000000000E6397E2
const char *__cdecl data::enumValToStr(data::GearType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e == Wall_0 )
  {
    result = "Wall";
  }
  else
  {
    if ( e <= Wall_0 )
    {
      switch ( e )
      {
        case Spray:
          result = "Spray";
          goto LABEL_19;
        case None_27:
          result = "None";
          goto LABEL_19;
        case Ray:
          result = off_1A3BCD00;
          goto LABEL_19;
      }
    }
    if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v1 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v1 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumValToStr",
      4392);
    v5 = "invalid e:";
    v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v1 + 64),
           (const char (*)[11])"invalid e:");
    v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
    if ( v7 != 0 && v7 <= 3 )
    {
      LOBYTE(v5) = v7 != 0;
      __asan_report_store4(v1 + 48, v5);
    }
    *(_DWORD *)(v1 + 48) = e;
    common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
    result = (const char *)&unk_1A36E8A0;
  }
LABEL_19:
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4398: range 000000000E6397E3-000000000E63A167
bool __cdecl data::enumStrToVal(const std::string *s, data::GearType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::GearType> *i; // r14
  _DWORD *v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::GearType> >::pointer v11; // rax
  data::GearType second; // ecx
  char v13; // dl
  data::GearType *ea; // [rsp+10h] [rbp-260h]
  char v15[592]; // [rsp+20h] [rbp-250h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 8 7 it:4411 160 8 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 160 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234556924;
  v4[536862723] = -234556924;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862735] = -202116109;
  v4[536862736] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      4401);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::GearType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::GearType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 64, e);
      *(_DWORD *)(v2 + 64) = 0;
      std::pair<std::string const,data::GearType>::pair<char const(&)[5],data::GearType,true>(
        (std::pair<const std::string,data::GearType> *const)(v2 + 320),
        (const char (*)[5])"None",
        (data::GearType *)(v2 + 64));
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, "None");
      *(_DWORD *)(v2 + 80) = 1;
      std::pair<std::string const,data::GearType>::pair<char const(&)[4],data::GearType,true>(
        (std::pair<const std::string,data::GearType> *const)(v2 + 360),
        (const char (*)[4])off_1A3BCD00,
        (data::GearType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, off_1A3BCD00);
      *(_DWORD *)(v2 + 96) = 2;
      std::pair<std::string const,data::GearType>::pair<char const(&)[6],data::GearType,true>(
        (std::pair<const std::string,data::GearType> *const)(v2 + 400),
        (const char (*)[6])"Spray",
        (data::GearType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "Spray");
      *(_DWORD *)(v2 + 112) = 3;
      std::pair<std::string const,data::GearType>::pair<char const(&)[5],data::GearType,true>(
        (std::pair<const std::string,data::GearType> *const)(v2 + 440),
        (const char (*)[5])"Wall",
        (data::GearType *)(v2 + 112));
      std::allocator<std::pair<std::string const,data::GearType>>::allocator((std::allocator<std::pair<const std::string,data::GearType> > *const)(v2 + 48));
      std::map<std::string,data::GearType>::map(
        &data::enumStrToVal(std::string const&,data::GearType &)::m,
        (std::initializer_list<std::pair<const std::string,data::GearType> >)__PAIR128__(4LL, v2 + 320),
        (const std::less<std::string > *)(v2 + 32),
        (const std::map<std::string,data::GearType>::allocator_type *)(v2 + 48));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::GearType &)::m);
      e = (data::GearType *)&data::enumStrToVal(std::string const&,data::GearType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::GearType>::~map,
        &data::enumStrToVal(std::string const&,data::GearType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::GearType>>::~allocator((std::allocator<std::pair<const std::string,data::GearType> > *const)(v2 + 48));
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::GearType> *)(v2 + 480);
            i != (std::pair<const std::string,data::GearType> *)(v2 + 320);
            std::pair<std::string const,data::GearType>::~pair(i) )
      {
        --i;
      }
      v7 = (_DWORD *)(((v2 + 320) >> 3) + 2147450880);
      *v7 = -117901064;
      v7[1] = -117901064;
      v7[2] = -117901064;
      v7[3] = -117901064;
      v7[4] = -117901064;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, e);
    *(std::map<std::string,data::GearType>::iterator *)(v2 + 128) = std::map<std::string,data::GearType>::find(
                                                                      &data::enumStrToVal(std::string const&,data::GearType &)::m,
                                                                      s);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, s);
    *(std::map<std::string,data::GearType>::iterator *)(v2 + 160) = std::map<std::string,data::GearType>::end(&data::enumStrToVal(std::string const&,data::GearType &)::m);
    v8 = (char *)(v2 + 160);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GearType> >::_Self *)(v2 + 128),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::GearType> >::_Self *)(v2 + 160));
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        4414);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 256),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::GearType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::GearType> > *const)(v2 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 4422: range 000000000E63A168-000000000E63A1C1
const char *__cdecl data::getDescription(data::GearType e)
{
  if ( e == Wall_0 )
    return (const char *)&unk_1A3BCF20;
  if ( e <= Wall_0 )
  {
    switch ( e )
    {
      case Spray:
        return (const char *)&unk_1A3BCEE0;
      case None_27:
        return (const char *)&off_1A38A3C0;
      case Ray:
        return (const char *)&unk_1A3BCEA0;
    }
  }
  return "unknown enum value!";
};

// Line 4440: range 000000000E63A1C2-000000000E63AA55
bool __cdecl data::ConfigChest::fromJson(data::ConfigChest *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *born_locked_by_ability_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *open_effect_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *trigger_open_chest_vo_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigChest::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "bornLockedByAbility",
    (const std::allocator<char> *)(v2 + 48));
  born_locked_by_ability_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( born_locked_by_ability_ptr && !fromJson<bool>(born_locked_by_ability_ptr, &this->born_locked_by_ability) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4450);
    common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[41])"fromJson for: bornLockedByAbility fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "openEffect",
      (const std::allocator<char> *)(v2 + 64));
    open_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( open_effect_ptr && !fromJson<std::string>(open_effect_ptr, &this->open_effect) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        4462);
      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[32])"fromJson for: openEffect fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "triggerOpenChestVo",
        (const std::allocator<char> *)(v2 + 80));
      trigger_open_chest_vo_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( trigger_open_chest_vo_ptr && !fromJson<bool>(trigger_open_chest_vo_ptr, &this->trigger_open_chest_vo) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          4474);
        common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[40])"fromJson for: triggerOpenChestVo fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        v6 = ((_BYTE)this + 41) & 7;
        v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
        if ( (_BYTE)v7 )
          __asan_report_store1(&this->is_json_loaded, v6, v7);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 4482: range 000000000E63AA56-000000000E63AC20
int32_t __cdecl data::ConfigChest::getHashValue(const data::ConfigChest *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:4483";
  *(_QWORD *)(v2 + 16) = data::ConfigChest::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(char *)(((unsigned __int64)this >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(this, v1, this);
  common::tools::HashUtils::appendHash(this->born_locked_by_ability, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->open_effect, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->trigger_open_chest_vo >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->trigger_open_chest_vo, v2 + 32, &this->trigger_open_chest_vo);
  common::tools::HashUtils::appendHash(this->trigger_open_chest_vo, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4492: range 000000000E63AC22-000000000E63C15F
bool __cdecl data::ConfigGear::fromJson(data::ConfigGear *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  char v6; // al
  bool v7; // r15
  bool v8; // r15
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool v11; // bl
  Json::Value *gear_type_ptr; // [rsp+18h] [rbp-548h]
  Json::Value *start_elem_type_ptr; // [rsp+20h] [rbp-540h]
  const Json::Value *start_value_ptr; // [rsp+28h] [rbp-538h]
  const Json::Value *start_last_time_ptr; // [rsp+30h] [rbp-530h]
  Json::Value *stop_elem_type_ptr; // [rsp+38h] [rbp-528h]
  const Json::Value *stop_value_ptr; // [rsp+40h] [rbp-520h]
  const Json::Value *stop_last_time_ptr; // [rsp+48h] [rbp-518h]
  char v20[1296]; // [rsp+50h] [rbp-510h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "24 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <u"
                        "nknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <un"
                        "known> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGear::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "gearType",
    (const std::allocator<char> *)(v2 + 48));
  gear_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( !gear_type_ptr )
    goto LABEL_11;
  *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 224, 32LL);
  }
  Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 224), (Json::Value_0 *)gear_type_ptr);
  v5 = !data::enumStrToVal((const std::string *)(v2 + 224), &this->gear_type);
  std::string::~string((void *)(v2 + 224));
  *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4502);
    common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
      (common::milog::MiLogStream *const)(v2 + 288),
      (const char (*)[30])"fromJson for: gearType fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
    v6 = 0;
  }
  else
  {
LABEL_11:
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 352),
      "startElemType",
      (const std::allocator<char> *)(v2 + 64));
    start_elem_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 352));
    std::string::~string((void *)(v2 + 352));
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( !start_elem_type_ptr )
      goto LABEL_18;
    *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 416, 32LL);
    }
    Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 416), (Json::Value_0 *)start_elem_type_ptr);
    v7 = !data::enumStrToVal((const std::string *)(v2 + 416), &this->start_elem_type);
    std::string::~string((void *)(v2 + 416));
    *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
    if ( v7 )
    {
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        4514);
      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
        (common::milog::MiLogStream *const)(v2 + 480),
        (const char (*)[35])"fromJson for: startElemType fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
      v6 = 0;
    }
    else
    {
LABEL_18:
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 544),
        "startValue",
        (const std::allocator<char> *)(v2 + 80));
      start_value_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
      std::string::~string((void *)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( start_value_ptr && !fromJson<unsigned int>(start_value_ptr, &this->start_value) )
      {
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          4526);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          (common::milog::MiLogStream *const)(v2 + 608),
          (const char (*)[32])"fromJson for: startValue fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
        v6 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 672),
          "startLastTime",
          (const std::allocator<char> *)(v2 + 96));
        start_last_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
        std::string::~string((void *)(v2 + 672));
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( start_last_time_ptr && !fromJson<unsigned int>(start_last_time_ptr, &this->start_last_time) )
        {
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 736, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 736),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            4538);
          common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
            (common::milog::MiLogStream *const)(v2 + 736),
            (const char (*)[35])"fromJson for: startLastTime fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
          v6 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 800),
            "stopElemType",
            (const std::allocator<char> *)(v2 + 112));
          stop_elem_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 800));
          std::string::~string((void *)(v2 + 800));
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( !stop_elem_type_ptr )
            goto LABEL_35;
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 864, 32LL);
          }
          Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 864), (Json::Value_0 *)stop_elem_type_ptr);
          v8 = !data::enumStrToVal((const std::string *)(v2 + 864), &this->stop_elem_type);
          std::string::~string((void *)(v2 + 864));
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
          if ( v8 )
          {
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 928) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 928, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 928),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              4550);
            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v2 + 928),
              (const char (*)[34])"fromJson for: stopElemType fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 928));
            v6 = 0;
          }
          else
          {
LABEL_35:
            *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 992),
              "stopValue",
              (const std::allocator<char> *)(v2 + 128));
            stop_value_ptr = jsonValueFind(jval, (const std::string *)(v2 + 992));
            std::string::~string((void *)(v2 + 992));
            *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( stop_value_ptr && !fromJson<unsigned int>(stop_value_ptr, &this->stop_value) )
            {
              *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1056, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1056),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                4562);
              common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                (common::milog::MiLogStream *const)(v2 + 1056),
                (const char (*)[31])"fromJson for: stopValue fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1056));
              v6 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1120),
                "stopLastTime",
                (const std::allocator<char> *)(v2 + 144));
              stop_last_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1120));
              std::string::~string((void *)(v2 + 1120));
              *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( stop_last_time_ptr && !fromJson<unsigned int>(stop_last_time_ptr, &this->stop_last_time) )
              {
                *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1184) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1184, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1184),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  4574);
                common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                  (common::milog::MiLogStream *const)(v2 + 1184),
                  (const char (*)[34])"fromJson for: stopLastTime fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1184));
                v6 = 0;
              }
              else
              {
                v9 = ((_BYTE)this + 28) & 7;
                v10 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
                if ( (_BYTE)v10 )
                  __asan_report_store1(&this->is_json_loaded, v9, v10);
                this->is_json_loaded = 1;
                v6 = 1;
              }
            }
          }
        }
      }
    }
  }
  v11 = v6;
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8070) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8080) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8088) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8090) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8098) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, v20);
  }
  return v11;
};

// Line 4582: range 000000000E63C160-000000000E63C4A7
int32_t __cdecl data::ConfigGear::getHashValue(const data::ConfigGear *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:4583";
  *(_QWORD *)(v2 + 16) = data::ConfigGear::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->gear_type, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->start_elem_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->start_elem_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->start_elem_type);
  }
  common::tools::HashUtils::appendHash(this->start_elem_type, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->start_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->start_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->start_value);
  }
  common::tools::HashUtils::appendHash(this->start_value, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->start_last_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->start_last_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->start_last_time);
  }
  common::tools::HashUtils::appendHash(this->start_last_time, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->stop_elem_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->stop_elem_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->stop_elem_type);
  }
  common::tools::HashUtils::appendHash(this->stop_elem_type, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->stop_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->stop_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->stop_value);
  }
  common::tools::HashUtils::appendHash(this->stop_value, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->stop_last_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 24) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->stop_last_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->stop_last_time);
  }
  common::tools::HashUtils::appendHash(this->stop_last_time, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4596: range 000000000E63C4A8-000000000E63DA61
bool __cdecl data::ConfigCrystal::fromJson(data::ConfigCrystal *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  char v6; // al
  uint32_t *p_respawn_time; // rsi
  bool v8; // bl
  Json::Value *element_type_ptr; // [rsp+10h] [rbp-550h]
  const Json::Value *gain_speed_ptr; // [rsp+18h] [rbp-548h]
  const Json::Value *drain_speed_ptr; // [rsp+20h] [rbp-540h]
  const Json::Value *resonate_levels_ptr; // [rsp+28h] [rbp-538h]
  const Json::Value *burst_resonate_ptr; // [rsp+30h] [rbp-530h]
  const Json::Value *burst_skill_ptr; // [rsp+38h] [rbp-528h]
  const Json::Value *burst_time_ptr; // [rsp+40h] [rbp-520h]
  const Json::Value *respawn_time_ptr; // [rsp+48h] [rbp-518h]
  char v19[1296]; // [rsp+50h] [rbp-510h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "25 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <un"
                        "known> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unk"
                        "nown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unkn"
                        "own> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCrystal::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "elementType",
    (const std::allocator<char> *)(v2 + 32));
  element_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( !element_type_ptr )
    goto LABEL_11;
  *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 224, 32LL);
  }
  Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 224), (Json::Value_0 *)element_type_ptr);
  v5 = !data::enumStrToVal((const std::string *)(v2 + 224), &this->element_type);
  std::string::~string((void *)(v2 + 224));
  *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4606);
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
      (common::milog::MiLogStream *const)(v2 + 288),
      (const char (*)[33])"fromJson for: elementType fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
    v6 = 0;
  }
  else
  {
LABEL_11:
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 352),
      "gainSpeed",
      (const std::allocator<char> *)(v2 + 48));
    gain_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
    std::string::~string((void *)(v2 + 352));
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( gain_speed_ptr && !fromJson<unsigned int>(gain_speed_ptr, &this->gain_speed) )
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        4618);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        (common::milog::MiLogStream *const)(v2 + 416),
        (const char (*)[31])"fromJson for: gainSpeed fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
      v6 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 480),
        "drainSpeed",
        (const std::allocator<char> *)(v2 + 64));
      drain_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 480));
      std::string::~string((void *)(v2 + 480));
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( drain_speed_ptr && !fromJson<unsigned int>(drain_speed_ptr, &this->drain_speed) )
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 544, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 544),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          4630);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          (common::milog::MiLogStream *const)(v2 + 544),
          (const char (*)[32])"fromJson for: drainSpeed fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
        v6 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 608),
          "resonateLevels",
          (const std::allocator<char> *)(v2 + 80));
        resonate_levels_ptr = jsonValueFind(jval, (const std::string *)(v2 + 608));
        std::string::~string((void *)(v2 + 608));
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( resonate_levels_ptr && !data::vecFromJson(resonate_levels_ptr, &this->resonate_levels) )
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 672, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 672),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            4642);
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v2 + 672),
            (const char (*)[36])"fromJson for: resonateLevels fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
          v6 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 736),
            "burstResonate",
            (const std::allocator<char> *)(v2 + 96));
          burst_resonate_ptr = jsonValueFind(jval, (const std::string *)(v2 + 736));
          std::string::~string((void *)(v2 + 736));
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( burst_resonate_ptr && !fromJson<unsigned int>(burst_resonate_ptr, &this->burst_resonate) )
          {
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 800, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 800),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              4654);
            common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)(v2 + 800),
              (const char (*)[35])"fromJson for: burstResonate fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
            v6 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 864),
              "burstSkill",
              (const std::allocator<char> *)(v2 + 112));
            burst_skill_ptr = jsonValueFind(jval, (const std::string *)(v2 + 864));
            std::string::~string((void *)(v2 + 864));
            *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( burst_skill_ptr && !fromJson<std::string>(burst_skill_ptr, &this->burst_skill) )
            {
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 928) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 928, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 928),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                4666);
              common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                (common::milog::MiLogStream *const)(v2 + 928),
                (const char (*)[32])"fromJson for: burstSkill fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 928));
              v6 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 128);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 992),
                "burstTime",
                (const std::allocator<char> *)(v2 + 128));
              burst_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 992));
              std::string::~string((void *)(v2 + 992));
              *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 128);
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
              if ( burst_time_ptr && !fromJson<unsigned int>(burst_time_ptr, &this->burst_time) )
              {
                *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1056, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1056),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  4678);
                common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                  (common::milog::MiLogStream *const)(v2 + 1056),
                  (const char (*)[31])"fromJson for: burstTime fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1056));
                v6 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 144);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1120),
                  "respawnTime",
                  (const std::allocator<char> *)(v2 + 144));
                p_respawn_time = (uint32_t *)(v2 + 1120);
                respawn_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1120));
                std::string::~string((void *)(v2 + 1120));
                *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 144);
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
                if ( respawn_time_ptr
                  && (p_respawn_time = &this->respawn_time,
                      !fromJson<unsigned int>(respawn_time_ptr, &this->respawn_time)) )
                {
                  *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1184) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1215) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1184, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1184),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    4690);
                  common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                    (common::milog::MiLogStream *const)(v2 + 1184),
                    (const char (*)[33])"fromJson for: respawnTime fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1184));
                  v6 = 0;
                }
                else
                {
                  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                    __asan_report_store1(&this->is_json_loaded, p_respawn_time, &this->is_json_loaded);
                  this->is_json_loaded = 1;
                  v6 = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v8 = v6;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8070) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8080) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8088) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8090) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8098) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, v19);
  }
  return v8;
};

// Line 4698: range 000000000E63DA62-000000000E63DD70
int32_t __cdecl data::ConfigCrystal::getHashValue(const data::ConfigCrystal *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t VecHashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:4699";
  *(_QWORD *)(v2 + 16) = data::ConfigCrystal::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->element_type, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->gain_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->gain_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->gain_speed);
  }
  common::tools::HashUtils::appendHash(this->gain_speed, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->drain_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->drain_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->drain_speed);
  }
  common::tools::HashUtils::appendHash(this->drain_speed, (int32_t *)(v2 + 32));
  VecHashValue = data::getVecHashValue(&this->resonate_levels);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->burst_resonate >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->burst_resonate >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->burst_resonate);
  }
  common::tools::HashUtils::appendHash(this->burst_resonate, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->burst_skill, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->burst_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->burst_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->burst_time);
  }
  common::tools::HashUtils::appendHash(this->burst_time, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->respawn_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->respawn_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->respawn_time);
  }
  common::tools::HashUtils::appendHash(this->respawn_time, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4712: range 000000000E63DD71-000000000E63DFD0
const char *__cdecl data::enumValToStr(data::SealProgressType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e )
  {
    if ( e == Bar )
    {
      result = off_1A3BDD60;
    }
    else
    {
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        4720);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
  else
  {
    result = "Circle";
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4726: range 000000000E63DFD1-000000000E63E808
bool __cdecl data::enumStrToVal(const std::string *s, data::SealProgressType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::SealProgressType> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::SealProgressType> >::pointer v11; // rax
  data::SealProgressType second; // ecx
  char v13; // dl
  data::SealProgressType *ea; // [rsp+10h] [rbp-1E0h]
  char v15[464]; // [rsp+20h] [rbp-1D0h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(416LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 8 7 it:4737 144 8 9 <u"
                        "nknown> 176 32 9 <unknown> 240 32 9 <unknown> 304 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862732] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 176, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 176),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      4729);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 176),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::SealProgressType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::SealProgressType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::SealProgressType>::pair<char const(&)[7],data::SealProgressType,true>(
        (std::pair<const std::string,data::SealProgressType> *const)(v2 + 304),
        (const char (*)[7])"Circle",
        (data::SealProgressType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "Circle");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::SealProgressType>::pair<char const(&)[4],data::SealProgressType,true>(
        (std::pair<const std::string,data::SealProgressType> *const)(v2 + 344),
        (const char (*)[4])off_1A3BDD60,
        (data::SealProgressType *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::SealProgressType>>::allocator((std::allocator<std::pair<const std::string,data::SealProgressType> > *const)(v2 + 64));
      std::map<std::string,data::SealProgressType>::map(
        &data::enumStrToVal(std::string const&,data::SealProgressType &)::m,
        (std::initializer_list<std::pair<const std::string,data::SealProgressType> >)__PAIR128__(2LL, v2 + 304),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::SealProgressType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::SealProgressType &)::m);
      e = (data::SealProgressType *)&data::enumStrToVal(std::string const&,data::SealProgressType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::SealProgressType>::~map,
        &data::enumStrToVal(std::string const&,data::SealProgressType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::SealProgressType>>::~allocator((std::allocator<std::pair<const std::string,data::SealProgressType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::SealProgressType> *)(v2 + 384);
            i != (std::pair<const std::string,data::SealProgressType> *)(v2 + 304);
            std::pair<std::string const,data::SealProgressType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 304) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, e);
    *(std::map<std::string,data::SealProgressType>::iterator *)(v2 + 112) = std::map<std::string,data::SealProgressType>::find(
                                                                              &data::enumStrToVal(std::string const&,data::SealProgressType &)::m,
                                                                              s);
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, s);
    *(std::map<std::string,data::SealProgressType>::iterator *)(v2 + 144) = std::map<std::string,data::SealProgressType>::end(&data::enumStrToVal(std::string const&,data::SealProgressType &)::m);
    v8 = (char *)(v2 + 144);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::SealProgressType> >::_Self *)(v2 + 112),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::SealProgressType> >::_Self *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 111) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        4740);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::SealProgressType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::SealProgressType> > *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 4748: range 000000000E63E809-000000000E63E838
const char *__cdecl data::getDescription(data::SealProgressType e)
{
  if ( e == Circle )
    return (const char *)&unk_1A3BDE60;
  if ( e == Bar )
    return (const char *)&unk_1A3BDEA0;
  return "unknown enum value!";
};

// Line 4762: range 000000000E63E83A-000000000E63F96F
bool __cdecl data::ConfigSeal::fromJson(data::ConfigSeal *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  bool result; // al
  std::string *p_title; // rsi
  Json::Value *progress_type_ptr; // [rsp+10h] [rbp-420h]
  const Json::Value *board_effect_ptr; // [rsp+18h] [rbp-418h]
  const Json::Value *board_effect_start_position_ptr; // [rsp+20h] [rbp-410h]
  const Json::Value *board_effect_end_position_ptr; // [rsp+28h] [rbp-408h]
  const Json::Value *start_tips_ptr; // [rsp+30h] [rbp-400h]
  const Json::Value *title_ptr; // [rsp+38h] [rbp-3F8h]
  char v15[1008]; // [rsp+40h] [rbp-3F0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(960LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <"
                        "unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <u"
                        "nknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigSeal::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "progressType",
    (const std::allocator<char> *)(v2 + 32));
  progress_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( !progress_type_ptr )
    goto LABEL_11;
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 192, 32LL);
  }
  Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 192), (Json::Value_0 *)progress_type_ptr);
  v5 = !data::enumStrToVal((const std::string *)(v2 + 192), &this->progress_type);
  std::string::~string((void *)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4772);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[34])"fromJson for: progressType fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0;
  }
  else
  {
LABEL_11:
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      "boardEffect",
      (const std::allocator<char> *)(v2 + 48));
    board_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( board_effect_ptr && !fromJson<std::string>(board_effect_ptr, &this->board_effect) )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        4784);
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        (common::milog::MiLogStream *const)(v2 + 384),
        (const char (*)[33])"fromJson for: boardEffect fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 448),
        "boardEffectStartPosition",
        (const std::allocator<char> *)(v2 + 64));
      board_effect_start_position_ptr = jsonValueFind(jval, (const std::string *)(v2 + 448));
      std::string::~string((void *)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( board_effect_start_position_ptr
        && !fromJson<float>(board_effect_start_position_ptr, &this->board_effect_start_position) )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          4796);
        common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
          (common::milog::MiLogStream *const)(v2 + 512),
          (const char (*)[46])"fromJson for: boardEffectStartPosition fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 576),
          "boardEffectEndPosition",
          (const std::allocator<char> *)(v2 + 80));
        board_effect_end_position_ptr = jsonValueFind(jval, (const std::string *)(v2 + 576));
        std::string::~string((void *)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( board_effect_end_position_ptr
          && !fromJson<float>(board_effect_end_position_ptr, &this->board_effect_end_position) )
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            4808);
          common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
            (common::milog::MiLogStream *const)(v2 + 640),
            (const char (*)[44])"fromJson for: boardEffectEndPosition fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 704),
            "startTips",
            (const std::allocator<char> *)(v2 + 96));
          start_tips_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
          std::string::~string((void *)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( start_tips_ptr && !fromJson<std::string>(start_tips_ptr, &this->start_tips) )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              4820);
            common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
              (common::milog::MiLogStream *const)(v2 + 768),
              (const char (*)[31])"fromJson for: startTips fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            result = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 832),
              "title",
              (const std::allocator<char> *)(v2 + 112));
            p_title = (std::string *)(v2 + 832);
            title_ptr = jsonValueFind(jval, (const std::string *)(v2 + 832));
            std::string::~string((void *)(v2 + 832));
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( title_ptr && (p_title = &this->title, !fromJson<std::string>(title_ptr, &this->title)) )
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                4832);
              common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[27])"fromJson for: title fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
              result = 0;
            }
            else
            {
              if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                __asan_report_store1(&this->is_json_loaded, p_title, &this->is_json_loaded);
              this->is_json_loaded = 1;
              result = 1;
            }
          }
        }
      }
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4840: range 000000000E63F970-000000000E63FBB0
int32_t __cdecl data::ConfigSeal::getHashValue(const data::ConfigSeal *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:4841";
  *(_QWORD *)(v2 + 16) = data::ConfigSeal::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->progress_type, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->board_effect, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->board_effect_start_position >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->board_effect_start_position >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->board_effect_start_position);
  }
  common::tools::HashUtils::appendHash(this->board_effect_start_position, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->board_effect_end_position >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->board_effect_end_position >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->board_effect_end_position);
  }
  common::tools::HashUtils::appendHash(this->board_effect_end_position, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->start_tips, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->title, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4852: range 000000000E63FBB1-000000000E63FE67
const char *__cdecl data::enumValToStr(data::PickType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  switch ( e )
  {
    case None_28:
      result = "None";
      break;
    case Monster_0:
      result = "Monster";
      break;
    case Auto:
      result = "Auto";
      break;
    case Select:
      result = "Select";
      break;
    case Attract:
      result = "Attract";
      break;
    case AutoSelect:
      result = "AutoSelect";
      break;
    case GroupAuto:
      result = "GroupAuto";
      break;
    default:
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        4870);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
      break;
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4876: range 000000000E63FE68-000000000E6409CB
bool __cdecl data::enumStrToVal(const std::string *s, data::PickType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::PickType> *i; // r14
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::PickType> >::pointer v10; // rax
  data::PickType second; // ecx
  char v12; // dl
  data::PickType *ea; // [rsp+10h] [rbp-320h]
  char v14[784]; // [rsp+20h] [rbp-310h] BYREF

  ea = e;
  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(736LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 8 7 it:4892 224 8 9 <unknow"
                        "n> 256 32 9 <unknown> 320 32 9 <unknown> 384 280 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862740] = -218103808;
  v4[536862741] = -202116109;
  v4[536862742] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      4879);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::PickType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::PickType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::PickType>::pair<char const(&)[5],data::PickType,true>(
        (std::pair<const std::string,data::PickType> *const)(v2 + 384),
        (const char (*)[5])"None",
        (data::PickType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "None");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::PickType>::pair<char const(&)[8],data::PickType,true>(
        (std::pair<const std::string,data::PickType> *const)(v2 + 424),
        (const char (*)[8])"Monster",
        (data::PickType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "Monster");
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::PickType>::pair<char const(&)[5],data::PickType,true>(
        (std::pair<const std::string,data::PickType> *const)(v2 + 464),
        (const char (*)[5])"Auto",
        (data::PickType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, "Auto");
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::PickType>::pair<char const(&)[7],data::PickType,true>(
        (std::pair<const std::string,data::PickType> *const)(v2 + 504),
        (const char (*)[7])"Select",
        (data::PickType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, "Select");
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::PickType>::pair<char const(&)[8],data::PickType,true>(
        (std::pair<const std::string,data::PickType> *const)(v2 + 544),
        (const char (*)[8])"Attract",
        (data::PickType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, "Attract");
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::PickType>::pair<char const(&)[11],data::PickType,true>(
        (std::pair<const std::string,data::PickType> *const)(v2 + 584),
        (const char (*)[11])"AutoSelect",
        (data::PickType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, "AutoSelect");
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::PickType>::pair<char const(&)[10],data::PickType,true>(
        (std::pair<const std::string,data::PickType> *const)(v2 + 624),
        (const char (*)[10])"GroupAuto",
        (data::PickType *)(v2 + 176));
      std::allocator<std::pair<std::string const,data::PickType>>::allocator((std::allocator<std::pair<const std::string,data::PickType> > *const)(v2 + 64));
      std::map<std::string,data::PickType>::map(
        &data::enumStrToVal(std::string const&,data::PickType &)::m,
        (std::initializer_list<std::pair<const std::string,data::PickType> >)__PAIR128__(7LL, v2 + 384),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::PickType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::PickType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::PickType>::~map,
        &data::enumStrToVal(std::string const&,data::PickType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::PickType>>::~allocator((std::allocator<std::pair<const std::string,data::PickType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::PickType> *)(v2 + 664);
            i != (std::pair<const std::string,data::PickType> *)(v2 + 384);
            std::pair<std::string const,data::PickType>::~pair(i) )
      {
        --i;
      }
      e = (data::PickType *)280;
      __asan_poison_stack_memory(v2 + 384, 280LL);
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, e);
    *(std::map<std::string,data::PickType>::iterator *)(v2 + 192) = std::map<std::string,data::PickType>::find(
                                                                      &data::enumStrToVal(std::string const&,data::PickType &)::m,
                                                                      s);
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, s);
    *(std::map<std::string,data::PickType>::iterator *)(v2 + 224) = std::map<std::string,data::PickType>::end(&data::enumStrToVal(std::string const&,data::PickType &)::m);
    v7 = (char *)(v2 + 224);
    v8 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::PickType> >::_Self *)(v2 + 192),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::PickType> >::_Self *)(v2 + 224));
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 127) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        4895);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 320),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v9, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      v10 = std::_Rb_tree_iterator<std::pair<std::string const,data::PickType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::PickType> > *const)(v2 + 192));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(ea, v7);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 4903: range 000000000E6409CC-000000000E640A43
const char *__cdecl data::getDescription(data::PickType e)
{
  const char *result; // rax

  switch ( e )
  {
    case None_28:
      result = (const char *)&off_1A38A3C0;
      break;
    case Monster_0:
      result = (const char *)&unk_1A3BE460;
      break;
    case Auto:
      result = (const char *)&unk_1A3BE4A0;
      break;
    case Select:
      result = (const char *)&unk_1A3BE4E0;
      break;
    case Attract:
      result = (const char *)&unk_1A3BE520;
      break;
    case AutoSelect:
      result = (const char *)&unk_1A3BE560;
      break;
    case GroupAuto:
      result = (const char *)&unk_1A3BE5A0;
      break;
    default:
      result = "unknown enum value!";
      break;
  }
  return result;
};

// Line 4927: range 000000000E640A44-000000000E641C8C
bool __cdecl data::ConfigPickupMulti::fromJson(data::ConfigPickupMulti *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool v8; // bl
  const Json::Value *dir_min_vec_ptr; // [rsp+18h] [rbp-478h]
  const Json::Value *dir_max_vec_ptr; // [rsp+20h] [rbp-470h]
  const Json::Value *max_num_ptr; // [rsp+28h] [rbp-468h]
  const Json::Value *min_num_ptr; // [rsp+30h] [rbp-460h]
  const Json::Value *attract_speed_ptr; // [rsp+38h] [rbp-458h]
  const Json::Value *use_world_trans_ptr; // [rsp+40h] [rbp-450h]
  const Json::Value *is_auto_attract_ptr; // [rsp+48h] [rbp-448h]
  char v17[1088]; // [rsp+50h] [rbp-440h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1056LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <u"
                        "nknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPickupMulti::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "dirMinVec",
    (const std::allocator<char> *)(v2 + 48));
  dir_min_vec_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( dir_min_vec_ptr && !data::Vector::fromJson(&this->dir_min_vec, dir_min_vec_ptr) )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      4937);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)(v2 + 224),
      (const char (*)[31])"fromJson for: dirMinVec fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      "dirMaxVec",
      (const std::allocator<char> *)(v2 + 64));
    dir_max_vec_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( dir_max_vec_ptr && !data::Vector::fromJson(&this->dir_max_vec, dir_max_vec_ptr) )
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        4949);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        (common::milog::MiLogStream *const)(v2 + 352),
        (const char (*)[31])"fromJson for: dirMaxVec fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 416),
        "maxNum",
        (const std::allocator<char> *)(v2 + 80));
      max_num_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
      std::string::~string((void *)(v2 + 416));
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( max_num_ptr && !fromJson<unsigned int>(max_num_ptr, &this->max_num) )
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 480),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          4961);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          (common::milog::MiLogStream *const)(v2 + 480),
          (const char (*)[28])"fromJson for: maxNum fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 544),
          "minNum",
          (const std::allocator<char> *)(v2 + 96));
        min_num_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
        std::string::~string((void *)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( min_num_ptr && !fromJson<unsigned int>(min_num_ptr, &this->min_num) )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            4973);
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            (common::milog::MiLogStream *const)(v2 + 608),
            (const char (*)[28])"fromJson for: minNum fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 672),
            "attractSpeed",
            (const std::allocator<char> *)(v2 + 112));
          attract_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
          std::string::~string((void *)(v2 + 672));
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( attract_speed_ptr && !fromJson<float>(attract_speed_ptr, &this->attract_speed) )
          {
            *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 736, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 736),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              4985);
            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
              (common::milog::MiLogStream *const)(v2 + 736),
              (const char (*)[34])"fromJson for: attractSpeed fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 800),
              "useWorldTrans",
              (const std::allocator<char> *)(v2 + 128));
            use_world_trans_ptr = jsonValueFind(jval, (const std::string *)(v2 + 800));
            std::string::~string((void *)(v2 + 800));
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( use_world_trans_ptr && !fromJson<bool>(use_world_trans_ptr, &this->use_world_trans) )
            {
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                4997);
              common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                (common::milog::MiLogStream *const)(v2 + 864),
                (const char (*)[35])"fromJson for: useWorldTrans fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 928),
                "isAutoAttract",
                (const std::allocator<char> *)(v2 + 144));
              is_auto_attract_ptr = jsonValueFind(jval, (const std::string *)(v2 + 928));
              std::string::~string((void *)(v2 + 928));
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( is_auto_attract_ptr && !fromJson<bool>(is_auto_attract_ptr, &this->is_auto_attract) )
              {
                *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 992, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 992),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  5009);
                common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                  (common::milog::MiLogStream *const)(v2 + 992),
                  (const char (*)[35])"fromJson for: isAutoAttract fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
                v5 = 0;
              }
              else
              {
                v6 = ((_BYTE)this + 46) & 7;
                v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
                if ( (_BYTE)v7 )
                  __asan_report_store1(&this->is_json_loaded, v6, v7);
                this->is_json_loaded = 1;
                v5 = 1;
              }
            }
          }
        }
      }
    }
  }
  v8 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8080) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1056LL, v17);
  }
  return v8;
};

// Line 5017: range 000000000E641C8E-000000000E641F7A
int32_t __cdecl data::ConfigPickupMulti::getHashValue(const data::ConfigPickupMulti *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t v6; // eax
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  int32_t result; // eax
  char v12[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:5018";
  *(_QWORD *)(v2 + 16) = data::ConfigPickupMulti::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::Vector::getHashValue(&this->dir_min_vec);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  v6 = data::Vector::getHashValue(&this->dir_max_vec);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 32) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->max_num);
  }
  common::tools::HashUtils::appendHash(this->max_num, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->min_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->min_num);
  }
  common::tools::HashUtils::appendHash(this->min_num, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->attract_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 40) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attract_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->attract_speed);
  }
  common::tools::HashUtils::appendHash(this->attract_speed, (int32_t *)(v2 + 32));
  v7 = ((_BYTE)this + 44) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->use_world_trans >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->use_world_trans >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->use_world_trans, v7, v8);
  common::tools::HashUtils::appendHash(this->use_world_trans, (int32_t *)(v2 + 32));
  v9 = ((_BYTE)this + 45) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&this->is_auto_attract >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->is_auto_attract >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&this->is_auto_attract, v9, v10);
  common::tools::HashUtils::appendHash(this->is_auto_attract, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5031: range 000000000E641F7C-000000000E6473B6
bool __cdecl data::ConfigPickup::fromJson(data::ConfigPickup *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  bool v9; // bl
  Json::Value *pick_type_ptr; // [rsp+18h] [rbp-1438h]
  const Json::Value *is_static_ptr; // [rsp+20h] [rbp-1430h]
  const Json::Value *drop_point_max_yaw_ptr; // [rsp+28h] [rbp-1428h]
  const Json::Value *drop_point_min_speed_ptr; // [rsp+30h] [rbp-1420h]
  const Json::Value *drop_point_max_speed_ptr; // [rsp+38h] [rbp-1418h]
  const Json::Value *born_effect_ptr; // [rsp+40h] [rbp-1410h]
  const Json::Value *drop_effect_ptr; // [rsp+48h] [rbp-1408h]
  const Json::Value *drop_offset_ptr; // [rsp+50h] [rbp-1400h]
  const Json::Value *enable_scan_ptr; // [rsp+58h] [rbp-13F8h]
  const Json::Value *lock_ymove_ptr; // [rsp+60h] [rbp-13F0h]
  const Json::Value *suspend_height_ptr; // [rsp+68h] [rbp-13E8h]
  const Json::Value *suspend_speed_ptr; // [rsp+70h] [rbp-13E0h]
  const Json::Value *suspend_amplitude_ptr; // [rsp+78h] [rbp-13D8h]
  const Json::Value *rotate_speed_ptr; // [rsp+80h] [rbp-13D0h]
  const Json::Value *rotate_vec_ptr; // [rsp+88h] [rbp-13C8h]
  const Json::Value *attract_delay_time_ptr; // [rsp+90h] [rbp-13C0h]
  const Json::Value *multi_ptr; // [rsp+98h] [rbp-13B8h]
  const Json::Value *dir_vec_ptr; // [rsp+A0h] [rbp-13B0h]
  const Json::Value *gravity_ration_ptr; // [rsp+A8h] [rbp-13A8h]
  const Json::Value *disable_init_jump_ptr; // [rsp+B0h] [rbp-13A0h]
  const Json::Value *init_back_speed_ptr; // [rsp+B8h] [rbp-1398h]
  const Json::Value *back_decelerate_ptr; // [rsp+C0h] [rbp-1390h]
  const Json::Value *back_fan_angle_ptr; // [rsp+C8h] [rbp-1388h]
  const Json::Value *back_fan_start_angle_ptr; // [rsp+D0h] [rbp-1380h]
  const Json::Value *rebound_times_ptr; // [rsp+D8h] [rbp-1378h]
  const Json::Value *rebound_ration_ptr; // [rsp+E0h] [rbp-1370h]
  const Json::Value *attract_accelerate_ptr; // [rsp+E8h] [rbp-1368h]
  const Json::Value *attract_max_distance_ptr; // [rsp+F0h] [rbp-1360h]
  const Json::Value *height_offset_ptr; // [rsp+F8h] [rbp-1358h]
  const Json::Value *rotate_decelerate_ptr; // [rsp+100h] [rbp-1350h]
  const Json::Value *attract_audio_ptr; // [rsp+108h] [rbp-1348h]
  const Json::Value *is_dummy_pick_ptr; // [rsp+110h] [rbp-1340h]
  const Json::Value *is_pick_destroy_ptr; // [rsp+118h] [rbp-1338h]
  char v44[4912]; // [rsp+120h] [rbp-1330h] BYREF

  v2 = (unsigned __int64)v44;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_7(4864LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "100 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 "
                        "9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unk"
                        "nown> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 1 9 <unknown> "
                        "304 1 9 <unknown> 320 1 9 <unknown> 336 1 9 <unknown> 352 1 9 <unknown> 368 1 9 <unknown> 384 1 "
                        "9 <unknown> 400 1 9 <unknown> 416 1 9 <unknown> 432 1 9 <unknown> 448 1 9 <unknown> 464 1 9 <unk"
                        "nown> 480 1 9 <unknown> 496 1 9 <unknown> 512 1 9 <unknown> 528 1 9 <unknown> 544 1 9 <unknown> "
                        "560 1 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 83"
                        "2 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1"
                        "152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknow"
                        "n> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 32 9 <unknown> 1728 32 9 <un"
                        "known> 1792 32 9 <unknown> 1856 32 9 <unknown> 1920 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9"
                        " <unknown> 2112 32 9 <unknown> 2176 32 9 <unknown> 2240 32 9 <unknown> 2304 32 9 <unknown> 2368 "
                        "32 9 <unknown> 2432 32 9 <unknown> 2496 32 9 <unknown> 2560 32 9 <unknown> 2624 32 9 <unknown> 2"
                        "688 32 9 <unknown> 2752 32 9 <unknown> 2816 32 9 <unknown> 2880 32 9 <unknown> 2944 32 9 <unknow"
                        "n> 3008 32 9 <unknown> 3072 32 9 <unknown> 3136 32 9 <unknown> 3200 32 9 <unknown> 3264 32 9 <un"
                        "known> 3328 32 9 <unknown> 3392 32 9 <unknown> 3456 32 9 <unknown> 3520 32 9 <unknown> 3584 32 9"
                        " <unknown> 3648 32 9 <unknown> 3712 32 9 <unknown> 3776 32 9 <unknown> 3840 32 9 <unknown> 3904 "
                        "32 9 <unknown> 3968 32 9 <unknown> 4032 32 9 <unknown> 4096 32 9 <unknown> 4160 32 9 <unknown> 4"
                        "224 32 9 <unknown> 4288 32 9 <unknown> 4352 32 9 <unknown> 4416 32 9 <unknown> 4480 32 9 <unknow"
                        "n> 4544 32 9 <unknown> 4608 32 9 <unknown> 4672 32 9 <unknown> 4736 32 9 <unknown> 4800 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPickup::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234753535;
  v4[536862730] = -234753535;
  v4[536862731] = -234753535;
  v4[536862732] = -234753535;
  v4[536862733] = -234753535;
  v4[536862734] = -234753535;
  v4[536862735] = -234753535;
  v4[536862736] = -234753535;
  v4[536862737] = -234753535;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -218959118;
  v4[536862775] = -218959118;
  v4[536862777] = -218959118;
  v4[536862779] = -218959118;
  v4[536862781] = -218959118;
  v4[536862783] = -218959118;
  v4[536862785] = -218959118;
  v4[536862787] = -218959118;
  v4[536862789] = -218959118;
  v4[536862791] = -218959118;
  v4[536862793] = -218959118;
  v4[536862795] = -218959118;
  v4[536862797] = -218959118;
  v4[536862799] = -218959118;
  v4[536862801] = -218959118;
  v4[536862803] = -218959118;
  v4[536862805] = -218959118;
  v4[536862807] = -218959118;
  v4[536862809] = -218959118;
  v4[536862811] = -218959118;
  v4[536862813] = -218959118;
  v4[536862815] = -218959118;
  v4[536862817] = -218959118;
  v4[536862819] = -218959118;
  v4[536862821] = -218959118;
  v4[536862823] = -218959118;
  v4[536862825] = -218959118;
  v4[536862827] = -218959118;
  v4[536862829] = -218959118;
  v4[536862831] = -218959118;
  v4[536862833] = -218959118;
  v4[536862835] = -218959118;
  v4[536862837] = -218959118;
  v4[536862839] = -218959118;
  v4[536862841] = -218959118;
  v4[536862843] = -218959118;
  v4[536862845] = -218959118;
  v4[536862847] = -218959118;
  v4[536862849] = -218959118;
  v4[536862851] = -218959118;
  v4[536862853] = -218959118;
  v4[536862855] = -218959118;
  v4[536862857] = -218959118;
  v4[536862859] = -218959118;
  v4[536862861] = -218959118;
  v4[536862863] = -218959118;
  v4[536862865] = -218959118;
  v4[536862867] = -218959118;
  v4[536862869] = -218959118;
  v4[536862871] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 576),
    "pickType",
    (const std::allocator<char> *)(v2 + 48));
  pick_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 576));
  std::string::~string((void *)(v2 + 576));
  *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( !pick_type_ptr )
    goto LABEL_11;
  *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 640, 32LL);
  }
  Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 640), (Json::Value_0 *)pick_type_ptr);
  v5 = !data::enumStrToVal((const std::string *)(v2 + 640), &this->pick_type);
  std::string::~string((void *)(v2 + 640));
  *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 704, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 704),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      5041);
    common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
      (common::milog::MiLogStream *const)(v2 + 704),
      (const char (*)[30])"fromJson for: pickType fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
    v6 = 0;
  }
  else
  {
LABEL_11:
    *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 768),
      "isStatic",
      (const std::allocator<char> *)(v2 + 64));
    is_static_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
    std::string::~string((void *)(v2 + 768));
    *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( is_static_ptr && !fromJson<bool>(is_static_ptr, &this->is_static) )
    {
      *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 832, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 832),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        5053);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        (common::milog::MiLogStream *const)(v2 + 832),
        (const char (*)[30])"fromJson for: isStatic fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
      v6 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 896),
        "dropPointMaxYaw",
        (const std::allocator<char> *)(v2 + 80));
      drop_point_max_yaw_ptr = jsonValueFind(jval, (const std::string *)(v2 + 896));
      std::string::~string((void *)(v2 + 896));
      *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( drop_point_max_yaw_ptr && !fromJson<float>(drop_point_max_yaw_ptr, &this->drop_point_max_yaw) )
      {
        *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 960, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 960),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          5065);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          (common::milog::MiLogStream *const)(v2 + 960),
          (const char (*)[37])"fromJson for: dropPointMaxYaw fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
        v6 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 1024),
          "dropPointMinSpeed",
          (const std::allocator<char> *)(v2 + 96));
        drop_point_min_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1024));
        std::string::~string((void *)(v2 + 1024));
        *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( drop_point_min_speed_ptr && !fromJson<float>(drop_point_min_speed_ptr, &this->drop_point_min_speed) )
        {
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1088, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1088),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            5077);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            (common::milog::MiLogStream *const)(v2 + 1088),
            (const char (*)[39])"fromJson for: dropPointMinSpeed fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
          v6 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 1152),
            "dropPointMaxSpeed",
            (const std::allocator<char> *)(v2 + 112));
          drop_point_max_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1152));
          std::string::~string((void *)(v2 + 1152));
          *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( drop_point_max_speed_ptr && !fromJson<float>(drop_point_max_speed_ptr, &this->drop_point_max_speed) )
          {
            *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1216, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1216),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              5089);
            common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              (common::milog::MiLogStream *const)(v2 + 1216),
              (const char (*)[39])"fromJson for: dropPointMaxSpeed fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
            v6 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1280),
              "bornEffect",
              (const std::allocator<char> *)(v2 + 128));
            born_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1280));
            std::string::~string((void *)(v2 + 1280));
            *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( born_effect_ptr && !fromJson<std::string>(born_effect_ptr, &this->born_effect) )
            {
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1344, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1344),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                5101);
              common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                (common::milog::MiLogStream *const)(v2 + 1344),
                (const char (*)[32])"fromJson for: bornEffect fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
              v6 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1408),
                "dropEffect",
                (const std::allocator<char> *)(v2 + 144));
              drop_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1408));
              std::string::~string((void *)(v2 + 1408));
              *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( drop_effect_ptr && !fromJson<std::string>(drop_effect_ptr, &this->drop_effect) )
              {
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1472, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1472),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  5113);
                common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  (common::milog::MiLogStream *const)(v2 + 1472),
                  (const char (*)[32])"fromJson for: dropEffect fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
                v6 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1536),
                  "dropOffset",
                  (const std::allocator<char> *)(v2 + 160));
                drop_offset_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1536));
                std::string::~string((void *)(v2 + 1536));
                *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( drop_offset_ptr && !data::Vector::fromJson(&this->drop_offset, drop_offset_ptr) )
                {
                  *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1600) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1600, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1600),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    5125);
                  common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                    (common::milog::MiLogStream *const)(v2 + 1600),
                    (const char (*)[32])"fromJson for: dropOffset fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1600));
                  v6 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 176);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1664),
                    "enableScan",
                    (const std::allocator<char> *)(v2 + 176));
                  enable_scan_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1664));
                  std::string::~string((void *)(v2 + 1664));
                  *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 176);
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                  if ( enable_scan_ptr && !fromJson<bool>(enable_scan_ptr, &this->enable_scan) )
                  {
                    *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1728) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1759) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1759) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1728, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1728),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      5137);
                    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                      (common::milog::MiLogStream *const)(v2 + 1728),
                      (const char (*)[32])"fromJson for: enableScan fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1728));
                    v6 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 192);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1792),
                      "lockYmove",
                      (const std::allocator<char> *)(v2 + 192));
                    lock_ymove_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1792));
                    std::string::~string((void *)(v2 + 1792));
                    *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 192);
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                    if ( lock_ymove_ptr && !fromJson<bool>(lock_ymove_ptr, &this->lock_ymove) )
                    {
                      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1856) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1887) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1887) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1856, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1856),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        5149);
                      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                        (common::milog::MiLogStream *const)(v2 + 1856),
                        (const char (*)[31])"fromJson for: lockYmove fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1856));
                      v6 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 208);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1920),
                        "suspendHeight",
                        (const std::allocator<char> *)(v2 + 208));
                      suspend_height_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1920));
                      std::string::~string((void *)(v2 + 1920));
                      *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 208);
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                      if ( suspend_height_ptr && !fromJson<float>(suspend_height_ptr, &this->suspend_height) )
                      {
                        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1984) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1984, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1984),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          5161);
                        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                          (common::milog::MiLogStream *const)(v2 + 1984),
                          (const char (*)[35])"fromJson for: suspendHeight fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1984));
                        v6 = 0;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 224);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 2048),
                          "suspendSpeed",
                          (const std::allocator<char> *)(v2 + 224));
                        suspend_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2048));
                        std::string::~string((void *)(v2 + 2048));
                        *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 224);
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                        if ( suspend_speed_ptr && !fromJson<float>(suspend_speed_ptr, &this->suspend_speed) )
                        {
                          *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 2112) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 2112, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 2112),
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/json_data_auto/ConfigEntity.cpp",
                            "fromJson",
                            5173);
                          common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                            (common::milog::MiLogStream *const)(v2 + 2112),
                            (const char (*)[34])"fromJson for: suspendSpeed fails!");
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2112));
                          v6 = 0;
                        }
                        else
                        {
                          *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = 0;
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                          std::allocator<char>::allocator(v2 + 240);
                          std::string::basic_string<std::allocator<char>>(
                            (std::string *const)(v2 + 2176),
                            "suspendAmplitude",
                            (const std::allocator<char> *)(v2 + 240));
                          suspend_amplitude_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2176));
                          std::string::~string((void *)(v2 + 2176));
                          *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = -117901064;
                          std::allocator<char>::~allocator(v2 + 240);
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                          if ( suspend_amplitude_ptr
                            && !fromJson<float>(suspend_amplitude_ptr, &this->suspend_amplitude) )
                          {
                            *(_DWORD *)(((v2 + 2240) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v2 + 2240) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v2 + 2271) >> 3) + 0x7FFF8000) != 0
                              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2271) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v2 + 2240, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v2 + 2240),
                              &common::milog::MiLogDefault::default_log_obj_,
                              3u,
                              "./src/json_data_auto/ConfigEntity.cpp",
                              "fromJson",
                              5185);
                            common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                              (common::milog::MiLogStream *const)(v2 + 2240),
                              (const char (*)[38])"fromJson for: suspendAmplitude fails!");
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2240));
                            v6 = 0;
                          }
                          else
                          {
                            *(_DWORD *)(((v2 + 2304) >> 3) + 0x7FFF8000) = 0;
                            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
                            std::allocator<char>::allocator(v2 + 256);
                            std::string::basic_string<std::allocator<char>>(
                              (std::string *const)(v2 + 2304),
                              "rotateSpeed",
                              (const std::allocator<char> *)(v2 + 256));
                            rotate_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2304));
                            std::string::~string((void *)(v2 + 2304));
                            *(_DWORD *)(((v2 + 2304) >> 3) + 0x7FFF8000) = -117901064;
                            std::allocator<char>::~allocator(v2 + 256);
                            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                            if ( rotate_speed_ptr && !fromJson<float>(rotate_speed_ptr, &this->rotate_speed) )
                            {
                              *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v2 + 2368) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) != 0
                                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v2 + 2368, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v2 + 2368),
                                &common::milog::MiLogDefault::default_log_obj_,
                                3u,
                                "./src/json_data_auto/ConfigEntity.cpp",
                                "fromJson",
                                5197);
                              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                (common::milog::MiLogStream *const)(v2 + 2368),
                                (const char (*)[33])"fromJson for: rotateSpeed fails!");
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2368));
                              v6 = 0;
                            }
                            else
                            {
                              *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = 0;
                              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
                              std::allocator<char>::allocator(v2 + 272);
                              std::string::basic_string<std::allocator<char>>(
                                (std::string *const)(v2 + 2432),
                                "rotateVec",
                                (const std::allocator<char> *)(v2 + 272));
                              rotate_vec_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2432));
                              std::string::~string((void *)(v2 + 2432));
                              *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = -117901064;
                              std::allocator<char>::~allocator(v2 + 272);
                              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
                              if ( rotate_vec_ptr && !data::Vector::fromJson(&this->rotate_vec, rotate_vec_ptr) )
                              {
                                *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v2 + 2496) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v2 + 2496, 32LL);
                                }
                                common::milog::MiLogStream::create(
                                  (common::milog::MiLogStream *)(v2 + 2496),
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  3u,
                                  "./src/json_data_auto/ConfigEntity.cpp",
                                  "fromJson",
                                  5209);
                                common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                  (common::milog::MiLogStream *const)(v2 + 2496),
                                  (const char (*)[31])"fromJson for: rotateVec fails!");
                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2496));
                                v6 = 0;
                              }
                              else
                              {
                                *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = 0;
                                *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 1;
                                std::allocator<char>::allocator(v2 + 288);
                                std::string::basic_string<std::allocator<char>>(
                                  (std::string *const)(v2 + 2560),
                                  "attractDelayTime",
                                  (const std::allocator<char> *)(v2 + 288));
                                attract_delay_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2560));
                                std::string::~string((void *)(v2 + 2560));
                                *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = -117901064;
                                std::allocator<char>::~allocator(v2 + 288);
                                *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
                                if ( attract_delay_time_ptr
                                  && !fromJson<float>(attract_delay_time_ptr, &this->attract_delay_time) )
                                {
                                  *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = 0;
                                  if ( *(char *)(((v2 + 2624) >> 3) + 0x7FFF8000) < 0
                                    || *(_BYTE *)(((v2 + 2655) >> 3) + 0x7FFF8000) != 0
                                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2655) >> 3) + 0x7FFF8000) )
                                  {
                                    __asan_report_store_n(v2 + 2624, 32LL);
                                  }
                                  common::milog::MiLogStream::create(
                                    (common::milog::MiLogStream *)(v2 + 2624),
                                    &common::milog::MiLogDefault::default_log_obj_,
                                    3u,
                                    "./src/json_data_auto/ConfigEntity.cpp",
                                    "fromJson",
                                    5221);
                                  common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                                    (common::milog::MiLogStream *const)(v2 + 2624),
                                    (const char (*)[38])"fromJson for: attractDelayTime fails!");
                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2624));
                                  v6 = 0;
                                }
                                else
                                {
                                  *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = 0;
                                  *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 1;
                                  std::allocator<char>::allocator(v2 + 304);
                                  std::string::basic_string<std::allocator<char>>(
                                    (std::string *const)(v2 + 2688),
                                    "multi",
                                    (const std::allocator<char> *)(v2 + 304));
                                  multi_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2688));
                                  std::string::~string((void *)(v2 + 2688));
                                  *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = -117901064;
                                  std::allocator<char>::~allocator(v2 + 304);
                                  *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
                                  if ( multi_ptr && !data::ConfigPickupMulti::fromJson(&this->multi, multi_ptr) )
                                  {
                                    *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(char *)(((v2 + 2752) >> 3) + 0x7FFF8000) < 0
                                      || *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) != 0
                                      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) )
                                    {
                                      __asan_report_store_n(v2 + 2752, 32LL);
                                    }
                                    common::milog::MiLogStream::create(
                                      (common::milog::MiLogStream *)(v2 + 2752),
                                      &common::milog::MiLogDefault::default_log_obj_,
                                      3u,
                                      "./src/json_data_auto/ConfigEntity.cpp",
                                      "fromJson",
                                      5233);
                                    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                                      (common::milog::MiLogStream *const)(v2 + 2752),
                                      (const char (*)[27])"fromJson for: multi fails!");
                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2752));
                                    v6 = 0;
                                  }
                                  else
                                  {
                                    *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = 0;
                                    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 1;
                                    std::allocator<char>::allocator(v2 + 320);
                                    std::string::basic_string<std::allocator<char>>(
                                      (std::string *const)(v2 + 2816),
                                      "dirVec",
                                      (const std::allocator<char> *)(v2 + 320));
                                    dir_vec_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2816));
                                    std::string::~string((void *)(v2 + 2816));
                                    *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = -117901064;
                                    std::allocator<char>::~allocator(v2 + 320);
                                    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
                                    if ( dir_vec_ptr && !data::Vector::fromJson(&this->dir_vec, dir_vec_ptr) )
                                    {
                                      *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = 0;
                                      if ( *(char *)(((v2 + 2880) >> 3) + 0x7FFF8000) < 0
                                        || *(_BYTE *)(((v2 + 2911) >> 3) + 0x7FFF8000) != 0
                                        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2911) >> 3) + 0x7FFF8000) )
                                      {
                                        __asan_report_store_n(v2 + 2880, 32LL);
                                      }
                                      common::milog::MiLogStream::create(
                                        (common::milog::MiLogStream *)(v2 + 2880),
                                        &common::milog::MiLogDefault::default_log_obj_,
                                        3u,
                                        "./src/json_data_auto/ConfigEntity.cpp",
                                        "fromJson",
                                        5245);
                                      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                                        (common::milog::MiLogStream *const)(v2 + 2880),
                                        (const char (*)[28])"fromJson for: dirVec fails!");
                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2880));
                                      v6 = 0;
                                    }
                                    else
                                    {
                                      *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = 0;
                                      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 1;
                                      std::allocator<char>::allocator(v2 + 336);
                                      std::string::basic_string<std::allocator<char>>(
                                        (std::string *const)(v2 + 2944),
                                        "gravityRation",
                                        (const std::allocator<char> *)(v2 + 336));
                                      gravity_ration_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2944));
                                      std::string::~string((void *)(v2 + 2944));
                                      *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = -117901064;
                                      std::allocator<char>::~allocator(v2 + 336);
                                      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
                                      if ( gravity_ration_ptr
                                        && !fromJson<float>(gravity_ration_ptr, &this->gravity_ration) )
                                      {
                                        *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(char *)(((v2 + 3008) >> 3) + 0x7FFF8000) < 0
                                          || *(_BYTE *)(((v2 + 3039) >> 3) + 0x7FFF8000) != 0
                                          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 3039) >> 3) + 0x7FFF8000) )
                                        {
                                          __asan_report_store_n(v2 + 3008, 32LL);
                                        }
                                        common::milog::MiLogStream::create(
                                          (common::milog::MiLogStream *)(v2 + 3008),
                                          &common::milog::MiLogDefault::default_log_obj_,
                                          3u,
                                          "./src/json_data_auto/ConfigEntity.cpp",
                                          "fromJson",
                                          5257);
                                        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                                          (common::milog::MiLogStream *const)(v2 + 3008),
                                          (const char (*)[35])"fromJson for: gravityRation fails!");
                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3008));
                                        v6 = 0;
                                      }
                                      else
                                      {
                                        *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = 0;
                                        *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 1;
                                        std::allocator<char>::allocator(v2 + 352);
                                        std::string::basic_string<std::allocator<char>>(
                                          (std::string *const)(v2 + 3072),
                                          "disableInitJump",
                                          (const std::allocator<char> *)(v2 + 352));
                                        disable_init_jump_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3072));
                                        std::string::~string((void *)(v2 + 3072));
                                        *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = -117901064;
                                        std::allocator<char>::~allocator(v2 + 352);
                                        *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
                                        if ( disable_init_jump_ptr
                                          && !fromJson<bool>(disable_init_jump_ptr, &this->disable_init_jump) )
                                        {
                                          *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(char *)(((v2 + 3136) >> 3) + 0x7FFF8000) < 0
                                            || *(_BYTE *)(((v2 + 3167) >> 3) + 0x7FFF8000) != 0
                                            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 3167) >> 3) + 0x7FFF8000) )
                                          {
                                            __asan_report_store_n(v2 + 3136, 32LL);
                                          }
                                          common::milog::MiLogStream::create(
                                            (common::milog::MiLogStream *)(v2 + 3136),
                                            &common::milog::MiLogDefault::default_log_obj_,
                                            3u,
                                            "./src/json_data_auto/ConfigEntity.cpp",
                                            "fromJson",
                                            5269);
                                          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                                            (common::milog::MiLogStream *const)(v2 + 3136),
                                            (const char (*)[37])"fromJson for: disableInitJump fails!");
                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3136));
                                          v6 = 0;
                                        }
                                        else
                                        {
                                          *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = 0;
                                          *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = 1;
                                          std::allocator<char>::allocator(v2 + 368);
                                          std::string::basic_string<std::allocator<char>>(
                                            (std::string *const)(v2 + 3200),
                                            "initBackSpeed",
                                            (const std::allocator<char> *)(v2 + 368));
                                          init_back_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3200));
                                          std::string::~string((void *)(v2 + 3200));
                                          *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = -117901064;
                                          std::allocator<char>::~allocator(v2 + 368);
                                          *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
                                          if ( init_back_speed_ptr
                                            && !fromJson<float>(init_back_speed_ptr, &this->init_back_speed) )
                                          {
                                            *(_DWORD *)(((v2 + 3264) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(char *)(((v2 + 3264) >> 3) + 0x7FFF8000) < 0
                                              || *(_BYTE *)(((v2 + 3295) >> 3) + 0x7FFF8000) != 0
                                              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 3295) >> 3) + 0x7FFF8000) )
                                            {
                                              __asan_report_store_n(v2 + 3264, 32LL);
                                            }
                                            common::milog::MiLogStream::create(
                                              (common::milog::MiLogStream *)(v2 + 3264),
                                              &common::milog::MiLogDefault::default_log_obj_,
                                              3u,
                                              "./src/json_data_auto/ConfigEntity.cpp",
                                              "fromJson",
                                              5281);
                                            common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                                              (common::milog::MiLogStream *const)(v2 + 3264),
                                              (const char (*)[35])"fromJson for: initBackSpeed fails!");
                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3264));
                                            v6 = 0;
                                          }
                                          else
                                          {
                                            *(_DWORD *)(((v2 + 3328) >> 3) + 0x7FFF8000) = 0;
                                            *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 1;
                                            std::allocator<char>::allocator(v2 + 384);
                                            std::string::basic_string<std::allocator<char>>(
                                              (std::string *const)(v2 + 3328),
                                              "backDecelerate",
                                              (const std::allocator<char> *)(v2 + 384));
                                            back_decelerate_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3328));
                                            std::string::~string((void *)(v2 + 3328));
                                            *(_DWORD *)(((v2 + 3328) >> 3) + 0x7FFF8000) = -117901064;
                                            std::allocator<char>::~allocator(v2 + 384);
                                            *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
                                            if ( back_decelerate_ptr
                                              && !fromJson<float>(back_decelerate_ptr, &this->back_decelerate) )
                                            {
                                              *(_DWORD *)(((v2 + 3392) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(char *)(((v2 + 3392) >> 3) + 0x7FFF8000) < 0
                                                || *(_BYTE *)(((v2 + 3423) >> 3) + 0x7FFF8000) != 0
                                                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 3423) >> 3) + 0x7FFF8000) )
                                              {
                                                __asan_report_store_n(v2 + 3392, 32LL);
                                              }
                                              common::milog::MiLogStream::create(
                                                (common::milog::MiLogStream *)(v2 + 3392),
                                                &common::milog::MiLogDefault::default_log_obj_,
                                                3u,
                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                "fromJson",
                                                5293);
                                              common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                                (common::milog::MiLogStream *const)(v2 + 3392),
                                                (const char (*)[36])"fromJson for: backDecelerate fails!");
                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3392));
                                              v6 = 0;
                                            }
                                            else
                                            {
                                              *(_DWORD *)(((v2 + 3456) >> 3) + 0x7FFF8000) = 0;
                                              *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = 1;
                                              std::allocator<char>::allocator(v2 + 400);
                                              std::string::basic_string<std::allocator<char>>(
                                                (std::string *const)(v2 + 3456),
                                                "backFanAngle",
                                                (const std::allocator<char> *)(v2 + 400));
                                              back_fan_angle_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3456));
                                              std::string::~string((void *)(v2 + 3456));
                                              *(_DWORD *)(((v2 + 3456) >> 3) + 0x7FFF8000) = -117901064;
                                              std::allocator<char>::~allocator(v2 + 400);
                                              *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
                                              if ( back_fan_angle_ptr
                                                && !fromJson<float>(back_fan_angle_ptr, &this->back_fan_angle) )
                                              {
                                                *(_DWORD *)(((v2 + 3520) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(char *)(((v2 + 3520) >> 3) + 0x7FFF8000) < 0
                                                  || *(_BYTE *)(((v2 + 3551) >> 3) + 0x7FFF8000) != 0
                                                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 3551) >> 3)
                                                                                            + 0x7FFF8000) )
                                                {
                                                  __asan_report_store_n(v2 + 3520, 32LL);
                                                }
                                                common::milog::MiLogStream::create(
                                                  (common::milog::MiLogStream *)(v2 + 3520),
                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                  3u,
                                                  "./src/json_data_auto/ConfigEntity.cpp",
                                                  "fromJson",
                                                  5305);
                                                common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                  (common::milog::MiLogStream *const)(v2 + 3520),
                                                  (const char (*)[34])"fromJson for: backFanAngle fails!");
                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3520));
                                                v6 = 0;
                                              }
                                              else
                                              {
                                                *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = 0;
                                                *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 1;
                                                std::allocator<char>::allocator(v2 + 416);
                                                std::string::basic_string<std::allocator<char>>(
                                                  (std::string *const)(v2 + 3584),
                                                  "backFanStartAngle",
                                                  (const std::allocator<char> *)(v2 + 416));
                                                back_fan_start_angle_ptr = jsonValueFind(
                                                                             jval,
                                                                             (const std::string *)(v2 + 3584));
                                                std::string::~string((void *)(v2 + 3584));
                                                *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = -117901064;
                                                std::allocator<char>::~allocator(v2 + 416);
                                                *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
                                                if ( back_fan_start_angle_ptr
                                                  && !fromJson<float>(
                                                        back_fan_start_angle_ptr,
                                                        &this->back_fan_start_angle) )
                                                {
                                                  *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(char *)(((v2 + 3648) >> 3) + 0x7FFF8000) < 0
                                                    || *(_BYTE *)(((v2 + 3679) >> 3) + 0x7FFF8000) != 0
                                                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 3679) >> 3)
                                                                                         + 0x7FFF8000) )
                                                  {
                                                    __asan_report_store_n(v2 + 3648, 32LL);
                                                  }
                                                  common::milog::MiLogStream::create(
                                                    (common::milog::MiLogStream *)(v2 + 3648),
                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                    3u,
                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                    "fromJson",
                                                    5317);
                                                  common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                                                    (common::milog::MiLogStream *const)(v2 + 3648),
                                                    (const char (*)[39])"fromJson for: backFanStartAngle fails!");
                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3648));
                                                  v6 = 0;
                                                }
                                                else
                                                {
                                                  *(_DWORD *)(((v2 + 3712) >> 3) + 0x7FFF8000) = 0;
                                                  *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 1;
                                                  std::allocator<char>::allocator(v2 + 432);
                                                  std::string::basic_string<std::allocator<char>>(
                                                    (std::string *const)(v2 + 3712),
                                                    "reboundTimes",
                                                    (const std::allocator<char> *)(v2 + 432));
                                                  rebound_times_ptr = jsonValueFind(
                                                                        jval,
                                                                        (const std::string *)(v2 + 3712));
                                                  std::string::~string((void *)(v2 + 3712));
                                                  *(_DWORD *)(((v2 + 3712) >> 3) + 0x7FFF8000) = -117901064;
                                                  std::allocator<char>::~allocator(v2 + 432);
                                                  *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
                                                  if ( rebound_times_ptr
                                                    && !fromJson<int>(rebound_times_ptr, &this->rebound_times) )
                                                  {
                                                    *(_DWORD *)(((v2 + 3776) >> 3) + 0x7FFF8000) = 0;
                                                    if ( *(char *)(((v2 + 3776) >> 3) + 0x7FFF8000) < 0
                                                      || *(_BYTE *)(((v2 + 3807) >> 3) + 0x7FFF8000) != 0
                                                      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 3807) >> 3)
                                                                                                + 0x7FFF8000) )
                                                    {
                                                      __asan_report_store_n(v2 + 3776, 32LL);
                                                    }
                                                    common::milog::MiLogStream::create(
                                                      (common::milog::MiLogStream *)(v2 + 3776),
                                                      &common::milog::MiLogDefault::default_log_obj_,
                                                      3u,
                                                      "./src/json_data_auto/ConfigEntity.cpp",
                                                      "fromJson",
                                                      5329);
                                                    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                      (common::milog::MiLogStream *const)(v2 + 3776),
                                                      (const char (*)[34])"fromJson for: reboundTimes fails!");
                                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3776));
                                                    v6 = 0;
                                                  }
                                                  else
                                                  {
                                                    *(_DWORD *)(((v2 + 3840) >> 3) + 0x7FFF8000) = 0;
                                                    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 1;
                                                    std::allocator<char>::allocator(v2 + 448);
                                                    std::string::basic_string<std::allocator<char>>(
                                                      (std::string *const)(v2 + 3840),
                                                      "reboundRation",
                                                      (const std::allocator<char> *)(v2 + 448));
                                                    rebound_ration_ptr = jsonValueFind(
                                                                           jval,
                                                                           (const std::string *)(v2 + 3840));
                                                    std::string::~string((void *)(v2 + 3840));
                                                    *(_DWORD *)(((v2 + 3840) >> 3) + 0x7FFF8000) = -117901064;
                                                    std::allocator<char>::~allocator(v2 + 448);
                                                    *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
                                                    if ( rebound_ration_ptr
                                                      && !fromJson<float>(rebound_ration_ptr, &this->rebound_ration) )
                                                    {
                                                      *(_DWORD *)(((v2 + 3904) >> 3) + 0x7FFF8000) = 0;
                                                      if ( *(char *)(((v2 + 3904) >> 3) + 0x7FFF8000) < 0
                                                        || *(_BYTE *)(((v2 + 3935) >> 3) + 0x7FFF8000) != 0
                                                        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 3935) >> 3)
                                                                                             + 0x7FFF8000) )
                                                      {
                                                        __asan_report_store_n(v2 + 3904, 32LL);
                                                      }
                                                      common::milog::MiLogStream::create(
                                                        (common::milog::MiLogStream *)(v2 + 3904),
                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                        3u,
                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                        "fromJson",
                                                        5341);
                                                      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                                                        (common::milog::MiLogStream *const)(v2 + 3904),
                                                        (const char (*)[35])"fromJson for: reboundRation fails!");
                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3904));
                                                      v6 = 0;
                                                    }
                                                    else
                                                    {
                                                      *(_DWORD *)(((v2 + 3968) >> 3) + 0x7FFF8000) = 0;
                                                      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = 1;
                                                      std::allocator<char>::allocator(v2 + 464);
                                                      std::string::basic_string<std::allocator<char>>(
                                                        (std::string *const)(v2 + 3968),
                                                        "attractAccelerate",
                                                        (const std::allocator<char> *)(v2 + 464));
                                                      attract_accelerate_ptr = jsonValueFind(
                                                                                 jval,
                                                                                 (const std::string *)(v2 + 3968));
                                                      std::string::~string((void *)(v2 + 3968));
                                                      *(_DWORD *)(((v2 + 3968) >> 3) + 0x7FFF8000) = -117901064;
                                                      std::allocator<char>::~allocator(v2 + 464);
                                                      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
                                                      if ( attract_accelerate_ptr
                                                        && !fromJson<float>(
                                                              attract_accelerate_ptr,
                                                              &this->attract_accelerate) )
                                                      {
                                                        *(_DWORD *)(((v2 + 4032) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(char *)(((v2 + 4032) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 4063) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 4063) >> 3) + 0x7FFF8000) )
                                                        {
                                                          __asan_report_store_n(v2 + 4032, 32LL);
                                                        }
                                                        common::milog::MiLogStream::create(
                                                          (common::milog::MiLogStream *)(v2 + 4032),
                                                          &common::milog::MiLogDefault::default_log_obj_,
                                                          3u,
                                                          "./src/json_data_auto/ConfigEntity.cpp",
                                                          "fromJson",
                                                          5353);
                                                        common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                                                          (common::milog::MiLogStream *const)(v2 + 4032),
                                                          (const char (*)[39])"fromJson for: attractAccelerate fails!");
                                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4032));
                                                        v6 = 0;
                                                      }
                                                      else
                                                      {
                                                        *(_DWORD *)(((v2 + 4096) >> 3) + 0x7FFF8000) = 0;
                                                        *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 1;
                                                        std::allocator<char>::allocator(v2 + 480);
                                                        std::string::basic_string<std::allocator<char>>(
                                                          (std::string *const)(v2 + 4096),
                                                          "attractMaxDistance",
                                                          (const std::allocator<char> *)(v2 + 480));
                                                        attract_max_distance_ptr = jsonValueFind(
                                                                                     jval,
                                                                                     (const std::string *)(v2 + 4096));
                                                        std::string::~string((void *)(v2 + 4096));
                                                        *(_DWORD *)(((v2 + 4096) >> 3) + 0x7FFF8000) = -117901064;
                                                        std::allocator<char>::~allocator(v2 + 480);
                                                        *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
                                                        if ( attract_max_distance_ptr
                                                          && !fromJson<float>(
                                                                attract_max_distance_ptr,
                                                                &this->attract_max_distance) )
                                                        {
                                                          *(_DWORD *)(((v2 + 4160) >> 3) + 0x7FFF8000) = 0;
                                                          if ( *(char *)(((v2 + 4160) >> 3) + 0x7FFF8000) < 0
                                                            || *(_BYTE *)(((v2 + 4191) >> 3) + 0x7FFF8000) != 0
                                                            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 4191) >> 3)
                                                                                                 + 0x7FFF8000) )
                                                          {
                                                            __asan_report_store_n(v2 + 4160, 32LL);
                                                          }
                                                          common::milog::MiLogStream::create(
                                                            (common::milog::MiLogStream *)(v2 + 4160),
                                                            &common::milog::MiLogDefault::default_log_obj_,
                                                            3u,
                                                            "./src/json_data_auto/ConfigEntity.cpp",
                                                            "fromJson",
                                                            5365);
                                                          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                                                            (common::milog::MiLogStream *const)(v2 + 4160),
                                                            (const char (*)[40])"fromJson for: attractMaxDistance fails!");
                                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4160));
                                                          v6 = 0;
                                                        }
                                                        else
                                                        {
                                                          *(_DWORD *)(((v2 + 4224) >> 3) + 0x7FFF8000) = 0;
                                                          *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = 1;
                                                          std::allocator<char>::allocator(v2 + 496);
                                                          std::string::basic_string<std::allocator<char>>(
                                                            (std::string *const)(v2 + 4224),
                                                            "heightOffset",
                                                            (const std::allocator<char> *)(v2 + 496));
                                                          height_offset_ptr = jsonValueFind(
                                                                                jval,
                                                                                (const std::string *)(v2 + 4224));
                                                          std::string::~string((void *)(v2 + 4224));
                                                          *(_DWORD *)(((v2 + 4224) >> 3) + 0x7FFF8000) = -117901064;
                                                          std::allocator<char>::~allocator(v2 + 496);
                                                          *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
                                                          if ( height_offset_ptr
                                                            && !fromJson<float>(height_offset_ptr, &this->height_offset) )
                                                          {
                                                            *(_DWORD *)(((v2 + 4288) >> 3) + 0x7FFF8000) = 0;
                                                            if ( *(char *)(((v2 + 4288) >> 3) + 0x7FFF8000) < 0
                                                              || *(_BYTE *)(((v2 + 4319) >> 3) + 0x7FFF8000) != 0
                                                              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 4319) >> 3) + 0x7FFF8000) )
                                                            {
                                                              __asan_report_store_n(v2 + 4288, 32LL);
                                                            }
                                                            common::milog::MiLogStream::create(
                                                              (common::milog::MiLogStream *)(v2 + 4288),
                                                              &common::milog::MiLogDefault::default_log_obj_,
                                                              3u,
                                                              "./src/json_data_auto/ConfigEntity.cpp",
                                                              "fromJson",
                                                              5377);
                                                            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                              (common::milog::MiLogStream *const)(v2 + 4288),
                                                              (const char (*)[34])"fromJson for: heightOffset fails!");
                                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4288));
                                                            v6 = 0;
                                                          }
                                                          else
                                                          {
                                                            *(_DWORD *)(((v2 + 4352) >> 3) + 0x7FFF8000) = 0;
                                                            *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 1;
                                                            std::allocator<char>::allocator(v2 + 512);
                                                            std::string::basic_string<std::allocator<char>>(
                                                              (std::string *const)(v2 + 4352),
                                                              "rotateDecelerate",
                                                              (const std::allocator<char> *)(v2 + 512));
                                                            rotate_decelerate_ptr = jsonValueFind(
                                                                                      jval,
                                                                                      (const std::string *)(v2 + 4352));
                                                            std::string::~string((void *)(v2 + 4352));
                                                            *(_DWORD *)(((v2 + 4352) >> 3) + 0x7FFF8000) = -117901064;
                                                            std::allocator<char>::~allocator(v2 + 512);
                                                            *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
                                                            if ( rotate_decelerate_ptr
                                                              && !data::Vector::fromJson(
                                                                    &this->rotate_decelerate,
                                                                    rotate_decelerate_ptr) )
                                                            {
                                                              *(_DWORD *)(((v2 + 4416) >> 3) + 0x7FFF8000) = 0;
                                                              if ( *(char *)(((v2 + 4416) >> 3) + 0x7FFF8000) < 0
                                                                || *(_BYTE *)(((v2 + 4447) >> 3) + 0x7FFF8000) != 0
                                                                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 4447) >> 3) + 0x7FFF8000) )
                                                              {
                                                                __asan_report_store_n(v2 + 4416, 32LL);
                                                              }
                                                              common::milog::MiLogStream::create(
                                                                (common::milog::MiLogStream *)(v2 + 4416),
                                                                &common::milog::MiLogDefault::default_log_obj_,
                                                                3u,
                                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                                "fromJson",
                                                                5389);
                                                              common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                                                                (common::milog::MiLogStream *const)(v2 + 4416),
                                                                (const char (*)[38])"fromJson for: rotateDecelerate fails!");
                                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4416));
                                                              v6 = 0;
                                                            }
                                                            else
                                                            {
                                                              *(_DWORD *)(((v2 + 4480) >> 3) + 0x7FFF8000) = 0;
                                                              *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = 1;
                                                              std::allocator<char>::allocator(v2 + 528);
                                                              std::string::basic_string<std::allocator<char>>(
                                                                (std::string *const)(v2 + 4480),
                                                                "attractAudio",
                                                                (const std::allocator<char> *)(v2 + 528));
                                                              attract_audio_ptr = jsonValueFind(
                                                                                    jval,
                                                                                    (const std::string *)(v2 + 4480));
                                                              std::string::~string((void *)(v2 + 4480));
                                                              *(_DWORD *)(((v2 + 4480) >> 3) + 0x7FFF8000) = -117901064;
                                                              std::allocator<char>::~allocator(v2 + 528);
                                                              *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
                                                              if ( attract_audio_ptr
                                                                && !fromJson<std::string>(
                                                                      attract_audio_ptr,
                                                                      &this->attract_audio) )
                                                              {
                                                                *(_DWORD *)(((v2 + 4544) >> 3) + 0x7FFF8000) = 0;
                                                                if ( *(char *)(((v2 + 4544) >> 3) + 0x7FFF8000) < 0
                                                                  || *(_BYTE *)(((v2 + 4575) >> 3) + 0x7FFF8000) != 0
                                                                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 4575) >> 3) + 0x7FFF8000) )
                                                                {
                                                                  __asan_report_store_n(v2 + 4544, 32LL);
                                                                }
                                                                common::milog::MiLogStream::create(
                                                                  (common::milog::MiLogStream *)(v2 + 4544),
                                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                                  3u,
                                                                  "./src/json_data_auto/ConfigEntity.cpp",
                                                                  "fromJson",
                                                                  5401);
                                                                common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                                  (common::milog::MiLogStream *const)(v2 + 4544),
                                                                  (const char (*)[34])"fromJson for: attractAudio fails!");
                                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4544));
                                                                v6 = 0;
                                                              }
                                                              else
                                                              {
                                                                *(_DWORD *)(((v2 + 4608) >> 3) + 0x7FFF8000) = 0;
                                                                *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 1;
                                                                std::allocator<char>::allocator(v2 + 544);
                                                                std::string::basic_string<std::allocator<char>>(
                                                                  (std::string *const)(v2 + 4608),
                                                                  "isDummyPick",
                                                                  (const std::allocator<char> *)(v2 + 544));
                                                                is_dummy_pick_ptr = jsonValueFind(
                                                                                      jval,
                                                                                      (const std::string *)(v2 + 4608));
                                                                std::string::~string((void *)(v2 + 4608));
                                                                *(_DWORD *)(((v2 + 4608) >> 3) + 0x7FFF8000) = -117901064;
                                                                std::allocator<char>::~allocator(v2 + 544);
                                                                *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
                                                                if ( is_dummy_pick_ptr
                                                                  && !fromJson<bool>(
                                                                        is_dummy_pick_ptr,
                                                                        &this->is_dummy_pick) )
                                                                {
                                                                  *(_DWORD *)(((v2 + 4672) >> 3) + 0x7FFF8000) = 0;
                                                                  if ( *(char *)(((v2 + 4672) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 4703) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 4703) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    __asan_report_store_n(v2 + 4672, 32LL);
                                                                  }
                                                                  common::milog::MiLogStream::create(
                                                                    (common::milog::MiLogStream *)(v2 + 4672),
                                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                                    3u,
                                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                                    "fromJson",
                                                                    5413);
                                                                  common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                                                    (common::milog::MiLogStream *const)(v2 + 4672),
                                                                    (const char (*)[33])"fromJson for: isDummyPick fails!");
                                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4672));
                                                                  v6 = 0;
                                                                }
                                                                else
                                                                {
                                                                  *(_DWORD *)(((v2 + 4736) >> 3) + 0x7FFF8000) = 0;
                                                                  *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = 1;
                                                                  std::allocator<char>::allocator(v2 + 560);
                                                                  std::string::basic_string<std::allocator<char>>(
                                                                    (std::string *const)(v2 + 4736),
                                                                    "isPickDestroy",
                                                                    (const std::allocator<char> *)(v2 + 560));
                                                                  is_pick_destroy_ptr = jsonValueFind(
                                                                                          jval,
                                                                                          (const std::string *)(v2 + 4736));
                                                                  std::string::~string((void *)(v2 + 4736));
                                                                  *(_DWORD *)(((v2 + 4736) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::allocator<char>::~allocator(v2 + 560);
                                                                  *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
                                                                  if ( is_pick_destroy_ptr
                                                                    && !fromJson<bool>(
                                                                          is_pick_destroy_ptr,
                                                                          &this->is_pick_destroy) )
                                                                  {
                                                                    *(_DWORD *)(((v2 + 4800) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(char *)(((v2 + 4800) >> 3) + 0x7FFF8000) < 0
                                                                      || *(_BYTE *)(((v2 + 4831) >> 3) + 0x7FFF8000) != 0
                                                                      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 4831) >> 3) + 0x7FFF8000) )
                                                                    {
                                                                      __asan_report_store_n(v2 + 4800, 32LL);
                                                                    }
                                                                    common::milog::MiLogStream::create(
                                                                      (common::milog::MiLogStream *)(v2 + 4800),
                                                                      &common::milog::MiLogDefault::default_log_obj_,
                                                                      3u,
                                                                      "./src/json_data_auto/ConfigEntity.cpp",
                                                                      "fromJson",
                                                                      5425);
                                                                    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                                                                      (common::milog::MiLogStream *const)(v2 + 4800),
                                                                      (const char (*)[35])"fromJson for: isPickDestroy fails!");
                                                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4800));
                                                                    v6 = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    v7 = ((_BYTE)this + 50) & 7;
                                                                    v8 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3)
                                                                                   + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
                                                                    if ( (_BYTE)v8 )
                                                                      __asan_report_store1(
                                                                        &this->is_json_loaded,
                                                                        v7,
                                                                        v8);
                                                                    this->is_json_loaded = 1;
                                                                    v6 = 1;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v9 = v6;
  if ( v44 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8084) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF808C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8094) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF809C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80AC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80BC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80C4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80CC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80D4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80DC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80EC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80F4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80FC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8104) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF810C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8114) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF811C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8124) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF812C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8134) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF813C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8144) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF814C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8154) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF815C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8164) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF816C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8174) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF817C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8184) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF818C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8194) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF819C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81A4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81AC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81B4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81BC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81C4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81CC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81D4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81DC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81E4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81EC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81F4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81FC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8204) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF820C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8214) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF821C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8224) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF822C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8234) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF823C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8244) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF824C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8254) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF825C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_7(v2, 4864LL, v44);
  }
  return v9;
};

// Line 5433: range 000000000E6473B8-000000000E647D99
int32_t __cdecl data::ConfigPickup::getHashValue(const data::ConfigPickup *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t HashValue; // eax
  __int64 v8; // rsi
  __int64 v9; // rdx
  int32_t v10; // eax
  int32_t v11; // eax
  int32_t v12; // eax
  __int64 v13; // rsi
  __int64 v14; // rdx
  int32_t v15; // eax
  __int64 v16; // rsi
  __int64 v17; // rdx
  int32_t result; // eax
  char v19[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:5434";
  *(_QWORD *)(v2 + 16) = data::ConfigPickup::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->pick_type, (int32_t *)(v2 + 32));
  v5 = ((_BYTE)this + 4) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->is_static >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->is_static >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&this->is_static, v5, v6);
  common::tools::HashUtils::appendHash(this->is_static, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_point_max_yaw >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->drop_point_max_yaw >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->drop_point_max_yaw);
  }
  common::tools::HashUtils::appendHash(this->drop_point_max_yaw, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_point_min_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->drop_point_min_speed >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->drop_point_min_speed);
  }
  common::tools::HashUtils::appendHash(this->drop_point_min_speed, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_point_max_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->drop_point_max_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->drop_point_max_speed);
  }
  common::tools::HashUtils::appendHash(this->drop_point_max_speed, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->born_effect, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->drop_effect, (int32_t *)(v2 + 32));
  HashValue = data::Vector::getHashValue(&this->drop_offset);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->enable_scan >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->enable_scan, v2 + 32, &this->enable_scan);
  common::tools::HashUtils::appendHash(this->enable_scan, (int32_t *)(v2 + 32));
  v8 = ((_BYTE)this + 105) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->lock_ymove >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->lock_ymove >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&this->lock_ymove, v8, v9);
  common::tools::HashUtils::appendHash(this->lock_ymove, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->suspend_height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->suspend_height >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->suspend_height);
  }
  common::tools::HashUtils::appendHash(this->suspend_height, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->suspend_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suspend_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->suspend_speed);
  }
  common::tools::HashUtils::appendHash(this->suspend_speed, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->suspend_amplitude >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->suspend_amplitude >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->suspend_amplitude);
  }
  common::tools::HashUtils::appendHash(this->suspend_amplitude, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->rotate_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->rotate_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->rotate_speed);
  }
  common::tools::HashUtils::appendHash(this->rotate_speed, (int32_t *)(v2 + 32));
  v10 = data::Vector::getHashValue(&this->rotate_vec);
  common::tools::HashUtils::appendHash(v10, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->attract_delay_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attract_delay_time >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&this->attract_delay_time);
  }
  common::tools::HashUtils::appendHash(this->attract_delay_time, (int32_t *)(v2 + 32));
  v11 = data::ConfigPickupMulti::getHashValue(&this->multi);
  common::tools::HashUtils::appendHash(v11, (int32_t *)(v2 + 32));
  v12 = data::Vector::getHashValue(&this->dir_vec);
  common::tools::HashUtils::appendHash(v12, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->gravity_ration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->gravity_ration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->gravity_ration);
  }
  common::tools::HashUtils::appendHash(this->gravity_ration, (int32_t *)(v2 + 32));
  v13 = ((_BYTE)this - 44) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&this->disable_init_jump >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&this->disable_init_jump >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&this->disable_init_jump, v13, v14);
  common::tools::HashUtils::appendHash(this->disable_init_jump, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->init_back_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->init_back_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->init_back_speed);
  }
  common::tools::HashUtils::appendHash(this->init_back_speed, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->back_decelerate >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->back_decelerate >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->back_decelerate);
  }
  common::tools::HashUtils::appendHash(this->back_decelerate, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->back_fan_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->back_fan_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->back_fan_angle);
  }
  common::tools::HashUtils::appendHash(this->back_fan_angle, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->back_fan_start_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->back_fan_start_angle >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->back_fan_start_angle);
  }
  common::tools::HashUtils::appendHash(this->back_fan_start_angle, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->rebound_times >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->rebound_times >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->rebound_times);
  }
  common::tools::HashUtils::appendHash(this->rebound_times, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->rebound_ration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->rebound_ration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->rebound_ration);
  }
  common::tools::HashUtils::appendHash(this->rebound_ration, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->attract_accelerate >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attract_accelerate >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->attract_accelerate);
  }
  common::tools::HashUtils::appendHash(this->attract_accelerate, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->attract_max_distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attract_max_distance >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->attract_max_distance);
  }
  common::tools::HashUtils::appendHash(this->attract_max_distance, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->height_offset >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->height_offset >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->height_offset);
  }
  common::tools::HashUtils::appendHash(this->height_offset, (int32_t *)(v2 + 32));
  v15 = data::Vector::getHashValue(&this->rotate_decelerate);
  common::tools::HashUtils::appendHash(v15, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->attract_audio, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->is_dummy_pick >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->is_dummy_pick, v2 + 32, &this->is_dummy_pick);
  common::tools::HashUtils::appendHash(this->is_dummy_pick, (int32_t *)(v2 + 32));
  v16 = ((_BYTE)this + 49) & 7;
  v17 = (*(_BYTE *)(((unsigned __int64)&this->is_pick_destroy >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((unsigned __int64)&this->is_pick_destroy >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_load1(&this->is_pick_destroy, v16, v17);
  common::tools::HashUtils::appendHash(this->is_pick_destroy, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5473: range 000000000E647D9A-000000000E6480F4
bool __cdecl data::ConfigWindSeed::fromJson(data::ConfigWindSeed *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *athuority_radius_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigWindSeed::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "athuorityRadius",
    (const std::allocator<char> *)(v2 + 48));
  athuority_radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( athuority_radius_ptr && !fromJson<float>(athuority_radius_ptr, (float *)this) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      5483);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[37])"fromJson for: athuorityRadius fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    v6 = ((_BYTE)this + 4) & 7;
    v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
    if ( (_BYTE)v7 )
      __asan_report_store1(&this->is_json_loaded, v6, v7);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5491: range 000000000E6480F6-000000000E648261
int32_t __cdecl data::ConfigWindSeed::getHashValue(const data::ConfigWindSeed *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:5492";
  *(_QWORD *)(v2 + 16) = data::ConfigWindSeed::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->athuority_radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5499: range 000000000E648262-000000000E64A8C1
bool __cdecl data::ConfigCannon::fromJson(data::ConfigCannon *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool v8; // bl
  const Json::Value *close_operation_page_after_fire_ptr; // [rsp+18h] [rbp-938h]
  const Json::Value *close_page_delay_ptr; // [rsp+20h] [rbp-930h]
  const Json::Value *reminder_vanish_delay_ptr; // [rsp+28h] [rbp-928h]
  const Json::Value *fire_interval_ptr; // [rsp+30h] [rbp-920h]
  const Json::Value *turning_btn_press_block_time_ptr; // [rsp+38h] [rbp-918h]
  const Json::Value *reminder_text_map_ptr; // [rsp+40h] [rbp-910h]
  const Json::Value *turn_up_ability_name_ptr; // [rsp+48h] [rbp-908h]
  const Json::Value *turn_down_ability_name_ptr; // [rsp+50h] [rbp-900h]
  const Json::Value *turn_left_ability_name_ptr; // [rsp+58h] [rbp-8F8h]
  const Json::Value *turn_right_ability_name_ptr; // [rsp+60h] [rbp-8F0h]
  const Json::Value *fire_ability_name_ptr; // [rsp+68h] [rbp-8E8h]
  const Json::Value *release_occupy_ability_name_ptr; // [rsp+70h] [rbp-8E0h]
  const Json::Value *occupy_gvname_ptr; // [rsp+78h] [rbp-8D8h]
  const Json::Value *fire_btn_icon_ptr; // [rsp+80h] [rbp-8D0h]
  const Json::Value *btn_element_color_index_ptr; // [rsp+88h] [rbp-8C8h]
  char v25[2240]; // [rsp+90h] [rbp-8C0h] BYREF

  v2 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2208LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "45 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 32 9 <unknown> "
                        "352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 6"
                        "72 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 99"
                        "2 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unknown>"
                        " 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 32 9 <unknown> 1568 32 9 <unkn"
                        "own> 1632 32 9 <unknown> 1696 32 9 <unknown> 1760 32 9 <unknown> 1824 32 9 <unknown> 1888 32 9 <"
                        "unknown> 1952 32 9 <unknown> 2016 32 9 <unknown> 2080 32 9 <unknown> 2144 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCannon::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -218959118;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -218959118;
  v4[536862780] = -218959118;
  v4[536862782] = -218959118;
  v4[536862784] = -218959118;
  v4[536862786] = -218959118;
  v4[536862788] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 288),
    "closeOperationPageAfterFire",
    (const std::allocator<char> *)(v2 + 48));
  close_operation_page_after_fire_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
  std::string::~string((void *)(v2 + 288));
  *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( close_operation_page_after_fire_ptr
    && !fromJson<bool>(close_operation_page_after_fire_ptr, &this->close_operation_page_after_fire) )
  {
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 352, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 352),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      5509);
    common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
      (common::milog::MiLogStream *const)(v2 + 352),
      (const char (*)[49])"fromJson for: closeOperationPageAfterFire fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 416),
      "closePageDelay",
      (const std::allocator<char> *)(v2 + 64));
    close_page_delay_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
    std::string::~string((void *)(v2 + 416));
    *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( close_page_delay_ptr && !fromJson<float>(close_page_delay_ptr, &this->close_page_delay) )
    {
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 480, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 480),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        5521);
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        (common::milog::MiLogStream *const)(v2 + 480),
        (const char (*)[36])"fromJson for: closePageDelay fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 544),
        "reminderVanishDelay",
        (const std::allocator<char> *)(v2 + 80));
      reminder_vanish_delay_ptr = jsonValueFind(jval, (const std::string *)(v2 + 544));
      std::string::~string((void *)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( reminder_vanish_delay_ptr && !fromJson<float>(reminder_vanish_delay_ptr, &this->reminder_vanish_delay) )
      {
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          5533);
        common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
          (common::milog::MiLogStream *const)(v2 + 608),
          (const char (*)[41])"fromJson for: reminderVanishDelay fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 672),
          "fireInterval",
          (const std::allocator<char> *)(v2 + 96));
        fire_interval_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
        std::string::~string((void *)(v2 + 672));
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( fire_interval_ptr && !fromJson<float>(fire_interval_ptr, &this->fire_interval) )
        {
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 736, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 736),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            5545);
          common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            (common::milog::MiLogStream *const)(v2 + 736),
            (const char (*)[34])"fromJson for: fireInterval fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 800),
            "turningBtnPressBlockTime",
            (const std::allocator<char> *)(v2 + 112));
          turning_btn_press_block_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 800));
          std::string::~string((void *)(v2 + 800));
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( turning_btn_press_block_time_ptr
            && !fromJson<float>(turning_btn_press_block_time_ptr, &this->turning_btn_press_block_time) )
          {
            *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 864, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 864),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              5557);
            common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
              (common::milog::MiLogStream *const)(v2 + 864),
              (const char (*)[46])"fromJson for: turningBtnPressBlockTime fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 928),
              "reminderTextMap",
              (const std::allocator<char> *)(v2 + 128));
            reminder_text_map_ptr = jsonValueFind(jval, (const std::string *)(v2 + 928));
            std::string::~string((void *)(v2 + 928));
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( reminder_text_map_ptr && !fromJson<std::string>(reminder_text_map_ptr, &this->reminder_text_map) )
            {
              *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 992, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 992),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                5569);
              common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                (common::milog::MiLogStream *const)(v2 + 992),
                (const char (*)[37])"fromJson for: reminderTextMap fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1056),
                "TurnUpAbilityName",
                (const std::allocator<char> *)(v2 + 144));
              turn_up_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1056));
              std::string::~string((void *)(v2 + 1056));
              *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( turn_up_ability_name_ptr
                && !fromJson<std::string>(turn_up_ability_name_ptr, &this->turn_up_ability_name) )
              {
                *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1120, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1120),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  5581);
                common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                  (common::milog::MiLogStream *const)(v2 + 1120),
                  (const char (*)[39])"fromJson for: TurnUpAbilityName fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1184),
                  "TurnDownAbilityName",
                  (const std::allocator<char> *)(v2 + 160));
                turn_down_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1184));
                std::string::~string((void *)(v2 + 1184));
                *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( turn_down_ability_name_ptr
                  && !fromJson<std::string>(turn_down_ability_name_ptr, &this->turn_down_ability_name) )
                {
                  *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1248) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1248, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1248),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    5593);
                  common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    (common::milog::MiLogStream *const)(v2 + 1248),
                    (const char (*)[41])"fromJson for: TurnDownAbilityName fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1248));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 176);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1312),
                    "TurnLeftAbilityName",
                    (const std::allocator<char> *)(v2 + 176));
                  turn_left_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1312));
                  std::string::~string((void *)(v2 + 1312));
                  *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 176);
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                  if ( turn_left_ability_name_ptr
                    && !fromJson<std::string>(turn_left_ability_name_ptr, &this->turn_left_ability_name) )
                  {
                    *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1376) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1376, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1376),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      5605);
                    common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                      (common::milog::MiLogStream *const)(v2 + 1376),
                      (const char (*)[41])"fromJson for: TurnLeftAbilityName fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1376));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 192);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1440),
                      "TurnRightAbilityName",
                      (const std::allocator<char> *)(v2 + 192));
                    turn_right_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1440));
                    std::string::~string((void *)(v2 + 1440));
                    *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 192);
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                    if ( turn_right_ability_name_ptr
                      && !fromJson<std::string>(turn_right_ability_name_ptr, &this->turn_right_ability_name) )
                    {
                      *(_DWORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1504) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1504, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1504),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        5617);
                      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                        (common::milog::MiLogStream *const)(v2 + 1504),
                        (const char (*)[42])"fromJson for: TurnRightAbilityName fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1504));
                      v5 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 208);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1568),
                        "FireAbilityName",
                        (const std::allocator<char> *)(v2 + 208));
                      fire_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1568));
                      std::string::~string((void *)(v2 + 1568));
                      *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 208);
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                      if ( fire_ability_name_ptr
                        && !fromJson<std::string>(fire_ability_name_ptr, &this->fire_ability_name) )
                      {
                        *(_DWORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1632) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1632, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1632),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          5629);
                        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                          (common::milog::MiLogStream *const)(v2 + 1632),
                          (const char (*)[37])"fromJson for: FireAbilityName fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1632));
                        v5 = 0;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 224);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 1696),
                          "ReleaseOccupyAbilityName",
                          (const std::allocator<char> *)(v2 + 224));
                        release_occupy_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1696));
                        std::string::~string((void *)(v2 + 1696));
                        *(_DWORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 224);
                        *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                        if ( release_occupy_ability_name_ptr
                          && !fromJson<std::string>(release_occupy_ability_name_ptr, &this->release_occupy_ability_name) )
                        {
                          *(_DWORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 1760) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 1760, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 1760),
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/json_data_auto/ConfigEntity.cpp",
                            "fromJson",
                            5641);
                          common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                            (common::milog::MiLogStream *const)(v2 + 1760),
                            (const char (*)[46])"fromJson for: ReleaseOccupyAbilityName fails!");
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1760));
                          v5 = 0;
                        }
                        else
                        {
                          *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = 0;
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                          std::allocator<char>::allocator(v2 + 240);
                          std::string::basic_string<std::allocator<char>>(
                            (std::string *const)(v2 + 1824),
                            "OccupyGVName",
                            (const std::allocator<char> *)(v2 + 240));
                          occupy_gvname_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1824));
                          std::string::~string((void *)(v2 + 1824));
                          *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = -117901064;
                          std::allocator<char>::~allocator(v2 + 240);
                          *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                          if ( occupy_gvname_ptr && !fromJson<std::string>(occupy_gvname_ptr, &this->occupy_gvname) )
                          {
                            *(_DWORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v2 + 1888) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v2 + 1919) >> 3) + 0x7FFF8000) != 0
                              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1919) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v2 + 1888, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v2 + 1888),
                              &common::milog::MiLogDefault::default_log_obj_,
                              3u,
                              "./src/json_data_auto/ConfigEntity.cpp",
                              "fromJson",
                              5653);
                            common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                              (common::milog::MiLogStream *const)(v2 + 1888),
                              (const char (*)[34])"fromJson for: OccupyGVName fails!");
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1888));
                            v5 = 0;
                          }
                          else
                          {
                            *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = 0;
                            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
                            std::allocator<char>::allocator(v2 + 256);
                            std::string::basic_string<std::allocator<char>>(
                              (std::string *const)(v2 + 1952),
                              "fireBtnIcon",
                              (const std::allocator<char> *)(v2 + 256));
                            fire_btn_icon_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1952));
                            std::string::~string((void *)(v2 + 1952));
                            *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = -117901064;
                            std::allocator<char>::~allocator(v2 + 256);
                            *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                            if ( fire_btn_icon_ptr && !fromJson<std::string>(fire_btn_icon_ptr, &this->fire_btn_icon) )
                            {
                              *(_DWORD *)(((v2 + 2016) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v2 + 2016) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v2 + 2047) >> 3) + 0x7FFF8000) != 0
                                && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 2047) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v2 + 2016, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v2 + 2016),
                                &common::milog::MiLogDefault::default_log_obj_,
                                3u,
                                "./src/json_data_auto/ConfigEntity.cpp",
                                "fromJson",
                                5665);
                              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                (common::milog::MiLogStream *const)(v2 + 2016),
                                (const char (*)[33])"fromJson for: fireBtnIcon fails!");
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2016));
                              v5 = 0;
                            }
                            else
                            {
                              *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = 0;
                              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
                              std::allocator<char>::allocator(v2 + 272);
                              std::string::basic_string<std::allocator<char>>(
                                (std::string *const)(v2 + 2080),
                                "btnElementColorIndex",
                                (const std::allocator<char> *)(v2 + 272));
                              btn_element_color_index_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2080));
                              std::string::~string((void *)(v2 + 2080));
                              *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = -117901064;
                              std::allocator<char>::~allocator(v2 + 272);
                              *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
                              if ( btn_element_color_index_ptr
                                && !fromJson<int>(btn_element_color_index_ptr, &this->btn_element_color_index) )
                              {
                                *(_DWORD *)(((v2 + 2144) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v2 + 2144) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v2 + 2144, 32LL);
                                }
                                common::milog::MiLogStream::create(
                                  (common::milog::MiLogStream *)(v2 + 2144),
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  3u,
                                  "./src/json_data_auto/ConfigEntity.cpp",
                                  "fromJson",
                                  5677);
                                common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                  (common::milog::MiLogStream *const)(v2 + 2144),
                                  (const char (*)[42])"fromJson for: btnElementColorIndex fails!");
                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2144));
                                v5 = 0;
                              }
                              else
                              {
                                v6 = ((_BYTE)this + 60) & 7;
                                v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
                                if ( (_BYTE)v7 )
                                  __asan_report_store1(&this->is_json_loaded, v6, v7);
                                this->is_json_loaded = 1;
                                v5 = 1;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v8 = v5;
  if ( v25 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8088) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8090) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8098) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80C8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80D8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80E0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80F8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8100) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8108) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8110) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2208LL, v25);
  }
  return v8;
};

// Line 5685: range 000000000E64A8C2-000000000E64AC88
int32_t __cdecl data::ConfigCannon::getHashValue(const data::ConfigCannon *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:5686";
  *(_QWORD *)(v2 + 16) = data::ConfigCannon::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(char *)(((unsigned __int64)this >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(this, v1, this);
  common::tools::HashUtils::appendHash(this->close_operation_page_after_fire, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->close_page_delay >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->close_page_delay >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->close_page_delay);
  }
  common::tools::HashUtils::appendHash(this->close_page_delay, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->reminder_vanish_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->reminder_vanish_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->reminder_vanish_delay);
  }
  common::tools::HashUtils::appendHash(this->reminder_vanish_delay, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->fire_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->fire_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->fire_interval);
  }
  common::tools::HashUtils::appendHash(this->fire_interval, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->turning_btn_press_block_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->turning_btn_press_block_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->turning_btn_press_block_time);
  }
  common::tools::HashUtils::appendHash(this->turning_btn_press_block_time, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->reminder_text_map, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->turn_up_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->turn_down_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->turn_left_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->turn_right_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->fire_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->release_occupy_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->occupy_gvname, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->fire_btn_icon, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->btn_element_color_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->btn_element_color_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->btn_element_color_index);
  }
  common::tools::HashUtils::appendHash(this->btn_element_color_index, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5706: range 000000000E64AC89-000000000E64AF06
const char *__cdecl data::enumValToStr(data::ConfigGadgetConsoleOperationType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e == z )
  {
    result = "z";
  }
  else
  {
    if ( e > z )
      goto LABEL_22;
    if ( e == x )
    {
      result = "x";
      goto LABEL_17;
    }
    if ( e == y )
    {
      result = "y";
    }
    else
    {
LABEL_22:
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        5716);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
LABEL_17:
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5722: range 000000000E64AF07-000000000E64B7E8
bool __cdecl data::enumStrToVal(const std::string *s, data::ConfigGadgetConsoleOperationType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::ConfigGadgetConsoleOperationType> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::ConfigGadgetConsoleOperationType> >::pointer v11; // rax
  data::ConfigGadgetConsoleOperationType second; // ecx
  char v13; // dl
  data::ConfigGadgetConsoleOperationType *ea; // [rsp+10h] [rbp-220h]
  char v15[528]; // [rsp+20h] [rbp-210h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 8 7"
                        " it:5734 160 8 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 120 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      5725);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::ConfigGadgetConsoleOperationType>::pair<char const(&)[2],data::ConfigGadgetConsoleOperationType,true>(
        (std::pair<const std::string,data::ConfigGadgetConsoleOperationType> *const)(v2 + 320),
        (const char (*)[2])"x",
        (data::ConfigGadgetConsoleOperationType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "x");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::ConfigGadgetConsoleOperationType>::pair<char const(&)[2],data::ConfigGadgetConsoleOperationType,true>(
        (std::pair<const std::string,data::ConfigGadgetConsoleOperationType> *const)(v2 + 360),
        (const char (*)[2])"y",
        (data::ConfigGadgetConsoleOperationType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "y");
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::ConfigGadgetConsoleOperationType>::pair<char const(&)[2],data::ConfigGadgetConsoleOperationType,true>(
        (std::pair<const std::string,data::ConfigGadgetConsoleOperationType> *const)(v2 + 400),
        (const char (*)[2])"z",
        (data::ConfigGadgetConsoleOperationType *)(v2 + 112));
      std::allocator<std::pair<std::string const,data::ConfigGadgetConsoleOperationType>>::allocator((std::allocator<std::pair<const std::string,data::ConfigGadgetConsoleOperationType> > *const)(v2 + 64));
      std::map<std::string,data::ConfigGadgetConsoleOperationType>::map(
        &data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m,
        (std::initializer_list<std::pair<const std::string,data::ConfigGadgetConsoleOperationType> >)__PAIR128__(3LL, v2 + 320),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::ConfigGadgetConsoleOperationType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m);
      e = (data::ConfigGadgetConsoleOperationType *)&data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::ConfigGadgetConsoleOperationType>::~map,
        &data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ConfigGadgetConsoleOperationType>>::~allocator((std::allocator<std::pair<const std::string,data::ConfigGadgetConsoleOperationType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ConfigGadgetConsoleOperationType> *)(v2 + 440);
            i != (std::pair<const std::string,data::ConfigGadgetConsoleOperationType> *)(v2 + 320);
            std::pair<std::string const,data::ConfigGadgetConsoleOperationType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 320) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_WORD *)(v7 + 12) = -1800;
      *(_BYTE *)(v7 + 14) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, e);
    *(std::map<std::string,data::ConfigGadgetConsoleOperationType>::iterator *)(v2 + 128) = std::map<std::string,data::ConfigGadgetConsoleOperationType>::find(
                                                                                              &data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m,
                                                                                              s);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, s);
    *(std::map<std::string,data::ConfigGadgetConsoleOperationType>::iterator *)(v2 + 160) = std::map<std::string,data::ConfigGadgetConsoleOperationType>::end(&data::enumStrToVal(std::string const&,data::ConfigGadgetConsoleOperationType &)::m);
    v8 = (char *)(v2 + 160);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ConfigGadgetConsoleOperationType> >::_Self *)(v2 + 128),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ConfigGadgetConsoleOperationType> >::_Self *)(v2 + 160));
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        5737);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 256),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::ConfigGadgetConsoleOperationType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::ConfigGadgetConsoleOperationType> > *const)(v2 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 5745: range 000000000E64B7E9-000000000E64B82D
const char *__cdecl data::getDescription(data::ConfigGadgetConsoleOperationType e)
{
  if ( e == z )
    return "z";
  if ( e > z )
    return "unknown enum value!";
  if ( e == x )
    return "x";
  if ( e == y )
    return "y";
  else
    return "unknown enum value!";
};

// Line 5761: range 000000000E64B82E-000000000E64C963
bool __cdecl data::ConfigGadgetConsoleOperation::fromJson(
        data::ConfigGadgetConsoleOperation *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool v6; // r14
  float *p_disable_value; // rsi
  const Json::Value *operation_name_ptr; // [rsp+10h] [rbp-420h]
  const Json::Value *trans_name_ptr; // [rsp+18h] [rbp-418h]
  Json::Value *move_type_ptr; // [rsp+20h] [rbp-410h]
  const Json::Value *move_speed_ptr; // [rsp+28h] [rbp-408h]
  const Json::Value *has_disable_value_ptr; // [rsp+30h] [rbp-400h]
  const Json::Value *disable_value_ptr; // [rsp+38h] [rbp-3F8h]
  char v15[1008]; // [rsp+40h] [rbp-3F0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(960LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <"
                        "unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <u"
                        "nknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsoleOperation::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "operationName",
    (const std::allocator<char> *)(v2 + 32));
  operation_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( operation_name_ptr && !fromJson<std::string>(operation_name_ptr, &this->operation_name) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      5771);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[35])"fromJson for: operationName fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "transName",
      (const std::allocator<char> *)(v2 + 48));
    trans_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( trans_name_ptr && !fromJson<std::string>(trans_name_ptr, &this->trans_name) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        5783);
      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[31])"fromJson for: transName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "moveType",
        (const std::allocator<char> *)(v2 + 64));
      move_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( !move_type_ptr )
        goto LABEL_21;
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 448), (Json::Value_0 *)move_type_ptr);
      v6 = !data::enumStrToVal((const std::string *)(v2 + 448), &this->move_type);
      std::string::~string((void *)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      if ( v6 )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          5795);
        common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
          (common::milog::MiLogStream *const)(v2 + 512),
          (const char (*)[30])"fromJson for: moveType fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        result = 0;
      }
      else
      {
LABEL_21:
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 576),
          "moveSpeed",
          (const std::allocator<char> *)(v2 + 80));
        move_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 576));
        std::string::~string((void *)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( move_speed_ptr && !fromJson<float>(move_speed_ptr, &this->move_speed) )
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            5807);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 640),
            (const char (*)[31])"fromJson for: moveSpeed fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 704),
            "hasDisableValue",
            (const std::allocator<char> *)(v2 + 96));
          has_disable_value_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
          std::string::~string((void *)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( has_disable_value_ptr && !fromJson<bool>(has_disable_value_ptr, &this->has_disable_value) )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              5819);
            common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
              (common::milog::MiLogStream *const)(v2 + 768),
              (const char (*)[37])"fromJson for: hasDisableValue fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            result = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 832),
              "disableValue",
              (const std::allocator<char> *)(v2 + 112));
            p_disable_value = (float *)(v2 + 832);
            disable_value_ptr = jsonValueFind(jval, (const std::string *)(v2 + 832));
            std::string::~string((void *)(v2 + 832));
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( disable_value_ptr
              && (p_disable_value = &this->disable_value, !fromJson<float>(disable_value_ptr, &this->disable_value)) )
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                5831);
              common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[34])"fromJson for: disableValue fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
              result = 0;
            }
            else
            {
              if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                __asan_report_store1(&this->is_json_loaded, p_disable_value, &this->is_json_loaded);
              this->is_json_loaded = 1;
              result = 1;
            }
          }
        }
      }
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5839: range 000000000E64C964-000000000E64CBE2
int32_t __cdecl data::ConfigGadgetConsoleOperation::getHashValue(const data::ConfigGadgetConsoleOperation *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:5840";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsoleOperation::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->operation_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->trans_name, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->move_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->move_type);
  }
  common::tools::HashUtils::appendHash(this->move_type, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->move_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->move_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->move_speed);
  }
  common::tools::HashUtils::appendHash(this->move_speed, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->has_disable_value >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->has_disable_value, (((_BYTE)this + 68) & 7u) + 3, &this->has_disable_value);
  common::tools::HashUtils::appendHash(this->has_disable_value, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->disable_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->disable_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->disable_value);
  }
  common::tools::HashUtils::appendHash(this->disable_value, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5851: range 000000000E64CBE3-000000000E64CFB0
bool __cdecl data::arrFromJson(const Json::Value *jval, data::ConfigGadgetConsoleOperationArray *v)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // edx
  unsigned __int64 v6; // rax
  int v7; // r14d
  data::ConfigGadgetConsoleOperation *v8; // rdx
  unsigned __int64 v9; // rax
  bool result; // al
  int v11; // [rsp+0h] [rbp-140h]
  char v12; // [rsp+8h] [rbp-138h]
  bool v13; // [rsp+Fh] [rbp-131h]
  uint32_t i; // [rsp+24h] [rbp-11Ch]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-118h]
  char v16[272]; // [rsp+30h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 32 9 <unknown> 96 88 9 elem:5857";
  *(_QWORD *)(v2 + 16) = data::arrFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v11, v12);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      v6 = ((v2 + 96) >> 3) + 2147450880;
      *(_DWORD *)v6 = 0;
      *(_DWORD *)(v6 + 4) = 0;
      *(_WORD *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 10) = 0;
      data::ConfigGadgetConsoleOperation::ConfigGadgetConsoleOperation((data::ConfigGadgetConsoleOperation *const)(v2 + 96));
      if ( !data::ConfigGadgetConsoleOperation::fromJson(
              (data::ConfigGadgetConsoleOperation *const)(v2 + 96),
              elem_jval) )
      {
        *(_DWORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 32, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 32),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "arrFromJson",
          5860);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 32),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
        *(_DWORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = -117901064;
        v13 = 0;
        v7 = 0;
      }
      else
      {
        v8 = std::move<data::ConfigGadgetConsoleOperation &>((data::ConfigGadgetConsoleOperation *)(v2 + 96));
        std::vector<data::ConfigGadgetConsoleOperation>::emplace_back<data::ConfigGadgetConsoleOperation>(v, v8, v8);
        v7 = 1;
      }
      data::ConfigGadgetConsoleOperation::~ConfigGadgetConsoleOperation((data::ConfigGadgetConsoleOperation *const)(v2 + 96));
      if ( v7 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    v9 = ((v2 + 96) >> 3) + 2147450880;
    *(_DWORD *)v9 = -117901064;
    *(_DWORD *)(v9 + 4) = -117901064;
    *(_WORD *)(v9 + 8) = -1800;
    *(_BYTE *)(v9 + 10) = -8;
    if ( v5 && v5 != 2 )
      goto LABEL_20;
  }
  v13 = 1;
LABEL_20:
  result = v13;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5870: range 000000000E64CFB1-000000000E64D1FD
int32_t __cdecl data::getArrHashValue(const data::ConfigGadgetConsoleOperationArray *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleOperation*,std::vector<data::ConfigGadgetConsoleOperation> >::reference elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:5871 64 8 16 __for_begin:5872 96 8 14 __for_end:5872";
  *(_QWORD *)(v2 + 16) = data::getArrHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::ConfigGadgetConsoleOperation>::const_iterator *)(v2 + 64) = std::vector<data::ConfigGadgetConsoleOperation>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::ConfigGadgetConsoleOperation>::const_iterator *)(v2 + 96) = std::vector<data::ConfigGadgetConsoleOperation>::end(vec);
  while ( __gnu_cxx::operator!=<data::ConfigGadgetConsoleOperation const*,std::vector<data::ConfigGadgetConsoleOperation>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleOperation*,std::vector<data::ConfigGadgetConsoleOperation> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleOperation*,std::vector<data::ConfigGadgetConsoleOperation> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<data::ConfigGadgetConsoleOperation const*,std::vector<data::ConfigGadgetConsoleOperation>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleOperation*,std::vector<data::ConfigGadgetConsoleOperation> > *const)(v2 + 64));
    HashValue = data::ConfigGadgetConsoleOperation::getHashValue(elem);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::ConfigGadgetConsoleOperation const*,std::vector<data::ConfigGadgetConsoleOperation>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleOperation*,std::vector<data::ConfigGadgetConsoleOperation> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5881: range 000000000E64D1FE-000000000E64E338
bool __cdecl data::ConfigGadgetConsoleLimitation::fromJson(
        data::ConfigGadgetConsoleLimitation *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool v6; // r14
  __int64 v7; // rsi
  __int64 v8; // rdx
  const Json::Value *trans_name_ptr; // [rsp+10h] [rbp-420h]
  Json::Value *move_type_ptr; // [rsp+18h] [rbp-418h]
  const Json::Value *has_min_ptr; // [rsp+20h] [rbp-410h]
  const Json::Value *min_ptr; // [rsp+28h] [rbp-408h]
  const Json::Value *has_max_ptr; // [rsp+30h] [rbp-400h]
  const Json::Value *max_ptr; // [rsp+38h] [rbp-3F8h]
  char v15[1008]; // [rsp+40h] [rbp-3F0h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(960LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <"
                        "unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <u"
                        "nknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsoleLimitation::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "transName",
    (const std::allocator<char> *)(v2 + 32));
  trans_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( trans_name_ptr && !fromJson<std::string>(trans_name_ptr, &this->trans_name) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      5891);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[31])"fromJson for: transName fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "moveType",
      (const std::allocator<char> *)(v2 + 48));
    move_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( !move_type_ptr )
      goto LABEL_16;
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 320, 32LL);
    }
    Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 320), (Json::Value_0 *)move_type_ptr);
    v6 = !data::enumStrToVal((const std::string *)(v2 + 320), &this->move_type);
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    if ( v6 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        5903);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        (common::milog::MiLogStream *const)(v2 + 384),
        (const char (*)[30])"fromJson for: moveType fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      result = 0;
    }
    else
    {
LABEL_16:
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 448),
        "hasMin",
        (const std::allocator<char> *)(v2 + 64));
      has_min_ptr = jsonValueFind(jval, (const std::string *)(v2 + 448));
      std::string::~string((void *)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( has_min_ptr && !fromJson<bool>(has_min_ptr, &this->has_min) )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          5915);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          (common::milog::MiLogStream *const)(v2 + 512),
          (const char (*)[28])"fromJson for: hasMin fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 576),
          off_1A3C13A0,
          (const std::allocator<char> *)(v2 + 80));
        min_ptr = jsonValueFind(jval, (const std::string *)(v2 + 576));
        std::string::~string((void *)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( min_ptr && !fromJson<float>(min_ptr, &this->min) )
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            5927);
          common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
            (common::milog::MiLogStream *const)(v2 + 640),
            (const char (*)[25])"fromJson for: min fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 704),
            "hasMax",
            (const std::allocator<char> *)(v2 + 96));
          has_max_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
          std::string::~string((void *)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( has_max_ptr && !fromJson<bool>(has_max_ptr, &this->has_max) )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              5939);
            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              (common::milog::MiLogStream *const)(v2 + 768),
              (const char (*)[28])"fromJson for: hasMax fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            result = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 832),
              off_1A3C14A0,
              (const std::allocator<char> *)(v2 + 112));
            max_ptr = jsonValueFind(jval, (const std::string *)(v2 + 832));
            std::string::~string((void *)(v2 + 832));
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( max_ptr && !fromJson<float>(max_ptr, &this->max) )
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                5951);
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[25])"fromJson for: max fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
              result = 0;
            }
            else
            {
              v7 = ((_BYTE)this + 52) & 7;
              v8 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
              if ( (_BYTE)v8 )
                __asan_report_store1(&this->is_json_loaded, v7, v8);
              this->is_json_loaded = 1;
              result = 1;
            }
          }
        }
      }
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5959: range 000000000E64E33A-000000000E64E5E7
int32_t __cdecl data::ConfigGadgetConsoleLimitation::getHashValue(
        const data::ConfigGadgetConsoleLimitation *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t result; // eax
  char v10[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:5960";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsoleLimitation::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->trans_name, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->move_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->move_type);
  }
  common::tools::HashUtils::appendHash(this->move_type, (int32_t *)(v2 + 32));
  v5 = ((_BYTE)this + 36) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->has_min >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->has_min >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&this->has_min, v5, v6);
  common::tools::HashUtils::appendHash(this->has_min, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->min);
  }
  common::tools::HashUtils::appendHash(this->min, (int32_t *)(v2 + 32));
  v7 = ((_BYTE)this + 44) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->has_max >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->has_max >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->has_max, v7, v8);
  common::tools::HashUtils::appendHash(this->has_max, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->max >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->max);
  }
  common::tools::HashUtils::appendHash(this->max, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5971: range 000000000E64E5E8-000000000E64E988
bool __cdecl data::arrFromJson(const Json::Value *jval, data::ConfigGadgetConsoleLimitationArray *v)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int v5; // edx
  unsigned __int64 v6; // rax
  int v7; // r14d
  data::ConfigGadgetConsoleLimitation *v8; // rdx
  unsigned __int64 v9; // rax
  bool result; // al
  int v11; // [rsp+0h] [rbp-120h]
  char v12; // [rsp+8h] [rbp-118h]
  bool v13; // [rsp+Fh] [rbp-111h]
  uint32_t i; // [rsp+24h] [rbp-FCh]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-F8h]
  char v16[240]; // [rsp+30h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 32 9 <unknown> 96 56 9 elem:5977";
  *(_QWORD *)(v2 + 16) = data::arrFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218103808;
  v4[536862725] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v11, v12);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      v6 = ((v2 + 96) >> 3) + 2147450880;
      *(_DWORD *)v6 = 0;
      *(_WORD *)(v6 + 4) = 0;
      *(_BYTE *)(v6 + 6) = 0;
      data::ConfigGadgetConsoleLimitation::ConfigGadgetConsoleLimitation((data::ConfigGadgetConsoleLimitation *const)(v2 + 96));
      if ( !data::ConfigGadgetConsoleLimitation::fromJson(
              (data::ConfigGadgetConsoleLimitation *const)(v2 + 96),
              elem_jval) )
      {
        *(_DWORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 127) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 32, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 32),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "arrFromJson",
          5980);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 32),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
        *(_DWORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = -117901064;
        v13 = 0;
        v7 = 0;
      }
      else
      {
        v8 = std::move<data::ConfigGadgetConsoleLimitation &>((data::ConfigGadgetConsoleLimitation *)(v2 + 96));
        std::vector<data::ConfigGadgetConsoleLimitation>::emplace_back<data::ConfigGadgetConsoleLimitation>(v, v8, v8);
        v7 = 1;
      }
      data::ConfigGadgetConsoleLimitation::~ConfigGadgetConsoleLimitation((data::ConfigGadgetConsoleLimitation *const)(v2 + 96));
      if ( v7 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    v9 = ((v2 + 96) >> 3) + 2147450880;
    *(_DWORD *)v9 = -117901064;
    *(_WORD *)(v9 + 4) = -1800;
    *(_BYTE *)(v9 + 6) = -8;
    if ( v5 && v5 != 2 )
      goto LABEL_20;
  }
  v13 = 1;
LABEL_20:
  result = v13;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5990: range 000000000E64E989-000000000E64EBD5
int32_t __cdecl data::getArrHashValue(const data::ConfigGadgetConsoleLimitationArray *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleLimitation*,std::vector<data::ConfigGadgetConsoleLimitation> >::reference elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:5991 64 8 16 __for_begin:5992 96 8 14 __for_end:5992";
  *(_QWORD *)(v2 + 16) = data::getArrHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::ConfigGadgetConsoleLimitation>::const_iterator *)(v2 + 64) = std::vector<data::ConfigGadgetConsoleLimitation>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::ConfigGadgetConsoleLimitation>::const_iterator *)(v2 + 96) = std::vector<data::ConfigGadgetConsoleLimitation>::end(vec);
  while ( __gnu_cxx::operator!=<data::ConfigGadgetConsoleLimitation const*,std::vector<data::ConfigGadgetConsoleLimitation>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleLimitation*,std::vector<data::ConfigGadgetConsoleLimitation> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleLimitation*,std::vector<data::ConfigGadgetConsoleLimitation> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<data::ConfigGadgetConsoleLimitation const*,std::vector<data::ConfigGadgetConsoleLimitation>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleLimitation*,std::vector<data::ConfigGadgetConsoleLimitation> > *const)(v2 + 64));
    HashValue = data::ConfigGadgetConsoleLimitation::getHashValue(elem);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::ConfigGadgetConsoleLimitation const*,std::vector<data::ConfigGadgetConsoleLimitation>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGadgetConsoleLimitation*,std::vector<data::ConfigGadgetConsoleLimitation> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6001: range 000000000E64EBD6-000000000E64F1B9
bool __cdecl data::ConfigGadgetConsolePosition::fromJson(
        data::ConfigGadgetConsolePosition *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  const Json::Value *v6; // rsi
  const Json::Value *trans_name_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *rotation_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsolePosition::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "transName",
    (const std::allocator<char> *)(v2 + 32));
  trans_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( trans_name_ptr && !fromJson<std::string>(trans_name_ptr, &this->trans_name) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6011);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[31])"fromJson for: transName fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "rotation",
      (const std::allocator<char> *)(v2 + 48));
    v6 = (const Json::Value *)(v2 + 192);
    rotation_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( rotation_ptr && (v6 = rotation_ptr, !data::Vector::fromJson(&this->rotation, rotation_ptr)) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6023);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[30])"fromJson for: rotation fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, v6, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6031: range 000000000E64F1BA-000000000E64F30C
int32_t __cdecl data::ConfigGadgetConsolePosition::getHashValue(const data::ConfigGadgetConsolePosition *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6032";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsolePosition::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->trans_name, (int32_t *)(v2 + 32));
  HashValue = data::Vector::getHashValue(&this->rotation);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6039: range 000000000E64F30D-000000000E64F6AD
bool __cdecl data::arrFromJson(const Json::Value *jval, data::ConfigGadgetConsolePositionArray *v)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int v5; // edx
  unsigned __int64 v6; // rax
  int v7; // r14d
  data::ConfigGadgetConsolePosition *v8; // rdx
  unsigned __int64 v9; // rax
  bool result; // al
  int v11; // [rsp+0h] [rbp-120h]
  char v12; // [rsp+8h] [rbp-118h]
  bool v13; // [rsp+Fh] [rbp-111h]
  uint32_t i; // [rsp+24h] [rbp-FCh]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-F8h]
  char v16[240]; // [rsp+30h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 32 9 <unknown> 96 56 9 elem:6045";
  *(_QWORD *)(v2 + 16) = data::arrFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862722] = -218959118;
  v4[536862724] = -218103808;
  v4[536862725] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v11, v12);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      v6 = ((v2 + 96) >> 3) + 2147450880;
      *(_DWORD *)v6 = 0;
      *(_WORD *)(v6 + 4) = 0;
      *(_BYTE *)(v6 + 6) = 0;
      data::ConfigGadgetConsolePosition::ConfigGadgetConsolePosition((data::ConfigGadgetConsolePosition *const)(v2 + 96));
      if ( !data::ConfigGadgetConsolePosition::fromJson((data::ConfigGadgetConsolePosition *const)(v2 + 96), elem_jval) )
      {
        *(_DWORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 127) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 32, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 32),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "arrFromJson",
          6048);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 32),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
        *(_DWORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = -117901064;
        v13 = 0;
        v7 = 0;
      }
      else
      {
        v8 = std::move<data::ConfigGadgetConsolePosition &>((data::ConfigGadgetConsolePosition *)(v2 + 96));
        std::vector<data::ConfigGadgetConsolePosition>::emplace_back<data::ConfigGadgetConsolePosition>(v, v8, v8);
        v7 = 1;
      }
      data::ConfigGadgetConsolePosition::~ConfigGadgetConsolePosition((data::ConfigGadgetConsolePosition *const)(v2 + 96));
      if ( v7 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    v9 = ((v2 + 96) >> 3) + 2147450880;
    *(_DWORD *)v9 = -117901064;
    *(_WORD *)(v9 + 4) = -1800;
    *(_BYTE *)(v9 + 6) = -8;
    if ( v5 && v5 != 2 )
      goto LABEL_20;
  }
  v13 = 1;
LABEL_20:
  result = v13;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6058: range 000000000E64F6AE-000000000E64F8FA
int32_t __cdecl data::getArrHashValue(const data::ConfigGadgetConsolePositionArray *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsolePosition*,std::vector<data::ConfigGadgetConsolePosition> >::reference elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:6059 64 8 16 __for_begin:6060 96 8 14 __for_end:6060";
  *(_QWORD *)(v2 + 16) = data::getArrHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::ConfigGadgetConsolePosition>::const_iterator *)(v2 + 64) = std::vector<data::ConfigGadgetConsolePosition>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::ConfigGadgetConsolePosition>::const_iterator *)(v2 + 96) = std::vector<data::ConfigGadgetConsolePosition>::end(vec);
  while ( __gnu_cxx::operator!=<data::ConfigGadgetConsolePosition const*,std::vector<data::ConfigGadgetConsolePosition>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsolePosition*,std::vector<data::ConfigGadgetConsolePosition> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsolePosition*,std::vector<data::ConfigGadgetConsolePosition> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<data::ConfigGadgetConsolePosition const*,std::vector<data::ConfigGadgetConsolePosition>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigGadgetConsolePosition*,std::vector<data::ConfigGadgetConsolePosition> > *const)(v2 + 64));
    HashValue = data::ConfigGadgetConsolePosition::getHashValue(elem);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::ConfigGadgetConsolePosition const*,std::vector<data::ConfigGadgetConsolePosition>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigGadgetConsolePosition*,std::vector<data::ConfigGadgetConsolePosition> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6069: range 000000000E64F8FC-000000000E65104A
bool __cdecl data::ConfigGadgetConsole::fromJson(data::ConfigGadgetConsole *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  data::ConfigGadgetConsolePositionArray *p_finish_position; // rsi
  bool v7; // bl
  const Json::Value *in_trigger_ability_name_ptr; // [rsp+18h] [rbp-5A8h]
  const Json::Value *out_trigger_ability_name_ptr; // [rsp+20h] [rbp-5A0h]
  const Json::Value *reminder_text_map_ptr; // [rsp+28h] [rbp-598h]
  const Json::Value *reminder_vanish_delay_ptr; // [rsp+30h] [rbp-590h]
  const Json::Value *camera_attach_point_ptr; // [rsp+38h] [rbp-588h]
  const Json::Value *finish_gadget_state_ptr; // [rsp+40h] [rbp-580h]
  const Json::Value *operations_ptr; // [rsp+48h] [rbp-578h]
  const Json::Value *limitations_ptr; // [rsp+50h] [rbp-570h]
  const Json::Value *finish_position_ptr; // [rsp+58h] [rbp-568h]
  char v19[1376]; // [rsp+60h] [rbp-560h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1344LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "27 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 32 9 <unknown> 256 32 9 <un"
                        "known> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unk"
                        "nown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unkn"
                        "own> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <u"
                        "nknown> 1280 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsole::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 192),
    "inTriggerAbilityName",
    (const std::allocator<char> *)(v2 + 48));
  in_trigger_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
  std::string::~string((void *)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( in_trigger_ability_name_ptr
    && !fromJson<std::string>(in_trigger_ability_name_ptr, &this->in_trigger_ability_name) )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6079);
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[42])"fromJson for: inTriggerAbilityName fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      "outTriggerAbilityName",
      (const std::allocator<char> *)(v2 + 64));
    out_trigger_ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( out_trigger_ability_name_ptr
      && !fromJson<std::string>(out_trigger_ability_name_ptr, &this->out_trigger_ability_name) )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6091);
      common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
        (common::milog::MiLogStream *const)(v2 + 384),
        (const char (*)[43])"fromJson for: outTriggerAbilityName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 448),
        "reminderTextMap",
        (const std::allocator<char> *)(v2 + 80));
      reminder_text_map_ptr = jsonValueFind(jval, (const std::string *)(v2 + 448));
      std::string::~string((void *)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( reminder_text_map_ptr && !fromJson<std::string>(reminder_text_map_ptr, &this->reminder_text_map) )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          6103);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          (common::milog::MiLogStream *const)(v2 + 512),
          (const char (*)[37])"fromJson for: reminderTextMap fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 576),
          "reminderVanishDelay",
          (const std::allocator<char> *)(v2 + 96));
        reminder_vanish_delay_ptr = jsonValueFind(jval, (const std::string *)(v2 + 576));
        std::string::~string((void *)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( reminder_vanish_delay_ptr && !fromJson<float>(reminder_vanish_delay_ptr, &this->reminder_vanish_delay) )
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            6115);
          common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            (common::milog::MiLogStream *const)(v2 + 640),
            (const char (*)[41])"fromJson for: reminderVanishDelay fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 704),
            "cameraAttachPoint",
            (const std::allocator<char> *)(v2 + 112));
          camera_attach_point_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
          std::string::~string((void *)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( camera_attach_point_ptr && !fromJson<std::string>(camera_attach_point_ptr, &this->camera_attach_point) )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              6127);
            common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              (common::milog::MiLogStream *const)(v2 + 768),
              (const char (*)[39])"fromJson for: cameraAttachPoint fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 832),
              "finishGadgetState",
              (const std::allocator<char> *)(v2 + 128));
            finish_gadget_state_ptr = jsonValueFind(jval, (const std::string *)(v2 + 832));
            std::string::~string((void *)(v2 + 832));
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( finish_gadget_state_ptr && !fromJson<unsigned int>(finish_gadget_state_ptr, &this->finish_gadget_state) )
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                6139);
              common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[39])"fromJson for: finishGadgetState fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 960),
                "operations",
                (const std::allocator<char> *)(v2 + 144));
              operations_ptr = jsonValueFind(jval, (const std::string *)(v2 + 960));
              std::string::~string((void *)(v2 + 960));
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( operations_ptr && !data::arrFromJson(operations_ptr, &this->operations) )
              {
                *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1024, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1024),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  6151);
                common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                  (common::milog::MiLogStream *const)(v2 + 1024),
                  (const char (*)[32])"fromJson for: operations fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1088),
                  "limitations",
                  (const std::allocator<char> *)(v2 + 160));
                limitations_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1088));
                std::string::~string((void *)(v2 + 1088));
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( limitations_ptr && !data::arrFromJson(limitations_ptr, &this->limitations) )
                {
                  *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1152, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1152),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    6163);
                  common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                    (common::milog::MiLogStream *const)(v2 + 1152),
                    (const char (*)[33])"fromJson for: limitations fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 176);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1216),
                    "finishPosition",
                    (const std::allocator<char> *)(v2 + 176));
                  p_finish_position = (data::ConfigGadgetConsolePositionArray *)(v2 + 1216);
                  finish_position_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1216));
                  std::string::~string((void *)(v2 + 1216));
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 176);
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                  if ( finish_position_ptr
                    && (p_finish_position = &this->finish_position,
                        !data::arrFromJson(finish_position_ptr, &this->finish_position)) )
                  {
                    *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1280, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1280),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      6175);
                    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      (common::milog::MiLogStream *const)(v2 + 1280),
                      (const char (*)[36])"fromJson for: finishPosition fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
                    v5 = 0;
                  }
                  else
                  {
                    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                      __asan_report_store1(&this->is_json_loaded, p_finish_position, &this->is_json_loaded);
                    this->is_json_loaded = 1;
                    v5 = 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v7 = v5;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF807C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF809C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A4) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1344LL, v19);
  }
  return v7;
};

// Line 6183: range 000000000E65104C-000000000E6512BD
int32_t __cdecl data::ConfigGadgetConsole::getHashValue(const data::ConfigGadgetConsole *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t ArrHashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6184";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetConsole::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->in_trigger_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->out_trigger_ability_name, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->reminder_text_map, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->reminder_vanish_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->reminder_vanish_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->reminder_vanish_delay);
  }
  common::tools::HashUtils::appendHash(this->reminder_vanish_delay, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->camera_attach_point, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->finish_gadget_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->finish_gadget_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->finish_gadget_state);
  }
  common::tools::HashUtils::appendHash(this->finish_gadget_state, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->operations);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  v6 = data::getArrHashValue(&this->limitations);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::getArrHashValue(&this->finish_position);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6199: range 000000000E6512BE-000000000E651B4C
bool __cdecl data::ConfigXmLensScanEntityInfo::fromJson(
        data::ConfigXmLensScanEntityInfo *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::string *p_finish_num_gvname; // rsi
  const Json::Value *check_sub_node_id_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *total_num_gvname_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *finish_num_gvname_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigXmLensScanEntityInfo::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "checkSubNodeId",
    (const std::allocator<char> *)(v2 + 48));
  check_sub_node_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( check_sub_node_id_ptr && !fromJson<unsigned int>(check_sub_node_id_ptr, &this->check_sub_node_id) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6209);
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[36])"fromJson for: checkSubNodeId fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "totalNumGVName",
      (const std::allocator<char> *)(v2 + 64));
    total_num_gvname_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( total_num_gvname_ptr && !fromJson<std::string>(total_num_gvname_ptr, &this->total_num_gvname) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6221);
      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[36])"fromJson for: totalNumGVName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "finishNumGVName",
        (const std::allocator<char> *)(v2 + 80));
      p_finish_num_gvname = (std::string *)(v2 + 352);
      finish_num_gvname_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( finish_num_gvname_ptr
        && (p_finish_num_gvname = &this->finish_num_gvname,
            !fromJson<std::string>(finish_num_gvname_ptr, &this->finish_num_gvname)) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          6233);
        common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[37])"fromJson for: finishNumGVName fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(&this->is_json_loaded, p_finish_num_gvname, &this->is_json_loaded);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 6241: range 000000000E651B4E-000000000E651CDF
int32_t __cdecl data::ConfigXmLensScanEntityInfo::getHashValue(const data::ConfigXmLensScanEntityInfo *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6242";
  *(_QWORD *)(v2 + 16) = data::ConfigXmLensScanEntityInfo::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->check_sub_node_id, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->total_num_gvname, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->finish_num_gvname, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6251: range 000000000E651CE0-000000000E6527FA
bool __cdecl data::ConfigXmLens::fromJson(data::ConfigXmLens *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  const Json::Value *v6; // rsi
  const Json::Value *check_main_node_id_ptr; // [rsp+10h] [rbp-2A0h]
  const Json::Value *camera_offset_ptr; // [rsp+18h] [rbp-298h]
  const Json::Value *black_smoke_ptr; // [rsp+20h] [rbp-290h]
  const Json::Value *aranara_ptr; // [rsp+28h] [rbp-288h]
  char v12[640]; // [rsp+30h] [rbp-280h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 "
                        "9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9"
                        " <unknown> 544 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigXmLens::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "checkMainNodeId",
    (const std::allocator<char> *)(v2 + 32));
  check_main_node_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( check_main_node_id_ptr && !fromJson<unsigned int>(check_main_node_id_ptr, &this->check_main_node_id) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6261);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[37])"fromJson for: checkMainNodeId fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "cameraOffset",
      (const std::allocator<char> *)(v2 + 48));
    camera_offset_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( camera_offset_ptr && !data::Vector::fromJson(&this->camera_offset, camera_offset_ptr) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6273);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[34])"fromJson for: cameraOffset fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "blackSmoke",
        (const std::allocator<char> *)(v2 + 64));
      black_smoke_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( black_smoke_ptr && !data::ConfigXmLensScanEntityInfo::fromJson(&this->black_smoke, black_smoke_ptr) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          6285);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[32])"fromJson for: blackSmoke fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 480),
          "Aranara",
          (const std::allocator<char> *)(v2 + 80));
        v6 = (const Json::Value *)(v2 + 480);
        aranara_ptr = jsonValueFind(jval, (const std::string *)(v2 + 480));
        std::string::~string((void *)(v2 + 480));
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( aranara_ptr && (v6 = aranara_ptr, !data::ConfigXmLensScanEntityInfo::fromJson(&this->aranara, aranara_ptr)) )
        {
          *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 544, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 544),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            6297);
          common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
            (common::milog::MiLogStream *const)(v2 + 544),
            (const char (*)[29])"fromJson for: Aranara fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
          result = 0;
        }
        else
        {
          if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
            __asan_report_store1(&this->is_json_loaded, v6, &this->is_json_loaded);
          this->is_json_loaded = 1;
          result = 1;
        }
      }
    }
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 6305: range 000000000E6527FC-000000000E6529C0
int32_t __cdecl data::ConfigXmLens::getHashValue(const data::ConfigXmLens *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t v6; // eax
  int32_t v7; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6306";
  *(_QWORD *)(v2 + 16) = data::ConfigXmLens::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->check_main_node_id, (int32_t *)(v2 + 32));
  HashValue = data::Vector::getHashValue(&this->camera_offset);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  v6 = data::ConfigXmLensScanEntityInfo::getHashValue(&this->black_smoke);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  v7 = data::ConfigXmLensScanEntityInfo::getHashValue(&this->aranara);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6316: range 000000000E6529C2-000000000E652FAA
bool __cdecl data::ConfigAutoDool::fromJson(data::ConfigAutoDool *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *check_interval_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *trigger_distance_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAutoDool::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "checkInterval",
    (const std::allocator<char> *)(v2 + 32));
  check_interval_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( check_interval_ptr && !fromJson<float>(check_interval_ptr, &this->check_interval) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6326);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[35])"fromJson for: checkInterval fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "triggerDistance",
      (const std::allocator<char> *)(v2 + 48));
    trigger_distance_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( trigger_distance_ptr && !fromJson<float>(trigger_distance_ptr, &this->trigger_distance) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6338);
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[37])"fromJson for: triggerDistance fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v6 = ((_BYTE)this + 8) & 7;
      v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
      if ( (_BYTE)v7 )
        __asan_report_store1(&this->is_json_loaded, v6, v7);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6346: range 000000000E652FAC-000000000E65316A
int32_t __cdecl data::ConfigAutoDool::getHashValue(const data::ConfigAutoDool *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6347";
  *(_QWORD *)(v2 + 16) = data::ConfigAutoDool::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->check_interval, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->trigger_distance);
  }
  common::tools::HashUtils::appendHash(this->trigger_distance, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6355: range 000000000E65316C-000000000E654195
bool __cdecl data::CustomGadgetCameraSettings::fromJson(
        data::CustomGadgetCameraSettings *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *gadget_height_ptr; // [rsp+10h] [rbp-3D0h]
  const Json::Value *min_camera_radius_ptr; // [rsp+18h] [rbp-3C8h]
  const Json::Value *min_elevation_ptr; // [rsp+20h] [rbp-3C0h]
  const Json::Value *leftright_shift_ptr; // [rsp+28h] [rbp-3B8h]
  const Json::Value *up_down_shift_ptr; // [rsp+30h] [rbp-3B0h]
  const Json::Value *fov_ptr; // [rsp+38h] [rbp-3A8h]
  char v14[928]; // [rsp+40h] [rbp-3A0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(896LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <"
                        "unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <u"
                        "nknown> 768 32 9 <unknown> 832 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::CustomGadgetCameraSettings::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "gadgetHeight",
    (const std::allocator<char> *)(v2 + 32));
  gadget_height_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( gadget_height_ptr && !fromJson<float>(gadget_height_ptr, &this->gadget_height) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6365);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[34])"fromJson for: gadgetHeight fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "minCameraRadius",
      (const std::allocator<char> *)(v2 + 48));
    min_camera_radius_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( min_camera_radius_ptr && !fromJson<float>(min_camera_radius_ptr, &this->min_camera_radius) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6377);
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[37])"fromJson for: minCameraRadius fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "minElevation",
        (const std::allocator<char> *)(v2 + 64));
      min_elevation_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( min_elevation_ptr && !fromJson<float>(min_elevation_ptr, &this->min_elevation) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          6389);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[34])"fromJson for: minElevation fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "leftrightShift",
          (const std::allocator<char> *)(v2 + 80));
        leftright_shift_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( leftright_shift_ptr && !fromJson<float>(leftright_shift_ptr, &this->leftright_shift) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            6401);
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[36])"fromJson for: leftrightShift fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "upDownShift",
            (const std::allocator<char> *)(v2 + 96));
          up_down_shift_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( up_down_shift_ptr && !fromJson<float>(up_down_shift_ptr, &this->up_down_shift) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              6413);
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[33])"fromJson for: upDownShift fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 768),
              off_1A3935C0,
              (const std::allocator<char> *)(v2 + 112));
            fov_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
            std::string::~string((void *)(v2 + 768));
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( fov_ptr && !fromJson<float>(fov_ptr, &this->fov) )
            {
              *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 832, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 832),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                6425);
              common::milog::MiLogStream::operator<<<char [25],(char *[25])0>(
                (common::milog::MiLogStream *const)(v2 + 832),
                (const char (*)[25])"fromJson for: fov fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
              result = 0;
            }
            else
            {
              v6 = ((_BYTE)this + 24) & 7;
              v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
              if ( (_BYTE)v7 )
                __asan_report_store1(&this->is_json_loaded, v6, v7);
              this->is_json_loaded = 1;
              result = 1;
            }
          }
        }
      }
    }
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6433: range 000000000E654196-000000000E654499
int32_t __cdecl data::CustomGadgetCameraSettings::getHashValue(const data::CustomGadgetCameraSettings *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6434";
  *(_QWORD *)(v2 + 16) = data::CustomGadgetCameraSettings::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->gadget_height, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->min_camera_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_camera_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->min_camera_radius);
  }
  common::tools::HashUtils::appendHash(this->min_camera_radius, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->min_elevation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_elevation >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->min_elevation);
  }
  common::tools::HashUtils::appendHash(this->min_elevation, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->leftright_shift >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->leftright_shift >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->leftright_shift);
  }
  common::tools::HashUtils::appendHash(this->leftright_shift, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->up_down_shift >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->up_down_shift >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->up_down_shift);
  }
  common::tools::HashUtils::appendHash(this->up_down_shift, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->fov >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->fov >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->fov);
  }
  common::tools::HashUtils::appendHash(this->fov, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6446: range 000000000E65449A-000000000E654A82
bool __cdecl data::CustomGadgetNodeSlot::fromJson(data::CustomGadgetNodeSlot *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *named_transform_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *slot_config_id_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::CustomGadgetNodeSlot::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "namedTransform",
    (const std::allocator<char> *)(v2 + 32));
  named_transform_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( named_transform_ptr && !fromJson<std::string>(named_transform_ptr, &this->named_transform) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6456);
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[36])"fromJson for: namedTransform fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "slotConfigId",
      (const std::allocator<char> *)(v2 + 48));
    slot_config_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( slot_config_id_ptr && !fromJson<unsigned int>(slot_config_id_ptr, &this->slot_config_id) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6468);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[34])"fromJson for: slotConfigId fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v6 = ((_BYTE)this + 36) & 7;
      v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
      if ( (_BYTE)v7 )
        __asan_report_store1(&this->is_json_loaded, v6, v7);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6476: range 000000000E654A84-000000000E654BFE
int32_t __cdecl data::CustomGadgetNodeSlot::getHashValue(const data::CustomGadgetNodeSlot *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6477";
  *(_QWORD *)(v2 + 16) = data::CustomGadgetNodeSlot::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->named_transform, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->slot_config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->slot_config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->slot_config_id);
  }
  common::tools::HashUtils::appendHash(this->slot_config_id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6484: range 000000000E654BFF-000000000E6557F2
bool __cdecl data::mapFromJson(const Json::Value *jval, data::CustomGadgetNodeSlotMap *m)
{
  bool v2; // r15
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // al
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // r14
  _BOOL4 v9; // r14d
  unsigned __int64 v10; // rax
  const Json::Value *v11; // rax
  unsigned __int64 v12; // rax
  data::CustomGadgetNodeSlot *v13; // r8
  common::milog::MiLogStream *v14; // rax
  int v15; // r14d
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true>,bool> v16; // rax
  common::milog::MiLogStream *v17; // rax
  unsigned __int64 v18; // rax
  unsigned __int64 v19; // rax
  unsigned __int64 v20; // rax
  int v21; // edx
  bool result; // al
  char v23[784]; // [rsp+20h] [rbp-310h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(736LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 32 16 8 cit:6486 64 16 9 <unknown> 96 32 8 key:6489 160 32 9 <unknown> 224 32 9 <unknown> 288"
                        " 32 9 <unknown> 352 32 9 <unknown> 416 40 13 tmp_jval:6485 496 40 13 key_jval:6488 576 40 15 val"
                        "ue_jval:6495 656 40 10 value:6496";
  *(_QWORD *)(v3 + 16) = data::mapFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219021312;
  v5[536862722] = -219021312;
  v5[536862724] = -218959118;
  v5[536862726] = -218959118;
  v5[536862728] = -218959118;
  v5[536862730] = -218959118;
  v5[536862732] = -218959118;
  v5[536862734] = -218959360;
  v5[536862735] = 62194;
  v5[536862736] = -234881024;
  v5[536862737] = -218959118;
  v5[536862739] = -218959360;
  v5[536862740] = 62194;
  v5[536862741] = -218103808;
  v5[536862742] = -202116109;
  Json::Value::Value((Json::Value *)(v3 + 416), jval);
  if ( *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  Json::Value::begin((Json::Value_0 *const)(v3 + 416));
  while ( 1 )
  {
    *(_WORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    Json::Value::end((Json::Value_0 *const)(v3 + 416));
    v6 = Json::ValueIteratorBase::operator!=(
           (const Json::ValueIteratorBase *const)(v3 + 32),
           (const Json::ValueIteratorBase::SelfType *)(v3 + 64));
    *(_WORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -1800;
    if ( !v6 )
      break;
    v7 = ((v3 + 496) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    if ( *(char *)(((v3 + 496) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 535) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 32 + 55) & 7) >= *(_BYTE *)(((v3 + 535) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 496, 40LL);
    }
    Json::ValueIteratorBase::key((Json::ValueIteratorBase *)(v3 + 496));
    *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v3 + 96);
    if ( !fromJson<std::string>((const Json::Value *)(v3 + 496), (std::string *)(v3 + 96)) )
    {
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 160) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 96 + 31) & 7) >= *(_BYTE *)(((v3 + 191) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 160, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 160),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        6492);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)(v3 + 160),
             (const char (*)[21])"key fromJson fails: ");
      *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 32 + 31) & 7) >= *(_BYTE *)(((v3 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 224, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v3 + 224), (Json::Value_0 *)(v3 + 496));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 224));
      std::string::~string((void *)(v3 + 224));
      *(_DWORD *)(((v3 + 224) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 160));
      *(_DWORD *)(((v3 + 160) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v10 = ((v3 + 576) >> 3) + 2147450880;
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 0;
      v11 = Json::ValueIterator::operator*((Json::ValueIterator *const)(v3 + 32));
      Json::Value::Value((Json::Value *)(v3 + 576), v11);
      v12 = ((v3 + 656) >> 3) + 2147450880;
      *(_DWORD *)v12 = 0;
      *(_BYTE *)(v12 + 4) = 0;
      data::CustomGadgetNodeSlot::CustomGadgetNodeSlot((data::CustomGadgetNodeSlot *const)(v3 + 656));
      if ( !data::CustomGadgetNodeSlot::fromJson(
              (data::CustomGadgetNodeSlot *const)(v3 + 656),
              (const Json::Value *)(v3 + 576)) )
      {
        *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 288) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 - 32 + 95) & 7) >= *(_BYTE *)(((v3 + 319) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 288, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 288),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "mapFromJson",
          6499);
        v14 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)(v3 + 288),
                (const char (*)[28])"value fromJson fails, key: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v3 + 96));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 288));
        *(_DWORD *)(((v3 + 288) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v15 = 0;
      }
      else
      {
        v16 = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::emplace<std::string&,data::CustomGadgetNodeSlot&>(
                m,
                (std::string *)(v3 + 96),
                (data::CustomGadgetNodeSlot *)(v3 + 656),
                (std::string *)(v3 + 96),
                v13);
        if ( !v16.second )
        {
          *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 352) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 + 127) & 7) >= *(_BYTE *)(((v3 + 383) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 352, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 352),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "mapFromJson",
            6504);
          v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 352),
                  (const char (*)[16])"key duplicate: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v3 + 96));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 352));
          *(_DWORD *)(((v3 + 352) >> 3) + 0x7FFF8000) = -117901064;
          v2 = 0;
          v15 = 0;
        }
        else
        {
          v15 = 1;
        }
      }
      data::CustomGadgetNodeSlot::~CustomGadgetNodeSlot((data::CustomGadgetNodeSlot *const)(v3 + 656));
      Json::Value::~Value((Json::Value_0 *const)(v3 + 576));
      v9 = v15 == 1;
    }
    std::string::~string((void *)(v3 + 96));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 496));
    v18 = ((v3 + 496) >> 3) + 2147450880;
    *(_DWORD *)v18 = -117901064;
    *(_BYTE *)(v18 + 4) = -8;
    *(_DWORD *)(((v3 + 96) >> 3) + 0x7FFF8000) = -117901064;
    v19 = ((v3 + 576) >> 3) + 2147450880;
    *(_DWORD *)v19 = -117901064;
    *(_BYTE *)(v19 + 4) = -8;
    v20 = ((v3 + 656) >> 3) + 2147450880;
    *(_DWORD *)v20 = -117901064;
    *(_BYTE *)(v20 + 4) = -8;
    if ( !v9 )
    {
      v21 = 0;
      goto LABEL_32;
    }
    Json::ValueIterator::operator++((Json::ValueIterator *const)(v3 + 32));
  }
  v21 = 1;
LABEL_32:
  *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) = -1800;
  if ( v21 == 1 )
    v2 = 1;
  Json::Value::~Value((Json::Value_0 *const)(v3 + 416));
  result = v2;
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = 0;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 6513: range 000000000E6557F3-000000000E655A9A
int32_t __cdecl data::getMapHashValue(const data::CustomGadgetNodeSlotMap *map)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true>::reference v7; // [rsp+18h] [rbp-B8h]
  std::tuple_element<0,std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *key; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,const std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *val; // [rsp+28h] [rbp-A8h]
  char v10[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:6514 64 8 16 __for_begin:6515 96 8 14 __for_end:6515";
  *(_QWORD *)(v2 + 16) = data::getMapHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::begin(map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<std::string,data::CustomGadgetNodeSlot>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::CustomGadgetNodeSlot>::end(map);
  while ( std::__detail::operator!=<std::pair<std::string const,data::CustomGadgetNodeSlot>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CustomGadgetNodeSlot>,true> *)(v2 + 96)) )
  {
    v7 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::CustomGadgetNodeSlot>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true> *const)(v2 + 64));
    key = std::get<0ul,std::string const,data::CustomGadgetNodeSlot>(v7);
    val = (std::tuple_element<1,const std::pair<const std::string,data::CustomGadgetNodeSlot> >::type *)std::get<1ul,std::string const,data::CustomGadgetNodeSlot>(v7);
    common::tools::HashUtils::appendHash(key, (int32_t *)(v2 + 48));
    HashValue = data::CustomGadgetNodeSlot::getHashValue(val);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    std::__detail::_Node_const_iterator<std::pair<std::string const,data::CustomGadgetNodeSlot>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,data::CustomGadgetNodeSlot>,false,true> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6527: range 000000000E655A9C-000000000E65607F
bool __cdecl data::ConfigCustomGadgetNode::fromJson(data::ConfigCustomGadgetNode *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::CustomGadgetNodeSlotMap *p_slot_map; // rsi
  const Json::Value *camera_settings_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *slot_map_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomGadgetNode::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "cameraSettings",
    (const std::allocator<char> *)(v2 + 32));
  camera_settings_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( camera_settings_ptr && !data::CustomGadgetCameraSettings::fromJson(&this->camera_settings, camera_settings_ptr) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6537);
    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[36])"fromJson for: cameraSettings fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "slotMap",
      (const std::allocator<char> *)(v2 + 48));
    p_slot_map = (data::CustomGadgetNodeSlotMap *)(v2 + 192);
    slot_map_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( slot_map_ptr && (p_slot_map = &this->slot_map, !data::mapFromJson(slot_map_ptr, &this->slot_map)) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6549);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[29])"fromJson for: slotMap fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_slot_map, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6557: range 000000000E656080-000000000E6561DB
int32_t __cdecl data::ConfigCustomGadgetNode::getHashValue(const data::ConfigCustomGadgetNode *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t MapHashValue; // eax
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6558";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomGadgetNode::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::CustomGadgetCameraSettings::getHashValue(&this->camera_settings);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  MapHashValue = data::getMapHashValue(&this->slot_map);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6566: range 000000000E6561DC-000000000E656A6F
bool __cdecl data::ConfigCustomGadgetDither::fromJson(
        data::ConfigCustomGadgetDither *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *dither_value_limit_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *delta_depth_threshold_min_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *delta_depth_threshold_max_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomGadgetDither::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "ditherValueLimit",
    (const std::allocator<char> *)(v2 + 48));
  dither_value_limit_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( dither_value_limit_ptr && !fromJson<float>(dither_value_limit_ptr, &this->dither_value_limit) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6576);
    common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[38])"fromJson for: ditherValueLimit fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "deltaDepthThresholdMin",
      (const std::allocator<char> *)(v2 + 64));
    delta_depth_threshold_min_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( delta_depth_threshold_min_ptr
      && !fromJson<float>(delta_depth_threshold_min_ptr, &this->delta_depth_threshold_min) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6588);
      common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[44])"fromJson for: deltaDepthThresholdMin fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "deltaDepthThresholdMax",
        (const std::allocator<char> *)(v2 + 80));
      delta_depth_threshold_max_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( delta_depth_threshold_max_ptr
        && !fromJson<float>(delta_depth_threshold_max_ptr, &this->delta_depth_threshold_max) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          6600);
        common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[44])"fromJson for: deltaDepthThresholdMax fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        v6 = ((_BYTE)this + 12) & 7;
        v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
        if ( (_BYTE)v7 )
          __asan_report_store1(&this->is_json_loaded, v6, v7);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 6608: range 000000000E656A70-000000000E656C81
int32_t __cdecl data::ConfigCustomGadgetDither::getHashValue(const data::ConfigCustomGadgetDither *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6609";
  *(_QWORD *)(v2 + 16) = data::ConfigCustomGadgetDither::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->dither_value_limit, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->delta_depth_threshold_min >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->delta_depth_threshold_min >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&this->delta_depth_threshold_min);
  }
  common::tools::HashUtils::appendHash(this->delta_depth_threshold_min, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->delta_depth_threshold_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->delta_depth_threshold_max >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&this->delta_depth_threshold_max);
  }
  common::tools::HashUtils::appendHash(this->delta_depth_threshold_max, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6618: range 000000000E656C82-000000000E656CD3
bool __cdecl data::ConfigCustomGadgetColliderControl::fromJson(
        data::ConfigCustomGadgetColliderControl *const this,
        const Json::Value *jval)
{
  __int64 v2; // rsi
  __int64 v3; // rdx

  v2 = (unsigned __int8)this & 7;
  v3 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store1(this, v2, v3);
  this->is_json_loaded = 1;
  return 1;
};

// Line 6624: range 000000000E656CD4-000000000E656CE7
int32_t __cdecl data::ConfigCustomGadgetColliderControl::getHashValue(
        const data::ConfigCustomGadgetColliderControl *const this)
{
  return 0;
};

// Line 6631: range 000000000E656CE8-000000000E6572D0
bool __cdecl data::ConfigGuidePoint::fromJson(data::ConfigGuidePoint *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *ui__indicator_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *disable_quest_arrow_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGuidePoint::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "ui_Indicator",
    (const std::allocator<char> *)(v2 + 32));
  ui__indicator_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( ui__indicator_ptr && !data::ConfigTemplateData::fromJson(&this->ui__indicator, ui__indicator_ptr) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6641);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[34])"fromJson for: ui_Indicator fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "disableQuestArrow",
      (const std::allocator<char> *)(v2 + 48));
    disable_quest_arrow_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( disable_quest_arrow_ptr && !fromJson<bool>(disable_quest_arrow_ptr, &this->disable_quest_arrow) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6653);
      common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[39])"fromJson for: disableQuestArrow fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v6 = ((_BYTE)this + 97) & 7;
      v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
      if ( (_BYTE)v7 )
        __asan_report_store1(&this->is_json_loaded, v6, v7);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6661: range 000000000E6572D2-000000000E657459
int32_t __cdecl data::ConfigGuidePoint::getHashValue(const data::ConfigGuidePoint *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6662";
  *(_QWORD *)(v2 + 16) = data::ConfigGuidePoint::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigTemplateData::getHashValue(&this->ui__indicator);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->disable_quest_arrow >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->disable_quest_arrow, v2 + 32, &this->disable_quest_arrow);
  common::tools::HashUtils::appendHash(this->disable_quest_arrow, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6670: range 000000000E65745A-000000000E65B623
bool __cdecl data::ConfigGadgetMisc::fromJson(data::ConfigGadgetMisc *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  std::shared_ptr<data::ConfigConstForceField> *v6; // rax
  bool v7; // r15
  bool v8; // r15
  float *p_disable_duration; // rsi
  bool v10; // bl
  const Json::Value *chest_ptr; // [rsp+18h] [rbp-FB8h]
  const Json::Value *gear_ptr; // [rsp+20h] [rbp-FB0h]
  const Json::Value *force_field_ptr; // [rsp+28h] [rbp-FA8h]
  const Json::Value *crystal_ptr; // [rsp+30h] [rbp-FA0h]
  const Json::Value *seal_ptr; // [rsp+38h] [rbp-F98h]
  const Json::Value *pickup_ptr; // [rsp+40h] [rbp-F90h]
  const Json::Value *wind_seed_ptr; // [rsp+48h] [rbp-F88h]
  const Json::Value *cannon_ptr; // [rsp+50h] [rbp-F80h]
  const Json::Value *gadget_console_ptr; // [rsp+58h] [rbp-F78h]
  const Json::Value *xm_lens_ptr; // [rsp+60h] [rbp-F70h]
  const Json::Value *auto_door_ptr; // [rsp+68h] [rbp-F68h]
  const Json::Value *custom_gadget_node_ptr; // [rsp+70h] [rbp-F60h]
  const Json::Value *custom_gadget_dither_ptr; // [rsp+78h] [rbp-F58h]
  const Json::Value *custom_gadget_collider_control_ptr; // [rsp+80h] [rbp-F50h]
  const Json::Value *escape_effect_ptr; // [rsp+88h] [rbp-F48h]
  const Json::Value *guide_point_ptr; // [rsp+90h] [rbp-F40h]
  const Json::Value *is_uipoint_ptr; // [rsp+98h] [rbp-F38h]
  const Json::Value *guide_point_managed_by_indicator_ptr; // [rsp+A0h] [rbp-F30h]
  Json::Value *guide_point_type_ptr; // [rsp+A8h] [rbp-F28h]
  const Json::Value *target_indicator_yoffset_ptr; // [rsp+B0h] [rbp-F20h]
  const Json::Value *guide_point_config_ptr; // [rsp+B8h] [rbp-F18h]
  const Json::Value *has_avatar_crash_damage_ptr; // [rsp+C0h] [rbp-F10h]
  const Json::Value *has_avatar_fall_on_ground_roll_ptr; // [rsp+C8h] [rbp-F08h]
  const Json::Value *need_turn_grey_ptr; // [rsp+D0h] [rbp-F00h]
  const Json::Value *disable_duration_ptr; // [rsp+D8h] [rbp-EF8h]
  char v38[3824]; // [rsp+E0h] [rbp-EF0h] BYREF

  v2 = (unsigned __int64)v38;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(3776LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "78 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 1 9 <unknown> 3"
                        "04 1 9 <unknown> 320 1 9 <unknown> 336 1 9 <unknown> 352 1 9 <unknown> 368 1 9 <unknown> 384 1 9"
                        " <unknown> 400 1 9 <unknown> 416 1 9 <unknown> 432 1 9 <unknown> 448 16 9 <unknown> 480 16 9 <un"
                        "known> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unk"
                        "nown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <un"
                        "known> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9"
                        " <unknown> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 32 9 <unknown> 1728 "
                        "32 9 <unknown> 1792 32 9 <unknown> 1856 32 9 <unknown> 1920 32 9 <unknown> 1984 32 9 <unknown> 2"
                        "048 32 9 <unknown> 2112 32 9 <unknown> 2176 32 9 <unknown> 2240 32 9 <unknown> 2304 32 9 <unknow"
                        "n> 2368 32 9 <unknown> 2432 32 9 <unknown> 2496 32 9 <unknown> 2560 32 9 <unknown> 2624 32 9 <un"
                        "known> 2688 32 9 <unknown> 2752 32 9 <unknown> 2816 32 9 <unknown> 2880 32 9 <unknown> 2944 32 9"
                        " <unknown> 3008 32 9 <unknown> 3072 32 9 <unknown> 3136 32 9 <unknown> 3200 32 9 <unknown> 3264 "
                        "32 9 <unknown> 3328 32 9 <unknown> 3392 32 9 <unknown> 3456 32 9 <unknown> 3520 32 9 <unknown> 3"
                        "584 32 9 <unknown> 3648 32 9 <unknown> 3712 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetMisc::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234753535;
  v4[536862730] = -234753535;
  v4[536862731] = -234753535;
  v4[536862732] = -234753535;
  v4[536862733] = -234753535;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -218959118;
  v4[536862775] = -218959118;
  v4[536862777] = -218959118;
  v4[536862779] = -218959118;
  v4[536862781] = -218959118;
  v4[536862783] = -218959118;
  v4[536862785] = -218959118;
  v4[536862787] = -218959118;
  v4[536862789] = -218959118;
  v4[536862791] = -218959118;
  v4[536862793] = -218959118;
  v4[536862795] = -218959118;
  v4[536862797] = -218959118;
  v4[536862799] = -218959118;
  v4[536862801] = -218959118;
  v4[536862803] = -218959118;
  v4[536862805] = -218959118;
  v4[536862807] = -218959118;
  v4[536862809] = -218959118;
  v4[536862811] = -218959118;
  v4[536862813] = -218959118;
  v4[536862815] = -218959118;
  v4[536862817] = -218959118;
  v4[536862819] = -218959118;
  v4[536862821] = -218959118;
  v4[536862823] = -218959118;
  v4[536862825] = -218959118;
  v4[536862827] = -218959118;
  v4[536862829] = -218959118;
  v4[536862831] = -218959118;
  v4[536862833] = -218959118;
  v4[536862835] = -218959118;
  v4[536862837] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 512),
    "chest",
    (const std::allocator<char> *)(v2 + 48));
  chest_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
  std::string::~string((void *)(v2 + 512));
  *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( chest_ptr && !data::ConfigChest::fromJson(&this->chest, chest_ptr) )
  {
    *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 576, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 576),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      6680);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      (common::milog::MiLogStream *const)(v2 + 576),
      (const char (*)[27])"fromJson for: chest fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 640),
      "gear",
      (const std::allocator<char> *)(v2 + 64));
    gear_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
    std::string::~string((void *)(v2 + 640));
    *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( gear_ptr && !data::ConfigGear::fromJson(&this->gear, gear_ptr) )
    {
      *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 704, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 704),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        6692);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        (common::milog::MiLogStream *const)(v2 + 704),
        (const char (*)[26])"fromJson for: gear fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 768),
        "forceField",
        (const std::allocator<char> *)(v2 + 80));
      force_field_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
      std::string::~string((void *)(v2 + 768));
      *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( force_field_ptr )
      {
        *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        data::ConfigConstForceField::parseFromJson((const Json::Value *)(v2 + 480));
        v6 = std::shared_ptr<data::ConfigConstForceField>::operator=(
               &this->force_field,
               (std::shared_ptr<data::ConfigConstForceField> *)(v2 + 480));
        v7 = std::operator==<data::ConfigConstForceField>(v6, 0LL);
        std::shared_ptr<data::ConfigConstForceField>::~shared_ptr((std::shared_ptr<data::ConfigConstForceField> *const)(v2 + 480));
        *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -1800;
        if ( v7 )
        {
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 832, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 832),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            6706);
          common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
            (common::milog::MiLogStream *const)(v2 + 832),
            (const char (*)[32])"fromJson for: forceField fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
        }
      }
      else
      {
        *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        common::tools::perf::make_shared<data::ConfigConstForceField>();
        std::shared_ptr<data::ConfigConstForceField>::operator=(
          &this->force_field,
          (std::shared_ptr<data::ConfigConstForceField> *)(v2 + 448));
        std::shared_ptr<data::ConfigConstForceField>::~shared_ptr((std::shared_ptr<data::ConfigConstForceField> *const)(v2 + 448));
        *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -1800;
      }
      *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 96);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 896),
        "crystal",
        (const std::allocator<char> *)(v2 + 96));
      crystal_ptr = jsonValueFind(jval, (const std::string *)(v2 + 896));
      std::string::~string((void *)(v2 + 896));
      *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 96);
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      if ( crystal_ptr && !data::ConfigCrystal::fromJson(&this->crystal, crystal_ptr) )
      {
        *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 960, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 960),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          6717);
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
          (common::milog::MiLogStream *const)(v2 + 960),
          (const char (*)[29])"fromJson for: crystal fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 112);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 1024),
          "seal",
          (const std::allocator<char> *)(v2 + 112));
        seal_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1024));
        std::string::~string((void *)(v2 + 1024));
        *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 112);
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
        if ( seal_ptr && !data::ConfigSeal::fromJson(&this->seal, seal_ptr) )
        {
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1088, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1088),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            6729);
          common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
            (common::milog::MiLogStream *const)(v2 + 1088),
            (const char (*)[26])"fromJson for: seal fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 128);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 1152),
            "pickup",
            (const std::allocator<char> *)(v2 + 128));
          pickup_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1152));
          std::string::~string((void *)(v2 + 1152));
          *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 128);
          *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
          if ( pickup_ptr && !data::ConfigPickup::fromJson(&this->pickup, pickup_ptr) )
          {
            *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1216, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1216),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              6741);
            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              (common::milog::MiLogStream *const)(v2 + 1216),
              (const char (*)[28])"fromJson for: pickup fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 144);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1280),
              "windSeed",
              (const std::allocator<char> *)(v2 + 144));
            wind_seed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1280));
            std::string::~string((void *)(v2 + 1280));
            *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 144);
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
            if ( wind_seed_ptr && !data::ConfigWindSeed::fromJson(&this->wind_seed, wind_seed_ptr) )
            {
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1344, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1344),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                6753);
              common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                (common::milog::MiLogStream *const)(v2 + 1344),
                (const char (*)[30])"fromJson for: windSeed fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 160);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1408),
                "cannon",
                (const std::allocator<char> *)(v2 + 160));
              cannon_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1408));
              std::string::~string((void *)(v2 + 1408));
              *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 160);
              *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
              if ( cannon_ptr && !data::ConfigCannon::fromJson(&this->cannon, cannon_ptr) )
              {
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1472, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1472),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  6765);
                common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  (common::milog::MiLogStream *const)(v2 + 1472),
                  (const char (*)[28])"fromJson for: cannon fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 176);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1536),
                  "gadgetConsole",
                  (const std::allocator<char> *)(v2 + 176));
                gadget_console_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1536));
                std::string::~string((void *)(v2 + 1536));
                *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 176);
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                if ( gadget_console_ptr
                  && !data::ConfigGadgetConsole::fromJson(&this->gadget_console, gadget_console_ptr) )
                {
                  *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1600) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1631) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1600, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1600),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    6777);
                  common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                    (common::milog::MiLogStream *const)(v2 + 1600),
                    (const char (*)[35])"fromJson for: gadgetConsole fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1600));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 192);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1664),
                    "xmLens",
                    (const std::allocator<char> *)(v2 + 192));
                  xm_lens_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1664));
                  std::string::~string((void *)(v2 + 1664));
                  *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 192);
                  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                  if ( xm_lens_ptr && !data::ConfigXmLens::fromJson(&this->xm_lens, xm_lens_ptr) )
                  {
                    *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1728) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1759) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1759) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1728, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1728),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      6789);
                    common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                      (common::milog::MiLogStream *const)(v2 + 1728),
                      (const char (*)[28])"fromJson for: xmLens fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1728));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 208);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1792),
                      "autoDoor",
                      (const std::allocator<char> *)(v2 + 208));
                    auto_door_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1792));
                    std::string::~string((void *)(v2 + 1792));
                    *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 208);
                    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                    if ( auto_door_ptr && !data::ConfigAutoDool::fromJson(&this->auto_door, auto_door_ptr) )
                    {
                      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1856) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1887) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1887) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1856, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1856),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        6801);
                      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                        (common::milog::MiLogStream *const)(v2 + 1856),
                        (const char (*)[30])"fromJson for: autoDoor fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1856));
                      v5 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 224);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1920),
                        "customGadgetNode",
                        (const std::allocator<char> *)(v2 + 224));
                      custom_gadget_node_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1920));
                      std::string::~string((void *)(v2 + 1920));
                      *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 224);
                      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                      if ( custom_gadget_node_ptr
                        && !data::ConfigCustomGadgetNode::fromJson(&this->custom_gadget_node, custom_gadget_node_ptr) )
                      {
                        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1984) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2015) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1984, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1984),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          6813);
                        common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                          (common::milog::MiLogStream *const)(v2 + 1984),
                          (const char (*)[38])"fromJson for: customGadgetNode fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1984));
                        v5 = 0;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 240);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 2048),
                          "customGadgetDither",
                          (const std::allocator<char> *)(v2 + 240));
                        custom_gadget_dither_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2048));
                        std::string::~string((void *)(v2 + 2048));
                        *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 240);
                        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                        if ( custom_gadget_dither_ptr
                          && !data::ConfigCustomGadgetDither::fromJson(
                                &this->custom_gadget_dither,
                                custom_gadget_dither_ptr) )
                        {
                          *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 2112) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2143) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 2112, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 2112),
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/json_data_auto/ConfigEntity.cpp",
                            "fromJson",
                            6825);
                          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                            (common::milog::MiLogStream *const)(v2 + 2112),
                            (const char (*)[40])"fromJson for: customGadgetDither fails!");
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2112));
                          v5 = 0;
                        }
                        else
                        {
                          *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = 0;
                          *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
                          std::allocator<char>::allocator(v2 + 256);
                          std::string::basic_string<std::allocator<char>>(
                            (std::string *const)(v2 + 2176),
                            "customGadgetColliderControl",
                            (const std::allocator<char> *)(v2 + 256));
                          custom_gadget_collider_control_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2176));
                          std::string::~string((void *)(v2 + 2176));
                          *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = -117901064;
                          std::allocator<char>::~allocator(v2 + 256);
                          *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                          if ( custom_gadget_collider_control_ptr
                            && !data::ConfigCustomGadgetColliderControl::fromJson(
                                  &this->custom_gadget_collider_control,
                                  custom_gadget_collider_control_ptr) )
                          {
                            *(_DWORD *)(((v2 + 2240) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v2 + 2240) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v2 + 2271) >> 3) + 0x7FFF8000) != 0
                              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2271) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v2 + 2240, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v2 + 2240),
                              &common::milog::MiLogDefault::default_log_obj_,
                              3u,
                              "./src/json_data_auto/ConfigEntity.cpp",
                              "fromJson",
                              6837);
                            common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                              (common::milog::MiLogStream *const)(v2 + 2240),
                              (const char (*)[49])"fromJson for: customGadgetColliderControl fails!");
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2240));
                            v5 = 0;
                          }
                          else
                          {
                            *(_DWORD *)(((v2 + 2304) >> 3) + 0x7FFF8000) = 0;
                            *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
                            std::allocator<char>::allocator(v2 + 272);
                            std::string::basic_string<std::allocator<char>>(
                              (std::string *const)(v2 + 2304),
                              "escapeEffect",
                              (const std::allocator<char> *)(v2 + 272));
                            escape_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2304));
                            std::string::~string((void *)(v2 + 2304));
                            *(_DWORD *)(((v2 + 2304) >> 3) + 0x7FFF8000) = -117901064;
                            std::allocator<char>::~allocator(v2 + 272);
                            *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
                            if ( escape_effect_ptr && !fromJson<std::string>(escape_effect_ptr, &this->escape_effect) )
                            {
                              *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v2 + 2368) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) != 0
                                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2399) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v2 + 2368, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v2 + 2368),
                                &common::milog::MiLogDefault::default_log_obj_,
                                3u,
                                "./src/json_data_auto/ConfigEntity.cpp",
                                "fromJson",
                                6849);
                              common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                (common::milog::MiLogStream *const)(v2 + 2368),
                                (const char (*)[34])"fromJson for: escapeEffect fails!");
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2368));
                              v5 = 0;
                            }
                            else
                            {
                              *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = 0;
                              *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 1;
                              std::allocator<char>::allocator(v2 + 288);
                              std::string::basic_string<std::allocator<char>>(
                                (std::string *const)(v2 + 2432),
                                "guidePoint",
                                (const std::allocator<char> *)(v2 + 288));
                              guide_point_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2432));
                              std::string::~string((void *)(v2 + 2432));
                              *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = -117901064;
                              std::allocator<char>::~allocator(v2 + 288);
                              *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
                              if ( guide_point_ptr && !fromJson<bool>(guide_point_ptr, &this->guide_point) )
                              {
                                *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v2 + 2496) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2527) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v2 + 2496, 32LL);
                                }
                                common::milog::MiLogStream::create(
                                  (common::milog::MiLogStream *)(v2 + 2496),
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  3u,
                                  "./src/json_data_auto/ConfigEntity.cpp",
                                  "fromJson",
                                  6861);
                                common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                                  (common::milog::MiLogStream *const)(v2 + 2496),
                                  (const char (*)[32])"fromJson for: guidePoint fails!");
                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2496));
                                v5 = 0;
                              }
                              else
                              {
                                *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = 0;
                                *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 1;
                                std::allocator<char>::allocator(v2 + 304);
                                std::string::basic_string<std::allocator<char>>(
                                  (std::string *const)(v2 + 2560),
                                  "isUIPoint",
                                  (const std::allocator<char> *)(v2 + 304));
                                is_uipoint_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2560));
                                std::string::~string((void *)(v2 + 2560));
                                *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = -117901064;
                                std::allocator<char>::~allocator(v2 + 304);
                                *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
                                if ( is_uipoint_ptr && !fromJson<bool>(is_uipoint_ptr, &this->is_uipoint) )
                                {
                                  *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = 0;
                                  if ( *(char *)(((v2 + 2624) >> 3) + 0x7FFF8000) < 0
                                    || *(_BYTE *)(((v2 + 2655) >> 3) + 0x7FFF8000) != 0
                                    && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2655) >> 3) + 0x7FFF8000) )
                                  {
                                    __asan_report_store_n(v2 + 2624, 32LL);
                                  }
                                  common::milog::MiLogStream::create(
                                    (common::milog::MiLogStream *)(v2 + 2624),
                                    &common::milog::MiLogDefault::default_log_obj_,
                                    3u,
                                    "./src/json_data_auto/ConfigEntity.cpp",
                                    "fromJson",
                                    6873);
                                  common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                    (common::milog::MiLogStream *const)(v2 + 2624),
                                    (const char (*)[31])"fromJson for: isUIPoint fails!");
                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2624));
                                  v5 = 0;
                                }
                                else
                                {
                                  *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = 0;
                                  *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 1;
                                  std::allocator<char>::allocator(v2 + 320);
                                  std::string::basic_string<std::allocator<char>>(
                                    (std::string *const)(v2 + 2688),
                                    "guidePointManagedByIndicator",
                                    (const std::allocator<char> *)(v2 + 320));
                                  guide_point_managed_by_indicator_ptr = jsonValueFind(
                                                                           jval,
                                                                           (const std::string *)(v2 + 2688));
                                  std::string::~string((void *)(v2 + 2688));
                                  *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = -117901064;
                                  std::allocator<char>::~allocator(v2 + 320);
                                  *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
                                  if ( guide_point_managed_by_indicator_ptr
                                    && !fromJson<bool>(
                                          guide_point_managed_by_indicator_ptr,
                                          &this->guide_point_managed_by_indicator) )
                                  {
                                    *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(char *)(((v2 + 2752) >> 3) + 0x7FFF8000) < 0
                                      || *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) != 0
                                      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 2783) >> 3) + 0x7FFF8000) )
                                    {
                                      __asan_report_store_n(v2 + 2752, 32LL);
                                    }
                                    common::milog::MiLogStream::create(
                                      (common::milog::MiLogStream *)(v2 + 2752),
                                      &common::milog::MiLogDefault::default_log_obj_,
                                      3u,
                                      "./src/json_data_auto/ConfigEntity.cpp",
                                      "fromJson",
                                      6885);
                                    common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
                                      (common::milog::MiLogStream *const)(v2 + 2752),
                                      (const char (*)[50])"fromJson for: guidePointManagedByIndicator fails!");
                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2752));
                                    v5 = 0;
                                  }
                                  else
                                  {
                                    *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = 0;
                                    *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 1;
                                    std::allocator<char>::allocator(v2 + 336);
                                    std::string::basic_string<std::allocator<char>>(
                                      (std::string *const)(v2 + 2816),
                                      "guidePointType",
                                      (const std::allocator<char> *)(v2 + 336));
                                    guide_point_type_ptr = (Json::Value *)jsonValueFind(
                                                                            jval,
                                                                            (const std::string *)(v2 + 2816));
                                    std::string::~string((void *)(v2 + 2816));
                                    *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = -117901064;
                                    std::allocator<char>::~allocator(v2 + 336);
                                    *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
                                    if ( !guide_point_type_ptr )
                                      goto LABEL_106;
                                    *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(char *)(((v2 + 2880) >> 3) + 0x7FFF8000) < 0
                                      || *(_BYTE *)(((v2 + 2911) >> 3) + 0x7FFF8000) != 0
                                      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 2911) >> 3) + 0x7FFF8000) )
                                    {
                                      __asan_report_store_n(v2 + 2880, 32LL);
                                    }
                                    Json::Value::asString[abi:cxx11](
                                      (Json::String *)(v2 + 2880),
                                      (Json::Value_0 *)guide_point_type_ptr);
                                    v8 = !data::enumStrToVal((const std::string *)(v2 + 2880), &this->guide_point_type);
                                    std::string::~string((void *)(v2 + 2880));
                                    *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = -117901064;
                                    if ( v8 )
                                    {
                                      *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = 0;
                                      if ( *(char *)(((v2 + 2944) >> 3) + 0x7FFF8000) < 0
                                        || *(_BYTE *)(((v2 + 2975) >> 3) + 0x7FFF8000) != 0
                                        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2975) >> 3) + 0x7FFF8000) )
                                      {
                                        __asan_report_store_n(v2 + 2944, 32LL);
                                      }
                                      common::milog::MiLogStream::create(
                                        (common::milog::MiLogStream *)(v2 + 2944),
                                        &common::milog::MiLogDefault::default_log_obj_,
                                        3u,
                                        "./src/json_data_auto/ConfigEntity.cpp",
                                        "fromJson",
                                        6897);
                                      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                        (common::milog::MiLogStream *const)(v2 + 2944),
                                        (const char (*)[36])"fromJson for: guidePointType fails!");
                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2944));
                                      v5 = 0;
                                    }
                                    else
                                    {
LABEL_106:
                                      *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = 0;
                                      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 1;
                                      std::allocator<char>::allocator(v2 + 352);
                                      std::string::basic_string<std::allocator<char>>(
                                        (std::string *const)(v2 + 3008),
                                        "targetIndicatorYOffset",
                                        (const std::allocator<char> *)(v2 + 352));
                                      target_indicator_yoffset_ptr = jsonValueFind(
                                                                       jval,
                                                                       (const std::string *)(v2 + 3008));
                                      std::string::~string((void *)(v2 + 3008));
                                      *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = -117901064;
                                      std::allocator<char>::~allocator(v2 + 352);
                                      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
                                      if ( target_indicator_yoffset_ptr
                                        && !fromJson<float>(
                                              target_indicator_yoffset_ptr,
                                              &this->target_indicator_yoffset) )
                                      {
                                        *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(char *)(((v2 + 3072) >> 3) + 0x7FFF8000) < 0
                                          || *(_BYTE *)(((v2 + 3103) >> 3) + 0x7FFF8000) != 0
                                          && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 3103) >> 3) + 0x7FFF8000) )
                                        {
                                          __asan_report_store_n(v2 + 3072, 32LL);
                                        }
                                        common::milog::MiLogStream::create(
                                          (common::milog::MiLogStream *)(v2 + 3072),
                                          &common::milog::MiLogDefault::default_log_obj_,
                                          3u,
                                          "./src/json_data_auto/ConfigEntity.cpp",
                                          "fromJson",
                                          6909);
                                        common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                                          (common::milog::MiLogStream *const)(v2 + 3072),
                                          (const char (*)[44])"fromJson for: targetIndicatorYOffset fails!");
                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3072));
                                        v5 = 0;
                                      }
                                      else
                                      {
                                        *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = 0;
                                        *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = 1;
                                        std::allocator<char>::allocator(v2 + 368);
                                        std::string::basic_string<std::allocator<char>>(
                                          (std::string *const)(v2 + 3136),
                                          "guidePointConfig",
                                          (const std::allocator<char> *)(v2 + 368));
                                        guide_point_config_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3136));
                                        std::string::~string((void *)(v2 + 3136));
                                        *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = -117901064;
                                        std::allocator<char>::~allocator(v2 + 368);
                                        *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
                                        if ( guide_point_config_ptr
                                          && !data::ConfigGuidePoint::fromJson(
                                                &this->guide_point_config,
                                                guide_point_config_ptr) )
                                        {
                                          *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(char *)(((v2 + 3200) >> 3) + 0x7FFF8000) < 0
                                            || *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) != 0
                                            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) )
                                          {
                                            __asan_report_store_n(v2 + 3200, 32LL);
                                          }
                                          common::milog::MiLogStream::create(
                                            (common::milog::MiLogStream *)(v2 + 3200),
                                            &common::milog::MiLogDefault::default_log_obj_,
                                            3u,
                                            "./src/json_data_auto/ConfigEntity.cpp",
                                            "fromJson",
                                            6921);
                                          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                                            (common::milog::MiLogStream *const)(v2 + 3200),
                                            (const char (*)[38])"fromJson for: guidePointConfig fails!");
                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3200));
                                          v5 = 0;
                                        }
                                        else
                                        {
                                          *(_DWORD *)(((v2 + 3264) >> 3) + 0x7FFF8000) = 0;
                                          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 1;
                                          std::allocator<char>::allocator(v2 + 384);
                                          std::string::basic_string<std::allocator<char>>(
                                            (std::string *const)(v2 + 3264),
                                            "hasAvatarCrashDamage",
                                            (const std::allocator<char> *)(v2 + 384));
                                          has_avatar_crash_damage_ptr = jsonValueFind(
                                                                          jval,
                                                                          (const std::string *)(v2 + 3264));
                                          std::string::~string((void *)(v2 + 3264));
                                          *(_DWORD *)(((v2 + 3264) >> 3) + 0x7FFF8000) = -117901064;
                                          std::allocator<char>::~allocator(v2 + 384);
                                          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
                                          if ( has_avatar_crash_damage_ptr
                                            && !fromJson<bool>(
                                                  has_avatar_crash_damage_ptr,
                                                  &this->has_avatar_crash_damage) )
                                          {
                                            *(_DWORD *)(((v2 + 3328) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(char *)(((v2 + 3328) >> 3) + 0x7FFF8000) < 0
                                              || *(_BYTE *)(((v2 + 3359) >> 3) + 0x7FFF8000) != 0
                                              && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 3359) >> 3) + 0x7FFF8000) )
                                            {
                                              __asan_report_store_n(v2 + 3328, 32LL);
                                            }
                                            common::milog::MiLogStream::create(
                                              (common::milog::MiLogStream *)(v2 + 3328),
                                              &common::milog::MiLogDefault::default_log_obj_,
                                              3u,
                                              "./src/json_data_auto/ConfigEntity.cpp",
                                              "fromJson",
                                              6933);
                                            common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                              (common::milog::MiLogStream *const)(v2 + 3328),
                                              (const char (*)[42])"fromJson for: hasAvatarCrashDamage fails!");
                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3328));
                                            v5 = 0;
                                          }
                                          else
                                          {
                                            *(_DWORD *)(((v2 + 3392) >> 3) + 0x7FFF8000) = 0;
                                            *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = 1;
                                            std::allocator<char>::allocator(v2 + 400);
                                            std::string::basic_string<std::allocator<char>>(
                                              (std::string *const)(v2 + 3392),
                                              "hasAvatarFallOnGroundRoll",
                                              (const std::allocator<char> *)(v2 + 400));
                                            has_avatar_fall_on_ground_roll_ptr = jsonValueFind(
                                                                                   jval,
                                                                                   (const std::string *)(v2 + 3392));
                                            std::string::~string((void *)(v2 + 3392));
                                            *(_DWORD *)(((v2 + 3392) >> 3) + 0x7FFF8000) = -117901064;
                                            std::allocator<char>::~allocator(v2 + 400);
                                            *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
                                            if ( has_avatar_fall_on_ground_roll_ptr
                                              && !fromJson<bool>(
                                                    has_avatar_fall_on_ground_roll_ptr,
                                                    &this->has_avatar_fall_on_ground_roll) )
                                            {
                                              *(_DWORD *)(((v2 + 3456) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(char *)(((v2 + 3456) >> 3) + 0x7FFF8000) < 0
                                                || *(_BYTE *)(((v2 + 3487) >> 3) + 0x7FFF8000) != 0
                                                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3487) >> 3) + 0x7FFF8000) )
                                              {
                                                __asan_report_store_n(v2 + 3456, 32LL);
                                              }
                                              common::milog::MiLogStream::create(
                                                (common::milog::MiLogStream *)(v2 + 3456),
                                                &common::milog::MiLogDefault::default_log_obj_,
                                                3u,
                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                "fromJson",
                                                6945);
                                              common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                                                (common::milog::MiLogStream *const)(v2 + 3456),
                                                (const char (*)[47])"fromJson for: hasAvatarFallOnGroundRoll fails!");
                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3456));
                                              v5 = 0;
                                            }
                                            else
                                            {
                                              *(_DWORD *)(((v2 + 3520) >> 3) + 0x7FFF8000) = 0;
                                              *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 1;
                                              std::allocator<char>::allocator(v2 + 416);
                                              std::string::basic_string<std::allocator<char>>(
                                                (std::string *const)(v2 + 3520),
                                                "needTurnGrey",
                                                (const std::allocator<char> *)(v2 + 416));
                                              need_turn_grey_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3520));
                                              std::string::~string((void *)(v2 + 3520));
                                              *(_DWORD *)(((v2 + 3520) >> 3) + 0x7FFF8000) = -117901064;
                                              std::allocator<char>::~allocator(v2 + 416);
                                              *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
                                              if ( need_turn_grey_ptr
                                                && !fromJson<bool>(need_turn_grey_ptr, &this->need_turn_grey) )
                                              {
                                                *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(char *)(((v2 + 3584) >> 3) + 0x7FFF8000) < 0
                                                  || *(_BYTE *)(((v2 + 3615) >> 3) + 0x7FFF8000) != 0
                                                  && (char)((v2 - 64 + 95) & 7) >= *(_BYTE *)(((v2 + 3615) >> 3)
                                                                                            + 0x7FFF8000) )
                                                {
                                                  __asan_report_store_n(v2 + 3584, 32LL);
                                                }
                                                common::milog::MiLogStream::create(
                                                  (common::milog::MiLogStream *)(v2 + 3584),
                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                  3u,
                                                  "./src/json_data_auto/ConfigEntity.cpp",
                                                  "fromJson",
                                                  6957);
                                                common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                  (common::milog::MiLogStream *const)(v2 + 3584),
                                                  (const char (*)[34])"fromJson for: needTurnGrey fails!");
                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3584));
                                                v5 = 0;
                                              }
                                              else
                                              {
                                                *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = 0;
                                                *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 1;
                                                std::allocator<char>::allocator(v2 + 432);
                                                std::string::basic_string<std::allocator<char>>(
                                                  (std::string *const)(v2 + 3648),
                                                  "disableDuration",
                                                  (const std::allocator<char> *)(v2 + 432));
                                                p_disable_duration = (float *)(v2 + 3648);
                                                disable_duration_ptr = jsonValueFind(
                                                                         jval,
                                                                         (const std::string *)(v2 + 3648));
                                                std::string::~string((void *)(v2 + 3648));
                                                *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = -117901064;
                                                std::allocator<char>::~allocator(v2 + 432);
                                                *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
                                                if ( disable_duration_ptr
                                                  && (p_disable_duration = &this->disable_duration,
                                                      !fromJson<float>(disable_duration_ptr, &this->disable_duration)) )
                                                {
                                                  *(_DWORD *)(((v2 + 3712) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(char *)(((v2 + 3712) >> 3) + 0x7FFF8000) < 0
                                                    || *(_BYTE *)(((v2 + 3743) >> 3) + 0x7FFF8000) != 0
                                                    && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3743) >> 3)
                                                                                         + 0x7FFF8000) )
                                                  {
                                                    __asan_report_store_n(v2 + 3712, 32LL);
                                                  }
                                                  common::milog::MiLogStream::create(
                                                    (common::milog::MiLogStream *)(v2 + 3712),
                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                    3u,
                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                    "fromJson",
                                                    6969);
                                                  common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                                                    (common::milog::MiLogStream *const)(v2 + 3712),
                                                    (const char (*)[37])"fromJson for: disableDuration fails!");
                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3712));
                                                  v5 = 0;
                                                }
                                                else
                                                {
                                                  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3)
                                                               + 0x7FFF8000) < 0 )
                                                    __asan_report_store1(
                                                      &this->is_json_loaded,
                                                      p_disable_duration,
                                                      &this->is_json_loaded);
                                                  this->is_json_loaded = 1;
                                                  v5 = 1;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v10 = v5;
  if ( v38 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8084) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF808C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8094) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF809C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80AC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80BC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80C4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80CC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80D4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80DC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80EC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80F4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80FC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8104) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF810C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8114) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF811C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8124) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF812C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8134) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF813C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8144) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF814C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8154) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF815C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8164) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF816C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8174) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF817C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8184) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF818C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8194) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF819C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81A4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81AC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81B4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81BC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81C4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81CC) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81D4) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 3776LL, v38);
  }
  return v10;
};

// Line 6977: range 000000000E65B624-000000000E65BCAA
int32_t __cdecl data::ConfigGadgetMisc::getHashValue(const data::ConfigGadgetMisc *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t v6; // eax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  int32_t v9; // eax
  int32_t v10; // eax
  int32_t v11; // eax
  int32_t v12; // eax
  int32_t v13; // eax
  int32_t v14; // eax
  int32_t v15; // eax
  int32_t v16; // eax
  int32_t v17; // eax
  int32_t v18; // eax
  int32_t v19; // eax
  int32_t v20; // eax
  __int64 v21; // rsi
  __int64 v22; // rdx
  __int64 v23; // rsi
  __int64 v24; // rdx
  int32_t v25; // eax
  __int64 v26; // rsi
  __int64 v27; // rdx
  __int64 v28; // rsi
  __int64 v29; // rdx
  int32_t result; // eax
  char v31[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v31;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:6978";
  *(_QWORD *)(v2 + 16) = data::ConfigGadgetMisc::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigChest::getHashValue(&this->chest);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  v6 = data::ConfigGear::getHashValue(&this->gear);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigConstForceField>(0LL, &this->force_field) )
  {
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigConstForceField,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigConstForceField,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->force_field);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 56LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 56LL);
    v9 = (*(__int64 (__fastcall **)(unsigned __int64))v8)(v7);
    common::tools::HashUtils::appendHash(v9, (int32_t *)(v2 + 32));
  }
  v10 = data::ConfigCrystal::getHashValue(&this->crystal);
  common::tools::HashUtils::appendHash(v10, (int32_t *)(v2 + 32));
  v11 = data::ConfigSeal::getHashValue(&this->seal);
  common::tools::HashUtils::appendHash(v11, (int32_t *)(v2 + 32));
  v12 = data::ConfigPickup::getHashValue(&this->pickup);
  common::tools::HashUtils::appendHash(v12, (int32_t *)(v2 + 32));
  v13 = data::ConfigWindSeed::getHashValue(&this->wind_seed);
  common::tools::HashUtils::appendHash(v13, (int32_t *)(v2 + 32));
  v14 = data::ConfigCannon::getHashValue(&this->cannon);
  common::tools::HashUtils::appendHash(v14, (int32_t *)(v2 + 32));
  v15 = data::ConfigGadgetConsole::getHashValue(&this->gadget_console);
  common::tools::HashUtils::appendHash(v15, (int32_t *)(v2 + 32));
  v16 = data::ConfigXmLens::getHashValue(&this->xm_lens);
  common::tools::HashUtils::appendHash(v16, (int32_t *)(v2 + 32));
  v17 = data::ConfigAutoDool::getHashValue(&this->auto_door);
  common::tools::HashUtils::appendHash(v17, (int32_t *)(v2 + 32));
  v18 = data::ConfigCustomGadgetNode::getHashValue(&this->custom_gadget_node);
  common::tools::HashUtils::appendHash(v18, (int32_t *)(v2 + 32));
  v19 = data::ConfigCustomGadgetDither::getHashValue(&this->custom_gadget_dither);
  common::tools::HashUtils::appendHash(v19, (int32_t *)(v2 + 32));
  v20 = data::ConfigCustomGadgetColliderControl::getHashValue(&this->custom_gadget_collider_control);
  common::tools::HashUtils::appendHash(v20, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->escape_effect, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->guide_point >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->guide_point, v2 + 32, &this->guide_point);
  common::tools::HashUtils::appendHash(this->guide_point, (int32_t *)(v2 + 32));
  v21 = ((_BYTE)this + 1) & 7;
  v22 = (*(_BYTE *)(((unsigned __int64)&this->is_uipoint >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v21 >= *(_BYTE *)(((unsigned __int64)&this->is_uipoint >> 3) + 0x7FFF8000));
  if ( (_BYTE)v22 )
    __asan_report_load1(&this->is_uipoint, v21, v22);
  common::tools::HashUtils::appendHash(this->is_uipoint, (int32_t *)(v2 + 32));
  v23 = ((_BYTE)this + 2) & 7;
  v24 = (*(_BYTE *)(((unsigned __int64)&this->guide_point_managed_by_indicator >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v23 >= *(_BYTE *)(((unsigned __int64)&this->guide_point_managed_by_indicator >> 3) + 0x7FFF8000));
  if ( (_BYTE)v24 )
    __asan_report_load1(&this->guide_point_managed_by_indicator, v23, v24);
  common::tools::HashUtils::appendHash(this->guide_point_managed_by_indicator, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->guide_point_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->guide_point_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->guide_point_type);
  }
  common::tools::HashUtils::appendHash(this->guide_point_type, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->target_indicator_yoffset >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_indicator_yoffset >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->target_indicator_yoffset);
  }
  common::tools::HashUtils::appendHash(this->target_indicator_yoffset, (int32_t *)(v2 + 32));
  v25 = data::ConfigGuidePoint::getHashValue(&this->guide_point_config);
  common::tools::HashUtils::appendHash(v25, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->has_avatar_crash_damage >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->has_avatar_crash_damage, v2 + 32, &this->has_avatar_crash_damage);
  common::tools::HashUtils::appendHash(this->has_avatar_crash_damage, (int32_t *)(v2 + 32));
  v26 = ((_BYTE)this + 121) & 7;
  v27 = (*(_BYTE *)(((unsigned __int64)&this->has_avatar_fall_on_ground_roll >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v26 >= *(_BYTE *)(((unsigned __int64)&this->has_avatar_fall_on_ground_roll >> 3) + 0x7FFF8000));
  if ( (_BYTE)v27 )
    __asan_report_load1(&this->has_avatar_fall_on_ground_roll, v26, v27);
  common::tools::HashUtils::appendHash(this->has_avatar_fall_on_ground_roll, (int32_t *)(v2 + 32));
  v28 = ((_BYTE)this + 122) & 7;
  v29 = (*(_BYTE *)(((unsigned __int64)&this->need_turn_grey >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v28 >= *(_BYTE *)(((unsigned __int64)&this->need_turn_grey >> 3) + 0x7FFF8000));
  if ( (_BYTE)v29 )
    __asan_report_load1(&this->need_turn_grey, v28, v29);
  common::tools::HashUtils::appendHash(this->need_turn_grey, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->disable_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->disable_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->disable_duration);
  }
  common::tools::HashUtils::appendHash(this->disable_duration, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v31 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7011: range 000000000E65BCAB-000000000E65BF28
const char *__cdecl data::enumValToStr(data::ControlPartForwardBy e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e == NamedTransform )
  {
    result = "NamedTransform";
  }
  else
  {
    if ( e > NamedTransform )
      goto LABEL_22;
    if ( e == Parent )
    {
      result = "Parent";
      goto LABEL_17;
    }
    if ( e == EntityForward )
    {
      result = "EntityForward";
    }
    else
    {
LABEL_22:
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        7021);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
LABEL_17:
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7027: range 000000000E65BF29-000000000E65C80A
bool __cdecl data::enumStrToVal(const std::string *s, data::ControlPartForwardBy *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::ControlPartForwardBy> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartForwardBy> >::pointer v11; // rax
  data::ControlPartForwardBy second; // ecx
  char v13; // dl
  data::ControlPartForwardBy *ea; // [rsp+10h] [rbp-220h]
  char v15[528]; // [rsp+20h] [rbp-210h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 8 7"
                        " it:7039 160 8 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 120 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      7030);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::ControlPartForwardBy>::pair<char const(&)[7],data::ControlPartForwardBy,true>(
        (std::pair<const std::string,data::ControlPartForwardBy> *const)(v2 + 320),
        (const char (*)[7])"Parent",
        (data::ControlPartForwardBy *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "Parent");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::ControlPartForwardBy>::pair<char const(&)[14],data::ControlPartForwardBy,true>(
        (std::pair<const std::string,data::ControlPartForwardBy> *const)(v2 + 360),
        (const char (*)[14])"EntityForward",
        (data::ControlPartForwardBy *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "EntityForward");
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::ControlPartForwardBy>::pair<char const(&)[15],data::ControlPartForwardBy,true>(
        (std::pair<const std::string,data::ControlPartForwardBy> *const)(v2 + 400),
        (const char (*)[15])"NamedTransform",
        (data::ControlPartForwardBy *)(v2 + 112));
      std::allocator<std::pair<std::string const,data::ControlPartForwardBy>>::allocator((std::allocator<std::pair<const std::string,data::ControlPartForwardBy> > *const)(v2 + 64));
      std::map<std::string,data::ControlPartForwardBy>::map(
        &data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m,
        (std::initializer_list<std::pair<const std::string,data::ControlPartForwardBy> >)__PAIR128__(3LL, v2 + 320),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::ControlPartForwardBy>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m);
      e = (data::ControlPartForwardBy *)&data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::ControlPartForwardBy>::~map,
        &data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ControlPartForwardBy>>::~allocator((std::allocator<std::pair<const std::string,data::ControlPartForwardBy> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ControlPartForwardBy> *)(v2 + 440);
            i != (std::pair<const std::string,data::ControlPartForwardBy> *)(v2 + 320);
            std::pair<std::string const,data::ControlPartForwardBy>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 320) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_WORD *)(v7 + 12) = -1800;
      *(_BYTE *)(v7 + 14) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, e);
    *(std::map<std::string,data::ControlPartForwardBy>::iterator *)(v2 + 128) = std::map<std::string,data::ControlPartForwardBy>::find(
                                                                                  &data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m,
                                                                                  s);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, s);
    *(std::map<std::string,data::ControlPartForwardBy>::iterator *)(v2 + 160) = std::map<std::string,data::ControlPartForwardBy>::end(&data::enumStrToVal(std::string const&,data::ControlPartForwardBy &)::m);
    v8 = (char *)(v2 + 160);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartForwardBy> >::_Self *)(v2 + 128),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartForwardBy> >::_Self *)(v2 + 160));
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        7042);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 256),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::ControlPartForwardBy>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartForwardBy> > *const)(v2 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 7050: range 000000000E65C80B-000000000E65C84F
const char *__cdecl data::getDescription(data::ControlPartForwardBy e)
{
  if ( e == NamedTransform )
    return (const char *)&unk_1A3C41A0;
  if ( e > NamedTransform )
    return "unknown enum value!";
  if ( e == Parent )
    return (const char *)&unk_1A3C4120;
  if ( e == EntityForward )
    return (const char *)&unk_1A3C4160;
  else
    return "unknown enum value!";
};

// Line 7065: range 000000000E65C850-000000000E65CAAF
const char *__cdecl data::enumValToStr(data::ControlPartRotateBy e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e )
  {
    if ( e == ForwardTransLocal )
    {
      result = "ForwardTransLocal";
    }
    else
    {
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        7073);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
  else
  {
    result = "WorldXZ";
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7079: range 000000000E65CAB0-000000000E65D2E7
bool __cdecl data::enumStrToVal(const std::string *s, data::ControlPartRotateBy *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::ControlPartRotateBy> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartRotateBy> >::pointer v11; // rax
  data::ControlPartRotateBy second; // ecx
  char v13; // dl
  data::ControlPartRotateBy *ea; // [rsp+10h] [rbp-1E0h]
  char v15[464]; // [rsp+20h] [rbp-1D0h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(416LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 8 7 it:7090 144 8 9 <u"
                        "nknown> 176 32 9 <unknown> 240 32 9 <unknown> 304 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862732] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 176, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 176),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      7082);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 176),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::ControlPartRotateBy>::pair<char const(&)[8],data::ControlPartRotateBy,true>(
        (std::pair<const std::string,data::ControlPartRotateBy> *const)(v2 + 304),
        (const char (*)[8])"WorldXZ",
        (data::ControlPartRotateBy *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "WorldXZ");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::ControlPartRotateBy>::pair<char const(&)[18],data::ControlPartRotateBy,true>(
        (std::pair<const std::string,data::ControlPartRotateBy> *const)(v2 + 344),
        (const char (*)[18])"ForwardTransLocal",
        (data::ControlPartRotateBy *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::ControlPartRotateBy>>::allocator((std::allocator<std::pair<const std::string,data::ControlPartRotateBy> > *const)(v2 + 64));
      std::map<std::string,data::ControlPartRotateBy>::map(
        &data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m,
        (std::initializer_list<std::pair<const std::string,data::ControlPartRotateBy> >)__PAIR128__(2LL, v2 + 304),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::ControlPartRotateBy>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m);
      e = (data::ControlPartRotateBy *)&data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::ControlPartRotateBy>::~map,
        &data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ControlPartRotateBy>>::~allocator((std::allocator<std::pair<const std::string,data::ControlPartRotateBy> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ControlPartRotateBy> *)(v2 + 384);
            i != (std::pair<const std::string,data::ControlPartRotateBy> *)(v2 + 304);
            std::pair<std::string const,data::ControlPartRotateBy>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 304) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, e);
    *(std::map<std::string,data::ControlPartRotateBy>::iterator *)(v2 + 112) = std::map<std::string,data::ControlPartRotateBy>::find(
                                                                                 &data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m,
                                                                                 s);
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, s);
    *(std::map<std::string,data::ControlPartRotateBy>::iterator *)(v2 + 144) = std::map<std::string,data::ControlPartRotateBy>::end(&data::enumStrToVal(std::string const&,data::ControlPartRotateBy &)::m);
    v8 = (char *)(v2 + 144);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartRotateBy> >::_Self *)(v2 + 112),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartRotateBy> >::_Self *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 111) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        7093);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::ControlPartRotateBy>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartRotateBy> > *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 7101: range 000000000E65D2E8-000000000E65D317
const char *__cdecl data::getDescription(data::ControlPartRotateBy e)
{
  if ( e == WorldXZ )
    return (const char *)&unk_1A3C4320;
  if ( e == ForwardTransLocal )
    return (const char *)&unk_1A3C4360;
  return "unknown enum value!";
};

// Line 7114: range 000000000E65D318-000000000E65D595
const char *__cdecl data::enumValToStr(data::ControlPartDoOnUnEnabled e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e == RotateToForward )
  {
    result = "RotateToForward";
  }
  else
  {
    if ( e > RotateToForward )
      goto LABEL_22;
    if ( e == Stay )
    {
      result = "Stay";
      goto LABEL_17;
    }
    if ( e == ToForwardImmediately )
    {
      result = "ToForwardImmediately";
    }
    else
    {
LABEL_22:
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        7124);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
LABEL_17:
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7130: range 000000000E65D596-000000000E65DE77
bool __cdecl data::enumStrToVal(const std::string *s, data::ControlPartDoOnUnEnabled *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::ControlPartDoOnUnEnabled> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartDoOnUnEnabled> >::pointer v11; // rax
  data::ControlPartDoOnUnEnabled second; // ecx
  char v13; // dl
  data::ControlPartDoOnUnEnabled *ea; // [rsp+10h] [rbp-220h]
  char v15[528]; // [rsp+20h] [rbp-210h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 8 7"
                        " it:7142 160 8 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 120 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = -234556924;
  v4[536862724] = -218959360;
  v4[536862725] = -218959360;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      7133);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::ControlPartDoOnUnEnabled>::pair<char const(&)[5],data::ControlPartDoOnUnEnabled,true>(
        (std::pair<const std::string,data::ControlPartDoOnUnEnabled> *const)(v2 + 320),
        (const char (*)[5])"Stay",
        (data::ControlPartDoOnUnEnabled *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "Stay");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::ControlPartDoOnUnEnabled>::pair<char const(&)[21],data::ControlPartDoOnUnEnabled,true>(
        (std::pair<const std::string,data::ControlPartDoOnUnEnabled> *const)(v2 + 360),
        (const char (*)[21])"ToForwardImmediately",
        (data::ControlPartDoOnUnEnabled *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "ToForwardImmediately");
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::ControlPartDoOnUnEnabled>::pair<char const(&)[16],data::ControlPartDoOnUnEnabled,true>(
        (std::pair<const std::string,data::ControlPartDoOnUnEnabled> *const)(v2 + 400),
        (const char (*)[16])"RotateToForward",
        (data::ControlPartDoOnUnEnabled *)(v2 + 112));
      std::allocator<std::pair<std::string const,data::ControlPartDoOnUnEnabled>>::allocator((std::allocator<std::pair<const std::string,data::ControlPartDoOnUnEnabled> > *const)(v2 + 64));
      std::map<std::string,data::ControlPartDoOnUnEnabled>::map(
        &data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m,
        (std::initializer_list<std::pair<const std::string,data::ControlPartDoOnUnEnabled> >)__PAIR128__(3LL, v2 + 320),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::ControlPartDoOnUnEnabled>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m);
      e = (data::ControlPartDoOnUnEnabled *)&data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::ControlPartDoOnUnEnabled>::~map,
        &data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ControlPartDoOnUnEnabled>>::~allocator((std::allocator<std::pair<const std::string,data::ControlPartDoOnUnEnabled> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ControlPartDoOnUnEnabled> *)(v2 + 440);
            i != (std::pair<const std::string,data::ControlPartDoOnUnEnabled> *)(v2 + 320);
            std::pair<std::string const,data::ControlPartDoOnUnEnabled>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 320) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_WORD *)(v7 + 12) = -1800;
      *(_BYTE *)(v7 + 14) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 128, e);
    *(std::map<std::string,data::ControlPartDoOnUnEnabled>::iterator *)(v2 + 128) = std::map<std::string,data::ControlPartDoOnUnEnabled>::find(
                                                                                      &data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m,
                                                                                      s);
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, s);
    *(std::map<std::string,data::ControlPartDoOnUnEnabled>::iterator *)(v2 + 160) = std::map<std::string,data::ControlPartDoOnUnEnabled>::end(&data::enumStrToVal(std::string const&,data::ControlPartDoOnUnEnabled &)::m);
    v8 = (char *)(v2 + 160);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartDoOnUnEnabled> >::_Self *)(v2 + 128),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartDoOnUnEnabled> >::_Self *)(v2 + 160));
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 63) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        7145);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 256),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::ControlPartDoOnUnEnabled>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartDoOnUnEnabled> > *const)(v2 + 128));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 7153: range 000000000E65DE78-000000000E65DEBC
const char *__cdecl data::getDescription(data::ControlPartDoOnUnEnabled e)
{
  if ( e == RotateToForward )
    return (const char *)&unk_1A3C45A0;
  if ( e > RotateToForward )
    return "unknown enum value!";
  if ( e == Stay )
    return (const char *)&unk_1A3C4520;
  if ( e == ToForwardImmediately )
    return (const char *)&unk_1A3C4560;
  else
    return "unknown enum value!";
};

// Line 7168: range 000000000E65DEBD-000000000E65E11C
const char *__cdecl data::enumValToStr(data::ControlPartTargetType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e )
  {
    if ( e == ActionSetTarget )
    {
      result = "ActionSetTarget";
    }
    else
    {
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        7176);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
  else
  {
    result = "AIThreatTarget";
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7182: range 000000000E65E11D-000000000E65E954
bool __cdecl data::enumStrToVal(const std::string *s, data::ControlPartTargetType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::ControlPartTargetType> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartTargetType> >::pointer v11; // rax
  data::ControlPartTargetType second; // ecx
  char v13; // dl
  data::ControlPartTargetType *ea; // [rsp+10h] [rbp-1E0h]
  char v15[464]; // [rsp+20h] [rbp-1D0h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(416LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 8 7 it:7193 144 8 9 <u"
                        "nknown> 176 32 9 <unknown> 240 32 9 <unknown> 304 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862732] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 176, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 176),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      7185);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 176),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::ControlPartTargetType>::pair<char const(&)[15],data::ControlPartTargetType,true>(
        (std::pair<const std::string,data::ControlPartTargetType> *const)(v2 + 304),
        (const char (*)[15])"AIThreatTarget",
        (data::ControlPartTargetType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, "AIThreatTarget");
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::ControlPartTargetType>::pair<char const(&)[16],data::ControlPartTargetType,true>(
        (std::pair<const std::string,data::ControlPartTargetType> *const)(v2 + 344),
        (const char (*)[16])"ActionSetTarget",
        (data::ControlPartTargetType *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::ControlPartTargetType>>::allocator((std::allocator<std::pair<const std::string,data::ControlPartTargetType> > *const)(v2 + 64));
      std::map<std::string,data::ControlPartTargetType>::map(
        &data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m,
        (std::initializer_list<std::pair<const std::string,data::ControlPartTargetType> >)__PAIR128__(2LL, v2 + 304),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::ControlPartTargetType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m);
      e = (data::ControlPartTargetType *)&data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::ControlPartTargetType>::~map,
        &data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ControlPartTargetType>>::~allocator((std::allocator<std::pair<const std::string,data::ControlPartTargetType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ControlPartTargetType> *)(v2 + 384);
            i != (std::pair<const std::string,data::ControlPartTargetType> *)(v2 + 304);
            std::pair<std::string const,data::ControlPartTargetType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 304) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, e);
    *(std::map<std::string,data::ControlPartTargetType>::iterator *)(v2 + 112) = std::map<std::string,data::ControlPartTargetType>::find(
                                                                                   &data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m,
                                                                                   s);
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, s);
    *(std::map<std::string,data::ControlPartTargetType>::iterator *)(v2 + 144) = std::map<std::string,data::ControlPartTargetType>::end(&data::enumStrToVal(std::string const&,data::ControlPartTargetType &)::m);
    v8 = (char *)(v2 + 144);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartTargetType> >::_Self *)(v2 + 112),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartTargetType> >::_Self *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 111) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        7196);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::ControlPartTargetType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::ControlPartTargetType> > *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 7204: range 000000000E65E955-000000000E65E984
const char *__cdecl data::getDescription(data::ControlPartTargetType e)
{
  if ( e == AIThreatTarget )
    return (const char *)&unk_1A3C4720;
  if ( e == ActionSetTarget )
    return (const char *)&unk_1A3C4760;
  return "unknown enum value!";
};

// Line 7218: range 000000000E65E985-000000000E65EBBA
data::ConfigControlPartPtr __cdecl data::createConfigControlPart(const std::string *name)
{
  const std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::key_type *v1; // rsi
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > > *v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool v5; // al
  std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > >::pointer v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  void (__fastcall *v9)(const std::string *, unsigned __int64); // rcx
  data::ConfigControlPartPtr result; // rax
  char v11[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > > *)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > > *)v3;
  }
  v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > >::_Base_ptr)1102416563;
  v2[1]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > >::_Base_ptr)"2 32 8 7 it:7219 64 8 9 <unknown>";
  v2[2]._M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > >::_Base_ptr)data::createConfigControlPart;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  if ( *(_BYTE *)(((unsigned __int64)&v2[4] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[4], v1);
  v2[4]._M_node = std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::find(
                    &data::g_ConfigControlPartMap[abi:cxx11],
                    v1)._M_node;
  if ( *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) )
    __asan_report_store8(&v2[8], v1);
  v2[8]._M_node = std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::end(&data::g_ConfigControlPartMap[abi:cxx11])._M_node;
  v5 = std::operator!=(v2 + 4, v2 + 8);
  *(_BYTE *)(((unsigned __int64)&v2[8] >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    v6 = std::_Rb_tree_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigControlPart>>>::operator->(v2 + 4);
    v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false> *const)&v6->second);
    if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(v7);
    v8 = *(_QWORD *)v7 + 24LL;
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v7 = __asan_report_load8(*(_QWORD *)v7 + 24LL);
    v9 = *(void (__fastcall **)(const std::string *, unsigned __int64))v8;
    if ( *(_WORD *)(((unsigned __int64)name >> 3) + 0x7FFF8000) )
      v7 = __asan_report_store16();
    v9(name, v7);
  }
  else
  {
    std::shared_ptr<data::ConfigControlPart>::shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)name, 0LL);
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_node = (std::_Rb_tree_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > >::_Base_ptr)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2>::element_type *)name;
  return result;
};

// Line 7225: range 000000000E65EBBC-000000000E65F134
void __cdecl data::ConfigControlPart::foreachMember(
        data::ConfigControlPart *const this,
        std::function<void(std::any&)> *p_func)
{
  std::any *v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[416]; // [rsp+10h] [rbp-1A0h] BYREF

  v2 = (std::any *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = (std::any *)v3;
  }
  v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1102416563;
  v2->_M_storage._M_ptr = "11 32 16 22 angular_speed_any:7226 64 16 23 part_root_name_any:7228 96 16 19 forward_by_any:72"
                          "30 128 16 26 forward_axial_fix_any:7232 160 16 18 rotate_by_any:7234 192 16 24 do_on_un_eabled"
                          "_any:7236 224 16 30 forward_by_trans_name_any:7238 256 16 25 limit_horizontal_any:7240 288 16 "
                          "23 limit_vertical_any:7242 320 16 20 target_type_any:7244 352 16 23 default_enable_any:7246";
  v2[1]._M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))data::ConfigControlPart::foreachMember;
  v4 = (_DWORD *)((unsigned __int64)v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862731] = -202178560;
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(v2 + 2, &this->angular_speed);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 2);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 4,
    &this->part_root_name);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 4);
  std::any::any<data::ControlPartForwardBy &,data::ControlPartForwardBy,std::any::_Manager_internal<data::ControlPartForwardBy>,true,true>(
    v2 + 6,
    &this->forward_by);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 6);
  std::any::any<data::Vector &,data::Vector,std::any::_Manager_external<data::Vector>,true,true>(
    v2 + 8,
    &this->forward_axial_fix);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 8);
  std::any::any<data::ControlPartRotateBy &,data::ControlPartRotateBy,std::any::_Manager_internal<data::ControlPartRotateBy>,true,true>(
    v2 + 10,
    &this->rotate_by);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 10);
  std::any::any<data::ControlPartDoOnUnEnabled &,data::ControlPartDoOnUnEnabled,std::any::_Manager_internal<data::ControlPartDoOnUnEnabled>,true,true>(
    v2 + 12,
    &this->do_on_un_eabled);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 12);
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    v2 + 14,
    &this->forward_by_trans_name);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 14);
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(v2 + 16, &this->limit_horizontal);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 16);
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(v2 + 18, &this->limit_vertical);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 18);
  std::any::any<data::ControlPartTargetType &,data::ControlPartTargetType,std::any::_Manager_internal<data::ControlPartTargetType>,true,true>(
    v2 + 20,
    &this->target_type);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 20);
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(v2 + 22, &this->default_enable);
  std::function<void ()(std::any &)>::operator()(p_func, v2 + 22);
  std::any::~any(v2 + 22);
  std::any::~any(v2 + 20);
  std::any::~any(v2 + 18);
  std::any::~any(v2 + 16);
  std::any::~any(v2 + 14);
  std::any::~any(v2 + 12);
  std::any::~any(v2 + 10);
  std::any::~any(v2 + 8);
  std::any::~any(v2 + 6);
  std::any::~any(v2 + 4);
  std::any::~any(v2 + 2);
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    v2->_M_manager = (void (*)(std::any::_Op, const std::any *, std::any::_Arg *))1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7251: range 000000000E65F136-000000000E65F180
std::shared_ptr<data::ConfigControlPart> __cdecl data::ConfigControlPart::clone(data::ConfigControlPart *const this)
{
  data::ConfigControlPart *v1; // rsi
  std::shared_ptr<data::ConfigControlPart> result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigControlPart,data::ConfigControlPart&>(
    (common::tools::perf::allocator<data::ConfigControlPart,data::ConfigControlPart> *)this,
    v1);
  result._M_ptr = this;
  return result;
};

// Line 7255: range 000000000E65F182-000000000E6611CF
bool __cdecl data::ConfigControlPart::fromJson(data::ConfigControlPart *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  bool v6; // r15
  bool v7; // r15
  bool v8; // r15
  bool v9; // r15
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool v12; // bl
  const Json::Value *angular_speed_ptr; // [rsp+18h] [rbp-7E8h]
  const Json::Value *part_root_name_ptr; // [rsp+20h] [rbp-7E0h]
  Json::Value *forward_by_ptr; // [rsp+28h] [rbp-7D8h]
  const Json::Value *forward_axial_fix_ptr; // [rsp+30h] [rbp-7D0h]
  Json::Value *rotate_by_ptr; // [rsp+38h] [rbp-7C8h]
  Json::Value *do_on_un_eabled_ptr; // [rsp+40h] [rbp-7C0h]
  const Json::Value *forward_by_trans_name_ptr; // [rsp+48h] [rbp-7B8h]
  const Json::Value *limit_horizontal_ptr; // [rsp+50h] [rbp-7B0h]
  const Json::Value *limit_vertical_ptr; // [rsp+58h] [rbp-7A8h]
  Json::Value *target_type_ptr; // [rsp+60h] [rbp-7A0h]
  const Json::Value *default_enable_ptr; // [rsp+68h] [rbp-798h]
  char v25[1936]; // [rsp+70h] [rbp-790h] BYREF

  v2 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1888LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "37 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unkno"
                        "wn> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknow"
                        "n> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unkno"
                        "wn> 1184 32 9 <unknown> 1248 32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <u"
                        "nknown> 1504 32 9 <unknown> 1568 32 9 <unknown> 1632 32 9 <unknown> 1696 32 9 <unknown> 1760 32 "
                        "9 <unknown> 1824 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPart::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -218959118;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 224),
    "angularSpeed",
    (const std::allocator<char> *)(v2 + 48));
  angular_speed_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
  std::string::~string((void *)(v2 + 224));
  *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( angular_speed_ptr && !fromJson<float>(angular_speed_ptr, &this->angular_speed) )
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 288, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 288),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      7265);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 288),
      (const char (*)[34])"fromJson for: angularSpeed fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
    v5 = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 352),
      "partRootName",
      (const std::allocator<char> *)(v2 + 64));
    part_root_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
    std::string::~string((void *)(v2 + 352));
    *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( part_root_name_ptr && !fromJson<std::string>(part_root_name_ptr, &this->part_root_name) )
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 416, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 416),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        7277);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 416),
        (const char (*)[34])"fromJson for: partRootName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 480),
        "forwardBy",
        (const std::allocator<char> *)(v2 + 80));
      forward_by_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 480));
      std::string::~string((void *)(v2 + 480));
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( !forward_by_ptr )
        goto LABEL_21;
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 544, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 544), (Json::Value_0 *)forward_by_ptr);
      v6 = !data::enumStrToVal((const std::string *)(v2 + 544), &this->forward_by);
      std::string::~string((void *)(v2 + 544));
      *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
      if ( v6 )
      {
        *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 608, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 608),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          7289);
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
          (common::milog::MiLogStream *const)(v2 + 608),
          (const char (*)[31])"fromJson for: forwardBy fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
        v5 = 0;
      }
      else
      {
LABEL_21:
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 672),
          "forwardAxialFix",
          (const std::allocator<char> *)(v2 + 96));
        forward_axial_fix_ptr = jsonValueFind(jval, (const std::string *)(v2 + 672));
        std::string::~string((void *)(v2 + 672));
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( forward_axial_fix_ptr && !data::Vector::fromJson(&this->forward_axial_fix, forward_axial_fix_ptr) )
        {
          *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 1) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 736, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 736),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            7301);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            (common::milog::MiLogStream *const)(v2 + 736),
            (const char (*)[37])"fromJson for: forwardAxialFix fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 800),
            "rotateBy",
            (const std::allocator<char> *)(v2 + 112));
          rotate_by_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 800));
          std::string::~string((void *)(v2 + 800));
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( !rotate_by_ptr )
            goto LABEL_33;
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 864, 32LL);
          }
          Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 864), (Json::Value_0 *)rotate_by_ptr);
          v7 = !data::enumStrToVal((const std::string *)(v2 + 864), &this->rotate_by);
          std::string::~string((void *)(v2 + 864));
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
          if ( v7 )
          {
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 928) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 928, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 928),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              7313);
            common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)(v2 + 928),
              (const char (*)[30])"fromJson for: rotateBy fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 928));
            v5 = 0;
          }
          else
          {
LABEL_33:
            *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 992),
              "doOnUnEabled",
              (const std::allocator<char> *)(v2 + 128));
            do_on_un_eabled_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 992));
            std::string::~string((void *)(v2 + 992));
            *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( !do_on_un_eabled_ptr )
              goto LABEL_40;
            *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1056, 32LL);
            }
            Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 1056), (Json::Value_0 *)do_on_un_eabled_ptr);
            v8 = !data::enumStrToVal((const std::string *)(v2 + 1056), &this->do_on_un_eabled);
            std::string::~string((void *)(v2 + 1056));
            *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
            if ( v8 )
            {
              *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1120, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1120),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                7325);
              common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                (common::milog::MiLogStream *const)(v2 + 1120),
                (const char (*)[34])"fromJson for: doOnUnEabled fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
              v5 = 0;
            }
            else
            {
LABEL_40:
              *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1184),
                "forwardByTransName",
                (const std::allocator<char> *)(v2 + 144));
              forward_by_trans_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1184));
              std::string::~string((void *)(v2 + 1184));
              *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( forward_by_trans_name_ptr
                && !fromJson<std::string>(forward_by_trans_name_ptr, &this->forward_by_trans_name) )
              {
                *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1248) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 1) & 7) >= *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1248, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1248),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  7337);
                common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                  (common::milog::MiLogStream *const)(v2 + 1248),
                  (const char (*)[40])"fromJson for: forwardByTransName fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1248));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1312),
                  "limitHorizontal",
                  (const std::allocator<char> *)(v2 + 160));
                limit_horizontal_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1312));
                std::string::~string((void *)(v2 + 1312));
                *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( limit_horizontal_ptr && !fromJson<float>(limit_horizontal_ptr, &this->limit_horizontal) )
                {
                  *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1376) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1407) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1376, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1376),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    7349);
                  common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                    (common::milog::MiLogStream *const)(v2 + 1376),
                    (const char (*)[37])"fromJson for: limitHorizontal fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1376));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 176);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1440),
                    "limitVertical",
                    (const std::allocator<char> *)(v2 + 176));
                  limit_vertical_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1440));
                  std::string::~string((void *)(v2 + 1440));
                  *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 176);
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                  if ( limit_vertical_ptr && !fromJson<float>(limit_vertical_ptr, &this->limit_vertical) )
                  {
                    *(_DWORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1504) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 1) & 7) >= *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1504, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1504),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      7361);
                    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                      (common::milog::MiLogStream *const)(v2 + 1504),
                      (const char (*)[35])"fromJson for: limitVertical fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1504));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 192);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1568),
                      "targetType",
                      (const std::allocator<char> *)(v2 + 192));
                    target_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 1568));
                    std::string::~string((void *)(v2 + 1568));
                    *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 192);
                    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                    if ( !target_type_ptr )
                      goto LABEL_62;
                    *(_DWORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1632) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1663) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1632, 32LL);
                    }
                    Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 1632), (Json::Value_0 *)target_type_ptr);
                    v9 = !data::enumStrToVal((const std::string *)(v2 + 1632), &this->target_type);
                    std::string::~string((void *)(v2 + 1632));
                    *(_DWORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = -117901064;
                    if ( v9 )
                    {
                      *(_DWORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1696) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1696, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1696),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        7373);
                      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                        (common::milog::MiLogStream *const)(v2 + 1696),
                        (const char (*)[32])"fromJson for: targetType fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1696));
                      v5 = 0;
                    }
                    else
                    {
LABEL_62:
                      *(_DWORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 208);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1760),
                        "defaultEnable",
                        (const std::allocator<char> *)(v2 + 208));
                      default_enable_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1760));
                      std::string::~string((void *)(v2 + 1760));
                      *(_DWORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 208);
                      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                      if ( default_enable_ptr && !fromJson<bool>(default_enable_ptr, &this->default_enable) )
                      {
                        *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1824) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1855) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1855) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1824, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1824),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          7385);
                        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                          (common::milog::MiLogStream *const)(v2 + 1824),
                          (const char (*)[35])"fromJson for: defaultEnable fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1824));
                        v5 = 0;
                      }
                      else
                      {
                        v10 = ((_BYTE)this - 115) & 7;
                        v11 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
                        if ( (_BYTE)v11 )
                          __asan_report_store1(&this->is_json_loaded, v10, v11);
                        this->is_json_loaded = 1;
                        v5 = 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v12 = v5;
  if ( v25 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8070) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8080) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8088) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8090) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8098) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C0) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80D0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E0) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E8) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1888LL, v25);
  }
  return v12;
};

// Line 7392: range 000000000E6611D0-000000000E661B32
data::ConfigControlPartPtr __cdecl data::ConfigControlPart::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigControlPartPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  char v11; // cl
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-208h]
  char v13[512]; // [rsp+20h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "8 48 1 9 <unknown> 64 16 8 ptr:7405 96 32 9 <unknown> 160 32 9 <unknown> 224 32 14 type_name:739"
                        "9 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPart::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 224);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 224)) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        7402);
      common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[45])"fromJson for: ConfigControlPart $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigControlPart>::shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigControlPart((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigControlPart>((const std::shared_ptr<data::ConfigControlPart> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          7408);
        v6 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
               (common::milog::MiLogStream *const)(v2 + 352),
               (const char (*)[43])"create ConfigControlPart fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 224));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigControlPart>::shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)jval, 0LL);
      }
      else
      {
        v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
        if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(v7);
        v8 = *(_QWORD *)v7 + 48LL;
        if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
          v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
        {
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 416, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 416),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            7413);
          v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                 (common::milog::MiLogStream *const)(v2 + 416),
                 (const std::string *)(v2 + 224));
          common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
          *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigControlPart>::shared_ptr(
            (std::shared_ptr<data::ConfigControlPart> *const)jval,
            0LL);
        }
        else
        {
          v10 = std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 64));
          v11 = *(_BYTE *)(((unsigned __int64)&v10->is_json_loaded >> 3) + 0x7FFF8000);
          if ( v11 != 0 && (((unsigned __int8)v10 - 115) & 7) >= v11 )
          {
            LOBYTE(v1) = v11 != 0;
            __asan_report_store1(&v10->is_json_loaded, v1, v10);
          }
          v10->is_json_loaded = 1;
          std::shared_ptr<data::ConfigControlPart>::shared_ptr(
            (std::shared_ptr<data::ConfigControlPart> *const)jval,
            (std::shared_ptr<data::ConfigControlPart> *)(v2 + 64));
        }
      }
      std::shared_ptr<data::ConfigControlPart>::~shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 224));
  }
  else
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      7396);
    common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[50])"jsonValueFind for: ConfigControlPart $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigControlPart>::shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)jval, 0LL);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 7421: range 000000000E661B34-000000000E661F0F
int32_t __cdecl data::ConfigControlPart::getHashValue(const data::ConfigControlPart *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  __int64 v6; // rsi
  __int64 v7; // rdx
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:7422";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPart::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->angular_speed);
  }
  common::tools::HashUtils::appendHash(this->angular_speed, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->part_root_name, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->forward_by >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->forward_by >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->forward_by);
  }
  common::tools::HashUtils::appendHash(this->forward_by, (int32_t *)(v2 + 32));
  HashValue = data::Vector::getHashValue(&this->forward_axial_fix);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->rotate_by >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->rotate_by >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->rotate_by);
  }
  common::tools::HashUtils::appendHash(this->rotate_by, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->do_on_un_eabled >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->do_on_un_eabled >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->do_on_un_eabled);
  }
  common::tools::HashUtils::appendHash(this->do_on_un_eabled, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->forward_by_trans_name, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_horizontal >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->limit_horizontal >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->limit_horizontal);
  }
  common::tools::HashUtils::appendHash(this->limit_horizontal, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_vertical >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->limit_vertical >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->limit_vertical);
  }
  common::tools::HashUtils::appendHash(this->limit_vertical, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->target_type);
  }
  common::tools::HashUtils::appendHash(this->target_type, (int32_t *)(v2 + 32));
  v6 = ((_BYTE)this - 116) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->default_enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->default_enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&this->default_enable, v6, v7);
  common::tools::HashUtils::appendHash(this->default_enable, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7441: range 000000000E6F01CE-000000000E6F040F
void __cdecl data::ConfigControlPartByIKRegister::ConfigControlPartByIKRegister(
        data::ConfigControlPartByIKRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigControlPart> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigControlPartByIKRegister::ConfigControlPartByIKRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigControlPartByIK>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigControlPartByIK",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::operator[](
         &data::g_ConfigControlPartMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigControlPart>::operator=<data::ConfigControlPartByIK>(
    v4,
    (std::shared_ptr<data::ConfigControlPartByIK> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigControlPartByIK>::~shared_ptr((std::shared_ptr<data::ConfigControlPartByIK> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 7444: range 000000000E661F10-000000000E662043
void __cdecl data::ConfigControlPartByIK::foreachMember(
        data::ConfigControlPartByIK *const this,
        std::function<void(std::any&)> *p_func)
{
  std::function<void(std::any&)> *v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  char v5[144]; // [rsp+10h] [rbp-90h] BYREF

  v2 = (std::function<void(std::any&)> *)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = (std::function<void(std::any&)> *)v3;
  }
  v2->_M_functor._M_unused._M_object = (void *)1102416563;
  *(_QWORD *)&v2->_M_functor._M_pod_data[8] = "1 32 32 9 <unknown>";
  v2->_M_manager = (std::_Function_base::_Manager_type)data::ConfigControlPartByIK::foreachMember;
  v4 = (unsigned __int64)v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  std::function<void ()(std::any &)>::function(v2 + 1, p_func);
  data::ConfigControlPart::foreachMember(this, v2 + 1);
  std::function<void ()(std::any &)>::~function(v2 + 1);
  if ( v5 == (char *)v2 )
  {
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    v2->_M_functor._M_unused._M_object = (void *)1172321806;
    *(_QWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)(((unsigned __int64)v2 >> 3) + 0x7FFF8008) = -168430091;
  }
};

// Line 7449: range 000000000E662044-000000000E662154
std::shared_ptr<data::ConfigControlPart> __cdecl data::ConfigControlPartByIK::clone(
        data::ConfigControlPartByIK *const this)
{
  data::ConfigControlPartByIK *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigControlPart> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIK::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigControlPartByIK,data::ConfigControlPartByIK&>(
    (common::tools::perf::allocator<data::ConfigControlPartByIK,data::ConfigControlPartByIK> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigControlPart>::shared_ptr<data::ConfigControlPartByIK,void>(
    (std::shared_ptr<data::ConfigControlPart> *const)this,
    (std::shared_ptr<data::ConfigControlPartByIK> *)(v2 + 32));
  std::shared_ptr<data::ConfigControlPartByIK>::~shared_ptr((std::shared_ptr<data::ConfigControlPartByIK> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 7453: range 000000000E662156-000000000E662373
bool __cdecl data::ConfigControlPartByIK::fromJson(data::ConfigControlPartByIK *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIK::fromJson;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450888) = -202116109;
  if ( !data::ConfigControlPart::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 32) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 63) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 32, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 32),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      7456);
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
      (common::milog::MiLogStream *const)(v2 + 32),
      (const char (*)[39])"fromJson for: ConfigControlPart fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 32));
    result = 0;
  }
  else
  {
    v6 = ((_BYTE)this - 115) & 7;
    v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
    if ( (_BYTE)v7 )
      __asan_report_store1(&this->is_json_loaded, v6, v7);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v8 == (char *)v2 )
  {
    *(_DWORD *)((v2 >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 7463: range 000000000E662374-000000000E662EC7
data::ConfigControlPartByIKPtr __cdecl data::ConfigControlPartByIK::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigControlPartByIKPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  std::__shared_ptr_access<data::ConfigControlPartByIK,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  char v11; // cl
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v13[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:7476 96 16 8 ptr:7482 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:7470 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIK::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        7473);
      common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[49])"fromJson for: ConfigControlPartByIK $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigControlPartByIK>::shared_ptr(
        (std::shared_ptr<data::ConfigControlPartByIK> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigControlPart((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigControlPart>((const std::shared_ptr<data::ConfigControlPart> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          7479);
        v6 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[43])"create ConfigControlPart fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigControlPartByIK>::shared_ptr(
          (std::shared_ptr<data::ConfigControlPartByIK> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigControlPartByIK,data::ConfigControlPart>((const std::shared_ptr<data::ConfigControlPart> *)(v2 + 96));
        if ( std::operator==<data::ConfigControlPartByIK>(
               (const std::shared_ptr<data::ConfigControlPartByIK> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            7485);
          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[40])"cast to ConfigControlPartByIKPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigControlPartByIK>::shared_ptr(
            (std::shared_ptr<data::ConfigControlPartByIK> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigControlPartByIK,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPartByIK,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              7490);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigControlPartByIK>::shared_ptr(
              (std::shared_ptr<data::ConfigControlPartByIK> *const)jval,
              0LL);
          }
          else
          {
            v10 = std::__shared_ptr_access<data::ConfigControlPartByIK,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPartByIK,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)&v10->is_json_loaded >> 3) + 0x7FFF8000);
            if ( v11 != 0 && (((unsigned __int8)v10 - 115) & 7) >= v11 )
            {
              LOBYTE(v1) = v11 != 0;
              __asan_report_store1(&v10->is_json_loaded, v1, v10);
            }
            v10->is_json_loaded = 1;
            std::shared_ptr<data::ConfigControlPartByIK>::shared_ptr(
              (std::shared_ptr<data::ConfigControlPartByIK> *const)jval,
              (std::shared_ptr<data::ConfigControlPartByIK> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigControlPartByIK>::~shared_ptr((std::shared_ptr<data::ConfigControlPartByIK> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigControlPart>::~shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      7467);
    common::milog::MiLogStream::operator<<<char [54],(char *[54])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[54])"jsonValueFind for: ConfigControlPartByIK $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigControlPartByIK>::shared_ptr(
      (std::shared_ptr<data::ConfigControlPartByIK> *const)jval,
      0LL);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigControlPartByIK,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 7498: range 000000000E662EC8-000000000E662EE7
int32_t __cdecl data::ConfigControlPartByIK::getHashValue(const data::ConfigControlPartByIK *const this)
{
  return data::ConfigControlPart::getHashValue(this);
};

// Line 7507: range 000000000E6F044C-000000000E6F068D
void __cdecl data::ConfigControlPartByIKCCDRegister::ConfigControlPartByIKCCDRegister(
        data::ConfigControlPartByIKCCDRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigControlPart> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigControlPartByIKCCDRegister::ConfigControlPartByIKCCDRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigControlPartByIKCCD>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigControlPartByIKCCD",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::operator[](
         &data::g_ConfigControlPartMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigControlPart>::operator=<data::ConfigControlPartByIKCCD>(
    v4,
    (std::shared_ptr<data::ConfigControlPartByIKCCD> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigControlPartByIKCCD>::~shared_ptr((std::shared_ptr<data::ConfigControlPartByIKCCD> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 7510: range 000000000E662EE8-000000000E6631CF
void __cdecl data::ConfigControlPartByIKCCD::foreachMember(
        data::ConfigControlPartByIKCCD *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[240]; // [rsp+10h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 32 16 18 root_name_any:7512 64 16 24 final_axial_fix_any:7514 96 16 25 vertical_damping_any:75"
                        "16 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIKCCD::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 128), p_func);
  data::ConfigControlPartByIK::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 128));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 32),
    &this->root_name);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::Vector &,data::Vector,std::any::_Manager_external<data::Vector>,true,true>(
    (std::any *const)(v2 + 64),
    &this->final_axial_fix);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(
    (std::any *const)(v2 + 96),
    &this->vertical_damping);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 7521: range 000000000E6631D0-000000000E6632E0
std::shared_ptr<data::ConfigControlPart> __cdecl data::ConfigControlPartByIKCCD::clone(
        data::ConfigControlPartByIKCCD *const this)
{
  data::ConfigControlPartByIKCCD *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigControlPart> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIKCCD::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigControlPartByIKCCD,data::ConfigControlPartByIKCCD&>(
    (common::tools::perf::allocator<data::ConfigControlPartByIKCCD,data::ConfigControlPartByIKCCD> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigControlPart>::shared_ptr<data::ConfigControlPartByIKCCD,void>(
    (std::shared_ptr<data::ConfigControlPart> *const)this,
    (std::shared_ptr<data::ConfigControlPartByIKCCD> *)(v2 + 32));
  std::shared_ptr<data::ConfigControlPartByIKCCD>::~shared_ptr((std::shared_ptr<data::ConfigControlPartByIKCCD> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 7525: range 000000000E6632E2-000000000E663325
data::ConfigControlPartByIKCCDPtr __cdecl data::ConfigControlPartByIKCCDFactory::create(
        data::ConfigControlPartByIKCCDFactory *const this)
{
  data::ConfigControlPartByIKCCDPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigControlPartByIKCCD>();
  result._M_ptr = (std::__shared_ptr<data::ConfigControlPartByIKCCD,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 7527: range 000000000E663326-000000000E663CEC
bool __cdecl data::ConfigControlPartByIKCCD::fromJson(
        data::ConfigControlPartByIKCCD *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *root_name_ptr; // [rsp+18h] [rbp-258h]
  const Json::Value *final_axial_fix_ptr; // [rsp+20h] [rbp-250h]
  const Json::Value *vertical_damping_ptr; // [rsp+28h] [rbp-248h]
  char v11[576]; // [rsp+30h] [rbp-240h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 3"
                        "2 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIKCCD::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -202116109;
  if ( !data::ConfigControlPartByIK::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 96) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 127) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 96, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 96),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      7530);
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      (common::milog::MiLogStream *const)(v2 + 96),
      (const char (*)[43])"fromJson for: ConfigControlPartByIK fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 96));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 160),
      "rootName",
      (const std::allocator<char> *)(v2 + 48));
    root_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 160));
    std::string::~string((void *)(v2 + 160));
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( root_name_ptr && !fromJson<std::string>(root_name_ptr, &this->root_name) )
    {
      *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 224, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 224),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        7542);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        (common::milog::MiLogStream *const)(v2 + 224),
        (const char (*)[30])"fromJson for: rootName fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 288),
        "finalAxialFix",
        (const std::allocator<char> *)(v2 + 64));
      final_axial_fix_ptr = jsonValueFind(jval, (const std::string *)(v2 + 288));
      std::string::~string((void *)(v2 + 288));
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( final_axial_fix_ptr && !data::Vector::fromJson(&this->final_axial_fix, final_axial_fix_ptr) )
      {
        *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 352, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 352),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          7554);
        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
          (common::milog::MiLogStream *const)(v2 + 352),
          (const char (*)[35])"fromJson for: finalAxialFix fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 416),
          "verticalDamping",
          (const std::allocator<char> *)(v2 + 80));
        vertical_damping_ptr = jsonValueFind(jval, (const std::string *)(v2 + 416));
        std::string::~string((void *)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( vertical_damping_ptr && !fromJson<float>(vertical_damping_ptr, &this->vertical_damping) )
        {
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 480, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 480),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            7566);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            (common::milog::MiLogStream *const)(v2 + 480),
            (const char (*)[37])"fromJson for: verticalDamping fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
          result = 0;
        }
        else
        {
          v6 = ((_BYTE)this - 115) & 7;
          v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
          if ( (_BYTE)v7 )
            __asan_report_store1(&this->is_json_loaded, v6, v7);
          this->is_json_loaded = 1;
          result = 1;
        }
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 7573: range 000000000E663CEE-000000000E664841
data::ConfigControlPartByIKCCDPtr __cdecl data::ConfigControlPartByIKCCD::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigControlPartByIKCCDPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  std::__shared_ptr_access<data::ConfigControlPartByIKCCD,(__gnu_cxx::_Lock_policy)2,false,false>::element_type *v10; // rdx
  char v11; // cl
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v13[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:7586 96 16 8 ptr:7592 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:7580 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIKCCD::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        7583);
      common::milog::MiLogStream::operator<<<char [52],(char *[52])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[52])"fromJson for: ConfigControlPartByIKCCD $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigControlPartByIKCCD>::shared_ptr(
        (std::shared_ptr<data::ConfigControlPartByIKCCD> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigControlPart((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigControlPart>((const std::shared_ptr<data::ConfigControlPart> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          7589);
        v6 = common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[43])"create ConfigControlPart fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigControlPartByIKCCD>::shared_ptr(
          (std::shared_ptr<data::ConfigControlPartByIKCCD> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigControlPartByIKCCD,data::ConfigControlPart>((const std::shared_ptr<data::ConfigControlPart> *)(v2 + 96));
        if ( std::operator==<data::ConfigControlPartByIKCCD>(
               (const std::shared_ptr<data::ConfigControlPartByIKCCD> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            7595);
          common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[43])"cast to ConfigControlPartByIKCCDPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigControlPartByIKCCD>::shared_ptr(
            (std::shared_ptr<data::ConfigControlPartByIKCCD> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigControlPartByIKCCD,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPartByIKCCD,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              7600);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigControlPartByIKCCD>::shared_ptr(
              (std::shared_ptr<data::ConfigControlPartByIKCCD> *const)jval,
              0LL);
          }
          else
          {
            v10 = std::__shared_ptr_access<data::ConfigControlPartByIKCCD,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPartByIKCCD,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)&v10->is_json_loaded >> 3) + 0x7FFF8000);
            if ( v11 != 0 && (((unsigned __int8)v10 - 115) & 7) >= v11 )
            {
              LOBYTE(v1) = v11 != 0;
              __asan_report_store1(&v10->is_json_loaded, v1, v10);
            }
            v10->is_json_loaded = 1;
            std::shared_ptr<data::ConfigControlPartByIKCCD>::shared_ptr(
              (std::shared_ptr<data::ConfigControlPartByIKCCD> *const)jval,
              (std::shared_ptr<data::ConfigControlPartByIKCCD> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigControlPartByIKCCD>::~shared_ptr((std::shared_ptr<data::ConfigControlPartByIKCCD> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigControlPart>::~shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      7577);
    common::milog::MiLogStream::operator<<<char [57],(char *[57])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[57])"jsonValueFind for: ConfigControlPartByIKCCD $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigControlPartByIKCCD>::shared_ptr(
      (std::shared_ptr<data::ConfigControlPartByIKCCD> *const)jval,
      0LL);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigControlPartByIKCCD,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 7608: range 000000000E664842-000000000E6649F8
int32_t __cdecl data::ConfigControlPartByIKCCD::getHashValue(const data::ConfigControlPartByIKCCD *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t v7; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:7609";
  *(_QWORD *)(v2 + 16) = data::ConfigControlPartByIKCCD::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigControlPartByIK::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  common::tools::HashUtils::appendHash(&this->root_name, (int32_t *)(v2 + 32));
  v7 = data::Vector::getHashValue(&this->final_axial_fix);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->vertical_damping >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->vertical_damping >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->vertical_damping);
  }
  common::tools::HashUtils::appendHash(this->vertical_damping, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7617: range 000000000E6649F9-000000000E664D5A
bool __cdecl data::vecFromJson(const Json::Value *jval, data::ConfigControlPartList *v)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int v5; // eax
  int v6; // r14d
  bool result; // al
  int v8; // [rsp+0h] [rbp-E0h]
  char v9; // [rsp+8h] [rbp-D8h]
  bool v10; // [rsp+Fh] [rbp-D1h]
  uint32_t i; // [rsp+24h] [rbp-BCh]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-B8h]
  char v13[176]; // [rsp+30h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 13 elem_ptr:7623 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::vecFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v8, v9);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigControlPart::parseFromJson((const Json::Value *)(v2 + 32));
      if ( std::operator==<data::ConfigControlPart>((const std::shared_ptr<data::ConfigControlPart> *)(v2 + 32), 0LL) )
      {
        *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 64, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 64),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "vecFromJson",
          7626);
        common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
          (common::milog::MiLogStream *const)(v2 + 64),
          (const char (*)[43])"elem_ptr is nullptr: ConfigControlPartList");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
        *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
        v10 = 0;
        v6 = 0;
      }
      else
      {
        std::vector<std::shared_ptr<data::ConfigControlPart>>::push_back(
          v,
          (const std::vector<std::shared_ptr<data::ConfigControlPart>>::value_type *)(v2 + 32));
        v6 = 1;
      }
      std::shared_ptr<data::ConfigControlPart>::~shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)(v2 + 32));
      if ( v6 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = -1800;
    if ( v5 && v5 != 2 )
      goto LABEL_22;
  }
  v10 = 1;
LABEL_22:
  result = v10;
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7636: range 000000000E664D5B-000000000E665016
int32_t __cdecl data::getVecHashValue(const data::ConfigControlPartList *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int32_t v7; // eax
  int32_t result; // eax
  const std::shared_ptr<data::ConfigControlPart> *elem; // [rsp+18h] [rbp-A8h]
  char v10[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:7637 64 8 16 __for_begin:7638 96 8 14 __for_end:7638";
  *(_QWORD *)(v2 + 16) = data::getVecHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<std::shared_ptr<data::ConfigControlPart>>::const_iterator *)(v2 + 64) = std::vector<std::shared_ptr<data::ConfigControlPart>>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<std::shared_ptr<data::ConfigControlPart>>::const_iterator *)(v2 + 96) = std::vector<std::shared_ptr<data::ConfigControlPart>>::end(vec);
  while ( __gnu_cxx::operator!=<std::shared_ptr<data::ConfigControlPart> const*,std::vector<std::shared_ptr<data::ConfigControlPart>>>(
            (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigControlPart>*,std::vector<std::shared_ptr<data::ConfigControlPart>> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigControlPart>*,std::vector<std::shared_ptr<data::ConfigControlPart>> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigControlPart> const*,std::vector<std::shared_ptr<data::ConfigControlPart>>>::operator*((const __gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigControlPart>*,std::vector<std::shared_ptr<data::ConfigControlPart>> > *const)(v2 + 64));
    if ( std::operator!=<data::ConfigControlPart>(0LL, elem) )
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigControlPart,(__gnu_cxx::_Lock_policy)2,false,false> *const)elem);
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(v5);
      v6 = *(_QWORD *)v5 + 56LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(*(_QWORD *)v5 + 56LL);
      v7 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
      common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 48));
    }
    __gnu_cxx::__normal_iterator<std::shared_ptr<data::ConfigControlPart> const*,std::vector<std::shared_ptr<data::ConfigControlPart>>>::operator++((__gnu_cxx::__normal_iterator<const std::shared_ptr<data::ConfigControlPart>*,std::vector<std::shared_ptr<data::ConfigControlPart>> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7650: range 000000000E665018-000000000E66536D
bool __cdecl data::ConfigPartController::fromJson(data::ConfigPartController *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigPartController *v5; // rsi
  bool result; // al
  const Json::Value *parts_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigPartController::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "parts",
    (const std::allocator<char> *)(v2 + 48));
  v5 = (data::ConfigPartController *)(v2 + 64);
  parts_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( parts_ptr && (v5 = this, !data::vecFromJson(parts_ptr, &this->parts)) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      7660);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[27])"fromJson for: parts fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7668: range 000000000E66536E-000000000E6654A8
int32_t __cdecl data::ConfigPartController::getHashValue(const data::ConfigPartController *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t VecHashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:7669";
  *(_QWORD *)(v2 + 16) = data::ConfigPartController::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  VecHashValue = data::getVecHashValue(&this->parts);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7678: range 000000000E6F0706-000000000E6F0947
void __cdecl data::ConfigGadgetRegister::ConfigGadgetRegister(data::ConfigGadgetRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigEntity> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigGadgetRegister::ConfigGadgetRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadget>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigGadget",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::operator[](
         &data::g_ConfigEntityMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigEntity>::operator=<data::ConfigGadget>(
    v4,
    (std::shared_ptr<data::ConfigGadget> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 7681: range 000000000E6654AA-000000000E66731C
void __cdecl data::ConfigGadget::foreachMember(data::ConfigGadget *const this, std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[2032]; // [rsp+10h] [rbp-7F0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1984LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "60 32 16 18 has_equip_any:7683 64 16 18 has_audio_any:7685 96 16 18 has_model_any:7687 128 16 20"
                        " has_ability_any:7689 160 16 19 has_dither_any:7691 192 16 38 has_follow_wind_zone_rotation_any:"
                        "7693 224 16 40 force_dont_use_update_rigidbody_any:7695 256 16 28 has_connect_trigger_any:7697 2"
                        "88 16 35 can_be_created_on_platform_any:7699 320 16 33 connect_trigger_priority_any:7701 352 16 "
                        "32 ignore_child_scene_prop_any:7703 384 16 37 move_refresh_ground_force_up_any:7705 416 16 15 co"
                        "mbat_any:7707 448 16 24 combat_template_any:7709 480 16 18 abilities_any:7711 512 16 14 field_an"
                        "y:7713 544 16 14 timer_any:7715 576 16 13 move_any:7717 608 16 15 gadget_any:7719 640 16 18 equi"
                        "pment_any:7721 672 16 19 navigation_any:7723 704 16 20 ui_interact_any:7725 736 16 13 misc_any:7"
                        "727 768 16 21 state_layers_any:7729 800 16 14 audio_any:7731 832 16 15 aibeta_any:7733 864 16 16"
                        " weather_any:7735 896 16 13 wall_any:7737 928 16 13 face_any:7739 960 16 21 part_control_any:774"
                        "1 992 16 15 paimon_any:7743 1024 16 28 character_rendering_any:7745 1056 16 19 radar_hint_any:77"
                        "47 1088 16 32 keep_modifier_out_sight_any:7749 1120 16 22 gadget_action_any:7751 1152 16 20 gadg"
                        "et_turn_any:7753 1184 16 16 gv_turn_any:7755 1216 16 18 billboard_any:7757 1248 16 14 intee_any:"
                        "7759 1280 16 22 bind_emotions_any:7761 1312 16 18 projector_any:7763 1344 16 27 low_priority_int"
                        "ee_any:7765 1376 16 29 can_remove_by_client_any:7767 1408 16 13 tags_any:7769 1440 16 39 can_be_"
                        "triggered_by_avatar_ray_any:7771 1472 16 16 vehicle_any:7773 1504 16 19 dangerzone_any:7775 1536"
                        " 16 21 fishing_zone_any:7777 1568 16 30 force_set_entity_type_any:7779 1600 16 22 camera_adjust_"
                        "any:7781 1632 16 18 vod_intee_any:7783 1664 16 19 vod_player_any:7785 1696 16 19 camera_box_any:"
                        "7787 1728 16 21 open_watcher_any:7789 1760 16 16 ray_tag_any:7791 1792 16 20 has_ray_tag_any:779"
                        "3 1824 16 25 use_retreat_type_any:7795 1856 16 32 dont_destroy_by_perform_any:7797 1888 16 22 co"
                        "rrect_owner_any:7799 1920 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadget::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862734] = -219021312;
  v4[536862735] = -219021312;
  v4[536862736] = -219021312;
  v4[536862737] = -219021312;
  v4[536862738] = -219021312;
  v4[536862739] = -219021312;
  v4[536862740] = -219021312;
  v4[536862741] = -219021312;
  v4[536862742] = -219021312;
  v4[536862743] = -219021312;
  v4[536862744] = -219021312;
  v4[536862745] = -219021312;
  v4[536862746] = -219021312;
  v4[536862747] = -219021312;
  v4[536862748] = -219021312;
  v4[536862749] = -219021312;
  v4[536862750] = -219021312;
  v4[536862751] = -219021312;
  v4[536862752] = -219021312;
  v4[536862753] = -219021312;
  v4[536862754] = -219021312;
  v4[536862755] = -219021312;
  v4[536862756] = -219021312;
  v4[536862757] = -219021312;
  v4[536862758] = -219021312;
  v4[536862759] = -219021312;
  v4[536862760] = -219021312;
  v4[536862761] = -219021312;
  v4[536862762] = -219021312;
  v4[536862763] = -219021312;
  v4[536862764] = -219021312;
  v4[536862765] = -219021312;
  v4[536862766] = -219021312;
  v4[536862767] = -219021312;
  v4[536862768] = -219021312;
  v4[536862769] = -219021312;
  v4[536862770] = -219021312;
  v4[536862771] = -219021312;
  v4[536862772] = -219021312;
  v4[536862773] = -219021312;
  v4[536862774] = -219021312;
  v4[536862775] = -219021312;
  v4[536862776] = -219021312;
  v4[536862777] = -219021312;
  v4[536862778] = -219021312;
  v4[536862779] = -219021312;
  v4[536862781] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 1920), p_func);
  data::ConfigEntity::foreachMember((data::ConfigEntity *const)this, (std::function<void(std::any&)> *)(v2 + 1920));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 1920));
  *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 32), &this->has_equip);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 64), &this->has_audio);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 96), &this->has_model);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 128),
    &this->has_ability);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 160), &this->has_dither);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 160));
  *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 192),
    &this->has_follow_wind_zone_rotation);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 192));
  *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 224),
    &this->force_dont_use_update_rigidbody);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 224));
  *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 256),
    &this->has_connect_trigger);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 256));
  *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 288),
    &this->can_be_created_on_platform);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 288));
  *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
  std::any::any<unsigned int &,unsigned int,std::any::_Manager_internal<unsigned int>,true,true>(
    (std::any *const)(v2 + 320),
    &this->connect_trigger_priority);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 320));
  *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 352),
    &this->ignore_child_scene_prop);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 352));
  *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 384),
    &this->move_refresh_ground_force_up);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 384));
  *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigCombat &,data::ConfigCombat,std::any::_Manager_external<data::ConfigCombat>,true,true>(
    (std::any *const)(v2 + 416),
    &this->combat);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 416));
  *(_WORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 448),
    &this->combat_template);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 448));
  *(_WORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::ConfigEntityAbilityEntry> &,std::vector<data::ConfigEntityAbilityEntry>,std::any::_Manager_external<std::vector<data::ConfigEntityAbilityEntry>>,true,true>(
    (std::any *const)(v2 + 480),
    &this->abilities);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 480));
  *(_WORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigTrigger &,data::ConfigTrigger,std::any::_Manager_external<data::ConfigTrigger>,true,true>(
    (std::any *const)(v2 + 512),
    &this->field);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 512));
  *(_WORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigTimer &,data::ConfigTimer,std::any::_Manager_external<data::ConfigTimer>,true,true>(
    (std::any *const)(v2 + 544),
    &this->timer);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 544));
  *(_WORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigMove> &,std::shared_ptr<data::ConfigMove>,std::any::_Manager_external<std::shared_ptr<data::ConfigMove>>,true,true>(
    (std::any *const)(v2 + 576),
    &this->move);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 576));
  *(_WORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigGadgetPattern> &,std::shared_ptr<data::ConfigGadgetPattern>,std::any::_Manager_external<std::shared_ptr<data::ConfigGadgetPattern>>,true,true>(
    (std::any *const)(v2 + 608),
    &this->gadget);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 608));
  *(_WORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigEquipment &,data::ConfigEquipment,std::any::_Manager_external<data::ConfigEquipment>,true,true>(
    (std::any *const)(v2 + 640),
    &this->equipment);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 640));
  *(_WORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigNavigation &,data::ConfigNavigation,std::any::_Manager_external<data::ConfigNavigation>,true,true>(
    (std::any *const)(v2 + 672),
    &this->navigation);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 672));
  *(_WORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigGadgetUI> &,std::shared_ptr<data::ConfigGadgetUI>,std::any::_Manager_external<std::shared_ptr<data::ConfigGadgetUI>>,true,true>(
    (std::any *const)(v2 + 704),
    &this->ui_interact);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 704));
  *(_WORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigGadgetMisc &,data::ConfigGadgetMisc,std::any::_Manager_external<data::ConfigGadgetMisc>,true,true>(
    (std::any *const)(v2 + 736),
    &this->misc);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 736));
  *(_WORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>> &,std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>>,std::any::_Manager_external<std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>>>,true,true>(
    (std::any *const)(v2 + 768),
    &this->state_layers);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 768));
  *(_WORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigGadgetAudio> &,std::shared_ptr<data::ConfigGadgetAudio>,std::any::_Manager_external<std::shared_ptr<data::ConfigGadgetAudio>>,true,true>(
    (std::any *const)(v2 + 800),
    &this->audio);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 800));
  *(_WORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigAIBeta &,data::ConfigAIBeta,std::any::_Manager_external<data::ConfigAIBeta>,true,true>(
    (std::any *const)(v2 + 832),
    &this->aibeta);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 832));
  *(_WORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigWeather &,data::ConfigWeather,std::any::_Manager_external<data::ConfigWeather>,true,true>(
    (std::any *const)(v2 + 864),
    &this->weather);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 864));
  *(_WORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigWall &,data::ConfigWall,std::any::_Manager_external<data::ConfigWall>,true,true>(
    (std::any *const)(v2 + 896),
    &this->wall);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 896));
  *(_WORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigFace &,data::ConfigFace,std::any::_Manager_external<data::ConfigFace>,true,true>(
    (std::any *const)(v2 + 928),
    &this->face);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 928));
  *(_WORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigPartController &,data::ConfigPartController,std::any::_Manager_external<data::ConfigPartController>,true,true>(
    (std::any *const)(v2 + 960),
    &this->part_control);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 960));
  *(_WORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigPaimon &,data::ConfigPaimon,std::any::_Manager_external<data::ConfigPaimon>,true,true>(
    (std::any *const)(v2 + 992),
    &this->paimon);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 992));
  *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigCharacterRendering &,data::ConfigCharacterRendering,std::any::_Manager_external<data::ConfigCharacterRendering>,true,true>(
    (std::any *const)(v2 + 1024),
    &this->character_rendering);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1024));
  *(_WORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1056),
    &this->radar_hint);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1056));
  *(_WORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1088),
    &this->keep_modifier_out_sight);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1088));
  *(_WORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigGadgetAction &,data::ConfigGadgetAction,std::any::_Manager_external<data::ConfigGadgetAction>,true,true>(
    (std::any *const)(v2 + 1120),
    &this->gadget_action);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1120));
  *(_WORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigGadgetTurn> &,std::shared_ptr<data::ConfigGadgetTurn>,std::any::_Manager_external<std::shared_ptr<data::ConfigGadgetTurn>>,true,true>(
    (std::any *const)(v2 + 1152),
    &this->gadget_turn);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1152));
  *(_WORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigGlobalValueTurn> &,std::shared_ptr<data::ConfigGlobalValueTurn>,std::any::_Manager_external<std::shared_ptr<data::ConfigGlobalValueTurn>>,true,true>(
    (std::any *const)(v2 + 1184),
    &this->gv_turn);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1184));
  *(_WORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigBillboard> &,std::shared_ptr<data::ConfigBillboard>,std::any::_Manager_external<std::shared_ptr<data::ConfigBillboard>>,true,true>(
    (std::any *const)(v2 + 1216),
    &this->billboard);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1216));
  *(_WORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigIntee &,data::ConfigIntee,std::any::_Manager_external<data::ConfigIntee>,true,true>(
    (std::any *const)(v2 + 1248),
    &this->intee);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1248));
  *(_WORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<std::string> &,std::vector<std::string>,std::any::_Manager_external<std::vector<std::string>>,true,true>(
    (std::any *const)(v2 + 1280),
    &this->bind_emotions);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1280));
  *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 1312), &this->projector);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1312));
  *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1344),
    &this->low_priority_intee);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1344));
  *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1376),
    &this->can_remove_by_client);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1376));
  *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<std::string> &,std::vector<std::string>,std::any::_Manager_external<std::vector<std::string>>,true,true>(
    (std::any *const)(v2 + 1408),
    &this->tags);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1408));
  *(_WORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1440),
    &this->can_be_triggered_by_avatar_ray);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1440));
  *(_WORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigVehicle &,data::ConfigVehicle,std::any::_Manager_external<data::ConfigVehicle>,true,true>(
    (std::any *const)(v2 + 1472),
    &this->vehicle);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1472));
  *(_WORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigDangerZone> &,std::shared_ptr<data::ConfigDangerZone>,std::any::_Manager_external<std::shared_ptr<data::ConfigDangerZone>>,true,true>(
    (std::any *const)(v2 + 1504),
    &this->dangerzone);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1504));
  *(_WORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigFishingZone> &,std::shared_ptr<data::ConfigFishingZone>,std::any::_Manager_external<std::shared_ptr<data::ConfigFishingZone>>,true,true>(
    (std::any *const)(v2 + 1536),
    &this->fishing_zone);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1536));
  *(_WORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::EntityType &,data::EntityType,std::any::_Manager_internal<data::EntityType>,true,true>(
    (std::any *const)(v2 + 1568),
    &this->force_set_entity_type);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1568));
  *(_WORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigGadgetSpecialCamera> &,std::shared_ptr<data::ConfigGadgetSpecialCamera>,std::any::_Manager_external<std::shared_ptr<data::ConfigGadgetSpecialCamera>>,true,true>(
    (std::any *const)(v2 + 1600),
    &this->camera_adjust);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1600));
  *(_WORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigVODIntee &,data::ConfigVODIntee,std::any::_Manager_internal<data::ConfigVODIntee>,true,true>(
    (std::any *const)(v2 + 1632),
    &this->vod_intee);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1632));
  *(_WORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigLivePlayer> &,std::shared_ptr<data::ConfigLivePlayer>,std::any::_Manager_external<std::shared_ptr<data::ConfigLivePlayer>>,true,true>(
    (std::any *const)(v2 + 1664),
    &this->vod_player);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1664));
  *(_WORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigGadgetCameraBox &,data::ConfigGadgetCameraBox,std::any::_Manager_external<data::ConfigGadgetCameraBox>,true,true>(
    (std::any *const)(v2 + 1696),
    &this->camera_box);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1696));
  *(_WORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1728),
    &this->open_watcher);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1728));
  *(_WORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = 0;
  std::any::any<unsigned int &,unsigned int,std::any::_Manager_internal<unsigned int>,true,true>(
    (std::any *const)(v2 + 1760),
    &this->ray_tag);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1760));
  *(_WORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1792),
    &this->has_ray_tag);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1792));
  *(_WORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1824),
    &this->use_retreat_type);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1824));
  *(_WORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1856),
    &this->dont_destroy_by_perform);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1856));
  *(_WORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>(
    (std::any *const)(v2 + 1888),
    &this->correct_owner);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 1888));
  std::any::~any((std::any *const)(v2 + 1888));
  std::any::~any((std::any *const)(v2 + 1856));
  std::any::~any((std::any *const)(v2 + 1824));
  std::any::~any((std::any *const)(v2 + 1792));
  std::any::~any((std::any *const)(v2 + 1760));
  std::any::~any((std::any *const)(v2 + 1728));
  std::any::~any((std::any *const)(v2 + 1696));
  std::any::~any((std::any *const)(v2 + 1664));
  std::any::~any((std::any *const)(v2 + 1632));
  std::any::~any((std::any *const)(v2 + 1600));
  std::any::~any((std::any *const)(v2 + 1568));
  std::any::~any((std::any *const)(v2 + 1536));
  std::any::~any((std::any *const)(v2 + 1504));
  std::any::~any((std::any *const)(v2 + 1472));
  std::any::~any((std::any *const)(v2 + 1440));
  std::any::~any((std::any *const)(v2 + 1408));
  std::any::~any((std::any *const)(v2 + 1376));
  std::any::~any((std::any *const)(v2 + 1344));
  std::any::~any((std::any *const)(v2 + 1312));
  std::any::~any((std::any *const)(v2 + 1280));
  std::any::~any((std::any *const)(v2 + 1248));
  std::any::~any((std::any *const)(v2 + 1216));
  std::any::~any((std::any *const)(v2 + 1184));
  std::any::~any((std::any *const)(v2 + 1152));
  std::any::~any((std::any *const)(v2 + 1120));
  std::any::~any((std::any *const)(v2 + 1088));
  std::any::~any((std::any *const)(v2 + 1056));
  std::any::~any((std::any *const)(v2 + 1024));
  std::any::~any((std::any *const)(v2 + 992));
  std::any::~any((std::any *const)(v2 + 960));
  std::any::~any((std::any *const)(v2 + 928));
  std::any::~any((std::any *const)(v2 + 896));
  std::any::~any((std::any *const)(v2 + 864));
  std::any::~any((std::any *const)(v2 + 832));
  std::any::~any((std::any *const)(v2 + 800));
  std::any::~any((std::any *const)(v2 + 768));
  std::any::~any((std::any *const)(v2 + 736));
  std::any::~any((std::any *const)(v2 + 704));
  std::any::~any((std::any *const)(v2 + 672));
  std::any::~any((std::any *const)(v2 + 640));
  std::any::~any((std::any *const)(v2 + 608));
  std::any::~any((std::any *const)(v2 + 576));
  std::any::~any((std::any *const)(v2 + 544));
  std::any::~any((std::any *const)(v2 + 512));
  std::any::~any((std::any *const)(v2 + 480));
  std::any::~any((std::any *const)(v2 + 448));
  std::any::~any((std::any *const)(v2 + 416));
  std::any::~any((std::any *const)(v2 + 384));
  std::any::~any((std::any *const)(v2 + 352));
  std::any::~any((std::any *const)(v2 + 320));
  std::any::~any((std::any *const)(v2 + 288));
  std::any::~any((std::any *const)(v2 + 256));
  std::any::~any((std::any *const)(v2 + 224));
  std::any::~any((std::any *const)(v2 + 192));
  std::any::~any((std::any *const)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 248) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1984LL, v5);
  }
};

// Line 7804: range 000000000E66731E-000000000E66742E
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigGadget::clone(data::ConfigGadget *const this)
{
  data::ConfigGadget *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigEntity> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadget::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigGadget,data::ConfigGadget&>(
    (common::tools::perf::allocator<data::ConfigGadget,data::ConfigGadget> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigEntity>::shared_ptr<data::ConfigGadget,void>(
    (std::shared_ptr<data::ConfigEntity> *const)this,
    (std::shared_ptr<data::ConfigGadget> *)(v2 + 32));
  std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 7808: range 000000000E667430-000000000E671F8D
bool __cdecl data::ConfigGadget::fromJson(data::ConfigGadget *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  std::shared_ptr<data::ConfigMove> *v6; // rax
  bool v7; // r14
  std::shared_ptr<data::ConfigGadgetPattern> *v8; // rax
  bool v9; // r14
  unsigned __int64 v10; // rax
  void (__fastcall **v11)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v12)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigGadgetUI> *v13; // rax
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  std::shared_ptr<data::ConfigGadgetAudio> *v16; // rax
  bool v17; // r14
  std::shared_ptr<data::ConfigGadgetTurn> *v18; // rax
  bool v19; // r14
  unsigned __int64 v20; // rax
  void (__fastcall **v21)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v22)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigGlobalValueTurn> *v23; // rax
  unsigned __int64 v24; // rax
  unsigned __int64 v25; // rdx
  std::shared_ptr<data::ConfigBillboard> *v26; // rax
  bool v27; // r14
  unsigned __int64 v28; // rax
  void (__fastcall **v29)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v30)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigDangerZone> *v31; // rax
  unsigned __int64 v32; // rax
  unsigned __int64 v33; // rdx
  unsigned __int64 v34; // rax
  void (__fastcall **v35)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v36)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigFishingZone> *v37; // rax
  unsigned __int64 v38; // rax
  unsigned __int64 v39; // rdx
  bool v40; // r14
  unsigned __int64 v41; // rax
  void (__fastcall **v42)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v43)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigGadgetSpecialCamera> *v44; // rax
  unsigned __int64 v45; // rax
  unsigned __int64 v46; // rdx
  unsigned __int64 v47; // rax
  void (__fastcall **v48)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v49)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigLivePlayer> *v50; // rax
  unsigned __int64 v51; // rax
  unsigned __int64 v52; // rdx
  bool *p_correct_owner; // rsi
  bool v54; // bl
  char v56; // [rsp+Fh] [rbp-26C1h]
  char v57; // [rsp+Fh] [rbp-26C1h]
  char v58; // [rsp+Fh] [rbp-26C1h]
  char v59; // [rsp+Fh] [rbp-26C1h]
  char v60; // [rsp+Fh] [rbp-26C1h]
  char v61; // [rsp+Fh] [rbp-26C1h]
  const Json::Value *has_equip_ptr; // [rsp+28h] [rbp-26A8h]
  const Json::Value *has_audio_ptr; // [rsp+30h] [rbp-26A0h]
  const Json::Value *has_model_ptr; // [rsp+38h] [rbp-2698h]
  const Json::Value *has_ability_ptr; // [rsp+40h] [rbp-2690h]
  const Json::Value *has_dither_ptr; // [rsp+48h] [rbp-2688h]
  const Json::Value *has_follow_wind_zone_rotation_ptr; // [rsp+50h] [rbp-2680h]
  const Json::Value *force_dont_use_update_rigidbody_ptr; // [rsp+58h] [rbp-2678h]
  const Json::Value *has_connect_trigger_ptr; // [rsp+60h] [rbp-2670h]
  const Json::Value *can_be_created_on_platform_ptr; // [rsp+68h] [rbp-2668h]
  const Json::Value *connect_trigger_priority_ptr; // [rsp+70h] [rbp-2660h]
  const Json::Value *ignore_child_scene_prop_ptr; // [rsp+78h] [rbp-2658h]
  const Json::Value *move_refresh_ground_force_up_ptr; // [rsp+80h] [rbp-2650h]
  const Json::Value *combat_ptr; // [rsp+88h] [rbp-2648h]
  const Json::Value *combat_template_ptr; // [rsp+90h] [rbp-2640h]
  const Json::Value *abilities_ptr; // [rsp+98h] [rbp-2638h]
  const Json::Value *field_ptr; // [rsp+A0h] [rbp-2630h]
  const Json::Value *timer_ptr; // [rsp+A8h] [rbp-2628h]
  const Json::Value *move_ptr; // [rsp+B0h] [rbp-2620h]
  const Json::Value *gadget_ptr; // [rsp+B8h] [rbp-2618h]
  const Json::Value *equipment_ptr; // [rsp+C0h] [rbp-2610h]
  const Json::Value *navigation_ptr; // [rsp+C8h] [rbp-2608h]
  const Json::Value *ui_interact_ptr; // [rsp+D0h] [rbp-2600h]
  const Json::Value *misc_ptr; // [rsp+D8h] [rbp-25F8h]
  const Json::Value *state_layers_ptr; // [rsp+E0h] [rbp-25F0h]
  const Json::Value *audio_ptr; // [rsp+E8h] [rbp-25E8h]
  const Json::Value *aibeta_ptr; // [rsp+F0h] [rbp-25E0h]
  const Json::Value *weather_ptr; // [rsp+F8h] [rbp-25D8h]
  const Json::Value *wall_ptr; // [rsp+100h] [rbp-25D0h]
  const Json::Value *face_ptr; // [rsp+108h] [rbp-25C8h]
  const Json::Value *part_control_ptr; // [rsp+110h] [rbp-25C0h]
  const Json::Value *paimon_ptr; // [rsp+118h] [rbp-25B8h]
  const Json::Value *character_rendering_ptr; // [rsp+120h] [rbp-25B0h]
  const Json::Value *radar_hint_ptr; // [rsp+128h] [rbp-25A8h]
  const Json::Value *keep_modifier_out_sight_ptr; // [rsp+130h] [rbp-25A0h]
  const Json::Value *gadget_action_ptr; // [rsp+138h] [rbp-2598h]
  const Json::Value *gadget_turn_ptr; // [rsp+140h] [rbp-2590h]
  const Json::Value *gv_turn_ptr; // [rsp+148h] [rbp-2588h]
  const Json::Value *billboard_ptr; // [rsp+150h] [rbp-2580h]
  const Json::Value *intee_ptr; // [rsp+158h] [rbp-2578h]
  const Json::Value *bind_emotions_ptr; // [rsp+160h] [rbp-2570h]
  const Json::Value *projector_ptr; // [rsp+168h] [rbp-2568h]
  const Json::Value *low_priority_intee_ptr; // [rsp+170h] [rbp-2560h]
  const Json::Value *can_remove_by_client_ptr; // [rsp+178h] [rbp-2558h]
  const Json::Value *tags_ptr; // [rsp+180h] [rbp-2550h]
  const Json::Value *can_be_triggered_by_avatar_ray_ptr; // [rsp+188h] [rbp-2548h]
  const Json::Value *vehicle_ptr; // [rsp+190h] [rbp-2540h]
  const Json::Value *dangerzone_ptr; // [rsp+198h] [rbp-2538h]
  const Json::Value *fishing_zone_ptr; // [rsp+1A0h] [rbp-2530h]
  Json::Value *force_set_entity_type_ptr; // [rsp+1A8h] [rbp-2528h]
  const Json::Value *camera_adjust_ptr; // [rsp+1B0h] [rbp-2520h]
  const Json::Value *vod_intee_ptr; // [rsp+1B8h] [rbp-2518h]
  const Json::Value *vod_player_ptr; // [rsp+1C0h] [rbp-2510h]
  const Json::Value *camera_box_ptr; // [rsp+1C8h] [rbp-2508h]
  const Json::Value *open_watcher_ptr; // [rsp+1D0h] [rbp-2500h]
  const Json::Value *ray_tag_ptr; // [rsp+1D8h] [rbp-24F8h]
  const Json::Value *has_ray_tag_ptr; // [rsp+1E0h] [rbp-24F0h]
  const Json::Value *use_retreat_type_ptr; // [rsp+1E8h] [rbp-24E8h]
  const Json::Value *dont_destroy_by_perform_ptr; // [rsp+1F0h] [rbp-24E0h]
  const Json::Value *correct_owner_ptr; // [rsp+1F8h] [rbp-24D8h]
  char v122[9424]; // [rsp+200h] [rbp-24D0h] BYREF

  v2 = (unsigned __int64)v122;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_8(9376LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "201 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 "
                        "9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unk"
                        "nown> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 1 9 <unknown> "
                        "304 1 9 <unknown> 320 1 9 <unknown> 336 1 9 <unknown> 352 1 9 <unknown> 368 1 9 <unknown> 384 1 "
                        "9 <unknown> 400 1 9 <unknown> 416 1 9 <unknown> 432 1 9 <unknown> 448 1 9 <unknown> 464 1 9 <unk"
                        "nown> 480 1 9 <unknown> 496 1 9 <unknown> 512 1 9 <unknown> 528 1 9 <unknown> 544 1 9 <unknown> "
                        "560 1 9 <unknown> 576 1 9 <unknown> 592 1 9 <unknown> 608 1 9 <unknown> 624 1 9 <unknown> 640 1 "
                        "9 <unknown> 656 1 9 <unknown> 672 1 9 <unknown> 688 1 9 <unknown> 704 1 9 <unknown> 720 1 9 <unk"
                        "nown> 736 1 9 <unknown> 752 1 9 <unknown> 768 1 9 <unknown> 784 1 9 <unknown> 800 1 9 <unknown> "
                        "816 1 9 <unknown> 832 1 9 <unknown> 848 1 9 <unknown> 864 1 9 <unknown> 880 1 9 <unknown> 896 1 "
                        "9 <unknown> 912 1 9 <unknown> 928 1 9 <unknown> 944 1 9 <unknown> 960 1 9 <unknown> 976 1 9 <unk"
                        "nown> 992 16 9 <unknown> 1024 16 9 <unknown> 1056 16 9 <unknown> 1088 16 9 <unknown> 1120 16 9 <"
                        "unknown> 1152 16 9 <unknown> 1184 16 9 <unknown> 1216 16 9 <unknown> 1248 16 9 <unknown> 1280 16"
                        " 9 <unknown> 1312 16 9 <unknown> 1344 16 9 <unknown> 1376 16 9 <unknown> 1408 16 9 <unknown> 144"
                        "0 16 9 <unknown> 1472 16 9 <unknown> 1504 16 9 <unknown> 1536 16 9 <unknown> 1568 16 9 <unknown>"
                        " 1600 16 9 <unknown> 1632 16 9 <unknown> 1664 16 9 <unknown> 1696 32 9 <unknown> 1760 32 9 <unkn"
                        "own> 1824 32 9 <unknown> 1888 32 9 <unknown> 1952 32 9 <unknown> 2016 32 9 <unknown> 2080 32 9 <"
                        "unknown> 2144 32 9 <unknown> 2208 32 9 <unknown> 2272 32 9 <unknown> 2336 32 9 <unknown> 2400 32"
                        " 9 <unknown> 2464 32 9 <unknown> 2528 32 9 <unknown> 2592 32 9 <unknown> 2656 32 9 <unknown> 272"
                        "0 32 9 <unknown> 2784 32 9 <unknown> 2848 32 9 <unknown> 2912 32 9 <unknown> 2976 32 9 <unknown>"
                        " 3040 32 9 <unknown> 3104 32 9 <unknown> 3168 32 9 <unknown> 3232 32 9 <unknown> 3296 32 9 <unkn"
                        "own> 3360 32 9 <unknown> 3424 32 9 <unknown> 3488 32 9 <unknown> 3552 32 9 <unknown> 3616 32 9 <"
                        "unknown> 3680 32 9 <unknown> 3744 32 9 <unknown> 3808 32 9 <unknown> 3872 32 9 <unknown> 3936 32"
                        " 9 <unknown> 4000 32 9 <unknown> 4064 32 9 <unknown> 4128 32 9 <unknown> 4192 32 9 <unknown> 425"
                        "6 32 9 <unknown> 4320 32 9 <unknown> 4384 32 9 <unknown> 4448 32 9 <unknown> 4512 32 9 <unknown>"
                        " 4576 32 9 <unknown> 4640 32 9 <unknown> 4704 32 9 <unknown> 4768 32 9 <unknown> 4832 32 9 <unkn"
                        "own> 4896 32 9 <unknown> 4960 32 9 <unknown> 5024 32 9 <unknown> 5088 32 9 <unknown> 5152 32 9 <"
                        "unknown> 5216 32 9 <unknown> 5280 32 9 <unknown> 5344 32 9 <unknown> 5408 32 9 <unknown> 5472 32"
                        " 9 <unknown> 5536 32 9 <unknown> 5600 32 9 <unknown> 5664 32 9 <unknown> 5728 32 9 <unknown> 579"
                        "2 32 9 <unknown> 5856 32 9 <unknown> 5920 32 9 <unknown> 5984 32 9 <unknown> 6048 32 9 <unknown>"
                        " 6112 32 9 <unknown> 6176 32 9 <unknown> 6240 32 9 <unknown> 6304 32 9 <unknown> 6368 32 9 <unkn"
                        "own> 6432 32 9 <unknown> 6496 32 9 <unknown> 6560 32 9 <unknown> 6624 32 9 <unknown> 6688 32 9 <"
                        "unknown> 6752 32 9 <unknown> 6816 32 9 <unknown> 6880 32 9 <unknown> 6944 32 9 <unknown> 7008 32"
                        " 9 <unknown> 7072 32 9 <unknown> 7136 32 9 <unknown> 7200 32 9 <unknown> 7264 32 9 <unknown> 732"
                        "8 32 9 <unknown> 7392 32 9 <unknown> 7456 32 9 <unknown> 7520 32 9 <unknown> 7584 32 9 <unknown>"
                        " 7648 32 9 <unknown> 7712 32 9 <unknown> 7776 32 9 <unknown> 7840 32 9 <unknown> 7904 32 9 <unkn"
                        "own> 7968 32 9 <unknown> 8032 32 9 <unknown> 8096 32 9 <unknown> 8160 32 9 <unknown> 8224 32 9 <"
                        "unknown> 8288 32 9 <unknown> 8352 32 9 <unknown> 8416 32 9 <unknown> 8480 32 9 <unknown> 8544 32"
                        " 9 <unknown> 8608 32 9 <unknown> 8672 32 9 <unknown> 8736 32 9 <unknown> 8800 32 9 <unknown> 886"
                        "4 32 9 <unknown> 8928 32 9 <unknown> 8992 32 9 <unknown> 9056 32 9 <unknown> 9120 32 9 <unknown>"
                        " 9184 32 9 <unknown> 9248 32 9 <unknown> 9312 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadget::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234753535;
  v4[536862730] = -234753535;
  v4[536862731] = -234753535;
  v4[536862732] = -234753535;
  v4[536862733] = -234753535;
  v4[536862734] = -234753535;
  v4[536862735] = -234753535;
  v4[536862736] = -234753535;
  v4[536862737] = -234753535;
  v4[536862738] = -234753535;
  v4[536862739] = -234753535;
  v4[536862740] = -234753535;
  v4[536862741] = -234753535;
  v4[536862742] = -234753535;
  v4[536862743] = -234753535;
  v4[536862744] = -234753535;
  v4[536862745] = -234753535;
  v4[536862746] = -234753535;
  v4[536862747] = -234753535;
  v4[536862748] = -234753535;
  v4[536862749] = -234753535;
  v4[536862750] = -234753535;
  v4[536862751] = -219021312;
  v4[536862752] = -219021312;
  v4[536862753] = -219021312;
  v4[536862754] = -219021312;
  v4[536862755] = -219021312;
  v4[536862756] = -219021312;
  v4[536862757] = -219021312;
  v4[536862758] = -219021312;
  v4[536862759] = -219021312;
  v4[536862760] = -219021312;
  v4[536862761] = -219021312;
  v4[536862762] = -219021312;
  v4[536862763] = -219021312;
  v4[536862764] = -219021312;
  v4[536862765] = -219021312;
  v4[536862766] = -219021312;
  v4[536862767] = -219021312;
  v4[536862768] = -219021312;
  v4[536862769] = -219021312;
  v4[536862770] = -219021312;
  v4[536862771] = -219021312;
  v4[536862772] = -219021312;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -218959118;
  v4[536862780] = -218959118;
  v4[536862782] = -218959118;
  v4[536862784] = -218959118;
  v4[536862786] = -218959118;
  v4[536862788] = -218959118;
  v4[536862790] = -218959118;
  v4[536862792] = -218959118;
  v4[536862794] = -218959118;
  v4[536862796] = -218959118;
  v4[536862798] = -218959118;
  v4[536862800] = -218959118;
  v4[536862802] = -218959118;
  v4[536862804] = -218959118;
  v4[536862806] = -218959118;
  v4[536862808] = -218959118;
  v4[536862810] = -218959118;
  v4[536862812] = -218959118;
  v4[536862814] = -218959118;
  v4[536862816] = -218959118;
  v4[536862818] = -218959118;
  v4[536862820] = -218959118;
  v4[536862822] = -218959118;
  v4[536862824] = -218959118;
  v4[536862826] = -218959118;
  v4[536862828] = -218959118;
  v4[536862830] = -218959118;
  v4[536862832] = -218959118;
  v4[536862834] = -218959118;
  v4[536862836] = -218959118;
  v4[536862838] = -218959118;
  v4[536862840] = -218959118;
  v4[536862842] = -218959118;
  v4[536862844] = -218959118;
  v4[536862846] = -218959118;
  v4[536862848] = -218959118;
  v4[536862850] = -218959118;
  v4[536862852] = -218959118;
  v4[536862854] = -218959118;
  v4[536862856] = -218959118;
  v4[536862858] = -218959118;
  v4[536862860] = -218959118;
  v4[536862862] = -218959118;
  v4[536862864] = -218959118;
  v4[536862866] = -218959118;
  v4[536862868] = -218959118;
  v4[536862870] = -218959118;
  v4[536862872] = -218959118;
  v4[536862874] = -218959118;
  v4[536862876] = -218959118;
  v4[536862878] = -218959118;
  v4[536862880] = -218959118;
  v4[536862882] = -218959118;
  v4[536862884] = -218959118;
  v4[536862886] = -218959118;
  v4[536862888] = -218959118;
  v4[536862890] = -218959118;
  v4[536862892] = -218959118;
  v4[536862894] = -218959118;
  v4[536862896] = -218959118;
  v4[536862898] = -218959118;
  v4[536862900] = -218959118;
  v4[536862902] = -218959118;
  v4[536862904] = -218959118;
  v4[536862906] = -218959118;
  v4[536862908] = -218959118;
  v4[536862910] = -218959118;
  v4[536862912] = -218959118;
  v4[536862914] = -218959118;
  v4[536862916] = -218959118;
  v4[536862918] = -218959118;
  v4[536862920] = -218959118;
  v4[536862922] = -218959118;
  v4[536862924] = -218959118;
  v4[536862926] = -218959118;
  v4[536862928] = -218959118;
  v4[536862930] = -218959118;
  v4[536862932] = -218959118;
  v4[536862934] = -218959118;
  v4[536862936] = -218959118;
  v4[536862938] = -218959118;
  v4[536862940] = -218959118;
  v4[536862942] = -218959118;
  v4[536862944] = -218959118;
  v4[536862946] = -218959118;
  v4[536862948] = -218959118;
  v4[536862950] = -218959118;
  v4[536862952] = -218959118;
  v4[536862954] = -218959118;
  v4[536862956] = -218959118;
  v4[536862958] = -218959118;
  v4[536862960] = -218959118;
  v4[536862962] = -218959118;
  v4[536862964] = -218959118;
  v4[536862966] = -218959118;
  v4[536862968] = -218959118;
  v4[536862970] = -218959118;
  v4[536862972] = -218959118;
  v4[536862974] = -218959118;
  v4[536862976] = -218959118;
  v4[536862978] = -218959118;
  v4[536862980] = -218959118;
  v4[536862982] = -218959118;
  v4[536862984] = -218959118;
  v4[536862986] = -218959118;
  v4[536862988] = -218959118;
  v4[536862990] = -218959118;
  v4[536862992] = -218959118;
  v4[536862994] = -218959118;
  v4[536862996] = -218959118;
  v4[536862998] = -218959118;
  v4[536863000] = -218959118;
  v4[536863002] = -218959118;
  v4[536863004] = -218959118;
  v4[536863006] = -218959118;
  v4[536863008] = -218959118;
  v4[536863010] = -218959118;
  v4[536863012] = -202116109;
  if ( !data::ConfigEntity::fromJson((data::ConfigEntity *const)this, jval) )
  {
    if ( *(char *)(((v2 + 1696) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 1696, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 1696),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      7811);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 1696),
      (const char (*)[34])"fromJson for: ConfigEntity fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1696));
    v5 = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1760),
      "hasEquip",
      (const std::allocator<char> *)(v2 + 48));
    has_equip_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1760));
    std::string::~string((void *)(v2 + 1760));
    *(_DWORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( has_equip_ptr && !fromJson<bool>(has_equip_ptr, &this->has_equip) )
    {
      *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1824) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1855) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1855) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1824, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1824),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        7823);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        (common::milog::MiLogStream *const)(v2 + 1824),
        (const char (*)[30])"fromJson for: hasEquip fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1824));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 1888),
        "hasAudio",
        (const std::allocator<char> *)(v2 + 64));
      has_audio_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1888));
      std::string::~string((void *)(v2 + 1888));
      *(_DWORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( has_audio_ptr && !fromJson<bool>(has_audio_ptr, &this->has_audio) )
      {
        *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1952) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1983) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1983) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1952, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1952),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          7835);
        common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
          (common::milog::MiLogStream *const)(v2 + 1952),
          (const char (*)[30])"fromJson for: hasAudio fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1952));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 2016) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 2016),
          "hasModel",
          (const std::allocator<char> *)(v2 + 80));
        has_model_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2016));
        std::string::~string((void *)(v2 + 2016));
        *(_DWORD *)(((v2 + 2016) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( has_model_ptr && !fromJson<bool>(has_model_ptr, &this->has_model) )
        {
          *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 2080) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 2111) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 2111) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 2080, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 2080),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            7847);
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            (common::milog::MiLogStream *const)(v2 + 2080),
            (const char (*)[30])"fromJson for: hasModel fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2080));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 2144) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 2144),
            "hasAbility",
            (const std::allocator<char> *)(v2 + 96));
          has_ability_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2144));
          std::string::~string((void *)(v2 + 2144));
          *(_DWORD *)(((v2 + 2144) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( has_ability_ptr && !fromJson<bool>(has_ability_ptr, &this->has_ability) )
          {
            *(_DWORD *)(((v2 + 2208) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 2208) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 2239) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 2239) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 2208, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 2208),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              7859);
            common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
              (common::milog::MiLogStream *const)(v2 + 2208),
              (const char (*)[32])"fromJson for: hasAbility fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2208));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 2272) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 2272),
              "hasDither",
              (const std::allocator<char> *)(v2 + 112));
            has_dither_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2272));
            std::string::~string((void *)(v2 + 2272));
            *(_DWORD *)(((v2 + 2272) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( has_dither_ptr && !fromJson<bool>(has_dither_ptr, &this->has_dither) )
            {
              *(_DWORD *)(((v2 + 2336) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 2336) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 2367) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 2367) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 2336, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 2336),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                7871);
              common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                (common::milog::MiLogStream *const)(v2 + 2336),
                (const char (*)[31])"fromJson for: hasDither fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2336));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 2400) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 128);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 2400),
                "hasFollowWindZoneRotation",
                (const std::allocator<char> *)(v2 + 128));
              has_follow_wind_zone_rotation_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2400));
              std::string::~string((void *)(v2 + 2400));
              *(_DWORD *)(((v2 + 2400) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 128);
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
              if ( has_follow_wind_zone_rotation_ptr
                && !fromJson<bool>(has_follow_wind_zone_rotation_ptr, &this->has_follow_wind_zone_rotation) )
              {
                *(_DWORD *)(((v2 + 2464) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 2464) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 2495) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 2495) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 2464, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 2464),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  7883);
                common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                  (common::milog::MiLogStream *const)(v2 + 2464),
                  (const char (*)[47])"fromJson for: hasFollowWindZoneRotation fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2464));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 2528) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 144);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 2528),
                  "forceDontUseUpdateRigidbody",
                  (const std::allocator<char> *)(v2 + 144));
                force_dont_use_update_rigidbody_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2528));
                std::string::~string((void *)(v2 + 2528));
                *(_DWORD *)(((v2 + 2528) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 144);
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
                if ( force_dont_use_update_rigidbody_ptr
                  && !fromJson<bool>(force_dont_use_update_rigidbody_ptr, &this->force_dont_use_update_rigidbody) )
                {
                  *(_DWORD *)(((v2 + 2592) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 2592) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 2623) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 2623) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 2592, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 2592),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    7895);
                  common::milog::MiLogStream::operator<<<char [49],(char *[49])0>(
                    (common::milog::MiLogStream *const)(v2 + 2592),
                    (const char (*)[49])"fromJson for: forceDontUseUpdateRigidbody fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2592));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 2656) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 160);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 2656),
                    "hasConnectTrigger",
                    (const std::allocator<char> *)(v2 + 160));
                  has_connect_trigger_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2656));
                  std::string::~string((void *)(v2 + 2656));
                  *(_DWORD *)(((v2 + 2656) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 160);
                  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                  if ( has_connect_trigger_ptr && !fromJson<bool>(has_connect_trigger_ptr, &this->has_connect_trigger) )
                  {
                    *(_DWORD *)(((v2 + 2720) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 2720) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 2751) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 2751) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 2720, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 2720),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      7907);
                    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                      (common::milog::MiLogStream *const)(v2 + 2720),
                      (const char (*)[39])"fromJson for: hasConnectTrigger fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2720));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 2784) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 176);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 2784),
                      "canBeCreatedOnPlatform",
                      (const std::allocator<char> *)(v2 + 176));
                    can_be_created_on_platform_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2784));
                    std::string::~string((void *)(v2 + 2784));
                    *(_DWORD *)(((v2 + 2784) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 176);
                    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                    if ( can_be_created_on_platform_ptr
                      && !fromJson<bool>(can_be_created_on_platform_ptr, &this->can_be_created_on_platform) )
                    {
                      *(_DWORD *)(((v2 + 2848) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 2848) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 2879) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 2879) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 2848, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 2848),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        7919);
                      common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                        (common::milog::MiLogStream *const)(v2 + 2848),
                        (const char (*)[44])"fromJson for: canBeCreatedOnPlatform fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2848));
                      v5 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(((v2 + 2912) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 192);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 2912),
                        "connectTriggerPriority",
                        (const std::allocator<char> *)(v2 + 192));
                      connect_trigger_priority_ptr = jsonValueFind(jval, (const std::string *)(v2 + 2912));
                      std::string::~string((void *)(v2 + 2912));
                      *(_DWORD *)(((v2 + 2912) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 192);
                      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                      if ( connect_trigger_priority_ptr
                        && !fromJson<unsigned int>(connect_trigger_priority_ptr, &this->connect_trigger_priority) )
                      {
                        *(_DWORD *)(((v2 + 2976) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 2976) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 3007) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3007) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 2976, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 2976),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          7931);
                        common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(
                          (common::milog::MiLogStream *const)(v2 + 2976),
                          (const char (*)[44])"fromJson for: connectTriggerPriority fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2976));
                        v5 = 0;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 3040) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 208);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 3040),
                          "ignoreChildSceneProp",
                          (const std::allocator<char> *)(v2 + 208));
                        ignore_child_scene_prop_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3040));
                        std::string::~string((void *)(v2 + 3040));
                        *(_DWORD *)(((v2 + 3040) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 208);
                        *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                        if ( ignore_child_scene_prop_ptr
                          && !fromJson<bool>(ignore_child_scene_prop_ptr, &this->ignore_child_scene_prop) )
                        {
                          *(_DWORD *)(((v2 + 3104) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 3104) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 3135) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 3135) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 3104, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 3104),
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/json_data_auto/ConfigEntity.cpp",
                            "fromJson",
                            7943);
                          common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                            (common::milog::MiLogStream *const)(v2 + 3104),
                            (const char (*)[42])"fromJson for: ignoreChildSceneProp fails!");
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3104));
                          v5 = 0;
                        }
                        else
                        {
                          *(_DWORD *)(((v2 + 3168) >> 3) + 0x7FFF8000) = 0;
                          *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                          std::allocator<char>::allocator(v2 + 224);
                          std::string::basic_string<std::allocator<char>>(
                            (std::string *const)(v2 + 3168),
                            "moveRefreshGroundForceUp",
                            (const std::allocator<char> *)(v2 + 224));
                          move_refresh_ground_force_up_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3168));
                          std::string::~string((void *)(v2 + 3168));
                          *(_DWORD *)(((v2 + 3168) >> 3) + 0x7FFF8000) = -117901064;
                          std::allocator<char>::~allocator(v2 + 224);
                          *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                          if ( move_refresh_ground_force_up_ptr
                            && !fromJson<bool>(move_refresh_ground_force_up_ptr, &this->move_refresh_ground_force_up) )
                          {
                            *(_DWORD *)(((v2 + 3232) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v2 + 3232) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v2 + 3263) >> 3) + 0x7FFF8000) != 0
                              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3263) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v2 + 3232, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v2 + 3232),
                              &common::milog::MiLogDefault::default_log_obj_,
                              3u,
                              "./src/json_data_auto/ConfigEntity.cpp",
                              "fromJson",
                              7955);
                            common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
                              (common::milog::MiLogStream *const)(v2 + 3232),
                              (const char (*)[46])"fromJson for: moveRefreshGroundForceUp fails!");
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3232));
                            v5 = 0;
                          }
                          else
                          {
                            *(_DWORD *)(((v2 + 3296) >> 3) + 0x7FFF8000) = 0;
                            *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                            std::allocator<char>::allocator(v2 + 240);
                            std::string::basic_string<std::allocator<char>>(
                              (std::string *const)(v2 + 3296),
                              "combat",
                              (const std::allocator<char> *)(v2 + 240));
                            combat_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3296));
                            std::string::~string((void *)(v2 + 3296));
                            *(_DWORD *)(((v2 + 3296) >> 3) + 0x7FFF8000) = -117901064;
                            std::allocator<char>::~allocator(v2 + 240);
                            *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                            if ( combat_ptr && !data::ConfigCombat::fromJson(&this->combat, combat_ptr) )
                            {
                              *(_DWORD *)(((v2 + 3360) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v2 + 3360) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v2 + 3391) >> 3) + 0x7FFF8000) != 0
                                && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 3391) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v2 + 3360, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v2 + 3360),
                                &common::milog::MiLogDefault::default_log_obj_,
                                3u,
                                "./src/json_data_auto/ConfigEntity.cpp",
                                "fromJson",
                                7967);
                              common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                                (common::milog::MiLogStream *const)(v2 + 3360),
                                (const char (*)[28])"fromJson for: combat fails!");
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3360));
                              v5 = 0;
                            }
                            else
                            {
                              *(_DWORD *)(((v2 + 3424) >> 3) + 0x7FFF8000) = 0;
                              *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
                              std::allocator<char>::allocator(v2 + 256);
                              std::string::basic_string<std::allocator<char>>(
                                (std::string *const)(v2 + 3424),
                                "combatTemplate",
                                (const std::allocator<char> *)(v2 + 256));
                              combat_template_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3424));
                              std::string::~string((void *)(v2 + 3424));
                              *(_DWORD *)(((v2 + 3424) >> 3) + 0x7FFF8000) = -117901064;
                              std::allocator<char>::~allocator(v2 + 256);
                              *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                              if ( combat_template_ptr
                                && !fromJson<std::string>(combat_template_ptr, &this->combat_template) )
                              {
                                *(_DWORD *)(((v2 + 3488) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v2 + 3488) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v2 + 3519) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3519) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v2 + 3488, 32LL);
                                }
                                common::milog::MiLogStream::create(
                                  (common::milog::MiLogStream *)(v2 + 3488),
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  3u,
                                  "./src/json_data_auto/ConfigEntity.cpp",
                                  "fromJson",
                                  7979);
                                common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                  (common::milog::MiLogStream *const)(v2 + 3488),
                                  (const char (*)[36])"fromJson for: combatTemplate fails!");
                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3488));
                                v5 = 0;
                              }
                              else
                              {
                                *(_DWORD *)(((v2 + 3552) >> 3) + 0x7FFF8000) = 0;
                                *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
                                std::allocator<char>::allocator(v2 + 272);
                                std::string::basic_string<std::allocator<char>>(
                                  (std::string *const)(v2 + 3552),
                                  "abilities",
                                  (const std::allocator<char> *)(v2 + 272));
                                abilities_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3552));
                                std::string::~string((void *)(v2 + 3552));
                                *(_DWORD *)(((v2 + 3552) >> 3) + 0x7FFF8000) = -117901064;
                                std::allocator<char>::~allocator(v2 + 272);
                                *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
                                if ( abilities_ptr && !data::vecFromJson(abilities_ptr, &this->abilities) )
                                {
                                  *(_DWORD *)(((v2 + 3616) >> 3) + 0x7FFF8000) = 0;
                                  if ( *(char *)(((v2 + 3616) >> 3) + 0x7FFF8000) < 0
                                    || *(_BYTE *)(((v2 + 3647) >> 3) + 0x7FFF8000) != 0
                                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 3647) >> 3) + 0x7FFF8000) )
                                  {
                                    __asan_report_store_n(v2 + 3616, 32LL);
                                  }
                                  common::milog::MiLogStream::create(
                                    (common::milog::MiLogStream *)(v2 + 3616),
                                    &common::milog::MiLogDefault::default_log_obj_,
                                    3u,
                                    "./src/json_data_auto/ConfigEntity.cpp",
                                    "fromJson",
                                    7991);
                                  common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                    (common::milog::MiLogStream *const)(v2 + 3616),
                                    (const char (*)[31])"fromJson for: abilities fails!");
                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3616));
                                  v5 = 0;
                                }
                                else
                                {
                                  *(_DWORD *)(((v2 + 3680) >> 3) + 0x7FFF8000) = 0;
                                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 1;
                                  std::allocator<char>::allocator(v2 + 288);
                                  std::string::basic_string<std::allocator<char>>(
                                    (std::string *const)(v2 + 3680),
                                    "field",
                                    (const std::allocator<char> *)(v2 + 288));
                                  field_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3680));
                                  std::string::~string((void *)(v2 + 3680));
                                  *(_DWORD *)(((v2 + 3680) >> 3) + 0x7FFF8000) = -117901064;
                                  std::allocator<char>::~allocator(v2 + 288);
                                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
                                  if ( field_ptr && !data::ConfigTrigger::fromJson(&this->field, field_ptr) )
                                  {
                                    *(_DWORD *)(((v2 + 3744) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(char *)(((v2 + 3744) >> 3) + 0x7FFF8000) < 0
                                      || *(_BYTE *)(((v2 + 3775) >> 3) + 0x7FFF8000) != 0
                                      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 3775) >> 3) + 0x7FFF8000) )
                                    {
                                      __asan_report_store_n(v2 + 3744, 32LL);
                                    }
                                    common::milog::MiLogStream::create(
                                      (common::milog::MiLogStream *)(v2 + 3744),
                                      &common::milog::MiLogDefault::default_log_obj_,
                                      3u,
                                      "./src/json_data_auto/ConfigEntity.cpp",
                                      "fromJson",
                                      8003);
                                    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                                      (common::milog::MiLogStream *const)(v2 + 3744),
                                      (const char (*)[27])"fromJson for: field fails!");
                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3744));
                                    v5 = 0;
                                  }
                                  else
                                  {
                                    *(_DWORD *)(((v2 + 3808) >> 3) + 0x7FFF8000) = 0;
                                    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 1;
                                    std::allocator<char>::allocator(v2 + 304);
                                    std::string::basic_string<std::allocator<char>>(
                                      (std::string *const)(v2 + 3808),
                                      "timer",
                                      (const std::allocator<char> *)(v2 + 304));
                                    timer_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3808));
                                    std::string::~string((void *)(v2 + 3808));
                                    *(_DWORD *)(((v2 + 3808) >> 3) + 0x7FFF8000) = -117901064;
                                    std::allocator<char>::~allocator(v2 + 304);
                                    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
                                    if ( timer_ptr && !data::ConfigTimer::fromJson(&this->timer, timer_ptr) )
                                    {
                                      *(_DWORD *)(((v2 + 3872) >> 3) + 0x7FFF8000) = 0;
                                      if ( *(char *)(((v2 + 3872) >> 3) + 0x7FFF8000) < 0
                                        || *(_BYTE *)(((v2 + 3903) >> 3) + 0x7FFF8000) != 0
                                        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 3903) >> 3) + 0x7FFF8000) )
                                      {
                                        __asan_report_store_n(v2 + 3872, 32LL);
                                      }
                                      common::milog::MiLogStream::create(
                                        (common::milog::MiLogStream *)(v2 + 3872),
                                        &common::milog::MiLogDefault::default_log_obj_,
                                        3u,
                                        "./src/json_data_auto/ConfigEntity.cpp",
                                        "fromJson",
                                        8015);
                                      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                                        (common::milog::MiLogStream *const)(v2 + 3872),
                                        (const char (*)[27])"fromJson for: timer fails!");
                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3872));
                                      v5 = 0;
                                    }
                                    else
                                    {
                                      *(_DWORD *)(((v2 + 3936) >> 3) + 0x7FFF8000) = 0;
                                      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 1;
                                      std::allocator<char>::allocator(v2 + 320);
                                      std::string::basic_string<std::allocator<char>>(
                                        (std::string *const)(v2 + 3936),
                                        "move",
                                        (const std::allocator<char> *)(v2 + 320));
                                      move_ptr = jsonValueFind(jval, (const std::string *)(v2 + 3936));
                                      std::string::~string((void *)(v2 + 3936));
                                      *(_DWORD *)(((v2 + 3936) >> 3) + 0x7FFF8000) = -117901064;
                                      std::allocator<char>::~allocator(v2 + 320);
                                      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
                                      if ( move_ptr )
                                      {
                                        *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) )
                                          __asan_report_store16();
                                        data::ConfigMove::parseFromJson((const Json::Value *)(v2 + 1024));
                                        v6 = std::shared_ptr<data::ConfigMove>::operator=(
                                               &this->move,
                                               (std::shared_ptr<data::ConfigMove> *)(v2 + 1024));
                                        v7 = std::operator==<data::ConfigMove>(v6, 0LL);
                                        std::shared_ptr<data::ConfigMove>::~shared_ptr((std::shared_ptr<data::ConfigMove> *const)(v2 + 1024));
                                        *(_WORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -1800;
                                        if ( v7 )
                                        {
                                          *(_DWORD *)(((v2 + 4000) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(char *)(((v2 + 4000) >> 3) + 0x7FFF8000) < 0
                                            || *(_BYTE *)(((v2 + 4031) >> 3) + 0x7FFF8000) != 0
                                            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4031) >> 3) + 0x7FFF8000) )
                                          {
                                            __asan_report_store_n(v2 + 4000, 32LL);
                                          }
                                          common::milog::MiLogStream::create(
                                            (common::milog::MiLogStream *)(v2 + 4000),
                                            &common::milog::MiLogDefault::default_log_obj_,
                                            1u,
                                            "./src/json_data_auto/ConfigEntity.cpp",
                                            "fromJson",
                                            8029);
                                          common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                                            (common::milog::MiLogStream *const)(v2 + 4000),
                                            (const char (*)[26])"fromJson for: move fails!");
                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4000));
                                          *(_DWORD *)(((v2 + 4000) >> 3) + 0x7FFF8000) = -117901064;
                                        }
                                      }
                                      else
                                      {
                                        *(_WORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(_WORD *)(((v2 + 992) >> 3) + 0x7FFF8000) )
                                          __asan_report_store16();
                                        common::tools::perf::make_shared<data::ConfigMove>();
                                        std::shared_ptr<data::ConfigMove>::operator=(
                                          &this->move,
                                          (std::shared_ptr<data::ConfigMove> *)(v2 + 992));
                                        std::shared_ptr<data::ConfigMove>::~shared_ptr((std::shared_ptr<data::ConfigMove> *const)(v2 + 992));
                                        *(_WORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -1800;
                                      }
                                      *(_DWORD *)(((v2 + 4064) >> 3) + 0x7FFF8000) = 0;
                                      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 1;
                                      std::allocator<char>::allocator(v2 + 336);
                                      std::string::basic_string<std::allocator<char>>(
                                        (std::string *const)(v2 + 4064),
                                        "gadget",
                                        (const std::allocator<char> *)(v2 + 336));
                                      gadget_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4064));
                                      std::string::~string((void *)(v2 + 4064));
                                      *(_DWORD *)(((v2 + 4064) >> 3) + 0x7FFF8000) = -117901064;
                                      std::allocator<char>::~allocator(v2 + 336);
                                      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
                                      if ( gadget_ptr )
                                      {
                                        *(_WORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(_WORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) )
                                          __asan_report_store16();
                                        data::ConfigGadgetPattern::parseFromJson((const Json::Value *)(v2 + 1088));
                                        v8 = std::shared_ptr<data::ConfigGadgetPattern>::operator=(
                                               &this->gadget,
                                               (std::shared_ptr<data::ConfigGadgetPattern> *)(v2 + 1088));
                                        v9 = std::operator==<data::ConfigGadgetPattern>(v8, 0LL);
                                        std::shared_ptr<data::ConfigGadgetPattern>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPattern> *const)(v2 + 1088));
                                        *(_WORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -1800;
                                        if ( v9 )
                                        {
                                          *(_DWORD *)(((v2 + 4128) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(char *)(((v2 + 4128) >> 3) + 0x7FFF8000) < 0
                                            || *(_BYTE *)(((v2 + 4159) >> 3) + 0x7FFF8000) != 0
                                            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 4159) >> 3) + 0x7FFF8000) )
                                          {
                                            __asan_report_store_n(v2 + 4128, 32LL);
                                          }
                                          common::milog::MiLogStream::create(
                                            (common::milog::MiLogStream *)(v2 + 4128),
                                            &common::milog::MiLogDefault::default_log_obj_,
                                            1u,
                                            "./src/json_data_auto/ConfigEntity.cpp",
                                            "fromJson",
                                            8042);
                                          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                                            (common::milog::MiLogStream *const)(v2 + 4128),
                                            (const char (*)[28])"fromJson for: gadget fails!");
                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4128));
                                          *(_DWORD *)(((v2 + 4128) >> 3) + 0x7FFF8000) = -117901064;
                                        }
                                      }
                                      else
                                      {
                                        *(_WORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(_WORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) )
                                          __asan_report_store16();
                                        common::tools::perf::make_shared<data::ConfigGadgetPattern>();
                                        std::shared_ptr<data::ConfigGadgetPattern>::operator=(
                                          &this->gadget,
                                          (std::shared_ptr<data::ConfigGadgetPattern> *)(v2 + 1056));
                                        std::shared_ptr<data::ConfigGadgetPattern>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPattern> *const)(v2 + 1056));
                                        *(_WORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -1800;
                                      }
                                      *(_DWORD *)(((v2 + 4192) >> 3) + 0x7FFF8000) = 0;
                                      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 1;
                                      std::allocator<char>::allocator(v2 + 352);
                                      std::string::basic_string<std::allocator<char>>(
                                        (std::string *const)(v2 + 4192),
                                        "equipment",
                                        (const std::allocator<char> *)(v2 + 352));
                                      equipment_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4192));
                                      std::string::~string((void *)(v2 + 4192));
                                      *(_DWORD *)(((v2 + 4192) >> 3) + 0x7FFF8000) = -117901064;
                                      std::allocator<char>::~allocator(v2 + 352);
                                      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
                                      if ( equipment_ptr
                                        && !data::ConfigEquipment::fromJson(&this->equipment, equipment_ptr) )
                                      {
                                        *(_DWORD *)(((v2 + 4256) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(char *)(((v2 + 4256) >> 3) + 0x7FFF8000) < 0
                                          || *(_BYTE *)(((v2 + 4287) >> 3) + 0x7FFF8000) != 0
                                          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4287) >> 3) + 0x7FFF8000) )
                                        {
                                          __asan_report_store_n(v2 + 4256, 32LL);
                                        }
                                        common::milog::MiLogStream::create(
                                          (common::milog::MiLogStream *)(v2 + 4256),
                                          &common::milog::MiLogDefault::default_log_obj_,
                                          3u,
                                          "./src/json_data_auto/ConfigEntity.cpp",
                                          "fromJson",
                                          8053);
                                        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                          (common::milog::MiLogStream *const)(v2 + 4256),
                                          (const char (*)[31])"fromJson for: equipment fails!");
                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4256));
                                        v5 = 0;
                                      }
                                      else
                                      {
                                        *(_DWORD *)(((v2 + 4320) >> 3) + 0x7FFF8000) = 0;
                                        *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = 1;
                                        std::allocator<char>::allocator(v2 + 368);
                                        std::string::basic_string<std::allocator<char>>(
                                          (std::string *const)(v2 + 4320),
                                          "navigation",
                                          (const std::allocator<char> *)(v2 + 368));
                                        navigation_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4320));
                                        std::string::~string((void *)(v2 + 4320));
                                        *(_DWORD *)(((v2 + 4320) >> 3) + 0x7FFF8000) = -117901064;
                                        std::allocator<char>::~allocator(v2 + 368);
                                        *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
                                        if ( navigation_ptr
                                          && !data::ConfigNavigation::fromJson(&this->navigation, navigation_ptr) )
                                        {
                                          *(_DWORD *)(((v2 + 4384) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(char *)(((v2 + 4384) >> 3) + 0x7FFF8000) < 0
                                            || *(_BYTE *)(((v2 + 4415) >> 3) + 0x7FFF8000) != 0
                                            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 4415) >> 3) + 0x7FFF8000) )
                                          {
                                            __asan_report_store_n(v2 + 4384, 32LL);
                                          }
                                          common::milog::MiLogStream::create(
                                            (common::milog::MiLogStream *)(v2 + 4384),
                                            &common::milog::MiLogDefault::default_log_obj_,
                                            3u,
                                            "./src/json_data_auto/ConfigEntity.cpp",
                                            "fromJson",
                                            8065);
                                          common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                                            (common::milog::MiLogStream *const)(v2 + 4384),
                                            (const char (*)[32])"fromJson for: navigation fails!");
                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4384));
                                          v5 = 0;
                                        }
                                        else
                                        {
                                          *(_DWORD *)(((v2 + 4448) >> 3) + 0x7FFF8000) = 0;
                                          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 1;
                                          std::allocator<char>::allocator(v2 + 384);
                                          std::string::basic_string<std::allocator<char>>(
                                            (std::string *const)(v2 + 4448),
                                            "uiInteract",
                                            (const std::allocator<char> *)(v2 + 384));
                                          ui_interact_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4448));
                                          std::string::~string((void *)(v2 + 4448));
                                          *(_DWORD *)(((v2 + 4448) >> 3) + 0x7FFF8000) = -117901064;
                                          std::allocator<char>::~allocator(v2 + 384);
                                          *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
                                          if ( ui_interact_ptr )
                                          {
                                            *(_WORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                                            v10 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUIFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUIFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigGadgetUIFactory::instance_ptr);
                                            if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
                                              v10 = __asan_report_load8(v10);
                                            v11 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v10;
                                            if ( *(_BYTE *)((*(_QWORD *)v10 >> 3) + 0x7FFF8000LL) )
                                              v10 = __asan_report_load8(*(_QWORD *)v10);
                                            v12 = *v11;
                                            if ( *(_WORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) )
                                              v10 = __asan_report_store16();
                                            v12(v2 + 1152, v10);
                                            v13 = std::shared_ptr<data::ConfigGadgetUI>::operator=(
                                                    &this->ui_interact,
                                                    (std::shared_ptr<data::ConfigGadgetUI> *)(v2 + 1152));
                                            if ( std::operator==<data::ConfigGadgetUI>(v13, 0LL) )
                                              goto LABEL_139;
                                            v14 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->ui_interact);
                                            if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
                                              v14 = __asan_report_load8(v14);
                                            v15 = *(_QWORD *)v14 + 48LL;
                                            if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
                                              v14 = __asan_report_load8(*(_QWORD *)v14 + 48LL);
                                            if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v15)(
                                                   v14,
                                                   ui_interact_ptr) != 1 )
LABEL_139:
                                              v56 = 1;
                                            else
                                              v56 = 0;
                                            std::shared_ptr<data::ConfigGadgetUI>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)(v2 + 1152));
                                            *(_WORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -1800;
                                            if ( v56 )
                                            {
                                              *(_DWORD *)(((v2 + 4512) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(char *)(((v2 + 4512) >> 3) + 0x7FFF8000) < 0
                                                || *(_BYTE *)(((v2 + 4543) >> 3) + 0x7FFF8000) != 0
                                                && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4543) >> 3)
                                                                                          + 0x7FFF8000) )
                                              {
                                                __asan_report_store_n(v2 + 4512, 32LL);
                                              }
                                              common::milog::MiLogStream::create(
                                                (common::milog::MiLogStream *)(v2 + 4512),
                                                &common::milog::MiLogDefault::default_log_obj_,
                                                1u,
                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                "fromJson",
                                                8079);
                                              common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                                                (common::milog::MiLogStream *const)(v2 + 4512),
                                                (const char (*)[32])"fromJson for: uiInteract fails!");
                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4512));
                                              *(_DWORD *)(((v2 + 4512) >> 3) + 0x7FFF8000) = -117901064;
                                            }
                                          }
                                          else
                                          {
                                            *(_WORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(_WORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) )
                                              __asan_report_store16();
                                            common::tools::perf::make_shared<data::ConfigGadgetUI>();
                                            std::shared_ptr<data::ConfigGadgetUI>::operator=(
                                              &this->ui_interact,
                                              (std::shared_ptr<data::ConfigGadgetUI> *)(v2 + 1120));
                                            std::shared_ptr<data::ConfigGadgetUI>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUI> *const)(v2 + 1120));
                                            *(_WORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -1800;
                                          }
                                          *(_DWORD *)(((v2 + 4576) >> 3) + 0x7FFF8000) = 0;
                                          *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = 1;
                                          std::allocator<char>::allocator(v2 + 400);
                                          std::string::basic_string<std::allocator<char>>(
                                            (std::string *const)(v2 + 4576),
                                            "misc",
                                            (const std::allocator<char> *)(v2 + 400));
                                          misc_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4576));
                                          std::string::~string((void *)(v2 + 4576));
                                          *(_DWORD *)(((v2 + 4576) >> 3) + 0x7FFF8000) = -117901064;
                                          std::allocator<char>::~allocator(v2 + 400);
                                          *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
                                          if ( misc_ptr && !data::ConfigGadgetMisc::fromJson(&this->misc, misc_ptr) )
                                          {
                                            *(_DWORD *)(((v2 + 4640) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(char *)(((v2 + 4640) >> 3) + 0x7FFF8000) < 0
                                              || *(_BYTE *)(((v2 + 4671) >> 3) + 0x7FFF8000) != 0
                                              && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 4671) >> 3) + 0x7FFF8000) )
                                            {
                                              __asan_report_store_n(v2 + 4640, 32LL);
                                            }
                                            common::milog::MiLogStream::create(
                                              (common::milog::MiLogStream *)(v2 + 4640),
                                              &common::milog::MiLogDefault::default_log_obj_,
                                              3u,
                                              "./src/json_data_auto/ConfigEntity.cpp",
                                              "fromJson",
                                              8090);
                                            common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                                              (common::milog::MiLogStream *const)(v2 + 4640),
                                              (const char (*)[26])"fromJson for: misc fails!");
                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4640));
                                            v5 = 0;
                                          }
                                          else
                                          {
                                            *(_DWORD *)(((v2 + 4704) >> 3) + 0x7FFF8000) = 0;
                                            *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 1;
                                            std::allocator<char>::allocator(v2 + 416);
                                            std::string::basic_string<std::allocator<char>>(
                                              (std::string *const)(v2 + 4704),
                                              "stateLayers",
                                              (const std::allocator<char> *)(v2 + 416));
                                            state_layers_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4704));
                                            std::string::~string((void *)(v2 + 4704));
                                            *(_DWORD *)(((v2 + 4704) >> 3) + 0x7FFF8000) = -117901064;
                                            std::allocator<char>::~allocator(v2 + 416);
                                            *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
                                            if ( state_layers_ptr
                                              && !data::mapFromJson(state_layers_ptr, &this->state_layers) )
                                            {
                                              *(_DWORD *)(((v2 + 4768) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(char *)(((v2 + 4768) >> 3) + 0x7FFF8000) < 0
                                                || *(_BYTE *)(((v2 + 4799) >> 3) + 0x7FFF8000) != 0
                                                && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 4799) >> 3)
                                                                                          + 0x7FFF8000) )
                                              {
                                                __asan_report_store_n(v2 + 4768, 32LL);
                                              }
                                              common::milog::MiLogStream::create(
                                                (common::milog::MiLogStream *)(v2 + 4768),
                                                &common::milog::MiLogDefault::default_log_obj_,
                                                3u,
                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                "fromJson",
                                                8102);
                                              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                                (common::milog::MiLogStream *const)(v2 + 4768),
                                                (const char (*)[33])"fromJson for: stateLayers fails!");
                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4768));
                                              v5 = 0;
                                            }
                                            else
                                            {
                                              *(_DWORD *)(((v2 + 4832) >> 3) + 0x7FFF8000) = 0;
                                              *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 1;
                                              std::allocator<char>::allocator(v2 + 432);
                                              std::string::basic_string<std::allocator<char>>(
                                                (std::string *const)(v2 + 4832),
                                                "audio",
                                                (const std::allocator<char> *)(v2 + 432));
                                              audio_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4832));
                                              std::string::~string((void *)(v2 + 4832));
                                              *(_DWORD *)(((v2 + 4832) >> 3) + 0x7FFF8000) = -117901064;
                                              std::allocator<char>::~allocator(v2 + 432);
                                              *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
                                              if ( audio_ptr )
                                              {
                                                *(_WORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(_WORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) )
                                                  __asan_report_store16();
                                                data::ConfigGadgetAudio::parseFromJson((const Json::Value *)(v2 + 1216));
                                                v16 = std::shared_ptr<data::ConfigGadgetAudio>::operator=(
                                                        &this->audio,
                                                        (std::shared_ptr<data::ConfigGadgetAudio> *)(v2 + 1216));
                                                v17 = std::operator==<data::ConfigGadgetAudio>(v16, 0LL);
                                                std::shared_ptr<data::ConfigGadgetAudio>::~shared_ptr((std::shared_ptr<data::ConfigGadgetAudio> *const)(v2 + 1216));
                                                *(_WORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -1800;
                                                if ( v17 )
                                                {
                                                  *(_DWORD *)(((v2 + 4896) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(char *)(((v2 + 4896) >> 3) + 0x7FFF8000) < 0
                                                    || *(_BYTE *)(((v2 + 4927) >> 3) + 0x7FFF8000) != 0
                                                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 4927) >> 3)
                                                                                         + 0x7FFF8000) )
                                                  {
                                                    __asan_report_store_n(v2 + 4896, 32LL);
                                                  }
                                                  common::milog::MiLogStream::create(
                                                    (common::milog::MiLogStream *)(v2 + 4896),
                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                    1u,
                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                    "fromJson",
                                                    8116);
                                                  common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                                                    (common::milog::MiLogStream *const)(v2 + 4896),
                                                    (const char (*)[27])"fromJson for: audio fails!");
                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4896));
                                                  *(_DWORD *)(((v2 + 4896) >> 3) + 0x7FFF8000) = -117901064;
                                                }
                                              }
                                              else
                                              {
                                                *(_WORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(_WORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) )
                                                  __asan_report_store16();
                                                common::tools::perf::make_shared<data::ConfigGadgetAudio>();
                                                std::shared_ptr<data::ConfigGadgetAudio>::operator=(
                                                  &this->audio,
                                                  (std::shared_ptr<data::ConfigGadgetAudio> *)(v2 + 1184));
                                                std::shared_ptr<data::ConfigGadgetAudio>::~shared_ptr((std::shared_ptr<data::ConfigGadgetAudio> *const)(v2 + 1184));
                                                *(_WORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -1800;
                                              }
                                              *(_DWORD *)(((v2 + 4960) >> 3) + 0x7FFF8000) = 0;
                                              *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 1;
                                              std::allocator<char>::allocator(v2 + 448);
                                              std::string::basic_string<std::allocator<char>>(
                                                (std::string *const)(v2 + 4960),
                                                "aibeta",
                                                (const std::allocator<char> *)(v2 + 448));
                                              aibeta_ptr = jsonValueFind(jval, (const std::string *)(v2 + 4960));
                                              std::string::~string((void *)(v2 + 4960));
                                              *(_DWORD *)(((v2 + 4960) >> 3) + 0x7FFF8000) = -117901064;
                                              std::allocator<char>::~allocator(v2 + 448);
                                              *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
                                              if ( aibeta_ptr
                                                && !data::ConfigAIBeta::fromJson(&this->aibeta, aibeta_ptr) )
                                              {
                                                *(_DWORD *)(((v2 + 5024) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(char *)(((v2 + 5024) >> 3) + 0x7FFF8000) < 0
                                                  || *(_BYTE *)(((v2 + 5055) >> 3) + 0x7FFF8000) != 0
                                                  && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5055) >> 3)
                                                                                            + 0x7FFF8000) )
                                                {
                                                  __asan_report_store_n(v2 + 5024, 32LL);
                                                }
                                                common::milog::MiLogStream::create(
                                                  (common::milog::MiLogStream *)(v2 + 5024),
                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                  3u,
                                                  "./src/json_data_auto/ConfigEntity.cpp",
                                                  "fromJson",
                                                  8127);
                                                common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                                                  (common::milog::MiLogStream *const)(v2 + 5024),
                                                  (const char (*)[28])"fromJson for: aibeta fails!");
                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5024));
                                                v5 = 0;
                                              }
                                              else
                                              {
                                                *(_DWORD *)(((v2 + 5088) >> 3) + 0x7FFF8000) = 0;
                                                *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = 1;
                                                std::allocator<char>::allocator(v2 + 464);
                                                std::string::basic_string<std::allocator<char>>(
                                                  (std::string *const)(v2 + 5088),
                                                  "weather",
                                                  (const std::allocator<char> *)(v2 + 464));
                                                weather_ptr = jsonValueFind(jval, (const std::string *)(v2 + 5088));
                                                std::string::~string((void *)(v2 + 5088));
                                                *(_DWORD *)(((v2 + 5088) >> 3) + 0x7FFF8000) = -117901064;
                                                std::allocator<char>::~allocator(v2 + 464);
                                                *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
                                                if ( weather_ptr
                                                  && !data::ConfigWeather::fromJson(&this->weather, weather_ptr) )
                                                {
                                                  *(_DWORD *)(((v2 + 5152) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(char *)(((v2 + 5152) >> 3) + 0x7FFF8000) < 0
                                                    || *(_BYTE *)(((v2 + 5183) >> 3) + 0x7FFF8000) != 0
                                                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 5183) >> 3)
                                                                                         + 0x7FFF8000) )
                                                  {
                                                    __asan_report_store_n(v2 + 5152, 32LL);
                                                  }
                                                  common::milog::MiLogStream::create(
                                                    (common::milog::MiLogStream *)(v2 + 5152),
                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                    3u,
                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                    "fromJson",
                                                    8139);
                                                  common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                                                    (common::milog::MiLogStream *const)(v2 + 5152),
                                                    (const char (*)[29])"fromJson for: weather fails!");
                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5152));
                                                  v5 = 0;
                                                }
                                                else
                                                {
                                                  *(_DWORD *)(((v2 + 5216) >> 3) + 0x7FFF8000) = 0;
                                                  *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 1;
                                                  std::allocator<char>::allocator(v2 + 480);
                                                  std::string::basic_string<std::allocator<char>>(
                                                    (std::string *const)(v2 + 5216),
                                                    "wall",
                                                    (const std::allocator<char> *)(v2 + 480));
                                                  wall_ptr = jsonValueFind(jval, (const std::string *)(v2 + 5216));
                                                  std::string::~string((void *)(v2 + 5216));
                                                  *(_DWORD *)(((v2 + 5216) >> 3) + 0x7FFF8000) = -117901064;
                                                  std::allocator<char>::~allocator(v2 + 480);
                                                  *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
                                                  if ( wall_ptr && !data::ConfigWall::fromJson(&this->wall, wall_ptr) )
                                                  {
                                                    *(_DWORD *)(((v2 + 5280) >> 3) + 0x7FFF8000) = 0;
                                                    if ( *(char *)(((v2 + 5280) >> 3) + 0x7FFF8000) < 0
                                                      || *(_BYTE *)(((v2 + 5311) >> 3) + 0x7FFF8000) != 0
                                                      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5311) >> 3)
                                                                                                + 0x7FFF8000) )
                                                    {
                                                      __asan_report_store_n(v2 + 5280, 32LL);
                                                    }
                                                    common::milog::MiLogStream::create(
                                                      (common::milog::MiLogStream *)(v2 + 5280),
                                                      &common::milog::MiLogDefault::default_log_obj_,
                                                      3u,
                                                      "./src/json_data_auto/ConfigEntity.cpp",
                                                      "fromJson",
                                                      8151);
                                                    common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                                                      (common::milog::MiLogStream *const)(v2 + 5280),
                                                      (const char (*)[26])"fromJson for: wall fails!");
                                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5280));
                                                    v5 = 0;
                                                  }
                                                  else
                                                  {
                                                    *(_DWORD *)(((v2 + 5344) >> 3) + 0x7FFF8000) = 0;
                                                    *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = 1;
                                                    std::allocator<char>::allocator(v2 + 496);
                                                    std::string::basic_string<std::allocator<char>>(
                                                      (std::string *const)(v2 + 5344),
                                                      "face",
                                                      (const std::allocator<char> *)(v2 + 496));
                                                    face_ptr = jsonValueFind(jval, (const std::string *)(v2 + 5344));
                                                    std::string::~string((void *)(v2 + 5344));
                                                    *(_DWORD *)(((v2 + 5344) >> 3) + 0x7FFF8000) = -117901064;
                                                    std::allocator<char>::~allocator(v2 + 496);
                                                    *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
                                                    if ( face_ptr && !data::ConfigFace::fromJson(&this->face, face_ptr) )
                                                    {
                                                      *(_DWORD *)(((v2 + 5408) >> 3) + 0x7FFF8000) = 0;
                                                      if ( *(char *)(((v2 + 5408) >> 3) + 0x7FFF8000) < 0
                                                        || *(_BYTE *)(((v2 + 5439) >> 3) + 0x7FFF8000) != 0
                                                        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 5439) >> 3)
                                                                                             + 0x7FFF8000) )
                                                      {
                                                        __asan_report_store_n(v2 + 5408, 32LL);
                                                      }
                                                      common::milog::MiLogStream::create(
                                                        (common::milog::MiLogStream *)(v2 + 5408),
                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                        3u,
                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                        "fromJson",
                                                        8163);
                                                      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                                                        (common::milog::MiLogStream *const)(v2 + 5408),
                                                        (const char (*)[26])"fromJson for: face fails!");
                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5408));
                                                      v5 = 0;
                                                    }
                                                    else
                                                    {
                                                      *(_DWORD *)(((v2 + 5472) >> 3) + 0x7FFF8000) = 0;
                                                      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 1;
                                                      std::allocator<char>::allocator(v2 + 512);
                                                      std::string::basic_string<std::allocator<char>>(
                                                        (std::string *const)(v2 + 5472),
                                                        "partControl",
                                                        (const std::allocator<char> *)(v2 + 512));
                                                      part_control_ptr = jsonValueFind(
                                                                           jval,
                                                                           (const std::string *)(v2 + 5472));
                                                      std::string::~string((void *)(v2 + 5472));
                                                      *(_DWORD *)(((v2 + 5472) >> 3) + 0x7FFF8000) = -117901064;
                                                      std::allocator<char>::~allocator(v2 + 512);
                                                      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
                                                      if ( part_control_ptr
                                                        && !data::ConfigPartController::fromJson(
                                                              &this->part_control,
                                                              part_control_ptr) )
                                                      {
                                                        *(_DWORD *)(((v2 + 5536) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(char *)(((v2 + 5536) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 5567) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5567) >> 3) + 0x7FFF8000) )
                                                        {
                                                          __asan_report_store_n(v2 + 5536, 32LL);
                                                        }
                                                        common::milog::MiLogStream::create(
                                                          (common::milog::MiLogStream *)(v2 + 5536),
                                                          &common::milog::MiLogDefault::default_log_obj_,
                                                          3u,
                                                          "./src/json_data_auto/ConfigEntity.cpp",
                                                          "fromJson",
                                                          8175);
                                                        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                                          (common::milog::MiLogStream *const)(v2 + 5536),
                                                          (const char (*)[33])"fromJson for: partControl fails!");
                                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5536));
                                                        v5 = 0;
                                                      }
                                                      else
                                                      {
                                                        *(_DWORD *)(((v2 + 5600) >> 3) + 0x7FFF8000) = 0;
                                                        *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = 1;
                                                        std::allocator<char>::allocator(v2 + 528);
                                                        std::string::basic_string<std::allocator<char>>(
                                                          (std::string *const)(v2 + 5600),
                                                          "paimon",
                                                          (const std::allocator<char> *)(v2 + 528));
                                                        paimon_ptr = jsonValueFind(
                                                                       jval,
                                                                       (const std::string *)(v2 + 5600));
                                                        std::string::~string((void *)(v2 + 5600));
                                                        *(_DWORD *)(((v2 + 5600) >> 3) + 0x7FFF8000) = -117901064;
                                                        std::allocator<char>::~allocator(v2 + 528);
                                                        *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
                                                        if ( paimon_ptr
                                                          && !data::ConfigPaimon::fromJson(&this->paimon, paimon_ptr) )
                                                        {
                                                          *(_DWORD *)(((v2 + 5664) >> 3) + 0x7FFF8000) = 0;
                                                          if ( *(char *)(((v2 + 5664) >> 3) + 0x7FFF8000) < 0
                                                            || *(_BYTE *)(((v2 + 5695) >> 3) + 0x7FFF8000) != 0
                                                            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 5695) >> 3)
                                                                                                 + 0x7FFF8000) )
                                                          {
                                                            __asan_report_store_n(v2 + 5664, 32LL);
                                                          }
                                                          common::milog::MiLogStream::create(
                                                            (common::milog::MiLogStream *)(v2 + 5664),
                                                            &common::milog::MiLogDefault::default_log_obj_,
                                                            3u,
                                                            "./src/json_data_auto/ConfigEntity.cpp",
                                                            "fromJson",
                                                            8187);
                                                          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                                                            (common::milog::MiLogStream *const)(v2 + 5664),
                                                            (const char (*)[28])"fromJson for: paimon fails!");
                                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5664));
                                                          v5 = 0;
                                                        }
                                                        else
                                                        {
                                                          *(_DWORD *)(((v2 + 5728) >> 3) + 0x7FFF8000) = 0;
                                                          *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 1;
                                                          std::allocator<char>::allocator(v2 + 544);
                                                          std::string::basic_string<std::allocator<char>>(
                                                            (std::string *const)(v2 + 5728),
                                                            "characterRendering",
                                                            (const std::allocator<char> *)(v2 + 544));
                                                          character_rendering_ptr = jsonValueFind(
                                                                                      jval,
                                                                                      (const std::string *)(v2 + 5728));
                                                          std::string::~string((void *)(v2 + 5728));
                                                          *(_DWORD *)(((v2 + 5728) >> 3) + 0x7FFF8000) = -117901064;
                                                          std::allocator<char>::~allocator(v2 + 544);
                                                          *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
                                                          if ( character_rendering_ptr
                                                            && !data::ConfigCharacterRendering::fromJson(
                                                                  &this->character_rendering,
                                                                  character_rendering_ptr) )
                                                          {
                                                            *(_DWORD *)(((v2 + 5792) >> 3) + 0x7FFF8000) = 0;
                                                            if ( *(char *)(((v2 + 5792) >> 3) + 0x7FFF8000) < 0
                                                              || *(_BYTE *)(((v2 + 5823) >> 3) + 0x7FFF8000) != 0
                                                              && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 5823) >> 3) + 0x7FFF8000) )
                                                            {
                                                              __asan_report_store_n(v2 + 5792, 32LL);
                                                            }
                                                            common::milog::MiLogStream::create(
                                                              (common::milog::MiLogStream *)(v2 + 5792),
                                                              &common::milog::MiLogDefault::default_log_obj_,
                                                              3u,
                                                              "./src/json_data_auto/ConfigEntity.cpp",
                                                              "fromJson",
                                                              8199);
                                                            common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                                                              (common::milog::MiLogStream *const)(v2 + 5792),
                                                              (const char (*)[40])"fromJson for: characterRendering fails!");
                                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5792));
                                                            v5 = 0;
                                                          }
                                                          else
                                                          {
                                                            *(_DWORD *)(((v2 + 5856) >> 3) + 0x7FFF8000) = 0;
                                                            *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = 1;
                                                            std::allocator<char>::allocator(v2 + 560);
                                                            std::string::basic_string<std::allocator<char>>(
                                                              (std::string *const)(v2 + 5856),
                                                              "radarHint",
                                                              (const std::allocator<char> *)(v2 + 560));
                                                            radar_hint_ptr = jsonValueFind(
                                                                               jval,
                                                                               (const std::string *)(v2 + 5856));
                                                            std::string::~string((void *)(v2 + 5856));
                                                            *(_DWORD *)(((v2 + 5856) >> 3) + 0x7FFF8000) = -117901064;
                                                            std::allocator<char>::~allocator(v2 + 560);
                                                            *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
                                                            if ( radar_hint_ptr
                                                              && !fromJson<bool>(radar_hint_ptr, &this->radar_hint) )
                                                            {
                                                              *(_DWORD *)(((v2 + 5920) >> 3) + 0x7FFF8000) = 0;
                                                              if ( *(char *)(((v2 + 5920) >> 3) + 0x7FFF8000) < 0
                                                                || *(_BYTE *)(((v2 + 5951) >> 3) + 0x7FFF8000) != 0
                                                                && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 5951) >> 3) + 0x7FFF8000) )
                                                              {
                                                                __asan_report_store_n(v2 + 5920, 32LL);
                                                              }
                                                              common::milog::MiLogStream::create(
                                                                (common::milog::MiLogStream *)(v2 + 5920),
                                                                &common::milog::MiLogDefault::default_log_obj_,
                                                                3u,
                                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                                "fromJson",
                                                                8211);
                                                              common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                                                (common::milog::MiLogStream *const)(v2 + 5920),
                                                                (const char (*)[31])"fromJson for: radarHint fails!");
                                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 5920));
                                                              v5 = 0;
                                                            }
                                                            else
                                                            {
                                                              *(_DWORD *)(((v2 + 5984) >> 3) + 0x7FFF8000) = 0;
                                                              *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = 1;
                                                              std::allocator<char>::allocator(v2 + 576);
                                                              std::string::basic_string<std::allocator<char>>(
                                                                (std::string *const)(v2 + 5984),
                                                                "keepModifierOutSight",
                                                                (const std::allocator<char> *)(v2 + 576));
                                                              keep_modifier_out_sight_ptr = jsonValueFind(
                                                                                              jval,
                                                                                              (const std::string *)(v2 + 5984));
                                                              std::string::~string((void *)(v2 + 5984));
                                                              *(_DWORD *)(((v2 + 5984) >> 3) + 0x7FFF8000) = -117901064;
                                                              std::allocator<char>::~allocator(v2 + 576);
                                                              *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
                                                              if ( keep_modifier_out_sight_ptr
                                                                && !fromJson<bool>(
                                                                      keep_modifier_out_sight_ptr,
                                                                      &this->keep_modifier_out_sight) )
                                                              {
                                                                *(_DWORD *)(((v2 + 6048) >> 3) + 0x7FFF8000) = 0;
                                                                if ( *(char *)(((v2 + 6048) >> 3) + 0x7FFF8000) < 0
                                                                  || *(_BYTE *)(((v2 + 6079) >> 3) + 0x7FFF8000) != 0
                                                                  && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 6079) >> 3) + 0x7FFF8000) )
                                                                {
                                                                  __asan_report_store_n(v2 + 6048, 32LL);
                                                                }
                                                                common::milog::MiLogStream::create(
                                                                  (common::milog::MiLogStream *)(v2 + 6048),
                                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                                  3u,
                                                                  "./src/json_data_auto/ConfigEntity.cpp",
                                                                  "fromJson",
                                                                  8223);
                                                                common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                                  (common::milog::MiLogStream *const)(v2 + 6048),
                                                                  (const char (*)[42])"fromJson for: keepModifierOutSight fails!");
                                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6048));
                                                                v5 = 0;
                                                              }
                                                              else
                                                              {
                                                                *(_DWORD *)(((v2 + 6112) >> 3) + 0x7FFF8000) = 0;
                                                                *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = 1;
                                                                std::allocator<char>::allocator(v2 + 592);
                                                                std::string::basic_string<std::allocator<char>>(
                                                                  (std::string *const)(v2 + 6112),
                                                                  "gadgetAction",
                                                                  (const std::allocator<char> *)(v2 + 592));
                                                                gadget_action_ptr = jsonValueFind(
                                                                                      jval,
                                                                                      (const std::string *)(v2 + 6112));
                                                                std::string::~string((void *)(v2 + 6112));
                                                                *(_DWORD *)(((v2 + 6112) >> 3) + 0x7FFF8000) = -117901064;
                                                                std::allocator<char>::~allocator(v2 + 592);
                                                                *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
                                                                if ( gadget_action_ptr
                                                                  && !data::ConfigGadgetAction::fromJson(
                                                                        &this->gadget_action,
                                                                        gadget_action_ptr) )
                                                                {
                                                                  *(_DWORD *)(((v2 + 6176) >> 3) + 0x7FFF8000) = 0;
                                                                  if ( *(char *)(((v2 + 6176) >> 3) + 0x7FFF8000) < 0
                                                                    || *(_BYTE *)(((v2 + 6207) >> 3) + 0x7FFF8000) != 0
                                                                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 6207) >> 3) + 0x7FFF8000) )
                                                                  {
                                                                    __asan_report_store_n(v2 + 6176, 32LL);
                                                                  }
                                                                  common::milog::MiLogStream::create(
                                                                    (common::milog::MiLogStream *)(v2 + 6176),
                                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                                    3u,
                                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                                    "fromJson",
                                                                    8235);
                                                                  common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                                    (common::milog::MiLogStream *const)(v2 + 6176),
                                                                    (const char (*)[34])"fromJson for: gadgetAction fails!");
                                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6176));
                                                                  v5 = 0;
                                                                }
                                                                else
                                                                {
                                                                  *(_DWORD *)(((v2 + 6240) >> 3) + 0x7FFF8000) = 0;
                                                                  *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = 1;
                                                                  std::allocator<char>::allocator(v2 + 608);
                                                                  std::string::basic_string<std::allocator<char>>(
                                                                    (std::string *const)(v2 + 6240),
                                                                    "gadgetTurn",
                                                                    (const std::allocator<char> *)(v2 + 608));
                                                                  gadget_turn_ptr = jsonValueFind(
                                                                                      jval,
                                                                                      (const std::string *)(v2 + 6240));
                                                                  std::string::~string((void *)(v2 + 6240));
                                                                  *(_DWORD *)(((v2 + 6240) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::allocator<char>::~allocator(v2 + 608);
                                                                  *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
                                                                  if ( gadget_turn_ptr )
                                                                  {
                                                                    *(_WORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(_WORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) )
                                                                      __asan_report_store16();
                                                                    data::ConfigGadgetTurn::parseFromJson((const Json::Value *)(v2 + 1280));
                                                                    v18 = std::shared_ptr<data::ConfigGadgetTurn>::operator=(
                                                                            &this->gadget_turn,
                                                                            (std::shared_ptr<data::ConfigGadgetTurn> *)(v2 + 1280));
                                                                    v19 = std::operator==<data::ConfigGadgetTurn>(
                                                                            v18,
                                                                            0LL);
                                                                    std::shared_ptr<data::ConfigGadgetTurn>::~shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)(v2 + 1280));
                                                                    *(_WORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -1800;
                                                                    if ( v19 )
                                                                    {
                                                                      *(_DWORD *)(((v2 + 6304) >> 3) + 0x7FFF8000) = 0;
                                                                      if ( *(char *)(((v2 + 6304) >> 3) + 0x7FFF8000) < 0
                                                                        || *(_BYTE *)(((v2 + 6335) >> 3) + 0x7FFF8000) != 0
                                                                        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 6335) >> 3) + 0x7FFF8000) )
                                                                      {
                                                                        __asan_report_store_n(v2 + 6304, 32LL);
                                                                      }
                                                                      common::milog::MiLogStream::create(
                                                                        (common::milog::MiLogStream *)(v2 + 6304),
                                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                                        1u,
                                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                                        "fromJson",
                                                                        8249);
                                                                      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                                                                        (common::milog::MiLogStream *const)(v2 + 6304),
                                                                        (const char (*)[32])"fromJson for: gadgetTurn fails!");
                                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6304));
                                                                      *(_DWORD *)(((v2 + 6304) >> 3) + 0x7FFF8000) = -117901064;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_WORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(_WORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) )
                                                                      __asan_report_store16();
                                                                    common::tools::perf::make_shared<data::ConfigGadgetTurn>();
                                                                    std::shared_ptr<data::ConfigGadgetTurn>::operator=(
                                                                      &this->gadget_turn,
                                                                      (std::shared_ptr<data::ConfigGadgetTurn> *)(v2 + 1248));
                                                                    std::shared_ptr<data::ConfigGadgetTurn>::~shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)(v2 + 1248));
                                                                    *(_WORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -1800;
                                                                  }
                                                                  *(_DWORD *)(((v2 + 6368) >> 3) + 0x7FFF8000) = 0;
                                                                  *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = 1;
                                                                  std::allocator<char>::allocator(v2 + 624);
                                                                  std::string::basic_string<std::allocator<char>>(
                                                                    (std::string *const)(v2 + 6368),
                                                                    "gvTurn",
                                                                    (const std::allocator<char> *)(v2 + 624));
                                                                  gv_turn_ptr = jsonValueFind(
                                                                                  jval,
                                                                                  (const std::string *)(v2 + 6368));
                                                                  std::string::~string((void *)(v2 + 6368));
                                                                  *(_DWORD *)(((v2 + 6368) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::allocator<char>::~allocator(v2 + 624);
                                                                  *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
                                                                  if ( gv_turn_ptr )
                                                                  {
                                                                    *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
                                                                    v20 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGlobalValueTurnFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGlobalValueTurnFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigGlobalValueTurnFactory::instance_ptr);
                                                                    if ( *(_BYTE *)((v20 >> 3) + 0x7FFF8000) )
                                                                      v20 = __asan_report_load8(v20);
                                                                    v21 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v20;
                                                                    if ( *(_BYTE *)((*(_QWORD *)v20 >> 3) + 0x7FFF8000LL) )
                                                                      v20 = __asan_report_load8(*(_QWORD *)v20);
                                                                    v22 = *v21;
                                                                    if ( *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) )
                                                                      v20 = __asan_report_store16();
                                                                    v22(v2 + 1344, v20);
                                                                    v23 = std::shared_ptr<data::ConfigGlobalValueTurn>::operator=(
                                                                            &this->gv_turn,
                                                                            (std::shared_ptr<data::ConfigGlobalValueTurn> *)(v2 + 1344));
                                                                    if ( std::operator==<data::ConfigGlobalValueTurn>(
                                                                           v23,
                                                                           0LL) )
                                                                    {
                                                                      goto LABEL_241;
                                                                    }
                                                                    v24 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->gv_turn);
                                                                    if ( *(_BYTE *)((v24 >> 3) + 0x7FFF8000) )
                                                                      v24 = __asan_report_load8(v24);
                                                                    v25 = *(_QWORD *)v24 + 48LL;
                                                                    if ( *(_BYTE *)((v25 >> 3) + 0x7FFF8000) )
                                                                      v24 = __asan_report_load8(*(_QWORD *)v24 + 48LL);
                                                                    if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v25)(
                                                                           v24,
                                                                           gv_turn_ptr) != 1 )
LABEL_241:
                                                                      v57 = 1;
                                                                    else
                                                                      v57 = 0;
                                                                    std::shared_ptr<data::ConfigGlobalValueTurn>::~shared_ptr((std::shared_ptr<data::ConfigGlobalValueTurn> *const)(v2 + 1344));
                                                                    *(_WORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -1800;
                                                                    if ( v57 )
                                                                    {
                                                                      *(_DWORD *)(((v2 + 6432) >> 3) + 0x7FFF8000) = 0;
                                                                      if ( *(char *)(((v2 + 6432) >> 3) + 0x7FFF8000) < 0
                                                                        || *(_BYTE *)(((v2 + 6463) >> 3) + 0x7FFF8000) != 0
                                                                        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 6463) >> 3) + 0x7FFF8000) )
                                                                      {
                                                                        __asan_report_store_n(v2 + 6432, 32LL);
                                                                      }
                                                                      common::milog::MiLogStream::create(
                                                                        (common::milog::MiLogStream *)(v2 + 6432),
                                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                                        1u,
                                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                                        "fromJson",
                                                                        8262);
                                                                      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                                                                        (common::milog::MiLogStream *const)(v2 + 6432),
                                                                        (const char (*)[28])"fromJson for: gvTurn fails!");
                                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6432));
                                                                      *(_DWORD *)(((v2 + 6432) >> 3) + 0x7FFF8000) = -117901064;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) )
                                                                      __asan_report_store16();
                                                                    common::tools::perf::make_shared<data::ConfigGlobalValueTurn>();
                                                                    std::shared_ptr<data::ConfigGlobalValueTurn>::operator=(
                                                                      &this->gv_turn,
                                                                      (std::shared_ptr<data::ConfigGlobalValueTurn> *)(v2 + 1312));
                                                                    std::shared_ptr<data::ConfigGlobalValueTurn>::~shared_ptr((std::shared_ptr<data::ConfigGlobalValueTurn> *const)(v2 + 1312));
                                                                    *(_WORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -1800;
                                                                  }
                                                                  *(_DWORD *)(((v2 + 6496) >> 3) + 0x7FFF8000) = 0;
                                                                  *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = 1;
                                                                  std::allocator<char>::allocator(v2 + 640);
                                                                  std::string::basic_string<std::allocator<char>>(
                                                                    (std::string *const)(v2 + 6496),
                                                                    "billboard",
                                                                    (const std::allocator<char> *)(v2 + 640));
                                                                  billboard_ptr = jsonValueFind(
                                                                                    jval,
                                                                                    (const std::string *)(v2 + 6496));
                                                                  std::string::~string((void *)(v2 + 6496));
                                                                  *(_DWORD *)(((v2 + 6496) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::allocator<char>::~allocator(v2 + 640);
                                                                  *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
                                                                  if ( billboard_ptr )
                                                                  {
                                                                    *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) )
                                                                      __asan_report_store16();
                                                                    data::ConfigBillboard::parseFromJson((const Json::Value *)(v2 + 1408));
                                                                    v26 = std::shared_ptr<data::ConfigBillboard>::operator=(
                                                                            &this->billboard,
                                                                            (std::shared_ptr<data::ConfigBillboard> *)(v2 + 1408));
                                                                    v27 = std::operator==<data::ConfigBillboard>(
                                                                            v26,
                                                                            0LL);
                                                                    std::shared_ptr<data::ConfigBillboard>::~shared_ptr((std::shared_ptr<data::ConfigBillboard> *const)(v2 + 1408));
                                                                    *(_WORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -1800;
                                                                    if ( v27 )
                                                                    {
                                                                      *(_DWORD *)(((v2 + 6560) >> 3) + 0x7FFF8000) = 0;
                                                                      if ( *(char *)(((v2 + 6560) >> 3) + 0x7FFF8000) < 0
                                                                        || *(_BYTE *)(((v2 + 6591) >> 3) + 0x7FFF8000) != 0
                                                                        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 6591) >> 3) + 0x7FFF8000) )
                                                                      {
                                                                        __asan_report_store_n(v2 + 6560, 32LL);
                                                                      }
                                                                      common::milog::MiLogStream::create(
                                                                        (common::milog::MiLogStream *)(v2 + 6560),
                                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                                        1u,
                                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                                        "fromJson",
                                                                        8275);
                                                                      common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                                                        (common::milog::MiLogStream *const)(v2 + 6560),
                                                                        (const char (*)[31])"fromJson for: billboard fails!");
                                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6560));
                                                                      *(_DWORD *)(((v2 + 6560) >> 3) + 0x7FFF8000) = -117901064;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) )
                                                                      __asan_report_store16();
                                                                    common::tools::perf::make_shared<data::ConfigBillboard>();
                                                                    std::shared_ptr<data::ConfigBillboard>::operator=(
                                                                      &this->billboard,
                                                                      (std::shared_ptr<data::ConfigBillboard> *)(v2 + 1376));
                                                                    std::shared_ptr<data::ConfigBillboard>::~shared_ptr((std::shared_ptr<data::ConfigBillboard> *const)(v2 + 1376));
                                                                    *(_WORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -1800;
                                                                  }
                                                                  *(_DWORD *)(((v2 + 6624) >> 3) + 0x7FFF8000) = 0;
                                                                  *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = 1;
                                                                  std::allocator<char>::allocator(v2 + 656);
                                                                  std::string::basic_string<std::allocator<char>>(
                                                                    (std::string *const)(v2 + 6624),
                                                                    "intee",
                                                                    (const std::allocator<char> *)(v2 + 656));
                                                                  intee_ptr = jsonValueFind(
                                                                                jval,
                                                                                (const std::string *)(v2 + 6624));
                                                                  std::string::~string((void *)(v2 + 6624));
                                                                  *(_DWORD *)(((v2 + 6624) >> 3) + 0x7FFF8000) = -117901064;
                                                                  std::allocator<char>::~allocator(v2 + 656);
                                                                  *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
                                                                  if ( intee_ptr
                                                                    && !data::ConfigIntee::fromJson(
                                                                          &this->intee,
                                                                          intee_ptr) )
                                                                  {
                                                                    *(_DWORD *)(((v2 + 6688) >> 3) + 0x7FFF8000) = 0;
                                                                    if ( *(char *)(((v2 + 6688) >> 3) + 0x7FFF8000) < 0
                                                                      || *(_BYTE *)(((v2 + 6719) >> 3) + 0x7FFF8000) != 0
                                                                      && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 6719) >> 3) + 0x7FFF8000) )
                                                                    {
                                                                      __asan_report_store_n(v2 + 6688, 32LL);
                                                                    }
                                                                    common::milog::MiLogStream::create(
                                                                      (common::milog::MiLogStream *)(v2 + 6688),
                                                                      &common::milog::MiLogDefault::default_log_obj_,
                                                                      3u,
                                                                      "./src/json_data_auto/ConfigEntity.cpp",
                                                                      "fromJson",
                                                                      8286);
                                                                    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                                                                      (common::milog::MiLogStream *const)(v2 + 6688),
                                                                      (const char (*)[27])"fromJson for: intee fails!");
                                                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6688));
                                                                    v5 = 0;
                                                                  }
                                                                  else
                                                                  {
                                                                    *(_DWORD *)(((v2 + 6752) >> 3) + 0x7FFF8000) = 0;
                                                                    *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = 1;
                                                                    std::allocator<char>::allocator(v2 + 672);
                                                                    std::string::basic_string<std::allocator<char>>(
                                                                      (std::string *const)(v2 + 6752),
                                                                      "bindEmotions",
                                                                      (const std::allocator<char> *)(v2 + 672));
                                                                    bind_emotions_ptr = jsonValueFind(
                                                                                          jval,
                                                                                          (const std::string *)(v2 + 6752));
                                                                    std::string::~string((void *)(v2 + 6752));
                                                                    *(_DWORD *)(((v2 + 6752) >> 3) + 0x7FFF8000) = -117901064;
                                                                    std::allocator<char>::~allocator(v2 + 672);
                                                                    *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
                                                                    if ( bind_emotions_ptr
                                                                      && !data::arrFromJson(
                                                                            bind_emotions_ptr,
                                                                            &this->bind_emotions) )
                                                                    {
                                                                      *(_DWORD *)(((v2 + 6816) >> 3) + 0x7FFF8000) = 0;
                                                                      if ( *(char *)(((v2 + 6816) >> 3) + 0x7FFF8000) < 0
                                                                        || *(_BYTE *)(((v2 + 6847) >> 3) + 0x7FFF8000) != 0
                                                                        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 6847) >> 3) + 0x7FFF8000) )
                                                                      {
                                                                        __asan_report_store_n(v2 + 6816, 32LL);
                                                                      }
                                                                      common::milog::MiLogStream::create(
                                                                        (common::milog::MiLogStream *)(v2 + 6816),
                                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                                        3u,
                                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                                        "fromJson",
                                                                        8298);
                                                                      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                                        (common::milog::MiLogStream *const)(v2 + 6816),
                                                                        (const char (*)[34])"fromJson for: bindEmotions fails!");
                                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6816));
                                                                      v5 = 0;
                                                                    }
                                                                    else
                                                                    {
                                                                      *(_DWORD *)(((v2 + 6880) >> 3) + 0x7FFF8000) = 0;
                                                                      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = 1;
                                                                      std::allocator<char>::allocator(v2 + 688);
                                                                      std::string::basic_string<std::allocator<char>>(
                                                                        (std::string *const)(v2 + 6880),
                                                                        "projector",
                                                                        (const std::allocator<char> *)(v2 + 688));
                                                                      projector_ptr = jsonValueFind(
                                                                                        jval,
                                                                                        (const std::string *)(v2 + 6880));
                                                                      std::string::~string((void *)(v2 + 6880));
                                                                      *(_DWORD *)(((v2 + 6880) >> 3) + 0x7FFF8000) = -117901064;
                                                                      std::allocator<char>::~allocator(v2 + 688);
                                                                      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
                                                                      if ( projector_ptr
                                                                        && !fromJson<bool>(
                                                                              projector_ptr,
                                                                              &this->projector) )
                                                                      {
                                                                        *(_DWORD *)(((v2 + 6944) >> 3) + 0x7FFF8000) = 0;
                                                                        if ( *(char *)(((v2 + 6944) >> 3) + 0x7FFF8000) < 0
                                                                          || *(_BYTE *)(((v2 + 6975) >> 3) + 0x7FFF8000) != 0
                                                                          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 6975) >> 3) + 0x7FFF8000) )
                                                                        {
                                                                          __asan_report_store_n(v2 + 6944, 32LL);
                                                                        }
                                                                        common::milog::MiLogStream::create(
                                                                          (common::milog::MiLogStream *)(v2 + 6944),
                                                                          &common::milog::MiLogDefault::default_log_obj_,
                                                                          3u,
                                                                          "./src/json_data_auto/ConfigEntity.cpp",
                                                                          "fromJson",
                                                                          8310);
                                                                        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                                                          (common::milog::MiLogStream *const)(v2 + 6944),
                                                                          (const char (*)[31])"fromJson for: projector fails!");
                                                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6944));
                                                                        v5 = 0;
                                                                      }
                                                                      else
                                                                      {
                                                                        *(_DWORD *)(((v2 + 7008) >> 3) + 0x7FFF8000) = 0;
                                                                        *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = 1;
                                                                        std::allocator<char>::allocator(v2 + 704);
                                                                        std::string::basic_string<std::allocator<char>>(
                                                                          (std::string *const)(v2 + 7008),
                                                                          "lowPriorityIntee",
                                                                          (const std::allocator<char> *)(v2 + 704));
                                                                        low_priority_intee_ptr = jsonValueFind(
                                                                                                   jval,
                                                                                                   (const std::string *)(v2 + 7008));
                                                                        std::string::~string((void *)(v2 + 7008));
                                                                        *(_DWORD *)(((v2 + 7008) >> 3) + 0x7FFF8000) = -117901064;
                                                                        std::allocator<char>::~allocator(v2 + 704);
                                                                        *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
                                                                        if ( low_priority_intee_ptr
                                                                          && !fromJson<bool>(
                                                                                low_priority_intee_ptr,
                                                                                &this->low_priority_intee) )
                                                                        {
                                                                          *(_DWORD *)(((v2 + 7072) >> 3) + 0x7FFF8000) = 0;
                                                                          if ( *(char *)(((v2 + 7072) >> 3) + 0x7FFF8000) < 0
                                                                            || *(_BYTE *)(((v2 + 7103) >> 3) + 0x7FFF8000) != 0
                                                                            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 7103) >> 3) + 0x7FFF8000) )
                                                                          {
                                                                            __asan_report_store_n(v2 + 7072, 32LL);
                                                                          }
                                                                          common::milog::MiLogStream::create(
                                                                            (common::milog::MiLogStream *)(v2 + 7072),
                                                                            &common::milog::MiLogDefault::default_log_obj_,
                                                                            3u,
                                                                            "./src/json_data_auto/ConfigEntity.cpp",
                                                                            "fromJson",
                                                                            8322);
                                                                          common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                                                                            (common::milog::MiLogStream *const)(v2 + 7072),
                                                                            (const char (*)[38])"fromJson for: lowPriorityIntee fails!");
                                                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 7072));
                                                                          v5 = 0;
                                                                        }
                                                                        else
                                                                        {
                                                                          *(_DWORD *)(((v2 + 7136) >> 3) + 0x7FFF8000) = 0;
                                                                          *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = 1;
                                                                          std::allocator<char>::allocator(v2 + 720);
                                                                          std::string::basic_string<std::allocator<char>>(
                                                                            (std::string *const)(v2 + 7136),
                                                                            "canRemoveByClient",
                                                                            (const std::allocator<char> *)(v2 + 720));
                                                                          can_remove_by_client_ptr = jsonValueFind(jval, (const std::string *)(v2 + 7136));
                                                                          std::string::~string((void *)(v2 + 7136));
                                                                          *(_DWORD *)(((v2 + 7136) >> 3) + 0x7FFF8000) = -117901064;
                                                                          std::allocator<char>::~allocator(v2 + 720);
                                                                          *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
                                                                          if ( can_remove_by_client_ptr
                                                                            && !fromJson<bool>(
                                                                                  can_remove_by_client_ptr,
                                                                                  &this->can_remove_by_client) )
                                                                          {
                                                                            *(_DWORD *)(((v2 + 7200) >> 3) + 0x7FFF8000) = 0;
                                                                            if ( *(char *)(((v2 + 7200) >> 3)
                                                                                         + 0x7FFF8000) < 0
                                                                              || *(_BYTE *)(((v2 + 7231) >> 3)
                                                                                          + 0x7FFF8000) != 0
                                                                              && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 7231) >> 3) + 0x7FFF8000) )
                                                                            {
                                                                              __asan_report_store_n(v2 + 7200, 32LL);
                                                                            }
                                                                            common::milog::MiLogStream::create(
                                                                              (common::milog::MiLogStream *)(v2 + 7200),
                                                                              &common::milog::MiLogDefault::default_log_obj_,
                                                                              3u,
                                                                              "./src/json_data_auto/ConfigEntity.cpp",
                                                                              "fromJson",
                                                                              8334);
                                                                            common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                                                                              (common::milog::MiLogStream *const)(v2 + 7200),
                                                                              (const char (*)[39])"fromJson for: canRemov"
                                                                                                  "eByClient fails!");
                                                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 7200));
                                                                            v5 = 0;
                                                                          }
                                                                          else
                                                                          {
                                                                            *(_DWORD *)(((v2 + 7264) >> 3) + 0x7FFF8000) = 0;
                                                                            *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = 1;
                                                                            std::allocator<char>::allocator(v2 + 736);
                                                                            std::string::basic_string<std::allocator<char>>(
                                                                              (std::string *const)(v2 + 7264),
                                                                              "tags",
                                                                              (const std::allocator<char> *)(v2 + 736));
                                                                            tags_ptr = jsonValueFind(
                                                                                         jval,
                                                                                         (const std::string *)(v2 + 7264));
                                                                            std::string::~string((void *)(v2 + 7264));
                                                                            *(_DWORD *)(((v2 + 7264) >> 3) + 0x7FFF8000) = -117901064;
                                                                            std::allocator<char>::~allocator(v2 + 736);
                                                                            *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
                                                                            if ( tags_ptr
                                                                              && !data::arrFromJson(
                                                                                    tags_ptr,
                                                                                    &this->tags) )
                                                                            {
                                                                              *(_DWORD *)(((v2 + 7328) >> 3) + 0x7FFF8000) = 0;
                                                                              if ( *(char *)(((v2 + 7328) >> 3)
                                                                                           + 0x7FFF8000) < 0
                                                                                || *(_BYTE *)(((v2 + 7359) >> 3)
                                                                                            + 0x7FFF8000) != 0
                                                                                && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 7359) >> 3) + 0x7FFF8000) )
                                                                              {
                                                                                __asan_report_store_n(v2 + 7328, 32LL);
                                                                              }
                                                                              common::milog::MiLogStream::create(
                                                                                (common::milog::MiLogStream *)(v2 + 7328),
                                                                                &common::milog::MiLogDefault::default_log_obj_,
                                                                                3u,
                                                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                                                "fromJson",
                                                                                8346);
                                                                              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                                                                                (common::milog::MiLogStream *const)(v2 + 7328),
                                                                                (const char (*)[26])"fromJson for: tags fails!");
                                                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 7328));
                                                                              v5 = 0;
                                                                            }
                                                                            else
                                                                            {
                                                                              *(_DWORD *)(((v2 + 7392) >> 3) + 0x7FFF8000) = 0;
                                                                              *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = 1;
                                                                              std::allocator<char>::allocator(v2 + 752);
                                                                              std::string::basic_string<std::allocator<char>>(
                                                                                (std::string *const)(v2 + 7392),
                                                                                "canBeTriggeredByAvatarRay",
                                                                                (const std::allocator<char> *)(v2 + 752));
                                                                              can_be_triggered_by_avatar_ray_ptr = jsonValueFind(jval, (const std::string *)(v2 + 7392));
                                                                              std::string::~string((void *)(v2 + 7392));
                                                                              *(_DWORD *)(((v2 + 7392) >> 3) + 0x7FFF8000) = -117901064;
                                                                              std::allocator<char>::~allocator(v2 + 752);
                                                                              *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
                                                                              if ( can_be_triggered_by_avatar_ray_ptr
                                                                                && !fromJson<bool>(
                                                                                      can_be_triggered_by_avatar_ray_ptr,
                                                                                      &this->can_be_triggered_by_avatar_ray) )
                                                                              {
                                                                                *(_DWORD *)(((v2 + 7456) >> 3)
                                                                                          + 0x7FFF8000) = 0;
                                                                                if ( *(char *)(((v2 + 7456) >> 3)
                                                                                             + 0x7FFF8000) < 0
                                                                                  || *(_BYTE *)(((v2 + 7487) >> 3)
                                                                                              + 0x7FFF8000) != 0
                                                                                  && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 7487) >> 3) + 0x7FFF8000) )
                                                                                {
                                                                                  __asan_report_store_n(v2 + 7456, 32LL);
                                                                                }
                                                                                common::milog::MiLogStream::create(
                                                                                  (common::milog::MiLogStream *)(v2 + 7456),
                                                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                                                  3u,
                                                                                  "./src/json_data_auto/ConfigEntity.cpp",
                                                                                  "fromJson",
                                                                                  8358);
                                                                                common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(
                                                                                  (common::milog::MiLogStream *const)(v2 + 7456),
                                                                                  (const char (*)[47])"fromJson for: canBeTriggeredByAvatarRay fails!");
                                                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 7456));
                                                                                v5 = 0;
                                                                              }
                                                                              else
                                                                              {
                                                                                *(_DWORD *)(((v2 + 7520) >> 3)
                                                                                          + 0x7FFF8000) = 0;
                                                                                *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = 1;
                                                                                std::allocator<char>::allocator(v2 + 768);
                                                                                std::string::basic_string<std::allocator<char>>(
                                                                                  (std::string *const)(v2 + 7520),
                                                                                  "vehicle",
                                                                                  (const std::allocator<char> *)(v2 + 768));
                                                                                vehicle_ptr = jsonValueFind(
                                                                                                jval,
                                                                                                (const std::string *)(v2 + 7520));
                                                                                std::string::~string((void *)(v2 + 7520));
                                                                                *(_DWORD *)(((v2 + 7520) >> 3)
                                                                                          + 0x7FFF8000) = -117901064;
                                                                                std::allocator<char>::~allocator(v2 + 768);
                                                                                *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
                                                                                if ( vehicle_ptr
                                                                                  && !data::ConfigVehicle::fromJson(
                                                                                        &this->vehicle,
                                                                                        vehicle_ptr) )
                                                                                {
                                                                                  *(_DWORD *)(((v2 + 7584) >> 3)
                                                                                            + 0x7FFF8000) = 0;
                                                                                  if ( *(char *)(((v2 + 7584) >> 3)
                                                                                               + 0x7FFF8000) < 0
                                                                                    || *(_BYTE *)(((v2 + 7615) >> 3)
                                                                                                + 0x7FFF8000) != 0
                                                                                    && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 7615) >> 3) + 0x7FFF8000) )
                                                                                  {
                                                                                    __asan_report_store_n(
                                                                                      v2 + 7584,
                                                                                      32LL);
                                                                                  }
                                                                                  common::milog::MiLogStream::create(
                                                                                    (common::milog::MiLogStream *)(v2 + 7584),
                                                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                                                    3u,
                                                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                                                    "fromJson",
                                                                                    8370);
                                                                                  common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
                                                                                    (common::milog::MiLogStream *const)(v2 + 7584),
                                                                                    (const char (*)[29])"fromJson for: vehicle fails!");
                                                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 7584));
                                                                                  v5 = 0;
                                                                                }
                                                                                else
                                                                                {
                                                                                  *(_DWORD *)(((v2 + 7648) >> 3)
                                                                                            + 0x7FFF8000) = 0;
                                                                                  *(_BYTE *)(((v2 + 784) >> 3)
                                                                                           + 0x7FFF8000) = 1;
                                                                                  std::allocator<char>::allocator(v2 + 784);
                                                                                  std::string::basic_string<std::allocator<char>>(
                                                                                    (std::string *const)(v2 + 7648),
                                                                                    "dangerzone",
                                                                                    (const std::allocator<char> *)(v2 + 784));
                                                                                  dangerzone_ptr = jsonValueFind(
                                                                                                     jval,
                                                                                                     (const std::string *)(v2 + 7648));
                                                                                  std::string::~string((void *)(v2 + 7648));
                                                                                  *(_DWORD *)(((v2 + 7648) >> 3)
                                                                                            + 0x7FFF8000) = -117901064;
                                                                                  std::allocator<char>::~allocator(v2 + 784);
                                                                                  *(_BYTE *)(((v2 + 784) >> 3)
                                                                                           + 0x7FFF8000) = -8;
                                                                                  if ( dangerzone_ptr )
                                                                                  {
                                                                                    *(_WORD *)(((v2 + 1472) >> 3)
                                                                                             + 0x7FFF8000) = 0;
                                                                                    v28 = (unsigned __int64)std::__shared_ptr_access<data::ConfigDangerZoneFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigDangerZoneFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigDangerZoneFactory::instance_ptr);
                                                                                    if ( *(_BYTE *)((v28 >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v28 = __asan_report_load8(v28);
                                                                                    v29 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v28;
                                                                                    if ( *(_BYTE *)((*(_QWORD *)v28 >> 3)
                                                                                                  + 0x7FFF8000LL) )
                                                                                      v28 = __asan_report_load8(*(_QWORD *)v28);
                                                                                    v30 = *v29;
                                                                                    if ( *(_WORD *)(((v2 + 1472) >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v28 = __asan_report_store16();
                                                                                    v30(v2 + 1472, v28);
                                                                                    v31 = std::shared_ptr<data::ConfigDangerZone>::operator=(
                                                                                            &this->dangerzone,
                                                                                            (std::shared_ptr<data::ConfigDangerZone> *)(v2 + 1472));
                                                                                    if ( std::operator==<data::ConfigDangerZone>(
                                                                                           v31,
                                                                                           0LL) )
                                                                                    {
                                                                                      goto LABEL_313;
                                                                                    }
                                                                                    v32 = (unsigned __int64)std::__shared_ptr_access<data::ConfigDangerZone,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigDangerZone,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->dangerzone);
                                                                                    if ( *(_BYTE *)((v32 >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v32 = __asan_report_load8(v32);
                                                                                    v33 = *(_QWORD *)v32 + 48LL;
                                                                                    if ( *(_BYTE *)((v33 >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v32 = __asan_report_load8(*(_QWORD *)v32 + 48LL);
                                                                                    if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v33)(
                                                                                           v32,
                                                                                           dangerzone_ptr) != 1 )
LABEL_313:
                                                                                      v58 = 1;
                                                                                    else
                                                                                      v58 = 0;
                                                                                    std::shared_ptr<data::ConfigDangerZone>::~shared_ptr((std::shared_ptr<data::ConfigDangerZone> *const)(v2 + 1472));
                                                                                    *(_WORD *)(((v2 + 1472) >> 3)
                                                                                             + 0x7FFF8000) = -1800;
                                                                                    if ( v58 )
                                                                                    {
                                                                                      *(_DWORD *)(((v2 + 7712) >> 3)
                                                                                                + 0x7FFF8000) = 0;
                                                                                      if ( *(char *)(((v2 + 7712) >> 3) + 0x7FFF8000) < 0
                                                                                        || *(_BYTE *)(((v2 + 7743) >> 3) + 0x7FFF8000) != 0
                                                                                        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 7743) >> 3) + 0x7FFF8000) )
                                                                                      {
                                                                                        __asan_report_store_n(
                                                                                          v2 + 7712,
                                                                                          32LL);
                                                                                      }
                                                                                      common::milog::MiLogStream::create(
                                                                                        (common::milog::MiLogStream *)(v2 + 7712),
                                                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                                                        1u,
                                                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                                                        "fromJson",
                                                                                        8384);
                                                                                      common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
                                                                                        (common::milog::MiLogStream *const)(v2 + 7712),
                                                                                        (const char (*)[32])"fromJson for: dangerzone fails!");
                                                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 7712));
                                                                                      *(_DWORD *)(((v2 + 7712) >> 3)
                                                                                                + 0x7FFF8000) = -117901064;
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    *(_WORD *)(((v2 + 1440) >> 3)
                                                                                             + 0x7FFF8000) = 0;
                                                                                    if ( *(_WORD *)(((v2 + 1440) >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      __asan_report_store16();
                                                                                    common::tools::perf::make_shared<data::ConfigDangerZone>();
                                                                                    std::shared_ptr<data::ConfigDangerZone>::operator=(
                                                                                      &this->dangerzone,
                                                                                      (std::shared_ptr<data::ConfigDangerZone> *)(v2 + 1440));
                                                                                    std::shared_ptr<data::ConfigDangerZone>::~shared_ptr((std::shared_ptr<data::ConfigDangerZone> *const)(v2 + 1440));
                                                                                    *(_WORD *)(((v2 + 1440) >> 3)
                                                                                             + 0x7FFF8000) = -1800;
                                                                                  }
                                                                                  *(_DWORD *)(((v2 + 7776) >> 3)
                                                                                            + 0x7FFF8000) = 0;
                                                                                  *(_BYTE *)(((v2 + 800) >> 3)
                                                                                           + 0x7FFF8000) = 1;
                                                                                  std::allocator<char>::allocator(v2 + 800);
                                                                                  std::string::basic_string<std::allocator<char>>(
                                                                                    (std::string *const)(v2 + 7776),
                                                                                    "fishingZone",
                                                                                    (const std::allocator<char> *)(v2 + 800));
                                                                                  fishing_zone_ptr = jsonValueFind(jval, (const std::string *)(v2 + 7776));
                                                                                  std::string::~string((void *)(v2 + 7776));
                                                                                  *(_DWORD *)(((v2 + 7776) >> 3)
                                                                                            + 0x7FFF8000) = -117901064;
                                                                                  std::allocator<char>::~allocator(v2 + 800);
                                                                                  *(_BYTE *)(((v2 + 800) >> 3)
                                                                                           + 0x7FFF8000) = -8;
                                                                                  if ( fishing_zone_ptr )
                                                                                  {
                                                                                    *(_WORD *)(((v2 + 1536) >> 3)
                                                                                             + 0x7FFF8000) = 0;
                                                                                    v34 = (unsigned __int64)std::__shared_ptr_access<data::ConfigFishingZoneFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishingZoneFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigFishingZoneFactory::instance_ptr);
                                                                                    if ( *(_BYTE *)((v34 >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v34 = __asan_report_load8(v34);
                                                                                    v35 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v34;
                                                                                    if ( *(_BYTE *)((*(_QWORD *)v34 >> 3)
                                                                                                  + 0x7FFF8000LL) )
                                                                                      v34 = __asan_report_load8(*(_QWORD *)v34);
                                                                                    v36 = *v35;
                                                                                    if ( *(_WORD *)(((v2 + 1536) >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v34 = __asan_report_store16();
                                                                                    v36(v2 + 1536, v34);
                                                                                    v37 = std::shared_ptr<data::ConfigFishingZone>::operator=(
                                                                                            &this->fishing_zone,
                                                                                            (std::shared_ptr<data::ConfigFishingZone> *)(v2 + 1536));
                                                                                    if ( std::operator==<data::ConfigFishingZone>(
                                                                                           v37,
                                                                                           0LL) )
                                                                                    {
                                                                                      goto LABEL_335;
                                                                                    }
                                                                                    v38 = (unsigned __int64)std::__shared_ptr_access<data::ConfigFishingZone,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishingZone,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->fishing_zone);
                                                                                    if ( *(_BYTE *)((v38 >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v38 = __asan_report_load8(v38);
                                                                                    v39 = *(_QWORD *)v38 + 48LL;
                                                                                    if ( *(_BYTE *)((v39 >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      v38 = __asan_report_load8(*(_QWORD *)v38 + 48LL);
                                                                                    if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v39)(
                                                                                           v38,
                                                                                           fishing_zone_ptr) != 1 )
LABEL_335:
                                                                                      v59 = 1;
                                                                                    else
                                                                                      v59 = 0;
                                                                                    std::shared_ptr<data::ConfigFishingZone>::~shared_ptr((std::shared_ptr<data::ConfigFishingZone> *const)(v2 + 1536));
                                                                                    *(_WORD *)(((v2 + 1536) >> 3)
                                                                                             + 0x7FFF8000) = -1800;
                                                                                    if ( v59 )
                                                                                    {
                                                                                      *(_DWORD *)(((v2 + 7840) >> 3)
                                                                                                + 0x7FFF8000) = 0;
                                                                                      if ( *(char *)(((v2 + 7840) >> 3) + 0x7FFF8000) < 0
                                                                                        || *(_BYTE *)(((v2 + 7871) >> 3) + 0x7FFF8000) != 0
                                                                                        && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 7871) >> 3) + 0x7FFF8000) )
                                                                                      {
                                                                                        __asan_report_store_n(
                                                                                          v2 + 7840,
                                                                                          32LL);
                                                                                      }
                                                                                      common::milog::MiLogStream::create(
                                                                                        (common::milog::MiLogStream *)(v2 + 7840),
                                                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                                                        1u,
                                                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                                                        "fromJson",
                                                                                        8397);
                                                                                      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                                                                        (common::milog::MiLogStream *const)(v2 + 7840),
                                                                                        (const char (*)[33])"fromJson for: fishingZone fails!");
                                                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 7840));
                                                                                      *(_DWORD *)(((v2 + 7840) >> 3)
                                                                                                + 0x7FFF8000) = -117901064;
                                                                                    }
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    *(_WORD *)(((v2 + 1504) >> 3)
                                                                                             + 0x7FFF8000) = 0;
                                                                                    if ( *(_WORD *)(((v2 + 1504) >> 3)
                                                                                                  + 0x7FFF8000) )
                                                                                      __asan_report_store16();
                                                                                    common::tools::perf::make_shared<data::ConfigFishingZone>();
                                                                                    std::shared_ptr<data::ConfigFishingZone>::operator=(
                                                                                      &this->fishing_zone,
                                                                                      (std::shared_ptr<data::ConfigFishingZone> *)(v2 + 1504));
                                                                                    std::shared_ptr<data::ConfigFishingZone>::~shared_ptr((std::shared_ptr<data::ConfigFishingZone> *const)(v2 + 1504));
                                                                                    *(_WORD *)(((v2 + 1504) >> 3)
                                                                                             + 0x7FFF8000) = -1800;
                                                                                  }
                                                                                  *(_DWORD *)(((v2 + 7904) >> 3)
                                                                                            + 0x7FFF8000) = 0;
                                                                                  *(_BYTE *)(((v2 + 816) >> 3)
                                                                                           + 0x7FFF8000) = 1;
                                                                                  std::allocator<char>::allocator(v2 + 816);
                                                                                  std::string::basic_string<std::allocator<char>>(
                                                                                    (std::string *const)(v2 + 7904),
                                                                                    "forceSetEntityType",
                                                                                    (const std::allocator<char> *)(v2 + 816));
                                                                                  force_set_entity_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 7904));
                                                                                  std::string::~string((void *)(v2 + 7904));
                                                                                  *(_DWORD *)(((v2 + 7904) >> 3)
                                                                                            + 0x7FFF8000) = -117901064;
                                                                                  std::allocator<char>::~allocator(v2 + 816);
                                                                                  *(_BYTE *)(((v2 + 816) >> 3)
                                                                                           + 0x7FFF8000) = -8;
                                                                                  if ( !force_set_entity_type_ptr )
                                                                                    goto LABEL_348;
                                                                                  *(_DWORD *)(((v2 + 7968) >> 3)
                                                                                            + 0x7FFF8000) = 0;
                                                                                  if ( *(char *)(((v2 + 7968) >> 3)
                                                                                               + 0x7FFF8000) < 0
                                                                                    || *(_BYTE *)(((v2 + 7999) >> 3)
                                                                                                + 0x7FFF8000) != 0
                                                                                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 7999) >> 3) + 0x7FFF8000) )
                                                                                  {
                                                                                    __asan_report_store_n(
                                                                                      v2 + 7968,
                                                                                      32LL);
                                                                                  }
                                                                                  Json::Value::asString[abi:cxx11](
                                                                                    (Json::String *)(v2 + 7968),
                                                                                    (Json::Value_0 *)force_set_entity_type_ptr);
                                                                                  v40 = !data::enumStrToVal(
                                                                                           (const std::string *)(v2 + 7968),
                                                                                           &this->force_set_entity_type);
                                                                                  std::string::~string((void *)(v2 + 7968));
                                                                                  *(_DWORD *)(((v2 + 7968) >> 3)
                                                                                            + 0x7FFF8000) = -117901064;
                                                                                  if ( v40 )
                                                                                  {
                                                                                    *(_DWORD *)(((v2 + 8032) >> 3)
                                                                                              + 0x7FFF8000) = 0;
                                                                                    if ( *(char *)(((v2 + 8032) >> 3)
                                                                                                 + 0x7FFF8000) < 0
                                                                                      || *(_BYTE *)(((v2 + 8063) >> 3)
                                                                                                  + 0x7FFF8000) != 0
                                                                                      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 8063) >> 3) + 0x7FFF8000) )
                                                                                    {
                                                                                      __asan_report_store_n(
                                                                                        v2 + 8032,
                                                                                        32LL);
                                                                                    }
                                                                                    common::milog::MiLogStream::create(
                                                                                      (common::milog::MiLogStream *)(v2 + 8032),
                                                                                      &common::milog::MiLogDefault::default_log_obj_,
                                                                                      3u,
                                                                                      "./src/json_data_auto/ConfigEntity.cpp",
                                                                                      "fromJson",
                                                                                      8408);
                                                                                    common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                                                                                      (common::milog::MiLogStream *const)(v2 + 8032),
                                                                                      (const char (*)[40])"fromJson for: forceSetEntityType fails!");
                                                                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8032));
                                                                                    v5 = 0;
                                                                                  }
                                                                                  else
                                                                                  {
LABEL_348:
                                                                                    *(_DWORD *)(((v2 + 8096) >> 3)
                                                                                              + 0x7FFF8000) = 0;
                                                                                    *(_BYTE *)(((v2 + 832) >> 3)
                                                                                             + 0x7FFF8000) = 1;
                                                                                    std::allocator<char>::allocator(v2 + 832);
                                                                                    std::string::basic_string<std::allocator<char>>(
                                                                                      (std::string *const)(v2 + 8096),
                                                                                      "cameraAdjust",
                                                                                      (const std::allocator<char> *)(v2 + 832));
                                                                                    camera_adjust_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8096));
                                                                                    std::string::~string((void *)(v2 + 8096));
                                                                                    *(_DWORD *)(((v2 + 8096) >> 3)
                                                                                              + 0x7FFF8000) = -117901064;
                                                                                    std::allocator<char>::~allocator(v2 + 832);
                                                                                    *(_BYTE *)(((v2 + 832) >> 3)
                                                                                             + 0x7FFF8000) = -8;
                                                                                    if ( camera_adjust_ptr )
                                                                                    {
                                                                                      *(_WORD *)(((v2 + 1600) >> 3)
                                                                                               + 0x7FFF8000) = 0;
                                                                                      v41 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetSpecialCameraFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetSpecialCameraFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigGadgetSpecialCameraFactory::instance_ptr);
                                                                                      if ( *(_BYTE *)((v41 >> 3) + 0x7FFF8000) )
                                                                                        v41 = __asan_report_load8(v41);
                                                                                      v42 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v41;
                                                                                      if ( *(_BYTE *)((*(_QWORD *)v41 >> 3) + 0x7FFF8000LL) )
                                                                                        v41 = __asan_report_load8(*(_QWORD *)v41);
                                                                                      v43 = *v42;
                                                                                      if ( *(_WORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) )
                                                                                        v41 = __asan_report_store16();
                                                                                      v43(v2 + 1600, v41);
                                                                                      v44 = std::shared_ptr<data::ConfigGadgetSpecialCamera>::operator=(
                                                                                              &this->camera_adjust,
                                                                                              (std::shared_ptr<data::ConfigGadgetSpecialCamera> *)(v2 + 1600));
                                                                                      if ( std::operator==<data::ConfigGadgetSpecialCamera>(
                                                                                             v44,
                                                                                             0LL) )
                                                                                      {
                                                                                        goto LABEL_364;
                                                                                      }
                                                                                      v45 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetSpecialCamera,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetSpecialCamera,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->camera_adjust);
                                                                                      if ( *(_BYTE *)((v45 >> 3) + 0x7FFF8000) )
                                                                                        v45 = __asan_report_load8(v45);
                                                                                      v46 = *(_QWORD *)v45 + 48LL;
                                                                                      if ( *(_BYTE *)((v46 >> 3) + 0x7FFF8000) )
                                                                                        v45 = __asan_report_load8(*(_QWORD *)v45 + 48LL);
                                                                                      if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v46)(
                                                                                             v45,
                                                                                             camera_adjust_ptr) != 1 )
LABEL_364:
                                                                                        v60 = 1;
                                                                                      else
                                                                                        v60 = 0;
                                                                                      std::shared_ptr<data::ConfigGadgetSpecialCamera>::~shared_ptr((std::shared_ptr<data::ConfigGadgetSpecialCamera> *const)(v2 + 1600));
                                                                                      *(_WORD *)(((v2 + 1600) >> 3)
                                                                                               + 0x7FFF8000) = -1800;
                                                                                      if ( v60 )
                                                                                      {
                                                                                        *(_DWORD *)(((v2 + 8160) >> 3)
                                                                                                  + 0x7FFF8000) = 0;
                                                                                        if ( *(char *)(((v2 + 8160) >> 3) + 0x7FFF8000) < 0
                                                                                          || *(_BYTE *)(((v2 + 0x1FFF) >> 3) + 0x7FFF8000) != 0
                                                                                          && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 0x1FFF) >> 3) + 0x7FFF8000) )
                                                                                        {
                                                                                          __asan_report_store_n(
                                                                                            v2 + 8160,
                                                                                            32LL);
                                                                                        }
                                                                                        common::milog::MiLogStream::create(
                                                                                          (common::milog::MiLogStream *)(v2 + 8160),
                                                                                          &common::milog::MiLogDefault::default_log_obj_,
                                                                                          1u,
                                                                                          "./src/json_data_auto/ConfigEntity.cpp",
                                                                                          "fromJson",
                                                                                          8422);
                                                                                        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                                                                                          (common::milog::MiLogStream *const)(v2 + 8160),
                                                                                          (const char (*)[34])"fromJson for: cameraAdjust fails!");
                                                                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8160));
                                                                                        *(_DWORD *)(((v2 + 8160) >> 3)
                                                                                                  + 0x7FFF8000) = -117901064;
                                                                                      }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      *(_WORD *)(((v2 + 1568) >> 3)
                                                                                               + 0x7FFF8000) = 0;
                                                                                      if ( *(_WORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) )
                                                                                        __asan_report_store16();
                                                                                      common::tools::perf::make_shared<data::ConfigGadgetSpecialCamera>();
                                                                                      std::shared_ptr<data::ConfigGadgetSpecialCamera>::operator=(
                                                                                        &this->camera_adjust,
                                                                                        (std::shared_ptr<data::ConfigGadgetSpecialCamera> *)(v2 + 1568));
                                                                                      std::shared_ptr<data::ConfigGadgetSpecialCamera>::~shared_ptr((std::shared_ptr<data::ConfigGadgetSpecialCamera> *const)(v2 + 1568));
                                                                                      *(_WORD *)(((v2 + 1568) >> 3)
                                                                                               + 0x7FFF8000) = -1800;
                                                                                    }
                                                                                    *(_DWORD *)(((v2 + 8224) >> 3)
                                                                                              + 0x7FFF8000) = 0;
                                                                                    *(_BYTE *)(((v2 + 848) >> 3)
                                                                                             + 0x7FFF8000) = 1;
                                                                                    std::allocator<char>::allocator(v2 + 848);
                                                                                    std::string::basic_string<std::allocator<char>>(
                                                                                      (std::string *const)(v2 + 8224),
                                                                                      "vodIntee",
                                                                                      (const std::allocator<char> *)(v2 + 848));
                                                                                    vod_intee_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8224));
                                                                                    std::string::~string((void *)(v2 + 8224));
                                                                                    *(_DWORD *)(((v2 + 8224) >> 3)
                                                                                              + 0x7FFF8000) = -117901064;
                                                                                    std::allocator<char>::~allocator(v2 + 848);
                                                                                    *(_BYTE *)(((v2 + 848) >> 3)
                                                                                             + 0x7FFF8000) = -8;
                                                                                    if ( vod_intee_ptr
                                                                                      && !data::ConfigVODIntee::fromJson(
                                                                                            &this->vod_intee,
                                                                                            vod_intee_ptr) )
                                                                                    {
                                                                                      *(_DWORD *)(((v2 + 8288) >> 3)
                                                                                                + 0x7FFF8000) = 0;
                                                                                      if ( *(char *)(((v2 + 8288) >> 3) + 0x7FFF8000) < 0
                                                                                        || *(_BYTE *)(((v2 + 8319) >> 3) + 0x7FFF8000) != 0
                                                                                        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 8319) >> 3) + 0x7FFF8000) )
                                                                                      {
                                                                                        __asan_report_store_n(
                                                                                          v2 + 8288,
                                                                                          32LL);
                                                                                      }
                                                                                      common::milog::MiLogStream::create(
                                                                                        (common::milog::MiLogStream *)(v2 + 8288),
                                                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                                                        3u,
                                                                                        "./src/json_data_auto/ConfigEntity.cpp",
                                                                                        "fromJson",
                                                                                        8433);
                                                                                      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                                                                                        (common::milog::MiLogStream *const)(v2 + 8288),
                                                                                        (const char (*)[30])"fromJson for: vodIntee fails!");
                                                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8288));
                                                                                      v5 = 0;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                      *(_DWORD *)(((v2 + 8352) >> 3)
                                                                                                + 0x7FFF8000) = 0;
                                                                                      *(_BYTE *)(((v2 + 864) >> 3)
                                                                                               + 0x7FFF8000) = 1;
                                                                                      std::allocator<char>::allocator(v2 + 864);
                                                                                      std::string::basic_string<std::allocator<char>>(
                                                                                        (std::string *const)(v2 + 8352),
                                                                                        "vodPlayer",
                                                                                        (const std::allocator<char> *)(v2 + 864));
                                                                                      vod_player_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8352));
                                                                                      std::string::~string((void *)(v2 + 8352));
                                                                                      *(_DWORD *)(((v2 + 8352) >> 3)
                                                                                                + 0x7FFF8000) = -117901064;
                                                                                      std::allocator<char>::~allocator(v2 + 864);
                                                                                      *(_BYTE *)(((v2 + 864) >> 3)
                                                                                               + 0x7FFF8000) = -8;
                                                                                      if ( vod_player_ptr )
                                                                                      {
                                                                                        *(_WORD *)(((v2 + 1664) >> 3)
                                                                                                 + 0x7FFF8000) = 0;
                                                                                        v47 = (unsigned __int64)std::__shared_ptr_access<data::ConfigLivePlayerFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLivePlayerFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigLivePlayerFactory::instance_ptr);
                                                                                        if ( *(_BYTE *)((v47 >> 3) + 0x7FFF8000) )
                                                                                          v47 = __asan_report_load8(v47);
                                                                                        v48 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v47;
                                                                                        if ( *(_BYTE *)((*(_QWORD *)v47 >> 3) + 0x7FFF8000LL) )
                                                                                          v47 = __asan_report_load8(*(_QWORD *)v47);
                                                                                        v49 = *v48;
                                                                                        if ( *(_WORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) )
                                                                                          v47 = __asan_report_store16();
                                                                                        v49(v2 + 1664, v47);
                                                                                        v50 = std::shared_ptr<data::ConfigLivePlayer>::operator=(
                                                                                                &this->vod_player,
                                                                                                (std::shared_ptr<data::ConfigLivePlayer> *)(v2 + 1664));
                                                                                        if ( std::operator==<data::ConfigLivePlayer>(
                                                                                               v50,
                                                                                               0LL) )
                                                                                        {
                                                                                          goto LABEL_391;
                                                                                        }
                                                                                        v51 = (unsigned __int64)std::__shared_ptr_access<data::ConfigLivePlayer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLivePlayer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->vod_player);
                                                                                        if ( *(_BYTE *)((v51 >> 3) + 0x7FFF8000) )
                                                                                          v51 = __asan_report_load8(v51);
                                                                                        v52 = *(_QWORD *)v51 + 48LL;
                                                                                        if ( *(_BYTE *)((v52 >> 3) + 0x7FFF8000) )
                                                                                          v51 = __asan_report_load8(*(_QWORD *)v51 + 48LL);
                                                                                        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v52)(
                                                                                               v51,
                                                                                               vod_player_ptr) != 1 )
LABEL_391:
                                                                                          v61 = 1;
                                                                                        else
                                                                                          v61 = 0;
                                                                                        std::shared_ptr<data::ConfigLivePlayer>::~shared_ptr((std::shared_ptr<data::ConfigLivePlayer> *const)(v2 + 1664));
                                                                                        *(_WORD *)(((v2 + 1664) >> 3)
                                                                                                 + 0x7FFF8000) = -1800;
                                                                                        if ( v61 )
                                                                                        {
                                                                                          *(_DWORD *)(((v2 + 8416) >> 3) + 0x7FFF8000) = 0;
                                                                                          if ( *(char *)(((v2 + 8416) >> 3) + 0x7FFF8000) < 0
                                                                                            || *(_BYTE *)(((v2 + 8447) >> 3) + 0x7FFF8000) != 0
                                                                                            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 8447) >> 3) + 0x7FFF8000) )
                                                                                          {
                                                                                            __asan_report_store_n(
                                                                                              v2 + 8416,
                                                                                              32LL);
                                                                                          }
                                                                                          common::milog::MiLogStream::create(
                                                                                            (common::milog::MiLogStream *)(v2 + 8416),
                                                                                            &common::milog::MiLogDefault::default_log_obj_,
                                                                                            1u,
                                                                                            "./src/json_data_auto/ConfigEntity.cpp",
                                                                                            "fromJson",
                                                                                            8447);
                                                                                          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                                                                            (common::milog::MiLogStream *const)(v2 + 8416),
                                                                                            (const char (*)[31])"fromJson for: vodPlayer fails!");
                                                                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8416));
                                                                                          *(_DWORD *)(((v2 + 8416) >> 3) + 0x7FFF8000) = -117901064;
                                                                                        }
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        *(_WORD *)(((v2 + 1632) >> 3)
                                                                                                 + 0x7FFF8000) = 0;
                                                                                        if ( *(_WORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) )
                                                                                          __asan_report_store16();
                                                                                        common::tools::perf::make_shared<data::ConfigLivePlayer>();
                                                                                        std::shared_ptr<data::ConfigLivePlayer>::operator=(
                                                                                          &this->vod_player,
                                                                                          (std::shared_ptr<data::ConfigLivePlayer> *)(v2 + 1632));
                                                                                        std::shared_ptr<data::ConfigLivePlayer>::~shared_ptr((std::shared_ptr<data::ConfigLivePlayer> *const)(v2 + 1632));
                                                                                        *(_WORD *)(((v2 + 1632) >> 3)
                                                                                                 + 0x7FFF8000) = -1800;
                                                                                      }
                                                                                      *(_DWORD *)(((v2 + 8480) >> 3)
                                                                                                + 0x7FFF8000) = 0;
                                                                                      *(_BYTE *)(((v2 + 880) >> 3)
                                                                                               + 0x7FFF8000) = 1;
                                                                                      std::allocator<char>::allocator(v2 + 880);
                                                                                      std::string::basic_string<std::allocator<char>>(
                                                                                        (std::string *const)(v2 + 8480),
                                                                                        "cameraBox",
                                                                                        (const std::allocator<char> *)(v2 + 880));
                                                                                      camera_box_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8480));
                                                                                      std::string::~string((void *)(v2 + 8480));
                                                                                      *(_DWORD *)(((v2 + 8480) >> 3)
                                                                                                + 0x7FFF8000) = -117901064;
                                                                                      std::allocator<char>::~allocator(v2 + 880);
                                                                                      *(_BYTE *)(((v2 + 880) >> 3)
                                                                                               + 0x7FFF8000) = -8;
                                                                                      if ( camera_box_ptr
                                                                                        && !data::ConfigGadgetCameraBox::fromJson(
                                                                                              &this->camera_box,
                                                                                              camera_box_ptr) )
                                                                                      {
                                                                                        *(_DWORD *)(((v2 + 8544) >> 3)
                                                                                                  + 0x7FFF8000) = 0;
                                                                                        if ( *(char *)(((v2 + 8544) >> 3) + 0x7FFF8000) < 0
                                                                                          || *(_BYTE *)(((v2 + 8575) >> 3) + 0x7FFF8000) != 0
                                                                                          && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 8575) >> 3) + 0x7FFF8000) )
                                                                                        {
                                                                                          __asan_report_store_n(
                                                                                            v2 + 8544,
                                                                                            32LL);
                                                                                        }
                                                                                        common::milog::MiLogStream::create(
                                                                                          (common::milog::MiLogStream *)(v2 + 8544),
                                                                                          &common::milog::MiLogDefault::default_log_obj_,
                                                                                          3u,
                                                                                          "./src/json_data_auto/ConfigEntity.cpp",
                                                                                          "fromJson",
                                                                                          8458);
                                                                                        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                                                                          (common::milog::MiLogStream *const)(v2 + 8544),
                                                                                          (const char (*)[31])"fromJson for: cameraBox fails!");
                                                                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8544));
                                                                                        v5 = 0;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        *(_DWORD *)(((v2 + 8608) >> 3)
                                                                                                  + 0x7FFF8000) = 0;
                                                                                        *(_BYTE *)(((v2 + 896) >> 3)
                                                                                                 + 0x7FFF8000) = 1;
                                                                                        std::allocator<char>::allocator(v2 + 896);
                                                                                        std::string::basic_string<std::allocator<char>>(
                                                                                          (std::string *const)(v2 + 8608),
                                                                                          "openWatcher",
                                                                                          (const std::allocator<char> *)(v2 + 896));
                                                                                        open_watcher_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8608));
                                                                                        std::string::~string((void *)(v2 + 8608));
                                                                                        *(_DWORD *)(((v2 + 8608) >> 3)
                                                                                                  + 0x7FFF8000) = -117901064;
                                                                                        std::allocator<char>::~allocator(v2 + 896);
                                                                                        *(_BYTE *)(((v2 + 896) >> 3)
                                                                                                 + 0x7FFF8000) = -8;
                                                                                        if ( open_watcher_ptr
                                                                                          && !fromJson<bool>(
                                                                                                open_watcher_ptr,
                                                                                                &this->open_watcher) )
                                                                                        {
                                                                                          *(_DWORD *)(((v2 + 8672) >> 3) + 0x7FFF8000) = 0;
                                                                                          if ( *(char *)(((v2 + 8672) >> 3) + 0x7FFF8000) < 0
                                                                                            || *(_BYTE *)(((v2 + 8703) >> 3) + 0x7FFF8000) != 0
                                                                                            && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 8703) >> 3) + 0x7FFF8000) )
                                                                                          {
                                                                                            __asan_report_store_n(
                                                                                              v2 + 8672,
                                                                                              32LL);
                                                                                          }
                                                                                          common::milog::MiLogStream::create(
                                                                                            (common::milog::MiLogStream *)(v2 + 8672),
                                                                                            &common::milog::MiLogDefault::default_log_obj_,
                                                                                            3u,
                                                                                            "./src/json_data_auto/ConfigEntity.cpp",
                                                                                            "fromJson",
                                                                                            8470);
                                                                                          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                                                                            (common::milog::MiLogStream *const)(v2 + 8672),
                                                                                            (const char (*)[33])"fromJson for: openWatcher fails!");
                                                                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8672));
                                                                                          v5 = 0;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          *(_DWORD *)(((v2 + 8736) >> 3) + 0x7FFF8000) = 0;
                                                                                          *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) = 1;
                                                                                          std::allocator<char>::allocator(v2 + 912);
                                                                                          std::string::basic_string<std::allocator<char>>(
                                                                                            (std::string *const)(v2 + 8736),
                                                                                            "rayTag",
                                                                                            (const std::allocator<char> *)(v2 + 912));
                                                                                          ray_tag_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8736));
                                                                                          std::string::~string((void *)(v2 + 8736));
                                                                                          *(_DWORD *)(((v2 + 8736) >> 3) + 0x7FFF8000) = -117901064;
                                                                                          std::allocator<char>::~allocator(v2 + 912);
                                                                                          *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) = -8;
                                                                                          if ( ray_tag_ptr
                                                                                            && !fromJson<unsigned int>(
                                                                                                  ray_tag_ptr,
                                                                                                  &this->ray_tag) )
                                                                                          {
                                                                                            *(_DWORD *)(((v2 + 8800) >> 3) + 0x7FFF8000) = 0;
                                                                                            if ( *(char *)(((v2 + 8800) >> 3) + 0x7FFF8000) < 0
                                                                                              || *(_BYTE *)(((v2 + 8831) >> 3) + 0x7FFF8000) != 0
                                                                                              && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 8831) >> 3) + 0x7FFF8000) )
                                                                                            {
                                                                                              __asan_report_store_n(
                                                                                                v2 + 8800,
                                                                                                32LL);
                                                                                            }
                                                                                            common::milog::MiLogStream::create(
                                                                                              (common::milog::MiLogStream *)(v2 + 8800),
                                                                                              &common::milog::MiLogDefault::default_log_obj_,
                                                                                              3u,
                                                                                              "./src/json_data_auto/ConfigEntity.cpp",
                                                                                              "fromJson",
                                                                                              8482);
                                                                                            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                                                                                              (common::milog::MiLogStream *const)(v2 + 8800),
                                                                                              (const char (*)[28])"fromJson for: rayTag fails!");
                                                                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8800));
                                                                                            v5 = 0;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            *(_DWORD *)(((v2 + 8864) >> 3) + 0x7FFF8000) = 0;
                                                                                            *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = 1;
                                                                                            std::allocator<char>::allocator(v2 + 928);
                                                                                            std::string::basic_string<std::allocator<char>>(
                                                                                              (std::string *const)(v2 + 8864),
                                                                                              "hasRayTag",
                                                                                              (const std::allocator<char> *)(v2 + 928));
                                                                                            has_ray_tag_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8864));
                                                                                            std::string::~string((void *)(v2 + 8864));
                                                                                            *(_DWORD *)(((v2 + 8864) >> 3) + 0x7FFF8000) = -117901064;
                                                                                            std::allocator<char>::~allocator(v2 + 928);
                                                                                            *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = -8;
                                                                                            if ( has_ray_tag_ptr
                                                                                              && !fromJson<bool>(
                                                                                                    has_ray_tag_ptr,
                                                                                                    &this->has_ray_tag) )
                                                                                            {
                                                                                              *(_DWORD *)(((v2 + 8928) >> 3) + 0x7FFF8000) = 0;
                                                                                              if ( *(char *)(((v2 + 8928) >> 3) + 0x7FFF8000) < 0
                                                                                                || *(_BYTE *)(((v2 + 8959) >> 3) + 0x7FFF8000) != 0
                                                                                                && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 8959) >> 3) + 0x7FFF8000) )
                                                                                              {
                                                                                                __asan_report_store_n(
                                                                                                  v2 + 8928,
                                                                                                  32LL);
                                                                                              }
                                                                                              common::milog::MiLogStream::create(
                                                                                                (common::milog::MiLogStream *)(v2 + 8928),
                                                                                                &common::milog::MiLogDefault::default_log_obj_,
                                                                                                3u,
                                                                                                "./src/json_data_auto/ConfigEntity.cpp",
                                                                                                "fromJson",
                                                                                                8494);
                                                                                              common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                                                                                                (common::milog::MiLogStream *const)(v2 + 8928),
                                                                                                (const char (*)[31])"fromJson for: hasRayTag fails!");
                                                                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 8928));
                                                                                              v5 = 0;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              *(_DWORD *)(((v2 + 8992) >> 3) + 0x7FFF8000) = 0;
                                                                                              *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) = 1;
                                                                                              std::allocator<char>::allocator(v2 + 944);
                                                                                              std::string::basic_string<std::allocator<char>>(
                                                                                                (std::string *const)(v2 + 8992),
                                                                                                "useRetreatType",
                                                                                                (const std::allocator<char> *)(v2 + 944));
                                                                                              use_retreat_type_ptr = jsonValueFind(jval, (const std::string *)(v2 + 8992));
                                                                                              std::string::~string((void *)(v2 + 8992));
                                                                                              *(_DWORD *)(((v2 + 8992) >> 3) + 0x7FFF8000) = -117901064;
                                                                                              std::allocator<char>::~allocator(v2 + 944);
                                                                                              *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) = -8;
                                                                                              if ( use_retreat_type_ptr
                                                                                                && !fromJson<bool>(use_retreat_type_ptr, &this->use_retreat_type) )
                                                                                              {
                                                                                                *(_DWORD *)(((v2 + 9056) >> 3) + 0x7FFF8000) = 0;
                                                                                                if ( *(char *)(((v2 + 9056) >> 3) + 0x7FFF8000) < 0 || *(_BYTE *)(((v2 + 9087) >> 3) + 0x7FFF8000) != 0 && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 9087) >> 3) + 0x7FFF8000) )
                                                                                                  __asan_report_store_n(
                                                                                                    v2 + 9056,
                                                                                                    32LL);
                                                                                                common::milog::MiLogStream::create(
                                                                                                  (common::milog::MiLogStream *)(v2 + 9056),
                                                                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                                                                  3u,
                                                                                                  "./src/json_data_auto/ConfigEntity.cpp",
                                                                                                  "fromJson",
                                                                                                  8506);
                                                                                                common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                                                                                  (common::milog::MiLogStream *const)(v2 + 9056),
                                                                                                  (const char (*)[36])"fromJson for: useRetreatType fails!");
                                                                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 9056));
                                                                                                v5 = 0;
                                                                                              }
                                                                                              else
                                                                                              {
                                                                                                *(_DWORD *)(((v2 + 9120) >> 3) + 0x7FFF8000) = 0;
                                                                                                *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = 1;
                                                                                                std::allocator<char>::allocator(v2 + 960);
                                                                                                std::string::basic_string<std::allocator<char>>(
                                                                                                  (std::string *const)(v2 + 9120),
                                                                                                  "dontDestroyByPerform",
                                                                                                  (const std::allocator<char> *)(v2 + 960));
                                                                                                dont_destroy_by_perform_ptr = jsonValueFind(jval, (const std::string *)(v2 + 9120));
                                                                                                std::string::~string((void *)(v2 + 9120));
                                                                                                *(_DWORD *)(((v2 + 9120) >> 3) + 0x7FFF8000) = -117901064;
                                                                                                std::allocator<char>::~allocator(v2 + 960);
                                                                                                *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = -8;
                                                                                                if ( dont_destroy_by_perform_ptr && !fromJson<bool>(dont_destroy_by_perform_ptr, &this->dont_destroy_by_perform) )
                                                                                                {
                                                                                                  *(_DWORD *)(((v2 + 9184) >> 3) + 0x7FFF8000) = 0;
                                                                                                  if ( *(char *)(((v2 + 9184) >> 3) + 0x7FFF8000) < 0 || *(_BYTE *)(((v2 + 9215) >> 3) + 0x7FFF8000) != 0 && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 9215) >> 3) + 0x7FFF8000) )
                                                                                                    __asan_report_store_n(v2 + 9184, 32LL);
                                                                                                  common::milog::MiLogStream::create(
                                                                                                    (common::milog::MiLogStream *)(v2 + 9184),
                                                                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                                                                    3u,
                                                                                                    "./src/json_data_auto/ConfigEntity.cpp",
                                                                                                    "fromJson",
                                                                                                    8518);
                                                                                                  common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                                                                    (common::milog::MiLogStream *const)(v2 + 9184),
                                                                                                    (const char (*)[42])"fromJson for: dontDestroyByPerform fails!");
                                                                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 9184));
                                                                                                  v5 = 0;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  *(_DWORD *)(((v2 + 9248) >> 3) + 0x7FFF8000) = 0;
                                                                                                  *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) = 1;
                                                                                                  std::allocator<char>::allocator(v2 + 976);
                                                                                                  std::string::basic_string<std::allocator<char>>(
                                                                                                    (std::string *const)(v2 + 9248),
                                                                                                    "correctOwner",
                                                                                                    (const std::allocator<char> *)(v2 + 976));
                                                                                                  p_correct_owner = (bool *)(v2 + 9248);
                                                                                                  correct_owner_ptr = jsonValueFind(jval, (const std::string *)(v2 + 9248));
                                                                                                  std::string::~string((void *)(v2 + 9248));
                                                                                                  *(_DWORD *)(((v2 + 9248) >> 3) + 0x7FFF8000) = -117901064;
                                                                                                  std::allocator<char>::~allocator(v2 + 976);
                                                                                                  *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) = -8;
                                                                                                  if ( correct_owner_ptr && (p_correct_owner = &this->correct_owner, !fromJson<bool>(correct_owner_ptr, &this->correct_owner)) )
                                                                                                  {
                                                                                                    *(_DWORD *)(((v2 + 9312) >> 3) + 0x7FFF8000) = 0;
                                                                                                    if ( *(char *)(((v2 + 9312) >> 3) + 0x7FFF8000) < 0 || *(_BYTE *)(((v2 + 9343) >> 3) + 0x7FFF8000) != 0 && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 9343) >> 3) + 0x7FFF8000) )
                                                                                                      __asan_report_store_n(v2 + 9312, 32LL);
                                                                                                    common::milog::MiLogStream::create((common::milog::MiLogStream *)(v2 + 9312), &common::milog::MiLogDefault::default_log_obj_, 3u, "./src/json_data_auto/ConfigEntity.cpp", "fromJson", 8530);
                                                                                                    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>((common::milog::MiLogStream *const)(v2 + 9312), (const char (*)[34])"fromJson for: correctOwner fails!");
                                                                                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 9312));
                                                                                                    v5 = 0;
                                                                                                  }
                                                                                                  else
                                                                                                  {
                                                                                                    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                                                                                                      __asan_report_store1(&this->is_json_loaded, p_correct_owner, &this->is_json_loaded);
                                                                                                    this->is_json_loaded = 1;
                                                                                                    v5 = 1;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v54 = v5;
  if ( v122 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80CC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 212) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80E0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80E8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80F0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8100) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8108) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8110) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8118) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8120) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8128) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8130) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8138) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8140) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8148) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8150) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8158) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8160) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8168) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8170) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8178) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8180) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8188) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8190) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8198) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81A0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81A8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81B0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81B8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81C0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81C8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81D0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81D8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81E0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81E8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81F0) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81F8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8200) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8208) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8210) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8218) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8220) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8228) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8230) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8238) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8240) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8248) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8250) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8258) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8260) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8268) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8270) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8278) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8280) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8288) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8290) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8298) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82A0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF82A8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82B0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF82B8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82C0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF82C8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82D0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF82D8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82E0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF82E8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF82F0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF82F8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8300) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8308) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8310) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8318) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8320) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8328) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8330) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8338) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8340) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8348) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8350) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8358) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8360) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8368) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8370) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8378) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8380) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8388) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8390) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8398) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF83A0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83A8) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF83B0) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83B8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83C0) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83C8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83D0) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83D8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83E0) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF83E8) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83F0) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF83F8) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8400) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8408) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8410) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8418) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8420) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8428) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8430) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8438) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8440) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8448) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8450) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8458) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8460) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8468) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8470) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8478) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8480) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8488) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8490) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_8(v2, 9376LL, v122);
  }
  return v54;
};

// Line 8537: range 000000000E671F8E-000000000E672ADA
data::ConfigGadgetPtr __cdecl data::ConfigGadget::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigGadgetPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:8550 96 16 8 ptr:8556 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:8544 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigGadget::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        8547);
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[40])"fromJson for: ConfigGadget $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          8553);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)jval, 0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigGadget,data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 96));
        if ( std::operator==<data::ConfigGadget>((const std::shared_ptr<data::ConfigGadget> *)(v2 + 96), 0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            8559);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[31])"cast to ConfigGadgetPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)jval, 0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              8564);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)jval, 0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 624, v1, v12);
            *(_BYTE *)(v10 + 624) = 1;
            std::shared_ptr<data::ConfigGadget>::shared_ptr(
              (std::shared_ptr<data::ConfigGadget> *const)jval,
              (std::shared_ptr<data::ConfigGadget> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      8541);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[45])"jsonValueFind for: ConfigGadget $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigGadget>::shared_ptr((std::shared_ptr<data::ConfigGadget> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 8572: range 000000000E672ADC-000000000E673D50
int32_t __cdecl data::ConfigGadget::getHashValue(const data::ConfigGadget *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  __int64 v11; // rsi
  __int64 v12; // rdx
  __int64 v13; // rsi
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 v16; // rdx
  __int64 v17; // rsi
  __int64 v18; // rdx
  __int64 v19; // rsi
  __int64 v20; // rdx
  __int64 v21; // rsi
  __int64 v22; // rdx
  __int64 v23; // rsi
  __int64 v24; // rdx
  int32_t v25; // eax
  int32_t VecHashValue; // eax
  int32_t v27; // eax
  int32_t v28; // eax
  unsigned __int64 v29; // rax
  unsigned __int64 v30; // rdx
  int32_t v31; // eax
  unsigned __int64 v32; // rax
  unsigned __int64 v33; // rdx
  int32_t v34; // eax
  int32_t v35; // eax
  int32_t v36; // eax
  unsigned __int64 v37; // rax
  unsigned __int64 v38; // rdx
  int32_t v39; // eax
  int32_t v40; // eax
  int32_t MapHashValue; // eax
  unsigned __int64 v42; // rax
  unsigned __int64 v43; // rdx
  int32_t v44; // eax
  int32_t v45; // eax
  int32_t v46; // eax
  int32_t v47; // eax
  int32_t v48; // eax
  int32_t v49; // eax
  int32_t v50; // eax
  int32_t v51; // eax
  __int64 v52; // rsi
  __int64 v53; // rdx
  int32_t v54; // eax
  unsigned __int64 v55; // rax
  unsigned __int64 v56; // rdx
  int32_t v57; // eax
  unsigned __int64 v58; // rax
  unsigned __int64 v59; // rdx
  int32_t v60; // eax
  unsigned __int64 v61; // rax
  unsigned __int64 v62; // rdx
  int32_t v63; // eax
  int32_t v64; // eax
  int32_t ArrHashValue; // eax
  __int64 v66; // rsi
  __int64 v67; // rdx
  __int64 v68; // rsi
  __int64 v69; // rdx
  int32_t v70; // eax
  int32_t v71; // eax
  unsigned __int64 v72; // rax
  unsigned __int64 v73; // rdx
  int32_t v74; // eax
  unsigned __int64 v75; // rax
  unsigned __int64 v76; // rdx
  int32_t v77; // eax
  unsigned __int64 v78; // rax
  unsigned __int64 v79; // rdx
  int32_t v80; // eax
  int32_t v81; // eax
  unsigned __int64 v82; // rax
  unsigned __int64 v83; // rdx
  int32_t v84; // eax
  int32_t v85; // eax
  __int64 v86; // rsi
  __int64 v87; // rdx
  __int64 v88; // rsi
  __int64 v89; // rdx
  __int64 v90; // rsi
  __int64 v91; // rdx
  int32_t result; // eax
  char v93[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v93;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:8573";
  *(_QWORD *)(v2 + 16) = data::ConfigGadget::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigEntity::getHashValue((const data::ConfigEntity *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = ((_BYTE)this + 113) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->has_equip >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->has_equip >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->has_equip, v7, v8);
  common::tools::HashUtils::appendHash(this->has_equip, (int32_t *)(v2 + 32));
  v9 = ((_BYTE)this + 114) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&this->has_audio >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->has_audio >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&this->has_audio, v9, v10);
  common::tools::HashUtils::appendHash(this->has_audio, (int32_t *)(v2 + 32));
  v11 = ((_BYTE)this + 115) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&this->has_model >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&this->has_model >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&this->has_model, v11, v12);
  common::tools::HashUtils::appendHash(this->has_model, (int32_t *)(v2 + 32));
  v13 = ((_BYTE)this + 116) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&this->has_ability >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&this->has_ability >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&this->has_ability, v13, v14);
  common::tools::HashUtils::appendHash(this->has_ability, (int32_t *)(v2 + 32));
  v15 = ((_BYTE)this + 117) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&this->has_dither >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&this->has_dither >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&this->has_dither, v15, v16);
  common::tools::HashUtils::appendHash(this->has_dither, (int32_t *)(v2 + 32));
  v17 = ((_BYTE)this + 118) & 7;
  v18 = (*(_BYTE *)(((unsigned __int64)&this->has_follow_wind_zone_rotation >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v17 >= *(_BYTE *)(((unsigned __int64)&this->has_follow_wind_zone_rotation >> 3) + 0x7FFF8000));
  if ( (_BYTE)v18 )
    __asan_report_load1(&this->has_follow_wind_zone_rotation, v17, v18);
  common::tools::HashUtils::appendHash(this->has_follow_wind_zone_rotation, (int32_t *)(v2 + 32));
  v19 = ((_BYTE)this + 119) & 7;
  v20 = (*(_BYTE *)(((unsigned __int64)&this->force_dont_use_update_rigidbody >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v19 >= *(_BYTE *)(((unsigned __int64)&this->force_dont_use_update_rigidbody >> 3) + 0x7FFF8000));
  if ( (_BYTE)v20 )
    __asan_report_load1(&this->force_dont_use_update_rigidbody, v19, v20);
  common::tools::HashUtils::appendHash(this->force_dont_use_update_rigidbody, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->has_connect_trigger >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->has_connect_trigger, v2 + 32, &this->has_connect_trigger);
  common::tools::HashUtils::appendHash(this->has_connect_trigger, (int32_t *)(v2 + 32));
  v21 = ((_BYTE)this + 121) & 7;
  v22 = (*(_BYTE *)(((unsigned __int64)&this->can_be_created_on_platform >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v21 >= *(_BYTE *)(((unsigned __int64)&this->can_be_created_on_platform >> 3) + 0x7FFF8000));
  if ( (_BYTE)v22 )
    __asan_report_load1(&this->can_be_created_on_platform, v21, v22);
  common::tools::HashUtils::appendHash(this->can_be_created_on_platform, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->connect_trigger_priority >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->connect_trigger_priority >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&this->connect_trigger_priority);
  }
  common::tools::HashUtils::appendHash(this->connect_trigger_priority, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->ignore_child_scene_prop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->ignore_child_scene_prop, v2 + 32, &this->ignore_child_scene_prop);
  common::tools::HashUtils::appendHash(this->ignore_child_scene_prop, (int32_t *)(v2 + 32));
  v23 = ((_BYTE)this - 127) & 7;
  v24 = (*(_BYTE *)(((unsigned __int64)&this->move_refresh_ground_force_up >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v23 >= *(_BYTE *)(((unsigned __int64)&this->move_refresh_ground_force_up >> 3) + 0x7FFF8000));
  if ( (_BYTE)v24 )
    __asan_report_load1(&this->move_refresh_ground_force_up, v23, v24);
  common::tools::HashUtils::appendHash(this->move_refresh_ground_force_up, (int32_t *)(v2 + 32));
  v25 = data::ConfigCombat::getHashValue(&this->combat);
  common::tools::HashUtils::appendHash(v25, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->combat_template, (int32_t *)(v2 + 32));
  VecHashValue = data::getVecHashValue(&this->abilities);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  v27 = data::ConfigTrigger::getHashValue(&this->field);
  common::tools::HashUtils::appendHash(v27, (int32_t *)(v2 + 32));
  v28 = data::ConfigTimer::getHashValue(&this->timer);
  common::tools::HashUtils::appendHash(v28, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigMove>(0LL, &this->move) )
  {
    v29 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMove,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMove,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->move);
    if ( *(_BYTE *)((v29 >> 3) + 0x7FFF8000) )
      v29 = __asan_report_load8(v29);
    v30 = *(_QWORD *)v29 + 56LL;
    if ( *(_BYTE *)((v30 >> 3) + 0x7FFF8000) )
      v29 = __asan_report_load8(*(_QWORD *)v29 + 56LL);
    v31 = (*(__int64 (__fastcall **)(unsigned __int64))v30)(v29);
    common::tools::HashUtils::appendHash(v31, (int32_t *)(v2 + 32));
  }
  if ( std::operator!=<data::ConfigGadgetPattern>(0LL, &this->gadget) )
  {
    v32 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetPattern,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetPattern,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->gadget);
    if ( *(_BYTE *)((v32 >> 3) + 0x7FFF8000) )
      v32 = __asan_report_load8(v32);
    v33 = *(_QWORD *)v32 + 56LL;
    if ( *(_BYTE *)((v33 >> 3) + 0x7FFF8000) )
      v32 = __asan_report_load8(*(_QWORD *)v32 + 56LL);
    v34 = (*(__int64 (__fastcall **)(unsigned __int64))v33)(v32);
    common::tools::HashUtils::appendHash(v34, (int32_t *)(v2 + 32));
  }
  v35 = data::ConfigEquipment::getHashValue(&this->equipment);
  common::tools::HashUtils::appendHash(v35, (int32_t *)(v2 + 32));
  v36 = data::ConfigNavigation::getHashValue(&this->navigation);
  common::tools::HashUtils::appendHash(v36, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigGadgetUI>(0LL, &this->ui_interact) )
  {
    v37 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetUI,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->ui_interact);
    if ( *(_BYTE *)((v37 >> 3) + 0x7FFF8000) )
      v37 = __asan_report_load8(v37);
    v38 = *(_QWORD *)v37 + 56LL;
    if ( *(_BYTE *)((v38 >> 3) + 0x7FFF8000) )
      v37 = __asan_report_load8(*(_QWORD *)v37 + 56LL);
    v39 = (*(__int64 (__fastcall **)(unsigned __int64))v38)(v37);
    common::tools::HashUtils::appendHash(v39, (int32_t *)(v2 + 32));
  }
  v40 = data::ConfigGadgetMisc::getHashValue(&this->misc);
  common::tools::HashUtils::appendHash(v40, (int32_t *)(v2 + 32));
  MapHashValue = data::getMapHashValue(&this->state_layers);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigGadgetAudio>(0LL, &this->audio) )
  {
    v42 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetAudio,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetAudio,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->audio);
    if ( *(_BYTE *)((v42 >> 3) + 0x7FFF8000) )
      v42 = __asan_report_load8(v42);
    v43 = *(_QWORD *)v42 + 56LL;
    if ( *(_BYTE *)((v43 >> 3) + 0x7FFF8000) )
      v42 = __asan_report_load8(*(_QWORD *)v42 + 56LL);
    v44 = (*(__int64 (__fastcall **)(unsigned __int64))v43)(v42);
    common::tools::HashUtils::appendHash(v44, (int32_t *)(v2 + 32));
  }
  v45 = data::ConfigAIBeta::getHashValue(&this->aibeta);
  common::tools::HashUtils::appendHash(v45, (int32_t *)(v2 + 32));
  v46 = data::ConfigWeather::getHashValue(&this->weather);
  common::tools::HashUtils::appendHash(v46, (int32_t *)(v2 + 32));
  v47 = data::ConfigWall::getHashValue(&this->wall);
  common::tools::HashUtils::appendHash(v47, (int32_t *)(v2 + 32));
  v48 = data::ConfigFace::getHashValue(&this->face);
  common::tools::HashUtils::appendHash(v48, (int32_t *)(v2 + 32));
  v49 = data::ConfigPartController::getHashValue(&this->part_control);
  common::tools::HashUtils::appendHash(v49, (int32_t *)(v2 + 32));
  v50 = data::ConfigPaimon::getHashValue(&this->paimon);
  common::tools::HashUtils::appendHash(v50, (int32_t *)(v2 + 32));
  v51 = data::ConfigCharacterRendering::getHashValue(&this->character_rendering);
  common::tools::HashUtils::appendHash(v51, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->radar_hint >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->radar_hint, v2 + 32, &this->radar_hint);
  common::tools::HashUtils::appendHash(this->radar_hint, (int32_t *)(v2 + 32));
  v52 = ((_BYTE)this + 105) & 7;
  v53 = (*(_BYTE *)(((unsigned __int64)&this->keep_modifier_out_sight >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v52 >= *(_BYTE *)(((unsigned __int64)&this->keep_modifier_out_sight >> 3) + 0x7FFF8000));
  if ( (_BYTE)v53 )
    __asan_report_load1(&this->keep_modifier_out_sight, v52, v53);
  common::tools::HashUtils::appendHash(this->keep_modifier_out_sight, (int32_t *)(v2 + 32));
  v54 = data::ConfigGadgetAction::getHashValue(&this->gadget_action);
  common::tools::HashUtils::appendHash(v54, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigGadgetTurn>(0LL, &this->gadget_turn) )
  {
    v55 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->gadget_turn);
    if ( *(_BYTE *)((v55 >> 3) + 0x7FFF8000) )
      v55 = __asan_report_load8(v55);
    v56 = *(_QWORD *)v55 + 56LL;
    if ( *(_BYTE *)((v56 >> 3) + 0x7FFF8000) )
      v55 = __asan_report_load8(*(_QWORD *)v55 + 56LL);
    v57 = (*(__int64 (__fastcall **)(unsigned __int64))v56)(v55);
    common::tools::HashUtils::appendHash(v57, (int32_t *)(v2 + 32));
  }
  if ( std::operator!=<data::ConfigGlobalValueTurn>(0LL, &this->gv_turn) )
  {
    v58 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGlobalValueTurn,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->gv_turn);
    if ( *(_BYTE *)((v58 >> 3) + 0x7FFF8000) )
      v58 = __asan_report_load8(v58);
    v59 = *(_QWORD *)v58 + 56LL;
    if ( *(_BYTE *)((v59 >> 3) + 0x7FFF8000) )
      v58 = __asan_report_load8(*(_QWORD *)v58 + 56LL);
    v60 = (*(__int64 (__fastcall **)(unsigned __int64))v59)(v58);
    common::tools::HashUtils::appendHash(v60, (int32_t *)(v2 + 32));
  }
  if ( std::operator!=<data::ConfigBillboard>(0LL, &this->billboard) )
  {
    v61 = (unsigned __int64)std::__shared_ptr_access<data::ConfigBillboard,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBillboard,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->billboard);
    if ( *(_BYTE *)((v61 >> 3) + 0x7FFF8000) )
      v61 = __asan_report_load8(v61);
    v62 = *(_QWORD *)v61 + 56LL;
    if ( *(_BYTE *)((v62 >> 3) + 0x7FFF8000) )
      v61 = __asan_report_load8(*(_QWORD *)v61 + 56LL);
    v63 = (*(__int64 (__fastcall **)(unsigned __int64))v62)(v61);
    common::tools::HashUtils::appendHash(v63, (int32_t *)(v2 + 32));
  }
  v64 = data::ConfigIntee::getHashValue(&this->intee);
  common::tools::HashUtils::appendHash(v64, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->bind_emotions);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->projector >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->projector, v2 + 32, &this->projector);
  common::tools::HashUtils::appendHash(this->projector, (int32_t *)(v2 + 32));
  v66 = ((_BYTE)this + 105) & 7;
  v67 = (*(_BYTE *)(((unsigned __int64)&this->low_priority_intee >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v66 >= *(_BYTE *)(((unsigned __int64)&this->low_priority_intee >> 3) + 0x7FFF8000));
  if ( (_BYTE)v67 )
    __asan_report_load1(&this->low_priority_intee, v66, v67);
  common::tools::HashUtils::appendHash(this->low_priority_intee, (int32_t *)(v2 + 32));
  v68 = ((_BYTE)this + 106) & 7;
  v69 = (*(_BYTE *)(((unsigned __int64)&this->can_remove_by_client >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v68 >= *(_BYTE *)(((unsigned __int64)&this->can_remove_by_client >> 3) + 0x7FFF8000));
  if ( (_BYTE)v69 )
    __asan_report_load1(&this->can_remove_by_client, v68, v69);
  common::tools::HashUtils::appendHash(this->can_remove_by_client, (int32_t *)(v2 + 32));
  v70 = data::getArrHashValue(&this->tags);
  common::tools::HashUtils::appendHash(v70, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->can_be_triggered_by_avatar_ray >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->can_be_triggered_by_avatar_ray, v2 + 32, &this->can_be_triggered_by_avatar_ray);
  common::tools::HashUtils::appendHash(this->can_be_triggered_by_avatar_ray, (int32_t *)(v2 + 32));
  v71 = data::ConfigVehicle::getHashValue(&this->vehicle);
  common::tools::HashUtils::appendHash(v71, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigDangerZone>(0LL, &this->dangerzone) )
  {
    v72 = (unsigned __int64)std::__shared_ptr_access<data::ConfigDangerZone,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigDangerZone,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->dangerzone);
    if ( *(_BYTE *)((v72 >> 3) + 0x7FFF8000) )
      v72 = __asan_report_load8(v72);
    v73 = *(_QWORD *)v72 + 56LL;
    if ( *(_BYTE *)((v73 >> 3) + 0x7FFF8000) )
      v72 = __asan_report_load8(*(_QWORD *)v72 + 56LL);
    v74 = (*(__int64 (__fastcall **)(unsigned __int64))v73)(v72);
    common::tools::HashUtils::appendHash(v74, (int32_t *)(v2 + 32));
  }
  if ( std::operator!=<data::ConfigFishingZone>(0LL, &this->fishing_zone) )
  {
    v75 = (unsigned __int64)std::__shared_ptr_access<data::ConfigFishingZone,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigFishingZone,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->fishing_zone);
    if ( *(_BYTE *)((v75 >> 3) + 0x7FFF8000) )
      v75 = __asan_report_load8(v75);
    v76 = *(_QWORD *)v75 + 56LL;
    if ( *(_BYTE *)((v76 >> 3) + 0x7FFF8000) )
      v75 = __asan_report_load8(*(_QWORD *)v75 + 56LL);
    v77 = (*(__int64 (__fastcall **)(unsigned __int64))v76)(v75);
    common::tools::HashUtils::appendHash(v77, (int32_t *)(v2 + 32));
  }
  if ( *(_BYTE *)(((unsigned __int64)&this->force_set_entity_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_set_entity_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->force_set_entity_type);
  }
  common::tools::HashUtils::appendHash(this->force_set_entity_type, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigGadgetSpecialCamera>(0LL, &this->camera_adjust) )
  {
    v78 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetSpecialCamera,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetSpecialCamera,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->camera_adjust);
    if ( *(_BYTE *)((v78 >> 3) + 0x7FFF8000) )
      v78 = __asan_report_load8(v78);
    v79 = *(_QWORD *)v78 + 56LL;
    if ( *(_BYTE *)((v79 >> 3) + 0x7FFF8000) )
      v78 = __asan_report_load8(*(_QWORD *)v78 + 56LL);
    v80 = (*(__int64 (__fastcall **)(unsigned __int64))v79)(v78);
    common::tools::HashUtils::appendHash(v80, (int32_t *)(v2 + 32));
  }
  v81 = data::ConfigVODIntee::getHashValue(&this->vod_intee);
  common::tools::HashUtils::appendHash(v81, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigLivePlayer>(0LL, &this->vod_player) )
  {
    v82 = (unsigned __int64)std::__shared_ptr_access<data::ConfigLivePlayer,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLivePlayer,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->vod_player);
    if ( *(_BYTE *)((v82 >> 3) + 0x7FFF8000) )
      v82 = __asan_report_load8(v82);
    v83 = *(_QWORD *)v82 + 56LL;
    if ( *(_BYTE *)((v83 >> 3) + 0x7FFF8000) )
      v82 = __asan_report_load8(*(_QWORD *)v82 + 56LL);
    v84 = (*(__int64 (__fastcall **)(unsigned __int64))v83)(v82);
    common::tools::HashUtils::appendHash(v84, (int32_t *)(v2 + 32));
  }
  v85 = data::ConfigGadgetCameraBox::getHashValue(&this->camera_box);
  common::tools::HashUtils::appendHash(v85, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->open_watcher >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->open_watcher, v2 + 32, &this->open_watcher);
  common::tools::HashUtils::appendHash(this->open_watcher, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->ray_tag >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ray_tag >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->ray_tag);
  }
  common::tools::HashUtils::appendHash(this->ray_tag, (int32_t *)(v2 + 32));
  if ( *(char *)(((unsigned __int64)&this->has_ray_tag >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&this->has_ray_tag, v2 + 32, &this->has_ray_tag);
  common::tools::HashUtils::appendHash(this->has_ray_tag, (int32_t *)(v2 + 32));
  v86 = ((_BYTE)this - 119) & 7;
  v87 = (*(_BYTE *)(((unsigned __int64)&this->use_retreat_type >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v86 >= *(_BYTE *)(((unsigned __int64)&this->use_retreat_type >> 3) + 0x7FFF8000));
  if ( (_BYTE)v87 )
    __asan_report_load1(&this->use_retreat_type, v86, v87);
  common::tools::HashUtils::appendHash(this->use_retreat_type, (int32_t *)(v2 + 32));
  v88 = ((_BYTE)this - 118) & 7;
  v89 = (*(_BYTE *)(((unsigned __int64)&this->dont_destroy_by_perform >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v88 >= *(_BYTE *)(((unsigned __int64)&this->dont_destroy_by_perform >> 3) + 0x7FFF8000));
  if ( (_BYTE)v89 )
    __asan_report_load1(&this->dont_destroy_by_perform, v88, v89);
  common::tools::HashUtils::appendHash(this->dont_destroy_by_perform, (int32_t *)(v2 + 32));
  v90 = ((_BYTE)this - 117) & 7;
  v91 = (*(_BYTE *)(((unsigned __int64)&this->correct_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v90 >= *(_BYTE *)(((unsigned __int64)&this->correct_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v91 )
    __asan_report_load1(&this->correct_owner, v90, v91);
  common::tools::HashUtils::appendHash(this->correct_owner, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v93 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8670: range 000000000E673D51-000000000E674946
bool __cdecl data::mapFromJson(const Json::Value *jval, data::ConfigGadgetMap *m)
{
  bool v2; // r15
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // al
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // r14
  _BOOL4 v9; // r14d
  unsigned __int64 v10; // rax
  const Json::Value *v11; // rax
  std::shared_ptr<data::ConfigGadget> *v12; // r8
  common::milog::MiLogStream *v13; // rax
  int v14; // r14d
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true>,bool> v15; // rax
  common::milog::MiLogStream *v16; // rax
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rax
  int v19; // edx
  char v21[752]; // [rsp+20h] [rbp-2F0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 16 8 cit:8672 80 16 9 <unknown> 112 16 10 value:8682 144 32 8 key:8675 208 32 9 <unknown> "
                        "272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 40 13 tmp_jval:8671 544 40 13 key_j"
                        "val:8674 624 40 15 value_jval:8681";
  *(_QWORD *)(v3 + 16) = data::mapFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -234881024;
  v5[536862736] = -218959118;
  v5[536862738] = -218959360;
  v5[536862739] = 62194;
  v5[536862740] = -218103808;
  v5[536862741] = -202116109;
  Json::Value::Value((Json::Value *)(v3 + 464), jval);
  if ( *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  Json::Value::begin((Json::Value_0 *const)(v3 + 464));
  while ( 1 )
  {
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    Json::Value::end((Json::Value_0 *const)(v3 + 464));
    v6 = Json::ValueIteratorBase::operator!=(
           (const Json::ValueIteratorBase *const)(v3 + 48),
           (const Json::ValueIteratorBase::SelfType *)(v3 + 80));
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = -1800;
    if ( !v6 )
      break;
    v7 = ((v3 + 544) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 583) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 71) & 7) >= *(_BYTE *)(((v3 + 583) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 544, 40LL);
    }
    Json::ValueIteratorBase::key((Json::ValueIteratorBase *)(v3 + 544));
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v3 + 144);
    if ( !fromJson<std::string>((const Json::Value *)(v3 + 544), (std::string *)(v3 + 144)) )
    {
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 47) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 208, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 208),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        8678);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)(v3 + 208),
             (const char (*)[21])"key fromJson fails: ");
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 111) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v3 + 272), (Json::Value_0 *)(v3 + 544));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 272));
      std::string::~string((void *)(v3 + 272));
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v10 = ((v3 + 624) >> 3) + 2147450880;
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 0;
      v11 = Json::ValueIterator::operator*((Json::ValueIterator *const)(v3 + 48));
      Json::Value::Value((Json::Value *)(v3 + 624), v11);
      *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigGadget::parseFromJson((const Json::Value *)(v3 + 112));
      if ( std::operator==<data::ConfigGadget>((const std::shared_ptr<data::ConfigGadget> *)(v3 + 112), 0LL) )
      {
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "mapFromJson",
          8685);
        v13 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)(v3 + 336),
                (const char (*)[28])"value fromJson fails, key: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v3 + 144));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v14 = 0;
      }
      else
      {
        v15 = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::emplace<std::string&,std::shared_ptr<data::ConfigGadget>&>(
                m,
                (std::string *)(v3 + 144),
                (std::shared_ptr<data::ConfigGadget> *)(v3 + 112),
                (std::string *)(v3 + 144),
                v12);
        if ( !v15.second )
        {
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 112 + 31) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "mapFromJson",
            8690);
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 400),
                  (const char (*)[16])"key duplicate: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v3 + 144));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
          v2 = 0;
          v14 = 0;
        }
        else
        {
          v14 = 1;
        }
      }
      std::shared_ptr<data::ConfigGadget>::~shared_ptr((std::shared_ptr<data::ConfigGadget> *const)(v3 + 112));
      Json::Value::~Value((Json::Value_0 *const)(v3 + 624));
      v9 = v14 == 1;
    }
    std::string::~string((void *)(v3 + 144));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 544));
    v17 = ((v3 + 544) >> 3) + 2147450880;
    *(_DWORD *)v17 = -117901064;
    *(_BYTE *)(v17 + 4) = -8;
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = -117901064;
    v18 = ((v3 + 624) >> 3) + 2147450880;
    *(_DWORD *)v18 = -117901064;
    *(_BYTE *)(v18 + 4) = -8;
    *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -1800;
    if ( !v9 )
    {
      v19 = 0;
      goto LABEL_34;
    }
    Json::ValueIterator::operator++((Json::ValueIterator *const)(v3 + 48));
  }
  v19 = 1;
LABEL_34:
  *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) = -1800;
  if ( v19 == 1 )
    v2 = 1;
  Json::Value::~Value((Json::Value_0 *const)(v3 + 464));
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 8699: range 000000000E674947-000000000E674C56
int32_t __cdecl data::getMapHashValue(const data::ConfigGadgetMap *map)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int32_t v7; // eax
  int32_t result; // eax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true>::reference v9; // [rsp+18h] [rbp-B8h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *key; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *val; // [rsp+28h] [rbp-A8h]
  char v12[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:8700 64 8 16 __for_begin:8701 96 8 14 __for_end:8701";
  *(_QWORD *)(v2 + 16) = data::getMapHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::begin(map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,std::shared_ptr<data::ConfigGadget>>::end(map);
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,true> *)(v2 + 96)) )
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v2 + 64));
    key = std::get<0ul,std::string const,std::shared_ptr<data::ConfigGadget>>(v9);
    val = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigGadget> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigGadget>>(v9);
    common::tools::HashUtils::appendHash(key, (int32_t *)(v2 + 48));
    if ( std::operator!=<data::ConfigGadget>(0LL, val) )
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadget,(__gnu_cxx::_Lock_policy)2,false,false> *const)val);
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(v5);
      v6 = *(_QWORD *)v5 + 56LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(*(_QWORD *)v5 + 56LL);
      v7 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
      common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 48));
    }
    std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigGadget>>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigGadget> >,false,true> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8716: range 000000000E674C58-000000000E675772
bool __cdecl data::ConfigKeyInput::fromJson(data::ConfigKeyInput *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *key_id_ptr; // [rsp+10h] [rbp-2A0h]
  const Json::Value *input_key_code_ptr; // [rsp+18h] [rbp-298h]
  const Json::Value *ability_name_ptr; // [rsp+20h] [rbp-290h]
  const Json::Value *ability_cd_ptr; // [rsp+28h] [rbp-288h]
  char v12[640]; // [rsp+30h] [rbp-280h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 "
                        "9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9"
                        " <unknown> 544 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigKeyInput::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "keyID",
    (const std::allocator<char> *)(v2 + 32));
  key_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( key_id_ptr && !fromJson<int>(key_id_ptr, &this->key_id) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      8726);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[27])"fromJson for: keyID fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "inputKeyCode",
      (const std::allocator<char> *)(v2 + 48));
    input_key_code_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( input_key_code_ptr && !fromJson<int>(input_key_code_ptr, &this->input_key_code) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        8738);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[34])"fromJson for: inputKeyCode fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "abilityName",
        (const std::allocator<char> *)(v2 + 64));
      ability_name_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( ability_name_ptr && !fromJson<std::string>(ability_name_ptr, &this->ability_name) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          8750);
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[33])"fromJson for: abilityName fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 480),
          "abilityCD",
          (const std::allocator<char> *)(v2 + 80));
        ability_cd_ptr = jsonValueFind(jval, (const std::string *)(v2 + 480));
        std::string::~string((void *)(v2 + 480));
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( ability_cd_ptr && !fromJson<float>(ability_cd_ptr, &this->ability_cd) )
        {
          *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 544, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 544),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            8762);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 544),
            (const char (*)[31])"fromJson for: abilityCD fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
          result = 0;
        }
        else
        {
          v6 = ((_BYTE)this + 44) & 7;
          v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
          if ( (_BYTE)v7 )
            __asan_report_store1(&this->is_json_loaded, v6, v7);
          this->is_json_loaded = 1;
          result = 1;
        }
      }
    }
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 8770: range 000000000E675774-000000000E675989
int32_t __cdecl data::ConfigKeyInput::getHashValue(const data::ConfigKeyInput *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:8771";
  *(_QWORD *)(v2 + 16) = data::ConfigKeyInput::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->key_id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->input_key_code >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->input_key_code >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->input_key_code);
  }
  common::tools::HashUtils::appendHash(this->input_key_code, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->ability_name, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->ability_cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->ability_cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->ability_cd);
  }
  common::tools::HashUtils::appendHash(this->ability_cd, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8780: range 000000000E67598A-000000000E675D36
bool __cdecl data::vecFromJson(const Json::Value *jval, data::ConfigKeyInputList *v)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  unsigned __int64 v6; // rax
  int v7; // r14d
  data::ConfigKeyInput *v8; // rdx
  unsigned __int64 v9; // rdx
  bool result; // al
  int v11; // [rsp+0h] [rbp-120h]
  char v12; // [rsp+8h] [rbp-118h]
  bool v13; // [rsp+Fh] [rbp-111h]
  uint32_t i; // [rsp+24h] [rbp-FCh]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-F8h]
  char v16[240]; // [rsp+30h] [rbp-F0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 32 9 <unknown> 112 48 9 elem:8786";
  *(_QWORD *)(v2 + 16) = data::vecFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862725] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v11, v12);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      v6 = ((v2 + 112) >> 3) + 2147450880;
      *(_DWORD *)v6 = 0;
      *(_WORD *)(v6 + 4) = 0;
      data::ConfigKeyInput::ConfigKeyInput((data::ConfigKeyInput *const)(v2 + 112));
      if ( !data::ConfigKeyInput::fromJson((data::ConfigKeyInput *const)(v2 + 112), elem_jval) )
      {
        *(_DWORD *)(((v2 + 48) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 48, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 48),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "vecFromJson",
          8789);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 48),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 48));
        *(_DWORD *)(((v2 + 48) >> 3) + 0x7FFF8000) = -117901064;
        v13 = 0;
        v7 = 0;
      }
      else
      {
        v8 = std::move<data::ConfigKeyInput &>((data::ConfigKeyInput *)(v2 + 112));
        std::vector<data::ConfigKeyInput>::emplace_back<data::ConfigKeyInput>(v, v8, v8);
        v7 = 1;
      }
      data::ConfigKeyInput::~ConfigKeyInput((data::ConfigKeyInput *const)(v2 + 112));
      if ( v7 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    v9 = ((v2 + 112) >> 3) + 2147450880;
    *(_DWORD *)v9 = -117901064;
    *(_WORD *)(v9 + 4) = -1800;
    if ( v5 && v5 != 2 )
      goto LABEL_20;
  }
  v13 = 1;
LABEL_20:
  result = v13;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8799: range 000000000E675D37-000000000E675F83
int32_t __cdecl data::getVecHashValue(const data::ConfigKeyInputList *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::ConfigKeyInput*,std::vector<data::ConfigKeyInput> >::reference elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:8800 64 8 16 __for_begin:8801 96 8 14 __for_end:8801";
  *(_QWORD *)(v2 + 16) = data::getVecHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::ConfigKeyInput>::const_iterator *)(v2 + 64) = std::vector<data::ConfigKeyInput>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::ConfigKeyInput>::const_iterator *)(v2 + 96) = std::vector<data::ConfigKeyInput>::end(vec);
  while ( __gnu_cxx::operator!=<data::ConfigKeyInput const*,std::vector<data::ConfigKeyInput>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigKeyInput*,std::vector<data::ConfigKeyInput> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::ConfigKeyInput*,std::vector<data::ConfigKeyInput> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<data::ConfigKeyInput const*,std::vector<data::ConfigKeyInput>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigKeyInput*,std::vector<data::ConfigKeyInput> > *const)(v2 + 64));
    HashValue = data::ConfigKeyInput::getHashValue(elem);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::ConfigKeyInput const*,std::vector<data::ConfigKeyInput>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigKeyInput*,std::vector<data::ConfigKeyInput> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8810: range 000000000E675F84-000000000E676D21
bool __cdecl data::ConfigShoot::fromJson(data::ConfigShoot *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  float *p_auto_focus_max_range; // rsi
  const Json::Value *bullet_born_attach_point_ptr; // [rsp+18h] [rbp-348h]
  const Json::Value *detect_range_from_viewport_ptr; // [rsp+20h] [rbp-340h]
  const Json::Value *detect_radius_from_viewport_ptr; // [rsp+28h] [rbp-338h]
  const Json::Value *auto_focus_min_range_ptr; // [rsp+30h] [rbp-330h]
  const Json::Value *auto_focus_max_range_ptr; // [rsp+38h] [rbp-328h]
  char v13[800]; // [rsp+40h] [rbp-320h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(768LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "15 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 32 "
                        "9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9"
                        " <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigShoot::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "bulletBornAttachPoint",
    (const std::allocator<char> *)(v2 + 48));
  bullet_born_attach_point_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( bullet_born_attach_point_ptr
    && !fromJson<std::string>(bullet_born_attach_point_ptr, &this->bullet_born_attach_point) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      8820);
    common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[43])"fromJson for: bulletBornAttachPoint fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "detectRangeFromViewport",
      (const std::allocator<char> *)(v2 + 64));
    detect_range_from_viewport_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( detect_range_from_viewport_ptr
      && !fromJson<float>(detect_range_from_viewport_ptr, &this->detect_range_from_viewport) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        8832);
      common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[45])"fromJson for: detectRangeFromViewport fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "detectRadiusFromViewport",
        (const std::allocator<char> *)(v2 + 80));
      detect_radius_from_viewport_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( detect_radius_from_viewport_ptr
        && !fromJson<float>(detect_radius_from_viewport_ptr, &this->detect_radius_from_viewport) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          8844);
        common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[46])"fromJson for: detectRadiusFromViewport fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "autoFocusMinRange",
          (const std::allocator<char> *)(v2 + 96));
        auto_focus_min_range_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( auto_focus_min_range_ptr && !fromJson<float>(auto_focus_min_range_ptr, &this->auto_focus_min_range) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            8856);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[39])"fromJson for: autoFocusMinRange fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "autoFocusMaxRange",
            (const std::allocator<char> *)(v2 + 112));
          p_auto_focus_max_range = (float *)(v2 + 640);
          auto_focus_max_range_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( auto_focus_max_range_ptr
            && (p_auto_focus_max_range = &this->auto_focus_max_range,
                !fromJson<float>(auto_focus_max_range_ptr, &this->auto_focus_max_range)) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              8868);
            common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[39])"fromJson for: autoFocusMaxRange fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
              __asan_report_store1(&this->is_json_loaded, p_auto_focus_max_range, &this->is_json_loaded);
            this->is_json_loaded = 1;
            result = 1;
          }
        }
      }
    }
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8876: range 000000000E676D22-000000000E676F8F
int32_t __cdecl data::ConfigShoot::getHashValue(const data::ConfigShoot *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:8877";
  *(_QWORD *)(v2 + 16) = data::ConfigShoot::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->bullet_born_attach_point, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_range_from_viewport >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->detect_range_from_viewport >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->detect_range_from_viewport);
  }
  common::tools::HashUtils::appendHash(this->detect_range_from_viewport, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_radius_from_viewport >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->detect_radius_from_viewport >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->detect_radius_from_viewport);
  }
  common::tools::HashUtils::appendHash(this->detect_radius_from_viewport, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->auto_focus_min_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->auto_focus_min_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->auto_focus_min_range);
  }
  common::tools::HashUtils::appendHash(this->auto_focus_min_range, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->auto_focus_max_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->auto_focus_max_range >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&this->auto_focus_max_range);
  }
  common::tools::HashUtils::appendHash(this->auto_focus_max_range, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8888: range 000000000E676F90-000000000E677573
bool __cdecl data::ConfigAvatarShoot::fromJson(data::ConfigAvatarShoot *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  const Json::Value *v6; // rsi
  const Json::Value *normal_shoot_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *aiming_shoot_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatarShoot::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "normalShoot",
    (const std::allocator<char> *)(v2 + 32));
  normal_shoot_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( normal_shoot_ptr && !data::ConfigShoot::fromJson(&this->normal_shoot, normal_shoot_ptr) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      8898);
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[33])"fromJson for: normalShoot fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "aimingShoot",
      (const std::allocator<char> *)(v2 + 48));
    v6 = (const Json::Value *)(v2 + 192);
    aiming_shoot_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( aiming_shoot_ptr
      && (v6 = aiming_shoot_ptr, !data::ConfigShoot::fromJson(&this->aiming_shoot, aiming_shoot_ptr)) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        8910);
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[33])"fromJson for: aimingShoot fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, v6, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8918: range 000000000E677574-000000000E6776CF
int32_t __cdecl data::ConfigAvatarShoot::getHashValue(const data::ConfigAvatarShoot *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t v6; // eax
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:8919";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatarShoot::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigShoot::getHashValue(&this->normal_shoot);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  v6 = data::ConfigShoot::getHashValue(&this->aiming_shoot);
  common::tools::HashUtils::appendHash(v6, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8927: range 000000000E6776D0-000000000E677A25
bool __cdecl data::ConfigMoveStateEffect::fromJson(data::ConfigMoveStateEffect *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const Json::Value *v5; // rsi
  bool result; // al
  const Json::Value *footprint_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMoveStateEffect::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "footprint",
    (const std::allocator<char> *)(v2 + 48));
  v5 = (const Json::Value *)(v2 + 64);
  footprint_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( footprint_ptr && (v5 = footprint_ptr, !data::ConfigFootprint::fromJson(&this->footprint, footprint_ptr)) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      8937);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[31])"fromJson for: footprint fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8945: range 000000000E677A26-000000000E677B60
int32_t __cdecl data::ConfigMoveStateEffect::getHashValue(const data::ConfigMoveStateEffect *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:8946";
  *(_QWORD *)(v2 + 16) = data::ConfigMoveStateEffect::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigFootprint::getHashValue(&this->footprint);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8953: range 000000000E677B62-000000000E67814A
bool __cdecl data::ConfigLoopPerformID::fromJson(data::ConfigLoopPerformID *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *id_ptr; // [rsp+10h] [rbp-170h]
  const Json::Value *time_ptr; // [rsp+18h] [rbp-168h]
  char v10[352]; // [rsp+20h] [rbp-160h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigLoopPerformID::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "id",
    (const std::allocator<char> *)(v2 + 32));
  id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( id_ptr && !fromJson<int>(id_ptr, &this->id) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      8963);
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[24])"fromJson for: id fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "time",
      (const std::allocator<char> *)(v2 + 48));
    time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( time_ptr && !fromJson<float>(time_ptr, &this->time) )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        8975);
      common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
        (common::milog::MiLogStream *const)(v2 + 256),
        (const char (*)[26])"fromJson for: time fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = 0;
    }
    else
    {
      v6 = ((_BYTE)this + 8) & 7;
      v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
      if ( (_BYTE)v7 )
        __asan_report_store1(&this->is_json_loaded, v6, v7);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8983: range 000000000E67814C-000000000E678308
int32_t __cdecl data::ConfigLoopPerformID::getHashValue(const data::ConfigLoopPerformID *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:8984";
  *(_QWORD *)(v2 + 16) = data::ConfigLoopPerformID::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->id, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->time);
  }
  common::tools::HashUtils::appendHash(this->time, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8991: range 000000000E678309-000000000E6786A5
bool __cdecl data::vecFromJson(const Json::Value *jval, data::ConfigLoopPerformIDList *v)
{
  bool v2; // r15
  unsigned __int64 v3; // r12
  __int64 v4; // rax
  _DWORD *v5; // r13
  int v6; // eax
  __int64 v7; // rsi
  data::ConfigLoopPerformID *v8; // rdx
  bool result; // al
  std::vector<data::ConfigLoopPerformID> *va; // [rsp+0h] [rbp-D0h]
  Json::Value *jvala; // [rsp+8h] [rbp-C8h]
  uint32_t i; // [rsp+14h] [rbp-BCh]
  const Json::Value *elem_jval; // [rsp+18h] [rbp-B8h]
  char v14[176]; // [rsp+20h] [rbp-B0h] BYREF

  jvala = (Json::Value *)jval;
  LODWORD(va) = (_DWORD)v;
  v3 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_1(128LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "2 32 12 9 elem:8997 64 32 9 <unknown>";
  *(_QWORD *)(v3 + 16) = data::vecFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = -219020288;
  v5[536862723] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jvala); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[](jvala, i, (int)va, (char)jvala);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v6 = 0;
    }
    else
    {
      *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) = 1024;
      if ( *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v3 + 32) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v3 + 32, i);
      *(_DWORD *)(v3 + 32) = 0;
      v7 = (((_BYTE)v3 + 36) & 7u) + 3;
      if ( *(_BYTE *)(((v3 + 36) >> 3) + 0x7FFF8000) != 0
        && (char)(((v3 + 36) & 7) + 3) >= *(_BYTE *)(((v3 + 36) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store4(v3 + 36, v7);
      }
      *(_DWORD *)(v3 + 36) = 0;
      if ( *(char *)(((v3 + 40) >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(v3 + 40, v7, v3 + 40);
      *(_BYTE *)(v3 + 40) = 0;
      if ( !data::ConfigLoopPerformID::fromJson((data::ConfigLoopPerformID *const)(v3 + 32), elem_jval) )
      {
        *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 64) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 95) & 7) >= *(_BYTE *)(((v3 + 95) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 64, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 64),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "vecFromJson",
          9000);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v3 + 64),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 64));
        *(_DWORD *)(((v3 + 64) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v6 = 1;
      }
      else
      {
        v8 = std::move<data::ConfigLoopPerformID &>((data::ConfigLoopPerformID *)(v3 + 32));
        std::vector<data::ConfigLoopPerformID>::emplace_back<data::ConfigLoopPerformID>(va, v8, v8);
        v6 = 2;
      }
    }
    *(_WORD *)(((v3 + 32) >> 3) + 0x7FFF8000) = -1800;
    if ( v6 && v6 != 2 )
      goto LABEL_23;
  }
  v2 = 1;
LABEL_23:
  result = v2;
  if ( v14 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9010: range 000000000E6786A6-000000000E6788F2
int32_t __cdecl data::getVecHashValue(const data::ConfigLoopPerformIDList *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::ConfigLoopPerformID*,std::vector<data::ConfigLoopPerformID> >::reference elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:9011 64 8 16 __for_begin:9012 96 8 14 __for_end:9012";
  *(_QWORD *)(v2 + 16) = data::getVecHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::ConfigLoopPerformID>::const_iterator *)(v2 + 64) = std::vector<data::ConfigLoopPerformID>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::ConfigLoopPerformID>::const_iterator *)(v2 + 96) = std::vector<data::ConfigLoopPerformID>::end(vec);
  while ( __gnu_cxx::operator!=<data::ConfigLoopPerformID const*,std::vector<data::ConfigLoopPerformID>>(
            (const __gnu_cxx::__normal_iterator<const data::ConfigLoopPerformID*,std::vector<data::ConfigLoopPerformID> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::ConfigLoopPerformID*,std::vector<data::ConfigLoopPerformID> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<data::ConfigLoopPerformID const*,std::vector<data::ConfigLoopPerformID>>::operator*((const __gnu_cxx::__normal_iterator<const data::ConfigLoopPerformID*,std::vector<data::ConfigLoopPerformID> > *const)(v2 + 64));
    HashValue = data::ConfigLoopPerformID::getHashValue(elem);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::ConfigLoopPerformID const*,std::vector<data::ConfigLoopPerformID>>::operator++((__gnu_cxx::__normal_iterator<const data::ConfigLoopPerformID*,std::vector<data::ConfigLoopPerformID> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9021: range 000000000E6788F4-000000000E679409
bool __cdecl data::ConfigStandbyPerform::fromJson(data::ConfigStandbyPerform *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::ConfigLoopPerformIDList *p_loop_perform_ids; // rsi
  const Json::Value *min_time_ptr; // [rsp+10h] [rbp-2A0h]
  const Json::Value *max_time_ptr; // [rsp+18h] [rbp-298h]
  const Json::Value *perform_ids_ptr; // [rsp+20h] [rbp-290h]
  const Json::Value *loop_perform_ids_ptr; // [rsp+28h] [rbp-288h]
  char v12[640]; // [rsp+30h] [rbp-280h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 "
                        "9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9"
                        " <unknown> 544 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigStandbyPerform::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "minTime",
    (const std::allocator<char> *)(v2 + 32));
  min_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( min_time_ptr && !fromJson<float>(min_time_ptr, &this->min_time) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9031);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[29])"fromJson for: minTime fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "maxTime",
      (const std::allocator<char> *)(v2 + 48));
    max_time_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( max_time_ptr && !fromJson<float>(max_time_ptr, &this->max_time) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        9043);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[29])"fromJson for: maxTime fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "performIDs",
        (const std::allocator<char> *)(v2 + 64));
      perform_ids_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( perform_ids_ptr && !data::arrFromJson(perform_ids_ptr, &this->perform_ids) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          9055);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[32])"fromJson for: performIDs fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 480),
          "loopPerformIDs",
          (const std::allocator<char> *)(v2 + 80));
        p_loop_perform_ids = (data::ConfigLoopPerformIDList *)(v2 + 480);
        loop_perform_ids_ptr = jsonValueFind(jval, (const std::string *)(v2 + 480));
        std::string::~string((void *)(v2 + 480));
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( loop_perform_ids_ptr
          && (p_loop_perform_ids = &this->loop_perform_ids,
              !data::vecFromJson(loop_perform_ids_ptr, &this->loop_perform_ids)) )
        {
          *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 544, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 544),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9067);
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v2 + 544),
            (const char (*)[36])"fromJson for: loopPerformIDs fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
          result = 0;
        }
        else
        {
          if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
            __asan_report_store1(&this->is_json_loaded, p_loop_perform_ids, &this->is_json_loaded);
          this->is_json_loaded = 1;
          result = 1;
        }
      }
    }
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 9075: range 000000000E67940A-000000000E679602
int32_t __cdecl data::ConfigStandbyPerform::getHashValue(const data::ConfigStandbyPerform *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t ArrHashValue; // eax
  int32_t VecHashValue; // eax
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9076";
  *(_QWORD *)(v2 + 16) = data::ConfigStandbyPerform::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->min_time, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->max_time);
  }
  common::tools::HashUtils::appendHash(this->max_time, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->perform_ids);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  VecHashValue = data::getVecHashValue(&this->loop_perform_ids);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9086: range 000000000E679604-000000000E679959
bool __cdecl data::ConfigAvatarPerform::fromJson(data::ConfigAvatarPerform *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const Json::Value *v5; // rsi
  bool result; // al
  const Json::Value *standby_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatarPerform::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "standby",
    (const std::allocator<char> *)(v2 + 48));
  v5 = (const Json::Value *)(v2 + 64);
  standby_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( standby_ptr && (v5 = standby_ptr, !data::ConfigStandbyPerform::fromJson(&this->standby, standby_ptr)) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9096);
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[29])"fromJson for: standby fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9104: range 000000000E67995A-000000000E679A94
int32_t __cdecl data::ConfigAvatarPerform::getHashValue(const data::ConfigAvatarPerform *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9105";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatarPerform::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigStandbyPerform::getHashValue(&this->standby);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9114: range 000000000E6F0AFA-000000000E6F0D3B
void __cdecl data::ConfigCharacterRegister::ConfigCharacterRegister(data::ConfigCharacterRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigEntity> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigCharacterRegister::ConfigCharacterRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigCharacter>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigCharacter",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::operator[](
         &data::g_ConfigEntityMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigEntity>::operator=<data::ConfigCharacter>(
    v4,
    (std::shared_ptr<data::ConfigCharacter> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigCharacter>::~shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 9117: range 000000000E679A96-000000000E67A0A6
void __cdecl data::ConfigCharacter::foreachMember(
        data::ConfigCharacter *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 32 16 15 combat_any:9119 64 16 25 equip_controller_any:9121 96 16 30 sub_equip_controllers_an"
                        "y:9123 128 16 18 abilities_any:9125 160 16 21 state_layers_any:9127 192 16 13 face_any:9129 224 "
                        "16 21 part_control_any:9131 256 16 18 billboard_any:9133 288 16 22 bind_emotions_any:9135 320 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCharacter::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862731] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 320), p_func);
  data::ConfigEntity::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 320));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 320));
  *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigCombat &,data::ConfigCombat,std::any::_Manager_external<data::ConfigCombat>,true,true>(
    (std::any *const)(v2 + 32),
    &this->combat);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigEquipController> &,std::shared_ptr<data::ConfigEquipController>,std::any::_Manager_external<std::shared_ptr<data::ConfigEquipController>>,true,true>(
    (std::any *const)(v2 + 64),
    &this->equip_controller);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<std::shared_ptr<data::ConfigSubEquipController>> &,std::vector<std::shared_ptr<data::ConfigSubEquipController>>,std::any::_Manager_external<std::vector<std::shared_ptr<data::ConfigSubEquipController>>>,true,true>(
    (std::any *const)(v2 + 96),
    &this->sub_equip_controllers);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::ConfigEntityAbilityEntry> &,std::vector<data::ConfigEntityAbilityEntry>,std::any::_Manager_external<std::vector<data::ConfigEntityAbilityEntry>>,true,true>(
    (std::any *const)(v2 + 128),
    &this->abilities);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>> &,std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>>,std::any::_Manager_external<std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>>>,true,true>(
    (std::any *const)(v2 + 160),
    &this->state_layers);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 160));
  *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigFace &,data::ConfigFace,std::any::_Manager_external<data::ConfigFace>,true,true>(
    (std::any *const)(v2 + 192),
    &this->face);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 192));
  *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigPartController &,data::ConfigPartController,std::any::_Manager_external<data::ConfigPartController>,true,true>(
    (std::any *const)(v2 + 224),
    &this->part_control);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 224));
  *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigBillboard> &,std::shared_ptr<data::ConfigBillboard>,std::any::_Manager_external<std::shared_ptr<data::ConfigBillboard>>,true,true>(
    (std::any *const)(v2 + 256),
    &this->billboard);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 256));
  *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<std::string> &,std::vector<std::string>,std::any::_Manager_external<std::vector<std::string>>,true,true>(
    (std::any *const)(v2 + 288),
    &this->bind_emotions);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 288));
  std::any::~any((std::any *const)(v2 + 288));
  std::any::~any((std::any *const)(v2 + 256));
  std::any::~any((std::any *const)(v2 + 224));
  std::any::~any((std::any *const)(v2 + 192));
  std::any::~any((std::any *const)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 9140: range 000000000E67A0A8-000000000E67A1B8
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigCharacter::clone(data::ConfigCharacter *const this)
{
  data::ConfigCharacter *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigEntity> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCharacter::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigCharacter,data::ConfigCharacter&>(
    (common::tools::perf::allocator<data::ConfigCharacter,data::ConfigCharacter> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigEntity>::shared_ptr<data::ConfigCharacter,void>(
    (std::shared_ptr<data::ConfigEntity> *const)this,
    (std::shared_ptr<data::ConfigCharacter> *)(v2 + 32));
  std::shared_ptr<data::ConfigCharacter>::~shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 9144: range 000000000E67A1BA-000000000E67BE0E
bool __cdecl data::ConfigCharacter::fromJson(data::ConfigCharacter *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  unsigned __int64 v6; // rax
  void (__fastcall **v7)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v8)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigEquipController> *v9; // rax
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  std::shared_ptr<data::ConfigBillboard> *v12; // rax
  bool v13; // r14
  data::StringArray *p_bind_emotions; // rsi
  bool v15; // bl
  char v17; // [rsp+Fh] [rbp-691h]
  const Json::Value *combat_ptr; // [rsp+28h] [rbp-678h]
  const Json::Value *equip_controller_ptr; // [rsp+30h] [rbp-670h]
  const Json::Value *sub_equip_controllers_ptr; // [rsp+38h] [rbp-668h]
  const Json::Value *abilities_ptr; // [rsp+40h] [rbp-660h]
  const Json::Value *state_layers_ptr; // [rsp+48h] [rbp-658h]
  const Json::Value *face_ptr; // [rsp+50h] [rbp-650h]
  const Json::Value *part_control_ptr; // [rsp+58h] [rbp-648h]
  const Json::Value *billboard_ptr; // [rsp+60h] [rbp-640h]
  const Json::Value *bind_emotions_ptr; // [rsp+68h] [rbp-638h]
  char v28[1584]; // [rsp+70h] [rbp-630h] BYREF

  v2 = (unsigned __int64)v28;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1536LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "32 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 16 9 <unknown> 224 16 9 <un"
                        "known> 256 16 9 <unknown> 288 16 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unk"
                        "nown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unkn"
                        "own> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unk"
                        "nown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 "
                        "<unknown> 1472 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCharacter::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -202116109;
  if ( !data::ConfigEntity::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 320),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9147);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 320),
      (const char (*)[34])"fromJson for: ConfigEntity fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
    v5 = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 384),
      "combat",
      (const std::allocator<char> *)(v2 + 48));
    combat_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
    std::string::~string((void *)(v2 + 384));
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( combat_ptr && !data::ConfigCombat::fromJson(&this->combat, combat_ptr) )
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        9159);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v2 + 448),
        (const char (*)[28])"fromJson for: combat fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 512),
        "equipController",
        (const std::allocator<char> *)(v2 + 64));
      equip_controller_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
      std::string::~string((void *)(v2 + 512));
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( equip_controller_ptr )
      {
        *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
        v6 = (unsigned __int64)std::__shared_ptr_access<data::ConfigEquipControllerFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigEquipControllerFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigEquipControllerFactory::instance_ptr);
        if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
          v6 = __asan_report_load8(v6);
        v7 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v6;
        if ( *(_BYTE *)((*(_QWORD *)v6 >> 3) + 0x7FFF8000LL) )
          v6 = __asan_report_load8(*(_QWORD *)v6);
        v8 = *v7;
        if ( *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) )
          v6 = __asan_report_store16();
        v8(v2 + 224, v6);
        v9 = std::shared_ptr<data::ConfigEquipController>::operator=(
               &this->equip_controller,
               (std::shared_ptr<data::ConfigEquipController> *)(v2 + 224));
        if ( std::operator==<data::ConfigEquipController>(v9, 0LL) )
          goto LABEL_29;
        v10 = (unsigned __int64)std::__shared_ptr_access<data::ConfigEquipController,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigEquipController,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->equip_controller);
        if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
          v10 = __asan_report_load8(v10);
        v11 = *(_QWORD *)v10 + 48LL;
        if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
          v10 = __asan_report_load8(*(_QWORD *)v10 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v11)(v10, equip_controller_ptr) != 1 )
LABEL_29:
          v17 = 1;
        else
          v17 = 0;
        std::shared_ptr<data::ConfigEquipController>::~shared_ptr((std::shared_ptr<data::ConfigEquipController> *const)(v2 + 224));
        *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -1800;
        if ( v17 )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9173);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[37])"fromJson for: equipController fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        }
      }
      else
      {
        *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        common::tools::perf::make_shared<data::ConfigEquipController>();
        std::shared_ptr<data::ConfigEquipController>::operator=(
          &this->equip_controller,
          (std::shared_ptr<data::ConfigEquipController> *)(v2 + 192));
        std::shared_ptr<data::ConfigEquipController>::~shared_ptr((std::shared_ptr<data::ConfigEquipController> *const)(v2 + 192));
        *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -1800;
      }
      *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 640),
        "subEquipControllers",
        (const std::allocator<char> *)(v2 + 80));
      sub_equip_controllers_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
      std::string::~string((void *)(v2 + 640));
      *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( sub_equip_controllers_ptr && !data::arrFromJson(sub_equip_controllers_ptr, &this->sub_equip_controllers) )
      {
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 704, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 704),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          9184);
        common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
          (common::milog::MiLogStream *const)(v2 + 704),
          (const char (*)[41])"fromJson for: subEquipControllers fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 768),
          "abilities",
          (const std::allocator<char> *)(v2 + 96));
        abilities_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
        std::string::~string((void *)(v2 + 768));
        *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( abilities_ptr && !data::vecFromJson(abilities_ptr, &this->abilities) )
        {
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 832, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 832),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9196);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 832),
            (const char (*)[31])"fromJson for: abilities fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 896),
            "stateLayers",
            (const std::allocator<char> *)(v2 + 112));
          state_layers_ptr = jsonValueFind(jval, (const std::string *)(v2 + 896));
          std::string::~string((void *)(v2 + 896));
          *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( state_layers_ptr && !data::mapFromJson(state_layers_ptr, &this->state_layers) )
          {
            *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 960, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 960),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              9208);
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              (common::milog::MiLogStream *const)(v2 + 960),
              (const char (*)[33])"fromJson for: stateLayers fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1024),
              "face",
              (const std::allocator<char> *)(v2 + 128));
            face_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1024));
            std::string::~string((void *)(v2 + 1024));
            *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( face_ptr && !data::ConfigFace::fromJson(&this->face, face_ptr) )
            {
              *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1088, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1088),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                9220);
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                (common::milog::MiLogStream *const)(v2 + 1088),
                (const char (*)[26])"fromJson for: face fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1152),
                "partControl",
                (const std::allocator<char> *)(v2 + 144));
              part_control_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1152));
              std::string::~string((void *)(v2 + 1152));
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( part_control_ptr && !data::ConfigPartController::fromJson(&this->part_control, part_control_ptr) )
              {
                *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1216, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1216),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  9232);
                common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  (common::milog::MiLogStream *const)(v2 + 1216),
                  (const char (*)[33])"fromJson for: partControl fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1280),
                  "billboard",
                  (const std::allocator<char> *)(v2 + 160));
                billboard_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1280));
                std::string::~string((void *)(v2 + 1280));
                *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( billboard_ptr )
                {
                  *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  data::ConfigBillboard::parseFromJson((const Json::Value *)(v2 + 288));
                  v12 = std::shared_ptr<data::ConfigBillboard>::operator=(
                          &this->billboard,
                          (std::shared_ptr<data::ConfigBillboard> *)(v2 + 288));
                  v13 = std::operator==<data::ConfigBillboard>(v12, 0LL);
                  std::shared_ptr<data::ConfigBillboard>::~shared_ptr((std::shared_ptr<data::ConfigBillboard> *const)(v2 + 288));
                  *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -1800;
                  if ( v13 )
                  {
                    *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1344, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1344),
                      &common::milog::MiLogDefault::default_log_obj_,
                      1u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      9246);
                    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                      (common::milog::MiLogStream *const)(v2 + 1344),
                      (const char (*)[31])"fromJson for: billboard fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
                    *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
                  }
                }
                else
                {
                  *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
                  if ( *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) )
                    __asan_report_store16();
                  common::tools::perf::make_shared<data::ConfigBillboard>();
                  std::shared_ptr<data::ConfigBillboard>::operator=(
                    &this->billboard,
                    (std::shared_ptr<data::ConfigBillboard> *)(v2 + 256));
                  std::shared_ptr<data::ConfigBillboard>::~shared_ptr((std::shared_ptr<data::ConfigBillboard> *const)(v2 + 256));
                  *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -1800;
                }
                *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 176);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1408),
                  "bindEmotions",
                  (const std::allocator<char> *)(v2 + 176));
                p_bind_emotions = (data::StringArray *)(v2 + 1408);
                bind_emotions_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1408));
                std::string::~string((void *)(v2 + 1408));
                *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 176);
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                if ( bind_emotions_ptr
                  && (p_bind_emotions = &this->bind_emotions, !data::arrFromJson(
                                                                 bind_emotions_ptr,
                                                                 &this->bind_emotions)) )
                {
                  *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1472, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1472),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    9257);
                  common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                    (common::milog::MiLogStream *const)(v2 + 1472),
                    (const char (*)[34])"fromJson for: bindEmotions fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
                  v5 = 0;
                }
                else
                {
                  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                    __asan_report_store1(&this->is_json_loaded, p_bind_emotions, &this->is_json_loaded);
                  this->is_json_loaded = 1;
                  v5 = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v15 = v5;
  if ( v28 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8084) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF808C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8094) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF809C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A4) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80AC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B4) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80BC) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1536LL, v28);
  }
  return v15;
};

// Line 9264: range 000000000E67BE10-000000000E67C95C
data::ConfigCharacterPtr __cdecl data::ConfigCharacter::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigCharacterPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:9277 96 16 8 ptr:9283 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:9271 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCharacter::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        9274);
      common::milog::MiLogStream::operator<<<char [43],(char *[43])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[43])"fromJson for: ConfigCharacter $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigCharacter>::shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          9280);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigCharacter>::shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)jval, 0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigCharacter,data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 96));
        if ( std::operator==<data::ConfigCharacter>((const std::shared_ptr<data::ConfigCharacter> *)(v2 + 96), 0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            9286);
          common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[34])"cast to ConfigCharacterPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigCharacter>::shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)jval, 0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigCharacter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigCharacter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              9291);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigCharacter>::shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)jval, 0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigCharacter,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigCharacter,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 624, v1, v12);
            *(_BYTE *)(v10 + 624) = 1;
            std::shared_ptr<data::ConfigCharacter>::shared_ptr(
              (std::shared_ptr<data::ConfigCharacter> *const)jval,
              (std::shared_ptr<data::ConfigCharacter> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigCharacter>::~shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      9268);
    common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[48])"jsonValueFind for: ConfigCharacter $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigCharacter>::shared_ptr((std::shared_ptr<data::ConfigCharacter> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigCharacter,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 9299: range 000000000E67C95E-000000000E67CC8D
int32_t __cdecl data::ConfigCharacter::getHashValue(const data::ConfigCharacter *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t v7; // eax
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  int32_t v10; // eax
  int32_t ArrHashValue; // eax
  int32_t VecHashValue; // eax
  int32_t MapHashValue; // eax
  int32_t v14; // eax
  int32_t v15; // eax
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rdx
  int32_t v18; // eax
  int32_t v19; // eax
  int32_t result; // eax
  char v21[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9300";
  *(_QWORD *)(v2 + 16) = data::ConfigCharacter::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigEntity::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = data::ConfigCombat::getHashValue(&this->combat);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigEquipController>(0LL, &this->equip_controller) )
  {
    v8 = (unsigned __int64)std::__shared_ptr_access<data::ConfigEquipController,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigEquipController,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->equip_controller);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(v8);
    v9 = *(_QWORD *)v8 + 56LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(*(_QWORD *)v8 + 56LL);
    v10 = (*(__int64 (__fastcall **)(unsigned __int64))v9)(v8);
    common::tools::HashUtils::appendHash(v10, (int32_t *)(v2 + 32));
  }
  ArrHashValue = data::getArrHashValue(&this->sub_equip_controllers);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  VecHashValue = data::getVecHashValue(&this->abilities);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  MapHashValue = data::getMapHashValue(&this->state_layers);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  v14 = data::ConfigFace::getHashValue(&this->face);
  common::tools::HashUtils::appendHash(v14, (int32_t *)(v2 + 32));
  v15 = data::ConfigPartController::getHashValue(&this->part_control);
  common::tools::HashUtils::appendHash(v15, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigBillboard>(0LL, &this->billboard) )
  {
    v16 = (unsigned __int64)std::__shared_ptr_access<data::ConfigBillboard,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigBillboard,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->billboard);
    if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
      v16 = __asan_report_load8(v16);
    v17 = *(_QWORD *)v16 + 56LL;
    if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
      v16 = __asan_report_load8(*(_QWORD *)v16 + 56LL);
    v18 = (*(__int64 (__fastcall **)(unsigned __int64))v17)(v16);
    common::tools::HashUtils::appendHash(v18, (int32_t *)(v2 + 32));
  }
  v19 = data::getArrHashValue(&this->bind_emotions);
  common::tools::HashUtils::appendHash(v19, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v21 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9323: range 000000000E6F0D78-000000000E6F0FB9
void __cdecl data::ConfigAvatarRegister::ConfigAvatarRegister(data::ConfigAvatarRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigEntity> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigAvatarRegister::ConfigAvatarRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigAvatar>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigAvatar",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::operator[](
         &data::g_ConfigEntityMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigEntity>::operator=<data::ConfigAvatar>(
    v4,
    (std::shared_ptr<data::ConfigAvatar> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigAvatar>::~shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 9326: range 000000000E67CC8E-000000000E67D07E
void __cdecl data::ConfigAvatar::foreachMember(data::ConfigAvatar *const this, std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[304]; // [rsp+10h] [rbp-130h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 16 21 shoot_config_any:9328 64 16 14 audio_any:9330 96 16 28 controller_assembly_any:9332 1"
                        "28 16 26 move_state_effect_any:9334 160 16 16 perform_any:9336 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatar::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862727] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 192), p_func);
  data::ConfigCharacter::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 192));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigAvatarShoot &,data::ConfigAvatarShoot,std::any::_Manager_external<data::ConfigAvatarShoot>,true,true>(
    (std::any *const)(v2 + 32),
    &this->shoot_config);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigAvatarAudio> &,std::shared_ptr<data::ConfigAvatarAudio>,std::any::_Manager_external<std::shared_ptr<data::ConfigAvatarAudio>>,true,true>(
    (std::any *const)(v2 + 64),
    &this->audio);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigAvatarControllerAssembly &,data::ConfigAvatarControllerAssembly,std::any::_Manager_external<data::ConfigAvatarControllerAssembly>,true,true>(
    (std::any *const)(v2 + 96),
    &this->controller_assembly);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigMoveStateEffect &,data::ConfigMoveStateEffect,std::any::_Manager_external<data::ConfigMoveStateEffect>,true,true>(
    (std::any *const)(v2 + 128),
    &this->move_state_effect);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigAvatarPerform &,data::ConfigAvatarPerform,std::any::_Manager_external<data::ConfigAvatarPerform>,true,true>(
    (std::any *const)(v2 + 160),
    &this->perform);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 9341: range 000000000E67D080-000000000E67D190
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigAvatar::clone(data::ConfigAvatar *const this)
{
  data::ConfigAvatar *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigEntity> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatar::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigAvatar,data::ConfigAvatar&>(
    (common::tools::perf::allocator<data::ConfigAvatar,data::ConfigAvatar> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigEntity>::shared_ptr<data::ConfigAvatar,void>(
    (std::shared_ptr<data::ConfigEntity> *const)this,
    (std::shared_ptr<data::ConfigAvatar> *)(v2 + 32));
  std::shared_ptr<data::ConfigAvatar>::~shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 9345: range 000000000E67D192-000000000E67D1D5
data::ConfigAvatarPtr __cdecl data::ConfigAvatarFactory::create(data::ConfigAvatarFactory *const this)
{
  data::ConfigAvatarPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigAvatar>();
  result._M_ptr = (std::__shared_ptr<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 9347: range 000000000E67D1D6-000000000E67E33E
bool __cdecl data::ConfigAvatar::fromJson(data::ConfigAvatar *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  unsigned __int64 v6; // rax
  void (__fastcall **v7)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v8)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigAvatarAudio> *v9; // rax
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  const Json::Value *v12; // rsi
  char v13; // [rsp+Fh] [rbp-3F1h]
  const Json::Value *shoot_config_ptr; // [rsp+28h] [rbp-3D8h]
  const Json::Value *audio_ptr; // [rsp+30h] [rbp-3D0h]
  const Json::Value *controller_assembly_ptr; // [rsp+38h] [rbp-3C8h]
  const Json::Value *move_state_effect_ptr; // [rsp+40h] [rbp-3C0h]
  const Json::Value *perform_ptr; // [rsp+48h] [rbp-3B8h]
  char v20[944]; // [rsp+50h] [rbp-3B0h] BYREF

  v2 = (unsigned __int64)v20;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(896LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 16 "
                        "9 <unknown> 160 16 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9"
                        " <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 "
                        "<unknown> 768 32 9 <unknown> 832 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatar::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -202116109;
  if ( !data::ConfigCharacter::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9350);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[37])"fromJson for: ConfigCharacter fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "shootConfig",
      (const std::allocator<char> *)(v2 + 48));
    shoot_config_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( shoot_config_ptr && !data::ConfigAvatarShoot::fromJson(&this->shoot_config, shoot_config_ptr) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        9362);
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[33])"fromJson for: shootConfig fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "audio",
        (const std::allocator<char> *)(v2 + 64));
      audio_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( audio_ptr )
      {
        *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
        v6 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAvatarAudioFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatarAudioFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigAvatarAudioFactory::instance_ptr);
        if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
          v6 = __asan_report_load8(v6);
        v7 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v6;
        if ( *(_BYTE *)((*(_QWORD *)v6 >> 3) + 0x7FFF8000LL) )
          v6 = __asan_report_load8(*(_QWORD *)v6);
        v8 = *v7;
        if ( *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) )
          v6 = __asan_report_store16();
        v8(v2 + 160, v6);
        v9 = std::shared_ptr<data::ConfigAvatarAudio>::operator=(
               &this->audio,
               (std::shared_ptr<data::ConfigAvatarAudio> *)(v2 + 160));
        if ( std::operator==<data::ConfigAvatarAudio>(v9, 0LL) )
          goto LABEL_29;
        v10 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAvatarAudio,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatarAudio,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->audio);
        if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
          v10 = __asan_report_load8(v10);
        v11 = *(_QWORD *)v10 + 48LL;
        if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
          v10 = __asan_report_load8(*(_QWORD *)v10 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v11)(v10, audio_ptr) != 1 )
LABEL_29:
          v13 = 1;
        else
          v13 = 0;
        std::shared_ptr<data::ConfigAvatarAudio>::~shared_ptr((std::shared_ptr<data::ConfigAvatarAudio> *const)(v2 + 160));
        *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -1800;
        if ( v13 )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            1u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9376);
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[27])"fromJson for: audio fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
        }
      }
      else
      {
        *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        common::tools::perf::make_shared<data::ConfigAvatarAudio>();
        std::shared_ptr<data::ConfigAvatarAudio>::operator=(
          &this->audio,
          (std::shared_ptr<data::ConfigAvatarAudio> *)(v2 + 128));
        std::shared_ptr<data::ConfigAvatarAudio>::~shared_ptr((std::shared_ptr<data::ConfigAvatarAudio> *const)(v2 + 128));
        *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -1800;
      }
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 512),
        "controllerAssembly",
        (const std::allocator<char> *)(v2 + 80));
      controller_assembly_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
      std::string::~string((void *)(v2 + 512));
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( controller_assembly_ptr
        && !data::ConfigAvatarControllerAssembly::fromJson(&this->controller_assembly, controller_assembly_ptr) )
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 576),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          9387);
        common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
          (common::milog::MiLogStream *const)(v2 + 576),
          (const char (*)[40])"fromJson for: controllerAssembly fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 640),
          "moveStateEffect",
          (const std::allocator<char> *)(v2 + 96));
        move_state_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
        std::string::~string((void *)(v2 + 640));
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( move_state_effect_ptr
          && !data::ConfigMoveStateEffect::fromJson(&this->move_state_effect, move_state_effect_ptr) )
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 704, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 704),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9399);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            (common::milog::MiLogStream *const)(v2 + 704),
            (const char (*)[37])"fromJson for: moveStateEffect fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 768),
            "perform",
            (const std::allocator<char> *)(v2 + 112));
          v12 = (const Json::Value *)(v2 + 768);
          perform_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
          std::string::~string((void *)(v2 + 768));
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( perform_ptr && (v12 = perform_ptr, !data::ConfigAvatarPerform::fromJson(&this->perform, perform_ptr)) )
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 832, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 832),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              9411);
            common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
              (common::milog::MiLogStream *const)(v2 + 832),
              (const char (*)[29])"fromJson for: perform fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
            result = 0;
          }
          else
          {
            if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
              __asan_report_store1(&this->is_json_loaded, v12, &this->is_json_loaded);
            this->is_json_loaded = 1;
            result = 1;
          }
        }
      }
    }
  }
  if ( v20 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9418: range 000000000E67E340-000000000E67EE8C
data::ConfigAvatarPtr __cdecl data::ConfigAvatar::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigAvatarPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 13 base_ptr:9431 96 16 8 ptr:9437 128 32 9 <unknown> 192 32 9 <unknown"
                        "> 256 32 14 type_name:9425 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatar::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        9428);
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[40])"fromJson for: ConfigAvatar $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigAvatar>::shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          9434);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigAvatar>::shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)jval, 0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigAvatar,data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 96));
        if ( std::operator==<data::ConfigAvatar>((const std::shared_ptr<data::ConfigAvatar> *)(v2 + 96), 0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            9440);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[31])"cast to ConfigAvatarPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigAvatar>::shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)jval, 0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              9445);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigAvatar>::shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)jval, 0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 624, v1, v12);
            *(_BYTE *)(v10 + 624) = 1;
            std::shared_ptr<data::ConfigAvatar>::shared_ptr(
              (std::shared_ptr<data::ConfigAvatar> *const)jval,
              (std::shared_ptr<data::ConfigAvatar> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigAvatar>::~shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      9422);
    common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[45])"jsonValueFind for: ConfigAvatar $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigAvatar>::shared_ptr((std::shared_ptr<data::ConfigAvatar> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigAvatar,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 9453: range 000000000E67EE8E-000000000E67F0D0
int32_t __cdecl data::ConfigAvatar::getHashValue(const data::ConfigAvatar *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t v7; // eax
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rdx
  int32_t v10; // eax
  int32_t v11; // eax
  int32_t v12; // eax
  int32_t v13; // eax
  int32_t result; // eax
  char v15[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9454";
  *(_QWORD *)(v2 + 16) = data::ConfigAvatar::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigCharacter::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  v7 = data::ConfigAvatarShoot::getHashValue(&this->shoot_config);
  common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigAvatarAudio>(0LL, &this->audio) )
  {
    v8 = (unsigned __int64)std::__shared_ptr_access<data::ConfigAvatarAudio,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigAvatarAudio,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->audio);
    if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(v8);
    v9 = *(_QWORD *)v8 + 56LL;
    if ( *(_BYTE *)((v9 >> 3) + 0x7FFF8000) )
      v8 = __asan_report_load8(*(_QWORD *)v8 + 56LL);
    v10 = (*(__int64 (__fastcall **)(unsigned __int64))v9)(v8);
    common::tools::HashUtils::appendHash(v10, (int32_t *)(v2 + 32));
  }
  v11 = data::ConfigAvatarControllerAssembly::getHashValue(&this->controller_assembly);
  common::tools::HashUtils::appendHash(v11, (int32_t *)(v2 + 32));
  v12 = data::ConfigMoveStateEffect::getHashValue(&this->move_state_effect);
  common::tools::HashUtils::appendHash(v12, (int32_t *)(v2 + 32));
  v13 = data::ConfigAvatarPerform::getHashValue(&this->perform);
  common::tools::HashUtils::appendHash(v13, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9468: range 000000000E67F0D2-000000000E67F965
bool __cdecl data::ConfigMonsterInitialPose::fromJson(
        data::ConfigMonsterInitialPose *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  const Json::Value *v6; // rsi
  const Json::Value *initial_pose_id_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *released_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *initial_pose_params_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonsterInitialPose::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "initialPoseID",
    (const std::allocator<char> *)(v2 + 48));
  initial_pose_id_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( initial_pose_id_ptr && !fromJson<int>(initial_pose_id_ptr, &this->initial_pose_id) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9478);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[35])"fromJson for: initialPoseID fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "released",
      (const std::allocator<char> *)(v2 + 64));
    released_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( released_ptr && !fromJson<bool>(released_ptr, &this->released) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        9490);
      common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[30])"fromJson for: released fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "initialPoseParams",
        (const std::allocator<char> *)(v2 + 80));
      v6 = (const Json::Value *)(v2 + 352);
      initial_pose_params_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( initial_pose_params_ptr
        && (v6 = initial_pose_params_ptr,
            !data::ConfigPoseInitialParam::fromJson(&this->initial_pose_params, initial_pose_params_ptr)) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          9502);
        common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[39])"fromJson for: initialPoseParams fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(&this->is_json_loaded, v6, &this->is_json_loaded);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 9510: range 000000000E67F966-000000000E67FB3A
int32_t __cdecl data::ConfigMonsterInitialPose::getHashValue(const data::ConfigMonsterInitialPose *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t HashValue; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9511";
  *(_QWORD *)(v2 + 16) = data::ConfigMonsterInitialPose::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->initial_pose_id, (int32_t *)(v2 + 32));
  v5 = ((_BYTE)this + 4) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->released >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->released >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&this->released, v5, v6);
  common::tools::HashUtils::appendHash(this->released, (int32_t *)(v2 + 32));
  HashValue = data::ConfigPoseInitialParam::getHashValue(&this->initial_pose_params);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9519: range 000000000E67FB3B-000000000E6807AD
bool __cdecl data::mapFromJson(const Json::Value *jval, data::ConfigMonsterInitialPoseMap *m)
{
  bool v2; // r15
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // al
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // r14
  _BOOL4 v9; // r14d
  unsigned __int64 v10; // rax
  const Json::Value *v11; // rax
  _DWORD *v12; // rax
  data::ConfigMonsterInitialPose *v13; // r8
  common::milog::MiLogStream *v14; // rax
  int v15; // r14d
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,data::ConfigMonsterInitialPose>,false,true>,bool> v16; // rax
  common::milog::MiLogStream *v17; // rax
  unsigned __int64 v18; // rax
  unsigned __int64 v19; // rax
  _DWORD *v20; // rax
  int v21; // edx
  char v23[976]; // [rsp+20h] [rbp-3D0h] BYREF

  v3 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(928LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 16 8 cit:9521 80 16 9 <unknown> 112 32 8 key:9524 176 32 9 <unknown> 240 32 9 <unknown> 30"
                        "4 32 9 <unknown> 368 32 9 <unknown> 432 40 13 tmp_jval:9520 512 40 13 key_jval:9523 592 40 15 va"
                        "lue_jval:9530 672 192 10 value:9531";
  *(_QWORD *)(v3 + 16) = data::mapFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = -219021312;
  v5[536862725] = 62194;
  v5[536862726] = -219021312;
  v5[536862727] = 62194;
  v5[536862728] = -219021312;
  v5[536862729] = 62194;
  v5[536862730] = -219021312;
  v5[536862731] = 62194;
  v5[536862732] = -219021312;
  v5[536862733] = 62194;
  v5[536862734] = -234881024;
  v5[536862735] = -218959118;
  v5[536862737] = -218959360;
  v5[536862738] = 62194;
  v5[536862739] = -234881024;
  v5[536862740] = -218959118;
  v5[536862747] = -202116109;
  v5[536862748] = -202116109;
  Json::Value::Value((Json::Value *)(v3 + 432), jval);
  if ( *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  Json::Value::begin((Json::Value_0 *const)(v3 + 432));
  while ( 1 )
  {
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    Json::Value::end((Json::Value_0 *const)(v3 + 432));
    v6 = Json::ValueIteratorBase::operator!=(
           (const Json::ValueIteratorBase *const)(v3 + 48),
           (const Json::ValueIteratorBase::SelfType *)(v3 + 80));
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = -1800;
    if ( !v6 )
      break;
    v7 = ((v3 + 512) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    if ( *(char *)(((v3 + 512) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 551) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 39) & 7) >= *(_BYTE *)(((v3 + 551) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 512, 40LL);
    }
    Json::ValueIteratorBase::key((Json::ValueIteratorBase *)(v3 + 512));
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v3 + 112);
    if ( !fromJson<std::string>((const Json::Value *)(v3 + 512), (std::string *)(v3 + 112)) )
    {
      *(_DWORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 176) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 207) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 96 + 47) & 7) >= *(_BYTE *)(((v3 + 207) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 176, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 176),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        9527);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)(v3 + 176),
             (const char (*)[21])"key fromJson fails: ");
      *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 96 + 111) & 7) >= *(_BYTE *)(((v3 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 240, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v3 + 240), (Json::Value_0 *)(v3 + 512));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 240));
      std::string::~string((void *)(v3 + 240));
      *(_DWORD *)(((v3 + 240) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 176));
      *(_DWORD *)(((v3 + 176) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v10 = ((v3 + 592) >> 3) + 2147450880;
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 0;
      v11 = Json::ValueIterator::operator*((Json::ValueIterator *const)(v3 + 48));
      Json::Value::Value((Json::Value *)(v3 + 592), v11);
      v12 = (_DWORD *)(((v3 + 672) >> 3) + 2147450880);
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = 0;
      v12[4] = 0;
      v12[5] = 0;
      data::ConfigMonsterInitialPose::ConfigMonsterInitialPose((data::ConfigMonsterInitialPose *const)(v3 + 672));
      if ( !data::ConfigMonsterInitialPose::fromJson(
              (data::ConfigMonsterInitialPose *const)(v3 + 672),
              (const Json::Value *)(v3 + 592)) )
      {
        *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 304) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 79) & 7) >= *(_BYTE *)(((v3 + 335) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 304, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 304),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "mapFromJson",
          9534);
        v14 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)(v3 + 304),
                (const char (*)[28])"value fromJson fails, key: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v14, (const std::string *)(v3 + 112));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 304));
        *(_DWORD *)(((v3 + 304) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v15 = 0;
      }
      else
      {
        v16 = std::unordered_map<std::string,data::ConfigMonsterInitialPose>::emplace<std::string&,data::ConfigMonsterInitialPose&>(
                m,
                (std::string *)(v3 + 112),
                (data::ConfigMonsterInitialPose *)(v3 + 672),
                (std::string *)(v3 + 112),
                v13);
        if ( !v16.second )
        {
          *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 368) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 113) & 7) >= *(_BYTE *)(((v3 + 399) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 368, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 368),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "mapFromJson",
            9539);
          v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 368),
                  (const char (*)[16])"key duplicate: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v17, (const std::string *)(v3 + 112));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 368));
          *(_DWORD *)(((v3 + 368) >> 3) + 0x7FFF8000) = -117901064;
          v2 = 0;
          v15 = 0;
        }
        else
        {
          v15 = 1;
        }
      }
      data::ConfigMonsterInitialPose::~ConfigMonsterInitialPose((data::ConfigMonsterInitialPose *const)(v3 + 672));
      Json::Value::~Value((Json::Value_0 *const)(v3 + 592));
      v9 = v15 == 1;
    }
    std::string::~string((void *)(v3 + 112));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 512));
    v18 = ((v3 + 512) >> 3) + 2147450880;
    *(_DWORD *)v18 = -117901064;
    *(_BYTE *)(v18 + 4) = -8;
    *(_DWORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -117901064;
    v19 = ((v3 + 592) >> 3) + 2147450880;
    *(_DWORD *)v19 = -117901064;
    *(_BYTE *)(v19 + 4) = -8;
    v20 = (_DWORD *)(((v3 + 672) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    v20[2] = -117901064;
    v20[3] = -117901064;
    v20[4] = -117901064;
    v20[5] = -117901064;
    if ( !v9 )
    {
      v21 = 0;
      goto LABEL_32;
    }
    Json::ValueIterator::operator++((Json::ValueIterator *const)(v3 + 48));
  }
  v21 = 1;
LABEL_32:
  *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) = -1800;
  if ( v21 == 1 )
    v2 = 1;
  Json::Value::~Value((Json::Value_0 *const)(v3 + 432));
  if ( v23 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF806C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 116) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v3 >> 3) + 0x7FFF8070) = -168430091;
  }
  return v2;
};

// Line 9548: range 000000000E6807AE-000000000E680A55
int32_t __cdecl data::getMapHashValue(const data::ConfigMonsterInitialPoseMap *map)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigMonsterInitialPose>,false,true>::reference v7; // [rsp+18h] [rbp-B8h]
  std::tuple_element<0,std::pair<const std::string,data::ConfigMonsterInitialPose> >::type *key; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,const std::pair<const std::string,data::ConfigMonsterInitialPose> >::type *val; // [rsp+28h] [rbp-A8h]
  char v10[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:9549 64 8 16 __for_begin:9550 96 8 14 __for_end:9550";
  *(_QWORD *)(v2 + 16) = data::getMapHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::ConfigMonsterInitialPose>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ConfigMonsterInitialPose>::begin(map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<std::string,data::ConfigMonsterInitialPose>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::ConfigMonsterInitialPose>::end(map);
  while ( std::__detail::operator!=<std::pair<std::string const,data::ConfigMonsterInitialPose>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigMonsterInitialPose>,true> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ConfigMonsterInitialPose>,true> *)(v2 + 96)) )
  {
    v7 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::ConfigMonsterInitialPose>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigMonsterInitialPose>,false,true> *const)(v2 + 64));
    key = std::get<0ul,std::string const,data::ConfigMonsterInitialPose>(v7);
    val = (std::tuple_element<1,const std::pair<const std::string,data::ConfigMonsterInitialPose> >::type *)std::get<1ul,std::string const,data::ConfigMonsterInitialPose>(v7);
    common::tools::HashUtils::appendHash(key, (int32_t *)(v2 + 48));
    HashValue = data::ConfigMonsterInitialPose::getHashValue(val);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    std::__detail::_Node_const_iterator<std::pair<std::string const,data::ConfigMonsterInitialPose>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,data::ConfigMonsterInitialPose>,false,true> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9562: range 000000000E680A56-000000000E6817F8
bool __cdecl data::ConfigAnimal::fromJson(data::ConfigAnimal *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *has_ability_ptr; // [rsp+18h] [rbp-348h]
  const Json::Value *tick_ability_element_ptr; // [rsp+20h] [rbp-340h]
  const Json::Value *simple_combat_ptr; // [rsp+28h] [rbp-338h]
  const Json::Value *has_character_renderering_ptr; // [rsp+30h] [rbp-330h]
  const Json::Value *can_env_animal_change_animator_ptr; // [rsp+38h] [rbp-328h]
  char v13[800]; // [rsp+40h] [rbp-320h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(768LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "15 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 32 "
                        "9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9"
                        " <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigAnimal::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "hasAbility",
    (const std::allocator<char> *)(v2 + 48));
  has_ability_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( has_ability_ptr && !fromJson<bool>(has_ability_ptr, &this->has_ability) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9572);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[32])"fromJson for: hasAbility fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "tickAbilityElement",
      (const std::allocator<char> *)(v2 + 64));
    tick_ability_element_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( tick_ability_element_ptr && !fromJson<bool>(tick_ability_element_ptr, &this->tick_ability_element) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        9584);
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[40])"fromJson for: tickAbilityElement fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "simpleCombat",
        (const std::allocator<char> *)(v2 + 80));
      simple_combat_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( simple_combat_ptr && !fromJson<bool>(simple_combat_ptr, &this->simple_combat) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          9596);
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[34])"fromJson for: simpleCombat fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "hasCharacterRenderering",
          (const std::allocator<char> *)(v2 + 96));
        has_character_renderering_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( has_character_renderering_ptr
          && !fromJson<bool>(has_character_renderering_ptr, &this->has_character_renderering) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9608);
          common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[45])"fromJson for: hasCharacterRenderering fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "canEnvAnimalChangeAnimator",
            (const std::allocator<char> *)(v2 + 112));
          can_env_animal_change_animator_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( can_env_animal_change_animator_ptr
            && !fromJson<bool>(can_env_animal_change_animator_ptr, &this->can_env_animal_change_animator) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              9620);
            common::milog::MiLogStream::operator<<<char [48],(char *[48])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[48])"fromJson for: canEnvAnimalChangeAnimator fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            v6 = ((_BYTE)this + 5) & 7;
            v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
            if ( (_BYTE)v7 )
              __asan_report_store1(&this->is_json_loaded, v6, v7);
            this->is_json_loaded = 1;
            result = 1;
          }
        }
      }
    }
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9628: range 000000000E6817FA-000000000E681AAC
int32_t __cdecl data::ConfigAnimal::getHashValue(const data::ConfigAnimal *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  __int64 v11; // rsi
  __int64 v12; // rdx
  __int64 v13; // rsi
  __int64 v14; // rdx
  int32_t result; // eax
  char v16[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9629";
  *(_QWORD *)(v2 + 16) = data::ConfigAnimal::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  v5 = (unsigned __int8)this & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(this, v5, v6);
  common::tools::HashUtils::appendHash(this->has_ability, (int32_t *)(v2 + 32));
  v7 = ((_BYTE)this + 1) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->tick_ability_element >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->tick_ability_element >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->tick_ability_element, v7, v8);
  common::tools::HashUtils::appendHash(this->tick_ability_element, (int32_t *)(v2 + 32));
  v9 = ((_BYTE)this + 2) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&this->simple_combat >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->simple_combat >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&this->simple_combat, v9, v10);
  common::tools::HashUtils::appendHash(this->simple_combat, (int32_t *)(v2 + 32));
  v11 = ((_BYTE)this + 3) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&this->has_character_renderering >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&this->has_character_renderering >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&this->has_character_renderering, v11, v12);
  common::tools::HashUtils::appendHash(this->has_character_renderering, (int32_t *)(v2 + 32));
  v13 = ((_BYTE)this + 4) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&this->can_env_animal_change_animator >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&this->can_env_animal_change_animator >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&this->can_env_animal_change_animator, v13, v14);
  common::tools::HashUtils::appendHash(this->can_env_animal_change_animator, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9640: range 000000000E681AAE-000000000E681E03
bool __cdecl data::ConfigCapture::fromJson(data::ConfigCapture *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  data::ConfigCapture *v5; // rsi
  bool result; // al
  const Json::Value *capture_effect_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCapture::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "captureEffect",
    (const std::allocator<char> *)(v2 + 48));
  v5 = (data::ConfigCapture *)(v2 + 64);
  capture_effect_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( capture_effect_ptr && (v5 = this, !fromJson<std::string>(capture_effect_ptr, &this->capture_effect)) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9650);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[35])"fromJson for: captureEffect fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9658: range 000000000E681E04-000000000E681F35
int32_t __cdecl data::ConfigCapture::getHashValue(const data::ConfigCapture *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t result; // eax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9659";
  *(_QWORD *)(v2 + 16) = data::ConfigCapture::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  common::tools::HashUtils::appendHash(&this->capture_effect, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9666: range 000000000E681F36-000000000E68228B
bool __cdecl data::ConfigCaptureGroup::fromJson(data::ConfigCaptureGroup *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  const Json::Value *v5; // rsi
  bool result; // al
  const Json::Value *default_config_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigCaptureGroup::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "defaultConfig",
    (const std::allocator<char> *)(v2 + 48));
  v5 = (const Json::Value *)(v2 + 64);
  default_config_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( default_config_ptr
    && (v5 = default_config_ptr, !data::ConfigCapture::fromJson(&this->default_config, default_config_ptr)) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9676);
    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[35])"fromJson for: defaultConfig fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
      __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9684: range 000000000E68228C-000000000E6823C6
int32_t __cdecl data::ConfigCaptureGroup::getHashValue(const data::ConfigCaptureGroup *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9685";
  *(_QWORD *)(v2 + 16) = data::ConfigCaptureGroup::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  HashValue = data::ConfigCapture::getHashValue(&this->default_config);
  common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9691: range 000000000E6823C7-000000000E682FBC
bool __cdecl data::mapFromJson(const Json::Value *jval, data::ConfigSpecialCameraMap *m)
{
  bool v2; // r15
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // al
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // r14
  _BOOL4 v9; // r14d
  unsigned __int64 v10; // rax
  const Json::Value *v11; // rax
  std::shared_ptr<data::ConfigSpecialCamera> *v12; // r8
  common::milog::MiLogStream *v13; // rax
  int v14; // r14d
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> >,false,true>,bool> v15; // rax
  common::milog::MiLogStream *v16; // rax
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rax
  int v19; // edx
  char v21[752]; // [rsp+20h] [rbp-2F0h] BYREF

  v3 = (unsigned __int64)v21;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(704LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "11 48 16 8 cit:9693 80 16 9 <unknown> 112 16 10 value:9703 144 32 8 key:9696 208 32 9 <unknown> "
                        "272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 40 13 tmp_jval:9692 544 40 13 key_j"
                        "val:9695 624 40 15 value_jval:9702";
  *(_QWORD *)(v3 + 16) = data::mapFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -234881024;
  v5[536862736] = -218959118;
  v5[536862738] = -218959360;
  v5[536862739] = 62194;
  v5[536862740] = -218103808;
  v5[536862741] = -202116109;
  Json::Value::Value((Json::Value *)(v3 + 464), jval);
  if ( *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  Json::Value::begin((Json::Value_0 *const)(v3 + 464));
  while ( 1 )
  {
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    Json::Value::end((Json::Value_0 *const)(v3 + 464));
    v6 = Json::ValueIteratorBase::operator!=(
           (const Json::ValueIteratorBase *const)(v3 + 48),
           (const Json::ValueIteratorBase::SelfType *)(v3 + 80));
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = -1800;
    if ( !v6 )
      break;
    v7 = ((v3 + 544) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    if ( *(char *)(((v3 + 544) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 583) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 + 71) & 7) >= *(_BYTE *)(((v3 + 583) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 544, 40LL);
    }
    Json::ValueIteratorBase::key((Json::ValueIteratorBase *)(v3 + 544));
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v3 + 144);
    if ( !fromJson<std::string>((const Json::Value *)(v3 + 544), (std::string *)(v3 + 144)) )
    {
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 47) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 208, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 208),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        9699);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)(v3 + 208),
             (const char (*)[21])"key fromJson fails: ");
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 64 + 111) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v3 + 272), (Json::Value_0 *)(v3 + 544));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 272));
      std::string::~string((void *)(v3 + 272));
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v10 = ((v3 + 624) >> 3) + 2147450880;
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 0;
      v11 = Json::ValueIterator::operator*((Json::ValueIterator *const)(v3 + 48));
      Json::Value::Value((Json::Value *)(v3 + 624), v11);
      *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::ConfigSpecialCamera::parseFromJson((const Json::Value *)(v3 + 112));
      if ( std::operator==<data::ConfigSpecialCamera>(
             (const std::shared_ptr<data::ConfigSpecialCamera> *)(v3 + 112),
             0LL) )
      {
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "mapFromJson",
          9706);
        v13 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                (common::milog::MiLogStream *const)(v3 + 336),
                (const char (*)[28])"value fromJson fails, key: ");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v13, (const std::string *)(v3 + 144));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v14 = 0;
      }
      else
      {
        v15 = std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::emplace<std::string&,std::shared_ptr<data::ConfigSpecialCamera>&>(
                m,
                (std::string *)(v3 + 144),
                (std::shared_ptr<data::ConfigSpecialCamera> *)(v3 + 112),
                (std::string *)(v3 + 144),
                v12);
        if ( !v15.second )
        {
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 112 + 31) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "mapFromJson",
            9711);
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v3 + 400),
                  (const char (*)[16])"key duplicate: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v16, (const std::string *)(v3 + 144));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
          v2 = 0;
          v14 = 0;
        }
        else
        {
          v14 = 1;
        }
      }
      std::shared_ptr<data::ConfigSpecialCamera>::~shared_ptr((std::shared_ptr<data::ConfigSpecialCamera> *const)(v3 + 112));
      Json::Value::~Value((Json::Value_0 *const)(v3 + 624));
      v9 = v14 == 1;
    }
    std::string::~string((void *)(v3 + 144));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 544));
    v17 = ((v3 + 544) >> 3) + 2147450880;
    *(_DWORD *)v17 = -117901064;
    *(_BYTE *)(v17 + 4) = -8;
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = -117901064;
    v18 = ((v3 + 624) >> 3) + 2147450880;
    *(_DWORD *)v18 = -117901064;
    *(_BYTE *)(v18 + 4) = -8;
    *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -1800;
    if ( !v9 )
    {
      v19 = 0;
      goto LABEL_34;
    }
    Json::ValueIterator::operator++((Json::ValueIterator *const)(v3 + 48));
  }
  v19 = 1;
LABEL_34:
  *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) = -1800;
  if ( v19 == 1 )
    v2 = 1;
  Json::Value::~Value((Json::Value_0 *const)(v3 + 464));
  if ( v21 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 9720: range 000000000E682FBD-000000000E6832CC
int32_t __cdecl data::getMapHashValue(const data::ConfigSpecialCameraMap *map)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int32_t v7; // eax
  int32_t result; // eax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> >,false,true>::reference v9; // [rsp+18h] [rbp-B8h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > >::type *key; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > >::type *val; // [rsp+28h] [rbp-A8h]
  char v12[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 14 hash_code:9721 64 8 16 __for_begin:9722 96 8 14 __for_end:9722";
  *(_QWORD *)(v2 + 16) = data::getMapHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::begin(map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::end(map);
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigSpecialCamera>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> >,true> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> >,true> *)(v2 + 96)) )
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigSpecialCamera>>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> >,false,true> *const)(v2 + 64));
    key = std::get<0ul,std::string const,std::shared_ptr<data::ConfigSpecialCamera>>(v9);
    val = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigSpecialCamera>>(v9);
    common::tools::HashUtils::appendHash(key, (int32_t *)(v2 + 48));
    if ( std::operator!=<data::ConfigSpecialCamera>(0LL, val) )
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<data::ConfigSpecialCamera,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigSpecialCamera,(__gnu_cxx::_Lock_policy)2,false,false> *const)val);
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(v5);
      v6 = *(_QWORD *)v5 + 56LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(*(_QWORD *)v5 + 56LL);
      v7 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
      common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 48));
    }
    std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigSpecialCamera>>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> >,false,true> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9737: range 000000000E6832CE-000000000E6842F7
bool __cdecl data::ConfigClothoid::fromJson(data::ConfigClothoid *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *enable_exit_ptr; // [rsp+10h] [rbp-3D0h]
  const Json::Value *cur_max_ptr; // [rsp+18h] [rbp-3C8h]
  const Json::Value *cur_min_ptr; // [rsp+20h] [rbp-3C0h]
  const Json::Value *speed_max_ptr; // [rsp+28h] [rbp-3B8h]
  const Json::Value *speed_min_ptr; // [rsp+30h] [rbp-3B0h]
  const Json::Value *curve_length_ptr; // [rsp+38h] [rbp-3A8h]
  char v14[928]; // [rsp+40h] [rbp-3A0h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(896LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <"
                        "unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <u"
                        "nknown> 768 32 9 <unknown> 832 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigClothoid::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "enableExit",
    (const std::allocator<char> *)(v2 + 32));
  enable_exit_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( enable_exit_ptr && !fromJson<bool>(enable_exit_ptr, &this->enable_exit) )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9747);
    common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[32])"fromJson for: enableExit fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      "curMax",
      (const std::allocator<char> *)(v2 + 48));
    cur_max_ptr = jsonValueFind(jval, (const std::string *)(v2 + 256));
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( cur_max_ptr && !fromJson<float>(cur_max_ptr, &this->cur_max) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        9759);
      common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[28])"fromJson for: curMax fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "curMin",
        (const std::allocator<char> *)(v2 + 64));
      cur_min_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( cur_min_ptr && !fromJson<float>(cur_min_ptr, &this->cur_min) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          9771);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[28])"fromJson for: curMin fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "speedMax",
          (const std::allocator<char> *)(v2 + 80));
        speed_max_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( speed_max_ptr && !fromJson<float>(speed_max_ptr, &this->speed_max) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9783);
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[30])"fromJson for: speedMax fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "speedMin",
            (const std::allocator<char> *)(v2 + 96));
          speed_min_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( speed_min_ptr && !fromJson<float>(speed_min_ptr, &this->speed_min) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              9795);
            common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[30])"fromJson for: speedMin fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 768),
              "curveLength",
              (const std::allocator<char> *)(v2 + 112));
            curve_length_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
            std::string::~string((void *)(v2 + 768));
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( curve_length_ptr && !fromJson<float>(curve_length_ptr, &this->curve_length) )
            {
              *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 832, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 832),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                9807);
              common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                (common::milog::MiLogStream *const)(v2 + 832),
                (const char (*)[33])"fromJson for: curveLength fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
              result = 0;
            }
            else
            {
              v6 = ((_BYTE)this + 24) & 7;
              v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
              if ( (_BYTE)v7 )
                __asan_report_store1(&this->is_json_loaded, v6, v7);
              this->is_json_loaded = 1;
              result = 1;
            }
          }
        }
      }
    }
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9815: range 000000000E6842F8-000000000E6845FA
int32_t __cdecl data::ConfigClothoid::getHashValue(const data::ConfigClothoid *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9816";
  *(_QWORD *)(v2 + 16) = data::ConfigClothoid::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  v5 = (unsigned __int8)this & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(this, v5, v6);
  common::tools::HashUtils::appendHash(this->enable_exit, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cur_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->cur_max);
  }
  common::tools::HashUtils::appendHash(this->cur_max, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->cur_min >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cur_min >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->cur_min);
  }
  common::tools::HashUtils::appendHash(this->cur_min, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->speed_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->speed_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->speed_max);
  }
  common::tools::HashUtils::appendHash(this->speed_max, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->speed_min >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->speed_min >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->speed_min);
  }
  common::tools::HashUtils::appendHash(this->speed_min, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->curve_length >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->curve_length >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&this->curve_length);
  }
  common::tools::HashUtils::appendHash(this->curve_length, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9828: range 000000000E6845FC-000000000E684956
bool __cdecl data::ConfigUISetting::fromJson(data::ConfigUISetting *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  bool result; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  const Json::Value *radar_hint_ptr; // [rsp+18h] [rbp-E8h]
  char v9[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigUISetting::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "radarHint",
    (const std::allocator<char> *)(v2 + 48));
  radar_hint_ptr = jsonValueFind(jval, (const std::string *)(v2 + 64));
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( radar_hint_ptr && !fromJson<bool>(radar_hint_ptr, &this->radar_hint) )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9838);
    common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[31])"fromJson for: radarHint fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    v6 = ((_BYTE)this + 1) & 7;
    v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
    if ( (_BYTE)v7 )
      __asan_report_store1(&this->is_json_loaded, v6, v7);
    this->is_json_loaded = 1;
    result = 1;
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9846: range 000000000E684958-000000000E684AC2
int32_t __cdecl data::ConfigUISetting::getHashValue(const data::ConfigUISetting *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  __int64 v5; // rsi
  __int64 v6; // rdx
  int32_t result; // eax
  char v8[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 14 hash_code:9847";
  *(_QWORD *)(v2 + 16) = data::ConfigUISetting::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  v5 = (unsigned __int8)this & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(this, v5, v6);
  common::tools::HashUtils::appendHash(this->radar_hint, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9856: range 000000000E6F124A-000000000E6F148B
void __cdecl data::ConfigMonsterRegister::ConfigMonsterRegister(data::ConfigMonsterRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigEntity> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigMonsterRegister::ConfigMonsterRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigMonster>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigMonster",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::operator[](
         &data::g_ConfigEntityMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigEntity>::operator=<data::ConfigMonster>(
    v4,
    (std::shared_ptr<data::ConfigMonster> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigMonster>::~shared_ptr((std::shared_ptr<data::ConfigMonster> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 9859: range 000000000E684AC4-000000000E6852F4
void __cdecl data::ConfigMonster::foreachMember(
        data::ConfigMonster *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[560]; // [rsp+10h] [rbp-230h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(512LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 32 16 22 initial_poses_any:9861 64 16 15 aibeta_any:9863 96 16 19 input_keys_any:9865 128 16 "
                        "13 move_any:9867 160 16 14 audio_any:9869 192 16 21 emoji_bubble_any:9871 224 16 28 character_re"
                        "ndering_any:9873 256 16 15 animal_any:9875 288 16 14 field_any:9877 320 16 22 capture_group_any:"
                        "9879 352 16 26 camera_adjust_map_any:9881 384 16 17 clothoid_any:9883 416 16 19 ui_setting_any:9"
                        "885 448 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonster::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862731] = -219021312;
  v4[536862732] = -219021312;
  v4[536862733] = -219021312;
  v4[536862735] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 448), p_func);
  data::ConfigCharacter::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 448));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 448));
  *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::unordered_map<std::string,data::ConfigMonsterInitialPose> &,std::unordered_map<std::string,data::ConfigMonsterInitialPose>,std::any::_Manager_external<std::unordered_map<std::string,data::ConfigMonsterInitialPose>>,true,true>(
    (std::any *const)(v2 + 32),
    &this->initial_poses);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigAIBeta &,data::ConfigAIBeta,std::any::_Manager_external<data::ConfigAIBeta>,true,true>(
    (std::any *const)(v2 + 64),
    &this->aibeta);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::ConfigKeyInput> &,std::vector<data::ConfigKeyInput>,std::any::_Manager_external<std::vector<data::ConfigKeyInput>>,true,true>(
    (std::any *const)(v2 + 96),
    &this->input_keys);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigMove> &,std::shared_ptr<data::ConfigMove>,std::any::_Manager_external<std::shared_ptr<data::ConfigMove>>,true,true>(
    (std::any *const)(v2 + 128),
    &this->move);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigMonsterAudio> &,std::shared_ptr<data::ConfigMonsterAudio>,std::any::_Manager_external<std::shared_ptr<data::ConfigMonsterAudio>>,true,true>(
    (std::any *const)(v2 + 160),
    &this->audio);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 160));
  *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigEmojiBubble &,data::ConfigEmojiBubble,std::any::_Manager_internal<data::ConfigEmojiBubble>,true,true>(
    (std::any *const)(v2 + 192),
    &this->emoji_bubble);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 192));
  *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigCharacterRendering &,data::ConfigCharacterRendering,std::any::_Manager_external<data::ConfigCharacterRendering>,true,true>(
    (std::any *const)(v2 + 224),
    &this->character_rendering);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 224));
  *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigAnimal &,data::ConfigAnimal,std::any::_Manager_internal<data::ConfigAnimal>,true,true>(
    (std::any *const)(v2 + 256),
    &this->animal);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 256));
  *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigTrigger &,data::ConfigTrigger,std::any::_Manager_external<data::ConfigTrigger>,true,true>(
    (std::any *const)(v2 + 288),
    &this->field);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 288));
  *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigCaptureGroup &,data::ConfigCaptureGroup,std::any::_Manager_external<data::ConfigCaptureGroup>,true,true>(
    (std::any *const)(v2 + 320),
    &this->capture_group);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 320));
  *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>> &,std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>,std::any::_Manager_external<std::unordered_map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>>,true,true>(
    (std::any *const)(v2 + 352),
    &this->camera_adjust_map);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 352));
  *(_WORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigClothoid &,data::ConfigClothoid,std::any::_Manager_external<data::ConfigClothoid>,true,true>(
    (std::any *const)(v2 + 384),
    &this->clothoid);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 384));
  *(_WORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigUISetting &,data::ConfigUISetting,std::any::_Manager_internal<data::ConfigUISetting>,true,true>(
    (std::any *const)(v2 + 416),
    &this->ui_setting);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 416));
  std::any::~any((std::any *const)(v2 + 416));
  std::any::~any((std::any *const)(v2 + 384));
  std::any::~any((std::any *const)(v2 + 352));
  std::any::~any((std::any *const)(v2 + 320));
  std::any::~any((std::any *const)(v2 + 288));
  std::any::~any((std::any *const)(v2 + 256));
  std::any::~any((std::any *const)(v2 + 224));
  std::any::~any((std::any *const)(v2 + 192));
  std::any::~any((std::any *const)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 9890: range 000000000E6852F6-000000000E685406
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigMonster::clone(data::ConfigMonster *const this)
{
  data::ConfigMonster *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigEntity> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonster::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigMonster,data::ConfigMonster&>(
    (common::tools::perf::allocator<data::ConfigMonster,data::ConfigMonster> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigEntity>::shared_ptr<data::ConfigMonster,void>(
    (std::shared_ptr<data::ConfigEntity> *const)this,
    (std::shared_ptr<data::ConfigMonster> *)(v2 + 32));
  std::shared_ptr<data::ConfigMonster>::~shared_ptr((std::shared_ptr<data::ConfigMonster> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 9894: range 000000000E685408-000000000E68544B
data::ConfigMonsterPtr __cdecl data::ConfigMonsterFactory::create(data::ConfigMonsterFactory *const this)
{
  data::ConfigMonsterPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigMonster>();
  result._M_ptr = (std::__shared_ptr<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 9896: range 000000000E68544C-000000000E687AAC
bool __cdecl data::ConfigMonster::fromJson(data::ConfigMonster *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  std::shared_ptr<data::ConfigMove> *v6; // rax
  bool v7; // r14
  unsigned __int64 v8; // rax
  void (__fastcall **v9)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v10)(unsigned __int64, unsigned __int64); // rcx
  std::shared_ptr<data::ConfigMonsterAudio> *v11; // rax
  unsigned __int64 v12; // rax
  unsigned __int64 v13; // rdx
  const Json::Value *v14; // rsi
  bool v15; // bl
  char v17; // [rsp+Fh] [rbp-8F1h]
  const Json::Value *initial_poses_ptr; // [rsp+28h] [rbp-8D8h]
  const Json::Value *aibeta_ptr; // [rsp+30h] [rbp-8D0h]
  const Json::Value *input_keys_ptr; // [rsp+38h] [rbp-8C8h]
  const Json::Value *move_ptr; // [rsp+40h] [rbp-8C0h]
  const Json::Value *audio_ptr; // [rsp+48h] [rbp-8B8h]
  const Json::Value *emoji_bubble_ptr; // [rsp+50h] [rbp-8B0h]
  const Json::Value *character_rendering_ptr; // [rsp+58h] [rbp-8A8h]
  const Json::Value *animal_ptr; // [rsp+60h] [rbp-8A0h]
  const Json::Value *field_ptr; // [rsp+68h] [rbp-898h]
  const Json::Value *capture_group_ptr; // [rsp+70h] [rbp-890h]
  const Json::Value *camera_adjust_map_ptr; // [rsp+78h] [rbp-888h]
  const Json::Value *clothoid_ptr; // [rsp+80h] [rbp-880h]
  const Json::Value *ui_setting_ptr; // [rsp+88h] [rbp-878h]
  char v32[2160]; // [rsp+90h] [rbp-870h] BYREF

  v2 = (unsigned __int64)v32;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2112LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "44 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 16 9 <unknown> 288 16 9 <unknown> 320 16 9 <unknown"
                        "> 352 16 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown>"
                        " 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> "
                        "960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknow"
                        "n> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <un"
                        "known> 1600 32 9 <unknown> 1664 32 9 <unknown> 1728 32 9 <unknown> 1792 32 9 <unknown> 1856 32 9"
                        " <unknown> 1920 32 9 <unknown> 1984 32 9 <unknown> 2048 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonster::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862730] = -219021312;
  v4[536862731] = -219021312;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -218959118;
  v4[536862775] = -218959118;
  v4[536862777] = -218959118;
  v4[536862779] = -218959118;
  v4[536862781] = -218959118;
  v4[536862783] = -218959118;
  v4[536862785] = -202116109;
  if ( !data::ConfigCharacter::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 384, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 384),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      9899);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      (common::milog::MiLogStream *const)(v2 + 384),
      (const char (*)[37])"fromJson for: ConfigCharacter fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
    v5 = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 448),
      "initialPoses",
      (const std::allocator<char> *)(v2 + 48));
    initial_poses_ptr = jsonValueFind(jval, (const std::string *)(v2 + 448));
    std::string::~string((void *)(v2 + 448));
    *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( initial_poses_ptr && !data::mapFromJson(initial_poses_ptr, &this->initial_poses) )
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 512, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 512),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        9911);
      common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
        (common::milog::MiLogStream *const)(v2 + 512),
        (const char (*)[34])"fromJson for: initialPoses fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 576),
        "aibeta",
        (const std::allocator<char> *)(v2 + 64));
      aibeta_ptr = jsonValueFind(jval, (const std::string *)(v2 + 576));
      std::string::~string((void *)(v2 + 576));
      *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( aibeta_ptr && !data::ConfigAIBeta::fromJson(&this->aibeta, aibeta_ptr) )
      {
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          9923);
        common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
          (common::milog::MiLogStream *const)(v2 + 640),
          (const char (*)[28])"fromJson for: aibeta fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 704),
          "inputKeys",
          (const std::allocator<char> *)(v2 + 80));
        input_keys_ptr = jsonValueFind(jval, (const std::string *)(v2 + 704));
        std::string::~string((void *)(v2 + 704));
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( input_keys_ptr && !data::vecFromJson(input_keys_ptr, &this->input_keys) )
        {
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 768, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 768),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            9935);
          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
            (common::milog::MiLogStream *const)(v2 + 768),
            (const char (*)[31])"fromJson for: inputKeys fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 832),
            "move",
            (const std::allocator<char> *)(v2 + 96));
          move_ptr = jsonValueFind(jval, (const std::string *)(v2 + 832));
          std::string::~string((void *)(v2 + 832));
          *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( move_ptr )
          {
            *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            data::ConfigMove::parseFromJson((const Json::Value *)(v2 + 288));
            v6 = std::shared_ptr<data::ConfigMove>::operator=(
                   &this->move,
                   (std::shared_ptr<data::ConfigMove> *)(v2 + 288));
            v7 = std::operator==<data::ConfigMove>(v6, 0LL);
            std::shared_ptr<data::ConfigMove>::~shared_ptr((std::shared_ptr<data::ConfigMove> *const)(v2 + 288));
            *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -1800;
            if ( v7 )
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                9949);
              common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[26])"fromJson for: move fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
          else
          {
            *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            common::tools::perf::make_shared<data::ConfigMove>();
            std::shared_ptr<data::ConfigMove>::operator=(&this->move, (std::shared_ptr<data::ConfigMove> *)(v2 + 256));
            std::shared_ptr<data::ConfigMove>::~shared_ptr((std::shared_ptr<data::ConfigMove> *const)(v2 + 256));
            *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -1800;
          }
          *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 960),
            "audio",
            (const std::allocator<char> *)(v2 + 112));
          audio_ptr = jsonValueFind(jval, (const std::string *)(v2 + 960));
          std::string::~string((void *)(v2 + 960));
          *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( audio_ptr )
          {
            *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
            v8 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMonsterAudioFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonsterAudioFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigMonsterAudioFactory::instance_ptr);
            if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
              v8 = __asan_report_load8(v8);
            v9 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v8;
            if ( *(_BYTE *)((*(_QWORD *)v8 >> 3) + 0x7FFF8000LL) )
              v8 = __asan_report_load8(*(_QWORD *)v8);
            v10 = *v9;
            if ( *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) )
              v8 = __asan_report_store16();
            v10(v2 + 352, v8);
            v11 = std::shared_ptr<data::ConfigMonsterAudio>::operator=(
                    &this->audio,
                    (std::shared_ptr<data::ConfigMonsterAudio> *)(v2 + 352));
            if ( std::operator==<data::ConfigMonsterAudio>(v11, 0LL) )
              goto LABEL_49;
            v12 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMonsterAudio,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonsterAudio,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->audio);
            if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
              v12 = __asan_report_load8(v12);
            v13 = *(_QWORD *)v12 + 48LL;
            if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
              v12 = __asan_report_load8(*(_QWORD *)v12 + 48LL);
            if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, const Json::Value *))v13)(v12, audio_ptr) != 1 )
LABEL_49:
              v17 = 1;
            else
              v17 = 0;
            std::shared_ptr<data::ConfigMonsterAudio>::~shared_ptr((std::shared_ptr<data::ConfigMonsterAudio> *const)(v2 + 352));
            *(_WORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -1800;
            if ( v17 )
            {
              *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1024, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1024),
                &common::milog::MiLogDefault::default_log_obj_,
                1u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                9962);
              common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                (common::milog::MiLogStream *const)(v2 + 1024),
                (const char (*)[27])"fromJson for: audio fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
              *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
            }
          }
          else
          {
            *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
            if ( *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) )
              __asan_report_store16();
            common::tools::perf::make_shared<data::ConfigMonsterAudio>();
            std::shared_ptr<data::ConfigMonsterAudio>::operator=(
              &this->audio,
              (std::shared_ptr<data::ConfigMonsterAudio> *)(v2 + 320));
            std::shared_ptr<data::ConfigMonsterAudio>::~shared_ptr((std::shared_ptr<data::ConfigMonsterAudio> *const)(v2 + 320));
            *(_WORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -1800;
          }
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 128);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 1088),
            "emojiBubble",
            (const std::allocator<char> *)(v2 + 128));
          emoji_bubble_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1088));
          std::string::~string((void *)(v2 + 1088));
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 128);
          *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
          if ( emoji_bubble_ptr && !data::ConfigEmojiBubble::fromJson(&this->emoji_bubble, emoji_bubble_ptr) )
          {
            *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1152, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1152),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              9973);
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
              (common::milog::MiLogStream *const)(v2 + 1152),
              (const char (*)[33])"fromJson for: emojiBubble fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 144);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1216),
              "characterRendering",
              (const std::allocator<char> *)(v2 + 144));
            character_rendering_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1216));
            std::string::~string((void *)(v2 + 1216));
            *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 144);
            *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
            if ( character_rendering_ptr
              && !data::ConfigCharacterRendering::fromJson(&this->character_rendering, character_rendering_ptr) )
            {
              *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1280, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1280),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                9985);
              common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
                (common::milog::MiLogStream *const)(v2 + 1280),
                (const char (*)[40])"fromJson for: characterRendering fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 160);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1344),
                "animal",
                (const std::allocator<char> *)(v2 + 160));
              animal_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1344));
              std::string::~string((void *)(v2 + 1344));
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 160);
              *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
              if ( animal_ptr && !data::ConfigAnimal::fromJson(&this->animal, animal_ptr) )
              {
                *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1408) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1408, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1408),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  9997);
                common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  (common::milog::MiLogStream *const)(v2 + 1408),
                  (const char (*)[28])"fromJson for: animal fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1408));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 176);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1472),
                  "field",
                  (const std::allocator<char> *)(v2 + 176));
                field_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1472));
                std::string::~string((void *)(v2 + 1472));
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 176);
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                if ( field_ptr && !data::ConfigTrigger::fromJson(&this->field, field_ptr) )
                {
                  *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1536) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1536, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1536),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    10009);
                  common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                    (common::milog::MiLogStream *const)(v2 + 1536),
                    (const char (*)[27])"fromJson for: field fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1536));
                  v5 = 0;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 192);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1600),
                    "captureGroup",
                    (const std::allocator<char> *)(v2 + 192));
                  capture_group_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1600));
                  std::string::~string((void *)(v2 + 1600));
                  *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 192);
                  *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                  if ( capture_group_ptr && !data::ConfigCaptureGroup::fromJson(&this->capture_group, capture_group_ptr) )
                  {
                    *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1664) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1664, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1664),
                      &common::milog::MiLogDefault::default_log_obj_,
                      3u,
                      "./src/json_data_auto/ConfigEntity.cpp",
                      "fromJson",
                      10021);
                    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
                      (common::milog::MiLogStream *const)(v2 + 1664),
                      (const char (*)[34])"fromJson for: captureGroup fails!");
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1664));
                    v5 = 0;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 208);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1728),
                      "cameraAdjustMap",
                      (const std::allocator<char> *)(v2 + 208));
                    camera_adjust_map_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1728));
                    std::string::~string((void *)(v2 + 1728));
                    *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 208);
                    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                    if ( camera_adjust_map_ptr && !data::mapFromJson(camera_adjust_map_ptr, &this->camera_adjust_map) )
                    {
                      *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1792) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1792, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1792),
                        &common::milog::MiLogDefault::default_log_obj_,
                        3u,
                        "./src/json_data_auto/ConfigEntity.cpp",
                        "fromJson",
                        10033);
                      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
                        (common::milog::MiLogStream *const)(v2 + 1792),
                        (const char (*)[37])"fromJson for: cameraAdjustMap fails!");
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1792));
                      v5 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 224);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1856),
                        "clothoid",
                        (const std::allocator<char> *)(v2 + 224));
                      clothoid_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1856));
                      std::string::~string((void *)(v2 + 1856));
                      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 224);
                      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                      if ( clothoid_ptr && !data::ConfigClothoid::fromJson(&this->clothoid, clothoid_ptr) )
                      {
                        *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1920) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1920, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1920),
                          &common::milog::MiLogDefault::default_log_obj_,
                          3u,
                          "./src/json_data_auto/ConfigEntity.cpp",
                          "fromJson",
                          10045);
                        common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                          (common::milog::MiLogStream *const)(v2 + 1920),
                          (const char (*)[30])"fromJson for: clothoid fails!");
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1920));
                        v5 = 0;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 240);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 1984),
                          "uiSetting",
                          (const std::allocator<char> *)(v2 + 240));
                        v14 = (const Json::Value *)(v2 + 1984);
                        ui_setting_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1984));
                        std::string::~string((void *)(v2 + 1984));
                        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 240);
                        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                        if ( ui_setting_ptr
                          && (v14 = ui_setting_ptr, !data::ConfigUISetting::fromJson(&this->ui_setting, ui_setting_ptr)) )
                        {
                          *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 2048) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 2048, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 2048),
                            &common::milog::MiLogDefault::default_log_obj_,
                            3u,
                            "./src/json_data_auto/ConfigEntity.cpp",
                            "fromJson",
                            10057);
                          common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
                            (common::milog::MiLogStream *const)(v2 + 2048),
                            (const char (*)[31])"fromJson for: uiSetting fails!");
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2048));
                          v5 = 0;
                        }
                        else
                        {
                          if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                            __asan_report_store1(&this->is_json_loaded, v14, &this->is_json_loaded);
                          this->is_json_loaded = 1;
                          v5 = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v15 = v5;
  if ( v32 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF809C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80AC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80BC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80CC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80DC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80E4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80EC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80FC) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8104) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2112LL, v32);
  }
  return v15;
};

// Line 10064: range 000000000E687AAE-000000000E6885FA
data::ConfigMonsterPtr __cdecl data::ConfigMonster::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigMonsterPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 14 base_ptr:10077 96 16 9 ptr:10083 128 32 9 <unknown> 192 32 9 <unkno"
                        "wn> 256 32 15 type_name:10071 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigMonster::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        10074);
      common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[41])"fromJson for: ConfigMonster $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigMonster>::shared_ptr((std::shared_ptr<data::ConfigMonster> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          10080);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigMonster>::shared_ptr((std::shared_ptr<data::ConfigMonster> *const)jval, 0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigMonster,data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 96));
        if ( std::operator==<data::ConfigMonster>((const std::shared_ptr<data::ConfigMonster> *)(v2 + 96), 0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            10086);
          common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[32])"cast to ConfigMonsterPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigMonster>::shared_ptr((std::shared_ptr<data::ConfigMonster> *const)jval, 0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              10091);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigMonster>::shared_ptr((std::shared_ptr<data::ConfigMonster> *const)jval, 0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 624, v1, v12);
            *(_BYTE *)(v10 + 624) = 1;
            std::shared_ptr<data::ConfigMonster>::shared_ptr(
              (std::shared_ptr<data::ConfigMonster> *const)jval,
              (std::shared_ptr<data::ConfigMonster> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigMonster>::~shared_ptr((std::shared_ptr<data::ConfigMonster> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      10068);
    common::milog::MiLogStream::operator<<<char [46],(char *[46])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[46])"jsonValueFind for: ConfigMonster $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigMonster>::shared_ptr((std::shared_ptr<data::ConfigMonster> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigMonster,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 10099: range 000000000E6885FC-000000000E6889B3
int32_t __cdecl data::ConfigMonster::getHashValue(const data::ConfigMonster *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t MapHashValue; // eax
  int32_t v8; // eax
  int32_t VecHashValue; // eax
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  int32_t v12; // eax
  unsigned __int64 v13; // rax
  unsigned __int64 v14; // rdx
  int32_t v15; // eax
  int32_t v16; // eax
  int32_t v17; // eax
  int32_t v18; // eax
  int32_t v19; // eax
  int32_t v20; // eax
  int32_t v21; // eax
  int32_t v22; // eax
  int32_t v23; // eax
  int32_t result; // eax
  char v25[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 hash_code:10100";
  *(_QWORD *)(v2 + 16) = data::ConfigMonster::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigCharacter::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  MapHashValue = data::getMapHashValue(&this->initial_poses);
  common::tools::HashUtils::appendHash(MapHashValue, (int32_t *)(v2 + 32));
  v8 = data::ConfigAIBeta::getHashValue(&this->aibeta);
  common::tools::HashUtils::appendHash(v8, (int32_t *)(v2 + 32));
  VecHashValue = data::getVecHashValue(&this->input_keys);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigMove>(0LL, &this->move) )
  {
    v10 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMove,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMove,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->move);
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    v11 = *(_QWORD *)v10 + 56LL;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(*(_QWORD *)v10 + 56LL);
    v12 = (*(__int64 (__fastcall **)(unsigned __int64))v11)(v10);
    common::tools::HashUtils::appendHash(v12, (int32_t *)(v2 + 32));
  }
  if ( std::operator!=<data::ConfigMonsterAudio>(0LL, &this->audio) )
  {
    v13 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMonsterAudio,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMonsterAudio,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->audio);
    if ( *(_BYTE *)((v13 >> 3) + 0x7FFF8000) )
      v13 = __asan_report_load8(v13);
    v14 = *(_QWORD *)v13 + 56LL;
    if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
      v13 = __asan_report_load8(*(_QWORD *)v13 + 56LL);
    v15 = (*(__int64 (__fastcall **)(unsigned __int64))v14)(v13);
    common::tools::HashUtils::appendHash(v15, (int32_t *)(v2 + 32));
  }
  v16 = data::ConfigEmojiBubble::getHashValue(&this->emoji_bubble);
  common::tools::HashUtils::appendHash(v16, (int32_t *)(v2 + 32));
  v17 = data::ConfigCharacterRendering::getHashValue(&this->character_rendering);
  common::tools::HashUtils::appendHash(v17, (int32_t *)(v2 + 32));
  v18 = data::ConfigAnimal::getHashValue(&this->animal);
  common::tools::HashUtils::appendHash(v18, (int32_t *)(v2 + 32));
  v19 = data::ConfigTrigger::getHashValue(&this->field);
  common::tools::HashUtils::appendHash(v19, (int32_t *)(v2 + 32));
  v20 = data::ConfigCaptureGroup::getHashValue(&this->capture_group);
  common::tools::HashUtils::appendHash(v20, (int32_t *)(v2 + 32));
  v21 = data::getMapHashValue(&this->camera_adjust_map);
  common::tools::HashUtils::appendHash(v21, (int32_t *)(v2 + 32));
  v22 = data::ConfigClothoid::getHashValue(&this->clothoid);
  common::tools::HashUtils::appendHash(v22, (int32_t *)(v2 + 32));
  v23 = data::ConfigUISetting::getHashValue(&this->ui_setting);
  common::tools::HashUtils::appendHash(v23, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v25 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10127: range 000000000E6F1504-000000000E6F1745
void __cdecl data::ConfigNpcRegister::ConfigNpcRegister(data::ConfigNpcRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigEntity> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigNpcRegister::ConfigNpcRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigNpc>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigNpc",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::operator[](
         &data::g_ConfigEntityMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigEntity>::operator=<data::ConfigNpc>(v4, (std::shared_ptr<data::ConfigNpc> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigNpc>::~shared_ptr((std::shared_ptr<data::ConfigNpc> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 10130: range 000000000E6889B4-000000000E688FC4
void __cdecl data::ConfigNpc::foreachMember(data::ConfigNpc *const this, std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(384LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 32 16 24 default_dither_any:10132 64 16 19 use_shape_any:10134 96 16 28 disappear_duration_an"
                        "y:10136 128 16 16 aibeta_any:10138 160 16 14 move_any:10140 192 16 15 intee_any:10142 224 16 15 "
                        "audio_any:10144 256 16 22 emoji_bubble_any:10146 288 16 31 element_pendant_point_any:10148 320 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigNpc::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862731] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 320), p_func);
  data::ConfigCharacter::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 320));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 320));
  *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(
    (std::any *const)(v2 + 32),
    &this->default_dither);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<bool &,bool,std::any::_Manager_internal<bool>,true,true>((std::any *const)(v2 + 64), &this->use_shape);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<float &,float,std::any::_Manager_internal<float>,true,true>(
    (std::any *const)(v2 + 96),
    &this->disappear_duration);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigAIBeta &,data::ConfigAIBeta,std::any::_Manager_external<data::ConfigAIBeta>,true,true>(
    (std::any *const)(v2 + 128),
    &this->aibeta);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigMove> &,std::shared_ptr<data::ConfigMove>,std::any::_Manager_external<std::shared_ptr<data::ConfigMove>>,true,true>(
    (std::any *const)(v2 + 160),
    &this->move);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 160));
  *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigIntee &,data::ConfigIntee,std::any::_Manager_external<data::ConfigIntee>,true,true>(
    (std::any *const)(v2 + 192),
    &this->intee);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 192));
  *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::shared_ptr<data::ConfigGadgetAudio> &,std::shared_ptr<data::ConfigGadgetAudio>,std::any::_Manager_external<std::shared_ptr<data::ConfigGadgetAudio>>,true,true>(
    (std::any *const)(v2 + 224),
    &this->audio);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 224));
  *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::ConfigEmojiBubble &,data::ConfigEmojiBubble,std::any::_Manager_internal<data::ConfigEmojiBubble>,true,true>(
    (std::any *const)(v2 + 256),
    &this->emoji_bubble);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 256));
  *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::string &,std::string,std::any::_Manager_external<std::string>,true,true>(
    (std::any *const)(v2 + 288),
    &this->element_pendant_point);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 288));
  std::any::~any((std::any *const)(v2 + 288));
  std::any::~any((std::any *const)(v2 + 256));
  std::any::~any((std::any *const)(v2 + 224));
  std::any::~any((std::any *const)(v2 + 192));
  std::any::~any((std::any *const)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 10153: range 000000000E688FC6-000000000E6890D6
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigNpc::clone(data::ConfigNpc *const this)
{
  data::ConfigNpc *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigEntity> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigNpc::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigNpc,data::ConfigNpc&>(
    (common::tools::perf::allocator<data::ConfigNpc,data::ConfigNpc> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigEntity>::shared_ptr<data::ConfigNpc,void>(
    (std::shared_ptr<data::ConfigEntity> *const)this,
    (std::shared_ptr<data::ConfigNpc> *)(v2 + 32));
  std::shared_ptr<data::ConfigNpc>::~shared_ptr((std::shared_ptr<data::ConfigNpc> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = this;
  return result;
};

// Line 10157: range 000000000E6890D8-000000000E68911B
data::ConfigNpcPtr __cdecl data::ConfigNpcFactory::create(data::ConfigNpcFactory *const this)
{
  data::ConfigNpcPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigNpc>();
  result._M_ptr = (std::__shared_ptr<data::ConfigNpc,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 10159: range 000000000E68911C-000000000E68AC3C
bool __cdecl data::ConfigNpc::fromJson(data::ConfigNpc *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5; // al
  std::shared_ptr<data::ConfigMove> *v6; // rax
  bool v7; // r15
  std::shared_ptr<data::ConfigGadgetAudio> *v8; // rax
  bool v9; // r15
  std::string *p_element_pendant_point; // rsi
  bool v11; // bl
  const Json::Value *default_dither_ptr; // [rsp+18h] [rbp-678h]
  const Json::Value *use_shape_ptr; // [rsp+20h] [rbp-670h]
  const Json::Value *disappear_duration_ptr; // [rsp+28h] [rbp-668h]
  const Json::Value *aibeta_ptr; // [rsp+30h] [rbp-660h]
  const Json::Value *move_ptr; // [rsp+38h] [rbp-658h]
  const Json::Value *intee_ptr; // [rsp+40h] [rbp-650h]
  const Json::Value *audio_ptr; // [rsp+48h] [rbp-648h]
  const Json::Value *emoji_bubble_ptr; // [rsp+50h] [rbp-640h]
  const Json::Value *element_pendant_point_ptr; // [rsp+58h] [rbp-638h]
  char v23[1584]; // [rsp+60h] [rbp-630h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1536LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "32 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 16 9 <unknown> 224 16 9 <un"
                        "known> 256 16 9 <unknown> 288 16 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unk"
                        "nown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unkn"
                        "own> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unk"
                        "nown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 32 9 "
                        "<unknown> 1472 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigNpc::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -219021312;
  v4[536862727] = -219021312;
  v4[536862728] = -219021312;
  v4[536862729] = -219021312;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -202116109;
  if ( !data::ConfigCharacter::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 320),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      10162);
    common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
      (common::milog::MiLogStream *const)(v2 + 320),
      (const char (*)[37])"fromJson for: ConfigCharacter fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
    v5 = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 384),
      "defaultDither",
      (const std::allocator<char> *)(v2 + 48));
    default_dither_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
    std::string::~string((void *)(v2 + 384));
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( default_dither_ptr && !fromJson<float>(default_dither_ptr, &this->default_dither) )
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        10174);
      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
        (common::milog::MiLogStream *const)(v2 + 448),
        (const char (*)[35])"fromJson for: defaultDither fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
      v5 = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 512),
        "useShape",
        (const std::allocator<char> *)(v2 + 64));
      use_shape_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
      std::string::~string((void *)(v2 + 512));
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( use_shape_ptr && !fromJson<bool>(use_shape_ptr, &this->use_shape) )
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 576, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 576),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          10186);
        common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
          (common::milog::MiLogStream *const)(v2 + 576),
          (const char (*)[30])"fromJson for: useShape fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
        v5 = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 640),
          "disappearDuration",
          (const std::allocator<char> *)(v2 + 80));
        disappear_duration_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
        std::string::~string((void *)(v2 + 640));
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( disappear_duration_ptr && !fromJson<float>(disappear_duration_ptr, &this->disappear_duration) )
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 704, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 704),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            10198);
          common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
            (common::milog::MiLogStream *const)(v2 + 704),
            (const char (*)[39])"fromJson for: disappearDuration fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
          v5 = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 768),
            "aibeta",
            (const std::allocator<char> *)(v2 + 96));
          aibeta_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
          std::string::~string((void *)(v2 + 768));
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( aibeta_ptr && !data::ConfigAIBeta::fromJson(&this->aibeta, aibeta_ptr) )
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 832, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 832),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              10210);
            common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
              (common::milog::MiLogStream *const)(v2 + 832),
              (const char (*)[28])"fromJson for: aibeta fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
            v5 = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 896),
              "move",
              (const std::allocator<char> *)(v2 + 112));
            move_ptr = jsonValueFind(jval, (const std::string *)(v2 + 896));
            std::string::~string((void *)(v2 + 896));
            *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( move_ptr )
            {
              *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              data::ConfigMove::parseFromJson((const Json::Value *)(v2 + 224));
              v6 = std::shared_ptr<data::ConfigMove>::operator=(
                     &this->move,
                     (std::shared_ptr<data::ConfigMove> *)(v2 + 224));
              v7 = std::operator==<data::ConfigMove>(v6, 0LL);
              std::shared_ptr<data::ConfigMove>::~shared_ptr((std::shared_ptr<data::ConfigMove> *const)(v2 + 224));
              *(_WORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -1800;
              if ( v7 )
              {
                *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 960, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 960),
                  &common::milog::MiLogDefault::default_log_obj_,
                  1u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  10224);
                common::milog::MiLogStream::operator<<<char [26],(char *[26])0>(
                  (common::milog::MiLogStream *const)(v2 + 960),
                  (const char (*)[26])"fromJson for: move fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
                *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
              }
            }
            else
            {
              *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
              if ( *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) )
                __asan_report_store16();
              common::tools::perf::make_shared<data::ConfigMove>();
              std::shared_ptr<data::ConfigMove>::operator=(&this->move, (std::shared_ptr<data::ConfigMove> *)(v2 + 192));
              std::shared_ptr<data::ConfigMove>::~shared_ptr((std::shared_ptr<data::ConfigMove> *const)(v2 + 192));
              *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -1800;
            }
            *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1024),
              "intee",
              (const std::allocator<char> *)(v2 + 128));
            intee_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1024));
            std::string::~string((void *)(v2 + 1024));
            *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( intee_ptr && !data::ConfigIntee::fromJson(&this->intee, intee_ptr) )
            {
              *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1088) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1119) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1088, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1088),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                10235);
              common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                (common::milog::MiLogStream *const)(v2 + 1088),
                (const char (*)[27])"fromJson for: intee fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1088));
              v5 = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1152),
                "audio",
                (const std::allocator<char> *)(v2 + 144));
              audio_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1152));
              std::string::~string((void *)(v2 + 1152));
              *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( audio_ptr )
              {
                *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                data::ConfigGadgetAudio::parseFromJson((const Json::Value *)(v2 + 288));
                v8 = std::shared_ptr<data::ConfigGadgetAudio>::operator=(
                       &this->audio,
                       (std::shared_ptr<data::ConfigGadgetAudio> *)(v2 + 288));
                v9 = std::operator==<data::ConfigGadgetAudio>(v8, 0LL);
                std::shared_ptr<data::ConfigGadgetAudio>::~shared_ptr((std::shared_ptr<data::ConfigGadgetAudio> *const)(v2 + 288));
                *(_WORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -1800;
                if ( v9 )
                {
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1216, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1216),
                    &common::milog::MiLogDefault::default_log_obj_,
                    1u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    10249);
                  common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
                    (common::milog::MiLogStream *const)(v2 + 1216),
                    (const char (*)[27])"fromJson for: audio fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                }
              }
              else
              {
                *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
                if ( *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) )
                  __asan_report_store16();
                common::tools::perf::make_shared<data::ConfigGadgetAudio>();
                std::shared_ptr<data::ConfigGadgetAudio>::operator=(
                  &this->audio,
                  (std::shared_ptr<data::ConfigGadgetAudio> *)(v2 + 256));
                std::shared_ptr<data::ConfigGadgetAudio>::~shared_ptr((std::shared_ptr<data::ConfigGadgetAudio> *const)(v2 + 256));
                *(_WORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -1800;
              }
              *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 160);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1280),
                "emojiBubble",
                (const std::allocator<char> *)(v2 + 160));
              emoji_bubble_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1280));
              std::string::~string((void *)(v2 + 1280));
              *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 160);
              *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
              if ( emoji_bubble_ptr && !data::ConfigEmojiBubble::fromJson(&this->emoji_bubble, emoji_bubble_ptr) )
              {
                *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1344, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1344),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  10260);
                common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                  (common::milog::MiLogStream *const)(v2 + 1344),
                  (const char (*)[33])"fromJson for: emojiBubble fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
                v5 = 0;
              }
              else
              {
                *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 176);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1408),
                  "elementPendantPoint",
                  (const std::allocator<char> *)(v2 + 176));
                p_element_pendant_point = (std::string *)(v2 + 1408);
                element_pendant_point_ptr = jsonValueFind(jval, (const std::string *)(v2 + 1408));
                std::string::~string((void *)(v2 + 1408));
                *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 176);
                *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                if ( element_pendant_point_ptr
                  && (p_element_pendant_point = &this->element_pendant_point,
                      !fromJson<std::string>(element_pendant_point_ptr, &this->element_pendant_point)) )
                {
                  *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1472) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1503) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1472, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1472),
                    &common::milog::MiLogDefault::default_log_obj_,
                    3u,
                    "./src/json_data_auto/ConfigEntity.cpp",
                    "fromJson",
                    10272);
                  common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
                    (common::milog::MiLogStream *const)(v2 + 1472),
                    (const char (*)[41])"fromJson for: elementPendantPoint fails!");
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1472));
                  v5 = 0;
                }
                else
                {
                  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                    __asan_report_store1(&this->is_json_loaded, p_element_pendant_point, &this->is_json_loaded);
                  this->is_json_loaded = 1;
                  v5 = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v11 = v5;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8084) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF808C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF809C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80AC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80B4) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80BC) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1536LL, v23);
  }
  return v11;
};

// Line 10279: range 000000000E68AC3E-000000000E68B78A
data::ConfigNpcPtr __cdecl data::ConfigNpc::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigNpcPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 14 base_ptr:10292 96 16 9 ptr:10298 128 32 9 <unknown> 192 32 9 <unkno"
                        "wn> 256 32 15 type_name:10286 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigNpc::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        10289);
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[37])"fromJson for: ConfigNpc $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigNpc>::shared_ptr((std::shared_ptr<data::ConfigNpc> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          10295);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigNpc>::shared_ptr((std::shared_ptr<data::ConfigNpc> *const)jval, 0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigNpc,data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 96));
        if ( std::operator==<data::ConfigNpc>((const std::shared_ptr<data::ConfigNpc> *)(v2 + 96), 0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            10301);
          common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[28])"cast to ConfigNpcPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigNpc>::shared_ptr((std::shared_ptr<data::ConfigNpc> *const)jval, 0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigNpc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigNpc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              10306);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigNpc>::shared_ptr((std::shared_ptr<data::ConfigNpc> *const)jval, 0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigNpc,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigNpc,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 624, v1, v12);
            *(_BYTE *)(v10 + 624) = 1;
            std::shared_ptr<data::ConfigNpc>::shared_ptr(
              (std::shared_ptr<data::ConfigNpc> *const)jval,
              (std::shared_ptr<data::ConfigNpc> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigNpc>::~shared_ptr((std::shared_ptr<data::ConfigNpc> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      10283);
    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[42])"jsonValueFind for: ConfigNpc $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigNpc>::shared_ptr((std::shared_ptr<data::ConfigNpc> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigNpc,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 10314: range 000000000E68B78C-000000000E68BB41
int32_t __cdecl data::ConfigNpc::getHashValue(const data::ConfigNpc *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  int32_t v9; // eax
  unsigned __int64 v10; // rax
  unsigned __int64 v11; // rdx
  int32_t v12; // eax
  int32_t v13; // eax
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rdx
  int32_t v16; // eax
  int32_t v17; // eax
  int32_t result; // eax
  char v19[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 hash_code:10315";
  *(_QWORD *)(v2 + 16) = data::ConfigNpc::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigCharacter::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  if ( *(_BYTE *)(((unsigned __int64)&this->default_dither >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->default_dither >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->default_dither);
  }
  common::tools::HashUtils::appendHash(this->default_dither, (int32_t *)(v2 + 32));
  v7 = ((_BYTE)this + 92) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->use_shape >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->use_shape >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&this->use_shape, v7, v8);
  common::tools::HashUtils::appendHash(this->use_shape, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((unsigned __int64)&this->disappear_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->disappear_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&this->disappear_duration);
  }
  common::tools::HashUtils::appendHash(this->disappear_duration, (int32_t *)(v2 + 32));
  v9 = data::ConfigAIBeta::getHashValue(&this->aibeta);
  common::tools::HashUtils::appendHash(v9, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigMove>(0LL, &this->move) )
  {
    v10 = (unsigned __int64)std::__shared_ptr_access<data::ConfigMove,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigMove,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->move);
    if ( *(_BYTE *)((v10 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(v10);
    v11 = *(_QWORD *)v10 + 56LL;
    if ( *(_BYTE *)((v11 >> 3) + 0x7FFF8000) )
      v10 = __asan_report_load8(*(_QWORD *)v10 + 56LL);
    v12 = (*(__int64 (__fastcall **)(unsigned __int64))v11)(v10);
    common::tools::HashUtils::appendHash(v12, (int32_t *)(v2 + 32));
  }
  v13 = data::ConfigIntee::getHashValue(&this->intee);
  common::tools::HashUtils::appendHash(v13, (int32_t *)(v2 + 32));
  if ( std::operator!=<data::ConfigGadgetAudio>(0LL, &this->audio) )
  {
    v14 = (unsigned __int64)std::__shared_ptr_access<data::ConfigGadgetAudio,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigGadgetAudio,(__gnu_cxx::_Lock_policy)2,false,false> *const)&this->audio);
    if ( *(_BYTE *)((v14 >> 3) + 0x7FFF8000) )
      v14 = __asan_report_load8(v14);
    v15 = *(_QWORD *)v14 + 56LL;
    if ( *(_BYTE *)((v15 >> 3) + 0x7FFF8000) )
      v14 = __asan_report_load8(*(_QWORD *)v14 + 56LL);
    v16 = (*(__int64 (__fastcall **)(unsigned __int64))v15)(v14);
    common::tools::HashUtils::appendHash(v16, (int32_t *)(v2 + 32));
  }
  v17 = data::ConfigEmojiBubble::getHashValue(&this->emoji_bubble);
  common::tools::HashUtils::appendHash(v17, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->element_pendant_point, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10335: range 000000000E68BB42-000000000E68BDA1
const char *__cdecl data::enumValToStr(data::DropElemControlType e)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  const char *result; // rax
  const char *v5; // rsi
  common::milog::MiLogStream *v6; // rcx
  char v7; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 4 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::enumValToStr;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234556943;
  v3[536862723] = -202116109;
  if ( e )
  {
    if ( e == None_24 )
    {
      result = "None";
    }
    else
    {
      if ( *(char *)(((v1 + 64) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) != 0
        && (char)((v1 + 95) & 7) >= *(_BYTE *)(((v1 + 95) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v1 + 64, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v1 + 64),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumValToStr",
        10343);
      v5 = "invalid e:";
      v6 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
             (common::milog::MiLogStream *const)(v1 + 64),
             (const char (*)[11])"invalid e:");
      v7 = *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000);
      if ( v7 != 0 && v7 <= 3 )
      {
        LOBYTE(v5) = v7 != 0;
        __asan_report_store4(v1 + 48, v5);
      }
      *(_DWORD *)(v1 + 48) = e;
      common::milog::MiLogStream::operator<<<int,(int *)0>(v6, (const int *)(v1 + 48));
      *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v1 + 64));
      result = (const char *)&unk_1A36E8A0;
    }
  }
  else
  {
    result = off_1A382080;
  }
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF800C) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10349: range 000000000E68BDA2-000000000E68C5D9
bool __cdecl data::enumStrToVal(const std::string *s, data::DropElemControlType *e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  std::pair<const std::string,data::DropElemControlType> *i; // r14
  unsigned __int64 v7; // rax
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rdx
  std::_Rb_tree_iterator<std::pair<const std::string,data::DropElemControlType> >::pointer v11; // rax
  data::DropElemControlType second; // ecx
  char v13; // dl
  data::DropElemControlType *ea; // [rsp+10h] [rbp-1E0h]
  char v15[464]; // [rsp+20h] [rbp-1D0h] BYREF

  ea = e;
  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(416LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 8 8 it:10360 144 8 9 <"
                        "unknown> 176 32 9 <unknown> 240 32 9 <unknown> 304 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234556927;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862726] = -219021312;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862732] = -202116109;
  if ( (unsigned __int8)std::string::empty(s) )
  {
    if ( *(char *)(((v2 + 176) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 47) & 7) >= *(_BYTE *)(((v2 + 207) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 176, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 176),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "enumStrToVal",
      10352);
    common::milog::MiLogStream::operator<<<char [12],(char *[12])0>(
      (common::milog::MiLogStream *const)(v2 + 176),
      (const char (*)[12])"s is empty!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 176));
    result = 0;
  }
  else
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(std::string const&,data::DropElemControlType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(std::string const&,data::DropElemControlType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 80, e);
      *(_DWORD *)(v2 + 80) = 0;
      std::pair<std::string const,data::DropElemControlType>::pair<char const(&)[4],data::DropElemControlType,true>(
        (std::pair<const std::string,data::DropElemControlType> *const)(v2 + 304),
        (const char (*)[4])off_1A382080,
        (data::DropElemControlType *)(v2 + 80));
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, off_1A382080);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::DropElemControlType>::pair<char const(&)[5],data::DropElemControlType,true>(
        (std::pair<const std::string,data::DropElemControlType> *const)(v2 + 344),
        (const char (*)[5])"None",
        (data::DropElemControlType *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::DropElemControlType>>::allocator((std::allocator<std::pair<const std::string,data::DropElemControlType> > *const)(v2 + 64));
      std::map<std::string,data::DropElemControlType>::map(
        &data::enumStrToVal(std::string const&,data::DropElemControlType &)::m,
        (std::initializer_list<std::pair<const std::string,data::DropElemControlType> >)__PAIR128__(2LL, v2 + 304),
        (const std::less<std::string > *)(v2 + 48),
        (const std::map<std::string,data::DropElemControlType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(std::string const&,data::DropElemControlType &)::m);
      e = (data::DropElemControlType *)&data::enumStrToVal(std::string const&,data::DropElemControlType &)::m;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,data::DropElemControlType>::~map,
        &data::enumStrToVal(std::string const&,data::DropElemControlType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::DropElemControlType>>::~allocator((std::allocator<std::pair<const std::string,data::DropElemControlType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::DropElemControlType> *)(v2 + 384);
            i != (std::pair<const std::string,data::DropElemControlType> *)(v2 + 304);
            std::pair<std::string const,data::DropElemControlType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 304) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, e);
    *(std::map<std::string,data::DropElemControlType>::iterator *)(v2 + 112) = std::map<std::string,data::DropElemControlType>::find(
                                                                                 &data::enumStrToVal(std::string const&,data::DropElemControlType &)::m,
                                                                                 s);
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, s);
    *(std::map<std::string,data::DropElemControlType>::iterator *)(v2 + 144) = std::map<std::string,data::DropElemControlType>::end(&data::enumStrToVal(std::string const&,data::DropElemControlType &)::m);
    v8 = (char *)(v2 + 144);
    v9 = std::operator==(
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::DropElemControlType> >::_Self *)(v2 + 112),
           (const std::_Rb_tree_iterator<std::pair<const std::string,data::DropElemControlType> >::_Self *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 111) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 240, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 240),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "enumStrToVal",
        10363);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 240),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v10, s);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
      result = 0;
    }
    else
    {
      v11 = std::_Rb_tree_iterator<std::pair<std::string const,data::DropElemControlType>>::operator->((const std::_Rb_tree_iterator<std::pair<const std::string,data::DropElemControlType> > *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)(((unsigned __int64)ea >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)(((unsigned __int8)ea & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(ea, v8);
      }
      *ea = second;
      result = 1;
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = -168430091;
  }
  return result;
};

// Line 10371: range 000000000E68C5DA-000000000E68C609
const char *__cdecl data::getDescription(data::DropElemControlType e)
{
  if ( e == All_2 )
    return off_1A382080;
  if ( e == None_24 )
    return "None";
  return "unknown enum value!";
};

// Line 10387: range 000000000E6F1B26-000000000E6F1D67
void __cdecl data::ConfigLevelEntityRegister::ConfigLevelEntityRegister(data::ConfigLevelEntityRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigEntity> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigLevelEntityRegister::ConfigLevelEntityRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigLevelEntity>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigLevelEntity",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::operator[](
         &data::g_ConfigEntityMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigEntity>::operator=<data::ConfigLevelEntity>(
    v4,
    (std::shared_ptr<data::ConfigLevelEntity> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigLevelEntity>::~shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 10390: range 000000000E68C60A-000000000E68CA90
void __cdecl data::ConfigLevelEntity::foreachMember(
        data::ConfigLevelEntity *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  char v5[336]; // [rsp+10h] [rbp-150h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 32 16 32 drop_elem_control_type_any:10392 64 16 19 abilities_any:10394 96 16 26 avatar_abiliti"
                        "es_any:10396 128 16 24 team_abilities_any:10398 160 16 27 monster_abilities_any:10400 192 16 36 "
                        "preload_monster_entity_ids_any:10402 224 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigLevelEntity::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862724] = -219021312;
  v4[536862725] = -219021312;
  v4[536862726] = -219021312;
  v4[536862728] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 224), p_func);
  data::ConfigEntity::foreachMember((data::ConfigEntity *const)this, (std::function<void(std::any&)> *)(v2 + 224));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 224));
  *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<data::DropElemControlType &,data::DropElemControlType,std::any::_Manager_internal<data::DropElemControlType>,true,true>(
    (std::any *const)(v2 + 32),
    &this->drop_elem_control_type);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::ConfigEntityAbilityEntry> &,std::vector<data::ConfigEntityAbilityEntry>,std::any::_Manager_external<std::vector<data::ConfigEntityAbilityEntry>>,true,true>(
    (std::any *const)(v2 + 64),
    &this->abilities);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 64));
  *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::ConfigEntityAbilityEntry> &,std::vector<data::ConfigEntityAbilityEntry>,std::any::_Manager_external<std::vector<data::ConfigEntityAbilityEntry>>,true,true>(
    (std::any *const)(v2 + 96),
    &this->avatar_abilities);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 96));
  *(_WORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::ConfigEntityAbilityEntry> &,std::vector<data::ConfigEntityAbilityEntry>,std::any::_Manager_external<std::vector<data::ConfigEntityAbilityEntry>>,true,true>(
    (std::any *const)(v2 + 128),
    &this->team_abilities);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 128));
  *(_WORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::ConfigEntityAbilityEntry> &,std::vector<data::ConfigEntityAbilityEntry>,std::any::_Manager_external<std::vector<data::ConfigEntityAbilityEntry>>,true,true>(
    (std::any *const)(v2 + 160),
    &this->monster_abilities);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 160));
  *(_WORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<unsigned int> &,std::vector<unsigned int>,std::any::_Manager_external<std::vector<unsigned int>>,true,true>(
    (std::any *const)(v2 + 192),
    &this->preload_monster_entity_ids);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 192));
  std::any::~any((std::any *const)(v2 + 192));
  std::any::~any((std::any *const)(v2 + 160));
  std::any::~any((std::any *const)(v2 + 128));
  std::any::~any((std::any *const)(v2 + 96));
  std::any::~any((std::any *const)(v2 + 64));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = -168430091;
  }
};

// Line 10407: range 000000000E68CA92-000000000E68CBA2
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigLevelEntity::clone(data::ConfigLevelEntity *const this)
{
  data::ConfigLevelEntity *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigEntity> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigLevelEntity::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigLevelEntity,data::ConfigLevelEntity&>(
    (common::tools::perf::allocator<data::ConfigLevelEntity,data::ConfigLevelEntity> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigEntity>::shared_ptr<data::ConfigLevelEntity,void>(
    (std::shared_ptr<data::ConfigEntity> *const)this,
    (std::shared_ptr<data::ConfigLevelEntity> *)(v2 + 32));
  std::shared_ptr<data::ConfigLevelEntity>::~shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 10411: range 000000000E68CBA4-000000000E68CBE7
data::ConfigLevelEntityPtr __cdecl data::ConfigLevelEntityFactory::create(data::ConfigLevelEntityFactory *const this)
{
  data::ConfigLevelEntityPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigLevelEntity>();
  result._M_ptr = (std::__shared_ptr<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 10413: range 000000000E68CBE8-000000000E68DE59
bool __cdecl data::ConfigLevelEntity::fromJson(data::ConfigLevelEntity *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  bool v6; // r14
  data::UInt32Array *p_preload_monster_entity_ids; // rsi
  Json::Value *drop_elem_control_type_ptr; // [rsp+10h] [rbp-460h]
  const Json::Value *abilities_ptr; // [rsp+18h] [rbp-458h]
  const Json::Value *avatar_abilities_ptr; // [rsp+20h] [rbp-450h]
  const Json::Value *team_abilities_ptr; // [rsp+28h] [rbp-448h]
  const Json::Value *monster_abilities_ptr; // [rsp+30h] [rbp-440h]
  const Json::Value *preload_monster_entity_ids_ptr; // [rsp+38h] [rbp-438h]
  char v15[1072]; // [rsp+40h] [rbp-430h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(1024LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "20 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <"
                        "unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <u"
                        "nknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigLevelEntity::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -202116109;
  if ( !data::ConfigEntity::fromJson((data::ConfigEntity *const)this, jval) )
  {
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      10416);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 128),
      (const char (*)[34])"fromJson for: ConfigEntity fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 32);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      "dropElemControlType",
      (const std::allocator<char> *)(v2 + 32));
    drop_elem_control_type_ptr = (Json::Value *)jsonValueFind(jval, (const std::string *)(v2 + 192));
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 32);
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    if ( !drop_elem_control_type_ptr )
      goto LABEL_15;
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    Json::Value::asString[abi:cxx11]((Json::String *)(v2 + 256), (Json::Value_0 *)drop_elem_control_type_ptr);
    v6 = !data::enumStrToVal((const std::string *)(v2 + 256), &this->drop_elem_control_type);
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    if ( v6 )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        10428);
      common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[41])"fromJson for: dropElemControlType fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      result = 0;
    }
    else
    {
LABEL_15:
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 48);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 384),
        "abilities",
        (const std::allocator<char> *)(v2 + 48));
      abilities_ptr = jsonValueFind(jval, (const std::string *)(v2 + 384));
      std::string::~string((void *)(v2 + 384));
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 48);
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      if ( abilities_ptr && !data::vecFromJson(abilities_ptr, &this->abilities) )
      {
        *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 448, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 448),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          10440);
        common::milog::MiLogStream::operator<<<char [31],(char *[31])0>(
          (common::milog::MiLogStream *const)(v2 + 448),
          (const char (*)[31])"fromJson for: abilities fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
        result = 0;
      }
      else
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 64);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 512),
          "avatarAbilities",
          (const std::allocator<char> *)(v2 + 64));
        avatar_abilities_ptr = jsonValueFind(jval, (const std::string *)(v2 + 512));
        std::string::~string((void *)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 64);
        *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( avatar_abilities_ptr && !data::vecFromJson(avatar_abilities_ptr, &this->avatar_abilities) )
        {
          *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 576, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 576),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "fromJson",
            10452);
          common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(
            (common::milog::MiLogStream *const)(v2 + 576),
            (const char (*)[37])"fromJson for: avatarAbilities fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
          result = 0;
        }
        else
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 80);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 640),
            "teamAbilities",
            (const std::allocator<char> *)(v2 + 80));
          team_abilities_ptr = jsonValueFind(jval, (const std::string *)(v2 + 640));
          std::string::~string((void *)(v2 + 640));
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 80);
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
          if ( team_abilities_ptr && !data::vecFromJson(team_abilities_ptr, &this->team_abilities) )
          {
            *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 704) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 735) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 704, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 704),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "fromJson",
              10464);
            common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
              (common::milog::MiLogStream *const)(v2 + 704),
              (const char (*)[35])"fromJson for: teamAbilities fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 704));
            result = 0;
          }
          else
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 96);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 768),
              "monsterAbilities",
              (const std::allocator<char> *)(v2 + 96));
            monster_abilities_ptr = jsonValueFind(jval, (const std::string *)(v2 + 768));
            std::string::~string((void *)(v2 + 768));
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 96);
            *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
            if ( monster_abilities_ptr && !data::vecFromJson(monster_abilities_ptr, &this->monster_abilities) )
            {
              *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 832) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 863) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 832, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 832),
                &common::milog::MiLogDefault::default_log_obj_,
                3u,
                "./src/json_data_auto/ConfigEntity.cpp",
                "fromJson",
                10476);
              common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                (common::milog::MiLogStream *const)(v2 + 832),
                (const char (*)[38])"fromJson for: monsterAbilities fails!");
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 832));
              result = 0;
            }
            else
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 112);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 896),
                "preloadMonsterEntityIDs",
                (const std::allocator<char> *)(v2 + 112));
              p_preload_monster_entity_ids = (data::UInt32Array *)(v2 + 896);
              preload_monster_entity_ids_ptr = jsonValueFind(jval, (const std::string *)(v2 + 896));
              std::string::~string((void *)(v2 + 896));
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 112);
              *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
              if ( preload_monster_entity_ids_ptr
                && (p_preload_monster_entity_ids = &this->preload_monster_entity_ids,
                    !data::arrFromJson(preload_monster_entity_ids_ptr, &this->preload_monster_entity_ids)) )
              {
                *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 960) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 991) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 960, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 960),
                  &common::milog::MiLogDefault::default_log_obj_,
                  3u,
                  "./src/json_data_auto/ConfigEntity.cpp",
                  "fromJson",
                  10488);
                common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
                  (common::milog::MiLogStream *const)(v2 + 960),
                  (const char (*)[45])"fromJson for: preloadMonsterEntityIDs fails!");
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 960));
                result = 0;
              }
              else
              {
                if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
                  __asan_report_store1(&this->is_json_loaded, p_preload_monster_entity_ids, &this->is_json_loaded);
                this->is_json_loaded = 1;
                result = 1;
              }
            }
          }
        }
      }
    }
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8054) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8074) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF807C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8078) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10495: range 000000000E68DE5A-000000000E68E9A6
data::ConfigLevelEntityPtr __cdecl data::ConfigLevelEntity::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigLevelEntityPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 14 base_ptr:10508 96 16 9 ptr:10514 128 32 9 <unknown> 192 32 9 <unkno"
                        "wn> 256 32 15 type_name:10502 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigLevelEntity::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        10505);
      common::milog::MiLogStream::operator<<<char [45],(char *[45])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[45])"fromJson for: ConfigLevelEntity $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigLevelEntity>::shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)jval, 0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          10511);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigLevelEntity>::shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)jval, 0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigLevelEntity,data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 96));
        if ( std::operator==<data::ConfigLevelEntity>((const std::shared_ptr<data::ConfigLevelEntity> *)(v2 + 96), 0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            10517);
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[36])"cast to ConfigLevelEntityPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigLevelEntity>::shared_ptr(
            (std::shared_ptr<data::ConfigLevelEntity> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              10522);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigLevelEntity>::shared_ptr(
              (std::shared_ptr<data::ConfigLevelEntity> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 624, v1, v12);
            *(_BYTE *)(v10 + 624) = 1;
            std::shared_ptr<data::ConfigLevelEntity>::shared_ptr(
              (std::shared_ptr<data::ConfigLevelEntity> *const)jval,
              (std::shared_ptr<data::ConfigLevelEntity> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigLevelEntity>::~shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      10499);
    common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[50])"jsonValueFind for: ConfigLevelEntity $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigLevelEntity>::shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)jval, 0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 10530: range 000000000E68E9A8-000000000E68EBCE
int32_t __cdecl data::ConfigLevelEntity::getHashValue(const data::ConfigLevelEntity *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t VecHashValue; // eax
  int32_t v8; // eax
  int32_t v9; // eax
  int32_t v10; // eax
  int32_t ArrHashValue; // eax
  int32_t result; // eax
  char v13[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 hash_code:10531";
  *(_QWORD *)(v2 + 16) = data::ConfigLevelEntity::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigEntity::getHashValue((const data::ConfigEntity *const)this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_elem_control_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->drop_elem_control_type >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_load4(&this->drop_elem_control_type);
  }
  common::tools::HashUtils::appendHash(this->drop_elem_control_type, (int32_t *)(v2 + 32));
  VecHashValue = data::getVecHashValue(&this->abilities);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  v8 = data::getVecHashValue(&this->avatar_abilities);
  common::tools::HashUtils::appendHash(v8, (int32_t *)(v2 + 32));
  v9 = data::getVecHashValue(&this->team_abilities);
  common::tools::HashUtils::appendHash(v9, (int32_t *)(v2 + 32));
  v10 = data::getVecHashValue(&this->monster_abilities);
  common::tools::HashUtils::appendHash(v10, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->preload_monster_entity_ids);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10542: range 000000000E68EBCF-000000000E68F9C5
bool __cdecl data::mapFromJson(const Json::Value *jval, data::ConfigConfigLevelEntityMap *m)
{
  bool v2; // r15
  unsigned __int64 v3; // r13
  __int64 v4; // rax
  _DWORD *v5; // r12
  bool v6; // al
  unsigned __int64 v7; // rax
  common::milog::MiLogStream *v8; // r14
  _BOOL4 v9; // r14d
  unsigned __int64 v10; // rax
  const Json::Value *v11; // rax
  unsigned __int64 v12; // rax
  void (__fastcall **v13)(unsigned __int64, unsigned __int64); // rdx
  void (__fastcall *v14)(unsigned __int64, unsigned __int64); // rcx
  int v15; // r14d
  unsigned __int64 v16; // rax
  unsigned __int64 v17; // rdx
  std::shared_ptr<data::ConfigLevelEntity> *v18; // r8
  common::milog::MiLogStream *v19; // rax
  std::pair<std::__detail::_Node_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true>,bool> v20; // rax
  common::milog::MiLogStream *v21; // rax
  unsigned __int64 v22; // rax
  unsigned __int64 v23; // rax
  int v24; // edx
  char v26[816]; // [rsp+20h] [rbp-330h] BYREF

  v3 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v4 = __asan_stack_malloc_4(768LL);
    if ( v4 )
      v3 = v4;
  }
  *(_QWORD *)v3 = 1102416563LL;
  *(_QWORD *)(v3 + 8) = "12 48 16 9 cit:10544 80 16 9 <unknown> 112 16 11 value:10554 144 32 9 key:10547 208 32 9 <unknow"
                        "n> 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 32 9 <unknown> 528 40 14 tmp_jva"
                        "l:10543 608 40 14 key_jval:10546 688 40 16 value_jval:10553";
  *(_QWORD *)(v3 + 16) = data::mapFromJson;
  v5 = (_DWORD *)(v3 >> 3);
  v5[536862720] = -235802127;
  v5[536862721] = 61937;
  v5[536862722] = 62194;
  v5[536862723] = 62194;
  v5[536862724] = 62194;
  v5[536862725] = -219021312;
  v5[536862726] = 62194;
  v5[536862727] = -219021312;
  v5[536862728] = 62194;
  v5[536862729] = -219021312;
  v5[536862730] = 62194;
  v5[536862731] = -219021312;
  v5[536862732] = 62194;
  v5[536862733] = -219021312;
  v5[536862734] = 62194;
  v5[536862735] = -219021312;
  v5[536862736] = 62194;
  v5[536862737] = -234881024;
  v5[536862738] = -218959118;
  v5[536862740] = -218959360;
  v5[536862741] = 62194;
  v5[536862742] = -218103808;
  v5[536862743] = -202116109;
  Json::Value::Value((Json::Value *)(v3 + 528), jval);
  if ( *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  Json::Value::begin((Json::Value_0 *const)(v3 + 528));
  while ( 1 )
  {
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = 0;
    if ( *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) )
      __asan_report_store16();
    Json::Value::end((Json::Value_0 *const)(v3 + 528));
    v6 = Json::ValueIteratorBase::operator!=(
           (const Json::ValueIteratorBase *const)(v3 + 48),
           (const Json::ValueIteratorBase::SelfType *)(v3 + 80));
    *(_WORD *)(((v3 + 80) >> 3) + 0x7FFF8000) = -1800;
    if ( !v6 )
      break;
    v7 = ((v3 + 608) >> 3) + 2147450880;
    *(_DWORD *)v7 = 0;
    *(_BYTE *)(v7 + 4) = 0;
    if ( *(char *)(((v3 + 608) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v3 + 647) >> 3) + 0x7FFF8000) != 0
      && (char)((v3 - 121) & 7) >= *(_BYTE *)(((v3 + 647) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v3 + 608, 40LL);
    }
    Json::ValueIteratorBase::key((Json::ValueIteratorBase *)(v3 + 608));
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v3 + 144);
    if ( !fromJson<std::string>((const Json::Value *)(v3 + 608), (std::string *)(v3 + 144)) )
    {
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 208) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 239) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 208, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v3 + 208),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "mapFromJson",
        10550);
      v8 = common::milog::MiLogStream::operator<<<char [21],(char *[21])0>(
             (common::milog::MiLogStream *const)(v3 + 208),
             (const char (*)[21])"key fromJson fails: ");
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v3 + 272) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) != 0
        && (char)((v3 + 47) & 7) >= *(_BYTE *)(((v3 + 303) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v3 + 272, 32LL);
      }
      Json::Value::asString[abi:cxx11]((Json::String *)(v3 + 272), (Json::Value_0 *)(v3 + 608));
      common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v8, (const std::string *)(v3 + 272));
      std::string::~string((void *)(v3 + 272));
      *(_DWORD *)(((v3 + 272) >> 3) + 0x7FFF8000) = -117901064;
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 208));
      *(_DWORD *)(((v3 + 208) >> 3) + 0x7FFF8000) = -117901064;
      v2 = 0;
      v9 = 0;
    }
    else
    {
      v10 = ((v3 + 688) >> 3) + 2147450880;
      *(_DWORD *)v10 = 0;
      *(_BYTE *)(v10 + 4) = 0;
      v11 = Json::ValueIterator::operator*((Json::ValueIterator *const)(v3 + 48));
      Json::Value::Value((Json::Value *)(v3 + 688), v11);
      *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = 0;
      v12 = (unsigned __int64)std::__shared_ptr_access<data::ConfigLevelEntityFactory,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntityFactory,(__gnu_cxx::_Lock_policy)2,false,false> *const)&data::ConfigLevelEntityFactory::instance_ptr);
      if ( *(_BYTE *)((v12 >> 3) + 0x7FFF8000) )
        v12 = __asan_report_load8(v12);
      v13 = *(void (__fastcall ***)(unsigned __int64, unsigned __int64))v12;
      if ( *(_BYTE *)((*(_QWORD *)v12 >> 3) + 0x7FFF8000LL) )
        v12 = __asan_report_load8(*(_QWORD *)v12);
      v14 = *v13;
      if ( *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) )
        v12 = __asan_report_store16();
      v14(v3 + 112, v12);
      if ( std::operator==<data::ConfigLevelEntity>((const std::shared_ptr<data::ConfigLevelEntity> *)(v3 + 112), 0LL) )
      {
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v3 + 336) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) != 0
          && (char)((v3 + 111) & 7) >= *(_BYTE *)(((v3 + 367) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v3 + 336, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v3 + 336),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "mapFromJson",
          10557);
        common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
          (common::milog::MiLogStream *const)(v3 + 336),
          (const char (*)[14])"value is null");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 336));
        *(_DWORD *)(((v3 + 336) >> 3) + 0x7FFF8000) = -117901064;
        v2 = 0;
        v15 = 0;
      }
      else
      {
        v16 = (unsigned __int64)std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v3 + 112));
        if ( *(_BYTE *)((v16 >> 3) + 0x7FFF8000) )
          v16 = __asan_report_load8(v16);
        v17 = *(_QWORD *)v16 + 48LL;
        if ( *(_BYTE *)((v17 >> 3) + 0x7FFF8000) )
          v16 = __asan_report_load8(*(_QWORD *)v16 + 48LL);
        if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64, unsigned __int64))v17)(v16, v3 + 688) != 1 )
        {
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v3 + 400) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) != 0
            && (char)((v3 - 112 + 31) & 7) >= *(_BYTE *)(((v3 + 431) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v3 + 400, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v3 + 400),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "mapFromJson",
            10562);
          v19 = common::milog::MiLogStream::operator<<<char [28],(char *[28])0>(
                  (common::milog::MiLogStream *const)(v3 + 400),
                  (const char (*)[28])"value fromJson fails, key: ");
          common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v19, (const std::string *)(v3 + 144));
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 400));
          *(_DWORD *)(((v3 + 400) >> 3) + 0x7FFF8000) = -117901064;
          v2 = 0;
          v15 = 0;
        }
        else
        {
          v20 = std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::emplace<std::string&,std::shared_ptr<data::ConfigLevelEntity>&>(
                  m,
                  (std::string *)(v3 + 144),
                  (std::shared_ptr<data::ConfigLevelEntity> *)(v3 + 112),
                  (std::string *)(v3 + 144),
                  v18);
          if ( !v20.second )
          {
            *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v3 + 464) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) != 0
              && (char)((v3 - 48 + 31) & 7) >= *(_BYTE *)(((v3 + 495) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v3 + 464, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v3 + 464),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "mapFromJson",
              10567);
            v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v3 + 464),
                    (const char (*)[16])"key duplicate: ");
            common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v21, (const std::string *)(v3 + 144));
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v3 + 464));
            *(_DWORD *)(((v3 + 464) >> 3) + 0x7FFF8000) = -117901064;
            v2 = 0;
            v15 = 0;
          }
          else
          {
            v15 = 1;
          }
        }
      }
      std::shared_ptr<data::ConfigLevelEntity>::~shared_ptr((std::shared_ptr<data::ConfigLevelEntity> *const)(v3 + 112));
      Json::Value::~Value((Json::Value_0 *const)(v3 + 688));
      v9 = v15 == 1;
    }
    std::string::~string((void *)(v3 + 144));
    Json::Value::~Value((Json::Value_0 *const)(v3 + 608));
    v22 = ((v3 + 608) >> 3) + 2147450880;
    *(_DWORD *)v22 = -117901064;
    *(_BYTE *)(v22 + 4) = -8;
    *(_DWORD *)(((v3 + 144) >> 3) + 0x7FFF8000) = -117901064;
    v23 = ((v3 + 688) >> 3) + 2147450880;
    *(_DWORD *)v23 = -117901064;
    *(_BYTE *)(v23 + 4) = -8;
    *(_WORD *)(((v3 + 112) >> 3) + 0x7FFF8000) = -1800;
    if ( !v9 )
    {
      v24 = 0;
      goto LABEL_46;
    }
    Json::ValueIterator::operator++((Json::ValueIterator *const)(v3 + 48));
  }
  v24 = 1;
LABEL_46:
  *(_WORD *)(((v3 + 48) >> 3) + 0x7FFF8000) = -1800;
  if ( v24 == 1 )
    v2 = 1;
  Json::Value::~Value((Json::Value_0 *const)(v3 + 528));
  if ( v26 == (char *)v3 )
  {
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0LL;
    memset(
      (void *)((unsigned __int64)(v5 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v5 + 2147450880 - (((_DWORD)v5 + 2147450888) & 0xFFFFFFF8) + 96) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v3 = 1172321806LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v3 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return v2;
};

// Line 10576: range 000000000E68F9C6-000000000E68FCD5
int32_t __cdecl data::getMapHashValue(const data::ConfigConfigLevelEntityMap *map)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rdx
  int32_t v7; // eax
  int32_t result; // eax
  std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true>::reference v9; // [rsp+18h] [rbp-B8h]
  std::tuple_element<0,std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> > >::type *key; // [rsp+20h] [rbp-B0h]
  std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> > >::type *val; // [rsp+28h] [rbp-A8h]
  char v12[160]; // [rsp+30h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 hash_code:10577 64 8 17 __for_begin:10578 96 8 15 __for_end:10578";
  *(_QWORD *)(v2 + 16) = data::getMapHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::begin(map);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,std::shared_ptr<data::ConfigLevelEntity>>::end(map);
  while ( std::__detail::operator!=<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true> *)(v2 + 64),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,true> *)(v2 + 96)) )
  {
    v9 = std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,false,true>::operator*((const std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true> *const)(v2 + 64));
    key = std::get<0ul,std::string const,std::shared_ptr<data::ConfigLevelEntity>>(v9);
    val = (std::tuple_element<1,const std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> > >::type *)std::get<1ul,std::string const,std::shared_ptr<data::ConfigLevelEntity>>(v9);
    common::tools::HashUtils::appendHash(key, (int32_t *)(v2 + 48));
    if ( std::operator!=<data::ConfigLevelEntity>(0LL, val) )
    {
      v5 = (unsigned __int64)std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigLevelEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)val);
      if ( *(_BYTE *)((v5 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(v5);
      v6 = *(_QWORD *)v5 + 56LL;
      if ( *(_BYTE *)((v6 >> 3) + 0x7FFF8000) )
        v5 = __asan_report_load8(*(_QWORD *)v5 + 56LL);
      v7 = (*(__int64 (__fastcall **)(unsigned __int64))v6)(v5);
      common::tools::HashUtils::appendHash(v7, (int32_t *)(v2 + 48));
    }
    std::__detail::_Node_const_iterator<std::pair<std::string const,std::shared_ptr<data::ConfigLevelEntity>>,false,true>::operator++((std::__detail::_Node_const_iterator<std::pair<const std::string,std::shared_ptr<data::ConfigLevelEntity> >,false,true> *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10593: range 000000000E68FCD6-000000000E690564
bool __cdecl data::TransPointUpdateMaterial::fromJson(
        data::TransPointUpdateMaterial *const this,
        const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::StringArray *p_transforms; // rsi
  const Json::Value *level_ptr; // [rsp+18h] [rbp-218h]
  const Json::Value *mat_path_ptr; // [rsp+20h] [rbp-210h]
  const Json::Value *transforms_ptr; // [rsp+28h] [rbp-208h]
  char v11[512]; // [rsp+30h] [rbp-200h] BYREF

  v2 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::TransPointUpdateMaterial::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "level",
    (const std::allocator<char> *)(v2 + 48));
  level_ptr = jsonValueFind(jval, (const std::string *)(v2 + 96));
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( level_ptr && !fromJson<unsigned int>(level_ptr, &this->level) )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      10603);
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[27])"fromJson for: level fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      "matPath",
      (const std::allocator<char> *)(v2 + 64));
    mat_path_ptr = jsonValueFind(jval, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( mat_path_ptr && !fromJson<std::string>(mat_path_ptr, &this->mat_path) )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        10615);
      common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(
        (common::milog::MiLogStream *const)(v2 + 288),
        (const char (*)[29])"fromJson for: matPath fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        "transforms",
        (const std::allocator<char> *)(v2 + 80));
      p_transforms = (data::StringArray *)(v2 + 352);
      transforms_ptr = jsonValueFind(jval, (const std::string *)(v2 + 352));
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( transforms_ptr && (p_transforms = &this->transforms, !data::arrFromJson(transforms_ptr, &this->transforms)) )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "fromJson",
          10627);
        common::milog::MiLogStream::operator<<<char [32],(char *[32])0>(
          (common::milog::MiLogStream *const)(v2 + 416),
          (const char (*)[32])"fromJson for: transforms fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = 0;
      }
      else
      {
        if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
          __asan_report_store1(&this->is_json_loaded, p_transforms, &this->is_json_loaded);
        this->is_json_loaded = 1;
        result = 1;
      }
    }
  }
  if ( v11 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 10635: range 000000000E690566-000000000E690700
int32_t __cdecl data::TransPointUpdateMaterial::getHashValue(const data::TransPointUpdateMaterial *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t ArrHashValue; // eax
  int32_t result; // eax
  char v7[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 hash_code:10636";
  *(_QWORD *)(v2 + 16) = data::TransPointUpdateMaterial::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 32, v1);
  *(_DWORD *)(v2 + 32) = 0;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(this);
  }
  common::tools::HashUtils::appendHash(this->level, (int32_t *)(v2 + 32));
  common::tools::HashUtils::appendHash(&this->mat_path, (int32_t *)(v2 + 32));
  ArrHashValue = data::getArrHashValue(&this->transforms);
  common::tools::HashUtils::appendHash(ArrHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10644: range 000000000E690701-000000000E690ADA
bool __cdecl data::vecFromJson(const Json::Value *jval, data::UpdateMaterialList *v)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // edx
  unsigned __int64 v6; // rax
  int v7; // r14d
  data::TransPointUpdateMaterial *updated; // rdx
  unsigned __int64 v9; // rax
  bool result; // al
  int v11; // [rsp+0h] [rbp-140h]
  char v12; // [rsp+8h] [rbp-138h]
  bool v13; // [rsp+Fh] [rbp-131h]
  uint32_t i; // [rsp+24h] [rbp-11Ch]
  const Json::Value *elem_jval; // [rsp+28h] [rbp-118h]
  char v16[272]; // [rsp+30h] [rbp-110h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(224LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 48 32 9 <unknown> 112 72 10 elem:10650";
  *(_QWORD *)(v2 + 16) = data::vecFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = 61937;
  v4[536862722] = -219021312;
  v4[536862723] = 62194;
  v4[536862725] = -218103808;
  v4[536862726] = -202116109;
  for ( i = 0; i < Json::Value::size((const Json::Value_0 *const)jval); ++i )
  {
    elem_jval = (const Json::Value *)Json::Value::operator[]((Json::Value *)jval, i, v11, v12);
    if ( Json::Value::isNull((const Json::Value_0 *const)elem_jval) )
    {
      v5 = 0;
    }
    else
    {
      v6 = ((v2 + 112) >> 3) + 2147450880;
      *(_DWORD *)v6 = 0;
      *(_DWORD *)(v6 + 4) = 0;
      *(_BYTE *)(v6 + 8) = 0;
      data::TransPointUpdateMaterial::TransPointUpdateMaterial((data::TransPointUpdateMaterial *const)(v2 + 112));
      if ( !data::TransPointUpdateMaterial::fromJson((data::TransPointUpdateMaterial *const)(v2 + 112), elem_jval) )
      {
        *(_DWORD *)(((v2 + 48) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 48) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 111) & 7) >= *(_BYTE *)(((v2 + 79) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 48, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 48),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "vecFromJson",
          10653);
        common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 48),
          (const char (*)[16])"fromJson fails!");
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 48));
        *(_DWORD *)(((v2 + 48) >> 3) + 0x7FFF8000) = -117901064;
        v13 = 0;
        v7 = 0;
      }
      else
      {
        updated = std::move<data::TransPointUpdateMaterial &>((data::TransPointUpdateMaterial *)(v2 + 112));
        std::vector<data::TransPointUpdateMaterial>::emplace_back<data::TransPointUpdateMaterial>(v, updated, updated);
        v7 = 1;
      }
      data::TransPointUpdateMaterial::~TransPointUpdateMaterial((data::TransPointUpdateMaterial *const)(v2 + 112));
      if ( v7 == 1 )
        v5 = 2;
      else
        v5 = 1;
    }
    v9 = ((v2 + 112) >> 3) + 2147450880;
    *(_DWORD *)v9 = -117901064;
    *(_DWORD *)(v9 + 4) = -117901064;
    *(_BYTE *)(v9 + 8) = -8;
    if ( v5 && v5 != 2 )
      goto LABEL_20;
  }
  v13 = 1;
LABEL_20:
  result = v13;
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 10663: range 000000000E690ADB-000000000E690D27
int32_t __cdecl data::getVecHashValue(const data::UpdateMaterialList *vec)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int32_t HashValue; // eax
  int32_t result; // eax
  __gnu_cxx::__normal_iterator<const data::TransPointUpdateMaterial*,std::vector<data::TransPointUpdateMaterial> >::reference elem; // [rsp+18h] [rbp-A8h]
  char v8[160]; // [rsp+20h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 15 hash_code:10664 64 8 17 __for_begin:10665 96 8 15 __for_end:10665";
  *(_QWORD *)(v2 + 16) = data::getVecHashValue;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = 0;
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::vector<data::TransPointUpdateMaterial>::const_iterator *)(v2 + 64) = std::vector<data::TransPointUpdateMaterial>::begin(vec);
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::vector<data::TransPointUpdateMaterial>::const_iterator *)(v2 + 96) = std::vector<data::TransPointUpdateMaterial>::end(vec);
  while ( __gnu_cxx::operator!=<data::TransPointUpdateMaterial const*,std::vector<data::TransPointUpdateMaterial>>(
            (const __gnu_cxx::__normal_iterator<const data::TransPointUpdateMaterial*,std::vector<data::TransPointUpdateMaterial> > *)(v2 + 64),
            (const __gnu_cxx::__normal_iterator<const data::TransPointUpdateMaterial*,std::vector<data::TransPointUpdateMaterial> > *)(v2 + 96)) )
  {
    elem = __gnu_cxx::__normal_iterator<data::TransPointUpdateMaterial const*,std::vector<data::TransPointUpdateMaterial>>::operator*((const __gnu_cxx::__normal_iterator<const data::TransPointUpdateMaterial*,std::vector<data::TransPointUpdateMaterial> > *const)(v2 + 64));
    HashValue = data::TransPointUpdateMaterial::getHashValue(elem);
    common::tools::HashUtils::appendHash(HashValue, (int32_t *)(v2 + 48));
    __gnu_cxx::__normal_iterator<data::TransPointUpdateMaterial const*,std::vector<data::TransPointUpdateMaterial>>::operator++((__gnu_cxx::__normal_iterator<const data::TransPointUpdateMaterial*,std::vector<data::TransPointUpdateMaterial> > *const)(v2 + 64));
  }
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 48);
  result = *(_DWORD *)(v2 + 48);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10676: range 000000000E6F1EE8-000000000E6F2129
void __cdecl data::ConfigTransPointEntityRegister::ConfigTransPointEntityRegister(
        data::ConfigTransPointEntityRegister *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  std::shared_ptr<data::ConfigEntity> *v4; // rax
  char v5[192]; // [rsp+10h] [rbp-C0h] BYREF

  v1 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(160LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "3 48 1 9 <unknown> 64 16 9 <unknown> 96 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigTransPointEntityRegister::ConfigTransPointEntityRegister;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -219021312;
  v3[536862724] = -202116109;
  if ( *(_WORD *)(((v1 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigTransPointEntity>();
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 96),
    "ConfigTransPointEntity",
    (const std::allocator<char> *)(v1 + 48));
  v4 = std::map<std::string,std::shared_ptr<data::ConfigEntity>>::operator[](
         &data::g_ConfigEntityMap[abi:cxx11],
         (std::map<std::string,std::shared_ptr<data::ConfigEntity>>::key_type *)(v1 + 96));
  std::shared_ptr<data::ConfigEntity>::operator=<data::ConfigTransPointEntity>(
    v4,
    (std::shared_ptr<data::ConfigTransPointEntity> *)(v1 + 64));
  std::string::~string((void *)(v1 + 96));
  *(_DWORD *)(((v1 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
  std::shared_ptr<data::ConfigTransPointEntity>::~shared_ptr((std::shared_ptr<data::ConfigTransPointEntity> *const)(v1 + 64));
  if ( v5 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8010) = -168430091;
  }
};

// Line 10679: range 000000000E690D28-000000000E690EFB
void __cdecl data::ConfigTransPointEntity::foreachMember(
        data::ConfigTransPointEntity *const this,
        std::function<void(std::any&)> *p_func)
{
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  char v5[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v5;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 16 30 update_material_list_any:10681 64 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigTransPointEntity::foreachMember;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -219021312;
  v4[536862723] = -202116109;
  std::function<void ()(std::any &)>::function((std::function<void(std::any&)> *const)(v2 + 64), p_func);
  data::ConfigGadget::foreachMember(this, (std::function<void(std::any&)> *)(v2 + 64));
  std::function<void ()(std::any &)>::~function((std::function<void(std::any&)> *const)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) = 0;
  std::any::any<std::vector<data::TransPointUpdateMaterial> &,std::vector<data::TransPointUpdateMaterial>,std::any::_Manager_external<std::vector<data::TransPointUpdateMaterial>>,true,true>(
    (std::any *const)(v2 + 32),
    &this->update_material_list);
  std::function<void ()(std::any &)>::operator()(p_func, (std::any *)(v2 + 32));
  std::any::~any((std::any *const)(v2 + 32));
  if ( v5 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 10686: range 000000000E690EFC-000000000E69100C
std::shared_ptr<data::ConfigEntity> __cdecl data::ConfigTransPointEntity::clone(
        data::ConfigTransPointEntity *const this)
{
  data::ConfigTransPointEntity *v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r12
  std::shared_ptr<data::ConfigEntity> result; // rax
  char v6[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 16 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigTransPointEntity::clone;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202178560;
  if ( *(_WORD *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigTransPointEntity,data::ConfigTransPointEntity&>(
    (common::tools::perf::allocator<data::ConfigTransPointEntity,data::ConfigTransPointEntity> *)(v2 + 32),
    v1);
  std::shared_ptr<data::ConfigEntity>::shared_ptr<data::ConfigTransPointEntity,void>(
    (std::shared_ptr<data::ConfigEntity> *const)this,
    (std::shared_ptr<data::ConfigTransPointEntity> *)(v2 + 32));
  std::shared_ptr<data::ConfigTransPointEntity>::~shared_ptr((std::shared_ptr<data::ConfigTransPointEntity> *const)(v2 + 32));
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 10690: range 000000000E69100E-000000000E691051
data::ConfigTransPointEntityPtr __cdecl data::ConfigTransPointEntityFactory::create(
        data::ConfigTransPointEntityFactory *const this)
{
  data::ConfigTransPointEntityPtr result; // rax

  if ( *(_WORD *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  result = common::tools::perf::make_shared<data::ConfigTransPointEntity>();
  result._M_ptr = (std::__shared_ptr<data::ConfigTransPointEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 10692: range 000000000E691052-000000000E6914DE
bool __cdecl data::ConfigTransPointEntity::fromJson(data::ConfigTransPointEntity *const this, const Json::Value *jval)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool result; // al
  data::UpdateMaterialList *p_update_material_list; // rsi
  const Json::Value *update_material_list_ptr; // [rsp+18h] [rbp-128h]
  char v9[288]; // [rsp+20h] [rbp-120h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(256LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigTransPointEntity::fromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -202116109;
  if ( !data::ConfigGadget::fromJson(this, jval) )
  {
    if ( *(char *)(((v2 + 64) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 95) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 64, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 64),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "fromJson",
      10695);
    common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(
      (common::milog::MiLogStream *const)(v2 + 64),
      (const char (*)[34])"fromJson for: ConfigGadget fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 64));
    result = 0;
  }
  else
  {
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 128),
      "updateMaterialList",
      (const std::allocator<char> *)(v2 + 48));
    p_update_material_list = (data::UpdateMaterialList *)(v2 + 128);
    update_material_list_ptr = jsonValueFind(jval, (const std::string *)(v2 + 128));
    std::string::~string((void *)(v2 + 128));
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( update_material_list_ptr
      && (p_update_material_list = &this->update_material_list,
          !data::vecFromJson(update_material_list_ptr, &this->update_material_list)) )
    {
      *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 192, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 192),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "fromJson",
        10707);
      common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(
        (common::milog::MiLogStream *const)(v2 + 192),
        (const char (*)[40])"fromJson for: updateMaterialList fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
      result = 0;
    }
    else
    {
      if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
        __asan_report_store1(&this->is_json_loaded, p_update_material_list, &this->is_json_loaded);
      this->is_json_loaded = 1;
      result = 1;
    }
  }
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF800C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10714: range 000000000E6914E0-000000000E69202C
data::ConfigTransPointEntityPtr __cdecl data::ConfigTransPointEntity::parseFromJson(const Json::Value *jval)
{
  const Json::Value *v1; // rsi
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  data::ConfigTransPointEntityPtr result; // rax
  common::milog::MiLogStream *v6; // rax
  unsigned __int64 v7; // rax
  unsigned __int64 v8; // rdx
  common::milog::MiLogStream *v9; // rax
  __int64 v10; // rax
  char v11; // dl
  _BOOL8 v12; // rdx
  const Json::Value *jval_ptr; // [rsp+18h] [rbp-268h]
  char v14[608]; // [rsp+20h] [rbp-260h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(576LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "10 48 1 9 <unknown> 64 16 14 base_ptr:10727 96 16 9 ptr:10733 128 32 9 <unknown> 192 32 9 <unkno"
                        "wn> 256 32 15 type_name:10721 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ConfigTransPointEntity::parseFromJson;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -219021312;
  v4[536862723] = -219021312;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "$type",
    (const std::allocator<char> *)(v2 + 48));
  jval_ptr = jsonValueFind(v1, (const std::string *)(v2 + 128));
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( jval_ptr )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    std::string::basic_string(v2 + 256);
    if ( !fromJson<std::string>(jval_ptr, (std::string *)(v2 + 256)) )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/json_data_auto/ConfigEntity.cpp",
        "parseFromJson",
        10724);
      common::milog::MiLogStream::operator<<<char [50],(char *[50])0>(
        (common::milog::MiLogStream *const)(v2 + 320),
        (const char (*)[50])"fromJson for: ConfigTransPointEntity $type fails!");
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
      std::shared_ptr<data::ConfigTransPointEntity>::shared_ptr(
        (std::shared_ptr<data::ConfigTransPointEntity> *const)jval,
        0LL);
    }
    else
    {
      *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v2 + 64) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      data::createConfigEntity((const std::string *)(v2 + 64));
      if ( std::operator==<data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 64), 0LL) )
      {
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 384, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 384),
          &common::milog::MiLogDefault::default_log_obj_,
          3u,
          "./src/json_data_auto/ConfigEntity.cpp",
          "parseFromJson",
          10730);
        v6 = common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
               (common::milog::MiLogStream *const)(v2 + 384),
               (const char (*)[38])"create ConfigEntity fails, type_name:");
        common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(v6, (const std::string *)(v2 + 256));
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::shared_ptr<data::ConfigTransPointEntity>::shared_ptr(
          (std::shared_ptr<data::ConfigTransPointEntity> *const)jval,
          0LL);
      }
      else
      {
        *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
        if ( *(_WORD *)(((v2 + 96) >> 3) + 0x7FFF8000) )
          __asan_report_store16();
        std::dynamic_pointer_cast<data::ConfigTransPointEntity,data::ConfigEntity>((const std::shared_ptr<data::ConfigEntity> *)(v2 + 96));
        if ( std::operator==<data::ConfigTransPointEntity>(
               (const std::shared_ptr<data::ConfigTransPointEntity> *)(v2 + 96),
               0LL) )
        {
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 448, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 448),
            &common::milog::MiLogDefault::default_log_obj_,
            3u,
            "./src/json_data_auto/ConfigEntity.cpp",
            "parseFromJson",
            10736);
          common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(
            (common::milog::MiLogStream *const)(v2 + 448),
            (const char (*)[41])"cast to ConfigTransPointEntityPtr fails!");
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::shared_ptr<data::ConfigTransPointEntity>::shared_ptr(
            (std::shared_ptr<data::ConfigTransPointEntity> *const)jval,
            0LL);
        }
        else
        {
          v7 = (unsigned __int64)std::__shared_ptr_access<data::ConfigTransPointEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigTransPointEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
          if ( *(_BYTE *)((v7 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(v7);
          v8 = *(_QWORD *)v7 + 48LL;
          if ( *(_BYTE *)((v8 >> 3) + 0x7FFF8000) )
            v7 = __asan_report_load8(*(_QWORD *)v7 + 48LL);
          if ( (*(unsigned __int8 (__fastcall **)(unsigned __int64))v8)(v7) != 1 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              3u,
              "./src/json_data_auto/ConfigEntity.cpp",
              "parseFromJson",
              10741);
            v9 = common::milog::MiLogStream::operator<<<std::string,(std::string*)0>(
                   (common::milog::MiLogStream *const)(v2 + 512),
                   (const std::string *)(v2 + 256));
            common::milog::MiLogStream::operator<<<char [17],(char *[17])0>(v9, (const char (*)[17])" fromJson fails!");
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
            std::shared_ptr<data::ConfigTransPointEntity>::shared_ptr(
              (std::shared_ptr<data::ConfigTransPointEntity> *const)jval,
              0LL);
          }
          else
          {
            v10 = (__int64)std::__shared_ptr_access<data::ConfigTransPointEntity,(__gnu_cxx::_Lock_policy)2,false,false>::operator->((const std::__shared_ptr_access<data::ConfigTransPointEntity,(__gnu_cxx::_Lock_policy)2,false,false> *const)(v2 + 96));
            v11 = *(_BYTE *)(((unsigned __int64)(v10 + 624) >> 3) + 0x7FFF8000);
            LOBYTE(v1) = v11 != 0;
            v12 = v11 < 0;
            if ( v12 )
              v10 = __asan_report_store1(v10 + 624, v1, v12);
            *(_BYTE *)(v10 + 624) = 1;
            std::shared_ptr<data::ConfigTransPointEntity>::shared_ptr(
              (std::shared_ptr<data::ConfigTransPointEntity> *const)jval,
              (std::shared_ptr<data::ConfigTransPointEntity> *)(v2 + 96));
          }
        }
        std::shared_ptr<data::ConfigTransPointEntity>::~shared_ptr((std::shared_ptr<data::ConfigTransPointEntity> *const)(v2 + 96));
      }
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v2 + 64));
    }
    std::string::~string((void *)(v2 + 256));
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/json_data_auto/ConfigEntity.cpp",
      "parseFromJson",
      10718);
    common::milog::MiLogStream::operator<<<char [55],(char *[55])0>(
      (common::milog::MiLogStream *const)(v2 + 192),
      (const char (*)[55])"jsonValueFind for: ConfigTransPointEntity $type fails!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::shared_ptr<data::ConfigTransPointEntity>::shared_ptr(
      (std::shared_ptr<data::ConfigTransPointEntity> *const)jval,
      0LL);
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    result._M_refcount._M_pi = (std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *)0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
  }
  result._M_ptr = (std::__shared_ptr<data::ConfigTransPointEntity,(__gnu_cxx::_Lock_policy)2>::element_type *)jval;
  return result;
};

// Line 10749: range 000000000E69202E-000000000E692179
int32_t __cdecl data::ConfigTransPointEntity::getHashValue(const data::ConfigTransPointEntity *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int32_t HashValue; // edx
  char v6; // al
  int32_t VecHashValue; // eax
  int32_t result; // eax
  char v9[96]; // [rsp+10h] [rbp-60h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 4 15 hash_code:10750";
  *(_QWORD *)(v2 + 16) = data::ConfigTransPointEntity::getHashValue;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116348;
  HashValue = data::ConfigGadget::getHashValue(this);
  v6 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(v1) = v6 != 0;
    __asan_report_store4(v2 + 32, v1);
  }
  *(_DWORD *)(v2 + 32) = HashValue;
  VecHashValue = data::getVecHashValue(&this->update_material_list);
  common::tools::HashUtils::appendHash(VecHashValue, (int32_t *)(v2 + 32));
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_load4(v2 + 32);
  result = *(_DWORD *)(v2 + 32);
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10755: range 000000000E6995B1-000000000E6995C5
void __cdecl GLOBAL__sub_I_merge_single_ConfigAbilityPredicate_cpp()
{
  __static_initialization_and_destruction_0(1, 0xFFFF);
};

// Line 10755: range 000000000E69217A-000000000E6995B0
void __cdecl __static_initialization_and_destruction_0(int __initialize_p, int __priority)
{
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,std::shared_ptr<data::ConfigAbilityPredicate> > *i; // rbx
  unsigned __int64 v5; // rax
  unsigned __int64 v6; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > *j; // rbx
  unsigned __int64 v8; // rax
  unsigned __int64 v9; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > *k; // rbx
  unsigned __int64 v11; // rax
  unsigned __int64 v12; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > *m; // rbx
  unsigned __int64 v14; // rax
  unsigned __int64 v15; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > *n; // rbx
  unsigned __int64 v17; // rax
  unsigned __int64 v18; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > *ii; // rbx
  unsigned __int64 v20; // rax
  unsigned __int64 v21; // rax
  std::pair<const std::string,std::shared_ptr<data::BornRandom> > *jj; // rbx
  unsigned __int64 v23; // rax
  unsigned __int64 v24; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > *kk; // rbx
  unsigned __int64 v26; // rax
  unsigned __int64 v27; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > *mm; // rbx
  unsigned __int64 v29; // rax
  unsigned __int64 v30; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > *nn; // rbx
  unsigned __int64 v32; // rax
  unsigned __int64 v33; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > *i1; // rbx
  unsigned __int64 v35; // rax
  unsigned __int64 v36; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > *i2; // rbx
  unsigned __int64 v38; // rax
  unsigned __int64 v39; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > *i3; // rbx
  unsigned __int64 v41; // rax
  unsigned __int64 v42; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > *i4; // rbx
  unsigned __int64 v44; // rax
  unsigned __int64 v45; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > *i5; // rbx
  unsigned __int64 v47; // rax
  unsigned __int64 v48; // rax
  std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > *i6; // rbx
  unsigned __int64 v50; // rax
  _BYTE *v51; // rcx
  char v52; // dl
  std::shared_ptr<data::ConfigTransPointEntityFactory> *v53; // rsi
  __int64 v54; // rdx
  _BYTE *v55; // rcx
  char v56; // dl
  __int64 v57; // rdx
  const char *v58; // rcx
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > > __l; // [rsp+10h] [rbp-A50h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > > v60; // [rsp+20h] [rbp-A40h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > > v61; // [rsp+30h] [rbp-A30h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > > v62; // [rsp+40h] [rbp-A20h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > > v63; // [rsp+50h] [rbp-A10h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::BornRandom> > > v64; // [rsp+60h] [rbp-A00h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > > v65; // [rsp+70h] [rbp-9F0h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > > v66; // [rsp+80h] [rbp-9E0h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > > v67; // [rsp+90h] [rbp-9D0h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > > v68; // [rsp+A0h] [rbp-9C0h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > > v69; // [rsp+B0h] [rbp-9B0h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > > v70; // [rsp+C0h] [rbp-9A0h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > > v71; // [rsp+D0h] [rbp-990h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > > v72; // [rsp+E0h] [rbp-980h]
  std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > > v73; // [rsp+F0h] [rbp-970h]
  unsigned __int64 v74; // [rsp+100h] [rbp-960h]
  char v75[2384]; // [rsp+110h] [rbp-950h] BYREF

  v74 = (unsigned __int64)v75;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_6(2336LL);
    if ( v2 )
      v74 = v2;
  }
  *(_QWORD *)v74 = 1102416563LL;
  *(_QWORD *)(v74 + 8) = "64 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9"
                         " <unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unk"
                         "nown> 208 1 9 <unknown> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown>"
                         " 288 1 9 <unknown> 304 1 9 <unknown> 320 1 9 <unknown> 336 1 9 <unknown> 352 1 9 <unknown> 368 "
                         "1 9 <unknown> 384 1 9 <unknown> 400 1 9 <unknown> 416 1 9 <unknown> 432 1 9 <unknown> 448 1 9 <"
                         "unknown> 464 1 9 <unknown> 480 1 9 <unknown> 496 1 9 <unknown> 512 1 9 <unknown> 528 1 9 <unkno"
                         "wn> 544 16 9 <unknown> 576 16 9 <unknown> 608 16 9 <unknown> 640 16 9 <unknown> 672 16 9 <unkno"
                         "wn> 704 16 9 <unknown> 736 16 9 <unknown> 768 16 9 <unknown> 800 16 9 <unknown> 832 16 9 <unkno"
                         "wn> 864 16 9 <unknown> 896 16 9 <unknown> 928 16 9 <unknown> 960 16 9 <unknown> 992 16 9 <unkno"
                         "wn> 1024 16 9 <unknown> 1056 48 9 <unknown> 1136 48 9 <unknown> 1216 48 9 <unknown> 1296 48 9 <"
                         "unknown> 1376 48 9 <unknown> 1456 48 9 <unknown> 1536 48 9 <unknown> 1616 48 9 <unknown> 1696 4"
                         "8 9 <unknown> 1776 48 9 <unknown> 1856 48 9 <unknown> 1936 48 9 <unknown> 2016 48 9 <unknown> 2"
                         "096 48 9 <unknown> 2176 48 9 <unknown> 2256 48 9 <unknown>";
  *(_QWORD *)(v74 + 16) = __static_initialization_and_destruction_0;
  v3 = (_DWORD *)(v74 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234753535;
  v3[536862723] = -234753535;
  v3[536862724] = -234753535;
  v3[536862725] = -234753535;
  v3[536862726] = -234753535;
  v3[536862727] = -234753535;
  v3[536862728] = -234753535;
  v3[536862729] = -234753535;
  v3[536862730] = -234753535;
  v3[536862731] = -234753535;
  v3[536862732] = -234753535;
  v3[536862733] = -234753535;
  v3[536862734] = -234753535;
  v3[536862735] = -234753535;
  v3[536862736] = -234753535;
  v3[536862737] = -219021312;
  v3[536862738] = -219021312;
  v3[536862739] = -219021312;
  v3[536862740] = -219021312;
  v3[536862741] = -219021312;
  v3[536862742] = -219021312;
  v3[536862743] = -219021312;
  v3[536862744] = -219021312;
  v3[536862745] = -219021312;
  v3[536862746] = -219021312;
  v3[536862747] = -219021312;
  v3[536862748] = -219021312;
  v3[536862749] = -219021312;
  v3[536862750] = -219021312;
  v3[536862751] = -219021312;
  v3[536862752] = -219021312;
  v3[536862754] = -219021312;
  v3[536862755] = 62194;
  v3[536862757] = -218959118;
  v3[536862759] = -219021312;
  v3[536862760] = 62194;
  v3[536862762] = -218959118;
  v3[536862764] = -219021312;
  v3[536862765] = 62194;
  v3[536862767] = -218959118;
  v3[536862769] = -219021312;
  v3[536862770] = 62194;
  v3[536862772] = -218959118;
  v3[536862774] = -219021312;
  v3[536862775] = 62194;
  v3[536862777] = -218959118;
  v3[536862779] = -219021312;
  v3[536862780] = 62194;
  v3[536862782] = -218959118;
  v3[536862784] = -219021312;
  v3[536862785] = 62194;
  v3[536862787] = -218959118;
  v3[536862789] = -219021312;
  v3[536862790] = 62194;
  v3[536862792] = -202116109;
  if ( __initialize_p == 1 )
  {
    __asan_before_dynamic_init("src_merge/merge_single_ConfigAbilityPredicate.cpp");
    if ( __priority == 0xFFFF )
    {
      std::ios_base::Init::Init(&std::__ioinit);
      __cxa_atexit((void (__fastcall *)(void *))&std::ios_base::Init::~Init, &std::__ioinit, &_dso_handle);
      if ( *(_WORD *)(((v74 + 544) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigAbilityPredicate>();
      std::pair<std::string const,std::shared_ptr<data::ConfigAbilityPredicate>>::pair<char const(&)[23],std::shared_ptr<data::ConfigAbilityPredicate>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigAbilityPredicate> > *const)(v74 + 1056),
        (const char (*)[23])"ConfigAbilityPredicate",
        (std::shared_ptr<data::ConfigAbilityPredicate> *)(v74 + 544));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityPredicate>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityPredicate> > > *const)(v74 + 48));
      std::map<std::string,std::shared_ptr<data::ConfigAbilityPredicate>>::map(
        &data::g_ConfigAbilityPredicateMap[abi:cxx11],
        (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityPredicate> > >)__PAIR128__(1LL, v74 + 1056),
        (const std::less<std::string > *)(v74 + 32),
        (const std::map<std::string,std::shared_ptr<data::ConfigAbilityPredicate>>::allocator_type *)(v74 + 48));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigAbilityPredicate>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigAbilityPredicate> > > *const)(v74 + 48));
      *(_BYTE *)(((v74 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,std::shared_ptr<data::ConfigAbilityPredicate> > *)(v74 + 1104);
            i != (std::pair<const std::string,std::shared_ptr<data::ConfigAbilityPredicate> > *)(v74 + 1056);
            std::pair<std::string const,std::shared_ptr<data::ConfigAbilityPredicate>>::~pair(i) )
      {
        --i;
      }
      v5 = ((v74 + 1056) >> 3) + 2147450880;
      *(_DWORD *)v5 = -117901064;
      *(_WORD *)(v5 + 4) = -1800;
      std::shared_ptr<data::ConfigAbilityPredicate>::~shared_ptr((std::shared_ptr<data::ConfigAbilityPredicate> *const)(v74 + 544));
      *(_WORD *)(((v74 + 544) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigAbilityPredicate>>::~map,
        &data::g_ConfigAbilityPredicateMap[abi:cxx11],
        &_dso_handle);
      data::RelationalOperationPredicateRegister::RelationalOperationPredicateRegister(&data::g_RelationalOperationPredicateRegister);
      data::ByTargetHPRatioRegister::ByTargetHPRatioRegister(&data::g_ByTargetHPRatioRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetHPRatioFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetHPRatioFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetHPRatioFactory>::~shared_ptr,
        &data::ByTargetHPRatioFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetRaycastVisiableRegister::ByTargetRaycastVisiableRegister(&data::g_ByTargetRaycastVisiableRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetRaycastVisiableFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetRaycastVisiableFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetRaycastVisiableFactory>::~shared_ptr,
        &data::ByTargetRaycastVisiableFactory::instance_ptr,
        &_dso_handle);
      data::ByLocalAvatarStaminaRegister::ByLocalAvatarStaminaRegister(&data::g_ByLocalAvatarStaminaRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByLocalAvatarStaminaFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByLocalAvatarStaminaFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByLocalAvatarStaminaFactory>::~shared_ptr,
        &data::ByLocalAvatarStaminaFactory::instance_ptr,
        &_dso_handle);
      data::ByLocalAvatarStaminaRatioRegister::ByLocalAvatarStaminaRatioRegister(&data::g_ByLocalAvatarStaminaRatioRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByLocalAvatarStaminaRatioFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByLocalAvatarStaminaRatioFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByLocalAvatarStaminaRatioFactory>::~shared_ptr,
        &data::ByLocalAvatarStaminaRatioFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetHPValueRegister::ByTargetHPValueRegister(&data::g_ByTargetHPValueRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetHPValueFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetHPValueFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetHPValueFactory>::~shared_ptr,
        &data::ByTargetHPValueFactory::instance_ptr,
        &_dso_handle);
      data::ByHitDamageRegister::ByHitDamageRegister(&data::g_ByHitDamageRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitDamageFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitDamageFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitDamageFactory>::~shared_ptr,
        &data::ByHitDamageFactory::instance_ptr,
        &_dso_handle);
      data::ByHitEnBreakRegister::ByHitEnBreakRegister(&data::g_ByHitEnBreakRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitEnBreakFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitEnBreakFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitEnBreakFactory>::~shared_ptr,
        &data::ByHitEnBreakFactory::instance_ptr,
        &_dso_handle);
      data::ByHitCriticalRegister::ByHitCriticalRegister(&data::g_ByHitCriticalRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitCriticalFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitCriticalFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitCriticalFactory>::~shared_ptr,
        &data::ByHitCriticalFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetOverrideMapValueRegister::ByTargetOverrideMapValueRegister(&data::g_ByTargetOverrideMapValueRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetOverrideMapValueFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetOverrideMapValueFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetOverrideMapValueFactory>::~shared_ptr,
        &data::ByTargetOverrideMapValueFactory::instance_ptr,
        &_dso_handle);
      data::ByWetHitColliderRegister::ByWetHitColliderRegister(&data::g_ByWetHitColliderRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByWetHitColliderFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByWetHitColliderFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByWetHitColliderFactory>::~shared_ptr,
        &data::ByWetHitColliderFactory::instance_ptr,
        &_dso_handle);
      data::ByHitBoxNameRegister::ByHitBoxNameRegister(&data::g_ByHitBoxNameRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitBoxNameFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitBoxNameFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitBoxNameFactory>::~shared_ptr,
        &data::ByHitBoxNameFactory::instance_ptr,
        &_dso_handle);
      data::ByHitBoxTypeRegister::ByHitBoxTypeRegister(&data::g_ByHitBoxTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitBoxTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitBoxTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitBoxTypeFactory>::~shared_ptr,
        &data::ByHitBoxTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByHasElementRegister::ByHasElementRegister(&data::g_ByHasElementRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasElementFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasElementFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasElementFactory>::~shared_ptr,
        &data::ByHasElementFactory::instance_ptr,
        &_dso_handle);
      data::ByHasAbilityStateRegister::ByHasAbilityStateRegister(&data::g_ByHasAbilityStateRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasAbilityStateFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasAbilityStateFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasAbilityStateFactory>::~shared_ptr,
        &data::ByHasAbilityStateFactory::instance_ptr,
        &_dso_handle);
      data::ByNotRegister::ByNotRegister(&data::g_ByNotRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByNotFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByNotFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByNotFactory>::~shared_ptr,
        &data::ByNotFactory::instance_ptr,
        &_dso_handle);
      data::ByAnyRegister::ByAnyRegister(&data::g_ByAnyRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAnyFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAnyFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAnyFactory>::~shared_ptr,
        &data::ByAnyFactory::instance_ptr,
        &_dso_handle);
      data::ByAndRegister::ByAndRegister(&data::g_ByAndRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAndFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAndFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAndFactory>::~shared_ptr,
        &data::ByAndFactory::instance_ptr,
        &_dso_handle);
      data::ByHasAttackTargetRegister::ByHasAttackTargetRegister(&data::g_ByHasAttackTargetRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasAttackTargetFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasAttackTargetFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasAttackTargetFactory>::~shared_ptr,
        &data::ByHasAttackTargetFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetIsGhostToEnemyRegister::ByTargetIsGhostToEnemyRegister(&data::g_ByTargetIsGhostToEnemyRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetIsGhostToEnemyFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetIsGhostToEnemyFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetIsGhostToEnemyFactory>::~shared_ptr,
        &data::ByTargetIsGhostToEnemyFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetIsSelfRegister::ByTargetIsSelfRegister(&data::g_ByTargetIsSelfRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetIsSelfFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetIsSelfFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetIsSelfFactory>::~shared_ptr,
        &data::ByTargetIsSelfFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetElementRegister::ByTargetElementRegister(&data::g_ByTargetElementRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetElementFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetElementFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetElementFactory>::~shared_ptr,
        &data::ByTargetElementFactory::instance_ptr,
        &_dso_handle);
      data::ByHostOrGuestRegister::ByHostOrGuestRegister(&data::g_ByHostOrGuestRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHostOrGuestFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHostOrGuestFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHostOrGuestFactory>::~shared_ptr,
        &data::ByHostOrGuestFactory::instance_ptr,
        &_dso_handle);
      data::ByAvatarIsHostRegister::ByAvatarIsHostRegister(&data::g_ByAvatarIsHostRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAvatarIsHostFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAvatarIsHostFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAvatarIsHostFactory>::~shared_ptr,
        &data::ByAvatarIsHostFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetWeightRegister::ByTargetWeightRegister(&data::g_ByTargetWeightRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetWeightFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetWeightFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetWeightFactory>::~shared_ptr,
        &data::ByTargetWeightFactory::instance_ptr,
        &_dso_handle);
      data::ByAnimatorFloatRegister::ByAnimatorFloatRegister(&data::g_ByAnimatorFloatRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAnimatorFloatFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAnimatorFloatFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAnimatorFloatFactory>::~shared_ptr,
        &data::ByAnimatorFloatFactory::instance_ptr,
        &_dso_handle);
      data::ByAnimatorIntRegister::ByAnimatorIntRegister(&data::g_ByAnimatorIntRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAnimatorIntFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAnimatorIntFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAnimatorIntFactory>::~shared_ptr,
        &data::ByAnimatorIntFactory::instance_ptr,
        &_dso_handle);
      data::ByAnimatorBoolRegister::ByAnimatorBoolRegister(&data::g_ByAnimatorBoolRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAnimatorBoolFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAnimatorBoolFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAnimatorBoolFactory>::~shared_ptr,
        &data::ByAnimatorBoolFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetGlobalValueRegister::ByTargetGlobalValueRegister(&data::g_ByTargetGlobalValueRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetGlobalValueFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetGlobalValueFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetGlobalValueFactory>::~shared_ptr,
        &data::ByTargetGlobalValueFactory::instance_ptr,
        &_dso_handle);
      data::ByScenePropStateRegister::ByScenePropStateRegister(&data::g_ByScenePropStateRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByScenePropStateFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByScenePropStateFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByScenePropStateFactory>::~shared_ptr,
        &data::ByScenePropStateFactory::instance_ptr,
        &_dso_handle);
      data::ByAvatarInWaterDepthRegister::ByAvatarInWaterDepthRegister(&data::g_ByAvatarInWaterDepthRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAvatarInWaterDepthFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAvatarInWaterDepthFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAvatarInWaterDepthFactory>::~shared_ptr,
        &data::ByAvatarInWaterDepthFactory::instance_ptr,
        &_dso_handle);
      data::ByEntityTypesRegister::ByEntityTypesRegister(&data::g_ByEntityTypesRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByEntityTypesFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByEntityTypesFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByEntityTypesFactory>::~shared_ptr,
        &data::ByEntityTypesFactory::instance_ptr,
        &_dso_handle);
      data::ByHitImpulseRegister::ByHitImpulseRegister(&data::g_ByHitImpulseRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitImpulseFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitImpulseFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitImpulseFactory>::~shared_ptr,
        &data::ByHitImpulseFactory::instance_ptr,
        &_dso_handle);
      data::ByHitElementRegister::ByHitElementRegister(&data::g_ByHitElementRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitElementFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitElementFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitElementFactory>::~shared_ptr,
        &data::ByHitElementFactory::instance_ptr,
        &_dso_handle);
      data::ByHitStrikeTypeRegister::ByHitStrikeTypeRegister(&data::g_ByHitStrikeTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitStrikeTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitStrikeTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitStrikeTypeFactory>::~shared_ptr,
        &data::ByHitStrikeTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByIsMoveOnWaterRegister::ByIsMoveOnWaterRegister(&data::g_ByIsMoveOnWaterRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByIsMoveOnWaterFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByIsMoveOnWaterFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByIsMoveOnWaterFactory>::~shared_ptr,
        &data::ByIsMoveOnWaterFactory::instance_ptr,
        &_dso_handle);
      data::ByAttackTagsRegister::ByAttackTagsRegister(&data::g_ByAttackTagsRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAttackTagsFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAttackTagsFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAttackTagsFactory>::~shared_ptr,
        &data::ByAttackTagsFactory::instance_ptr,
        &_dso_handle);
      data::BySceneSurfaceTypeRegister::BySceneSurfaceTypeRegister(&data::g_BySceneSurfaceTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::BySceneSurfaceTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BySceneSurfaceTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::BySceneSurfaceTypeFactory>::~shared_ptr,
        &data::BySceneSurfaceTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByUnlockTalentParamRegister::ByUnlockTalentParamRegister(&data::g_ByUnlockTalentParamRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByUnlockTalentParamFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByUnlockTalentParamFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByUnlockTalentParamFactory>::~shared_ptr,
        &data::ByUnlockTalentParamFactory::instance_ptr,
        &_dso_handle);
      data::BySkillReadyRegister::BySkillReadyRegister(&data::g_BySkillReadyRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::BySkillReadyFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BySkillReadyFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::BySkillReadyFactory>::~shared_ptr,
        &data::BySkillReadyFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetPositionToSelfPositionRegister::ByTargetPositionToSelfPositionRegister(&data::g_ByTargetPositionToSelfPositionRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetPositionToSelfPositionFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetPositionToSelfPositionFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetPositionToSelfPositionFactory>::~shared_ptr,
        &data::ByTargetPositionToSelfPositionFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetForwardAndSelfPositionRegister::ByTargetForwardAndSelfPositionRegister(&data::g_ByTargetForwardAndSelfPositionRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetForwardAndSelfPositionFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetForwardAndSelfPositionFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetForwardAndSelfPositionFactory>::~shared_ptr,
        &data::ByTargetForwardAndSelfPositionFactory::instance_ptr,
        &_dso_handle);
      data::BySelfForwardAndTargetPositionRegister::BySelfForwardAndTargetPositionRegister(&data::g_BySelfForwardAndTargetPositionRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::BySelfForwardAndTargetPositionFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BySelfForwardAndTargetPositionFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::BySelfForwardAndTargetPositionFactory>::~shared_ptr,
        &data::BySelfForwardAndTargetPositionFactory::instance_ptr,
        &_dso_handle);
      data::ByEnergyRatioRegister::ByEnergyRatioRegister(&data::g_ByEnergyRatioRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByEnergyRatioFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByEnergyRatioFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByEnergyRatioFactory>::~shared_ptr,
        &data::ByEnergyRatioFactory::instance_ptr,
        &_dso_handle);
      data::ByEnergyRegister::ByEnergyRegister(&data::g_ByEnergyRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByEnergyFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByEnergyFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByEnergyFactory>::~shared_ptr,
        &data::ByEnergyFactory::instance_ptr,
        &_dso_handle);
      data::BySummonTagValueRegister::BySummonTagValueRegister(&data::g_BySummonTagValueRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::BySummonTagValueFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BySummonTagValueFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::BySummonTagValueFactory>::~shared_ptr,
        &data::BySummonTagValueFactory::instance_ptr,
        &_dso_handle);
      data::ByAttackNotHitSceneRegister::ByAttackNotHitSceneRegister(&data::g_ByAttackNotHitSceneRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAttackNotHitSceneFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAttackNotHitSceneFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAttackNotHitSceneFactory>::~shared_ptr,
        &data::ByAttackNotHitSceneFactory::instance_ptr,
        &_dso_handle);
      data::ByIsCombatRegister::ByIsCombatRegister(&data::g_ByIsCombatRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByIsCombatFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByIsCombatFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByIsCombatFactory>::~shared_ptr,
        &data::ByIsCombatFactory::instance_ptr,
        &_dso_handle);
      data::ByVehicleIsCombatRegister::ByVehicleIsCombatRegister(&data::g_ByVehicleIsCombatRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByVehicleIsCombatFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByVehicleIsCombatFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByVehicleIsCombatFactory>::~shared_ptr,
        &data::ByVehicleIsCombatFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetAltitudeRegister::ByTargetAltitudeRegister(&data::g_ByTargetAltitudeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetAltitudeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetAltitudeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetAltitudeFactory>::~shared_ptr,
        &data::ByTargetAltitudeFactory::instance_ptr,
        &_dso_handle);
      data::ByStageIsReadyTempRegister::ByStageIsReadyTempRegister(&data::g_ByStageIsReadyTempRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByStageIsReadyTempFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByStageIsReadyTempFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByStageIsReadyTempFactory>::~shared_ptr,
        &data::ByStageIsReadyTempFactory::instance_ptr,
        &_dso_handle);
      data::ByItemNumberRegister::ByItemNumberRegister(&data::g_ByItemNumberRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByItemNumberFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByItemNumberFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByItemNumberFactory>::~shared_ptr,
        &data::ByItemNumberFactory::instance_ptr,
        &_dso_handle);
      data::ByHasFeatureTagRegister::ByHasFeatureTagRegister(&data::g_ByHasFeatureTagRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasFeatureTagFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasFeatureTagFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasFeatureTagFactory>::~shared_ptr,
        &data::ByHasFeatureTagFactory::instance_ptr,
        &_dso_handle);
      data::ByAvatarElementTypeRegister::ByAvatarElementTypeRegister(&data::g_ByAvatarElementTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAvatarElementTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAvatarElementTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAvatarElementTypeFactory>::~shared_ptr,
        &data::ByAvatarElementTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByAvatarWeaponTypeRegister::ByAvatarWeaponTypeRegister(&data::g_ByAvatarWeaponTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAvatarWeaponTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAvatarWeaponTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAvatarWeaponTypeFactory>::~shared_ptr,
        &data::ByAvatarWeaponTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByAvatarBodyTypeRegister::ByAvatarBodyTypeRegister(&data::g_ByAvatarBodyTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAvatarBodyTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAvatarBodyTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAvatarBodyTypeFactory>::~shared_ptr,
        &data::ByAvatarBodyTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByCurTeamHasFeatureTagRegister::ByCurTeamHasFeatureTagRegister(&data::g_ByCurTeamHasFeatureTagRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurTeamHasFeatureTagFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurTeamHasFeatureTagFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurTeamHasFeatureTagFactory>::~shared_ptr,
        &data::ByCurTeamHasFeatureTagFactory::instance_ptr,
        &_dso_handle);
      data::ByCurTeamHasElementTypeRegister::ByCurTeamHasElementTypeRegister(&data::g_ByCurTeamHasElementTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurTeamHasElementTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurTeamHasElementTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurTeamHasElementTypeFactory>::~shared_ptr,
        &data::ByCurTeamHasElementTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByCurTeamElementTypeSortRegister::ByCurTeamElementTypeSortRegister(&data::g_ByCurTeamElementTypeSortRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurTeamElementTypeSortFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurTeamElementTypeSortFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurTeamElementTypeSortFactory>::~shared_ptr,
        &data::ByCurTeamElementTypeSortFactory::instance_ptr,
        &_dso_handle);
      data::ByCurTeamHasWeaponTypeRegister::ByCurTeamHasWeaponTypeRegister(&data::g_ByCurTeamHasWeaponTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurTeamHasWeaponTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurTeamHasWeaponTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurTeamHasWeaponTypeFactory>::~shared_ptr,
        &data::ByCurTeamHasWeaponTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByCurTeamWeaponTypeSortRegister::ByCurTeamWeaponTypeSortRegister(&data::g_ByCurTeamWeaponTypeSortRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurTeamWeaponTypeSortFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurTeamWeaponTypeSortFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurTeamWeaponTypeSortFactory>::~shared_ptr,
        &data::ByCurTeamWeaponTypeSortFactory::instance_ptr,
        &_dso_handle);
      data::ByCurTeamHasBodyTypeRegister::ByCurTeamHasBodyTypeRegister(&data::g_ByCurTeamHasBodyTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurTeamHasBodyTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurTeamHasBodyTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurTeamHasBodyTypeFactory>::~shared_ptr,
        &data::ByCurTeamHasBodyTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByCurTeamBodyTypeSortRegister::ByCurTeamBodyTypeSortRegister(&data::g_ByCurTeamBodyTypeSortRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurTeamBodyTypeSortFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurTeamBodyTypeSortFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurTeamBodyTypeSortFactory>::~shared_ptr,
        &data::ByCurTeamBodyTypeSortFactory::instance_ptr,
        &_dso_handle);
      data::ByBigTeamHasFeatureTagRegister::ByBigTeamHasFeatureTagRegister(&data::g_ByBigTeamHasFeatureTagRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByBigTeamHasFeatureTagFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByBigTeamHasFeatureTagFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByBigTeamHasFeatureTagFactory>::~shared_ptr,
        &data::ByBigTeamHasFeatureTagFactory::instance_ptr,
        &_dso_handle);
      data::ByBigTeamHasElementTypeRegister::ByBigTeamHasElementTypeRegister(&data::g_ByBigTeamHasElementTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByBigTeamHasElementTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByBigTeamHasElementTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByBigTeamHasElementTypeFactory>::~shared_ptr,
        &data::ByBigTeamHasElementTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByBigTeamElementTypeSortRegister::ByBigTeamElementTypeSortRegister(&data::g_ByBigTeamElementTypeSortRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByBigTeamElementTypeSortFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByBigTeamElementTypeSortFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByBigTeamElementTypeSortFactory>::~shared_ptr,
        &data::ByBigTeamElementTypeSortFactory::instance_ptr,
        &_dso_handle);
      data::ByBigTeamHasWeaponTypeRegister::ByBigTeamHasWeaponTypeRegister(&data::g_ByBigTeamHasWeaponTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByBigTeamHasWeaponTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByBigTeamHasWeaponTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByBigTeamHasWeaponTypeFactory>::~shared_ptr,
        &data::ByBigTeamHasWeaponTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByBigTeamWeaponTypeSortRegister::ByBigTeamWeaponTypeSortRegister(&data::g_ByBigTeamWeaponTypeSortRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByBigTeamWeaponTypeSortFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByBigTeamWeaponTypeSortFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByBigTeamWeaponTypeSortFactory>::~shared_ptr,
        &data::ByBigTeamWeaponTypeSortFactory::instance_ptr,
        &_dso_handle);
      data::ByBigTeamHasBodyTypeRegister::ByBigTeamHasBodyTypeRegister(&data::g_ByBigTeamHasBodyTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByBigTeamHasBodyTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByBigTeamHasBodyTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByBigTeamHasBodyTypeFactory>::~shared_ptr,
        &data::ByBigTeamHasBodyTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByBigTeamBodyTypeSortRegister::ByBigTeamBodyTypeSortRegister(&data::g_ByBigTeamBodyTypeSortRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByBigTeamBodyTypeSortFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByBigTeamBodyTypeSortFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByBigTeamBodyTypeSortFactory>::~shared_ptr,
        &data::ByBigTeamBodyTypeSortFactory::instance_ptr,
        &_dso_handle);
      data::ByAttackTypeRegister::ByAttackTypeRegister(&data::g_ByAttackTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByAttackTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByAttackTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByAttackTypeFactory>::~shared_ptr,
        &data::ByAttackTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByCompareWithTargetRegister::ByCompareWithTargetRegister(&data::g_ByCompareWithTargetRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCompareWithTargetFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCompareWithTargetFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCompareWithTargetFactory>::~shared_ptr,
        &data::ByCompareWithTargetFactory::instance_ptr,
        &_dso_handle);
      data::ByEntityAppearVisionTypeRegister::ByEntityAppearVisionTypeRegister(&data::g_ByEntityAppearVisionTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByEntityAppearVisionTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByEntityAppearVisionTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByEntityAppearVisionTypeFactory>::~shared_ptr,
        &data::ByEntityAppearVisionTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByElementTriggerEntityTypeRegister::ByElementTriggerEntityTypeRegister(&data::g_ByElementTriggerEntityTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByElementTriggerEntityTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByElementTriggerEntityTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByElementTriggerEntityTypeFactory>::~shared_ptr,
        &data::ByElementTriggerEntityTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByElementReactionSourceTypeRegister::ByElementReactionSourceTypeRegister(&data::g_ByElementReactionSourceTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByElementReactionSourceTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByElementReactionSourceTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByElementReactionSourceTypeFactory>::~shared_ptr,
        &data::ByElementReactionSourceTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByElementReactionTypeRegister::ByElementReactionTypeRegister(&data::g_ByElementReactionTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByElementReactionTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByElementReactionTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByElementReactionTypeFactory>::~shared_ptr,
        &data::ByElementReactionTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetConfigIDRegister::ByTargetConfigIDRegister(&data::g_ByTargetConfigIDRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetConfigIDFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetConfigIDFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetConfigIDFactory>::~shared_ptr,
        &data::ByTargetConfigIDFactory::instance_ptr,
        &_dso_handle);
      data::ByIsLocalAvatarRegister::ByIsLocalAvatarRegister(&data::g_ByIsLocalAvatarRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByIsLocalAvatarFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByIsLocalAvatarFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByIsLocalAvatarFactory>::~shared_ptr,
        &data::ByIsLocalAvatarFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetGadgetStateRegister::ByTargetGadgetStateRegister(&data::g_ByTargetGadgetStateRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetGadgetStateFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetGadgetStateFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetGadgetStateFactory>::~shared_ptr,
        &data::ByTargetGadgetStateFactory::instance_ptr,
        &_dso_handle);
      data::ByDieStateFlagRegister::ByDieStateFlagRegister(&data::g_ByDieStateFlagRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByDieStateFlagFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByDieStateFlagFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByDieStateFlagFactory>::~shared_ptr,
        &data::ByDieStateFlagFactory::instance_ptr,
        &_dso_handle);
      data::ByHasShieldRegister::ByHasShieldRegister(&data::g_ByHasShieldRegister);
      data::ByHasShieldV2Register::ByHasShieldV2Register(&data::g_ByHasShieldV2Register);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasShieldV2Factory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasShieldV2Factory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasShieldV2Factory>::~shared_ptr,
        &data::ByHasShieldV2Factory::instance_ptr,
        &_dso_handle);
      data::ByHasShieldBarRegister::ByHasShieldBarRegister(&data::g_ByHasShieldBarRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasShieldBarFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasShieldBarFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasShieldBarFactory>::~shared_ptr,
        &data::ByHasShieldBarFactory::instance_ptr,
        &_dso_handle);
      data::ByGlobalPosToGroundRegister::ByGlobalPosToGroundRegister(&data::g_ByGlobalPosToGroundRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByGlobalPosToGroundFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByGlobalPosToGroundFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByGlobalPosToGroundFactory>::~shared_ptr,
        &data::ByGlobalPosToGroundFactory::instance_ptr,
        &_dso_handle);
      data::ByEquipAffixReadyRegister::ByEquipAffixReadyRegister(&data::g_ByEquipAffixReadyRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByEquipAffixReadyFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByEquipAffixReadyFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByEquipAffixReadyFactory>::~shared_ptr,
        &data::ByEquipAffixReadyFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetInAreaRegister::ByTargetInAreaRegister(&data::g_ByTargetInAreaRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetInAreaFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetInAreaFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetInAreaFactory>::~shared_ptr,
        &data::ByTargetInAreaFactory::instance_ptr,
        &_dso_handle);
      data::ByIsTargetCampRegister::ByIsTargetCampRegister(&data::g_ByIsTargetCampRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByIsTargetCampFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByIsTargetCampFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByIsTargetCampFactory>::~shared_ptr,
        &data::ByIsTargetCampFactory::instance_ptr,
        &_dso_handle);
      data::ByHasChildGadgetRegister::ByHasChildGadgetRegister(&data::g_ByHasChildGadgetRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasChildGadgetFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasChildGadgetFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasChildGadgetFactory>::~shared_ptr,
        &data::ByHasChildGadgetFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetLayoutAreaRegister::ByTargetLayoutAreaRegister(&data::g_ByTargetLayoutAreaRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetLayoutAreaFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetLayoutAreaFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetLayoutAreaFactory>::~shared_ptr,
        &data::ByTargetLayoutAreaFactory::instance_ptr,
        &_dso_handle);
      data::ByPlayerClimateTypeRegister::ByPlayerClimateTypeRegister(&data::g_ByPlayerClimateTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByPlayerClimateTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByPlayerClimateTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByPlayerClimateTypeFactory>::~shared_ptr,
        &data::ByPlayerClimateTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetWeatherNameRegister::ByTargetWeatherNameRegister(&data::g_ByTargetWeatherNameRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetWeatherNameFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetWeatherNameFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetWeatherNameFactory>::~shared_ptr,
        &data::ByTargetWeatherNameFactory::instance_ptr,
        &_dso_handle);
      data::ByIsGadgetExistAroundRegister::ByIsGadgetExistAroundRegister(&data::g_ByIsGadgetExistAroundRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByIsGadgetExistAroundFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByIsGadgetExistAroundFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByIsGadgetExistAroundFactory>::~shared_ptr,
        &data::ByIsGadgetExistAroundFactory::instance_ptr,
        &_dso_handle);
      data::ByEntityIsAliveRegister::ByEntityIsAliveRegister(&data::g_ByEntityIsAliveRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByEntityIsAliveFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByEntityIsAliveFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByEntityIsAliveFactory>::~shared_ptr,
        &data::ByEntityIsAliveFactory::instance_ptr,
        &_dso_handle);
      data::ByMonsterAirStateRegister::ByMonsterAirStateRegister(&data::g_ByMonsterAirStateRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByMonsterAirStateFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByMonsterAirStateFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByMonsterAirStateFactory>::~shared_ptr,
        &data::ByMonsterAirStateFactory::instance_ptr,
        &_dso_handle);
      data::ByGameTimeIsLockedRegister::ByGameTimeIsLockedRegister(&data::g_ByGameTimeIsLockedRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByGameTimeIsLockedFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByGameTimeIsLockedFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByGameTimeIsLockedFactory>::~shared_ptr,
        &data::ByGameTimeIsLockedFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetIsCasterRegister::ByTargetIsCasterRegister(&data::g_ByTargetIsCasterRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetIsCasterFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetIsCasterFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetIsCasterFactory>::~shared_ptr,
        &data::ByTargetIsCasterFactory::instance_ptr,
        &_dso_handle);
      data::ByHitElementDurabilityRegister::ByHitElementDurabilityRegister(&data::g_ByHitElementDurabilityRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitElementDurabilityFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitElementDurabilityFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitElementDurabilityFactory>::~shared_ptr,
        &data::ByHitElementDurabilityFactory::instance_ptr,
        &_dso_handle);
      data::ByHasTagRegister::ByHasTagRegister(&data::g_ByHasTagRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasTagFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasTagFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasTagFactory>::~shared_ptr,
        &data::ByHasTagFactory::instance_ptr,
        &_dso_handle);
      data::ByHasLevelTagRegister::ByHasLevelTagRegister(&data::g_ByHasLevelTagRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasLevelTagFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasLevelTagFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasLevelTagFactory>::~shared_ptr,
        &data::ByHasLevelTagFactory::instance_ptr,
        &_dso_handle);
      data::ByCurrentSceneTypesRegister::ByCurrentSceneTypesRegister(&data::g_ByCurrentSceneTypesRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurrentSceneTypesFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurrentSceneTypesFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurrentSceneTypesFactory>::~shared_ptr,
        &data::ByCurrentSceneTypesFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetTypeRegister::ByTargetTypeRegister(&data::g_ByTargetTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetTypeFactory>::~shared_ptr,
        &data::ByTargetTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByCurrentSceneIdRegister::ByCurrentSceneIdRegister(&data::g_ByCurrentSceneIdRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByCurrentSceneIdFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByCurrentSceneIdFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByCurrentSceneIdFactory>::~shared_ptr,
        &data::ByCurrentSceneIdFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetChargeValueRegister::ByTargetChargeValueRegister(&data::g_ByTargetChargeValueRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetChargeValueFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetChargeValueFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetChargeValueFactory>::~shared_ptr,
        &data::ByTargetChargeValueFactory::instance_ptr,
        &_dso_handle);
      data::ByHasModifierRegister::ByHasModifierRegister(&data::g_ByHasModifierRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHasModifierFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHasModifierFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHasModifierFactory>::~shared_ptr,
        &data::ByHasModifierFactory::instance_ptr,
        &_dso_handle);
      data::ByFindBlinkPointSuccessRegister::ByFindBlinkPointSuccessRegister(&data::g_ByFindBlinkPointSuccessRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByFindBlinkPointSuccessFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByFindBlinkPointSuccessFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByFindBlinkPointSuccessFactory>::~shared_ptr,
        &data::ByFindBlinkPointSuccessFactory::instance_ptr,
        &_dso_handle);
      data::ByFollowTargetValidRegister::ByFollowTargetValidRegister(&data::g_ByFollowTargetValidRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByFollowTargetValidFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByFollowTargetValidFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByFollowTargetValidFactory>::~shared_ptr,
        &data::ByFollowTargetValidFactory::instance_ptr,
        &_dso_handle);
      data::ByWidgetExCDReadyRegister::ByWidgetExCDReadyRegister(&data::g_ByWidgetExCDReadyRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByWidgetExCDReadyFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByWidgetExCDReadyFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByWidgetExCDReadyFactory>::~shared_ptr,
        &data::ByWidgetExCDReadyFactory::instance_ptr,
        &_dso_handle);
      data::ByHaveMoveInputRegister::ByHaveMoveInputRegister(&data::g_ByHaveMoveInputRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHaveMoveInputFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHaveMoveInputFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHaveMoveInputFactory>::~shared_ptr,
        &data::ByHaveMoveInputFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetSkillPointRegister::ByTargetSkillPointRegister(&data::g_ByTargetSkillPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetSkillPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetSkillPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetSkillPointFactory>::~shared_ptr,
        &data::ByTargetSkillPointFactory::instance_ptr,
        &_dso_handle);
      data::ByDungeonSettledRegister::ByDungeonSettledRegister(&data::g_ByDungeonSettledRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByDungeonSettledFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByDungeonSettledFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByDungeonSettledFactory>::~shared_ptr,
        &data::ByDungeonSettledFactory::instance_ptr,
        &_dso_handle);
      data::BySceneLoadedRegister::BySceneLoadedRegister(&data::g_BySceneLoadedRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::BySceneLoadedFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BySceneLoadedFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::BySceneLoadedFactory>::~shared_ptr,
        &data::BySceneLoadedFactory::instance_ptr,
        &_dso_handle);
      data::ByRaycastRegister::ByRaycastRegister(&data::g_ByRaycastRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByRaycastFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByRaycastFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByRaycastFactory>::~shared_ptr,
        &data::ByRaycastFactory::instance_ptr,
        &_dso_handle);
      data::ByTrampolineTypeRegister::ByTrampolineTypeRegister(&data::g_ByTrampolineTypeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTrampolineTypeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTrampolineTypeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTrampolineTypeFactory>::~shared_ptr,
        &data::ByTrampolineTypeFactory::instance_ptr,
        &_dso_handle);
      data::ByIsInReconnectRegister::ByIsInReconnectRegister(&data::g_ByIsInReconnectRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByIsInReconnectFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByIsInReconnectFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByIsInReconnectFactory>::~shared_ptr,
        &data::ByIsInReconnectFactory::instance_ptr,
        &_dso_handle);
      data::ByInputDeviceRegister::ByInputDeviceRegister(&data::g_ByInputDeviceRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByInputDeviceFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByInputDeviceFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByInputDeviceFactory>::~shared_ptr,
        &data::ByInputDeviceFactory::instance_ptr,
        &_dso_handle);
      data::ByHitLevelRegister::ByHitLevelRegister(&data::g_ByHitLevelRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByHitLevelFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByHitLevelFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByHitLevelFactory>::~shared_ptr,
        &data::ByHitLevelFactory::instance_ptr,
        &_dso_handle);
      data::ByTargetPosToGlobalPosDistanceRegister::ByTargetPosToGlobalPosDistanceRegister(&data::g_ByTargetPosToGlobalPosDistanceRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByTargetPosToGlobalPosDistanceFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByTargetPosToGlobalPosDistanceFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByTargetPosToGlobalPosDistanceFactory>::~shared_ptr,
        &data::ByTargetPosToGlobalPosDistanceFactory::instance_ptr,
        &_dso_handle);
      data::ByGlobalPosToGlobalPosDistanceRegister::ByGlobalPosToGlobalPosDistanceRegister(&data::g_ByGlobalPosToGlobalPosDistanceRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ByGlobalPosToGlobalPosDistanceFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ByGlobalPosToGlobalPosDistanceFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ByGlobalPosToGlobalPosDistanceFactory>::~shared_ptr,
        &data::ByGlobalPosToGlobalPosDistanceFactory::instance_ptr,
        &_dso_handle);
      v6 = ((v74 + 1136) >> 3) + 2147450880;
      *(_DWORD *)v6 = 0;
      *(_WORD *)(v6 + 4) = 0;
      *(_WORD *)(((v74 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 576) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBeHitBlendShake>();
      std::pair<std::string const,std::shared_ptr<data::ConfigBeHitBlendShake>>::pair<char const(&)[22],std::shared_ptr<data::ConfigBeHitBlendShake>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > *const)(v74 + 1136),
        (const char (*)[22])"ConfigBeHitBlendShake",
        (std::shared_ptr<data::ConfigBeHitBlendShake> *)(v74 + 576));
      __l._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > >::iterator)(v74 + 1136);
      __l._M_len = 1LL;
      *(_BYTE *)(((v74 + 64) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBeHitBlendShake>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > > *const)(v74 + 80));
      std::map<std::string,std::shared_ptr<data::ConfigBeHitBlendShake>>::map(
        &data::g_ConfigBeHitBlendShakeMap[abi:cxx11],
        __l,
        (const std::less<std::string > *)(v74 + 64),
        (const std::map<std::string,std::shared_ptr<data::ConfigBeHitBlendShake>>::allocator_type *)(v74 + 80));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBeHitBlendShake>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > > *const)(v74 + 80));
      *(_BYTE *)(((v74 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 64) >> 3) + 0x7FFF8000) = -8;
      for ( j = (std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > *)(v74 + 1184);
            j != (std::pair<const std::string,std::shared_ptr<data::ConfigBeHitBlendShake> > *)(v74 + 1136);
            std::pair<std::string const,std::shared_ptr<data::ConfigBeHitBlendShake>>::~pair(j) )
      {
        --j;
      }
      v8 = ((v74 + 1136) >> 3) + 2147450880;
      *(_DWORD *)v8 = -117901064;
      *(_WORD *)(v8 + 4) = -1800;
      std::shared_ptr<data::ConfigBeHitBlendShake>::~shared_ptr((std::shared_ptr<data::ConfigBeHitBlendShake> *const)(v74 + 576));
      *(_WORD *)(((v74 + 576) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigBeHitBlendShake>>::~map,
        &data::g_ConfigBeHitBlendShakeMap[abi:cxx11],
        &_dso_handle);
      data::ConfigBeHitBlendShakeByAinmatorRegister::ConfigBeHitBlendShakeByAinmatorRegister(&data::g_ConfigBeHitBlendShakeByAinmatorRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBeHitBlendShakeByAinmatorFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBeHitBlendShakeByAinmatorFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBeHitBlendShakeByAinmatorFactory>::~shared_ptr,
        &data::ConfigBeHitBlendShakeByAinmatorFactory::instance_ptr,
        &_dso_handle);
      v9 = ((v74 + 1216) >> 3) + 2147450880;
      *(_DWORD *)v9 = 0;
      *(_WORD *)(v9 + 4) = 0;
      *(_WORD *)(((v74 + 608) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 608) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigSpecialCamera>();
      std::pair<std::string const,std::shared_ptr<data::ConfigSpecialCamera>>::pair<char const(&)[20],std::shared_ptr<data::ConfigSpecialCamera>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > *const)(v74 + 1216),
        (const char (*)[20])"ConfigSpecialCamera",
        (std::shared_ptr<data::ConfigSpecialCamera> *)(v74 + 608));
      v60._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > >::iterator)(v74 + 1216);
      v60._M_len = 1LL;
      *(_BYTE *)(((v74 + 96) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 112) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigSpecialCamera>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > > *const)(v74 + 112));
      std::map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::map(
        &data::g_ConfigSpecialCameraMap[abi:cxx11],
        v60,
        (const std::less<std::string > *)(v74 + 96),
        (const std::map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::allocator_type *)(v74 + 112));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigSpecialCamera>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > > *const)(v74 + 112));
      *(_BYTE *)(((v74 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 96) >> 3) + 0x7FFF8000) = -8;
      for ( k = (std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > *)(v74 + 1264);
            k != (std::pair<const std::string,std::shared_ptr<data::ConfigSpecialCamera> > *)(v74 + 1216);
            std::pair<std::string const,std::shared_ptr<data::ConfigSpecialCamera>>::~pair(k) )
      {
        --k;
      }
      v11 = ((v74 + 1216) >> 3) + 2147450880;
      *(_DWORD *)v11 = -117901064;
      *(_WORD *)(v11 + 4) = -1800;
      std::shared_ptr<data::ConfigSpecialCamera>::~shared_ptr((std::shared_ptr<data::ConfigSpecialCamera> *const)(v74 + 608));
      *(_WORD *)(((v74 + 608) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigSpecialCamera>>::~map,
        &data::g_ConfigSpecialCameraMap[abi:cxx11],
        &_dso_handle);
      data::ConfigContinuesLockCameraRegister::ConfigContinuesLockCameraRegister(&data::g_ConfigContinuesLockCameraRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigContinuesLockCameraFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigContinuesLockCameraFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigContinuesLockCameraFactory>::~shared_ptr,
        &data::ConfigContinuesLockCameraFactory::instance_ptr,
        &_dso_handle);
      data::ConfigContinuesLockCameraV2Register::ConfigContinuesLockCameraV2Register(&data::g_ConfigContinuesLockCameraV2Register);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigContinuesLockCameraV2Factory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigContinuesLockCameraV2Factory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigContinuesLockCameraV2Factory>::~shared_ptr,
        &data::ConfigContinuesLockCameraV2Factory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetSpecialCameraRegister::ConfigGadgetSpecialCameraRegister(&data::g_ConfigGadgetSpecialCameraRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetSpecialCameraFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetSpecialCameraFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetSpecialCameraFactory>::~shared_ptr,
        &data::ConfigGadgetSpecialCameraFactory::instance_ptr,
        &_dso_handle);
      v12 = ((v74 + 1296) >> 3) + 2147450880;
      *(_DWORD *)v12 = 0;
      *(_WORD *)(v12 + 4) = 0;
      *(_WORD *)(((v74 + 640) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 640) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigEffectAttachShape>();
      std::pair<std::string const,std::shared_ptr<data::ConfigEffectAttachShape>>::pair<char const(&)[24],std::shared_ptr<data::ConfigEffectAttachShape>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > *const)(v74 + 1296),
        (const char (*)[24])"ConfigEffectAttachShape",
        (std::shared_ptr<data::ConfigEffectAttachShape> *)(v74 + 640));
      v61._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > >::iterator)(v74 + 1296);
      v61._M_len = 1LL;
      *(_BYTE *)(((v74 + 128) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 144) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigEffectAttachShape>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > > *const)(v74 + 144));
      std::map<std::string,std::shared_ptr<data::ConfigEffectAttachShape>>::map(
        &data::g_ConfigEffectAttachShapeMap[abi:cxx11],
        v61,
        (const std::less<std::string > *)(v74 + 128),
        (const std::map<std::string,std::shared_ptr<data::ConfigEffectAttachShape>>::allocator_type *)(v74 + 144));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigEffectAttachShape>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > > *const)(v74 + 144));
      *(_BYTE *)(((v74 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 128) >> 3) + 0x7FFF8000) = -8;
      for ( m = (std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > *)(v74 + 1344);
            m != (std::pair<const std::string,std::shared_ptr<data::ConfigEffectAttachShape> > *)(v74 + 1296);
            std::pair<std::string const,std::shared_ptr<data::ConfigEffectAttachShape>>::~pair(m) )
      {
        --m;
      }
      v14 = ((v74 + 1296) >> 3) + 2147450880;
      *(_DWORD *)v14 = -117901064;
      *(_WORD *)(v14 + 4) = -1800;
      std::shared_ptr<data::ConfigEffectAttachShape>::~shared_ptr((std::shared_ptr<data::ConfigEffectAttachShape> *const)(v74 + 640));
      *(_WORD *)(((v74 + 640) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigEffectAttachShape>>::~map,
        &data::g_ConfigEffectAttachShapeMap[abi:cxx11],
        &_dso_handle);
      data::ConfigEffectAttachBoxRegister::ConfigEffectAttachBoxRegister(&data::g_ConfigEffectAttachBoxRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigEffectAttachBoxFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigEffectAttachBoxFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigEffectAttachBoxFactory>::~shared_ptr,
        &data::ConfigEffectAttachBoxFactory::instance_ptr,
        &_dso_handle);
      data::ConfigEffectAttachSkinnedMeshRegister::ConfigEffectAttachSkinnedMeshRegister(&data::g_ConfigEffectAttachSkinnedMeshRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigEffectAttachSkinnedMeshFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigEffectAttachSkinnedMeshFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigEffectAttachSkinnedMeshFactory>::~shared_ptr,
        &data::ConfigEffectAttachSkinnedMeshFactory::instance_ptr,
        &_dso_handle);
      data::ConfigEffectAttachMeshRegister::ConfigEffectAttachMeshRegister(&data::g_ConfigEffectAttachMeshRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigEffectAttachMeshFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigEffectAttachMeshFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigEffectAttachMeshFactory>::~shared_ptr,
        &data::ConfigEffectAttachMeshFactory::instance_ptr,
        &_dso_handle);
      v15 = ((v74 + 1376) >> 3) + 2147450880;
      *(_DWORD *)v15 = 0;
      *(_WORD *)(v15 + 4) = 0;
      *(_WORD *)(((v74 + 672) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 672) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBillboard>();
      std::pair<std::string const,std::shared_ptr<data::ConfigBillboard>>::pair<char const(&)[16],std::shared_ptr<data::ConfigBillboard>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > *const)(v74 + 1376),
        (const char (*)[16])"ConfigBillboard",
        (std::shared_ptr<data::ConfigBillboard> *)(v74 + 672));
      v62._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > >::iterator)(v74 + 1376);
      v62._M_len = 1LL;
      *(_BYTE *)(((v74 + 160) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 176) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBillboard>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > > *const)(v74 + 176));
      std::map<std::string,std::shared_ptr<data::ConfigBillboard>>::map(
        &data::g_ConfigBillboardMap[abi:cxx11],
        v62,
        (const std::less<std::string > *)(v74 + 160),
        (const std::map<std::string,std::shared_ptr<data::ConfigBillboard>>::allocator_type *)(v74 + 176));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBillboard>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > > *const)(v74 + 176));
      *(_BYTE *)(((v74 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 160) >> 3) + 0x7FFF8000) = -8;
      for ( n = (std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > *)(v74 + 1424);
            n != (std::pair<const std::string,std::shared_ptr<data::ConfigBillboard> > *)(v74 + 1376);
            std::pair<std::string const,std::shared_ptr<data::ConfigBillboard>>::~pair(n) )
      {
        --n;
      }
      v17 = ((v74 + 1376) >> 3) + 2147450880;
      *(_DWORD *)v17 = -117901064;
      *(_WORD *)(v17 + 4) = -1800;
      std::shared_ptr<data::ConfigBillboard>::~shared_ptr((std::shared_ptr<data::ConfigBillboard> *const)(v74 + 672));
      *(_WORD *)(((v74 + 672) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigBillboard>>::~map,
        &data::g_ConfigBillboardMap[abi:cxx11],
        &_dso_handle);
      data::ConfigCombatBillboardRegister::ConfigCombatBillboardRegister(&data::g_ConfigCombatBillboardRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigCombatBillboardFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigCombatBillboardFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigCombatBillboardFactory>::~shared_ptr,
        &data::ConfigCombatBillboardFactory::instance_ptr,
        &_dso_handle);
      data::ConfigProgressBillboardRegister::ConfigProgressBillboardRegister(&data::g_ConfigProgressBillboardRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigProgressBillboardFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigProgressBillboardFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigProgressBillboardFactory>::~shared_ptr,
        &data::ConfigProgressBillboardFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetIconBillboardRegister::ConfigGadgetIconBillboardRegister(&data::g_ConfigGadgetIconBillboardRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetIconBillboardFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetIconBillboardFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetIconBillboardFactory>::~shared_ptr,
        &data::ConfigGadgetIconBillboardFactory::instance_ptr,
        &_dso_handle);
      v18 = ((v74 + 1456) >> 3) + 2147450880;
      *(_DWORD *)v18 = 0;
      *(_WORD *)(v18 + 4) = 0;
      *(_WORD *)(((v74 + 704) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 704) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornDirectionType>();
      std::pair<std::string const,std::shared_ptr<data::ConfigBornDirectionType>>::pair<char const(&)[24],std::shared_ptr<data::ConfigBornDirectionType>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > *const)(v74 + 1456),
        (const char (*)[24])"ConfigBornDirectionType",
        (std::shared_ptr<data::ConfigBornDirectionType> *)(v74 + 704));
      v63._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > >::iterator)(v74 + 1456);
      v63._M_len = 1LL;
      *(_BYTE *)(((v74 + 192) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 208) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBornDirectionType>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > > *const)(v74 + 208));
      std::map<std::string,std::shared_ptr<data::ConfigBornDirectionType>>::map(
        &data::g_ConfigBornDirectionTypeMap[abi:cxx11],
        v63,
        (const std::less<std::string > *)(v74 + 192),
        (const std::map<std::string,std::shared_ptr<data::ConfigBornDirectionType>>::allocator_type *)(v74 + 208));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBornDirectionType>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > > *const)(v74 + 208));
      *(_BYTE *)(((v74 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 192) >> 3) + 0x7FFF8000) = -8;
      for ( ii = (std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > *)(v74 + 1504);
            ii != (std::pair<const std::string,std::shared_ptr<data::ConfigBornDirectionType> > *)(v74 + 1456);
            std::pair<std::string const,std::shared_ptr<data::ConfigBornDirectionType>>::~pair(ii) )
      {
        --ii;
      }
      v20 = ((v74 + 1456) >> 3) + 2147450880;
      *(_DWORD *)v20 = -117901064;
      *(_WORD *)(v20 + 4) = -1800;
      std::shared_ptr<data::ConfigBornDirectionType>::~shared_ptr((std::shared_ptr<data::ConfigBornDirectionType> *const)(v74 + 704));
      *(_WORD *)(((v74 + 704) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigBornDirectionType>>::~map,
        &data::g_ConfigBornDirectionTypeMap[abi:cxx11],
        &_dso_handle);
      data::ConfigDirectionByDefaultRegister::ConfigDirectionByDefaultRegister(&data::g_ConfigDirectionByDefaultRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByDefaultFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByDefaultFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByDefaultFactory>::~shared_ptr,
        &data::ConfigDirectionByDefaultFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByEntityRegister::ConfigDirectionByEntityRegister(&data::g_ConfigDirectionByEntityRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByEntityFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByEntityFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByEntityFactory>::~shared_ptr,
        &data::ConfigDirectionByEntityFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByAttackTargetRegister::ConfigDirectionByAttackTargetRegister(&data::g_ConfigDirectionByAttackTargetRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByAttackTargetFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByAttackTargetFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByAttackTargetFactory>::~shared_ptr,
        &data::ConfigDirectionByAttackTargetFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByAttachPointRegister::ConfigDirectionByAttachPointRegister(&data::g_ConfigDirectionByAttachPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByAttachPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByAttachPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByAttachPointFactory>::~shared_ptr,
        &data::ConfigDirectionByAttachPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByBackToHitBoxCenterRegister::ConfigDirectionByBackToHitBoxCenterRegister(&data::g_ConfigDirectionByBackToHitBoxCenterRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByBackToHitBoxCenterFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByBackToHitBoxCenterFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByBackToHitBoxCenterFactory>::~shared_ptr,
        &data::ConfigDirectionByBackToHitBoxCenterFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByLookAtEntityRegister::ConfigDirectionByLookAtEntityRegister(&data::g_ConfigDirectionByLookAtEntityRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByLookAtEntityFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByLookAtEntityFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByLookAtEntityFactory>::~shared_ptr,
        &data::ConfigDirectionByLookAtEntityFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByLookAtEntityFixRegister::ConfigDirectionByLookAtEntityFixRegister(&data::g_ConfigDirectionByLookAtEntityFixRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByLookAtEntityFixFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByLookAtEntityFixFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByLookAtEntityFixFactory>::~shared_ptr,
        &data::ConfigDirectionByLookAtEntityFixFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByGroundNormalRegister::ConfigDirectionByGroundNormalRegister(&data::g_ConfigDirectionByGroundNormalRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByGroundNormalFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByGroundNormalFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByGroundNormalFactory>::~shared_ptr,
        &data::ConfigDirectionByGroundNormalFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByGlobalValueRegister::ConfigDirectionByGlobalValueRegister(&data::g_ConfigDirectionByGlobalValueRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByGlobalValueFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByGlobalValueFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByGlobalValueFactory>::~shared_ptr,
        &data::ConfigDirectionByGlobalValueFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByWorldRegister::ConfigDirectionByWorldRegister(&data::g_ConfigDirectionByWorldRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByWorldFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByWorldFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByWorldFactory>::~shared_ptr,
        &data::ConfigDirectionByWorldFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByGroundNormalRangeRegister::ConfigDirectionByGroundNormalRangeRegister(&data::g_ConfigDirectionByGroundNormalRangeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByGroundNormalRangeFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByGroundNormalRangeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByGroundNormalRangeFactory>::~shared_ptr,
        &data::ConfigDirectionByGroundNormalRangeFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByReflectionRegister::ConfigDirectionByReflectionRegister(&data::g_ConfigDirectionByReflectionRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByReflectionFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByReflectionFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByReflectionFactory>::~shared_ptr,
        &data::ConfigDirectionByReflectionFactory::instance_ptr,
        &_dso_handle);
      data::ConfigDirectionByRefractionRegister::ConfigDirectionByRefractionRegister(&data::g_ConfigDirectionByRefractionRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigDirectionByRefractionFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigDirectionByRefractionFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigDirectionByRefractionFactory>::~shared_ptr,
        &data::ConfigDirectionByRefractionFactory::instance_ptr,
        &_dso_handle);
      v21 = ((v74 + 1536) >> 3) + 2147450880;
      *(_DWORD *)v21 = 0;
      *(_WORD *)(v21 + 4) = 0;
      *(_WORD *)(((v74 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 736) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BornRandom>();
      std::pair<std::string const,std::shared_ptr<data::BornRandom>>::pair<char const(&)[11],std::shared_ptr<data::BornRandom>,true>(
        (std::pair<const std::string,std::shared_ptr<data::BornRandom> > *const)(v74 + 1536),
        (const char (*)[11])"BornRandom",
        (std::shared_ptr<data::BornRandom> *)(v74 + 736));
      v64._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::BornRandom> > >::iterator)(v74 + 1536);
      v64._M_len = 1LL;
      *(_BYTE *)(((v74 + 224) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 240) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::BornRandom>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::BornRandom> > > *const)(v74 + 240));
      std::map<std::string,std::shared_ptr<data::BornRandom>>::map(
        &data::g_BornRandomMap[abi:cxx11],
        v64,
        (const std::less<std::string > *)(v74 + 224),
        (const std::map<std::string,std::shared_ptr<data::BornRandom>>::allocator_type *)(v74 + 240));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::BornRandom>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::BornRandom> > > *const)(v74 + 240));
      *(_BYTE *)(((v74 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 224) >> 3) + 0x7FFF8000) = -8;
      for ( jj = (std::pair<const std::string,std::shared_ptr<data::BornRandom> > *)(v74 + 1584);
            jj != (std::pair<const std::string,std::shared_ptr<data::BornRandom> > *)(v74 + 1536);
            std::pair<std::string const,std::shared_ptr<data::BornRandom>>::~pair(jj) )
      {
        --jj;
      }
      v23 = ((v74 + 1536) >> 3) + 2147450880;
      *(_DWORD *)v23 = -117901064;
      *(_WORD *)(v23 + 4) = -1800;
      std::shared_ptr<data::BornRandom>::~shared_ptr((std::shared_ptr<data::BornRandom> *const)(v74 + 736));
      *(_WORD *)(((v74 + 736) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::BornRandom>>::~map,
        &data::g_BornRandomMap[abi:cxx11],
        &_dso_handle);
      data::BornRandomFromCenterRegister::BornRandomFromCenterRegister(&data::g_BornRandomFromCenterRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::BornRandomFromCenterFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BornRandomFromCenterFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::BornRandomFromCenterFactory>::~shared_ptr,
        &data::BornRandomFromCenterFactory::instance_ptr,
        &_dso_handle);
      data::BornRandomInShapeRegister::BornRandomInShapeRegister(&data::g_BornRandomInShapeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::BornRandomInShapeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::BornRandomInShapeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::BornRandomInShapeFactory>::~shared_ptr,
        &data::BornRandomInShapeFactory::instance_ptr,
        &_dso_handle);
      v24 = ((v74 + 1616) >> 3) + 2147450880;
      *(_DWORD *)v24 = 0;
      *(_WORD *)(v24 + 4) = 0;
      *(_WORD *)(((v74 + 768) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 768) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornType>();
      std::pair<std::string const,std::shared_ptr<data::ConfigBornType>>::pair<char const(&)[15],std::shared_ptr<data::ConfigBornType>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > *const)(v74 + 1616),
        (const char (*)[15])"ConfigBornType",
        (std::shared_ptr<data::ConfigBornType> *)(v74 + 768));
      v65._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > >::iterator)(v74 + 1616);
      v65._M_len = 1LL;
      *(_BYTE *)(((v74 + 256) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 272) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBornType>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > > *const)(v74 + 272));
      std::map<std::string,std::shared_ptr<data::ConfigBornType>>::map(
        &data::g_ConfigBornTypeMap[abi:cxx11],
        v65,
        (const std::less<std::string > *)(v74 + 256),
        (const std::map<std::string,std::shared_ptr<data::ConfigBornType>>::allocator_type *)(v74 + 272));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigBornType>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > > *const)(v74 + 272));
      *(_BYTE *)(((v74 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 256) >> 3) + 0x7FFF8000) = -8;
      for ( kk = (std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > *)(v74 + 1664);
            kk != (std::pair<const std::string,std::shared_ptr<data::ConfigBornType> > *)(v74 + 1616);
            std::pair<std::string const,std::shared_ptr<data::ConfigBornType>>::~pair(kk) )
      {
        --kk;
      }
      v26 = ((v74 + 1616) >> 3) + 2147450880;
      *(_DWORD *)v26 = -117901064;
      *(_WORD *)(v26 + 4) = -1800;
      std::shared_ptr<data::ConfigBornType>::~shared_ptr((std::shared_ptr<data::ConfigBornType> *const)(v74 + 768));
      *(_WORD *)(((v74 + 768) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigBornType>>::~map,
        &data::g_ConfigBornTypeMap[abi:cxx11],
        &_dso_handle);
      data::ConfigBornByTargetRegister::ConfigBornByTargetRegister(&data::g_ConfigBornByTargetRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByTargetFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByTargetFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByTargetFactory>::~shared_ptr,
        &data::ConfigBornByTargetFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornBySelfRegister::ConfigBornBySelfRegister(&data::g_ConfigBornBySelfRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornBySelfFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornBySelfFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornBySelfFactory>::~shared_ptr,
        &data::ConfigBornBySelfFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornBySelfOwnerRegister::ConfigBornBySelfOwnerRegister(&data::g_ConfigBornBySelfOwnerRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornBySelfOwnerFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornBySelfOwnerFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornBySelfOwnerFactory>::~shared_ptr,
        &data::ConfigBornBySelfOwnerFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByAttachPointRegister::ConfigBornByAttachPointRegister(&data::g_ConfigBornByAttachPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByAttachPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByAttachPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByAttachPointFactory>::~shared_ptr,
        &data::ConfigBornByAttachPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByStormLightningRegister::ConfigBornByStormLightningRegister(&data::g_ConfigBornByStormLightningRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByStormLightningFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByStormLightningFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByStormLightningFactory>::~shared_ptr,
        &data::ConfigBornByStormLightningFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByWorldRegister::ConfigBornByWorldRegister(&data::g_ConfigBornByWorldRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByWorldFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByWorldFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByWorldFactory>::~shared_ptr,
        &data::ConfigBornByWorldFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByGlobalValueRegister::ConfigBornByGlobalValueRegister(&data::g_ConfigBornByGlobalValueRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByGlobalValueFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByGlobalValueFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByGlobalValueFactory>::~shared_ptr,
        &data::ConfigBornByGlobalValueFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByCollisionPointRegister::ConfigBornByCollisionPointRegister(&data::g_ConfigBornByCollisionPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByCollisionPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByCollisionPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByCollisionPointFactory>::~shared_ptr,
        &data::ConfigBornByCollisionPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByTargetCollisionPointRegister::ConfigBornByTargetCollisionPointRegister(&data::g_ConfigBornByTargetCollisionPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByTargetCollisionPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByTargetCollisionPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByTargetCollisionPointFactory>::~shared_ptr,
        &data::ConfigBornByTargetCollisionPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByRushToPointRegister::ConfigBornByRushToPointRegister(&data::g_ConfigBornByRushToPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByRushToPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByRushToPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByRushToPointFactory>::~shared_ptr,
        &data::ConfigBornByRushToPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByTeleportToPointRegister::ConfigBornByTeleportToPointRegister(&data::g_ConfigBornByTeleportToPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByTeleportToPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByTeleportToPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByTeleportToPointFactory>::~shared_ptr,
        &data::ConfigBornByTeleportToPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByPredicatePointRegister::ConfigBornByPredicatePointRegister(&data::g_ConfigBornByPredicatePointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByPredicatePointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByPredicatePointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByPredicatePointFactory>::~shared_ptr,
        &data::ConfigBornByPredicatePointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByHitPointRegister::ConfigBornByHitPointRegister(&data::g_ConfigBornByHitPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByHitPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByHitPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByHitPointFactory>::~shared_ptr,
        &data::ConfigBornByHitPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByElementPosRegister::ConfigBornByElementPosRegister(&data::g_ConfigBornByElementPosRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByElementPosFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByElementPosFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByElementPosFactory>::~shared_ptr,
        &data::ConfigBornByElementPosFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornBySelectedPointRegister::ConfigBornBySelectedPointRegister(&data::g_ConfigBornBySelectedPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornBySelectedPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornBySelectedPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornBySelectedPointFactory>::~shared_ptr,
        &data::ConfigBornBySelectedPointFactory::instance_ptr,
        &_dso_handle);
      v27 = ((v74 + 1696) >> 3) + 2147450880;
      *(_DWORD *)v27 = 0;
      *(_WORD *)(v27 + 4) = 0;
      *(_WORD *)(((v74 + 800) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 800) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigActionPointSelectType>();
      std::pair<std::string const,std::shared_ptr<data::ConfigActionPointSelectType>>::pair<char const(&)[28],std::shared_ptr<data::ConfigActionPointSelectType>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > *const)(v74 + 1696),
        (const char (*)[28])"ConfigActionPointSelectType",
        (std::shared_ptr<data::ConfigActionPointSelectType> *)(v74 + 800));
      v66._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > >::iterator)(v74 + 1696);
      v66._M_len = 1LL;
      *(_BYTE *)(((v74 + 288) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 304) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigActionPointSelectType>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > > *const)(v74 + 304));
      std::map<std::string,std::shared_ptr<data::ConfigActionPointSelectType>>::map(
        &data::g_ConfigActionPointSelectTypeMap[abi:cxx11],
        v66,
        (const std::less<std::string > *)(v74 + 288),
        (const std::map<std::string,std::shared_ptr<data::ConfigActionPointSelectType>>::allocator_type *)(v74 + 304));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigActionPointSelectType>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > > *const)(v74 + 304));
      *(_BYTE *)(((v74 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 288) >> 3) + 0x7FFF8000) = -8;
      for ( mm = (std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > *)(v74 + 1744);
            mm != (std::pair<const std::string,std::shared_ptr<data::ConfigActionPointSelectType> > *)(v74 + 1696);
            std::pair<std::string const,std::shared_ptr<data::ConfigActionPointSelectType>>::~pair(mm) )
      {
        --mm;
      }
      v29 = ((v74 + 1696) >> 3) + 2147450880;
      *(_DWORD *)v29 = -117901064;
      *(_WORD *)(v29 + 4) = -1800;
      std::shared_ptr<data::ConfigActionPointSelectType>::~shared_ptr((std::shared_ptr<data::ConfigActionPointSelectType> *const)(v74 + 800));
      *(_WORD *)(((v74 + 800) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigActionPointSelectType>>::~map,
        &data::g_ConfigActionPointSelectTypeMap[abi:cxx11],
        &_dso_handle);
      data::SelectActionPointByIDRegister::SelectActionPointByIDRegister(&data::g_SelectActionPointByIDRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::SelectActionPointByIDFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::SelectActionPointByIDFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::SelectActionPointByIDFactory>::~shared_ptr,
        &data::SelectActionPointByIDFactory::instance_ptr,
        &_dso_handle);
      data::SelectActionPointBySelfPosRegister::SelectActionPointBySelfPosRegister(&data::g_SelectActionPointBySelfPosRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::SelectActionPointBySelfPosFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::SelectActionPointBySelfPosFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::SelectActionPointBySelfPosFactory>::~shared_ptr,
        &data::SelectActionPointBySelfPosFactory::instance_ptr,
        &_dso_handle);
      data::SelectActionPointByTargetPosRegister::SelectActionPointByTargetPosRegister(&data::g_SelectActionPointByTargetPosRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::SelectActionPointByTargetPosFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::SelectActionPointByTargetPosFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::SelectActionPointByTargetPosFactory>::~shared_ptr,
        &data::SelectActionPointByTargetPosFactory::instance_ptr,
        &_dso_handle);
      data::SelectActionPointByAwayFromAvatarRegister::SelectActionPointByAwayFromAvatarRegister(&data::g_SelectActionPointByAwayFromAvatarRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::SelectActionPointByAwayFromAvatarFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::SelectActionPointByAwayFromAvatarFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::SelectActionPointByAwayFromAvatarFactory>::~shared_ptr,
        &data::SelectActionPointByAwayFromAvatarFactory::instance_ptr,
        &_dso_handle);
      data::SelectActionPointByTargetOrientationRegister::SelectActionPointByTargetOrientationRegister(&data::g_SelectActionPointByTargetOrientationRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::SelectActionPointByTargetOrientationFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::SelectActionPointByTargetOrientationFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::SelectActionPointByTargetOrientationFactory>::~shared_ptr,
        &data::SelectActionPointByTargetOrientationFactory::instance_ptr,
        &_dso_handle);
      data::SelectActionPointByAllAvatarsOrientationRegister::SelectActionPointByAllAvatarsOrientationRegister(&data::g_SelectActionPointByAllAvatarsOrientationRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::SelectActionPointByAllAvatarsOrientationFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::SelectActionPointByAllAvatarsOrientationFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::SelectActionPointByAllAvatarsOrientationFactory>::~shared_ptr,
        &data::SelectActionPointByAllAvatarsOrientationFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByActionPointRegister::ConfigBornByActionPointRegister(&data::g_ConfigBornByActionPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByActionPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByActionPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByActionPointFactory>::~shared_ptr,
        &data::ConfigBornByActionPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByTargetLinearPointRegister::ConfigBornByTargetLinearPointRegister(&data::g_ConfigBornByTargetLinearPointRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByTargetLinearPointFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByTargetLinearPointFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByTargetLinearPointFactory>::~shared_ptr,
        &data::ConfigBornByTargetLinearPointFactory::instance_ptr,
        &_dso_handle);
      data::ConfigBornByFollowEffectOverPosRegister::ConfigBornByFollowEffectOverPosRegister(&data::g_ConfigBornByFollowEffectOverPosRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigBornByFollowEffectOverPosFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigBornByFollowEffectOverPosFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigBornByFollowEffectOverPosFactory>::~shared_ptr,
        &data::ConfigBornByFollowEffectOverPosFactory::instance_ptr,
        &_dso_handle);
      v30 = ((v74 + 1776) >> 3) + 2147450880;
      *(_DWORD *)v30 = 0;
      *(_WORD *)(v30 + 4) = 0;
      *(_WORD *)(((v74 + 832) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 832) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigHeadControl>();
      std::pair<std::string const,std::shared_ptr<data::ConfigHeadControl>>::pair<char const(&)[18],std::shared_ptr<data::ConfigHeadControl>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > *const)(v74 + 1776),
        (const char (*)[18])"ConfigHeadControl",
        (std::shared_ptr<data::ConfigHeadControl> *)(v74 + 832));
      v67._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > >::iterator)(v74 + 1776);
      v67._M_len = 1LL;
      *(_BYTE *)(((v74 + 320) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 336) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigHeadControl>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > > *const)(v74 + 336));
      std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::map(
        &data::g_ConfigHeadControlMap[abi:cxx11],
        v67,
        (const std::less<std::string > *)(v74 + 320),
        (const std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::allocator_type *)(v74 + 336));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigHeadControl>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > > *const)(v74 + 336));
      *(_BYTE *)(((v74 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 320) >> 3) + 0x7FFF8000) = -8;
      for ( nn = (std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > *)(v74 + 1824);
            nn != (std::pair<const std::string,std::shared_ptr<data::ConfigHeadControl> > *)(v74 + 1776);
            std::pair<std::string const,std::shared_ptr<data::ConfigHeadControl>>::~pair(nn) )
      {
        --nn;
      }
      v32 = ((v74 + 1776) >> 3) + 2147450880;
      *(_DWORD *)v32 = -117901064;
      *(_WORD *)(v32 + 4) = -1800;
      std::shared_ptr<data::ConfigHeadControl>::~shared_ptr((std::shared_ptr<data::ConfigHeadControl> *const)(v74 + 832));
      *(_WORD *)(((v74 + 832) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigHeadControl>>::~map,
        &data::g_ConfigHeadControlMap[abi:cxx11],
        &_dso_handle);
      data::ConfigMonsterHeadControlRegister::ConfigMonsterHeadControlRegister(&data::g_ConfigMonsterHeadControlRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigMonsterHeadControlFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigMonsterHeadControlFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigMonsterHeadControlFactory>::~shared_ptr,
        &data::ConfigMonsterHeadControlFactory::instance_ptr,
        &_dso_handle);
      v33 = ((v74 + 1856) >> 3) + 2147450880;
      *(_DWORD *)v33 = 0;
      *(_WORD *)(v33 + 4) = 0;
      *(_WORD *)(((v74 + 864) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 864) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigEntity>();
      std::pair<std::string const,std::shared_ptr<data::ConfigEntity>>::pair<char const(&)[13],std::shared_ptr<data::ConfigEntity>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > *const)(v74 + 1856),
        (const char (*)[13])"ConfigEntity",
        (std::shared_ptr<data::ConfigEntity> *)(v74 + 864));
      v68._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > >::iterator)(v74 + 1856);
      v68._M_len = 1LL;
      *(_BYTE *)(((v74 + 352) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 368) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigEntity>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > > *const)(v74 + 368));
      std::map<std::string,std::shared_ptr<data::ConfigEntity>>::map(
        &data::g_ConfigEntityMap[abi:cxx11],
        v68,
        (const std::less<std::string > *)(v74 + 352),
        (const std::map<std::string,std::shared_ptr<data::ConfigEntity>>::allocator_type *)(v74 + 368));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigEntity>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > > *const)(v74 + 368));
      *(_BYTE *)(((v74 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 352) >> 3) + 0x7FFF8000) = -8;
      for ( i1 = (std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > *)(v74 + 1904);
            i1 != (std::pair<const std::string,std::shared_ptr<data::ConfigEntity> > *)(v74 + 1856);
            std::pair<std::string const,std::shared_ptr<data::ConfigEntity>>::~pair(i1) )
      {
        --i1;
      }
      v35 = ((v74 + 1856) >> 3) + 2147450880;
      *(_DWORD *)v35 = -117901064;
      *(_WORD *)(v35 + 4) = -1800;
      std::shared_ptr<data::ConfigEntity>::~shared_ptr((std::shared_ptr<data::ConfigEntity> *const)(v74 + 864));
      *(_WORD *)(((v74 + 864) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigEntity>>::~map,
        &data::g_ConfigEntityMap[abi:cxx11],
        &_dso_handle);
      v36 = ((v74 + 1936) >> 3) + 2147450880;
      *(_DWORD *)v36 = 0;
      *(_WORD *)(v36 + 4) = 0;
      *(_WORD *)(((v74 + 896) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 896) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetUIBase>();
      std::pair<std::string const,std::shared_ptr<data::ConfigGadgetUIBase>>::pair<char const(&)[19],std::shared_ptr<data::ConfigGadgetUIBase>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > *const)(v74 + 1936),
        (const char (*)[19])"ConfigGadgetUIBase",
        (std::shared_ptr<data::ConfigGadgetUIBase> *)(v74 + 896));
      v69._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > >::iterator)(v74 + 1936);
      v69._M_len = 1LL;
      *(_BYTE *)(((v74 + 384) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 400) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetUIBase>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > > *const)(v74 + 400));
      std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::map(
        &data::g_ConfigGadgetUIBaseMap[abi:cxx11],
        v69,
        (const std::less<std::string > *)(v74 + 384),
        (const std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::allocator_type *)(v74 + 400));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetUIBase>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > > *const)(v74 + 400));
      *(_BYTE *)(((v74 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 384) >> 3) + 0x7FFF8000) = -8;
      for ( i2 = (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > *)(v74 + 1984);
            i2 != (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetUIBase> > *)(v74 + 1936);
            std::pair<std::string const,std::shared_ptr<data::ConfigGadgetUIBase>>::~pair(i2) )
      {
        --i2;
      }
      v38 = ((v74 + 1936) >> 3) + 2147450880;
      *(_DWORD *)v38 = -117901064;
      *(_WORD *)(v38 + 4) = -1800;
      std::shared_ptr<data::ConfigGadgetUIBase>::~shared_ptr((std::shared_ptr<data::ConfigGadgetUIBase> *const)(v74 + 896));
      *(_WORD *)(((v74 + 896) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigGadgetUIBase>>::~map,
        &data::g_ConfigGadgetUIBaseMap[abi:cxx11],
        &_dso_handle);
      data::ConfigGadgetUIExtraItemRegister::ConfigGadgetUIExtraItemRegister(&data::g_ConfigGadgetUIExtraItemRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetUIExtraItemFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetUIExtraItemFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetUIExtraItemFactory>::~shared_ptr,
        &data::ConfigGadgetUIExtraItemFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetUIRegister::ConfigGadgetUIRegister(&data::g_ConfigGadgetUIRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetUIFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetUIFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetUIFactory>::~shared_ptr,
        &data::ConfigGadgetUIFactory::instance_ptr,
        &_dso_handle);
      v39 = ((v74 + 2016) >> 3) + 2147450880;
      *(_DWORD *)v39 = 0;
      *(_WORD *)(v39 + 4) = 0;
      *(_WORD *)(((v74 + 928) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 928) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetPredicate>();
      std::pair<std::string const,std::shared_ptr<data::ConfigGadgetPredicate>>::pair<char const(&)[22],std::shared_ptr<data::ConfigGadgetPredicate>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > *const)(v74 + 2016),
        (const char (*)[22])"ConfigGadgetPredicate",
        (std::shared_ptr<data::ConfigGadgetPredicate> *)(v74 + 928));
      v70._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > >::iterator)(v74 + 2016);
      v70._M_len = 1LL;
      *(_BYTE *)(((v74 + 416) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 432) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetPredicate>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > > *const)(v74 + 432));
      std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::map(
        &data::g_ConfigGadgetPredicateMap[abi:cxx11],
        v70,
        (const std::less<std::string > *)(v74 + 416),
        (const std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::allocator_type *)(v74 + 432));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetPredicate>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > > *const)(v74 + 432));
      *(_BYTE *)(((v74 + 432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 416) >> 3) + 0x7FFF8000) = -8;
      for ( i3 = (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > *)(v74 + 2064);
            i3 != (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetPredicate> > *)(v74 + 2016);
            std::pair<std::string const,std::shared_ptr<data::ConfigGadgetPredicate>>::~pair(i3) )
      {
        --i3;
      }
      v41 = ((v74 + 2016) >> 3) + 2147450880;
      *(_DWORD *)v41 = -117901064;
      *(_WORD *)(v41 + 4) = -1800;
      std::shared_ptr<data::ConfigGadgetPredicate>::~shared_ptr((std::shared_ptr<data::ConfigGadgetPredicate> *const)(v74 + 928));
      *(_WORD *)(((v74 + 928) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigGadgetPredicate>>::~map,
        &data::g_ConfigGadgetPredicateMap[abi:cxx11],
        &_dso_handle);
      data::ConfigPredicateByTimeRegister::ConfigPredicateByTimeRegister(&data::g_ConfigPredicateByTimeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigPredicateByTimeFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigPredicateByTimeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigPredicateByTimeFactory>::~shared_ptr,
        &data::ConfigPredicateByTimeFactory::instance_ptr,
        &_dso_handle);
      data::ConfigPredicateByPlatformRegister::ConfigPredicateByPlatformRegister(&data::g_ConfigPredicateByPlatformRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigPredicateByPlatformFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigPredicateByPlatformFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigPredicateByPlatformFactory>::~shared_ptr,
        &data::ConfigPredicateByPlatformFactory::instance_ptr,
        &_dso_handle);
      data::ConfigPredicateByInteractRegister::ConfigPredicateByInteractRegister(&data::g_ConfigPredicateByInteractRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigPredicateByInteractFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigPredicateByInteractFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigPredicateByInteractFactory>::~shared_ptr,
        &data::ConfigPredicateByInteractFactory::instance_ptr,
        &_dso_handle);
      v42 = ((v74 + 2096) >> 3) + 2147450880;
      *(_DWORD *)v42 = 0;
      *(_WORD *)(v42 + 4) = 0;
      *(_WORD *)(((v74 + 960) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 960) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateAction>();
      std::pair<std::string const,std::shared_ptr<data::ConfigGadgetStateAction>>::pair<char const(&)[24],std::shared_ptr<data::ConfigGadgetStateAction>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > *const)(v74 + 2096),
        (const char (*)[24])"ConfigGadgetStateAction",
        (std::shared_ptr<data::ConfigGadgetStateAction> *)(v74 + 960));
      v71._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > >::iterator)(v74 + 2096);
      v71._M_len = 1LL;
      *(_BYTE *)(((v74 + 448) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 464) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetStateAction>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > > *const)(v74 + 464));
      std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::map(
        &data::g_ConfigGadgetStateActionMap[abi:cxx11],
        v71,
        (const std::less<std::string > *)(v74 + 448),
        (const std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::allocator_type *)(v74 + 464));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetStateAction>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > > *const)(v74 + 464));
      *(_BYTE *)(((v74 + 464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 448) >> 3) + 0x7FFF8000) = -8;
      for ( i4 = (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > *)(v74 + 2144);
            i4 != (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetStateAction> > *)(v74 + 2096);
            std::pair<std::string const,std::shared_ptr<data::ConfigGadgetStateAction>>::~pair(i4) )
      {
        --i4;
      }
      v44 = ((v74 + 2096) >> 3) + 2147450880;
      *(_DWORD *)v44 = -117901064;
      *(_WORD *)(v44 + 4) = -1800;
      std::shared_ptr<data::ConfigGadgetStateAction>::~shared_ptr((std::shared_ptr<data::ConfigGadgetStateAction> *const)(v74 + 960));
      *(_WORD *)(((v74 + 960) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigGadgetStateAction>>::~map,
        &data::g_ConfigGadgetStateActionMap[abi:cxx11],
        &_dso_handle);
      v45 = ((v74 + 2176) >> 3) + 2147450880;
      *(_DWORD *)v45 = 0;
      *(_WORD *)(v45 + 4) = 0;
      *(_WORD *)(((v74 + 992) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 992) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetTurn>();
      std::pair<std::string const,std::shared_ptr<data::ConfigGadgetTurn>>::pair<char const(&)[17],std::shared_ptr<data::ConfigGadgetTurn>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > *const)(v74 + 2176),
        (const char (*)[17])"ConfigGadgetTurn",
        (std::shared_ptr<data::ConfigGadgetTurn> *)(v74 + 992));
      v72._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > >::iterator)(v74 + 2176);
      v72._M_len = 1LL;
      *(_BYTE *)(((v74 + 480) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 496) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetTurn>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > > *const)(v74 + 496));
      std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::map(
        &data::g_ConfigGadgetTurnMap[abi:cxx11],
        v72,
        (const std::less<std::string > *)(v74 + 480),
        (const std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::allocator_type *)(v74 + 496));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigGadgetTurn>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > > *const)(v74 + 496));
      *(_BYTE *)(((v74 + 496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 480) >> 3) + 0x7FFF8000) = -8;
      for ( i5 = (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > *)(v74 + 2224);
            i5 != (std::pair<const std::string,std::shared_ptr<data::ConfigGadgetTurn> > *)(v74 + 2176);
            std::pair<std::string const,std::shared_ptr<data::ConfigGadgetTurn>>::~pair(i5) )
      {
        --i5;
      }
      v47 = ((v74 + 2176) >> 3) + 2147450880;
      *(_DWORD *)v47 = -117901064;
      *(_WORD *)(v47 + 4) = -1800;
      std::shared_ptr<data::ConfigGadgetTurn>::~shared_ptr((std::shared_ptr<data::ConfigGadgetTurn> *const)(v74 + 992));
      *(_WORD *)(((v74 + 992) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigGadgetTurn>>::~map,
        &data::g_ConfigGadgetTurnMap[abi:cxx11],
        &_dso_handle);
      data::ConfigGlobalValueTurnRegister::ConfigGlobalValueTurnRegister(&data::g_ConfigGlobalValueTurnRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGlobalValueTurnFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGlobalValueTurnFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGlobalValueTurnFactory>::~shared_ptr,
        &data::ConfigGlobalValueTurnFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateFireEffectRegister::ConfigGadgetStateFireEffectRegister(&data::g_ConfigGadgetStateFireEffectRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateFireEffectFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateFireEffectFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateFireEffectFactory>::~shared_ptr,
        &data::ConfigGadgetStateFireEffectFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateSetAnimTriggerRegister::ConfigGadgetStateSetAnimTriggerRegister(&data::g_ConfigGadgetStateSetAnimTriggerRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateSetAnimTriggerFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimTriggerFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateSetAnimTriggerFactory>::~shared_ptr,
        &data::ConfigGadgetStateSetAnimTriggerFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateSetAnimIntRegister::ConfigGadgetStateSetAnimIntRegister(&data::g_ConfigGadgetStateSetAnimIntRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateSetAnimIntFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateSetAnimIntFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateSetAnimIntFactory>::~shared_ptr,
        &data::ConfigGadgetStateSetAnimIntFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateFireAISoundRegister::ConfigGadgetStateFireAISoundRegister(&data::g_ConfigGadgetStateFireAISoundRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateFireAISoundFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateFireAISoundFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateFireAISoundFactory>::~shared_ptr,
        &data::ConfigGadgetStateFireAISoundFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateEnableGadgetInteeRegister::ConfigGadgetStateEnableGadgetInteeRegister(&data::g_ConfigGadgetStateEnableGadgetInteeRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateEnableGadgetInteeFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetInteeFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateEnableGadgetInteeFactory>::~shared_ptr,
        &data::ConfigGadgetStateEnableGadgetInteeFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateDynamicPickableHintRegister::ConfigGadgetStateDynamicPickableHintRegister(&data::g_ConfigGadgetStateDynamicPickableHintRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateDynamicPickableHintFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateDynamicPickableHintFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateDynamicPickableHintFactory>::~shared_ptr,
        &data::ConfigGadgetStateDynamicPickableHintFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateEnableGadgetExtraButtonRegister::ConfigGadgetStateEnableGadgetExtraButtonRegister(&data::g_ConfigGadgetStateEnableGadgetExtraButtonRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateEnableGadgetExtraButtonFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateEnableGadgetExtraButtonFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateEnableGadgetExtraButtonFactory>::~shared_ptr,
        &data::ConfigGadgetStateEnableGadgetExtraButtonFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateEnableActionRegister::ConfigGadgetStateEnableActionRegister(&data::g_ConfigGadgetStateEnableActionRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateEnableActionFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateEnableActionFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateEnableActionFactory>::~shared_ptr,
        &data::ConfigGadgetStateEnableActionFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateDisableRadarHintRegister::ConfigGadgetStateDisableRadarHintRegister(&data::g_ConfigGadgetStateDisableRadarHintRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateDisableRadarHintFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateDisableRadarHintFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateDisableRadarHintFactory>::~shared_ptr,
        &data::ConfigGadgetStateDisableRadarHintFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetStateSendEffectTriggerRegister::ConfigGadgetStateSendEffectTriggerRegister(&data::g_ConfigGadgetStateSendEffectTriggerRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigGadgetStateSendEffectTriggerFactory::instance_ptr >> 3)
                    + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigGadgetStateSendEffectTriggerFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigGadgetStateSendEffectTriggerFactory>::~shared_ptr,
        &data::ConfigGadgetStateSendEffectTriggerFactory::instance_ptr,
        &_dso_handle);
      v48 = ((v74 + 2256) >> 3) + 2147450880;
      *(_DWORD *)v48 = 0;
      *(_WORD *)(v48 + 4) = 0;
      *(_WORD *)(((v74 + 1024) >> 3) + 0x7FFF8000) = 0;
      if ( *(_WORD *)(((v74 + 1024) >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigControlPart>();
      std::pair<std::string const,std::shared_ptr<data::ConfigControlPart>>::pair<char const(&)[18],std::shared_ptr<data::ConfigControlPart>,true>(
        (std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > *const)(v74 + 2256),
        (const char (*)[18])"ConfigControlPart",
        (std::shared_ptr<data::ConfigControlPart> *)(v74 + 1024));
      v73._M_array = (std::initializer_list<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > >::iterator)(v74 + 2256);
      v73._M_len = 1LL;
      *(_BYTE *)(((v74 + 512) >> 3) + 0x7FFF8000) = 1;
      *(_BYTE *)(((v74 + 528) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigControlPart>>>::allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > > *const)(v74 + 528));
      std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::map(
        &data::g_ConfigControlPartMap[abi:cxx11],
        v73,
        (const std::less<std::string > *)(v74 + 512),
        (const std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::allocator_type *)(v74 + 528));
      std::allocator<std::pair<std::string const,std::shared_ptr<data::ConfigControlPart>>>::~allocator((std::allocator<std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > > *const)(v74 + 528));
      *(_BYTE *)(((v74 + 528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v74 + 512) >> 3) + 0x7FFF8000) = -8;
      for ( i6 = (std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > *)(v74 + 2304);
            i6 != (std::pair<const std::string,std::shared_ptr<data::ConfigControlPart> > *)(v74 + 2256);
            std::pair<std::string const,std::shared_ptr<data::ConfigControlPart>>::~pair(i6) )
      {
        --i6;
      }
      v50 = ((v74 + 2256) >> 3) + 2147450880;
      *(_DWORD *)v50 = -117901064;
      *(_WORD *)(v50 + 4) = -1800;
      std::shared_ptr<data::ConfigControlPart>::~shared_ptr((std::shared_ptr<data::ConfigControlPart> *const)(v74 + 1024));
      *(_WORD *)(((v74 + 1024) >> 3) + 0x7FFF8000) = -1800;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::map<std::string,std::shared_ptr<data::ConfigControlPart>>::~map,
        &data::g_ConfigControlPartMap[abi:cxx11],
        &_dso_handle);
      data::ConfigControlPartByIKRegister::ConfigControlPartByIKRegister(&data::g_ConfigControlPartByIKRegister);
      data::ConfigControlPartByIKCCDRegister::ConfigControlPartByIKCCDRegister(&data::g_ConfigControlPartByIKCCDRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigControlPartByIKCCDFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigControlPartByIKCCDFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigControlPartByIKCCDFactory>::~shared_ptr,
        &data::ConfigControlPartByIKCCDFactory::instance_ptr,
        &_dso_handle);
      data::ConfigGadgetRegister::ConfigGadgetRegister(&data::g_ConfigGadgetRegister);
      data::ConfigCharacterRegister::ConfigCharacterRegister(&data::g_ConfigCharacterRegister);
      data::ConfigAvatarRegister::ConfigAvatarRegister(&data::g_ConfigAvatarRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigAvatarFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigAvatarFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigAvatarFactory>::~shared_ptr,
        &data::ConfigAvatarFactory::instance_ptr,
        &_dso_handle);
      data::ConfigMonsterRegister::ConfigMonsterRegister(&data::g_ConfigMonsterRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigMonsterFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigMonsterFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigMonsterFactory>::~shared_ptr,
        &data::ConfigMonsterFactory::instance_ptr,
        &_dso_handle);
      data::ConfigNpcRegister::ConfigNpcRegister(&data::g_ConfigNpcRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigNpcFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigNpcFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigNpcFactory>::~shared_ptr,
        &data::ConfigNpcFactory::instance_ptr,
        &_dso_handle);
      data::ConfigLevelEntityRegister::ConfigLevelEntityRegister(&data::g_ConfigLevelEntityRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigLevelEntityFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigLevelEntityFactory>();
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigLevelEntityFactory>::~shared_ptr,
        &data::ConfigLevelEntityFactory::instance_ptr,
        &_dso_handle);
      data::ConfigTransPointEntityRegister::ConfigTransPointEntityRegister(&data::g_ConfigTransPointEntityRegister);
      if ( *(_WORD *)(((unsigned __int64)&data::ConfigTransPointEntityFactory::instance_ptr >> 3) + 0x7FFF8000) )
        __asan_report_store16();
      common::tools::perf::make_shared<data::ConfigTransPointEntityFactory>();
      v53 = &data::ConfigTransPointEntityFactory::instance_ptr;
      __cxa_atexit(
        (void (__fastcall *)(void *))std::shared_ptr<data::ConfigTransPointEntityFactory>::~shared_ptr,
        &data::ConfigTransPointEntityFactory::instance_ptr,
        &_dso_handle);
      v51 = &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero;
      v52 = *(_BYTE *)(((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero >> 3)
                     + 0x7FFF8000);
      LOBYTE(v53) = v52 != 0;
      v54 = (v52 != 0) & (unsigned __int8)((char)((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero & 7) >= v52);
      if ( (_BYTE)v54 )
        __asan_report_load1(
          &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero,
          v53,
          v54);
      if ( !*v51 )
      {
        v55 = &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero;
        v56 = *(_BYTE *)(((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero >> 3)
                       + 0x7FFF8000);
        LOBYTE(v53) = v56 != 0;
        v57 = (v56 != 0) & (unsigned __int8)((char)((unsigned __int64)&`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero & 7) >= v56);
        if ( (_BYTE)v57 )
          __asan_report_store1(
            &`guard variable for'common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero,
            v53,
            v57);
        *v55 = 1;
        v58 = common::tools::StringStream<common::tools::FixedBuffer<16384>>::digits + 9;
        if ( *(_BYTE *)(((unsigned __int64)&common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero >> 3)
                      + 0x7FFF8000) )
          __asan_report_store8(&common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero, v53);
        common::tools::StringStream<common::tools::FixedBuffer<16384>>::zero = v58;
      }
    }
    __asan_after_dynamic_init();
  }
  if ( v75 == (char *)v74 )
  {
    *(_QWORD *)((v74 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v74 >> 3) + 0x7FFF811C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 292) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v74 = 1172321806LL;
    __asan_stack_free_6(v74, 2336LL, v75);
  }
};
