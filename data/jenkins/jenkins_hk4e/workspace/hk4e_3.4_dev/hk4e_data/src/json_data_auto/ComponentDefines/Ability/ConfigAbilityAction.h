// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/json_data_auto/ComponentDefines/Ability/ConfigAbilityAction.h

// Line 97: range 0000000010114692-0000000010114839
void __cdecl data::ConfigAbilityActionToken::ConfigAbilityActionToken(data::ConfigAbilityActionToken *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rdx

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(this, ((unsigned __int8)this & 7u) + 3);
  }
  this->cancel_with_entity_tick_lod = -1;
  if ( *(_BYTE *)(((unsigned __int64)&this->channel_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->channel_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->channel_id, (((_BYTE)this + 4) & 7u) + 3);
  }
  this->channel_id = -1;
  if ( *(_BYTE *)(((unsigned __int64)&this->weight >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->weight >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->weight, (((_BYTE)this + 8) & 7u) + 3);
  }
  this->weight = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->token_cost_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->token_cost_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->token_cost_type, (((_BYTE)this + 12) & 7u) + 3);
  }
  this->token_cost_type = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->token_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 16) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->token_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->token_type, (((_BYTE)this + 16) & 7u) + 3);
  }
  this->token_type = NEVER_TOKEN;
  v1 = ((_BYTE)this + 20) & 7;
  v2 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v1 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store1(&this->is_json_loaded, v1, v2);
  this->is_json_loaded = 0;
};

// Line 200: range 0000000010114DAC-0000000010114E65
void __cdecl data::ConfigActionTokenChannelGroupInfo::ConfigActionTokenChannelGroupInfo(
        data::ConfigActionTokenChannelGroupInfo *const this)
{
  __int64 v1; // rsi

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, v1);
  }
  this->low_level_dist = 0.0;
  std::unordered_map<data::EntityTokenActionType,data::ConfigEntityActionTokenGroup>::unordered_map(&this->low_level_dist_token);
  std::unordered_map<data::ActionTokenSourceType,std::unordered_map<data::EntityTokenActionType,data::ConfigEntityActionTokenGroup>>::unordered_map(&this->action_source_token);
  std::unordered_map<int,data::ConfigActionTokenChannel>::unordered_map(&this->cfg);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 200: range 0000000010CD8082-0000000010CD820F
void __cdecl data::ConfigActionTokenChannelGroupInfo::ConfigActionTokenChannelGroupInfo(
        data::ConfigActionTokenChannelGroupInfo *const this,
        const data::ConfigActionTokenChannelGroupInfo *a2)
{
  float low_level_dist; // xmm0_4
  data::ConfigActionTokenChannelGroup *p_cfg; // rsi
  bool is_json_loaded; // cl
  char v5; // al

  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  low_level_dist = a2->low_level_dist;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, a2);
  }
  this->low_level_dist = low_level_dist;
  std::unordered_map<data::EntityTokenActionType,data::ConfigEntityActionTokenGroup>::unordered_map(
    &this->low_level_dist_token,
    &a2->low_level_dist_token);
  std::unordered_map<data::ActionTokenSourceType,std::unordered_map<data::EntityTokenActionType,data::ConfigEntityActionTokenGroup>>::unordered_map(
    &this->action_source_token,
    &a2->action_source_token);
  p_cfg = &a2->cfg;
  std::unordered_map<int,data::ConfigActionTokenChannel>::unordered_map(&this->cfg, &a2->cfg);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_cfg, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_cfg) = v5 != 0;
    __asan_report_store1(&this->is_json_loaded, p_cfg, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 200: range 0000000010114E66-0000000010114EA4
void __cdecl data::ConfigActionTokenChannelGroupInfo::~ConfigActionTokenChannelGroupInfo(
        data::ConfigActionTokenChannelGroupInfo *const this)
{
  std::unordered_map<int,data::ConfigActionTokenChannel>::~unordered_map(&this->cfg);
  std::unordered_map<data::ActionTokenSourceType,std::unordered_map<data::EntityTokenActionType,data::ConfigEntityActionTokenGroup>>::~unordered_map(&this->action_source_token);
  std::unordered_map<data::EntityTokenActionType,data::ConfigEntityActionTokenGroup>::~unordered_map(&this->low_level_dist_token);
};

// Line 268: range 00000000110E1BDE-00000000110E1DC2
void __cdecl data::ConfigAbilityAction::ConfigAbilityAction(data::ConfigAbilityAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx

  data::BaseActionContainer::BaseActionContainer(this);
  v2 = (int (**)(...))(&`vtable for'data::ConfigAbilityAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityActionToken::ConfigAbilityActionToken(&this->token);
  if ( *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target, v1);
  }
  this->target = Self_0;
  if ( *(_WORD *)(((unsigned __int64)&this->other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  data::FixedBool::FixedBool(&this->do_off_stage);
  v3 = ((_BYTE)this + 82) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->do_after_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->do_after_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->do_after_die, v3, v4);
  this->do_after_die = 1;
  v5 = ((_BYTE)this + 83) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->can_be_handled_on_recover >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->can_be_handled_on_recover >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->can_be_handled_on_recover, v5, v6);
  this->can_be_handled_on_recover = 0;
  v7 = ((_BYTE)this + 84) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->mute_remote_action >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->mute_remote_action >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->mute_remote_action, v7, v8);
  this->mute_remote_action = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates_foreach);
};

// Line 268: range 000000000F7CBE60-000000000F7CC2AC
void __cdecl data::ConfigAbilityAction::ConfigAbilityAction(
        data::ConfigAbilityAction *const this,
        const data::ConfigAbilityAction *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx
  data::AbilityTargetting target; // ecx
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool do_after_die; // cl
  char v9; // dl
  __int64 v10; // rdx
  __int64 v11; // rsi
  __int64 v12; // rdx
  bool can_be_handled_on_recover; // cl
  char v14; // dl
  __int64 v15; // rdx
  __int64 v16; // rsi
  __int64 v17; // rdx
  bool mute_remote_action; // cl
  char v19; // dl
  __int64 v20; // rdx
  const data::ConfigAbilityAction *v21; // [rsp+0h] [rbp-20h]

  v21 = a2;
  data::BaseActionContainer::BaseActionContainer(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ConfigAbilityAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->token >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&this->token.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 55) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->token.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->token, 24LL);
  }
  if ( *(char *)(((unsigned __int64)&a2->token >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&a2->token.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 + 55) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->token.is_json_loaded + 3) >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->token, 24LL);
  }
  v3 = *(_QWORD *)&a2->token.weight;
  *(_QWORD *)&this->token.cancel_with_entity_tick_lod = *(_QWORD *)&a2->token.cancel_with_entity_tick_lod;
  *(_QWORD *)&this->token.weight = v3;
  *(_QWORD *)&this->token.token_type = *(_QWORD *)&a2->token.token_type;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target);
  }
  target = a2->target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(a2) = v5 != 0;
    __asan_report_store4(&this->target, a2);
  }
  this->target = target;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &v21->other_targets);
  if ( *(_BYTE *)(((unsigned __int64)&this->do_off_stage >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->do_off_stage >> 3) + 0x7FFF8000) <= 1 )
  {
    __asan_report_store2(&this->do_off_stage);
  }
  if ( *(_BYTE *)(((unsigned __int64)&v21->do_off_stage >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v21->do_off_stage >> 3) + 0x7FFF8000) <= 1 )
  {
    __asan_report_load2(&v21->do_off_stage);
  }
  this->do_off_stage = v21->do_off_stage;
  v6 = ((_BYTE)v21 + 82) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&v21->do_after_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&v21->do_after_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&v21->do_after_die, v6, v7);
  do_after_die = v21->do_after_die;
  v9 = *(_BYTE *)(((unsigned __int64)&this->do_after_die >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 82) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->do_after_die, v6, v10);
  this->do_after_die = do_after_die;
  v11 = ((_BYTE)v21 + 83) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&v21->can_be_handled_on_recover >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&v21->can_be_handled_on_recover >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&v21->can_be_handled_on_recover, v11, v12);
  can_be_handled_on_recover = v21->can_be_handled_on_recover;
  v14 = *(_BYTE *)(((unsigned __int64)&this->can_be_handled_on_recover >> 3) + 0x7FFF8000);
  LOBYTE(v11) = v14 != 0;
  v15 = (v14 != 0) & (unsigned __int8)((((unsigned __int8)this + 83) & 7) >= v14);
  if ( (_BYTE)v15 )
    __asan_report_store1(&this->can_be_handled_on_recover, v11, v15);
  this->can_be_handled_on_recover = can_be_handled_on_recover;
  v16 = ((_BYTE)v21 + 84) & 7;
  v17 = (*(_BYTE *)(((unsigned __int64)&v21->mute_remote_action >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((unsigned __int64)&v21->mute_remote_action >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_load1(&v21->mute_remote_action, v16, v17);
  mute_remote_action = v21->mute_remote_action;
  v19 = *(_BYTE *)(((unsigned __int64)&this->mute_remote_action >> 3) + 0x7FFF8000);
  LOBYTE(v16) = v19 != 0;
  v20 = (v19 != 0) & (unsigned __int8)((((unsigned __int8)this + 84) & 7) >= v19);
  if ( (_BYTE)v20 )
    __asan_report_store1(&this->mute_remote_action, v16, v20);
  this->mute_remote_action = mute_remote_action;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &v21->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(
    &this->predicates_foreach,
    &v21->predicates_foreach);
};

// Line 283: range 000000000F7CDAA4-000000000F7CDB21
void __cdecl data::ConfigAbilityAction::~ConfigAbilityAction(data::ConfigAbilityAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ConfigAbilityAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates_foreach);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->other_targets);
  data::BaseActionContainer::~BaseActionContainer(this);
};

// Line 283: range 000000000F7CDB22-000000000F7CDB4C
void __cdecl data::ConfigAbilityAction::~ConfigAbilityAction(data::ConfigAbilityAction *const this)
{
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
  operator delete(this, 0x88uLL);
};

// Line 288: range 000000001009A0EC-000000001009A0FC
const char *__cdecl data::ConfigAbilityAction::getTypeName(const data::ConfigAbilityAction *const this)
{
  return "ConfigAbilityAction";
};

// Line 289: range 000000001009A0FE-000000001009A29A
int32_t __cdecl data::ConfigAbilityAction::getHashNum(const data::ConfigAbilityAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigAbilityAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ConfigAbilityAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 296: range 00000000111713F0-000000001117158C
void __cdecl data::AttachAbilityStateResistance::AttachAbilityStateResistance(
        data::AttachAbilityStateResistance *const this,
        const data::AttachAbilityStateResistance *a2)
{
  int (**v2)(...); // rdx
  uint32_t resistance_list_id; // ecx
  char v4; // al
  float duration_ratio; // xmm0_4
  const data::AttachAbilityStateResistance *v6; // [rsp+0h] [rbp-20h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachAbilityStateResistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->resistance_list_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->resistance_list_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->resistance_list_id);
  }
  resistance_list_id = a2->resistance_list_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->resistance_list_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->resistance_list_id, a2);
  }
  this->resistance_list_id = resistance_list_id;
  std::vector<data::AbilityState>::vector(&this->resistance_buff_debuffs, &v6->resistance_buff_debuffs);
  if ( *(_BYTE *)(((unsigned __int64)&v6->duration_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v6->duration_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v6->duration_ratio);
  }
  duration_ratio = v6->duration_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration_ratio, &v6->resistance_buff_debuffs);
  }
  this->duration_ratio = duration_ratio;
};

// Line 296: range 000000001009A29C-000000001009A2AA
void __cdecl data::ConfigAbilityAction::doAction(data::ConfigAbilityAction *const this, ActionParam *param)
{
  ;
};

// Line 356: range 00000000110FCA5E-00000000110FCAAB
void __cdecl data::BaseUtilityAction::BaseUtilityAction(data::BaseUtilityAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::BaseUtilityAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 356: range 00000000110FCEFA-00000000110FCF52
void __cdecl data::BaseUtilityAction::BaseUtilityAction(
        data::BaseUtilityAction *const this,
        const data::BaseUtilityAction *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BaseUtilityAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 362: range 000000001112EDE4-000000001112EE31
void __cdecl data::BaseUtilityAction::~BaseUtilityAction(data::BaseUtilityAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BaseUtilityAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 362: range 000000001112EE32-000000001112EE5C
void __cdecl data::BaseUtilityAction::~BaseUtilityAction(data::BaseUtilityAction *const this)
{
  data::BaseUtilityAction::~BaseUtilityAction(this);
  operator delete(this, 0x88uLL);
};

// Line 367: range 000000001009A2AC-000000001009A2BC
const char *__cdecl data::BaseUtilityAction::getTypeName(const data::BaseUtilityAction *const this)
{
  return "BaseUtilityAction";
};

// Line 368: range 000000001009A2BE-000000001009A45A
int32_t __cdecl data::BaseUtilityAction::getHashNum(const data::BaseUtilityAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BaseUtilityAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BaseUtilityAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 387: range 00000000110FD23C-00000000110FD29B
void __cdecl data::ApplyModifier::ApplyModifier(data::ApplyModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ApplyModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 387: range 00000000110FD6DE-00000000110FD779
void __cdecl data::ApplyModifier::ApplyModifier(data::ApplyModifier *const this, const data::ApplyModifier *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ApplyModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 394: range 000000001130F390-000000001130F3BA
void __cdecl data::ApplyModifier::~ApplyModifier(data::ApplyModifier *const this)
{
  data::ApplyModifier::~ApplyModifier(this);
  operator delete(this, 0xA8uLL);
};

// Line 394: range 000000001130F330-000000001130F38F
void __cdecl data::ApplyModifier::~ApplyModifier(data::ApplyModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 399: range 000000001009A45C-000000001009A46C
const char *__cdecl data::ApplyModifier::getTypeName(const data::ApplyModifier *const this)
{
  return "ApplyModifier";
};

// Line 400: range 000000001009A46E-000000001009A60A
int32_t __cdecl data::ApplyModifier::getHashNum(const data::ApplyModifier *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ApplyModifier::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ApplyModifier",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 416: range 00000000110FDA62-00000000110FDAA3
void __cdecl data::ApplyModifierFactory::ApplyModifierFactory(data::ApplyModifierFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyModifierFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ApplyModifierFactory = v2;
};

// Line 424: range 00000000110FDDAC-00000000110FDE0B
void __cdecl data::ApplyLevelModifier::ApplyLevelModifier(data::ApplyLevelModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ApplyLevelModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 424: range 00000000110FE24E-00000000110FE2E9
void __cdecl data::ApplyLevelModifier::ApplyLevelModifier(
        data::ApplyLevelModifier *const this,
        const data::ApplyLevelModifier *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ApplyLevelModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 431: range 000000001130F2A4-000000001130F303
void __cdecl data::ApplyLevelModifier::~ApplyLevelModifier(data::ApplyLevelModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyLevelModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 431: range 000000001130F304-000000001130F32E
void __cdecl data::ApplyLevelModifier::~ApplyLevelModifier(data::ApplyLevelModifier *const this)
{
  data::ApplyLevelModifier::~ApplyLevelModifier(this);
  operator delete(this, 0xA8uLL);
};

// Line 436: range 000000001009A60C-000000001009A61C
const char *__cdecl data::ApplyLevelModifier::getTypeName(const data::ApplyLevelModifier *const this)
{
  return "ApplyLevelModifier";
};

// Line 437: range 000000001009A61E-000000001009A7BA
int32_t __cdecl data::ApplyLevelModifier::getHashNum(const data::ApplyLevelModifier *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ApplyLevelModifier::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ApplyLevelModifier",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 453: range 00000000110FE5D2-00000000110FE613
void __cdecl data::ApplyLevelModifierFactory::ApplyLevelModifierFactory(data::ApplyLevelModifierFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyLevelModifierFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ApplyLevelModifierFactory = v2;
};

// Line 461: range 00000000110FE91C-00000000110FE97B
void __cdecl data::AttachModifier::AttachModifier(data::AttachModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 461: range 00000000110FEDBE-00000000110FEE59
void __cdecl data::AttachModifier::AttachModifier(data::AttachModifier *const this, const data::AttachModifier *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 468: range 000000001130F278-000000001130F2A2
void __cdecl data::AttachModifier::~AttachModifier(data::AttachModifier *const this)
{
  data::AttachModifier::~AttachModifier(this);
  operator delete(this, 0xA8uLL);
};

// Line 468: range 000000001130F218-000000001130F277
void __cdecl data::AttachModifier::~AttachModifier(data::AttachModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 473: range 000000001009A7BC-000000001009A7CC
const char *__cdecl data::AttachModifier::getTypeName(const data::AttachModifier *const this)
{
  return "AttachModifier";
};

// Line 474: range 000000001009A7CE-000000001009A96A
int32_t __cdecl data::AttachModifier::getHashNum(const data::AttachModifier *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifier::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifier",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 490: range 00000000110FF142-00000000110FF183
void __cdecl data::AttachModifierFactory::AttachModifierFactory(data::AttachModifierFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierFactory = v2;
};

// Line 498: range 00000000110FF48C-00000000110FF4EB
void __cdecl data::RemoveUniqueModifier::RemoveUniqueModifier(data::RemoveUniqueModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RemoveUniqueModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 498: range 00000000110FF92E-00000000110FF9C9
void __cdecl data::RemoveUniqueModifier::RemoveUniqueModifier(
        data::RemoveUniqueModifier *const this,
        const data::RemoveUniqueModifier *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RemoveUniqueModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 505: range 000000001130F1EC-000000001130F216
void __cdecl data::RemoveUniqueModifier::~RemoveUniqueModifier(data::RemoveUniqueModifier *const this)
{
  data::RemoveUniqueModifier::~RemoveUniqueModifier(this);
  operator delete(this, 0xA8uLL);
};

// Line 505: range 000000001130F18C-000000001130F1EB
void __cdecl data::RemoveUniqueModifier::~RemoveUniqueModifier(data::RemoveUniqueModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveUniqueModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 510: range 000000001009A96C-000000001009A97C
const char *__cdecl data::RemoveUniqueModifier::getTypeName(const data::RemoveUniqueModifier *const this)
{
  return "RemoveUniqueModifier";
};

// Line 511: range 000000001009A97E-000000001009AB1A
int32_t __cdecl data::RemoveUniqueModifier::getHashNum(const data::RemoveUniqueModifier *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RemoveUniqueModifier::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RemoveUniqueModifier",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 527: range 00000000110FFCB2-00000000110FFCF3
void __cdecl data::RemoveUniqueModifierFactory::RemoveUniqueModifierFactory(
        data::RemoveUniqueModifierFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveUniqueModifierFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RemoveUniqueModifierFactory = v2;
};

// Line 535: range 00000000110FFFFC-00000000111002BF
void __cdecl data::FireEffect::FireEffect(data::FireEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern);
  std::vector<std::string>::vector(&this->othereffect_patterns);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(char *)(((unsigned __int64)&this->owned_by_level >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->owned_by_level, v1, &this->owned_by_level);
  this->owned_by_level = 0;
  v3 = ((_BYTE)this + 1) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->use_y >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->use_y >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->use_y, v3, v4);
  this->use_y = 0;
  v5 = (((_BYTE)this + 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->scale, v5);
  }
  this->scale = 1.0;
  data::DynamicFloat::DynamicFloat(&this->effect_templete_id, -1.0);
  if ( *(char *)(((unsigned __int64)&this->set_self_as_effect_plugin_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_self_as_effect_plugin_target, v5, &this->set_self_as_effect_plugin_target);
  this->set_self_as_effect_plugin_target = 0;
  v6 = ((_BYTE)this + 41) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->use_remote_self_pos >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->use_remote_self_pos >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->use_remote_self_pos, v6, v7);
  this->use_remote_self_pos = 0;
  v8 = ((_BYTE)this + 42) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_platform_dependent, v8, v9);
  this->is_platform_dependent = 0;
};

// Line 535: range 0000000011100708-0000000011100B73
void __cdecl data::FireEffect::FireEffect(data::FireEffect *const this, const data::FireEffect *a2)
{
  int (**v2)(...); // rdx
  data::ConfigBornTypePtr *p_born; // rsi
  bool owned_by_level; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool use_y; // cl
  char v9; // dl
  __int64 v10; // rdx
  float scale; // xmm0_4
  data::DynamicFloat *p_effect_templete_id; // rsi
  bool set_self_as_effect_plugin_target; // cl
  char v14; // al
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool use_remote_self_pos; // cl
  char v18; // dl
  __int64 v19; // rdx
  __int64 v20; // rsi
  __int64 v21; // rdx
  bool is_platform_dependent; // cl
  char v23; // dl
  __int64 v24; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  std::vector<std::string>::vector(&this->othereffect_patterns, &a2->othereffect_patterns);
  p_born = &a2->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(char *)(((unsigned __int64)&a2->owned_by_level >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->owned_by_level, p_born, &a2->owned_by_level);
  owned_by_level = a2->owned_by_level;
  v5 = *(_BYTE *)(((unsigned __int64)&this->owned_by_level >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_born) = v5 != 0;
    __asan_report_store1(&this->owned_by_level, p_born, &this->owned_by_level);
  }
  this->owned_by_level = owned_by_level;
  v6 = ((_BYTE)a2 + 1) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->use_y >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->use_y >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->use_y, v6, v7);
  use_y = a2->use_y;
  v9 = *(_BYTE *)(((unsigned __int64)&this->use_y >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 1) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->use_y, v6, v10);
  this->use_y = use_y;
  if ( *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->scale);
  }
  scale = a2->scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->scale, (((_BYTE)this + 4) & 7u) + 3);
  }
  this->scale = scale;
  p_effect_templete_id = &a2->effect_templete_id;
  data::DynamicFloat::DynamicFloat(&this->effect_templete_id, &a2->effect_templete_id);
  if ( *(char *)(((unsigned __int64)&a2->set_self_as_effect_plugin_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(
      &a2->set_self_as_effect_plugin_target,
      p_effect_templete_id,
      &a2->set_self_as_effect_plugin_target);
  set_self_as_effect_plugin_target = a2->set_self_as_effect_plugin_target;
  v14 = *(_BYTE *)(((unsigned __int64)&this->set_self_as_effect_plugin_target >> 3) + 0x7FFF8000);
  if ( v14 < 0 )
  {
    LOBYTE(p_effect_templete_id) = v14 != 0;
    __asan_report_store1(
      &this->set_self_as_effect_plugin_target,
      p_effect_templete_id,
      &this->set_self_as_effect_plugin_target);
  }
  this->set_self_as_effect_plugin_target = set_self_as_effect_plugin_target;
  v15 = ((_BYTE)a2 + 41) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&a2->use_remote_self_pos >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&a2->use_remote_self_pos >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&a2->use_remote_self_pos, v15, v16);
  use_remote_self_pos = a2->use_remote_self_pos;
  v18 = *(_BYTE *)(((unsigned __int64)&this->use_remote_self_pos >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this + 41) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->use_remote_self_pos, v15, v19);
  this->use_remote_self_pos = use_remote_self_pos;
  v20 = ((_BYTE)a2 + 42) & 7;
  v21 = (*(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v20 >= *(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v21 )
    __asan_report_load1(&a2->is_platform_dependent, v20, v21);
  is_platform_dependent = a2->is_platform_dependent;
  v23 = *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000);
  LOBYTE(v20) = v23 != 0;
  v24 = (v23 != 0) & (unsigned __int8)((((unsigned __int8)this + 42) & 7) >= v23);
  if ( (_BYTE)v24 )
    __asan_report_store1(&this->is_platform_dependent, v20, v24);
  this->is_platform_dependent = is_platform_dependent;
};

// Line 551: range 000000001130F0CA-000000001130F15F
void __cdecl data::FireEffect::~FireEffect(data::FireEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->effect_templete_id);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::vector<std::string>::~vector(&this->othereffect_patterns);
  data::DynamicString::~DynamicString(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 551: range 000000001130F160-000000001130F18A
void __cdecl data::FireEffect::~FireEffect(data::FireEffect *const this)
{
  data::FireEffect::~FireEffect(this);
  operator delete(this, 0x130uLL);
};

// Line 556: range 000000001009AB1C-000000001009AB2C
const char *__cdecl data::FireEffect::getTypeName(const data::FireEffect *const this)
{
  return "FireEffect";
};

// Line 557: range 000000001009AB2E-000000001009ACCA
int32_t __cdecl data::FireEffect::getHashNum(const data::FireEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 573: range 0000000011100E5C-0000000011100E9D
void __cdecl data::FireEffectFactory::FireEffectFactory(data::FireEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireEffectFactory = v2;
};

// Line 581: range 00000000111011A6-00000000111012BD
void __cdecl data::FireEffectFirework::FireEffectFirework(data::FireEffectFirework *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireEffectFirework + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, v1);
  }
  this->scale = 1.0;
};

// Line 581: range 00000000111016FC-0000000011101839
void __cdecl data::FireEffectFirework::FireEffectFirework(
        data::FireEffectFirework *const this,
        const data::FireEffectFirework *a2)
{
  int (**v2)(...); // rdx
  float scale; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireEffectFirework + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->scale);
  }
  scale = a2->scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, &a2->born);
  }
  this->scale = scale;
};

// Line 590: range 000000001130F09E-000000001130F0C8
void __cdecl data::FireEffectFirework::~FireEffectFirework(data::FireEffectFirework *const this)
{
  data::FireEffectFirework::~FireEffectFirework(this);
  operator delete(this, 0xF0uLL);
};

// Line 590: range 000000001130F02C-000000001130F09D
void __cdecl data::FireEffectFirework::~FireEffectFirework(data::FireEffectFirework *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffectFirework + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::DynamicString::~DynamicString(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 595: range 000000001009ACCC-000000001009ACDC
const char *__cdecl data::FireEffectFirework::getTypeName(const data::FireEffectFirework *const this)
{
  return "FireEffectFirework";
};

// Line 596: range 000000001009ACDE-000000001009AE7A
int32_t __cdecl data::FireEffectFirework::getHashNum(const data::FireEffectFirework *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireEffectFirework::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireEffectFirework",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 612: range 0000000011101B22-0000000011101B63
void __cdecl data::FireEffectFireworkFactory::FireEffectFireworkFactory(data::FireEffectFireworkFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffectFireworkFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireEffectFireworkFactory = v2;
};

// Line 620: range 0000000011101E6C-0000000011101F83
void __cdecl data::FireSubEmitterEffect::FireSubEmitterEffect(data::FireSubEmitterEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireSubEmitterEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, v1);
  }
  this->scale = 1.0;
};

// Line 620: range 00000000111023C2-00000000111024FF
void __cdecl data::FireSubEmitterEffect::FireSubEmitterEffect(
        data::FireSubEmitterEffect *const this,
        const data::FireSubEmitterEffect *a2)
{
  int (**v2)(...); // rdx
  float scale; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireSubEmitterEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->scale);
  }
  scale = a2->scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, &a2->born);
  }
  this->scale = scale;
};

// Line 629: range 000000001130EF8E-000000001130EFFF
void __cdecl data::FireSubEmitterEffect::~FireSubEmitterEffect(data::FireSubEmitterEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireSubEmitterEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::DynamicString::~DynamicString(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 629: range 000000001130F000-000000001130F02A
void __cdecl data::FireSubEmitterEffect::~FireSubEmitterEffect(data::FireSubEmitterEffect *const this)
{
  data::FireSubEmitterEffect::~FireSubEmitterEffect(this);
  operator delete(this, 0xF0uLL);
};

// Line 634: range 000000001009AE7C-000000001009AE8C
const char *__cdecl data::FireSubEmitterEffect::getTypeName(const data::FireSubEmitterEffect *const this)
{
  return "FireSubEmitterEffect";
};

// Line 635: range 000000001009AE8E-000000001009B02A
int32_t __cdecl data::FireSubEmitterEffect::getHashNum(const data::FireSubEmitterEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireSubEmitterEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireSubEmitterEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 651: range 00000000111027E8-0000000011102829
void __cdecl data::FireSubEmitterEffectFactory::FireSubEmitterEffectFactory(
        data::FireSubEmitterEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireSubEmitterEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireSubEmitterEffectFactory = v2;
};

// Line 659: range 0000000011102B32-0000000011102BDC
void __cdecl data::FireEarlyWarningEffectForStorm::FireEarlyWarningEffectForStorm(
        data::FireEarlyWarningEffectForStorm *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireEarlyWarningEffectForStorm + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 659: range 000000001110302E-00000000111030A6
void __cdecl data::FireEarlyWarningEffectForStorm::FireEarlyWarningEffectForStorm(
        data::FireEarlyWarningEffectForStorm *const this,
        const data::FireEarlyWarningEffectForStorm *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireEarlyWarningEffectForStorm + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
};

// Line 666: range 000000001130EF62-000000001130EF8C
void __cdecl data::FireEarlyWarningEffectForStorm::~FireEarlyWarningEffectForStorm(
        data::FireEarlyWarningEffectForStorm *const this)
{
  data::FireEarlyWarningEffectForStorm::~FireEarlyWarningEffectForStorm(this);
  operator delete(this, 0x98uLL);
};

// Line 666: range 000000001130EF02-000000001130EF61
void __cdecl data::FireEarlyWarningEffectForStorm::~FireEarlyWarningEffectForStorm(
        data::FireEarlyWarningEffectForStorm *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEarlyWarningEffectForStorm + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 671: range 000000001009B02C-000000001009B03C
const char *__cdecl data::FireEarlyWarningEffectForStorm::getTypeName(
        const data::FireEarlyWarningEffectForStorm *const this)
{
  return "FireEarlyWarningEffectForStorm";
};

// Line 672: range 000000001009B03E-000000001009B1DA
int32_t __cdecl data::FireEarlyWarningEffectForStorm::getHashNum(
        const data::FireEarlyWarningEffectForStorm *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireEarlyWarningEffectForStorm::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireEarlyWarningEffectForStorm",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 688: range 0000000011103390-00000000111033D1
void __cdecl data::FireEarlyWarningEffectForStormFactory::FireEarlyWarningEffectForStormFactory(
        data::FireEarlyWarningEffectForStormFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEarlyWarningEffectForStormFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireEarlyWarningEffectForStormFactory = v2;
};

// Line 696: range 00000000111036DA-00000000111037CD
void __cdecl data::FireEffectForStorm::FireEffectForStorm(data::FireEffectForStorm *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireEffectForStorm + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->height, v1);
  }
  this->height = 300.0;
};

// Line 696: range 0000000011103C1C-0000000011103D16
void __cdecl data::FireEffectForStorm::FireEffectForStorm(
        data::FireEffectForStorm *const this,
        const data::FireEffectForStorm *a2)
{
  int (**v2)(...); // rdx
  float height; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireEffectForStorm + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->height);
  }
  height = a2->height;
  if ( *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->height, &a2->born);
  }
  this->height = height;
};

// Line 704: range 000000001130EED6-000000001130EF00
void __cdecl data::FireEffectForStorm::~FireEffectForStorm(data::FireEffectForStorm *const this)
{
  data::FireEffectForStorm::~FireEffectForStorm(this);
  operator delete(this, 0xA0uLL);
};

// Line 704: range 000000001130EE76-000000001130EED5
void __cdecl data::FireEffectForStorm::~FireEffectForStorm(data::FireEffectForStorm *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffectForStorm + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 709: range 000000001009B1DC-000000001009B1EC
const char *__cdecl data::FireEffectForStorm::getTypeName(const data::FireEffectForStorm *const this)
{
  return "FireEffectForStorm";
};

// Line 710: range 000000001009B1EE-000000001009B38A
int32_t __cdecl data::FireEffectForStorm::getHashNum(const data::FireEffectForStorm *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireEffectForStorm::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireEffectForStorm",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 726: range 0000000011104000-0000000011104041
void __cdecl data::FireEffectForStormFactory::FireEffectForStormFactory(data::FireEffectForStormFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffectForStormFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireEffectForStormFactory = v2;
};

// Line 734: range 000000001110434A-000000001110447F
void __cdecl data::FireEffectToTarget::FireEffectToTarget(data::FireEffectToTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireEffectToTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern);
  if ( *(char *)(((unsigned __int64)&this->reverse >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->reverse, v1, &this->reverse);
  this->reverse = 0;
  v3 = ((_BYTE)this - 39) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->from_self >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->from_self >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->from_self, v3, v4);
  this->from_self = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->scale, (((_BYTE)this - 36) & 7u) + 3);
  }
  this->scale = 1.0;
};

// Line 734: range 00000000111048C8-0000000011104AFF
void __cdecl data::FireEffectToTarget::FireEffectToTarget(
        data::FireEffectToTarget *const this,
        const data::FireEffectToTarget *a2)
{
  int (**v2)(...); // rdx
  data::DynamicString *p_effect_pattern; // rsi
  bool reverse; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool from_self; // cl
  char v9; // dl
  __int64 v10; // rdx
  float scale; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireEffectToTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_effect_pattern = &a2->effect_pattern;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  if ( *(char *)(((unsigned __int64)&a2->reverse >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->reverse, p_effect_pattern, &a2->reverse);
  reverse = a2->reverse;
  v5 = *(_BYTE *)(((unsigned __int64)&this->reverse >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_effect_pattern) = v5 != 0;
    __asan_report_store1(&this->reverse, p_effect_pattern, &this->reverse);
  }
  this->reverse = reverse;
  v6 = ((_BYTE)a2 - 39) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->from_self >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->from_self >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->from_self, v6, v7);
  from_self = a2->from_self;
  v9 = *(_BYTE *)(((unsigned __int64)&this->from_self >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this - 39) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->from_self, v6, v10);
  this->from_self = from_self;
  if ( *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->scale);
  }
  scale = a2->scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->scale, (((_BYTE)this - 36) & 7u) + 3);
  }
  this->scale = scale;
};

// Line 744: range 000000001130EDEA-000000001130EE49
void __cdecl data::FireEffectToTarget::~FireEffectToTarget(data::FireEffectToTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffectToTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::~DynamicString(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 744: range 000000001130EE4A-000000001130EE74
void __cdecl data::FireEffectToTarget::~FireEffectToTarget(data::FireEffectToTarget *const this)
{
  data::FireEffectToTarget::~FireEffectToTarget(this);
  operator delete(this, 0xE0uLL);
};

// Line 749: range 000000001009B38C-000000001009B39C
const char *__cdecl data::FireEffectToTarget::getTypeName(const data::FireEffectToTarget *const this)
{
  return "FireEffectToTarget";
};

// Line 750: range 000000001009B39E-000000001009B53A
int32_t __cdecl data::FireEffectToTarget::getHashNum(const data::FireEffectToTarget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireEffectToTarget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireEffectToTarget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 766: range 0000000011104DE8-0000000011104E29
void __cdecl data::FireEffectToTargetFactory::FireEffectToTargetFactory(data::FireEffectToTargetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireEffectToTargetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireEffectToTargetFactory = v2;
};

// Line 774: range 0000000011105132-00000000111051A3
void __cdecl data::FireHitEffect::FireHitEffect(data::FireHitEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireHitEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->hit_entity);
  data::ConfigHitScene::ConfigHitScene(&this->hit_scene);
};

// Line 774: range 00000000111055E6-00000000111056B8
void __cdecl data::FireHitEffect::FireHitEffect(data::FireHitEffect *const this, const data::FireHitEffect *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireHitEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->hit_entity, &a2->hit_entity);
  data::ConfigHitScene::ConfigHitScene(&this->hit_scene, &a2->hit_scene);
};

// Line 782: range 000000001130ED4C-000000001130EDBD
void __cdecl data::FireHitEffect::~FireHitEffect(data::FireHitEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireHitEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigHitScene::~ConfigHitScene(&this->hit_scene);
  std::string::~string(&this->hit_entity);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 782: range 000000001130EDBE-000000001130EDE8
void __cdecl data::FireHitEffect::~FireHitEffect(data::FireHitEffect *const this)
{
  data::FireHitEffect::~FireHitEffect(this);
  operator delete(this, 0x108uLL);
};

// Line 787: range 000000001009B53C-000000001009B54C
const char *__cdecl data::FireHitEffect::getTypeName(const data::FireHitEffect *const this)
{
  return "FireHitEffect";
};

// Line 788: range 000000001009B54E-000000001009B6EA
int32_t __cdecl data::FireHitEffect::getHashNum(const data::FireHitEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireHitEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireHitEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 804: range 00000000111059A2-00000000111059E3
void __cdecl data::FireHitEffectFactory::FireHitEffectFactory(data::FireHitEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireHitEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireHitEffectFactory = v2;
};

// Line 812: range 0000000011105CEC-0000000011105DEA
void __cdecl data::AvatarSkillStart::AvatarSkillStart(data::AvatarSkillStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  data::DynamicFloat::DynamicFloat(&this->cd_ratio, 1.0);
  data::DynamicFloat::DynamicFloat(&this->cost_stamina_ratio, 1.0);
};

// Line 812: range 0000000011106234-0000000011106385
void __cdecl data::AvatarSkillStart::AvatarSkillStart(
        data::AvatarSkillStart *const this,
        const data::AvatarSkillStart *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  const data::AvatarSkillStart *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  data::DynamicFloat::DynamicFloat(&this->cd_ratio, &v5->cd_ratio);
  data::DynamicFloat::DynamicFloat(&this->cost_stamina_ratio, &v5->cost_stamina_ratio);
};

// Line 821: range 000000001130ED20-000000001130ED4A
void __cdecl data::AvatarSkillStart::~AvatarSkillStart(data::AvatarSkillStart *const this)
{
  data::AvatarSkillStart::~AvatarSkillStart(this);
  operator delete(this, 0xD0uLL);
};

// Line 821: range 000000001130ECAE-000000001130ED1F
void __cdecl data::AvatarSkillStart::~AvatarSkillStart(data::AvatarSkillStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->cost_stamina_ratio);
  data::DynamicFloat::~DynamicFloat(&this->cd_ratio);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 826: range 000000001009B6EC-000000001009B6FC
const char *__cdecl data::AvatarSkillStart::getTypeName(const data::AvatarSkillStart *const this)
{
  return "AvatarSkillStart";
};

// Line 827: range 000000001009B6FE-000000001009B89A
int32_t __cdecl data::AvatarSkillStart::getHashNum(const data::AvatarSkillStart *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarSkillStart::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarSkillStart",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 843: range 000000001110666E-00000000111066AF
void __cdecl data::AvatarSkillStartFactory::AvatarSkillStartFactory(data::AvatarSkillStartFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarSkillStartFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarSkillStartFactory = v2;
};

// Line 851: range 00000000111069B8-0000000011106A93
void __cdecl data::AvatarShareCDSkillStart::AvatarShareCDSkillStart(data::AvatarShareCDSkillStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarShareCDSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->share_cdtype >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->share_cdtype >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->share_cdtype, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->share_cdtype = 0;
};

// Line 851: range 0000000011106EDC-0000000011107042
void __cdecl data::AvatarShareCDSkillStart::AvatarShareCDSkillStart(
        data::AvatarShareCDSkillStart *const this,
        const data::AvatarShareCDSkillStart *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t share_cdtype; // ecx
  char v7; // dl
  const data::AvatarShareCDSkillStart *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarShareCDSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  v5 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->share_cdtype >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->share_cdtype >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->share_cdtype);
  }
  share_cdtype = v8->share_cdtype;
  v7 = *(_BYTE *)(((unsigned __int64)&this->share_cdtype >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->share_cdtype, v5);
  }
  this->share_cdtype = share_cdtype;
};

// Line 859: range 000000001130EC34-000000001130EC81
void __cdecl data::AvatarShareCDSkillStart::~AvatarShareCDSkillStart(data::AvatarShareCDSkillStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarShareCDSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 859: range 000000001130EC82-000000001130ECAC
void __cdecl data::AvatarShareCDSkillStart::~AvatarShareCDSkillStart(data::AvatarShareCDSkillStart *const this)
{
  data::AvatarShareCDSkillStart::~AvatarShareCDSkillStart(this);
  operator delete(this, 0x90uLL);
};

// Line 864: range 000000001009B89C-000000001009B8AC
const char *__cdecl data::AvatarShareCDSkillStart::getTypeName(const data::AvatarShareCDSkillStart *const this)
{
  return "AvatarShareCDSkillStart";
};

// Line 865: range 000000001009B8AE-000000001009BA4A
int32_t __cdecl data::AvatarShareCDSkillStart::getHashNum(const data::AvatarShareCDSkillStart *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarShareCDSkillStart::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarShareCDSkillStart",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 881: range 000000001110732C-000000001110736D
void __cdecl data::AvatarShareCDSkillStartFactory::AvatarShareCDSkillStartFactory(
        data::AvatarShareCDSkillStartFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarShareCDSkillStartFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarShareCDSkillStartFactory = v2;
};

// Line 889: range 0000000011107676-000000001110774B
void __cdecl data::EntityDoSkill::EntityDoSkill(data::EntityDoSkill *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EntityDoSkill + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_hold >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_hold >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_hold, v3, v4);
  this->is_hold = 0;
};

// Line 889: range 0000000011107B94-0000000011107CF5
void __cdecl data::EntityDoSkill::EntityDoSkill(data::EntityDoSkill *const this, const data::EntityDoSkill *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool is_hold; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::EntityDoSkill *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EntityDoSkill + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->is_hold >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->is_hold >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->is_hold, v5, v6);
  is_hold = v10->is_hold;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_hold >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_hold, v5, v9);
  this->is_hold = is_hold;
};

// Line 897: range 000000001130EBBA-000000001130EC07
void __cdecl data::EntityDoSkill::~EntityDoSkill(data::EntityDoSkill *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityDoSkill + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 897: range 000000001130EC08-000000001130EC32
void __cdecl data::EntityDoSkill::~EntityDoSkill(data::EntityDoSkill *const this)
{
  data::EntityDoSkill::~EntityDoSkill(this);
  operator delete(this, 0x90uLL);
};

// Line 902: range 000000001009BA4C-000000001009BA5C
const char *__cdecl data::EntityDoSkill::getTypeName(const data::EntityDoSkill *const this)
{
  return "EntityDoSkill";
};

// Line 903: range 000000001009BA5E-000000001009BBFA
int32_t __cdecl data::EntityDoSkill::getHashNum(const data::EntityDoSkill *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EntityDoSkill::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EntityDoSkill",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 919: range 0000000011107FDE-000000001110801F
void __cdecl data::EntityDoSkillFactory::EntityDoSkillFactory(data::EntityDoSkillFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityDoSkillFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EntityDoSkillFactory = v2;
};

// Line 927: range 0000000011108328-0000000011108431
void __cdecl data::FocusAssistance::FocusAssistance(data::FocusAssistance *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx

  v1 = (unsigned __int8)this & 7;
  v2 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v1 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store1(this, v1, v2);
  this->use_focus_sticky = 0;
  v3 = ((_BYTE)this + 1) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->use_auto_focus >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->use_auto_focus >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->use_auto_focus, v3, v4);
  this->use_auto_focus = 0;
  v5 = ((_BYTE)this + 2) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->use_gyro >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->use_gyro >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->use_gyro, v5, v6);
  this->use_gyro = 0;
  v7 = ((_BYTE)this + 3) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->is_json_loaded, v7, v8);
  this->is_json_loaded = 0;
};

// Line 952: range 0000000011108432-00000000111084AC
void __cdecl data::FocusAssistanceGroup::FocusAssistanceGroup(data::FocusAssistanceGroup *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rdx

  data::FocusAssistance::FocusAssistance(&this->ps4);
  data::FocusAssistance::FocusAssistance(&this->ps5);
  data::FocusAssistance::FocusAssistance(&this->other);
  v1 = ((_BYTE)this + 12) & 7;
  v2 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v1 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store1(&this->is_json_loaded, v1, v2);
  this->is_json_loaded = 0;
};

// Line 977: range 00000000111084AE-0000000011108A4C
void __cdecl data::AvatarEnterFocus::AvatarEnterFocus(data::AvatarEnterFocus *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int (**v5)(...); // rdx
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rsi
  __int64 v11; // rdx
  __int64 v12; // rsi
  __int64 v13; // rdx
  __int64 v14; // rsi
  __int64 v15; // rsi
  __int64 v16; // rdx
  __int64 v17; // rsi
  __int64 v18; // rdx
  char v19[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::AvatarEnterFocus::AvatarEnterFocus;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v5 = (int (**)(...))(&`vtable for'data::AvatarEnterFocus + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v5;
  data::Vector::Vector(&this->camera_follow_lower);
  data::Vector::Vector(&this->camera_follow_upper);
  if ( *(_BYTE *)(((unsigned __int64)&this->camera_follow_max_degree >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->camera_follow_max_degree >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->camera_follow_max_degree, v1);
  }
  this->camera_follow_max_degree = 60.0;
  v6 = (((_BYTE)this - 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->camera_follow_min_degree >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->camera_follow_min_degree >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->camera_follow_min_degree, v6);
  }
  this->camera_follow_min_degree = -60.0;
  if ( *(char *)(((unsigned __int64)&this->camera_fast_focus_mode >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->camera_fast_focus_mode, v6, &this->camera_fast_focus_mode);
  this->camera_fast_focus_mode = 0;
  v7 = ((_BYTE)this - 79) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->face_to_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->face_to_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->face_to_target, v7, v8);
  this->face_to_target = 0;
  v9 = (((_BYTE)this - 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->face_to_target_angle_threshold >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->face_to_target_angle_threshold >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->face_to_target_angle_threshold, v9);
  }
  this->face_to_target_angle_threshold = 0.0;
  if ( *(char *)(((unsigned __int64)&this->change_main_skill_id >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->change_main_skill_id, v9, &this->change_main_skill_id);
  this->change_main_skill_id = 0;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    &this->drag_button_name,
    "Skill1",
    (const std::allocator<char> *)(v2 + 32));
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  data::FocusAssistanceGroup::FocusAssistanceGroup(&this->assistance);
  v10 = ((_BYTE)this - 19) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&this->can_move >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&this->can_move >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->can_move, v10, v11);
  this->can_move = 1;
  v12 = ((_BYTE)this - 18) & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)&this->show_crosshair >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)&this->show_crosshair >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->show_crosshair, v12, v13);
  this->show_crosshair = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->vcam_fov >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->vcam_fov >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->vcam_fov, v12);
  }
  this->vcam_fov = 45.0;
  v14 = (((_BYTE)this - 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->focus_anchor_hor_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->focus_anchor_hor_angle >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->focus_anchor_hor_angle, v14);
  }
  this->focus_anchor_hor_angle = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->focus_anchor_ver_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->focus_anchor_ver_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->focus_anchor_ver_angle, v14);
  }
  this->focus_anchor_ver_angle = 0.0;
  v15 = ((_BYTE)this - 4) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&this->disable_anim >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&this->disable_anim >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_store1(&this->disable_anim, v15, v16);
  this->disable_anim = 0;
  v17 = ((_BYTE)this - 3) & 7;
  v18 = (*(_BYTE *)(((unsigned __int64)&this->disable_aim_layer >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v17 >= *(_BYTE *)(((unsigned __int64)&this->disable_aim_layer >> 3) + 0x7FFF8000));
  if ( (_BYTE)v18 )
    __asan_report_store1(&this->disable_aim_layer, v17, v18);
  this->disable_aim_layer = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_anchor_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_anchor_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_anchor_y, v17);
  }
  this->target_anchor_y = -1.0;
  if ( v19 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 977: range 0000000011108E90-0000000011109886
void __cdecl data::AvatarEnterFocus::AvatarEnterFocus(
        data::AvatarEnterFocus *const this,
        const data::AvatarEnterFocus *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx
  __int64 v4; // rdx
  float camera_follow_max_degree; // xmm0_4
  float camera_follow_min_degree; // xmm0_4
  __int64 v7; // rsi
  bool camera_fast_focus_mode; // cl
  char v9; // al
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool face_to_target; // cl
  char v13; // dl
  __int64 v14; // rdx
  float face_to_target_angle_threshold; // xmm0_4
  __int64 v16; // rsi
  bool change_main_skill_id; // cl
  char v18; // al
  __int64 v19; // rsi
  __int64 v20; // rdx
  bool can_move; // cl
  char v22; // dl
  __int64 v23; // rdx
  __int64 v24; // rsi
  __int64 v25; // rdx
  bool show_crosshair; // cl
  char v27; // dl
  __int64 v28; // rdx
  float vcam_fov; // xmm0_4
  float focus_anchor_hor_angle; // xmm0_4
  __int64 v31; // rsi
  float focus_anchor_ver_angle; // xmm0_4
  __int64 v33; // rsi
  __int64 v34; // rdx
  bool disable_anim; // cl
  char v36; // dl
  __int64 v37; // rdx
  __int64 v38; // rsi
  __int64 v39; // rdx
  bool disable_aim_layer; // cl
  char v41; // dl
  __int64 v42; // rdx
  float target_anchor_y; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterFocus + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->camera_follow_lower >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->camera_follow_lower >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->camera_follow_lower);
  v3 = *(_QWORD *)&a2->camera_follow_lower.z;
  *(_QWORD *)&this->camera_follow_lower.x = *(_QWORD *)&a2->camera_follow_lower.x;
  *(_QWORD *)&this->camera_follow_lower.z = v3;
  if ( *(_WORD *)(((unsigned __int64)&this->camera_follow_upper >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->camera_follow_upper >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->camera_follow_upper);
  v4 = *(_QWORD *)&a2->camera_follow_upper.z;
  *(_QWORD *)&this->camera_follow_upper.x = *(_QWORD *)&a2->camera_follow_upper.x;
  *(_QWORD *)&this->camera_follow_upper.z = v4;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camera_follow_max_degree >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->camera_follow_max_degree >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->camera_follow_max_degree);
  }
  camera_follow_max_degree = a2->camera_follow_max_degree;
  if ( *(_BYTE *)(((unsigned __int64)&this->camera_follow_max_degree >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->camera_follow_max_degree >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->camera_follow_max_degree, a2);
  }
  this->camera_follow_max_degree = camera_follow_max_degree;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camera_follow_min_degree >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->camera_follow_min_degree >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->camera_follow_min_degree);
  }
  camera_follow_min_degree = a2->camera_follow_min_degree;
  v7 = (((_BYTE)this - 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->camera_follow_min_degree >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->camera_follow_min_degree >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->camera_follow_min_degree, v7);
  }
  this->camera_follow_min_degree = camera_follow_min_degree;
  if ( *(char *)(((unsigned __int64)&a2->camera_fast_focus_mode >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->camera_fast_focus_mode, v7, &a2->camera_fast_focus_mode);
  camera_fast_focus_mode = a2->camera_fast_focus_mode;
  v9 = *(_BYTE *)(((unsigned __int64)&this->camera_fast_focus_mode >> 3) + 0x7FFF8000);
  if ( v9 < 0 )
  {
    LOBYTE(v7) = v9 != 0;
    __asan_report_store1(&this->camera_fast_focus_mode, v7, &this->camera_fast_focus_mode);
  }
  this->camera_fast_focus_mode = camera_fast_focus_mode;
  v10 = ((_BYTE)a2 - 79) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&a2->face_to_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&a2->face_to_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&a2->face_to_target, v10, v11);
  face_to_target = a2->face_to_target;
  v13 = *(_BYTE *)(((unsigned __int64)&this->face_to_target >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this - 79) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->face_to_target, v10, v14);
  this->face_to_target = face_to_target;
  if ( *(_BYTE *)(((unsigned __int64)&a2->face_to_target_angle_threshold >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->face_to_target_angle_threshold >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->face_to_target_angle_threshold);
  }
  face_to_target_angle_threshold = a2->face_to_target_angle_threshold;
  v16 = (((_BYTE)this - 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->face_to_target_angle_threshold >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->face_to_target_angle_threshold >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->face_to_target_angle_threshold, v16);
  }
  this->face_to_target_angle_threshold = face_to_target_angle_threshold;
  if ( *(char *)(((unsigned __int64)&a2->change_main_skill_id >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->change_main_skill_id, v16, &a2->change_main_skill_id);
  change_main_skill_id = a2->change_main_skill_id;
  v18 = *(_BYTE *)(((unsigned __int64)&this->change_main_skill_id >> 3) + 0x7FFF8000);
  if ( v18 < 0 )
  {
    LOBYTE(v16) = v18 != 0;
    __asan_report_store1(&this->change_main_skill_id, v16, &this->change_main_skill_id);
  }
  this->change_main_skill_id = change_main_skill_id;
  std::string::basic_string(&this->drag_button_name, &a2->drag_button_name);
  if ( *(char *)(((unsigned __int64)&this->assistance >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)&this->assistance.is_json_loaded >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 20) & 7) >= *(_BYTE *)(((unsigned __int64)&this->assistance.is_json_loaded >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->assistance, 13LL);
  }
  if ( *(char *)(((unsigned __int64)&a2->assistance >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)&a2->assistance.is_json_loaded >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 - 20) & 7) >= *(_BYTE *)(((unsigned __int64)&a2->assistance.is_json_loaded >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->assistance, 13LL);
  }
  this->assistance = a2->assistance;
  v19 = ((_BYTE)a2 - 19) & 7;
  v20 = (*(_BYTE *)(((unsigned __int64)&a2->can_move >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v19 >= *(_BYTE *)(((unsigned __int64)&a2->can_move >> 3) + 0x7FFF8000));
  if ( (_BYTE)v20 )
    __asan_report_load1(&a2->can_move, v19, v20);
  can_move = a2->can_move;
  v22 = *(_BYTE *)(((unsigned __int64)&this->can_move >> 3) + 0x7FFF8000);
  LOBYTE(v19) = v22 != 0;
  v23 = (v22 != 0) & (unsigned __int8)((((unsigned __int8)this - 19) & 7) >= v22);
  if ( (_BYTE)v23 )
    __asan_report_store1(&this->can_move, v19, v23);
  this->can_move = can_move;
  v24 = ((_BYTE)a2 - 18) & 7;
  v25 = (*(_BYTE *)(((unsigned __int64)&a2->show_crosshair >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v24 >= *(_BYTE *)(((unsigned __int64)&a2->show_crosshair >> 3) + 0x7FFF8000));
  if ( (_BYTE)v25 )
    __asan_report_load1(&a2->show_crosshair, v24, v25);
  show_crosshair = a2->show_crosshair;
  v27 = *(_BYTE *)(((unsigned __int64)&this->show_crosshair >> 3) + 0x7FFF8000);
  LOBYTE(v24) = v27 != 0;
  v28 = (v27 != 0) & (unsigned __int8)((((unsigned __int8)this - 18) & 7) >= v27);
  if ( (_BYTE)v28 )
    __asan_report_store1(&this->show_crosshair, v24, v28);
  this->show_crosshair = show_crosshair;
  if ( *(_BYTE *)(((unsigned __int64)&a2->vcam_fov >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->vcam_fov >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->vcam_fov);
  }
  vcam_fov = a2->vcam_fov;
  if ( *(_BYTE *)(((unsigned __int64)&this->vcam_fov >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->vcam_fov >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->vcam_fov, v24);
  }
  this->vcam_fov = vcam_fov;
  if ( *(_BYTE *)(((unsigned __int64)&a2->focus_anchor_hor_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->focus_anchor_hor_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->focus_anchor_hor_angle);
  }
  focus_anchor_hor_angle = a2->focus_anchor_hor_angle;
  v31 = (((_BYTE)this - 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->focus_anchor_hor_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->focus_anchor_hor_angle >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->focus_anchor_hor_angle, v31);
  }
  this->focus_anchor_hor_angle = focus_anchor_hor_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->focus_anchor_ver_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->focus_anchor_ver_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->focus_anchor_ver_angle);
  }
  focus_anchor_ver_angle = a2->focus_anchor_ver_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->focus_anchor_ver_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->focus_anchor_ver_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->focus_anchor_ver_angle, v31);
  }
  this->focus_anchor_ver_angle = focus_anchor_ver_angle;
  v33 = ((_BYTE)a2 - 4) & 7;
  v34 = (*(_BYTE *)(((unsigned __int64)&a2->disable_anim >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v33 >= *(_BYTE *)(((unsigned __int64)&a2->disable_anim >> 3) + 0x7FFF8000));
  if ( (_BYTE)v34 )
    __asan_report_load1(&a2->disable_anim, v33, v34);
  disable_anim = a2->disable_anim;
  v36 = *(_BYTE *)(((unsigned __int64)&this->disable_anim >> 3) + 0x7FFF8000);
  LOBYTE(v33) = v36 != 0;
  v37 = (v36 != 0) & (unsigned __int8)((((unsigned __int8)this - 4) & 7) >= v36);
  if ( (_BYTE)v37 )
    __asan_report_store1(&this->disable_anim, v33, v37);
  this->disable_anim = disable_anim;
  v38 = ((_BYTE)a2 - 3) & 7;
  v39 = (*(_BYTE *)(((unsigned __int64)&a2->disable_aim_layer >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v38 >= *(_BYTE *)(((unsigned __int64)&a2->disable_aim_layer >> 3) + 0x7FFF8000));
  if ( (_BYTE)v39 )
    __asan_report_load1(&a2->disable_aim_layer, v38, v39);
  disable_aim_layer = a2->disable_aim_layer;
  v41 = *(_BYTE *)(((unsigned __int64)&this->disable_aim_layer >> 3) + 0x7FFF8000);
  LOBYTE(v38) = v41 != 0;
  v42 = (v41 != 0) & (unsigned __int8)((((unsigned __int8)this - 3) & 7) >= v41);
  if ( (_BYTE)v42 )
    __asan_report_store1(&this->disable_aim_layer, v38, v42);
  this->disable_aim_layer = disable_aim_layer;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_anchor_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_anchor_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_anchor_y);
  }
  target_anchor_y = a2->target_anchor_y;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_anchor_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_anchor_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_anchor_y, v38);
  }
  this->target_anchor_y = target_anchor_y;
};

// Line 1001: range 000000001130EB8E-000000001130EBB8
void __cdecl data::AvatarEnterFocus::~AvatarEnterFocus(data::AvatarEnterFocus *const this)
{
  data::AvatarEnterFocus::~AvatarEnterFocus(this);
  operator delete(this, 0x108uLL);
};

// Line 1001: range 000000001130EB2E-000000001130EB8D
void __cdecl data::AvatarEnterFocus::~AvatarEnterFocus(data::AvatarEnterFocus *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterFocus + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->drag_button_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1006: range 000000001009BBFC-000000001009BC0C
const char *__cdecl data::AvatarEnterFocus::getTypeName(const data::AvatarEnterFocus *const this)
{
  return "AvatarEnterFocus";
};

// Line 1007: range 000000001009BC0E-000000001009BDAA
int32_t __cdecl data::AvatarEnterFocus::getHashNum(const data::AvatarEnterFocus *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarEnterFocus::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarEnterFocus",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1023: range 0000000011109B70-0000000011109BB1
void __cdecl data::AvatarEnterFocusFactory::AvatarEnterFocusFactory(data::AvatarEnterFocusFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterFocusFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarEnterFocusFactory = v2;
};

// Line 1031: range 0000000011109EBA-0000000011109F98
void __cdecl data::AvatarExitFocus::AvatarExitFocus(data::AvatarExitFocus *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitFocus + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->keep_rotation >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->keep_rotation, v1, &this->keep_rotation);
  this->keep_rotation = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->exit_camera_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->exit_camera_radius >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->exit_camera_radius, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->exit_camera_radius = -1.0;
};

// Line 1031: range 000000001110A3E2-000000001110A54C
void __cdecl data::AvatarExitFocus::AvatarExitFocus(data::AvatarExitFocus *const this, const data::AvatarExitFocus *a2)
{
  int (**v2)(...); // rdx
  bool keep_rotation; // cl
  char v4; // al
  float exit_camera_radius; // xmm0_4
  const data::AvatarExitFocus *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitFocus + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->keep_rotation >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->keep_rotation, a2, &a2->keep_rotation);
  keep_rotation = a2->keep_rotation;
  v4 = *(_BYTE *)(((unsigned __int64)&this->keep_rotation >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->keep_rotation, a2, &this->keep_rotation);
  }
  this->keep_rotation = keep_rotation;
  if ( *(_BYTE *)(((unsigned __int64)&v6->exit_camera_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->exit_camera_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->exit_camera_radius);
  }
  exit_camera_radius = v6->exit_camera_radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->exit_camera_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->exit_camera_radius >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->exit_camera_radius, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->exit_camera_radius = exit_camera_radius;
};

// Line 1039: range 000000001130EAB4-000000001130EB01
void __cdecl data::AvatarExitFocus::~AvatarExitFocus(data::AvatarExitFocus *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitFocus + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1039: range 000000001130EB02-000000001130EB2C
void __cdecl data::AvatarExitFocus::~AvatarExitFocus(data::AvatarExitFocus *const this)
{
  data::AvatarExitFocus::~AvatarExitFocus(this);
  operator delete(this, 0x90uLL);
};

// Line 1044: range 000000001009BDAC-000000001009BDBC
const char *__cdecl data::AvatarExitFocus::getTypeName(const data::AvatarExitFocus *const this)
{
  return "AvatarExitFocus";
};

// Line 1045: range 000000001009BDBE-000000001009BF5A
int32_t __cdecl data::AvatarExitFocus::getHashNum(const data::AvatarExitFocus *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarExitFocus::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarExitFocus",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1061: range 000000001110A836-000000001110A877
void __cdecl data::AvatarExitFocusFactory::AvatarExitFocusFactory(data::AvatarExitFocusFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitFocusFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarExitFocusFactory = v2;
};

// Line 1069: range 000000001110AB80-000000001110AE10
void __cdecl data::AvatarEnterViewBias::AvatarEnterViewBias(data::AvatarEnterViewBias *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rsi
  __int64 v7; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterViewBias + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->sphere_bias_pole >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->sphere_bias_pole >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->sphere_bias_pole, v1);
  }
  this->sphere_bias_pole = 0.0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->sphere_bias_elev >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->sphere_bias_elev >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->sphere_bias_elev, v3);
  }
  this->sphere_bias_elev = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->sphere_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->sphere_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->sphere_radius, v3);
  }
  this->sphere_radius = -1.0;
  v4 = (((_BYTE)this - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->post_forward_pole_delta_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->post_forward_pole_delta_angle >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->post_forward_pole_delta_angle, v4);
  }
  this->post_forward_pole_delta_angle = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->post_forward_elev_delta_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->post_forward_elev_delta_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->post_forward_elev_delta_angle, v4);
  }
  this->post_forward_elev_delta_angle = 0.0;
  v5 = (((_BYTE)this - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration_in_normal_state >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration_in_normal_state >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration_in_normal_state, v5);
  }
  this->duration_in_normal_state = 0.30000001;
  if ( *(char *)(((unsigned __int64)&this->lock_zoom >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->lock_zoom, v5, &this->lock_zoom);
  this->lock_zoom = 0;
  v6 = ((_BYTE)this - 95) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->lock_reset_back >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->lock_reset_back >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->lock_reset_back, v6, v7);
  this->lock_reset_back = 0;
};

// Line 1069: range 000000001110B254-000000001110B6F2
void __cdecl data::AvatarEnterViewBias::AvatarEnterViewBias(
        data::AvatarEnterViewBias *const this,
        const data::AvatarEnterViewBias *a2)
{
  int (**v2)(...); // rdx
  float sphere_bias_pole; // xmm0_4
  float sphere_bias_elev; // xmm0_4
  __int64 v5; // rsi
  float sphere_radius; // xmm0_4
  float post_forward_pole_delta_angle; // xmm0_4
  __int64 v8; // rsi
  float post_forward_elev_delta_angle; // xmm0_4
  float duration_in_normal_state; // xmm0_4
  __int64 v11; // rsi
  bool lock_zoom; // cl
  char v13; // al
  __int64 v14; // rsi
  __int64 v15; // rdx
  bool lock_reset_back; // cl
  char v17; // dl
  __int64 v18; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterViewBias + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->sphere_bias_pole >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->sphere_bias_pole >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->sphere_bias_pole);
  }
  sphere_bias_pole = a2->sphere_bias_pole;
  if ( *(_BYTE *)(((unsigned __int64)&this->sphere_bias_pole >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->sphere_bias_pole >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->sphere_bias_pole, a2);
  }
  this->sphere_bias_pole = sphere_bias_pole;
  if ( *(_BYTE *)(((unsigned __int64)&a2->sphere_bias_elev >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->sphere_bias_elev >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->sphere_bias_elev);
  }
  sphere_bias_elev = a2->sphere_bias_elev;
  v5 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->sphere_bias_elev >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->sphere_bias_elev >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->sphere_bias_elev, v5);
  }
  this->sphere_bias_elev = sphere_bias_elev;
  if ( *(_BYTE *)(((unsigned __int64)&a2->sphere_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->sphere_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->sphere_radius);
  }
  sphere_radius = a2->sphere_radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->sphere_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->sphere_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->sphere_radius, v5);
  }
  this->sphere_radius = sphere_radius;
  if ( *(_BYTE *)(((unsigned __int64)&a2->post_forward_pole_delta_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->post_forward_pole_delta_angle >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->post_forward_pole_delta_angle);
  }
  post_forward_pole_delta_angle = a2->post_forward_pole_delta_angle;
  v8 = (((_BYTE)this - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->post_forward_pole_delta_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->post_forward_pole_delta_angle >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->post_forward_pole_delta_angle, v8);
  }
  this->post_forward_pole_delta_angle = post_forward_pole_delta_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->post_forward_elev_delta_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->post_forward_elev_delta_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->post_forward_elev_delta_angle);
  }
  post_forward_elev_delta_angle = a2->post_forward_elev_delta_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->post_forward_elev_delta_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->post_forward_elev_delta_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->post_forward_elev_delta_angle, v8);
  }
  this->post_forward_elev_delta_angle = post_forward_elev_delta_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration_in_normal_state >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->duration_in_normal_state >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->duration_in_normal_state);
  }
  duration_in_normal_state = a2->duration_in_normal_state;
  v11 = (((_BYTE)this - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration_in_normal_state >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration_in_normal_state >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration_in_normal_state, v11);
  }
  this->duration_in_normal_state = duration_in_normal_state;
  if ( *(char *)(((unsigned __int64)&a2->lock_zoom >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->lock_zoom, v11, &a2->lock_zoom);
  lock_zoom = a2->lock_zoom;
  v13 = *(_BYTE *)(((unsigned __int64)&this->lock_zoom >> 3) + 0x7FFF8000);
  if ( v13 < 0 )
  {
    LOBYTE(v11) = v13 != 0;
    __asan_report_store1(&this->lock_zoom, v11, &this->lock_zoom);
  }
  this->lock_zoom = lock_zoom;
  v14 = ((_BYTE)a2 - 95) & 7;
  v15 = (*(_BYTE *)(((unsigned __int64)&a2->lock_reset_back >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v14 >= *(_BYTE *)(((unsigned __int64)&a2->lock_reset_back >> 3) + 0x7FFF8000));
  if ( (_BYTE)v15 )
    __asan_report_load1(&a2->lock_reset_back, v14, v15);
  lock_reset_back = a2->lock_reset_back;
  v17 = *(_BYTE *)(((unsigned __int64)&this->lock_reset_back >> 3) + 0x7FFF8000);
  LOBYTE(v14) = v17 != 0;
  v18 = (v17 != 0) & (unsigned __int8)((((unsigned __int8)this - 95) & 7) >= v17);
  if ( (_BYTE)v18 )
    __asan_report_store1(&this->lock_reset_back, v14, v18);
  this->lock_reset_back = lock_reset_back;
};

// Line 1083: range 000000001130EA88-000000001130EAB2
void __cdecl data::AvatarEnterViewBias::~AvatarEnterViewBias(data::AvatarEnterViewBias *const this)
{
  data::AvatarEnterViewBias::~AvatarEnterViewBias(this);
  operator delete(this, 0xA8uLL);
};

// Line 1083: range 000000001130EA3A-000000001130EA87
void __cdecl data::AvatarEnterViewBias::~AvatarEnterViewBias(data::AvatarEnterViewBias *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterViewBias + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1088: range 000000001009BF5C-000000001009BF6C
const char *__cdecl data::AvatarEnterViewBias::getTypeName(const data::AvatarEnterViewBias *const this)
{
  return "AvatarEnterViewBias";
};

// Line 1089: range 000000001009BF6E-000000001009C10A
int32_t __cdecl data::AvatarEnterViewBias::getHashNum(const data::AvatarEnterViewBias *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarEnterViewBias::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarEnterViewBias",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1105: range 000000001110B9DC-000000001110BA1D
void __cdecl data::AvatarEnterViewBiasFactory::AvatarEnterViewBiasFactory(data::AvatarEnterViewBiasFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterViewBiasFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarEnterViewBiasFactory = v2;
};

// Line 1113: range 000000001110BD26-000000001110BE0D
void __cdecl data::AvatarExitViewBias::AvatarExitViewBias(data::AvatarExitViewBias *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitViewBias + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lerp_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lerp_duration, v1);
  }
  this->lerp_duration = 0.30000001;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lerp_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->lerp_radius, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->lerp_radius = 4.0;
};

// Line 1113: range 000000001110C256-000000001110C3C2
void __cdecl data::AvatarExitViewBias::AvatarExitViewBias(
        data::AvatarExitViewBias *const this,
        const data::AvatarExitViewBias *a2)
{
  int (**v2)(...); // rdx
  float lerp_duration; // xmm0_4
  float lerp_radius; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitViewBias + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lerp_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->lerp_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->lerp_duration);
  }
  lerp_duration = a2->lerp_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lerp_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lerp_duration, a2);
  }
  this->lerp_duration = lerp_duration;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lerp_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->lerp_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->lerp_radius);
  }
  lerp_radius = a2->lerp_radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lerp_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->lerp_radius, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->lerp_radius = lerp_radius;
};

// Line 1121: range 000000001130EA0E-000000001130EA38
void __cdecl data::AvatarExitViewBias::~AvatarExitViewBias(data::AvatarExitViewBias *const this)
{
  data::AvatarExitViewBias::~AvatarExitViewBias(this);
  operator delete(this, 0x90uLL);
};

// Line 1121: range 000000001130E9C0-000000001130EA0D
void __cdecl data::AvatarExitViewBias::~AvatarExitViewBias(data::AvatarExitViewBias *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitViewBias + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1126: range 000000001009C10C-000000001009C11C
const char *__cdecl data::AvatarExitViewBias::getTypeName(const data::AvatarExitViewBias *const this)
{
  return "AvatarExitViewBias";
};

// Line 1127: range 000000001009C11E-000000001009C2BA
int32_t __cdecl data::AvatarExitViewBias::getHashNum(const data::AvatarExitViewBias *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarExitViewBias::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarExitViewBias",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1143: range 000000001110C6AC-000000001110C6ED
void __cdecl data::AvatarExitViewBiasFactory::AvatarExitViewBiasFactory(data::AvatarExitViewBiasFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitViewBiasFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarExitViewBiasFactory = v2;
};

// Line 1151: range 000000001110C9F6-000000001110CA43
void __cdecl data::AvatarExitClimb::AvatarExitClimb(data::AvatarExitClimb *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitClimb + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1151: range 000000001110CE92-000000001110CEEA
void __cdecl data::AvatarExitClimb::AvatarExitClimb(data::AvatarExitClimb *const this, const data::AvatarExitClimb *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitClimb + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1157: range 000000001130E994-000000001130E9BE
void __cdecl data::AvatarExitClimb::~AvatarExitClimb(data::AvatarExitClimb *const this)
{
  data::AvatarExitClimb::~AvatarExitClimb(this);
  operator delete(this, 0x88uLL);
};

// Line 1157: range 000000001130E946-000000001130E993
void __cdecl data::AvatarExitClimb::~AvatarExitClimb(data::AvatarExitClimb *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitClimb + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1162: range 000000001009C2BC-000000001009C2CC
const char *__cdecl data::AvatarExitClimb::getTypeName(const data::AvatarExitClimb *const this)
{
  return "AvatarExitClimb";
};

// Line 1163: range 000000001009C2CE-000000001009C46A
int32_t __cdecl data::AvatarExitClimb::getHashNum(const data::AvatarExitClimb *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarExitClimb::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarExitClimb",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1179: range 000000001110D1D4-000000001110D215
void __cdecl data::AvatarExitClimbFactory::AvatarExitClimbFactory(data::AvatarExitClimbFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitClimbFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarExitClimbFactory = v2;
};

// Line 1187: range 000000001110DB7E-000000001110DCDA
void __cdecl data::AvatarCameraParam::AvatarCameraParam(
        data::AvatarCameraParam *const this,
        const data::AvatarCameraParam *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarCameraParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->camera_param >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&this->camera_param.is_json_loaded + 2) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->camera_param.is_json_loaded + 2) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->camera_param, 20LL);
  }
  if ( *(char *)(((unsigned __int64)&a2->camera_param >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&a2->camera_param.is_json_loaded + 2) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->camera_param.is_json_loaded + 2) >> 3)
                                                     + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->camera_param, 20LL);
  }
  v3 = *(_QWORD *)&a2->camera_param.force_radius;
  *(_QWORD *)&this->camera_param.radius_spring_ratio = *(_QWORD *)&a2->camera_param.radius_spring_ratio;
  *(_QWORD *)&this->camera_param.force_radius = v3;
  *(_DWORD *)&this->camera_param.should_keep_force_radius = *(_DWORD *)&a2->camera_param.should_keep_force_radius;
};

// Line 1194: range 000000001130E91A-000000001130E944
void __cdecl data::AvatarCameraParam::~AvatarCameraParam(data::AvatarCameraParam *const this)
{
  data::AvatarCameraParam::~AvatarCameraParam(this);
  operator delete(this, 0xA0uLL);
};

// Line 1194: range 000000001130E8CC-000000001130E919
void __cdecl data::AvatarCameraParam::~AvatarCameraParam(data::AvatarCameraParam *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarCameraParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1199: range 000000001009C46C-000000001009C47C
const char *__cdecl data::AvatarCameraParam::getTypeName(const data::AvatarCameraParam *const this)
{
  return "AvatarCameraParam";
};

// Line 1200: range 000000001009C47E-000000001009C61A
int32_t __cdecl data::AvatarCameraParam::getHashNum(const data::AvatarCameraParam *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarCameraParam::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarCameraParam",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1216: range 000000001110DFC4-000000001110E005
void __cdecl data::AvatarCameraParamFactory::AvatarCameraParamFactory(data::AvatarCameraParamFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarCameraParamFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarCameraParamFactory = v2;
};

// Line 1224: range 000000001110E30E-000000001110E3B0
void __cdecl data::AvatarEnterCameraShot::AvatarEnterCameraShot(data::AvatarEnterCameraShot *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShot + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->camera_move_cfg_path);
  if ( *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->shot_type, v1);
  }
  this->shot_type = AVATAR_0;
};

// Line 1224: range 000000001110E7FA-000000001110E914
void __cdecl data::AvatarEnterCameraShot::AvatarEnterCameraShot(
        data::AvatarEnterCameraShot *const this,
        const data::AvatarEnterCameraShot *a2)
{
  int (**v2)(...); // rdx
  std::string *p_camera_move_cfg_path; // rsi
  data::AbilityCameraShotType shot_type; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShot + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_camera_move_cfg_path = &a2->camera_move_cfg_path;
  std::string::basic_string(&this->camera_move_cfg_path, &a2->camera_move_cfg_path);
  if ( *(_BYTE *)(((unsigned __int64)&a2->shot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->shot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->shot_type);
  }
  shot_type = a2->shot_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_camera_move_cfg_path) = v5 != 0;
    __asan_report_store4(&this->shot_type, p_camera_move_cfg_path);
  }
  this->shot_type = shot_type;
};

// Line 1232: range 000000001130E840-000000001130E89F
void __cdecl data::AvatarEnterCameraShot::~AvatarEnterCameraShot(data::AvatarEnterCameraShot *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShot + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->camera_move_cfg_path);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1232: range 000000001130E8A0-000000001130E8CA
void __cdecl data::AvatarEnterCameraShot::~AvatarEnterCameraShot(data::AvatarEnterCameraShot *const this)
{
  data::AvatarEnterCameraShot::~AvatarEnterCameraShot(this);
  operator delete(this, 0xB0uLL);
};

// Line 1237: range 000000001009C61C-000000001009C62C
const char *__cdecl data::AvatarEnterCameraShot::getTypeName(const data::AvatarEnterCameraShot *const this)
{
  return "AvatarEnterCameraShot";
};

// Line 1238: range 000000001009C62E-000000001009C7CA
int32_t __cdecl data::AvatarEnterCameraShot::getHashNum(const data::AvatarEnterCameraShot *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarEnterCameraShot::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarEnterCameraShot",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1254: range 000000001110EBFE-000000001110EC3F
void __cdecl data::AvatarEnterCameraShotFactory::AvatarEnterCameraShotFactory(
        data::AvatarEnterCameraShotFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShotFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarEnterCameraShotFactory = v2;
};

// Line 1262: range 000000001110EF48-000000001110EFD8
void __cdecl data::AvatarExitCameraShot::AvatarExitCameraShot(data::AvatarExitCameraShot *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitCameraShot + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->shot_type, v1);
  }
  this->shot_type = AVATAR_0;
};

// Line 1262: range 000000001110F422-000000001110F4F9
void __cdecl data::AvatarExitCameraShot::AvatarExitCameraShot(
        data::AvatarExitCameraShot *const this,
        const data::AvatarExitCameraShot *a2)
{
  int (**v2)(...); // rdx
  data::AbilityCameraShotType shot_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarExitCameraShot + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->shot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->shot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->shot_type);
  }
  shot_type = a2->shot_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->shot_type, a2);
  }
  this->shot_type = shot_type;
};

// Line 1269: range 000000001130E7C6-000000001130E813
void __cdecl data::AvatarExitCameraShot::~AvatarExitCameraShot(data::AvatarExitCameraShot *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitCameraShot + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1269: range 000000001130E814-000000001130E83E
void __cdecl data::AvatarExitCameraShot::~AvatarExitCameraShot(data::AvatarExitCameraShot *const this)
{
  data::AvatarExitCameraShot::~AvatarExitCameraShot(this);
  operator delete(this, 0x90uLL);
};

// Line 1274: range 000000001009C7CC-000000001009C7DC
const char *__cdecl data::AvatarExitCameraShot::getTypeName(const data::AvatarExitCameraShot *const this)
{
  return "AvatarExitCameraShot";
};

// Line 1275: range 000000001009C7DE-000000001009C97A
int32_t __cdecl data::AvatarExitCameraShot::getHashNum(const data::AvatarExitCameraShot *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarExitCameraShot::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarExitCameraShot",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1291: range 000000001110F7E2-000000001110F823
void __cdecl data::AvatarExitCameraShotFactory::AvatarExitCameraShotFactory(
        data::AvatarExitCameraShotFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarExitCameraShotFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarExitCameraShotFactory = v2;
};

// Line 1299: range 000000001110FB2C-000000001110FC1B
void __cdecl data::AvatarEnterCameraShotByDistance::AvatarEnterCameraShotByDistance(
        data::AvatarEnterCameraShotByDistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShotByDistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->camera_move_cfg_path);
  if ( *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->shot_type, v1);
  }
  this->shot_type = AVATAR_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->distance, (((_BYTE)this - 84) & 7u) + 3);
  }
  this->distance = 0.0;
};

// Line 1299: range 0000000011110064-0000000011110210
void __cdecl data::AvatarEnterCameraShotByDistance::AvatarEnterCameraShotByDistance(
        data::AvatarEnterCameraShotByDistance *const this,
        const data::AvatarEnterCameraShotByDistance *a2)
{
  int (**v2)(...); // rdx
  std::string *p_camera_move_cfg_path; // rsi
  data::AbilityCameraShotType shot_type; // ecx
  char v5; // al
  float distance; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShotByDistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_camera_move_cfg_path = &a2->camera_move_cfg_path;
  std::string::basic_string(&this->camera_move_cfg_path, &a2->camera_move_cfg_path);
  if ( *(_BYTE *)(((unsigned __int64)&a2->shot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->shot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->shot_type);
  }
  shot_type = a2->shot_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->shot_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_camera_move_cfg_path) = v5 != 0;
    __asan_report_store4(&this->shot_type, p_camera_move_cfg_path);
  }
  this->shot_type = shot_type;
  if ( *(_BYTE *)(((unsigned __int64)&a2->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->distance);
  }
  distance = a2->distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->distance, (((_BYTE)this - 84) & 7u) + 3);
  }
  this->distance = distance;
};

// Line 1308: range 000000001130E79A-000000001130E7C4
void __cdecl data::AvatarEnterCameraShotByDistance::~AvatarEnterCameraShotByDistance(
        data::AvatarEnterCameraShotByDistance *const this)
{
  data::AvatarEnterCameraShotByDistance::~AvatarEnterCameraShotByDistance(this);
  operator delete(this, 0xB0uLL);
};

// Line 1308: range 000000001130E73A-000000001130E799
void __cdecl data::AvatarEnterCameraShotByDistance::~AvatarEnterCameraShotByDistance(
        data::AvatarEnterCameraShotByDistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShotByDistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->camera_move_cfg_path);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1313: range 000000001009C97C-000000001009C98C
const char *__cdecl data::AvatarEnterCameraShotByDistance::getTypeName(
        const data::AvatarEnterCameraShotByDistance *const this)
{
  return "AvatarEnterCameraShotByDistance";
};

// Line 1314: range 000000001009C98E-000000001009CB2A
int32_t __cdecl data::AvatarEnterCameraShotByDistance::getHashNum(
        const data::AvatarEnterCameraShotByDistance *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarEnterCameraShotByDistance::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarEnterCameraShotByDistance",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1330: range 00000000111104FA-000000001111053B
void __cdecl data::AvatarEnterCameraShotByDistanceFactory::AvatarEnterCameraShotByDistanceFactory(
        data::AvatarEnterCameraShotByDistanceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarEnterCameraShotByDistanceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarEnterCameraShotByDistanceFactory = v2;
};

// Line 1338: range 0000000011110844-00000000111108E6
void __cdecl data::PlayEmoSync::PlayEmoSync(data::PlayEmoSync *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::PlayEmoSync + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->dialog_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dialog_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dialog_id, v1);
  }
  this->dialog_id = 0;
  std::string::basic_string(&this->emo_sync_asset_path);
};

// Line 1338: range 0000000011110D30-0000000011110E4A
void __cdecl data::PlayEmoSync::PlayEmoSync(data::PlayEmoSync *const this, const data::PlayEmoSync *a2)
{
  int (**v2)(...); // rdx
  uint32_t dialog_id; // ecx
  char v4; // al
  const data::PlayEmoSync *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PlayEmoSync + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->dialog_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->dialog_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->dialog_id);
  }
  dialog_id = a2->dialog_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->dialog_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->dialog_id, a2);
  }
  this->dialog_id = dialog_id;
  std::string::basic_string(&this->emo_sync_asset_path, &v5->emo_sync_asset_path);
};

// Line 1346: range 000000001130E6AE-000000001130E70D
void __cdecl data::PlayEmoSync::~PlayEmoSync(data::PlayEmoSync *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlayEmoSync + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->emo_sync_asset_path);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1346: range 000000001130E70E-000000001130E738
void __cdecl data::PlayEmoSync::~PlayEmoSync(data::PlayEmoSync *const this)
{
  data::PlayEmoSync::~PlayEmoSync(this);
  operator delete(this, 0xB0uLL);
};

// Line 1351: range 000000001009CB2C-000000001009CB3C
const char *__cdecl data::PlayEmoSync::getTypeName(const data::PlayEmoSync *const this)
{
  return "PlayEmoSync";
};

// Line 1352: range 000000001009CB3E-000000001009CCDA
int32_t __cdecl data::PlayEmoSync::getHashNum(const data::PlayEmoSync *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PlayEmoSync::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PlayEmoSync",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1368: range 0000000011111134-0000000011111175
void __cdecl data::PlayEmoSyncFactory::PlayEmoSyncFactory(data::PlayEmoSyncFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlayEmoSyncFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PlayEmoSyncFactory = v2;
};

// Line 1376: range 000000001111147E-00000000111115DA
void __cdecl data::ControlEmotion::ControlEmotion(data::ControlEmotion *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ControlEmotion + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->toggle_emo_sync >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->toggle_emo_sync, v1, &this->toggle_emo_sync);
  this->toggle_emo_sync = 1;
  v3 = ((_BYTE)this - 119) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->toggle_blink >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->toggle_blink >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->toggle_blink, v3, v4);
  this->toggle_blink = 1;
  v5 = ((_BYTE)this - 118) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->interrupt_blink >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->interrupt_blink >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->interrupt_blink, v5, v6);
  this->interrupt_blink = 0;
  v7 = ((_BYTE)this - 117) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->toggle_eye_key >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->toggle_eye_key >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->toggle_eye_key, v7, v8);
  this->toggle_eye_key = 1;
};

// Line 1376: range 0000000011111A24-0000000011111C9A
void __cdecl data::ControlEmotion::ControlEmotion(data::ControlEmotion *const this, const data::ControlEmotion *a2)
{
  int (**v2)(...); // rdx
  bool toggle_emo_sync; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool toggle_blink; // cl
  char v8; // dl
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool interrupt_blink; // cl
  char v13; // dl
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool toggle_eye_key; // cl
  char v18; // dl
  __int64 v19; // rdx
  const data::ControlEmotion *v20; // [rsp+0h] [rbp-10h]

  v20 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ControlEmotion + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->toggle_emo_sync >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->toggle_emo_sync, a2, &a2->toggle_emo_sync);
  toggle_emo_sync = a2->toggle_emo_sync;
  v4 = *(_BYTE *)(((unsigned __int64)&this->toggle_emo_sync >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->toggle_emo_sync, a2, &this->toggle_emo_sync);
  }
  this->toggle_emo_sync = toggle_emo_sync;
  v5 = ((_BYTE)v20 - 119) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v20->toggle_blink >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v20->toggle_blink >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v20->toggle_blink, v5, v6);
  toggle_blink = v20->toggle_blink;
  v8 = *(_BYTE *)(((unsigned __int64)&this->toggle_blink >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 119) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->toggle_blink, v5, v9);
  this->toggle_blink = toggle_blink;
  v10 = ((_BYTE)v20 - 118) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v20->interrupt_blink >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v20->interrupt_blink >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v20->interrupt_blink, v10, v11);
  interrupt_blink = v20->interrupt_blink;
  v13 = *(_BYTE *)(((unsigned __int64)&this->interrupt_blink >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this - 118) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->interrupt_blink, v10, v14);
  this->interrupt_blink = interrupt_blink;
  v15 = ((_BYTE)v20 - 117) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&v20->toggle_eye_key >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&v20->toggle_eye_key >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&v20->toggle_eye_key, v15, v16);
  toggle_eye_key = v20->toggle_eye_key;
  v18 = *(_BYTE *)(((unsigned __int64)&this->toggle_eye_key >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this - 117) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->toggle_eye_key, v15, v19);
  this->toggle_eye_key = toggle_eye_key;
};

// Line 1386: range 000000001130E634-000000001130E681
void __cdecl data::ControlEmotion::~ControlEmotion(data::ControlEmotion *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ControlEmotion + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1386: range 000000001130E682-000000001130E6AC
void __cdecl data::ControlEmotion::~ControlEmotion(data::ControlEmotion *const this)
{
  data::ControlEmotion::~ControlEmotion(this);
  operator delete(this, 0x90uLL);
};

// Line 1391: range 000000001009CCDC-000000001009CCEC
const char *__cdecl data::ControlEmotion::getTypeName(const data::ControlEmotion *const this)
{
  return "ControlEmotion";
};

// Line 1392: range 000000001009CCEE-000000001009CE8A
int32_t __cdecl data::ControlEmotion::getHashNum(const data::ControlEmotion *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ControlEmotion::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ControlEmotion",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1408: range 0000000011111F84-0000000011111FC5
void __cdecl data::ControlEmotionFactory::ControlEmotionFactory(data::ControlEmotionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ControlEmotionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ControlEmotionFactory = v2;
};

// Line 1416: range 00000000111122CE-000000001111236D
void __cdecl data::SpawnAttach::SpawnAttach(data::SpawnAttach *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SpawnAttach + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  std::string::basic_string(&this->attach_name);
};

// Line 1416: range 00000000111127B6-00000000111128D1
void __cdecl data::SpawnAttach::SpawnAttach(data::SpawnAttach *const this, const data::SpawnAttach *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  const data::SpawnAttach *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SpawnAttach + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  std::string::basic_string(&this->attach_name, &v5->attach_name);
};

// Line 1424: range 000000001130E5A8-000000001130E607
void __cdecl data::SpawnAttach::~SpawnAttach(data::SpawnAttach *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SpawnAttach + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attach_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1424: range 000000001130E608-000000001130E632
void __cdecl data::SpawnAttach::~SpawnAttach(data::SpawnAttach *const this)
{
  data::SpawnAttach::~SpawnAttach(this);
  operator delete(this, 0xB0uLL);
};

// Line 1429: range 000000001009CE8C-000000001009CE9C
const char *__cdecl data::SpawnAttach::getTypeName(const data::SpawnAttach *const this)
{
  return "SpawnAttach";
};

// Line 1430: range 000000001009CE9E-000000001009D03A
int32_t __cdecl data::SpawnAttach::getHashNum(const data::SpawnAttach *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SpawnAttach::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SpawnAttach",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1446: range 0000000011112BBA-0000000011112BFB
void __cdecl data::SpawnAttachFactory::SpawnAttachFactory(data::SpawnAttachFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SpawnAttachFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SpawnAttachFactory = v2;
};

// Line 1471: range 0000000011113064-00000000111130F4
void __cdecl data::TurnDirection::TurnDirection(data::TurnDirection *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TurnDirection + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->turn_mode >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->turn_mode >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->turn_mode, v1);
  }
  this->turn_mode = PreferTargetToInput;
};

// Line 1471: range 000000001111353E-0000000011113615
void __cdecl data::TurnDirection::TurnDirection(data::TurnDirection *const this, const data::TurnDirection *a2)
{
  int (**v2)(...); // rdx
  data::TurnMode turn_mode; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TurnDirection + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->turn_mode >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->turn_mode >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->turn_mode);
  }
  turn_mode = a2->turn_mode;
  v4 = *(_BYTE *)(((unsigned __int64)&this->turn_mode >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->turn_mode, a2);
  }
  this->turn_mode = turn_mode;
};

// Line 1478: range 000000001130E52E-000000001130E57B
void __cdecl data::TurnDirection::~TurnDirection(data::TurnDirection *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TurnDirection + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1478: range 000000001130E57C-000000001130E5A6
void __cdecl data::TurnDirection::~TurnDirection(data::TurnDirection *const this)
{
  data::TurnDirection::~TurnDirection(this);
  operator delete(this, 0x90uLL);
};

// Line 1483: range 000000001009D03C-000000001009D04C
const char *__cdecl data::TurnDirection::getTypeName(const data::TurnDirection *const this)
{
  return "TurnDirection";
};

// Line 1484: range 000000001009D04E-000000001009D1EA
int32_t __cdecl data::TurnDirection::getHashNum(const data::TurnDirection *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TurnDirection::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TurnDirection",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1500: range 00000000111138FE-000000001111393F
void __cdecl data::TurnDirectionFactory::TurnDirectionFactory(data::TurnDirectionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TurnDirectionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TurnDirectionFactory = v2;
};

// Line 1508: range 0000000011113C48-0000000011113D8C
void __cdecl data::TurnDirectionToPos::TurnDirectionToPos(data::TurnDirectionToPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TurnDirectionToPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_angle, v1);
  }
  this->min_angle = -1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_angle, (((_BYTE)this - 100) & 7u) + 3);
  }
  this->max_angle = -1.0;
};

// Line 1508: range 00000000111141DC-0000000011114368
void __cdecl data::TurnDirectionToPos::TurnDirectionToPos(
        data::TurnDirectionToPos *const this,
        const data::TurnDirectionToPos *a2)
{
  int (**v2)(...); // rdx
  float min_angle; // xmm0_4
  float max_angle; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TurnDirectionToPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &a2->to_pos);
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_angle);
  }
  min_angle = a2->min_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_angle, &a2->to_pos);
  }
  this->min_angle = min_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_angle);
  }
  max_angle = a2->max_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_angle, (((_BYTE)this - 100) & 7u) + 3);
  }
  this->max_angle = max_angle;
};

// Line 1517: range 000000001130E4A2-000000001130E501
void __cdecl data::TurnDirectionToPos::~TurnDirectionToPos(data::TurnDirectionToPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TurnDirectionToPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1517: range 000000001130E502-000000001130E52C
void __cdecl data::TurnDirectionToPos::~TurnDirectionToPos(data::TurnDirectionToPos *const this)
{
  data::TurnDirectionToPos::~TurnDirectionToPos(this);
  operator delete(this, 0xA0uLL);
};

// Line 1522: range 000000001009D1EC-000000001009D1FC
const char *__cdecl data::TurnDirectionToPos::getTypeName(const data::TurnDirectionToPos *const this)
{
  return "TurnDirectionToPos";
};

// Line 1523: range 000000001009D1FE-000000001009D39A
int32_t __cdecl data::TurnDirectionToPos::getHashNum(const data::TurnDirectionToPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TurnDirectionToPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TurnDirectionToPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1539: range 0000000011114652-0000000011114693
void __cdecl data::TurnDirectionToPosFactory::TurnDirectionToPosFactory(data::TurnDirectionToPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TurnDirectionToPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TurnDirectionToPosFactory = v2;
};

// Line 1547: range 000000001111499C-0000000011114A2E
void __cdecl data::SetCameraLockTime::SetCameraLockTime(data::SetCameraLockTime *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetCameraLockTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->lock_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lock_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lock_time, v1);
  }
  this->lock_time = 0.0;
};

// Line 1547: range 0000000011114E78-0000000011114F52
void __cdecl data::SetCameraLockTime::SetCameraLockTime(
        data::SetCameraLockTime *const this,
        const data::SetCameraLockTime *a2)
{
  int (**v2)(...); // rdx
  float lock_time; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetCameraLockTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lock_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->lock_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->lock_time);
  }
  lock_time = a2->lock_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->lock_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lock_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lock_time, a2);
  }
  this->lock_time = lock_time;
};

// Line 1554: range 000000001130E428-000000001130E475
void __cdecl data::SetCameraLockTime::~SetCameraLockTime(data::SetCameraLockTime *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCameraLockTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1554: range 000000001130E476-000000001130E4A0
void __cdecl data::SetCameraLockTime::~SetCameraLockTime(data::SetCameraLockTime *const this)
{
  data::SetCameraLockTime::~SetCameraLockTime(this);
  operator delete(this, 0x90uLL);
};

// Line 1559: range 000000001009D39C-000000001009D3AC
const char *__cdecl data::SetCameraLockTime::getTypeName(const data::SetCameraLockTime *const this)
{
  return "SetCameraLockTime";
};

// Line 1560: range 000000001009D3AE-000000001009D54A
int32_t __cdecl data::SetCameraLockTime::getHashNum(const data::SetCameraLockTime *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetCameraLockTime::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetCameraLockTime",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1576: range 000000001111523C-000000001111527D
void __cdecl data::SetCameraLockTimeFactory::SetCameraLockTimeFactory(data::SetCameraLockTimeFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCameraLockTimeFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetCameraLockTimeFactory = v2;
};

// Line 1584: range 0000000011115586-0000000011115616
void __cdecl data::FireMonsterBeingHitAfterImage::FireMonsterBeingHitAfterImage(
        data::FireMonsterBeingHitAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireMonsterBeingHitAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->effect_index, v1);
  }
  this->effect_index = 0;
};

// Line 1584: range 0000000011115A60-0000000011115B37
void __cdecl data::FireMonsterBeingHitAfterImage::FireMonsterBeingHitAfterImage(
        data::FireMonsterBeingHitAfterImage *const this,
        const data::FireMonsterBeingHitAfterImage *a2)
{
  int (**v2)(...); // rdx
  uint32_t effect_index; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireMonsterBeingHitAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->effect_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->effect_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->effect_index);
  }
  effect_index = a2->effect_index;
  v4 = *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->effect_index, a2);
  }
  this->effect_index = effect_index;
};

// Line 1591: range 000000001130E3FC-000000001130E426
void __cdecl data::FireMonsterBeingHitAfterImage::~FireMonsterBeingHitAfterImage(
        data::FireMonsterBeingHitAfterImage *const this)
{
  data::FireMonsterBeingHitAfterImage::~FireMonsterBeingHitAfterImage(this);
  operator delete(this, 0x90uLL);
};

// Line 1591: range 000000001130E3AE-000000001130E3FB
void __cdecl data::FireMonsterBeingHitAfterImage::~FireMonsterBeingHitAfterImage(
        data::FireMonsterBeingHitAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireMonsterBeingHitAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1596: range 000000001009D54C-000000001009D55C
const char *__cdecl data::FireMonsterBeingHitAfterImage::getTypeName(
        const data::FireMonsterBeingHitAfterImage *const this)
{
  return "FireMonsterBeingHitAfterImage";
};

// Line 1597: range 000000001009D55E-000000001009D6FA
int32_t __cdecl data::FireMonsterBeingHitAfterImage::getHashNum(const data::FireMonsterBeingHitAfterImage *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireMonsterBeingHitAfterImage::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireMonsterBeingHitAfterImage",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1613: range 0000000011115E20-0000000011115E61
void __cdecl data::FireMonsterBeingHitAfterImageFactory::FireMonsterBeingHitAfterImageFactory(
        data::FireMonsterBeingHitAfterImageFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireMonsterBeingHitAfterImageFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireMonsterBeingHitAfterImageFactory = v2;
};

// Line 1621: range 000000001111616A-00000000111161FA
void __cdecl data::FireAvatarBeingHitAfterImage::FireAvatarBeingHitAfterImage(
        data::FireAvatarBeingHitAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireAvatarBeingHitAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->effect_index, v1);
  }
  this->effect_index = 0;
};

// Line 1621: range 0000000011116644-000000001111671B
void __cdecl data::FireAvatarBeingHitAfterImage::FireAvatarBeingHitAfterImage(
        data::FireAvatarBeingHitAfterImage *const this,
        const data::FireAvatarBeingHitAfterImage *a2)
{
  int (**v2)(...); // rdx
  uint32_t effect_index; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireAvatarBeingHitAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->effect_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->effect_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->effect_index);
  }
  effect_index = a2->effect_index;
  v4 = *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->effect_index, a2);
  }
  this->effect_index = effect_index;
};

// Line 1628: range 000000001130E334-000000001130E381
void __cdecl data::FireAvatarBeingHitAfterImage::~FireAvatarBeingHitAfterImage(
        data::FireAvatarBeingHitAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireAvatarBeingHitAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1628: range 000000001130E382-000000001130E3AC
void __cdecl data::FireAvatarBeingHitAfterImage::~FireAvatarBeingHitAfterImage(
        data::FireAvatarBeingHitAfterImage *const this)
{
  data::FireAvatarBeingHitAfterImage::~FireAvatarBeingHitAfterImage(this);
  operator delete(this, 0x90uLL);
};

// Line 1633: range 000000001009D6FC-000000001009D70C
const char *__cdecl data::FireAvatarBeingHitAfterImage::getTypeName(
        const data::FireAvatarBeingHitAfterImage *const this)
{
  return "FireAvatarBeingHitAfterImage";
};

// Line 1634: range 000000001009D70E-000000001009D8AA
int32_t __cdecl data::FireAvatarBeingHitAfterImage::getHashNum(const data::FireAvatarBeingHitAfterImage *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireAvatarBeingHitAfterImage::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireAvatarBeingHitAfterImage",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1650: range 0000000011116A04-0000000011116A45
void __cdecl data::FireAvatarBeingHitAfterImageFactory::FireAvatarBeingHitAfterImageFactory(
        data::FireAvatarBeingHitAfterImageFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireAvatarBeingHitAfterImageFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireAvatarBeingHitAfterImageFactory = v2;
};

// Line 1658: range 0000000011116D4E-0000000011116DDE
void __cdecl data::FireAfterImage::FireAfterImage(data::FireAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->effect_index, v1);
  }
  this->effect_index = 0;
};

// Line 1658: range 0000000011117228-00000000111172FF
void __cdecl data::FireAfterImage::FireAfterImage(data::FireAfterImage *const this, const data::FireAfterImage *a2)
{
  int (**v2)(...); // rdx
  uint32_t effect_index; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->effect_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->effect_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->effect_index);
  }
  effect_index = a2->effect_index;
  v4 = *(_BYTE *)(((unsigned __int64)&this->effect_index >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->effect_index, a2);
  }
  this->effect_index = effect_index;
};

// Line 1665: range 000000001130E2BA-000000001130E307
void __cdecl data::FireAfterImage::~FireAfterImage(data::FireAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1665: range 000000001130E308-000000001130E332
void __cdecl data::FireAfterImage::~FireAfterImage(data::FireAfterImage *const this)
{
  data::FireAfterImage::~FireAfterImage(this);
  operator delete(this, 0x90uLL);
};

// Line 1670: range 000000001009D8AC-000000001009D8BC
const char *__cdecl data::FireAfterImage::getTypeName(const data::FireAfterImage *const this)
{
  return "FireAfterImage";
};

// Line 1671: range 000000001009D8BE-000000001009DA5A
int32_t __cdecl data::FireAfterImage::getHashNum(const data::FireAfterImage *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireAfterImage::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireAfterImage",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1687: range 00000000111175E8-0000000011117629
void __cdecl data::FireAfterImageFactory::FireAfterImageFactory(data::FireAfterImageFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireAfterImageFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireAfterImageFactory = v2;
};

// Line 1695: range 0000000011117932-0000000011117AFF
void __cdecl data::AttachEffect::AttachEffect(data::AttachEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, v1);
  }
  this->scale = 1.0;
  data::DynamicFloat::DynamicFloat(&this->effect_templete_id, -1.0);
  if ( *(char *)(((unsigned __int64)&this->set_self_as_effect_plugin_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_self_as_effect_plugin_target, v1, &this->set_self_as_effect_plugin_target);
  this->set_self_as_effect_plugin_target = 0;
  v3 = ((_BYTE)this + 17) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_platform_dependent, v3, v4);
  this->is_platform_dependent = 0;
};

// Line 1695: range 0000000011117F50-00000000111181E0
void __cdecl data::AttachEffect::AttachEffect(data::AttachEffect *const this, const data::AttachEffect *a2)
{
  int (**v2)(...); // rdx
  float scale; // xmm0_4
  data::DynamicFloat *p_effect_templete_id; // rsi
  bool set_self_as_effect_plugin_target; // cl
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  bool is_platform_dependent; // cl
  char v10; // dl
  __int64 v11; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->scale);
  }
  scale = a2->scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, &a2->born);
  }
  this->scale = scale;
  p_effect_templete_id = &a2->effect_templete_id;
  data::DynamicFloat::DynamicFloat(&this->effect_templete_id, &a2->effect_templete_id);
  if ( *(char *)(((unsigned __int64)&a2->set_self_as_effect_plugin_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(
      &a2->set_self_as_effect_plugin_target,
      p_effect_templete_id,
      &a2->set_self_as_effect_plugin_target);
  set_self_as_effect_plugin_target = a2->set_self_as_effect_plugin_target;
  v6 = *(_BYTE *)(((unsigned __int64)&this->set_self_as_effect_plugin_target >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_effect_templete_id) = v6 != 0;
    __asan_report_store1(
      &this->set_self_as_effect_plugin_target,
      p_effect_templete_id,
      &this->set_self_as_effect_plugin_target);
  }
  this->set_self_as_effect_plugin_target = set_self_as_effect_plugin_target;
  v7 = ((_BYTE)a2 + 17) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&a2->is_platform_dependent, v7, v8);
  is_platform_dependent = a2->is_platform_dependent;
  v10 = *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v10 != 0;
  v11 = (v10 != 0) & (unsigned __int8)((((unsigned __int8)this + 17) & 7) >= v10);
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->is_platform_dependent, v7, v11);
  this->is_platform_dependent = is_platform_dependent;
};

// Line 1707: range 000000001130E20A-000000001130E28D
void __cdecl data::AttachEffect::~AttachEffect(data::AttachEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->effect_templete_id);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::DynamicString::~DynamicString(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1707: range 000000001130E28E-000000001130E2B8
void __cdecl data::AttachEffect::~AttachEffect(data::AttachEffect *const this)
{
  data::AttachEffect::~AttachEffect(this);
  operator delete(this, 0x118uLL);
};

// Line 1712: range 000000001009DA5C-000000001009DA6C
const char *__cdecl data::AttachEffect::getTypeName(const data::AttachEffect *const this)
{
  return "AttachEffect";
};

// Line 1713: range 000000001009DA6E-000000001009DC0A
int32_t __cdecl data::AttachEffect::getHashNum(const data::AttachEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1729: range 00000000111184CA-000000001111850B
void __cdecl data::AttachEffectFactory::AttachEffectFactory(data::AttachEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachEffectFactory = v2;
};

// Line 1737: range 0000000011118814-000000001111892B
void __cdecl data::AttachEffectFirework::AttachEffectFirework(data::AttachEffectFirework *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachEffectFirework + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, v1);
  }
  this->scale = 1.0;
};

// Line 1737: range 0000000011118D6A-0000000011118EA7
void __cdecl data::AttachEffectFirework::AttachEffectFirework(
        data::AttachEffectFirework *const this,
        const data::AttachEffectFirework *a2)
{
  int (**v2)(...); // rdx
  float scale; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachEffectFirework + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->scale);
  }
  scale = a2->scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, &a2->born);
  }
  this->scale = scale;
};

// Line 1746: range 000000001130E16C-000000001130E1DD
void __cdecl data::AttachEffectFirework::~AttachEffectFirework(data::AttachEffectFirework *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachEffectFirework + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::DynamicString::~DynamicString(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1746: range 000000001130E1DE-000000001130E208
void __cdecl data::AttachEffectFirework::~AttachEffectFirework(data::AttachEffectFirework *const this)
{
  data::AttachEffectFirework::~AttachEffectFirework(this);
  operator delete(this, 0xF0uLL);
};

// Line 1751: range 000000001009DC0C-000000001009DC1C
const char *__cdecl data::AttachEffectFirework::getTypeName(const data::AttachEffectFirework *const this)
{
  return "AttachEffectFirework";
};

// Line 1752: range 000000001009DC1E-000000001009DDBA
int32_t __cdecl data::AttachEffectFirework::getHashNum(const data::AttachEffectFirework *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachEffectFirework::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachEffectFirework",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1768: range 0000000011119190-00000000111191D1
void __cdecl data::AttachEffectFireworkFactory::AttachEffectFireworkFactory(
        data::AttachEffectFireworkFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachEffectFireworkFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachEffectFireworkFactory = v2;
};

// Line 1776: range 00000000111194DA-000000001111980B
void __cdecl data::ConfigLightAttach::ConfigLightAttach(data::ConfigLightAttach *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rdx
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigLightAttach::ConfigLightAttach;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  std::allocator<char>::allocator(v1 + 32);
  std::string::basic_string<std::allocator<char>>(
    &this->attach_point,
    "RootNode",
    (const std::allocator<char> *)(v1 + 32));
  std::allocator<char>::~allocator(v1 + 32);
  *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_pos_x >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_pos_x >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_pos_x, "RootNode");
  }
  this->local_pos_x = 0.0;
  v4 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_pos_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->local_pos_y >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->local_pos_y, v4);
  }
  this->local_pos_y = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_pos_z >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_pos_z >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_pos_z, v4);
  }
  this->local_pos_z = 0.0;
  v5 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->local_rot_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->local_rot_x, v5);
  }
  this->local_rot_x = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_rot_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_rot_y, v5);
  }
  this->local_rot_y = 0.0;
  v6 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_z >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->local_rot_z >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->local_rot_z, v6);
  }
  this->local_rot_z = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_w >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_rot_w >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_rot_w, v6);
  }
  this->local_rot_w = 0.0;
  v7 = ((_BYTE)this + 60) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->is_json_loaded, v7, v8);
  this->is_json_loaded = 0;
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1776: range 000000001034BDE6-000000001034C203
void __cdecl data::ConfigLightAttach::ConfigLightAttach(
        data::ConfigLightAttach *const this,
        const data::ConfigLightAttach *a2)
{
  float local_pos_x; // xmm0_4
  float local_pos_y; // xmm0_4
  __int64 v4; // rsi
  float local_pos_z; // xmm0_4
  float local_rot_x; // xmm0_4
  __int64 v7; // rsi
  float local_rot_y; // xmm0_4
  float local_rot_z; // xmm0_4
  __int64 v10; // rsi
  float local_rot_w; // xmm0_4
  __int64 v12; // rsi
  __int64 v13; // rdx
  bool is_json_loaded; // cl
  char v15; // dl
  __int64 v16; // rdx

  std::string::basic_string(this, a2);
  if ( *(_BYTE *)(((unsigned __int64)&a2->local_pos_x >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->local_pos_x >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->local_pos_x);
  }
  local_pos_x = a2->local_pos_x;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_pos_x >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_pos_x >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_pos_x, a2);
  }
  this->local_pos_x = local_pos_x;
  if ( *(_BYTE *)(((unsigned __int64)&a2->local_pos_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->local_pos_y >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->local_pos_y);
  }
  local_pos_y = a2->local_pos_y;
  v4 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_pos_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->local_pos_y >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->local_pos_y, v4);
  }
  this->local_pos_y = local_pos_y;
  if ( *(_BYTE *)(((unsigned __int64)&a2->local_pos_z >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->local_pos_z >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->local_pos_z);
  }
  local_pos_z = a2->local_pos_z;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_pos_z >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_pos_z >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_pos_z, v4);
  }
  this->local_pos_z = local_pos_z;
  if ( *(_BYTE *)(((unsigned __int64)&a2->local_rot_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->local_rot_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->local_rot_x);
  }
  local_rot_x = a2->local_rot_x;
  v7 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->local_rot_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->local_rot_x, v7);
  }
  this->local_rot_x = local_rot_x;
  if ( *(_BYTE *)(((unsigned __int64)&a2->local_rot_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->local_rot_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->local_rot_y);
  }
  local_rot_y = a2->local_rot_y;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_rot_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_rot_y, v7);
  }
  this->local_rot_y = local_rot_y;
  if ( *(_BYTE *)(((unsigned __int64)&a2->local_rot_z >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->local_rot_z >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->local_rot_z);
  }
  local_rot_z = a2->local_rot_z;
  v10 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_z >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->local_rot_z >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->local_rot_z, v10);
  }
  this->local_rot_z = local_rot_z;
  if ( *(_BYTE *)(((unsigned __int64)&a2->local_rot_w >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->local_rot_w >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->local_rot_w);
  }
  local_rot_w = a2->local_rot_w;
  if ( *(_BYTE *)(((unsigned __int64)&this->local_rot_w >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->local_rot_w >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->local_rot_w, v10);
  }
  this->local_rot_w = local_rot_w;
  v12 = ((_BYTE)a2 + 60) & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_load1(&a2->is_json_loaded, v12, v13);
  is_json_loaded = a2->is_json_loaded;
  v15 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v12) = v15 != 0;
  v16 = (v15 != 0) & (unsigned __int8)((((unsigned __int8)this + 60) & 7) >= v15);
  if ( (_BYTE)v16 )
    __asan_report_store1(&this->is_json_loaded, v12, v16);
  this->is_json_loaded = is_json_loaded;
};

// Line 1776: range 000000001034C204-000000001034C21E
void __cdecl data::ConfigLightAttach::~ConfigLightAttach(data::ConfigLightAttach *const this)
{
  std::string::~string(this);
};

// Line 1806: range 000000001111980C-0000000011119B51
void __cdecl data::ConfigLightComponent::ConfigLightComponent(data::ConfigLightComponent *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rdx
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigLightComponent::ConfigLightComponent;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  std::allocator<char>::allocator(v1 + 32);
  std::string::basic_string<std::allocator<char>>(&this->light_type, "Point", (const std::allocator<char> *)(v1 + 32));
  std::allocator<char>::~allocator(v1 + 32);
  *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, "Point");
  }
  this->range = 1.0;
  v4 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->color_r >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->color_r >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->color_r, v4);
  }
  this->color_r = 1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->color_g >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->color_g >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->color_g, v4);
  }
  this->color_g = 1.0;
  v5 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->color_b >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->color_b >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->color_b, v5);
  }
  this->color_b = 1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angle, v5);
  }
  this->angle = 0.0;
  v6 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->intensity >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->intensity >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->intensity, v6);
  }
  this->intensity = 3.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->indirect_mult >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->indirect_mult >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->indirect_mult, v6);
  }
  this->indirect_mult = 0.0;
  v7 = ((_BYTE)this + 60) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->is_json_loaded, v7, v8);
  this->is_json_loaded = 0;
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1806: range 000000001034C586-000000001034C9A3
void __cdecl data::ConfigLightComponent::ConfigLightComponent(
        data::ConfigLightComponent *const this,
        const data::ConfigLightComponent *a2)
{
  float range; // xmm0_4
  float color_r; // xmm0_4
  __int64 v4; // rsi
  float color_g; // xmm0_4
  float color_b; // xmm0_4
  __int64 v7; // rsi
  float angle; // xmm0_4
  float intensity; // xmm0_4
  __int64 v10; // rsi
  float indirect_mult; // xmm0_4
  __int64 v12; // rsi
  __int64 v13; // rdx
  bool is_json_loaded; // cl
  char v15; // dl
  __int64 v16; // rdx

  std::string::basic_string(this, a2);
  if ( *(_BYTE *)(((unsigned __int64)&a2->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->range);
  }
  range = a2->range;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, a2);
  }
  this->range = range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->color_r >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->color_r >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->color_r);
  }
  color_r = a2->color_r;
  v4 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->color_r >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->color_r >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->color_r, v4);
  }
  this->color_r = color_r;
  if ( *(_BYTE *)(((unsigned __int64)&a2->color_g >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->color_g >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->color_g);
  }
  color_g = a2->color_g;
  if ( *(_BYTE *)(((unsigned __int64)&this->color_g >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->color_g >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->color_g, v4);
  }
  this->color_g = color_g;
  if ( *(_BYTE *)(((unsigned __int64)&a2->color_b >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->color_b >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->color_b);
  }
  color_b = a2->color_b;
  v7 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->color_b >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->color_b >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->color_b, v7);
  }
  this->color_b = color_b;
  if ( *(_BYTE *)(((unsigned __int64)&a2->angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->angle);
  }
  angle = a2->angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angle, v7);
  }
  this->angle = angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->intensity >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->intensity >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->intensity);
  }
  intensity = a2->intensity;
  v10 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->intensity >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->intensity >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->intensity, v10);
  }
  this->intensity = intensity;
  if ( *(_BYTE *)(((unsigned __int64)&a2->indirect_mult >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->indirect_mult >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->indirect_mult);
  }
  indirect_mult = a2->indirect_mult;
  if ( *(_BYTE *)(((unsigned __int64)&this->indirect_mult >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->indirect_mult >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->indirect_mult, v10);
  }
  this->indirect_mult = indirect_mult;
  v12 = ((_BYTE)a2 + 60) & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_load1(&a2->is_json_loaded, v12, v13);
  is_json_loaded = a2->is_json_loaded;
  v15 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v12) = v15 != 0;
  v16 = (v15 != 0) & (unsigned __int8)((((unsigned __int8)this + 60) & 7) >= v15);
  if ( (_BYTE)v16 )
    __asan_report_store1(&this->is_json_loaded, v12, v16);
  this->is_json_loaded = is_json_loaded;
};

// Line 1806: range 000000001034C9A4-000000001034C9BE
void __cdecl data::ConfigLightComponent::~ConfigLightComponent(data::ConfigLightComponent *const this)
{
  std::string::~string(this);
};

// Line 1836: range 0000000011119B52-0000000011119BFD
void __cdecl data::AttachLight::AttachLight(data::AttachLight *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachLight + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigLightAttach::ConfigLightAttach(&this->attach);
  data::ConfigLightComponent::ConfigLightComponent(&this->light);
};

// Line 1836: range 000000001111A040-000000001111A112
void __cdecl data::AttachLight::AttachLight(data::AttachLight *const this, const data::AttachLight *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachLight + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigLightAttach::ConfigLightAttach(&this->attach, &a2->attach);
  data::ConfigLightComponent::ConfigLightComponent(&this->light, &a2->light);
};

// Line 1844: range 000000001130E140-000000001130E16A
void __cdecl data::AttachLight::~AttachLight(data::AttachLight *const this)
{
  data::AttachLight::~AttachLight(this);
  operator delete(this, 0x108uLL);
};

// Line 1844: range 000000001130E0CE-000000001130E13F
void __cdecl data::AttachLight::~AttachLight(data::AttachLight *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachLight + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigLightComponent::~ConfigLightComponent(&this->light);
  data::ConfigLightAttach::~ConfigLightAttach(&this->attach);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1849: range 000000001009DDBC-000000001009DDCC
const char *__cdecl data::AttachLight::getTypeName(const data::AttachLight *const this)
{
  return "AttachLight";
};

// Line 1850: range 000000001009DDCE-000000001009DF6A
int32_t __cdecl data::AttachLight::getHashNum(const data::AttachLight *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachLight::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachLight",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1866: range 000000001111A3FC-000000001111A43D
void __cdecl data::AttachLightFactory::AttachLightFactory(data::AttachLightFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachLightFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachLightFactory = v2;
};

// Line 1874: range 000000001111A746-000000001111A8CF
void __cdecl data::AddGlobalValue::AddGlobalValue(data::AddGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  v3 = ((_BYTE)this - 55) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->random_in_range, v3, v4);
  this->random_in_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 1874: range 000000001111AD18-000000001111AF62
void __cdecl data::AddGlobalValue::AddGlobalValue(data::AddGlobalValue *const this, const data::AddGlobalValue *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  bool use_limit_range; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool random_in_range; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_key, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store1(&this->use_limit_range, p_key, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  v6 = ((_BYTE)a2 - 55) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->random_in_range, v6, v7);
  random_in_range = a2->random_in_range;
  v9 = *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this - 55) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->random_in_range, v6, v10);
  this->random_in_range = random_in_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
};

// Line 1886: range 000000001130E0A2-000000001130E0CC
void __cdecl data::AddGlobalValue::~AddGlobalValue(data::AddGlobalValue *const this)
{
  data::AddGlobalValue::~AddGlobalValue(this);
  operator delete(this, 0x110uLL);
};

// Line 1886: range 000000001130E00C-000000001130E0A1
void __cdecl data::AddGlobalValue::~AddGlobalValue(data::AddGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  std::string::~string(&this->key);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1891: range 000000001009DF6C-000000001009DF7C
const char *__cdecl data::AddGlobalValue::getTypeName(const data::AddGlobalValue *const this)
{
  return "AddGlobalValue";
};

// Line 1892: range 000000001009DF7E-000000001009E11A
int32_t __cdecl data::AddGlobalValue::getHashNum(const data::AddGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1908: range 000000001111B24C-000000001111B28D
void __cdecl data::AddGlobalValueFactory::AddGlobalValueFactory(data::AddGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddGlobalValueFactory = v2;
};

// Line 1916: range 000000001111B596-000000001111B71F
void __cdecl data::SetGlobalValue::SetGlobalValue(data::SetGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  v3 = ((_BYTE)this - 55) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->random_in_range, v3, v4);
  this->random_in_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 1916: range 000000001111BB68-000000001111BDB2
void __cdecl data::SetGlobalValue::SetGlobalValue(data::SetGlobalValue *const this, const data::SetGlobalValue *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  bool use_limit_range; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool random_in_range; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_key, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store1(&this->use_limit_range, p_key, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  v6 = ((_BYTE)a2 - 55) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->random_in_range, v6, v7);
  random_in_range = a2->random_in_range;
  v9 = *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this - 55) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->random_in_range, v6, v10);
  this->random_in_range = random_in_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
};

// Line 1928: range 000000001130DF4A-000000001130DFDF
void __cdecl data::SetGlobalValue::~SetGlobalValue(data::SetGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  std::string::~string(&this->key);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1928: range 000000001130DFE0-000000001130E00A
void __cdecl data::SetGlobalValue::~SetGlobalValue(data::SetGlobalValue *const this)
{
  data::SetGlobalValue::~SetGlobalValue(this);
  operator delete(this, 0x110uLL);
};

// Line 1933: range 000000001009E11C-000000001009E12C
const char *__cdecl data::SetGlobalValue::getTypeName(const data::SetGlobalValue *const this)
{
  return "SetGlobalValue";
};

// Line 1934: range 000000001009E12E-000000001009E2CA
int32_t __cdecl data::SetGlobalValue::getHashNum(const data::SetGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1950: range 000000001111C09C-000000001111C0DD
void __cdecl data::SetGlobalValueFactory::SetGlobalValueFactory(data::SetGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGlobalValueFactory = v2;
};

// Line 1958: range 000000001111C3E6-000000001111C56F
void __cdecl data::MultiplyGlobalValue::MultiplyGlobalValue(data::MultiplyGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::MultiplyGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  v3 = ((_BYTE)this - 55) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->random_in_range, v3, v4);
  this->random_in_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 1958: range 000000001111C9B8-000000001111CC02
void __cdecl data::MultiplyGlobalValue::MultiplyGlobalValue(
        data::MultiplyGlobalValue *const this,
        const data::MultiplyGlobalValue *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  bool use_limit_range; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool random_in_range; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MultiplyGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_key, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store1(&this->use_limit_range, p_key, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  v6 = ((_BYTE)a2 - 55) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->random_in_range, v6, v7);
  random_in_range = a2->random_in_range;
  v9 = *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this - 55) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->random_in_range, v6, v10);
  this->random_in_range = random_in_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
};

// Line 1970: range 000000001130DE88-000000001130DF1D
void __cdecl data::MultiplyGlobalValue::~MultiplyGlobalValue(data::MultiplyGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MultiplyGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  std::string::~string(&this->key);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 1970: range 000000001130DF1E-000000001130DF48
void __cdecl data::MultiplyGlobalValue::~MultiplyGlobalValue(data::MultiplyGlobalValue *const this)
{
  data::MultiplyGlobalValue::~MultiplyGlobalValue(this);
  operator delete(this, 0x110uLL);
};

// Line 1975: range 000000001009E2CC-000000001009E2DC
const char *__cdecl data::MultiplyGlobalValue::getTypeName(const data::MultiplyGlobalValue *const this)
{
  return "MultiplyGlobalValue";
};

// Line 1976: range 000000001009E2DE-000000001009E47A
int32_t __cdecl data::MultiplyGlobalValue::getHashNum(const data::MultiplyGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MultiplyGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MultiplyGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1992: range 000000001111CEEC-000000001111CF2D
void __cdecl data::MultiplyGlobalValueFactory::MultiplyGlobalValueFactory(data::MultiplyGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MultiplyGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MultiplyGlobalValueFactory = v2;
};

// Line 2000: range 000000001111D236-000000001111D335
void __cdecl data::CopyGlobalValue::CopyGlobalValue(data::CopyGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::CopyGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->src_target, v1);
  }
  this->src_target = Caster;
  if ( *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->dst_target, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->dst_target = Target;
  std::string::basic_string(&this->src_key);
  std::string::basic_string(&this->dst_key);
};

// Line 2000: range 000000001111D77E-000000001111D95E
void __cdecl data::CopyGlobalValue::CopyGlobalValue(data::CopyGlobalValue *const this, const data::CopyGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting src_target; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::AbilityTargetting dst_target; // ecx
  char v7; // dl
  const data::CopyGlobalValue *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CopyGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->src_target);
  }
  src_target = a2->src_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->src_target, a2);
  }
  this->src_target = src_target;
  v5 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->dst_target >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->dst_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->dst_target);
  }
  dst_target = v8->dst_target;
  v7 = *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->dst_target, v5);
  }
  this->dst_target = dst_target;
  std::string::basic_string(&this->src_key, &v8->src_key);
  std::string::basic_string(&this->dst_key, &v8->dst_key);
};

// Line 2010: range 000000001130DDEA-000000001130DE5B
void __cdecl data::CopyGlobalValue::~CopyGlobalValue(data::CopyGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CopyGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->dst_key);
  std::string::~string(&this->src_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2010: range 000000001130DE5C-000000001130DE86
void __cdecl data::CopyGlobalValue::~CopyGlobalValue(data::CopyGlobalValue *const this)
{
  data::CopyGlobalValue::~CopyGlobalValue(this);
  operator delete(this, 0xD0uLL);
};

// Line 2015: range 000000001009E47C-000000001009E48C
const char *__cdecl data::CopyGlobalValue::getTypeName(const data::CopyGlobalValue *const this)
{
  return "CopyGlobalValue";
};

// Line 2016: range 000000001009E48E-000000001009E62A
int32_t __cdecl data::CopyGlobalValue::getHashNum(const data::CopyGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CopyGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CopyGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2032: range 000000001111DC48-000000001111DC89
void __cdecl data::CopyGlobalValueFactory::CopyGlobalValueFactory(data::CopyGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CopyGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CopyGlobalValueFactory = v2;
};

// Line 2040: range 000000001111DF92-000000001111E21C
void __cdecl data::SetTargetNumToGlobalValue::SetTargetNumToGlobalValue(data::SetTargetNumToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetTargetNumToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->src_target, v1);
  }
  this->src_target = Self_0;
  if ( *(_WORD *)(((unsigned __int64)&this->src_other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->src_predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dst_target, v1);
  }
  this->dst_target = Caster;
  if ( *(_WORD *)(((unsigned __int64)&this->dst_other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->dst_predicates);
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 2040: range 000000001111E66C-000000001111E9C8
void __cdecl data::SetTargetNumToGlobalValue::SetTargetNumToGlobalValue(
        data::SetTargetNumToGlobalValue *const this,
        const data::SetTargetNumToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting src_target; // ecx
  char v4; // al
  data::ConfigAbilityPredicateArray *p_src_predicates; // rsi
  data::AbilityTargetting dst_target; // ecx
  char v7; // al
  std::string *p_key; // rsi
  bool use_limit_range; // cl
  char v10; // al
  const data::SetTargetNumToGlobalValue *v11; // [rsp+0h] [rbp-20h]

  v11 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetTargetNumToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->src_target);
  }
  src_target = a2->src_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->src_target, a2);
  }
  this->src_target = src_target;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->src_other_targets, &v11->src_other_targets);
  p_src_predicates = &v11->src_predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->src_predicates, &v11->src_predicates);
  if ( *(_BYTE *)(((unsigned __int64)&v11->dst_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v11->dst_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v11->dst_target);
  }
  dst_target = v11->dst_target;
  v7 = *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(p_src_predicates) = v7 != 0;
    __asan_report_store4(&this->dst_target, p_src_predicates);
  }
  this->dst_target = dst_target;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->dst_other_targets, &v11->dst_other_targets);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->dst_predicates, &v11->dst_predicates);
  p_key = &v11->key;
  std::string::basic_string(&this->key, &v11->key);
  if ( *(char *)(((unsigned __int64)&v11->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v11->use_limit_range, p_key, &v11->use_limit_range);
  use_limit_range = v11->use_limit_range;
  v10 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(p_key) = v10 != 0;
    __asan_report_store1(&this->use_limit_range, p_key, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &v11->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &v11->min_value);
};

// Line 2056: range 000000001130DDBE-000000001130DDE8
void __cdecl data::SetTargetNumToGlobalValue::~SetTargetNumToGlobalValue(data::SetTargetNumToGlobalValue *const this)
{
  data::SetTargetNumToGlobalValue::~SetTargetNumToGlobalValue(this);
  operator delete(this, 0x150uLL);
};

// Line 2056: range 000000001130DCF2-000000001130DDBD
void __cdecl data::SetTargetNumToGlobalValue::~SetTargetNumToGlobalValue(data::SetTargetNumToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetTargetNumToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  std::string::~string(&this->key);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->dst_predicates);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->dst_other_targets);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->src_predicates);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->src_other_targets);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2061: range 000000001009E62C-000000001009E63C
const char *__cdecl data::SetTargetNumToGlobalValue::getTypeName(const data::SetTargetNumToGlobalValue *const this)
{
  return "SetTargetNumToGlobalValue";
};

// Line 2062: range 000000001009E63E-000000001009E7DA
int32_t __cdecl data::SetTargetNumToGlobalValue::getHashNum(const data::SetTargetNumToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetTargetNumToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetTargetNumToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2078: range 000000001111ECB2-000000001111ECF3
void __cdecl data::SetTargetNumToGlobalValueFactory::SetTargetNumToGlobalValueFactory(
        data::SetTargetNumToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetTargetNumToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetTargetNumToGlobalValueFactory = v2;
};

// Line 2100: range 000000001111F15C-000000001111F1FE
void __cdecl data::GetHealAmountToGlobalValue::GetHealAmountToGlobalValue(data::GetHealAmountToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GetHealAmountToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Add_0;
  std::string::basic_string(&this->key);
};

// Line 2100: range 000000001111F648-000000001111F762
void __cdecl data::GetHealAmountToGlobalValue::GetHealAmountToGlobalValue(
        data::GetHealAmountToGlobalValue *const this,
        const data::GetHealAmountToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::GlobalValueChangeType type; // ecx
  char v4; // al
  const data::GetHealAmountToGlobalValue *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GetHealAmountToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  std::string::basic_string(&this->key, &v5->key);
};

// Line 2108: range 000000001130DC66-000000001130DCC5
void __cdecl data::GetHealAmountToGlobalValue::~GetHealAmountToGlobalValue(
        data::GetHealAmountToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetHealAmountToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2108: range 000000001130DCC6-000000001130DCF0
void __cdecl data::GetHealAmountToGlobalValue::~GetHealAmountToGlobalValue(
        data::GetHealAmountToGlobalValue *const this)
{
  data::GetHealAmountToGlobalValue::~GetHealAmountToGlobalValue(this);
  operator delete(this, 0xB0uLL);
};

// Line 2113: range 000000001009E7DC-000000001009E7EC
const char *__cdecl data::GetHealAmountToGlobalValue::getTypeName(const data::GetHealAmountToGlobalValue *const this)
{
  return "GetHealAmountToGlobalValue";
};

// Line 2114: range 000000001009E7EE-000000001009E98A
int32_t __cdecl data::GetHealAmountToGlobalValue::getHashNum(const data::GetHealAmountToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GetHealAmountToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GetHealAmountToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2130: range 000000001111FA4C-000000001111FA8D
void __cdecl data::GetHealAmountToGlobalValueFactory::GetHealAmountToGlobalValueFactory(
        data::GetHealAmountToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetHealAmountToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GetHealAmountToGlobalValueFactory = v2;
};

// Line 2138: range 000000001111FD96-000000001111FE38
void __cdecl data::GetHPHealedToGlobalValue::GetHPHealedToGlobalValue(data::GetHPHealedToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GetHPHealedToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Add_0;
  std::string::basic_string(&this->key);
};

// Line 2138: range 0000000011120282-000000001112039C
void __cdecl data::GetHPHealedToGlobalValue::GetHPHealedToGlobalValue(
        data::GetHPHealedToGlobalValue *const this,
        const data::GetHPHealedToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::GlobalValueChangeType type; // ecx
  char v4; // al
  const data::GetHPHealedToGlobalValue *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GetHPHealedToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  std::string::basic_string(&this->key, &v5->key);
};

// Line 2146: range 000000001130DBDA-000000001130DC39
void __cdecl data::GetHPHealedToGlobalValue::~GetHPHealedToGlobalValue(data::GetHPHealedToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetHPHealedToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2146: range 000000001130DC3A-000000001130DC64
void __cdecl data::GetHPHealedToGlobalValue::~GetHPHealedToGlobalValue(data::GetHPHealedToGlobalValue *const this)
{
  data::GetHPHealedToGlobalValue::~GetHPHealedToGlobalValue(this);
  operator delete(this, 0xB0uLL);
};

// Line 2151: range 000000001009E98C-000000001009E99C
const char *__cdecl data::GetHPHealedToGlobalValue::getTypeName(const data::GetHPHealedToGlobalValue *const this)
{
  return "GetHPHealedToGlobalValue";
};

// Line 2152: range 000000001009E99E-000000001009EB3A
int32_t __cdecl data::GetHPHealedToGlobalValue::getHashNum(const data::GetHPHealedToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GetHPHealedToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GetHPHealedToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2168: range 0000000011120686-00000000111206C7
void __cdecl data::GetHPHealedToGlobalValueFactory::GetHPHealedToGlobalValueFactory(
        data::GetHPHealedToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetHPHealedToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GetHPHealedToGlobalValueFactory = v2;
};

// Line 2176: range 00000000111209D0-0000000011120AFD
void __cdecl data::SetSameElementCountToGlobalValue::SetSameElementCountToGlobalValue(
        data::SetSameElementCountToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSameElementCountToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->check_same_element >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->check_same_element, v1, &this->check_same_element);
  this->check_same_element = 0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_base_on >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->element_base_on >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->element_base_on, v3);
  }
  this->element_base_on = Self_0;
  std::string::basic_string(&this->global_value_key);
  if ( *(_BYTE *)(((unsigned __int64)&this->team_base_on >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->team_base_on >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->team_base_on, v3);
  }
  this->team_base_on = Team_0;
};

// Line 2176: range 0000000011120F52-000000001112117B
void __cdecl data::SetSameElementCountToGlobalValue::SetSameElementCountToGlobalValue(
        data::SetSameElementCountToGlobalValue *const this,
        const data::SetSameElementCountToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  bool check_same_element; // cl
  char v4; // al
  __int64 v5; // rsi
  data::AbilityTargetting element_base_on; // ecx
  char v7; // dl
  std::string *p_global_value_key; // rsi
  data::AbilityTargetting team_base_on; // ecx
  char v10; // al
  const data::SetSameElementCountToGlobalValue *v11; // [rsp+0h] [rbp-20h]

  v11 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSameElementCountToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->check_same_element >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->check_same_element, a2, &a2->check_same_element);
  check_same_element = a2->check_same_element;
  v4 = *(_BYTE *)(((unsigned __int64)&this->check_same_element >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->check_same_element, a2, &this->check_same_element);
  }
  this->check_same_element = check_same_element;
  v5 = (((_BYTE)v11 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v11->element_base_on >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v11 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v11->element_base_on >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v11->element_base_on);
  }
  element_base_on = v11->element_base_on;
  v7 = *(_BYTE *)(((unsigned __int64)&this->element_base_on >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->element_base_on, v5);
  }
  this->element_base_on = element_base_on;
  p_global_value_key = &v11->global_value_key;
  std::string::basic_string(&this->global_value_key, &v11->global_value_key);
  if ( *(_BYTE *)(((unsigned __int64)&v11->team_base_on >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v11->team_base_on >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v11->team_base_on);
  }
  team_base_on = v11->team_base_on;
  v10 = *(_BYTE *)(((unsigned __int64)&this->team_base_on >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(p_global_value_key) = v10 != 0;
    __asan_report_store4(&this->team_base_on, p_global_value_key);
  }
  this->team_base_on = team_base_on;
};

// Line 2186: range 000000001130DB4E-000000001130DBAD
void __cdecl data::SetSameElementCountToGlobalValue::~SetSameElementCountToGlobalValue(
        data::SetSameElementCountToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSameElementCountToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2186: range 000000001130DBAE-000000001130DBD8
void __cdecl data::SetSameElementCountToGlobalValue::~SetSameElementCountToGlobalValue(
        data::SetSameElementCountToGlobalValue *const this)
{
  data::SetSameElementCountToGlobalValue::~SetSameElementCountToGlobalValue(this);
  operator delete(this, 0xB8uLL);
};

// Line 2191: range 000000001009EB3C-000000001009EB4C
const char *__cdecl data::SetSameElementCountToGlobalValue::getTypeName(
        const data::SetSameElementCountToGlobalValue *const this)
{
  return "SetSameElementCountToGlobalValue";
};

// Line 2192: range 000000001009EB4E-000000001009ECEA
int32_t __cdecl data::SetSameElementCountToGlobalValue::getHashNum(
        const data::SetSameElementCountToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSameElementCountToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSameElementCountToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2208: range 0000000011121464-00000000111214A5
void __cdecl data::SetSameElementCountToGlobalValueFactory::SetSameElementCountToGlobalValueFactory(
        data::SetSameElementCountToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSameElementCountToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSameElementCountToGlobalValueFactory = v2;
};

// Line 2216: range 000000001011DE7A-000000001011DFD8
void __cdecl data::GlobalValuePair::GlobalValuePair(data::GlobalValuePair *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rdx

  std::string::basic_string(this);
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  v2 = ((_BYTE)this + 65) & 7;
  v3 = (*(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store1(&this->random_in_range, v2, v3);
  this->random_in_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v2, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 2216: range 0000000010CFBD0E-0000000010CFBF47
void __cdecl data::GlobalValuePair::GlobalValuePair(data::GlobalValuePair *const this, const data::GlobalValuePair *a2)
{
  data::DynamicFloat *p_value; // rsi
  bool use_limit_range; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool random_in_range; // cl
  char v8; // dl
  __int64 v9; // rdx
  data::DynamicFloat *p_min_value; // rsi
  bool is_json_loaded; // cl
  char v12; // al

  std::string::basic_string(this, a2);
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, p_value);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_value, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v4 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_value) = v4 != 0;
    __asan_report_store1(&this->use_limit_range, p_value, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  v5 = ((_BYTE)a2 + 65) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&a2->random_in_range, v5, v6);
  random_in_range = a2->random_in_range;
  v8 = *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 65) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->random_in_range, v5, v9);
  this->random_in_range = random_in_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  p_min_value = &a2->min_value;
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_min_value, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v12 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v12 < 0 )
  {
    LOBYTE(p_min_value) = v12 != 0;
    __asan_report_store1(&this->is_json_loaded, p_min_value, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 2216: range 00000000104FF228-00000000104FF414
void __cdecl data::GlobalValuePair::GlobalValuePair(data::GlobalValuePair *const this, data::GlobalValuePair *a2)
{
  data::DynamicFloat *p_value; // rsi
  bool use_limit_range; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool random_in_range; // cl
  char v8; // dl
  __int64 v9; // rdx
  data::DynamicFloat *p_min_value; // rsi
  bool is_json_loaded; // cl
  char v12; // al

  std::string::basic_string(this, a2);
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, p_value);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_value, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v4 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_value) = v4 != 0;
    __asan_report_store1(&this->use_limit_range, p_value, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  v5 = ((_BYTE)a2 + 65) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&a2->random_in_range, v5, v6);
  random_in_range = a2->random_in_range;
  v8 = *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 65) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->random_in_range, v5, v9);
  this->random_in_range = random_in_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  p_min_value = &a2->min_value;
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_min_value, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v12 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v12 < 0 )
  {
    LOBYTE(p_min_value) = v12 != 0;
    __asan_report_store1(&this->is_json_loaded, p_min_value, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 2216: range 000000001011DFDA-000000001011E024
void __cdecl data::GlobalValuePair::~GlobalValuePair(data::GlobalValuePair *const this)
{
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  data::DynamicFloat::~DynamicFloat(&this->value);
  std::string::~string(this);
};

// Line 2249: range 00000000111217E6-0000000011121845
void __cdecl data::SetGlobalValueList::SetGlobalValueList(data::SetGlobalValueList *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueList + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::GlobalValuePair>::vector(&this->global_value_list);
};

// Line 2249: range 0000000011121C94-0000000011121D2F
void __cdecl data::SetGlobalValueList::SetGlobalValueList(
        data::SetGlobalValueList *const this,
        const data::SetGlobalValueList *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueList + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::GlobalValuePair>::vector(&this->global_value_list, &a2->global_value_list);
};

// Line 2256: range 000000001130DB22-000000001130DB4C
void __cdecl data::SetGlobalValueList::~SetGlobalValueList(data::SetGlobalValueList *const this)
{
  data::SetGlobalValueList::~SetGlobalValueList(this);
  operator delete(this, 0xA0uLL);
};

// Line 2256: range 000000001130DAC2-000000001130DB21
void __cdecl data::SetGlobalValueList::~SetGlobalValueList(data::SetGlobalValueList *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueList + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::GlobalValuePair>::~vector(&this->global_value_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2261: range 000000001009ECEC-000000001009ECFC
const char *__cdecl data::SetGlobalValueList::getTypeName(const data::SetGlobalValueList *const this)
{
  return "SetGlobalValueList";
};

// Line 2262: range 000000001009ECFE-000000001009EE9A
int32_t __cdecl data::SetGlobalValueList::getHashNum(const data::SetGlobalValueList *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGlobalValueList::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGlobalValueList",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2278: range 0000000011122018-0000000011122059
void __cdecl data::SetGlobalValueListFactory::SetGlobalValueListFactory(data::SetGlobalValueListFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueListFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGlobalValueListFactory = v2;
};

// Line 2286: range 0000000011122362-000000001112245B
void __cdecl data::SetGlobalValueToOverrideMap::SetGlobalValueToOverrideMap(
        data::SetGlobalValueToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->ability_formula >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->ability_formula >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->ability_formula, v1);
  }
  this->ability_formula = None_34;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_from_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_from_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_from_owner, v3, v4);
  this->is_from_owner = 0;
  std::string::basic_string(&this->global_value_key);
  std::string::basic_string(&this->override_map_key);
};

// Line 2286: range 00000000111228A4-0000000011122A7F
void __cdecl data::SetGlobalValueToOverrideMap::SetGlobalValueToOverrideMap(
        data::SetGlobalValueToOverrideMap *const this,
        const data::SetGlobalValueToOverrideMap *a2)
{
  int (**v2)(...); // rdx
  data::AbilityFormula ability_formula; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool is_from_owner; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::SetGlobalValueToOverrideMap *v10; // [rsp+0h] [rbp-20h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->ability_formula >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->ability_formula >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->ability_formula);
  }
  ability_formula = a2->ability_formula;
  v4 = *(_BYTE *)(((unsigned __int64)&this->ability_formula >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->ability_formula, a2);
  }
  this->ability_formula = ability_formula;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->is_from_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->is_from_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->is_from_owner, v5, v6);
  is_from_owner = v10->is_from_owner;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_from_owner >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_from_owner, v5, v9);
  this->is_from_owner = is_from_owner;
  std::string::basic_string(&this->global_value_key, &v10->global_value_key);
  std::string::basic_string(&this->override_map_key, &v10->override_map_key);
};

// Line 2296: range 000000001130DA24-000000001130DA95
void __cdecl data::SetGlobalValueToOverrideMap::~SetGlobalValueToOverrideMap(
        data::SetGlobalValueToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_map_key);
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2296: range 000000001130DA96-000000001130DAC0
void __cdecl data::SetGlobalValueToOverrideMap::~SetGlobalValueToOverrideMap(
        data::SetGlobalValueToOverrideMap *const this)
{
  data::SetGlobalValueToOverrideMap::~SetGlobalValueToOverrideMap(this);
  operator delete(this, 0xD0uLL);
};

// Line 2301: range 000000001009EE9C-000000001009EEAC
const char *__cdecl data::SetGlobalValueToOverrideMap::getTypeName(const data::SetGlobalValueToOverrideMap *const this)
{
  return "SetGlobalValueToOverrideMap";
};

// Line 2302: range 000000001009EEAE-000000001009F04A
int32_t __cdecl data::SetGlobalValueToOverrideMap::getHashNum(const data::SetGlobalValueToOverrideMap *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGlobalValueToOverrideMap::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGlobalValueToOverrideMap",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2318: range 0000000011122D68-0000000011122DA9
void __cdecl data::SetGlobalValueToOverrideMapFactory::SetGlobalValueToOverrideMapFactory(
        data::SetGlobalValueToOverrideMapFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueToOverrideMapFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGlobalValueToOverrideMapFactory = v2;
};

// Line 2342: range 0000000011123212-0000000011123346
void __cdecl data::SetRandomOverrideMapValue::SetRandomOverrideMapValue(data::SetRandomOverrideMapValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetRandomOverrideMapValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->value_range_max >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value_range_max >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value_range_max, v1);
  }
  this->value_range_max = 0.0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->value_range_min >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value_range_min >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value_range_min, v3);
  }
  this->value_range_min = 0.0;
  std::string::basic_string(&this->override_map_key);
  if ( *(_BYTE *)(((unsigned __int64)&this->round_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->round_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->round_type, v3);
  }
  this->round_type = None_41;
};

// Line 2342: range 000000001112379C-00000000111239CA
void __cdecl data::SetRandomOverrideMapValue::SetRandomOverrideMapValue(
        data::SetRandomOverrideMapValue *const this,
        const data::SetRandomOverrideMapValue *a2)
{
  int (**v2)(...); // rdx
  float value_range_max; // xmm0_4
  float value_range_min; // xmm0_4
  std::string *p_override_map_key; // rsi
  data::RoundRandomType round_type; // ecx
  char v7; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetRandomOverrideMapValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value_range_max >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->value_range_max >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->value_range_max);
  }
  value_range_max = a2->value_range_max;
  if ( *(_BYTE *)(((unsigned __int64)&this->value_range_max >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value_range_max >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value_range_max, a2);
  }
  this->value_range_max = value_range_max;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value_range_min >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->value_range_min >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->value_range_min);
  }
  value_range_min = a2->value_range_min;
  if ( *(_BYTE *)(((unsigned __int64)&this->value_range_min >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value_range_min >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value_range_min, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->value_range_min = value_range_min;
  p_override_map_key = &a2->override_map_key;
  std::string::basic_string(&this->override_map_key, &a2->override_map_key);
  if ( *(_BYTE *)(((unsigned __int64)&a2->round_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->round_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->round_type);
  }
  round_type = a2->round_type;
  v7 = *(_BYTE *)(((unsigned __int64)&this->round_type >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(p_override_map_key) = v7 != 0;
    __asan_report_store4(&this->round_type, p_override_map_key);
  }
  this->round_type = round_type;
};

// Line 2352: range 000000001130D9F8-000000001130DA22
void __cdecl data::SetRandomOverrideMapValue::~SetRandomOverrideMapValue(data::SetRandomOverrideMapValue *const this)
{
  data::SetRandomOverrideMapValue::~SetRandomOverrideMapValue(this);
  operator delete(this, 0xB8uLL);
};

// Line 2352: range 000000001130D998-000000001130D9F7
void __cdecl data::SetRandomOverrideMapValue::~SetRandomOverrideMapValue(data::SetRandomOverrideMapValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetRandomOverrideMapValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_map_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2357: range 000000001009F04C-000000001009F05C
const char *__cdecl data::SetRandomOverrideMapValue::getTypeName(const data::SetRandomOverrideMapValue *const this)
{
  return "SetRandomOverrideMapValue";
};

// Line 2358: range 000000001009F05E-000000001009F1FA
int32_t __cdecl data::SetRandomOverrideMapValue::getHashNum(const data::SetRandomOverrideMapValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetRandomOverrideMapValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetRandomOverrideMapValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2374: range 0000000011123CB4-0000000011123CF5
void __cdecl data::SetRandomOverrideMapValueFactory::SetRandomOverrideMapValueFactory(
        data::SetRandomOverrideMapValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetRandomOverrideMapValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetRandomOverrideMapValueFactory = v2;
};

// Line 2382: range 0000000011123FFE-000000001112406F
void __cdecl data::SetOverrideMapValue::SetOverrideMapValue(data::SetOverrideMapValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetOverrideMapValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value);
  std::string::basic_string(&this->override_map_key);
};

// Line 2382: range 00000000111244C2-0000000011124594
void __cdecl data::SetOverrideMapValue::SetOverrideMapValue(
        data::SetOverrideMapValue *const this,
        const data::SetOverrideMapValue *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetOverrideMapValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  std::string::basic_string(&this->override_map_key, &a2->override_map_key);
};

// Line 2390: range 000000001130D8FA-000000001130D96B
void __cdecl data::SetOverrideMapValue::~SetOverrideMapValue(data::SetOverrideMapValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetOverrideMapValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_map_key);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2390: range 000000001130D96C-000000001130D996
void __cdecl data::SetOverrideMapValue::~SetOverrideMapValue(data::SetOverrideMapValue *const this)
{
  data::SetOverrideMapValue::~SetOverrideMapValue(this);
  operator delete(this, 0xC8uLL);
};

// Line 2395: range 000000001009F1FC-000000001009F20C
const char *__cdecl data::SetOverrideMapValue::getTypeName(const data::SetOverrideMapValue *const this)
{
  return "SetOverrideMapValue";
};

// Line 2396: range 000000001009F20E-000000001009F3AA
int32_t __cdecl data::SetOverrideMapValue::getHashNum(const data::SetOverrideMapValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetOverrideMapValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetOverrideMapValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2412: range 000000001112487E-00000000111248BF
void __cdecl data::SetOverrideMapValueFactory::SetOverrideMapValueFactory(data::SetOverrideMapValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetOverrideMapValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetOverrideMapValueFactory = v2;
};

// Line 2420: range 0000000011124BC8-0000000011124C27
void __cdecl data::SetCrystalShieldHpToOverrideMap::SetCrystalShieldHpToOverrideMap(
        data::SetCrystalShieldHpToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetCrystalShieldHpToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->override_map_key);
};

// Line 2420: range 000000001112506A-0000000011125105
void __cdecl data::SetCrystalShieldHpToOverrideMap::SetCrystalShieldHpToOverrideMap(
        data::SetCrystalShieldHpToOverrideMap *const this,
        const data::SetCrystalShieldHpToOverrideMap *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetCrystalShieldHpToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->override_map_key, &a2->override_map_key);
};

// Line 2427: range 000000001130D8CE-000000001130D8F8
void __cdecl data::SetCrystalShieldHpToOverrideMap::~SetCrystalShieldHpToOverrideMap(
        data::SetCrystalShieldHpToOverrideMap *const this)
{
  data::SetCrystalShieldHpToOverrideMap::~SetCrystalShieldHpToOverrideMap(this);
  operator delete(this, 0xA8uLL);
};

// Line 2427: range 000000001130D86E-000000001130D8CD
void __cdecl data::SetCrystalShieldHpToOverrideMap::~SetCrystalShieldHpToOverrideMap(
        data::SetCrystalShieldHpToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCrystalShieldHpToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_map_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2432: range 000000001009F3AC-000000001009F3BC
const char *__cdecl data::SetCrystalShieldHpToOverrideMap::getTypeName(
        const data::SetCrystalShieldHpToOverrideMap *const this)
{
  return "SetCrystalShieldHpToOverrideMap";
};

// Line 2433: range 000000001009F3BE-000000001009F55A
int32_t __cdecl data::SetCrystalShieldHpToOverrideMap::getHashNum(
        const data::SetCrystalShieldHpToOverrideMap *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetCrystalShieldHpToOverrideMap::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetCrystalShieldHpToOverrideMap",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2449: range 00000000111253EE-000000001112542F
void __cdecl data::SetCrystalShieldHpToOverrideMapFactory::SetCrystalShieldHpToOverrideMapFactory(
        data::SetCrystalShieldHpToOverrideMapFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCrystalShieldHpToOverrideMapFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetCrystalShieldHpToOverrideMapFactory = v2;
};

// Line 2474: range 0000000011125898-000000001112593A
void __cdecl data::SetSystemValueToOverrideMap::SetSystemValueToOverrideMap(
        data::SetSystemValueToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSystemValueToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = None_42;
};

// Line 2474: range 0000000011125D84-0000000011125E9E
void __cdecl data::SetSystemValueToOverrideMap::SetSystemValueToOverrideMap(
        data::SetSystemValueToOverrideMap *const this,
        const data::SetSystemValueToOverrideMap *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  data::SystemValuerType type; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSystemValueToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store4(&this->type, p_key);
  }
  this->type = type;
};

// Line 2482: range 000000001130D7E2-000000001130D841
void __cdecl data::SetSystemValueToOverrideMap::~SetSystemValueToOverrideMap(
        data::SetSystemValueToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSystemValueToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2482: range 000000001130D842-000000001130D86C
void __cdecl data::SetSystemValueToOverrideMap::~SetSystemValueToOverrideMap(
        data::SetSystemValueToOverrideMap *const this)
{
  data::SetSystemValueToOverrideMap::~SetSystemValueToOverrideMap(this);
  operator delete(this, 0xB0uLL);
};

// Line 2487: range 000000001009F55C-000000001009F56C
const char *__cdecl data::SetSystemValueToOverrideMap::getTypeName(const data::SetSystemValueToOverrideMap *const this)
{
  return "SetSystemValueToOverrideMap";
};

// Line 2488: range 000000001009F56E-000000001009F70A
int32_t __cdecl data::SetSystemValueToOverrideMap::getHashNum(const data::SetSystemValueToOverrideMap *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSystemValueToOverrideMap::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSystemValueToOverrideMap",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2504: range 0000000011126188-00000000111261C9
void __cdecl data::SetSystemValueToOverrideMapFactory::SetSystemValueToOverrideMapFactory(
        data::SetSystemValueToOverrideMapFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSystemValueToOverrideMapFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSystemValueToOverrideMapFactory = v2;
};

// Line 2512: range 00000000111264D2-0000000011126571
void __cdecl data::SetGlobalValueByTargetDistance::SetGlobalValueByTargetDistance(
        data::SetGlobalValueByTargetDistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueByTargetDistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->is_xz >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_xz, v1, &this->is_xz);
  this->is_xz = 0;
};

// Line 2512: range 00000000111269BA-0000000011126AD5
void __cdecl data::SetGlobalValueByTargetDistance::SetGlobalValueByTargetDistance(
        data::SetGlobalValueByTargetDistance *const this,
        const data::SetGlobalValueByTargetDistance *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  bool is_xz; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueByTargetDistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(char *)(((unsigned __int64)&a2->is_xz >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_xz, p_key, &a2->is_xz);
  is_xz = a2->is_xz;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_xz >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store1(&this->is_xz, p_key, &this->is_xz);
  }
  this->is_xz = is_xz;
};

// Line 2520: range 000000001130D756-000000001130D7B5
void __cdecl data::SetGlobalValueByTargetDistance::~SetGlobalValueByTargetDistance(
        data::SetGlobalValueByTargetDistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueByTargetDistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2520: range 000000001130D7B6-000000001130D7E0
void __cdecl data::SetGlobalValueByTargetDistance::~SetGlobalValueByTargetDistance(
        data::SetGlobalValueByTargetDistance *const this)
{
  data::SetGlobalValueByTargetDistance::~SetGlobalValueByTargetDistance(this);
  operator delete(this, 0xB0uLL);
};

// Line 2525: range 000000001009F70C-000000001009F71C
const char *__cdecl data::SetGlobalValueByTargetDistance::getTypeName(
        const data::SetGlobalValueByTargetDistance *const this)
{
  return "SetGlobalValueByTargetDistance";
};

// Line 2526: range 000000001009F71E-000000001009F8BA
int32_t __cdecl data::SetGlobalValueByTargetDistance::getHashNum(
        const data::SetGlobalValueByTargetDistance *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGlobalValueByTargetDistance::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGlobalValueByTargetDistance",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2542: range 0000000011126DBE-0000000011126DFF
void __cdecl data::SetGlobalValueByTargetDistanceFactory::SetGlobalValueByTargetDistanceFactory(
        data::SetGlobalValueByTargetDistanceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalValueByTargetDistanceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGlobalValueByTargetDistanceFactory = v2;
};

// Line 2550: range 0000000011127108-0000000011127167
void __cdecl data::ClearGlobalValue::ClearGlobalValue(data::ClearGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
};

// Line 2550: range 00000000111275AA-0000000011127645
void __cdecl data::ClearGlobalValue::ClearGlobalValue(
        data::ClearGlobalValue *const this,
        const data::ClearGlobalValue *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key, &a2->key);
};

// Line 2557: range 000000001130D72A-000000001130D754
void __cdecl data::ClearGlobalValue::~ClearGlobalValue(data::ClearGlobalValue *const this)
{
  data::ClearGlobalValue::~ClearGlobalValue(this);
  operator delete(this, 0xA8uLL);
};

// Line 2557: range 000000001130D6CA-000000001130D729
void __cdecl data::ClearGlobalValue::~ClearGlobalValue(data::ClearGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2562: range 000000001009F8BC-000000001009F8CC
const char *__cdecl data::ClearGlobalValue::getTypeName(const data::ClearGlobalValue *const this)
{
  return "ClearGlobalValue";
};

// Line 2563: range 000000001009F8CE-000000001009FA6A
int32_t __cdecl data::ClearGlobalValue::getHashNum(const data::ClearGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClearGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClearGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2579: range 000000001112792E-000000001112796F
void __cdecl data::ClearGlobalValueFactory::ClearGlobalValueFactory(data::ClearGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClearGlobalValueFactory = v2;
};

// Line 2587: range 0000000011127C78-0000000011127CD7
void __cdecl data::SumTargetWeightToSelfGlobalValue::SumTargetWeightToSelfGlobalValue(
        data::SumTargetWeightToSelfGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SumTargetWeightToSelfGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
};

// Line 2587: range 000000001112811A-00000000111281B5
void __cdecl data::SumTargetWeightToSelfGlobalValue::SumTargetWeightToSelfGlobalValue(
        data::SumTargetWeightToSelfGlobalValue *const this,
        const data::SumTargetWeightToSelfGlobalValue *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SumTargetWeightToSelfGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key, &a2->key);
};

// Line 2594: range 000000001130D63E-000000001130D69D
void __cdecl data::SumTargetWeightToSelfGlobalValue::~SumTargetWeightToSelfGlobalValue(
        data::SumTargetWeightToSelfGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SumTargetWeightToSelfGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2594: range 000000001130D69E-000000001130D6C8
void __cdecl data::SumTargetWeightToSelfGlobalValue::~SumTargetWeightToSelfGlobalValue(
        data::SumTargetWeightToSelfGlobalValue *const this)
{
  data::SumTargetWeightToSelfGlobalValue::~SumTargetWeightToSelfGlobalValue(this);
  operator delete(this, 0xA8uLL);
};

// Line 2599: range 000000001009FA6C-000000001009FA7C
const char *__cdecl data::SumTargetWeightToSelfGlobalValue::getTypeName(
        const data::SumTargetWeightToSelfGlobalValue *const this)
{
  return "SumTargetWeightToSelfGlobalValue";
};

// Line 2600: range 000000001009FA7E-000000001009FC1A
int32_t __cdecl data::SumTargetWeightToSelfGlobalValue::getHashNum(
        const data::SumTargetWeightToSelfGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SumTargetWeightToSelfGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SumTargetWeightToSelfGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2616: range 000000001112849E-00000000111284DF
void __cdecl data::SumTargetWeightToSelfGlobalValueFactory::SumTargetWeightToSelfGlobalValueFactory(
        data::SumTargetWeightToSelfGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SumTargetWeightToSelfGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SumTargetWeightToSelfGlobalValueFactory = v2;
};

// Line 2624: range 00000000111287E8-00000000111288F6
void __cdecl data::SetGlobalPos::SetGlobalPos(data::SetGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(char *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_target, v1, &this->set_target);
  this->set_target = 1;
};

// Line 2624: range 0000000011128D46-0000000011128E81
void __cdecl data::SetGlobalPos::SetGlobalPos(data::SetGlobalPos *const this, const data::SetGlobalPos *a2)
{
  int (**v2)(...); // rdx
  data::ConfigBornTypePtr *p_born; // rsi
  bool set_target; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key, &a2->key);
  p_born = &a2->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(char *)(((unsigned __int64)&a2->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_target, p_born, &a2->set_target);
  set_target = a2->set_target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_born) = v5 != 0;
    __asan_report_store1(&this->set_target, p_born, &this->set_target);
  }
  this->set_target = set_target;
};

// Line 2633: range 000000001130D612-000000001130D63C
void __cdecl data::SetGlobalPos::~SetGlobalPos(data::SetGlobalPos *const this)
{
  data::SetGlobalPos::~SetGlobalPos(this);
  operator delete(this, 0xC0uLL);
};

// Line 2633: range 000000001130D5A0-000000001130D611
void __cdecl data::SetGlobalPos::~SetGlobalPos(data::SetGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2638: range 000000001009FC1C-000000001009FC2C
const char *__cdecl data::SetGlobalPos::getTypeName(const data::SetGlobalPos *const this)
{
  return "SetGlobalPos";
};

// Line 2639: range 000000001009FC2E-000000001009FDCA
int32_t __cdecl data::SetGlobalPos::getHashNum(const data::SetGlobalPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGlobalPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGlobalPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2655: range 000000001112916A-00000000111291AB
void __cdecl data::SetGlobalPosFactory::SetGlobalPosFactory(data::SetGlobalPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGlobalPosFactory = v2;
};

// Line 2663: range 00000000111294B4-00000000111295C2
void __cdecl data::AddGlobalPos::AddGlobalPos(data::AddGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(char *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_target, v1, &this->set_target);
  this->set_target = 1;
};

// Line 2663: range 0000000011129A12-0000000011129B4D
void __cdecl data::AddGlobalPos::AddGlobalPos(data::AddGlobalPos *const this, const data::AddGlobalPos *a2)
{
  int (**v2)(...); // rdx
  data::ConfigBornTypePtr *p_born; // rsi
  bool set_target; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key, &a2->key);
  p_born = &a2->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(char *)(((unsigned __int64)&a2->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_target, p_born, &a2->set_target);
  set_target = a2->set_target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_born) = v5 != 0;
    __asan_report_store1(&this->set_target, p_born, &this->set_target);
  }
  this->set_target = set_target;
};

// Line 2672: range 000000001130D502-000000001130D573
void __cdecl data::AddGlobalPos::~AddGlobalPos(data::AddGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2672: range 000000001130D574-000000001130D59E
void __cdecl data::AddGlobalPos::~AddGlobalPos(data::AddGlobalPos *const this)
{
  data::AddGlobalPos::~AddGlobalPos(this);
  operator delete(this, 0xC0uLL);
};

// Line 2677: range 000000001009FDCC-000000001009FDDC
const char *__cdecl data::AddGlobalPos::getTypeName(const data::AddGlobalPos *const this)
{
  return "AddGlobalPos";
};

// Line 2678: range 000000001009FDDE-000000001009FF7A
int32_t __cdecl data::AddGlobalPos::getHashNum(const data::AddGlobalPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddGlobalPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddGlobalPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2694: range 0000000011129E36-0000000011129E77
void __cdecl data::AddGlobalPosFactory::AddGlobalPosFactory(data::AddGlobalPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddGlobalPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddGlobalPosFactory = v2;
};

// Line 2702: range 000000001112A180-000000001112A21F
void __cdecl data::ClearGlobalPos::ClearGlobalPos(data::ClearGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_target, v1, &this->set_target);
  this->set_target = 1;
};

// Line 2702: range 000000001112A668-000000001112A783
void __cdecl data::ClearGlobalPos::ClearGlobalPos(data::ClearGlobalPos *const this, const data::ClearGlobalPos *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  bool set_target; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(char *)(((unsigned __int64)&a2->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_target, p_key, &a2->set_target);
  set_target = a2->set_target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store1(&this->set_target, p_key, &this->set_target);
  }
  this->set_target = set_target;
};

// Line 2703: range 000000001110D6D0-000000001110D72F
void __cdecl data::AvatarCameraParam::AvatarCameraParam(data::AvatarCameraParam *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarCameraParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigStateCameraParam::ConfigStateCameraParam(&this->camera_param);
};

// Line 2710: range 000000001130D476-000000001130D4D5
void __cdecl data::ClearGlobalPos::~ClearGlobalPos(data::ClearGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2710: range 000000001130D4D6-000000001130D500
void __cdecl data::ClearGlobalPos::~ClearGlobalPos(data::ClearGlobalPos *const this)
{
  data::ClearGlobalPos::~ClearGlobalPos(this);
  operator delete(this, 0xB0uLL);
};

// Line 2715: range 000000001009FF7C-000000001009FF8C
const char *__cdecl data::ClearGlobalPos::getTypeName(const data::ClearGlobalPos *const this)
{
  return "ClearGlobalPos";
};

// Line 2716: range 000000001009FF8E-00000000100A012A
int32_t __cdecl data::ClearGlobalPos::getHashNum(const data::ClearGlobalPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClearGlobalPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClearGlobalPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2732: range 000000001112AA6C-000000001112AAAD
void __cdecl data::ClearGlobalPosFactory::ClearGlobalPosFactory(data::ClearGlobalPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearGlobalPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClearGlobalPosFactory = v2;
};

// Line 2740: range 000000001112ADB6-000000001112AEC4
void __cdecl data::SetGlobalDir::SetGlobalDir(data::SetGlobalDir *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalDir + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(char *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_target, v1, &this->set_target);
  this->set_target = 1;
};

// Line 2740: range 000000001112B314-000000001112B44F
void __cdecl data::SetGlobalDir::SetGlobalDir(data::SetGlobalDir *const this, const data::SetGlobalDir *a2)
{
  int (**v2)(...); // rdx
  data::ConfigBornTypePtr *p_born; // rsi
  bool set_target; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGlobalDir + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key, &a2->key);
  p_born = &a2->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(char *)(((unsigned __int64)&a2->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_target, p_born, &a2->set_target);
  set_target = a2->set_target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_born) = v5 != 0;
    __asan_report_store1(&this->set_target, p_born, &this->set_target);
  }
  this->set_target = set_target;
};

// Line 2749: range 000000001130D44A-000000001130D474
void __cdecl data::SetGlobalDir::~SetGlobalDir(data::SetGlobalDir *const this)
{
  data::SetGlobalDir::~SetGlobalDir(this);
  operator delete(this, 0xC0uLL);
};

// Line 2749: range 000000001130D3D8-000000001130D449
void __cdecl data::SetGlobalDir::~SetGlobalDir(data::SetGlobalDir *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalDir + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2754: range 00000000100A012C-00000000100A013C
const char *__cdecl data::SetGlobalDir::getTypeName(const data::SetGlobalDir *const this)
{
  return "SetGlobalDir";
};

// Line 2755: range 00000000100A013E-00000000100A02DA
int32_t __cdecl data::SetGlobalDir::getHashNum(const data::SetGlobalDir *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGlobalDir::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGlobalDir",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2771: range 000000001112B738-000000001112B779
void __cdecl data::SetGlobalDirFactory::SetGlobalDirFactory(data::SetGlobalDirFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGlobalDirFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGlobalDirFactory = v2;
};

// Line 2779: range 000000001112BA82-000000001112BB6F
void __cdecl data::PushPos::PushPos(data::PushPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::PushPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->pos_type >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->save_to >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->save_to >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->save_to, v1);
  }
  this->save_to = Caster;
};

// Line 2779: range 000000001112BFBE-000000001112C0B5
void __cdecl data::PushPos::PushPos(data::PushPos *const this, const data::PushPos *a2)
{
  int (**v2)(...); // rdx
  data::ConfigBornTypePtr *p_pos_type; // rsi
  data::AbilityTargetting save_to; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PushPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_pos_type = &a2->pos_type;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->pos_type, &a2->pos_type);
  if ( *(_BYTE *)(((unsigned __int64)&a2->save_to >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->save_to >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->save_to);
  }
  save_to = a2->save_to;
  v5 = *(_BYTE *)(((unsigned __int64)&this->save_to >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_pos_type) = v5 != 0;
    __asan_report_store4(&this->save_to, p_pos_type);
  }
  this->save_to = save_to;
};

// Line 2787: range 000000001130D34C-000000001130D3AB
void __cdecl data::PushPos::~PushPos(data::PushPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PushPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->pos_type);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2787: range 000000001130D3AC-000000001130D3D6
void __cdecl data::PushPos::~PushPos(data::PushPos *const this)
{
  data::PushPos::~PushPos(this);
  operator delete(this, 0xA0uLL);
};

// Line 2792: range 00000000100A02DC-00000000100A02EC
const char *__cdecl data::PushPos::getTypeName(const data::PushPos *const this)
{
  return "PushPos";
};

// Line 2793: range 00000000100A02EE-00000000100A048A
int32_t __cdecl data::PushPos::getHashNum(const data::PushPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PushPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PushPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2809: range 000000001112C39E-000000001112C3DF
void __cdecl data::PushPosFactory::PushPosFactory(data::PushPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PushPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PushPosFactory = v2;
};

// Line 2817: range 000000001112C6E8-000000001112C735
void __cdecl data::ClearPos::ClearPos(data::ClearPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ClearPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 2817: range 000000001112CB84-000000001112CBDC
void __cdecl data::ClearPos::ClearPos(data::ClearPos *const this, const data::ClearPos *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClearPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 2823: range 000000001130D320-000000001130D34A
void __cdecl data::ClearPos::~ClearPos(data::ClearPos *const this)
{
  data::ClearPos::~ClearPos(this);
  operator delete(this, 0x88uLL);
};

// Line 2823: range 000000001130D2D2-000000001130D31F
void __cdecl data::ClearPos::~ClearPos(data::ClearPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2828: range 00000000100A048C-00000000100A049C
const char *__cdecl data::ClearPos::getTypeName(const data::ClearPos *const this)
{
  return "ClearPos";
};

// Line 2829: range 00000000100A049E-00000000100A063A
int32_t __cdecl data::ClearPos::getHashNum(const data::ClearPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClearPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClearPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2845: range 000000001112CEC6-000000001112CF07
void __cdecl data::ClearPosFactory::ClearPosFactory(data::ClearPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClearPosFactory = v2;
};

// Line 2866: range 000000001112D370-000000001112D412
void __cdecl data::GetPos::GetPos(data::GetPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GetPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(_BYTE *)(((unsigned __int64)&this->pos_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->pos_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->pos_type, v1);
  }
  this->pos_type = Center_0;
};

// Line 2866: range 000000001112D85C-000000001112D976
void __cdecl data::GetPos::GetPos(data::GetPos *const this, const data::GetPos *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  data::GetPosType pos_type; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GetPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(_BYTE *)(((unsigned __int64)&a2->pos_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->pos_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->pos_type);
  }
  pos_type = a2->pos_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->pos_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store4(&this->pos_type, p_key);
  }
  this->pos_type = pos_type;
};

// Line 2874: range 000000001130D246-000000001130D2A5
void __cdecl data::GetPos::~GetPos(data::GetPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2874: range 000000001130D2A6-000000001130D2D0
void __cdecl data::GetPos::~GetPos(data::GetPos *const this)
{
  data::GetPos::~GetPos(this);
  operator delete(this, 0xB0uLL);
};

// Line 2879: range 00000000100A063C-00000000100A064C
const char *__cdecl data::GetPos::getTypeName(const data::GetPos *const this)
{
  return "GetPos";
};

// Line 2880: range 00000000100A064E-00000000100A07EA
int32_t __cdecl data::GetPos::getHashNum(const data::GetPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GetPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GetPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2896: range 000000001112DC60-000000001112DCA1
void __cdecl data::GetPosFactory::GetPosFactory(data::GetPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GetPosFactory = v2;
};

// Line 2918: range 000000001112E10A-000000001112E220
void __cdecl data::DamageByAttackValue::DamageByAttackValue(data::DamageByAttackValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DamageByAttackValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->attacker >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attacker >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attacker, v1);
  }
  this->attacker = Caster_1;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::ConfigAttackInfo::ConfigAttackInfo(&this->attack_info);
};

// Line 2918: range 000000001112E664-000000001112E7B0
void __cdecl data::DamageByAttackValue::DamageByAttackValue(
        data::DamageByAttackValue *const this,
        const data::DamageByAttackValue *a2)
{
  int (**v2)(...); // rdx
  data::DamageAttacker attacker; // ecx
  char v4; // al
  const data::DamageByAttackValue *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DamageByAttackValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->attacker >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->attacker >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->attacker);
  }
  attacker = a2->attacker;
  v4 = *(_BYTE *)(((unsigned __int64)&this->attacker >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->attacker, a2);
  }
  this->attacker = attacker;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v5->born);
  data::ConfigAttackInfo::ConfigAttackInfo(&this->attack_info, &v5->attack_info);
};

// Line 2927: range 000000001130D21A-000000001130D244
void __cdecl data::DamageByAttackValue::~DamageByAttackValue(data::DamageByAttackValue *const this)
{
  data::DamageByAttackValue::~DamageByAttackValue(this);
  operator delete(this, 0x450uLL);
};

// Line 2927: range 000000001130D1A8-000000001130D219
void __cdecl data::DamageByAttackValue::~DamageByAttackValue(data::DamageByAttackValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DamageByAttackValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAttackInfo::~ConfigAttackInfo(&this->attack_info);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 2932: range 00000000100A07EC-00000000100A07FC
const char *__cdecl data::DamageByAttackValue::getTypeName(const data::DamageByAttackValue *const this)
{
  return "DamageByAttackValue";
};

// Line 2933: range 00000000100A07FE-00000000100A099A
int32_t __cdecl data::DamageByAttackValue::getHashNum(const data::DamageByAttackValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DamageByAttackValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DamageByAttackValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2949: range 000000001112EA9A-000000001112EADB
void __cdecl data::DamageByAttackValueFactory::DamageByAttackValueFactory(data::DamageByAttackValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DamageByAttackValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DamageByAttackValueFactory = v2;
};

// Line 2957: range 000000001112EE5E-000000001112EEE1
void __cdecl data::Predicated::Predicated(data::Predicated *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::BaseUtilityAction::BaseUtilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::Predicated + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->target_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions);
};

// Line 2957: range 000000001112F32A-000000001112F433
void __cdecl data::Predicated::Predicated(data::Predicated *const this, const data::Predicated *a2)
{
  int (**v2)(...); // rdx

  data::BaseUtilityAction::BaseUtilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::Predicated + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->target_predicates, &a2->target_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions, &a2->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, &a2->fail_actions);
};

// Line 2966: range 000000001130D17C-000000001130D1A6
void __cdecl data::Predicated::~Predicated(data::Predicated *const this)
{
  data::Predicated::~Predicated(this);
  operator delete(this, 0xD0uLL);
};

// Line 2966: range 000000001130D0F8-000000001130D17B
void __cdecl data::Predicated::~Predicated(data::Predicated *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::Predicated + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->target_predicates);
  data::BaseUtilityAction::~BaseUtilityAction(this);
};

// Line 2971: range 00000000100A099C-00000000100A09AC
const char *__cdecl data::Predicated::getTypeName(const data::Predicated *const this)
{
  return "Predicated";
};

// Line 2972: range 00000000100A09AE-00000000100A0B4A
int32_t __cdecl data::Predicated::getHashNum(const data::Predicated *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::Predicated::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "Predicated",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2988: range 000000001112F71C-000000001112F75D
void __cdecl data::PredicatedFactory::PredicatedFactory(data::PredicatedFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PredicatedFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PredicatedFactory = v2;
};

// Line 2996: range 000000001112FA66-000000001112FB8C
void __cdecl data::HealSP::HealSP(data::HealSP *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::HealSP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->amount);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_max_spratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_max_spratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_current_combo_ratio);
  if ( *(char *)(((unsigned __int64)&this->mute_heal_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->mute_heal_effect, v1, &this->mute_heal_effect);
  this->mute_heal_effect = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->heal_ratio, (((_BYTE)this + 12) & 7u) + 3);
  }
  this->heal_ratio = 1.0;
};

// Line 2996: range 000000001112FFD6-0000000011130228
void __cdecl data::HealSP::HealSP(data::HealSP *const this, const data::HealSP *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_amount_by_current_combo_ratio; // rsi
  bool mute_heal_effect; // cl
  char v5; // al
  float heal_ratio; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HealSP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->amount, &a2->amount);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_max_spratio, &a2->amount_by_caster_max_spratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_max_spratio, &a2->amount_by_target_max_spratio);
  p_amount_by_current_combo_ratio = &a2->amount_by_current_combo_ratio;
  data::DynamicFloat::DynamicFloat(&this->amount_by_current_combo_ratio, &a2->amount_by_current_combo_ratio);
  if ( *(char *)(((unsigned __int64)&a2->mute_heal_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->mute_heal_effect, p_amount_by_current_combo_ratio, &a2->mute_heal_effect);
  mute_heal_effect = a2->mute_heal_effect;
  v5 = *(_BYTE *)(((unsigned __int64)&this->mute_heal_effect >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_amount_by_current_combo_ratio) = v5 != 0;
    __asan_report_store1(&this->mute_heal_effect, p_amount_by_current_combo_ratio, &this->mute_heal_effect);
  }
  this->mute_heal_effect = mute_heal_effect;
  if ( *(_BYTE *)(((unsigned __int64)&a2->heal_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->heal_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->heal_ratio);
  }
  heal_ratio = a2->heal_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->heal_ratio, (((_BYTE)this + 12) & 7u) + 3);
  }
  this->heal_ratio = heal_ratio;
};

// Line 3008: range 000000001130D036-000000001130D0CB
void __cdecl data::HealSP::~HealSP(data::HealSP *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HealSP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->amount_by_current_combo_ratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_target_max_spratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_caster_max_spratio);
  data::DynamicFloat::~DynamicFloat(&this->amount);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3008: range 000000001130D0CC-000000001130D0F6
void __cdecl data::HealSP::~HealSP(data::HealSP *const this)
{
  data::HealSP::~HealSP(this);
  operator delete(this, 0x110uLL);
};

// Line 3013: range 00000000100A0B4C-00000000100A0B5C
const char *__cdecl data::HealSP::getTypeName(const data::HealSP *const this)
{
  return "HealSP";
};

// Line 3014: range 00000000100A0B5E-00000000100A0CFA
int32_t __cdecl data::HealSP::getHashNum(const data::HealSP *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HealSP::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HealSP",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3030: range 0000000011130512-0000000011130553
void __cdecl data::HealSPFactory::HealSPFactory(data::HealSPFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HealSPFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HealSPFactory = v2;
};

// Line 3038: range 000000001113085C-00000000111309D4
void __cdecl data::HealHP::HealHP(data::HealHP *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::HealHP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->amount);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_current_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_attack_ratio);
  if ( *(char *)(((unsigned __int64)&this->mute_heal_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->mute_heal_effect, v1, &this->mute_heal_effect);
  this->mute_heal_effect = 0;
  v3 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->heal_ratio, v3);
  }
  this->heal_ratio = 1.0;
  if ( *(char *)(((unsigned __int64)&this->ignore_ability_property >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ignore_ability_property, v3, &this->ignore_ability_property);
  this->ignore_ability_property = 0;
};

// Line 3038: range 0000000011130E26-000000001113112F
void __cdecl data::HealHP::HealHP(data::HealHP *const this, const data::HealHP *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_amount_by_caster_attack_ratio; // rsi
  bool mute_heal_effect; // cl
  char v5; // al
  float heal_ratio; // xmm0_4
  __int64 v7; // rsi
  bool ignore_ability_property; // cl
  char v9; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HealHP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->amount, &a2->amount);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_max_hpratio, &a2->amount_by_caster_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_max_hpratio, &a2->amount_by_target_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_current_hpratio, &a2->amount_by_target_current_hpratio);
  p_amount_by_caster_attack_ratio = &a2->amount_by_caster_attack_ratio;
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_attack_ratio, &a2->amount_by_caster_attack_ratio);
  if ( *(char *)(((unsigned __int64)&a2->mute_heal_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->mute_heal_effect, p_amount_by_caster_attack_ratio, &a2->mute_heal_effect);
  mute_heal_effect = a2->mute_heal_effect;
  v5 = *(_BYTE *)(((unsigned __int64)&this->mute_heal_effect >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_amount_by_caster_attack_ratio) = v5 != 0;
    __asan_report_store1(&this->mute_heal_effect, p_amount_by_caster_attack_ratio, &this->mute_heal_effect);
  }
  this->mute_heal_effect = mute_heal_effect;
  if ( *(_BYTE *)(((unsigned __int64)&a2->heal_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->heal_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->heal_ratio);
  }
  heal_ratio = a2->heal_ratio;
  v7 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->heal_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->heal_ratio, v7);
  }
  this->heal_ratio = heal_ratio;
  if ( *(char *)(((unsigned __int64)&a2->ignore_ability_property >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ignore_ability_property, v7, &a2->ignore_ability_property);
  ignore_ability_property = a2->ignore_ability_property;
  v9 = *(_BYTE *)(((unsigned __int64)&this->ignore_ability_property >> 3) + 0x7FFF8000);
  if ( v9 < 0 )
  {
    LOBYTE(v7) = v9 != 0;
    __asan_report_store1(&this->ignore_ability_property, v7, &this->ignore_ability_property);
  }
  this->ignore_ability_property = ignore_ability_property;
};

// Line 3052: range 00000000111325A8-00000000111325D2
void __cdecl data::HealHP::~HealHP(data::HealHP *const this)
{
  data::HealHP::~HealHP(this);
  operator delete(this, 0x138uLL);
};

// Line 3052: range 0000000011132500-00000000111325A7
void __cdecl data::HealHP::~HealHP(data::HealHP *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HealHP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->amount_by_caster_attack_ratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_target_current_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_target_max_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_caster_max_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3057: range 00000000100A0CFC-00000000100A0D0C
const char *__cdecl data::HealHP::getTypeName(const data::HealHP *const this)
{
  return "HealHP";
};

// Line 3058: range 00000000100A0D0E-00000000100A0EAA
int32_t __cdecl data::HealHP::getHashNum(const data::HealHP *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HealHP::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HealHP",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3077: range 0000000011131418-0000000011131625
void __cdecl data::LoseHP::LoseHP(data::LoseHP *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::LoseHP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->amount);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_current_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_attack_ratio);
  data::DynamicFloat::DynamicFloat(&this->limbo_by_target_max_hpratio);
  if ( *(char *)(((unsigned __int64)&this->lethal >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->lethal, v1, &this->lethal);
  this->lethal = 1;
  v3 = ((_BYTE)this + 73) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->enable_invincible >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->enable_invincible >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->enable_invincible, v3, v4);
  this->enable_invincible = 0;
  v5 = ((_BYTE)this + 74) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->enable_lock_hp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->enable_lock_hp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->enable_lock_hp, v5, v6);
  this->enable_lock_hp = 0;
  v7 = ((_BYTE)this + 75) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->disable_when_loading >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->disable_when_loading >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->disable_when_loading, v7, v8);
  this->disable_when_loading = 0;
  v9 = ((_BYTE)this + 76) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&this->use_meta >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&this->use_meta >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->use_meta, v9, v10);
  this->use_meta = 0;
};

// Line 3077: range 0000000011131A74-0000000011131ECD
void __cdecl data::LoseHP::LoseHP(data::LoseHP *const this, const data::LoseHP *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_limbo_by_target_max_hpratio; // rsi
  bool lethal; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool enable_invincible; // cl
  char v9; // dl
  __int64 v10; // rdx
  __int64 v11; // rsi
  __int64 v12; // rdx
  bool enable_lock_hp; // cl
  char v14; // dl
  __int64 v15; // rdx
  __int64 v16; // rsi
  __int64 v17; // rdx
  bool disable_when_loading; // cl
  char v19; // dl
  __int64 v20; // rdx
  __int64 v21; // rsi
  __int64 v22; // rdx
  bool use_meta; // cl
  char v24; // dl
  __int64 v25; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::LoseHP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->amount, &a2->amount);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_max_hpratio, &a2->amount_by_caster_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_max_hpratio, &a2->amount_by_target_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_target_current_hpratio, &a2->amount_by_target_current_hpratio);
  data::DynamicFloat::DynamicFloat(&this->amount_by_caster_attack_ratio, &a2->amount_by_caster_attack_ratio);
  p_limbo_by_target_max_hpratio = &a2->limbo_by_target_max_hpratio;
  data::DynamicFloat::DynamicFloat(&this->limbo_by_target_max_hpratio, &a2->limbo_by_target_max_hpratio);
  if ( *(char *)(((unsigned __int64)&a2->lethal >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->lethal, p_limbo_by_target_max_hpratio, &a2->lethal);
  lethal = a2->lethal;
  v5 = *(_BYTE *)(((unsigned __int64)&this->lethal >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_limbo_by_target_max_hpratio) = v5 != 0;
    __asan_report_store1(&this->lethal, p_limbo_by_target_max_hpratio, &this->lethal);
  }
  this->lethal = lethal;
  v6 = ((_BYTE)a2 + 73) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->enable_invincible >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->enable_invincible >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->enable_invincible, v6, v7);
  enable_invincible = a2->enable_invincible;
  v9 = *(_BYTE *)(((unsigned __int64)&this->enable_invincible >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 73) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->enable_invincible, v6, v10);
  this->enable_invincible = enable_invincible;
  v11 = ((_BYTE)a2 + 74) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&a2->enable_lock_hp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&a2->enable_lock_hp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&a2->enable_lock_hp, v11, v12);
  enable_lock_hp = a2->enable_lock_hp;
  v14 = *(_BYTE *)(((unsigned __int64)&this->enable_lock_hp >> 3) + 0x7FFF8000);
  LOBYTE(v11) = v14 != 0;
  v15 = (v14 != 0) & (unsigned __int8)((((unsigned __int8)this + 74) & 7) >= v14);
  if ( (_BYTE)v15 )
    __asan_report_store1(&this->enable_lock_hp, v11, v15);
  this->enable_lock_hp = enable_lock_hp;
  v16 = ((_BYTE)a2 + 75) & 7;
  v17 = (*(_BYTE *)(((unsigned __int64)&a2->disable_when_loading >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((unsigned __int64)&a2->disable_when_loading >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_load1(&a2->disable_when_loading, v16, v17);
  disable_when_loading = a2->disable_when_loading;
  v19 = *(_BYTE *)(((unsigned __int64)&this->disable_when_loading >> 3) + 0x7FFF8000);
  LOBYTE(v16) = v19 != 0;
  v20 = (v19 != 0) & (unsigned __int8)((((unsigned __int8)this + 75) & 7) >= v19);
  if ( (_BYTE)v20 )
    __asan_report_store1(&this->disable_when_loading, v16, v20);
  this->disable_when_loading = disable_when_loading;
  v21 = ((_BYTE)a2 + 76) & 7;
  v22 = (*(_BYTE *)(((unsigned __int64)&a2->use_meta >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v21 >= *(_BYTE *)(((unsigned __int64)&a2->use_meta >> 3) + 0x7FFF8000));
  if ( (_BYTE)v22 )
    __asan_report_load1(&a2->use_meta, v21, v22);
  use_meta = a2->use_meta;
  v24 = *(_BYTE *)(((unsigned __int64)&this->use_meta >> 3) + 0x7FFF8000);
  LOBYTE(v21) = v24 != 0;
  v25 = (v24 != 0) & (unsigned __int8)((((unsigned __int8)this + 76) & 7) >= v24);
  if ( (_BYTE)v25 )
    __asan_report_store1(&this->use_meta, v21, v25);
  this->use_meta = use_meta;
};

// Line 3094: range 000000001130CF50-000000001130D009
void __cdecl data::LoseHP::~LoseHP(data::LoseHP *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LoseHP + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->limbo_by_target_max_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_caster_attack_ratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_target_current_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_target_max_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_caster_max_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3094: range 000000001130D00A-000000001130D034
void __cdecl data::LoseHP::~LoseHP(data::LoseHP *const this)
{
  data::LoseHP::~LoseHP(this);
  operator delete(this, 0x150uLL);
};

// Line 3099: range 00000000100A0EAC-00000000100A0EBC
const char *__cdecl data::LoseHP::getTypeName(const data::LoseHP *const this)
{
  return "LoseHP";
};

// Line 3100: range 00000000100A0EBE-00000000100A105A
int32_t __cdecl data::LoseHP::getHashNum(const data::LoseHP *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::LoseHP::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "LoseHP",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3116: range 00000000111321B6-00000000111321F7
void __cdecl data::LoseHPFactory::LoseHPFactory(data::LoseHPFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LoseHPFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_LoseHPFactory = v2;
};

// Line 3124: range 00000000111325D4-0000000011132621
void __cdecl data::ReviveAvatar::ReviveAvatar(data::ReviveAvatar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::HealHP::HealHP(this);
  v2 = (int (**)(...))(&`vtable for'data::ReviveAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3124: range 0000000011132A72-0000000011132ACA
void __cdecl data::ReviveAvatar::ReviveAvatar(data::ReviveAvatar *const this, const data::ReviveAvatar *a2)
{
  int (**v2)(...); // rdx

  data::HealHP::HealHP(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReviveAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3130: range 0000000011132E02-0000000011132E2C
void __cdecl data::ReviveAvatar::~ReviveAvatar(data::ReviveAvatar *const this)
{
  data::ReviveAvatar::~ReviveAvatar(this);
  operator delete(this, 0x138uLL);
};

// Line 3130: range 0000000011132DB4-0000000011132E01
void __cdecl data::ReviveAvatar::~ReviveAvatar(data::ReviveAvatar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::HealHP::~HealHP(this);
};

// Line 3135: range 00000000100A105C-00000000100A106C
const char *__cdecl data::ReviveAvatar::getTypeName(const data::ReviveAvatar *const this)
{
  return "ReviveAvatar";
};

// Line 3136: range 00000000100A106E-00000000100A120A
int32_t __cdecl data::ReviveAvatar::getHashNum(const data::ReviveAvatar *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReviveAvatar::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReviveAvatar",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3155: range 0000000011132E2E-0000000011132F91
void __cdecl data::ReviveDeadAvatar::ReviveDeadAvatar(data::ReviveDeadAvatar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi

  data::ReviveAvatar::ReviveAvatar((data::ReviveAvatar *const)this);
  v2 = (int (**)(...))(&`vtable for'data::ReviveDeadAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 49) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_revive_other_player_avatar >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_revive_other_player_avatar >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_revive_other_player_avatar, v3, v4);
  this->is_revive_other_player_avatar = 0;
  v5 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->skill_id, v5);
  }
  this->skill_id = 0;
  data::DynamicFloat::DynamicFloat(&this->cd_ratio, 1.0);
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, v5);
  }
  this->range = 50.0;
};

// Line 3155: range 00000000111333D4-000000001113360A
void __cdecl data::ReviveDeadAvatar::ReviveDeadAvatar(
        data::ReviveDeadAvatar *const this,
        const data::ReviveDeadAvatar *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool is_revive_other_player_avatar; // cl
  char v6; // dl
  __int64 v7; // rdx
  __int64 v8; // rsi
  uint32_t skill_id; // ecx
  char v10; // dl
  float range; // xmm0_4

  data::ReviveAvatar::ReviveAvatar((data::ReviveAvatar *const)this, (const data::ReviveAvatar *)a2);
  v2 = (int (**)(...))(&`vtable for'data::ReviveDeadAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 49) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->is_revive_other_player_avatar >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->is_revive_other_player_avatar >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->is_revive_other_player_avatar, v3, v4);
  is_revive_other_player_avatar = a2->is_revive_other_player_avatar;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_revive_other_player_avatar >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 49) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_revive_other_player_avatar, v3, v7);
  this->is_revive_other_player_avatar = is_revive_other_player_avatar;
  v8 = (((_BYTE)a2 + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v10 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v10 != 0 && (char)((((_BYTE)this + 52) & 7) + 3) >= v10 )
  {
    LOBYTE(v8) = v10 != 0;
    __asan_report_store4(&this->skill_id, v8);
  }
  this->skill_id = skill_id;
  data::DynamicFloat::DynamicFloat(&this->cd_ratio, &a2->cd_ratio);
  if ( *(_BYTE *)(((unsigned __int64)&a2->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->range);
  }
  range = a2->range;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, &a2->cd_ratio);
  }
  this->range = range;
};

// Line 3165: range 000000001130CEC4-000000001130CF23
void __cdecl data::ReviveDeadAvatar::~ReviveDeadAvatar(data::ReviveDeadAvatar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveDeadAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->cd_ratio);
  data::ReviveAvatar::~ReviveAvatar((data::ReviveAvatar *const)this);
};

// Line 3165: range 000000001130CF24-000000001130CF4E
void __cdecl data::ReviveDeadAvatar::~ReviveDeadAvatar(data::ReviveDeadAvatar *const this)
{
  data::ReviveDeadAvatar::~ReviveDeadAvatar(this);
  operator delete(this, 0x160uLL);
};

// Line 3170: range 00000000100A120C-00000000100A121C
const char *__cdecl data::ReviveDeadAvatar::getTypeName(const data::ReviveDeadAvatar *const this)
{
  return "ReviveDeadAvatar";
};

// Line 3171: range 00000000100A121E-00000000100A13BA
int32_t __cdecl data::ReviveDeadAvatar::getHashNum(const data::ReviveDeadAvatar *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReviveDeadAvatar::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReviveDeadAvatar",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3187: range 00000000111338F4-0000000011133935
void __cdecl data::ReviveDeadAvatarFactory::ReviveDeadAvatarFactory(data::ReviveDeadAvatarFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveDeadAvatarFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReviveDeadAvatarFactory = v2;
};

// Line 3195: range 0000000011133D9E-0000000011133E77
void __cdecl data::RocketJumpExt::RocketJumpExt(data::RocketJumpExt *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rdx

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(this, ((unsigned __int8)this & 7u) + 3);
  }
  this->xz_multiplier = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->ymultiplier >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ymultiplier >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->ymultiplier, (((_BYTE)this + 4) & 7u) + 3);
  }
  this->ymultiplier = 0.0;
  v1 = ((_BYTE)this + 8) & 7;
  v2 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v1 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store1(&this->is_json_loaded, v1, v2);
  this->is_json_loaded = 0;
};

// Line 3239: range 0000000011133E78-0000000011133FA4
void __cdecl data::EnableRocketJump::EnableRocketJump(data::EnableRocketJump *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableRocketJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = XiaoUlt;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->enable, v3, v4);
  this->enable = 0;
  data::RocketJumpExt::RocketJumpExt(&this->extention);
  v5 = ((_BYTE)this - 100) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->ui_effect >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->ui_effect >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->ui_effect, v5, v6);
  this->ui_effect = 0;
};

// Line 3239: range 00000000111343F4-00000000111346D5
void __cdecl data::EnableRocketJump::EnableRocketJump(
        data::EnableRocketJump *const this,
        const data::EnableRocketJump *a2)
{
  int (**v2)(...); // rdx
  data::RocketJumpType type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool enable; // cl
  char v8; // dl
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool ui_effect; // cl
  char v13; // dl
  __int64 v14; // rdx
  const data::EnableRocketJump *v15; // [rsp+0h] [rbp-10h]

  v15 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableRocketJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  v5 = ((_BYTE)v15 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v15->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v15->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v15->enable, v5, v6);
  enable = v15->enable;
  v8 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->enable, v5, v9);
  this->enable = enable;
  if ( *(char *)(((unsigned __int64)&this->extention >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&this->extention.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->extention.is_json_loaded + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->extention, 12LL);
  }
  if ( *(char *)(((unsigned __int64)&v15->extention >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&v15->extention.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)v15 - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&v15->extention.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load_n(&v15->extention, 12LL);
  }
  this->extention = v15->extention;
  v10 = ((_BYTE)v15 - 100) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v15->ui_effect >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v15->ui_effect >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v15->ui_effect, v10, v11);
  ui_effect = v15->ui_effect;
  v13 = *(_BYTE *)(((unsigned __int64)&this->ui_effect >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this - 100) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->ui_effect, v10, v14);
  this->ui_effect = ui_effect;
};

// Line 3249: range 000000001130CE4A-000000001130CE97
void __cdecl data::EnableRocketJump::~EnableRocketJump(data::EnableRocketJump *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableRocketJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3249: range 000000001130CE98-000000001130CEC2
void __cdecl data::EnableRocketJump::~EnableRocketJump(data::EnableRocketJump *const this)
{
  data::EnableRocketJump::~EnableRocketJump(this);
  operator delete(this, 0xA0uLL);
};

// Line 3254: range 00000000100A13BC-00000000100A13CC
const char *__cdecl data::EnableRocketJump::getTypeName(const data::EnableRocketJump *const this)
{
  return "EnableRocketJump";
};

// Line 3255: range 00000000100A13CE-00000000100A156A
int32_t __cdecl data::EnableRocketJump::getHashNum(const data::EnableRocketJump *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableRocketJump::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableRocketJump",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3271: range 00000000111349BE-00000000111349FF
void __cdecl data::EnableRocketJumpFactory::EnableRocketJumpFactory(data::EnableRocketJumpFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableRocketJumpFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableRocketJumpFactory = v2;
};

// Line 3279: range 0000000011134D08-0000000011134D55
void __cdecl data::ForceTriggerJump::ForceTriggerJump(data::ForceTriggerJump *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ForceTriggerJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3279: range 00000000111351A4-00000000111351FC
void __cdecl data::ForceTriggerJump::ForceTriggerJump(
        data::ForceTriggerJump *const this,
        const data::ForceTriggerJump *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ForceTriggerJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3285: range 000000001130CE1E-000000001130CE48
void __cdecl data::ForceTriggerJump::~ForceTriggerJump(data::ForceTriggerJump *const this)
{
  data::ForceTriggerJump::~ForceTriggerJump(this);
  operator delete(this, 0x88uLL);
};

// Line 3285: range 000000001130CDD0-000000001130CE1D
void __cdecl data::ForceTriggerJump::~ForceTriggerJump(data::ForceTriggerJump *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceTriggerJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3290: range 00000000100A156C-00000000100A157C
const char *__cdecl data::ForceTriggerJump::getTypeName(const data::ForceTriggerJump *const this)
{
  return "ForceTriggerJump";
};

// Line 3291: range 00000000100A157E-00000000100A171A
int32_t __cdecl data::ForceTriggerJump::getHashNum(const data::ForceTriggerJump *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ForceTriggerJump::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ForceTriggerJump",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3307: range 00000000111354E6-0000000011135527
void __cdecl data::ForceTriggerJumpFactory::ForceTriggerJumpFactory(data::ForceTriggerJumpFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceTriggerJumpFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ForceTriggerJumpFactory = v2;
};

// Line 3315: range 0000000011135830-0000000011135908
void __cdecl data::EnableAfterImage::EnableAfterImage(data::EnableAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->index >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->index, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->index = 0;
};

// Line 3315: range 0000000011135D52-0000000011135EB9
void __cdecl data::EnableAfterImage::EnableAfterImage(
        data::EnableAfterImage *const this,
        const data::EnableAfterImage *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  __int64 v5; // rsi
  uint32_t index; // ecx
  char v7; // dl
  const data::EnableAfterImage *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  v5 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->index >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->index);
  }
  index = v8->index;
  v7 = *(_BYTE *)(((unsigned __int64)&this->index >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->index, v5);
  }
  this->index = index;
};

// Line 3323: range 000000001130CDA4-000000001130CDCE
void __cdecl data::EnableAfterImage::~EnableAfterImage(data::EnableAfterImage *const this)
{
  data::EnableAfterImage::~EnableAfterImage(this);
  operator delete(this, 0x90uLL);
};

// Line 3323: range 000000001130CD56-000000001130CDA3
void __cdecl data::EnableAfterImage::~EnableAfterImage(data::EnableAfterImage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAfterImage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3328: range 00000000100A171C-00000000100A172C
const char *__cdecl data::EnableAfterImage::getTypeName(const data::EnableAfterImage *const this)
{
  return "EnableAfterImage";
};

// Line 3329: range 00000000100A172E-00000000100A18CA
int32_t __cdecl data::EnableAfterImage::getHashNum(const data::EnableAfterImage *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableAfterImage::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableAfterImage",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3345: range 00000000111361A2-00000000111361E3
void __cdecl data::EnableAfterImageFactory::EnableAfterImageFactory(data::EnableAfterImageFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAfterImageFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableAfterImageFactory = v2;
};

// Line 3353: range 00000000111365CA-000000001113666E
void __cdecl data::ActTimeSlow::ActTimeSlow(data::ActTimeSlow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActTimeSlow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigTimeSlow::ConfigTimeSlow(&this->time_slow);
  v3 = ((_BYTE)this - 108) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_global >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_global >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_global, v3, v4);
  this->is_global = 0;
};

// Line 3353: range 0000000011136AC0-0000000011136C98
void __cdecl data::ActTimeSlow::ActTimeSlow(data::ActTimeSlow *const this, const data::ActTimeSlow *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool is_global; // cl
  char v6; // dl
  __int64 v7; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActTimeSlow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->time_slow >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&this->time_slow.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 109) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->time_slow.is_json_loaded + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->time_slow, 12LL);
  }
  if ( *(char *)(((unsigned __int64)&a2->time_slow >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&a2->time_slow.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 - 109) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->time_slow.is_json_loaded + 3) >> 3)
                                                     + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->time_slow, 12LL);
  }
  this->time_slow = a2->time_slow;
  v3 = ((_BYTE)a2 - 108) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->is_global >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->is_global >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->is_global, v3, v4);
  is_global = a2->is_global;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_global >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this - 108) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_global, v3, v7);
  this->is_global = is_global;
};

// Line 3361: range 000000001130CD2A-000000001130CD54
void __cdecl data::ActTimeSlow::~ActTimeSlow(data::ActTimeSlow *const this)
{
  data::ActTimeSlow::~ActTimeSlow(this);
  operator delete(this, 0x98uLL);
};

// Line 3361: range 000000001130CCDC-000000001130CD29
void __cdecl data::ActTimeSlow::~ActTimeSlow(data::ActTimeSlow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActTimeSlow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3366: range 00000000100A18CC-00000000100A18DC
const char *__cdecl data::ActTimeSlow::getTypeName(const data::ActTimeSlow *const this)
{
  return "ActTimeSlow";
};

// Line 3367: range 00000000100A18DE-00000000100A1A7A
int32_t __cdecl data::ActTimeSlow::getHashNum(const data::ActTimeSlow *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActTimeSlow::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActTimeSlow",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3383: range 0000000011136F82-0000000011136FC3
void __cdecl data::ActTimeSlowFactory::ActTimeSlowFactory(data::ActTimeSlowFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActTimeSlowFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActTimeSlowFactory = v2;
};

// Line 3391: range 00000000111372CC-000000001113737D
void __cdecl data::TriggerAbility::TriggerAbility(data::TriggerAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ability_name);
  std::unordered_map<std::string,data::DynamicFloat>::unordered_map(&this->ability_specials);
  if ( *(char *)(((unsigned __int64)&this->force_use_self_current_attack_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->force_use_self_current_attack_target, v1, &this->force_use_self_current_attack_target);
  this->force_use_self_current_attack_target = 0;
};

// Line 3391: range 00000000111377C6-0000000011137918
void __cdecl data::TriggerAbility::TriggerAbility(data::TriggerAbility *const this, const data::TriggerAbility *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloatMap *p_ability_specials; // rsi
  bool force_use_self_current_attack_target; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ability_name, &a2->ability_name);
  p_ability_specials = &a2->ability_specials;
  std::unordered_map<std::string,data::DynamicFloat>::unordered_map(&this->ability_specials, &a2->ability_specials);
  if ( *(char *)(((unsigned __int64)&a2->force_use_self_current_attack_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(
      &a2->force_use_self_current_attack_target,
      p_ability_specials,
      &a2->force_use_self_current_attack_target);
  force_use_self_current_attack_target = a2->force_use_self_current_attack_target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->force_use_self_current_attack_target >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_ability_specials) = v5 != 0;
    __asan_report_store1(
      &this->force_use_self_current_attack_target,
      p_ability_specials,
      &this->force_use_self_current_attack_target);
  }
  this->force_use_self_current_attack_target = force_use_self_current_attack_target;
};

// Line 3400: range 000000001130CC3E-000000001130CCAF
void __cdecl data::TriggerAbility::~TriggerAbility(data::TriggerAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<std::string,data::DynamicFloat>::~unordered_map(&this->ability_specials);
  std::string::~string(&this->ability_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3400: range 000000001130CCB0-000000001130CCDA
void __cdecl data::TriggerAbility::~TriggerAbility(data::TriggerAbility *const this)
{
  data::TriggerAbility::~TriggerAbility(this);
  operator delete(this, 0xE8uLL);
};

// Line 3405: range 00000000100A1A7C-00000000100A1A8C
const char *__cdecl data::TriggerAbility::getTypeName(const data::TriggerAbility *const this)
{
  return "TriggerAbility";
};

// Line 3406: range 00000000100A1A8E-00000000100A1C2A
int32_t __cdecl data::TriggerAbility::getHashNum(const data::TriggerAbility *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerAbility::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerAbility",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3422: range 0000000011137C02-0000000011137C43
void __cdecl data::TriggerAbilityFactory::TriggerAbilityFactory(data::TriggerAbilityFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAbilityFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerAbilityFactory = v2;
};

// Line 3430: range 0000000011137F4C-0000000011137FDC
void __cdecl data::TriggerCrystalLinkAbility::TriggerCrystalLinkAbility(data::TriggerCrystalLinkAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerCrystalLinkAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->id, v1);
  }
  this->id = 0;
};

// Line 3430: range 0000000011138426-00000000111384FD
void __cdecl data::TriggerCrystalLinkAbility::TriggerCrystalLinkAbility(
        data::TriggerCrystalLinkAbility *const this,
        const data::TriggerCrystalLinkAbility *a2)
{
  int (**v2)(...); // rdx
  uint32_t id; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerCrystalLinkAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->id);
  }
  id = a2->id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->id, a2);
  }
  this->id = id;
};

// Line 3437: range 000000001130CBC4-000000001130CC11
void __cdecl data::TriggerCrystalLinkAbility::~TriggerCrystalLinkAbility(data::TriggerCrystalLinkAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerCrystalLinkAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3437: range 000000001130CC12-000000001130CC3C
void __cdecl data::TriggerCrystalLinkAbility::~TriggerCrystalLinkAbility(data::TriggerCrystalLinkAbility *const this)
{
  data::TriggerCrystalLinkAbility::~TriggerCrystalLinkAbility(this);
  operator delete(this, 0x90uLL);
};

// Line 3442: range 00000000100A1C2C-00000000100A1C3C
const char *__cdecl data::TriggerCrystalLinkAbility::getTypeName(const data::TriggerCrystalLinkAbility *const this)
{
  return "TriggerCrystalLinkAbility";
};

// Line 3443: range 00000000100A1C3E-00000000100A1DDA
int32_t __cdecl data::TriggerCrystalLinkAbility::getHashNum(const data::TriggerCrystalLinkAbility *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerCrystalLinkAbility::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerCrystalLinkAbility",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3459: range 00000000111387E6-0000000011138827
void __cdecl data::TriggerCrystalLinkAbilityFactory::TriggerCrystalLinkAbilityFactory(
        data::TriggerCrystalLinkAbilityFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerCrystalLinkAbilityFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerCrystalLinkAbilityFactory = v2;
};

// Line 3467: range 0000000011138B30-0000000011138BD2
void __cdecl data::ApplyCrystalModifier::ApplyCrystalModifier(data::ApplyCrystalModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ApplyCrystalModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->id, v1);
  }
  this->id = 0;
};

// Line 3467: range 000000001113901C-0000000011139136
void __cdecl data::ApplyCrystalModifier::ApplyCrystalModifier(
        data::ApplyCrystalModifier *const this,
        const data::ApplyCrystalModifier *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  uint32_t id; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ApplyCrystalModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->id);
  }
  id = a2->id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store4(&this->id, p_modifier_name);
  }
  this->id = id;
};

// Line 3475: range 000000001130CB38-000000001130CB97
void __cdecl data::ApplyCrystalModifier::~ApplyCrystalModifier(data::ApplyCrystalModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyCrystalModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3475: range 000000001130CB98-000000001130CBC2
void __cdecl data::ApplyCrystalModifier::~ApplyCrystalModifier(data::ApplyCrystalModifier *const this)
{
  data::ApplyCrystalModifier::~ApplyCrystalModifier(this);
  operator delete(this, 0xB0uLL);
};

// Line 3480: range 00000000100A1DDC-00000000100A1DEC
const char *__cdecl data::ApplyCrystalModifier::getTypeName(const data::ApplyCrystalModifier *const this)
{
  return "ApplyCrystalModifier";
};

// Line 3481: range 00000000100A1DEE-00000000100A1F8A
int32_t __cdecl data::ApplyCrystalModifier::getHashNum(const data::ApplyCrystalModifier *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ApplyCrystalModifier::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ApplyCrystalModifier",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3497: range 0000000011139420-0000000011139461
void __cdecl data::ApplyCrystalModifierFactory::ApplyCrystalModifierFactory(
        data::ApplyCrystalModifierFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyCrystalModifierFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ApplyCrystalModifierFactory = v2;
};

// Line 3505: range 000000001113976A-00000000111397C9
void __cdecl data::RemoveModifier::RemoveModifier(data::RemoveModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RemoveModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 3505: range 0000000011139C0C-0000000011139CA7
void __cdecl data::RemoveModifier::RemoveModifier(data::RemoveModifier *const this, const data::RemoveModifier *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RemoveModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 3512: range 000000001130CB0C-000000001130CB36
void __cdecl data::RemoveModifier::~RemoveModifier(data::RemoveModifier *const this)
{
  data::RemoveModifier::~RemoveModifier(this);
  operator delete(this, 0xA8uLL);
};

// Line 3512: range 000000001130CAAC-000000001130CB0B
void __cdecl data::RemoveModifier::~RemoveModifier(data::RemoveModifier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveModifier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3517: range 00000000100A1F8C-00000000100A1F9C
const char *__cdecl data::RemoveModifier::getTypeName(const data::RemoveModifier *const this)
{
  return "RemoveModifier";
};

// Line 3518: range 00000000100A1F9E-00000000100A213A
int32_t __cdecl data::RemoveModifier::getHashNum(const data::RemoveModifier *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RemoveModifier::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RemoveModifier",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3534: range 0000000011139F90-0000000011139FD1
void __cdecl data::RemoveModifierFactory::RemoveModifierFactory(data::RemoveModifierFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveModifierFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RemoveModifierFactory = v2;
};

// Line 3542: range 000000001113A2DA-000000001113A36A
void __cdecl data::RemoveModifierByAbilityStateResistanceID::RemoveModifierByAbilityStateResistanceID(
        data::RemoveModifierByAbilityStateResistanceID *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RemoveModifierByAbilityStateResistanceID + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->resistance_list_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->resistance_list_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->resistance_list_id, v1);
  }
  this->resistance_list_id = 0;
};

// Line 3542: range 000000001113A7B4-000000001113A88B
void __cdecl data::RemoveModifierByAbilityStateResistanceID::RemoveModifierByAbilityStateResistanceID(
        data::RemoveModifierByAbilityStateResistanceID *const this,
        const data::RemoveModifierByAbilityStateResistanceID *a2)
{
  int (**v2)(...); // rdx
  uint32_t resistance_list_id; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RemoveModifierByAbilityStateResistanceID + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->resistance_list_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->resistance_list_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->resistance_list_id);
  }
  resistance_list_id = a2->resistance_list_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->resistance_list_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->resistance_list_id, a2);
  }
  this->resistance_list_id = resistance_list_id;
};

// Line 3549: range 000000001130CA32-000000001130CA7F
void __cdecl data::RemoveModifierByAbilityStateResistanceID::~RemoveModifierByAbilityStateResistanceID(
        data::RemoveModifierByAbilityStateResistanceID *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveModifierByAbilityStateResistanceID + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3549: range 000000001130CA80-000000001130CAAA
void __cdecl data::RemoveModifierByAbilityStateResistanceID::~RemoveModifierByAbilityStateResistanceID(
        data::RemoveModifierByAbilityStateResistanceID *const this)
{
  data::RemoveModifierByAbilityStateResistanceID::~RemoveModifierByAbilityStateResistanceID(this);
  operator delete(this, 0x90uLL);
};

// Line 3554: range 00000000100A213C-00000000100A214C
const char *__cdecl data::RemoveModifierByAbilityStateResistanceID::getTypeName(
        const data::RemoveModifierByAbilityStateResistanceID *const this)
{
  return "RemoveModifierByAbilityStateResistanceID";
};

// Line 3555: range 00000000100A214E-00000000100A22EA
int32_t __cdecl data::RemoveModifierByAbilityStateResistanceID::getHashNum(
        const data::RemoveModifierByAbilityStateResistanceID *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RemoveModifierByAbilityStateResistanceID::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RemoveModifierByAbilityStateResistanceID",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3571: range 000000001113AB74-000000001113ABB5
void __cdecl data::RemoveModifierByAbilityStateResistanceIDFactory::RemoveModifierByAbilityStateResistanceIDFactory(
        data::RemoveModifierByAbilityStateResistanceIDFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveModifierByAbilityStateResistanceIDFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RemoveModifierByAbilityStateResistanceIDFactory = v2;
};

// Line 3579: range 000000001113AEBE-000000001113AFBA
void __cdecl data::SetAIParam::SetAIParam(data::SetAIParam *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAIParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->param);
  data::DynamicFloat::DynamicFloat(&this->value);
  if ( *(char *)(((unsigned __int64)&this->is_bool >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_bool, v1, &this->is_bool);
  this->is_bool = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->logic_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->logic_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->logic_type, (((_BYTE)this - 4) & 7u) + 3);
  }
  this->logic_type = Replace;
};

// Line 3579: range 000000001113B404-000000001113B5E5
void __cdecl data::SetAIParam::SetAIParam(data::SetAIParam *const this, const data::SetAIParam *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool is_bool; // cl
  char v5; // al
  __int64 v6; // rsi
  data::ParamLogicType logic_type; // ecx
  char v8; // dl

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAIParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->param, &a2->param);
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->is_bool >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_bool, p_value, &a2->is_bool);
  is_bool = a2->is_bool;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_bool >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->is_bool, p_value, &this->is_bool);
  }
  this->is_bool = is_bool;
  v6 = (((_BYTE)a2 - 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->logic_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->logic_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->logic_type);
  }
  logic_type = a2->logic_type;
  v8 = *(_BYTE *)(((unsigned __int64)&this->logic_type >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this - 4) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->logic_type, v6);
  }
  this->logic_type = logic_type;
};

// Line 3589: range 000000001130CA06-000000001130CA30
void __cdecl data::SetAIParam::~SetAIParam(data::SetAIParam *const this)
{
  data::SetAIParam::~SetAIParam(this);
  operator delete(this, 0x100uLL);
};

// Line 3589: range 000000001130C994-000000001130CA05
void __cdecl data::SetAIParam::~SetAIParam(data::SetAIParam *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAIParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::DynamicString::~DynamicString(&this->param);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3594: range 00000000100A22EC-00000000100A22FC
const char *__cdecl data::SetAIParam::getTypeName(const data::SetAIParam *const this)
{
  return "SetAIParam";
};

// Line 3595: range 00000000100A22FE-00000000100A249A
int32_t __cdecl data::SetAIParam::getHashNum(const data::SetAIParam *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAIParam::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAIParam",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3611: range 000000001113B8CE-000000001113B90F
void __cdecl data::SetAIParamFactory::SetAIParamFactory(data::SetAIParamFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAIParamFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAIParamFactory = v2;
};

// Line 3619: range 000000001113BC18-000000001113BCD4
void __cdecl data::ActCameraShake::ActCameraShake(data::ActCameraShake *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActCameraShake + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigCameraShake::ConfigCameraShake(&this->camera_shake);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 3619: range 000000001113C11E-000000001113C2DA
void __cdecl data::ActCameraShake::ActCameraShake(data::ActCameraShake *const this, const data::ActCameraShake *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rbx
  __int64 v4; // rbx
  __int64 v5; // rbx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActCameraShake + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->camera_shake >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&this->camera_shake.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 65) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->camera_shake.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->camera_shake, 56LL);
  }
  if ( *(char *)(((unsigned __int64)&a2->camera_shake >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&a2->camera_shake.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 - 65) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->camera_shake.is_json_loaded + 3) >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->camera_shake, 56LL);
  }
  v3 = *(_QWORD *)&a2->camera_shake.shake_time;
  *(_QWORD *)&this->camera_shake.shake_type = *(_QWORD *)&a2->camera_shake.shake_type;
  *(_QWORD *)&this->camera_shake.shake_time = v3;
  v4 = *(_QWORD *)&a2->camera_shake.shake_dir.z;
  *(_QWORD *)&this->camera_shake.shake_dir.x = *(_QWORD *)&a2->camera_shake.shake_dir.x;
  *(_QWORD *)&this->camera_shake.shake_dir.z = v4;
  v5 = *(_QWORD *)&a2->camera_shake.extension.cycle_damping;
  *(_QWORD *)&this->camera_shake.extension.infinity = *(_QWORD *)&a2->camera_shake.extension.infinity;
  *(_QWORD *)&this->camera_shake.extension.cycle_damping = v5;
  *(_QWORD *)&this->camera_shake.extension.is_json_loaded = *(_QWORD *)&a2->camera_shake.extension.is_json_loaded;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
};

// Line 3627: range 000000001130C908-000000001130C967
void __cdecl data::ActCameraShake::~ActCameraShake(data::ActCameraShake *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActCameraShake + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3627: range 000000001130C968-000000001130C992
void __cdecl data::ActCameraShake::~ActCameraShake(data::ActCameraShake *const this)
{
  data::ActCameraShake::~ActCameraShake(this);
  operator delete(this, 0xD0uLL);
};

// Line 3632: range 00000000100A249C-00000000100A24AC
const char *__cdecl data::ActCameraShake::getTypeName(const data::ActCameraShake *const this)
{
  return "ActCameraShake";
};

// Line 3633: range 00000000100A24AE-00000000100A264A
int32_t __cdecl data::ActCameraShake::getHashNum(const data::ActCameraShake *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActCameraShake::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActCameraShake",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3649: range 000000001113C5C4-000000001113C605
void __cdecl data::ActCameraShakeFactory::ActCameraShakeFactory(data::ActCameraShakeFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActCameraShakeFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActCameraShakeFactory = v2;
};

// Line 3657: range 000000001113CA30-000000001113CA8F
void __cdecl data::ActCameraRadialBlur::ActCameraRadialBlur(data::ActCameraRadialBlur *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActCameraRadialBlur + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigCameraRadialBlur::ConfigCameraRadialBlur(&this->camera_radial_blur);
};

// Line 3657: range 000000001113CEE0-000000001113CFAC
void __cdecl data::ActCameraRadialBlur::ActCameraRadialBlur(
        data::ActCameraRadialBlur *const this,
        const data::ActCameraRadialBlur *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActCameraRadialBlur + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->camera_radial_blur >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->camera_radial_blur >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->camera_radial_blur);
  v3 = *(_QWORD *)&a2->camera_radial_blur.fade_time;
  *(_QWORD *)&this->camera_radial_blur.power = *(_QWORD *)&a2->camera_radial_blur.power;
  *(_QWORD *)&this->camera_radial_blur.fade_time = v3;
};

// Line 3664: range 000000001130C8DC-000000001130C906
void __cdecl data::ActCameraRadialBlur::~ActCameraRadialBlur(data::ActCameraRadialBlur *const this)
{
  data::ActCameraRadialBlur::~ActCameraRadialBlur(this);
  operator delete(this, 0x98uLL);
};

// Line 3664: range 000000001130C88E-000000001130C8DB
void __cdecl data::ActCameraRadialBlur::~ActCameraRadialBlur(data::ActCameraRadialBlur *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActCameraRadialBlur + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3669: range 00000000100A264C-00000000100A265C
const char *__cdecl data::ActCameraRadialBlur::getTypeName(const data::ActCameraRadialBlur *const this)
{
  return "ActCameraRadialBlur";
};

// Line 3670: range 00000000100A265E-00000000100A27FA
int32_t __cdecl data::ActCameraRadialBlur::getHashNum(const data::ActCameraRadialBlur *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActCameraRadialBlur::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActCameraRadialBlur",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3686: range 000000001113D296-000000001113D2D7
void __cdecl data::ActCameraRadialBlurFactory::ActCameraRadialBlurFactory(data::ActCameraRadialBlurFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActCameraRadialBlurFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActCameraRadialBlurFactory = v2;
};

// Line 3694: range 000000001113D5E0-000000001113D6C4
void __cdecl data::SetAnimatorBool::SetAnimatorBool(data::SetAnimatorBool *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorBool + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->bool_id);
  if ( *(char *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->value, v1, &this->value);
  this->value = 0;
  v3 = ((_BYTE)this - 87) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->persistent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->persistent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->persistent, v3, v4);
  this->persistent = 0;
};

// Line 3694: range 000000001113DB0E-000000001113DCB3
void __cdecl data::SetAnimatorBool::SetAnimatorBool(data::SetAnimatorBool *const this, const data::SetAnimatorBool *a2)
{
  int (**v2)(...); // rdx
  std::string *p_bool_id; // rsi
  bool value; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool persistent; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorBool + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_bool_id = &a2->bool_id;
  std::string::basic_string(&this->bool_id, &a2->bool_id);
  if ( *(char *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->value, p_bool_id, &a2->value);
  value = a2->value;
  v5 = *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_bool_id) = v5 != 0;
    __asan_report_store1(&this->value, p_bool_id, &this->value);
  }
  this->value = value;
  v6 = ((_BYTE)a2 - 87) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->persistent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->persistent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->persistent, v6, v7);
  persistent = a2->persistent;
  v9 = *(_BYTE *)(((unsigned __int64)&this->persistent >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this - 87) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->persistent, v6, v10);
  this->persistent = persistent;
};

// Line 3703: range 000000001130C862-000000001130C88C
void __cdecl data::SetAnimatorBool::~SetAnimatorBool(data::SetAnimatorBool *const this)
{
  data::SetAnimatorBool::~SetAnimatorBool(this);
  operator delete(this, 0xB0uLL);
};

// Line 3703: range 000000001130C802-000000001130C861
void __cdecl data::SetAnimatorBool::~SetAnimatorBool(data::SetAnimatorBool *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorBool + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->bool_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3708: range 00000000100A27FC-00000000100A280C
const char *__cdecl data::SetAnimatorBool::getTypeName(const data::SetAnimatorBool *const this)
{
  return "SetAnimatorBool";
};

// Line 3709: range 00000000100A280E-00000000100A29AA
int32_t __cdecl data::SetAnimatorBool::getHashNum(const data::SetAnimatorBool *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAnimatorBool::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAnimatorBool",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3725: range 000000001113DF9C-000000001113DFDD
void __cdecl data::SetAnimatorBoolFactory::SetAnimatorBoolFactory(data::SetAnimatorBoolFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorBoolFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAnimatorBoolFactory = v2;
};

// Line 3733: range 000000001113E2E6-000000001113E397
void __cdecl data::SetAnimatorInt::SetAnimatorInt(data::SetAnimatorInt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorInt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->int_id);
  data::DynamicFloat::DynamicFloat(&this->value);
  if ( *(char *)(((unsigned __int64)&this->persistent >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->persistent, v1, &this->persistent);
  this->persistent = 0;
};

// Line 3733: range 000000001113E7E0-000000001113E932
void __cdecl data::SetAnimatorInt::SetAnimatorInt(data::SetAnimatorInt *const this, const data::SetAnimatorInt *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool persistent; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorInt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->int_id, &a2->int_id);
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->persistent >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->persistent, p_value, &a2->persistent);
  persistent = a2->persistent;
  v5 = *(_BYTE *)(((unsigned __int64)&this->persistent >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->persistent, p_value, &this->persistent);
  }
  this->persistent = persistent;
};

// Line 3742: range 000000001130C7D6-000000001130C800
void __cdecl data::SetAnimatorInt::~SetAnimatorInt(data::SetAnimatorInt *const this)
{
  data::SetAnimatorInt::~SetAnimatorInt(this);
  operator delete(this, 0xD0uLL);
};

// Line 3742: range 000000001130C764-000000001130C7D5
void __cdecl data::SetAnimatorInt::~SetAnimatorInt(data::SetAnimatorInt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorInt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  std::string::~string(&this->int_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3747: range 00000000100A29AC-00000000100A29BC
const char *__cdecl data::SetAnimatorInt::getTypeName(const data::SetAnimatorInt *const this)
{
  return "SetAnimatorInt";
};

// Line 3748: range 00000000100A29BE-00000000100A2B5A
int32_t __cdecl data::SetAnimatorInt::getHashNum(const data::SetAnimatorInt *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAnimatorInt::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAnimatorInt",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3764: range 000000001113EC1C-000000001113EC5D
void __cdecl data::SetAnimatorIntFactory::SetAnimatorIntFactory(data::SetAnimatorIntFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorIntFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAnimatorIntFactory = v2;
};

// Line 3772: range 000000001113EF66-000000001113F0C5
void __cdecl data::SetAnimatorFloat::SetAnimatorFloat(data::SetAnimatorFloat *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorFloat + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->float_id);
  data::DynamicFloat::DynamicFloat(&this->value);
  if ( *(char *)(((unsigned __int64)&this->persistent >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->persistent, v1, &this->persistent);
  this->persistent = 0;
  v3 = ((_BYTE)this - 55) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->use_random_value >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->use_random_value >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->use_random_value, v3, v4);
  this->use_random_value = 0;
  data::DynamicFloat::DynamicFloat(&this->random_value_min);
  data::DynamicFloat::DynamicFloat(&this->random_value_max);
  if ( *(_BYTE *)(((unsigned __int64)&this->transition_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->transition_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->transition_time, v3);
  }
  this->transition_time = 0.0;
};

// Line 3772: range 000000001113F516-000000001113F7E2
void __cdecl data::SetAnimatorFloat::SetAnimatorFloat(
        data::SetAnimatorFloat *const this,
        const data::SetAnimatorFloat *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool persistent; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool use_random_value; // cl
  char v9; // dl
  __int64 v10; // rdx
  float transition_time; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorFloat + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->float_id, &a2->float_id);
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->persistent >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->persistent, p_value, &a2->persistent);
  persistent = a2->persistent;
  v5 = *(_BYTE *)(((unsigned __int64)&this->persistent >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->persistent, p_value, &this->persistent);
  }
  this->persistent = persistent;
  v6 = ((_BYTE)a2 - 55) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->use_random_value >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->use_random_value >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->use_random_value, v6, v7);
  use_random_value = a2->use_random_value;
  v9 = *(_BYTE *)(((unsigned __int64)&this->use_random_value >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this - 55) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->use_random_value, v6, v10);
  this->use_random_value = use_random_value;
  data::DynamicFloat::DynamicFloat(&this->random_value_min, &a2->random_value_min);
  data::DynamicFloat::DynamicFloat(&this->random_value_max, &a2->random_value_max);
  if ( *(_BYTE *)(((unsigned __int64)&a2->transition_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->transition_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->transition_time);
  }
  transition_time = a2->transition_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->transition_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->transition_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->transition_time, &a2->random_value_max);
  }
  this->transition_time = transition_time;
};

// Line 3785: range 000000001130C738-000000001130C762
void __cdecl data::SetAnimatorFloat::~SetAnimatorFloat(data::SetAnimatorFloat *const this)
{
  data::SetAnimatorFloat::~SetAnimatorFloat(this);
  operator delete(this, 0x118uLL);
};

// Line 3785: range 000000001130C6A2-000000001130C737
void __cdecl data::SetAnimatorFloat::~SetAnimatorFloat(data::SetAnimatorFloat *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorFloat + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->random_value_max);
  data::DynamicFloat::~DynamicFloat(&this->random_value_min);
  data::DynamicFloat::~DynamicFloat(&this->value);
  std::string::~string(&this->float_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3790: range 00000000100A2B5C-00000000100A2B6C
const char *__cdecl data::SetAnimatorFloat::getTypeName(const data::SetAnimatorFloat *const this)
{
  return "SetAnimatorFloat";
};

// Line 3791: range 00000000100A2B6E-00000000100A2D0A
int32_t __cdecl data::SetAnimatorFloat::getHashNum(const data::SetAnimatorFloat *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAnimatorFloat::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAnimatorFloat",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3807: range 000000001113FACC-000000001113FB0D
void __cdecl data::SetAnimatorFloatFactory::SetAnimatorFloatFactory(data::SetAnimatorFloatFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorFloatFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAnimatorFloatFactory = v2;
};

// Line 3815: range 000000001113FE16-000000001113FEB5
void __cdecl data::SetAnimatorTrigger::SetAnimatorTrigger(data::SetAnimatorTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->trigger_id);
  if ( *(char *)(((unsigned __int64)&this->mptrigger_on_remote >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->mptrigger_on_remote, v1, &this->mptrigger_on_remote);
  this->mptrigger_on_remote = 0;
};

// Line 3815: range 00000000111402FE-0000000011140419
void __cdecl data::SetAnimatorTrigger::SetAnimatorTrigger(
        data::SetAnimatorTrigger *const this,
        const data::SetAnimatorTrigger *a2)
{
  int (**v2)(...); // rdx
  data::DynamicString *p_trigger_id; // rsi
  bool mptrigger_on_remote; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_trigger_id = &a2->trigger_id;
  data::DynamicString::DynamicString(&this->trigger_id, &a2->trigger_id);
  if ( *(char *)(((unsigned __int64)&a2->mptrigger_on_remote >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->mptrigger_on_remote, p_trigger_id, &a2->mptrigger_on_remote);
  mptrigger_on_remote = a2->mptrigger_on_remote;
  v5 = *(_BYTE *)(((unsigned __int64)&this->mptrigger_on_remote >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_trigger_id) = v5 != 0;
    __asan_report_store1(&this->mptrigger_on_remote, p_trigger_id, &this->mptrigger_on_remote);
  }
  this->mptrigger_on_remote = mptrigger_on_remote;
};

// Line 3823: range 000000001130C616-000000001130C675
void __cdecl data::SetAnimatorTrigger::~SetAnimatorTrigger(data::SetAnimatorTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::~DynamicString(&this->trigger_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3823: range 000000001130C676-000000001130C6A0
void __cdecl data::SetAnimatorTrigger::~SetAnimatorTrigger(data::SetAnimatorTrigger *const this)
{
  data::SetAnimatorTrigger::~SetAnimatorTrigger(this);
  operator delete(this, 0xE0uLL);
};

// Line 3828: range 00000000100A2D0C-00000000100A2D1C
const char *__cdecl data::SetAnimatorTrigger::getTypeName(const data::SetAnimatorTrigger *const this)
{
  return "SetAnimatorTrigger";
};

// Line 3829: range 00000000100A2D1E-00000000100A2EBA
int32_t __cdecl data::SetAnimatorTrigger::getHashNum(const data::SetAnimatorTrigger *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAnimatorTrigger::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAnimatorTrigger",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3845: range 0000000011140702-0000000011140743
void __cdecl data::SetAnimatorTriggerFactory::SetAnimatorTriggerFactory(data::SetAnimatorTriggerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimatorTriggerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAnimatorTriggerFactory = v2;
};

// Line 3853: range 0000000011140A4C-0000000011140AAB
void __cdecl data::ResetAnimatorTrigger::ResetAnimatorTrigger(data::ResetAnimatorTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetAnimatorTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->trigger_id);
};

// Line 3853: range 0000000011140EEE-0000000011140F89
void __cdecl data::ResetAnimatorTrigger::ResetAnimatorTrigger(
        data::ResetAnimatorTrigger *const this,
        const data::ResetAnimatorTrigger *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetAnimatorTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->trigger_id, &a2->trigger_id);
};

// Line 3860: range 000000001130C5EA-000000001130C614
void __cdecl data::ResetAnimatorTrigger::~ResetAnimatorTrigger(data::ResetAnimatorTrigger *const this)
{
  data::ResetAnimatorTrigger::~ResetAnimatorTrigger(this);
  operator delete(this, 0xA8uLL);
};

// Line 3860: range 000000001130C58A-000000001130C5E9
void __cdecl data::ResetAnimatorTrigger::~ResetAnimatorTrigger(data::ResetAnimatorTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAnimatorTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->trigger_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3865: range 00000000100A2EBC-00000000100A2ECC
const char *__cdecl data::ResetAnimatorTrigger::getTypeName(const data::ResetAnimatorTrigger *const this)
{
  return "ResetAnimatorTrigger";
};

// Line 3866: range 00000000100A2ECE-00000000100A306A
int32_t __cdecl data::ResetAnimatorTrigger::getHashNum(const data::ResetAnimatorTrigger *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetAnimatorTrigger::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetAnimatorTrigger",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3882: range 0000000011141272-00000000111412B3
void __cdecl data::ResetAnimatorTriggerFactory::ResetAnimatorTriggerFactory(
        data::ResetAnimatorTriggerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAnimatorTriggerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetAnimatorTriggerFactory = v2;
};

// Line 3890: range 00000000111415BC-000000001114170F
void __cdecl data::SetMaterialParamFloatByTransform::SetMaterialParamFloatByTransform(
        data::SetMaterialParamFloatByTransform *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetMaterialParamFloatByTransform + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->mat_name);
  std::string::basic_string(&this->pattern_name);
  data::DynamicFloat::DynamicFloat(&this->value);
  if ( *(char *)(((unsigned __int64)&this->use_curve >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_curve, v1, &this->use_curve);
  this->use_curve = 0;
  v3 = (((_BYTE)this - 20) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_curve_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lerp_curve_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->lerp_curve_index, v3);
  }
  this->lerp_curve_index = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lerp_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lerp_time, v3);
  }
  this->lerp_time = 0.0;
};

// Line 3890: range 0000000011141B58-0000000011141DF2
void __cdecl data::SetMaterialParamFloatByTransform::SetMaterialParamFloatByTransform(
        data::SetMaterialParamFloatByTransform *const this,
        const data::SetMaterialParamFloatByTransform *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool use_curve; // cl
  char v5; // al
  __int64 v6; // rsi
  uint32_t lerp_curve_index; // ecx
  char v8; // dl
  float lerp_time; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetMaterialParamFloatByTransform + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->mat_name, &a2->mat_name);
  std::string::basic_string(&this->pattern_name, &a2->pattern_name);
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->use_curve >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_curve, p_value, &a2->use_curve);
  use_curve = a2->use_curve;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_curve >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->use_curve, p_value, &this->use_curve);
  }
  this->use_curve = use_curve;
  v6 = (((_BYTE)a2 - 20) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lerp_curve_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->lerp_curve_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->lerp_curve_index);
  }
  lerp_curve_index = a2->lerp_curve_index;
  v8 = *(_BYTE *)(((unsigned __int64)&this->lerp_curve_index >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v8 != 0;
  if ( v8 != 0 && (char)((((_BYTE)this - 20) & 7) + 3) >= v8 )
    __asan_report_store4(&this->lerp_curve_index, v6);
  this->lerp_curve_index = lerp_curve_index;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lerp_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->lerp_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->lerp_time);
  }
  lerp_time = a2->lerp_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lerp_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lerp_time, v6);
  }
  this->lerp_time = lerp_time;
};

// Line 3902: range 000000001130C55E-000000001130C588
void __cdecl data::SetMaterialParamFloatByTransform::~SetMaterialParamFloatByTransform(
        data::SetMaterialParamFloatByTransform *const this)
{
  data::SetMaterialParamFloatByTransform::~SetMaterialParamFloatByTransform(this);
  operator delete(this, 0xF8uLL);
};

// Line 3902: range 000000001130C4DA-000000001130C55D
void __cdecl data::SetMaterialParamFloatByTransform::~SetMaterialParamFloatByTransform(
        data::SetMaterialParamFloatByTransform *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetMaterialParamFloatByTransform + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  std::string::~string(&this->pattern_name);
  std::string::~string(&this->mat_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3907: range 00000000100A306C-00000000100A307C
const char *__cdecl data::SetMaterialParamFloatByTransform::getTypeName(
        const data::SetMaterialParamFloatByTransform *const this)
{
  return "SetMaterialParamFloatByTransform";
};

// Line 3908: range 00000000100A307E-00000000100A321A
int32_t __cdecl data::SetMaterialParamFloatByTransform::getHashNum(
        const data::SetMaterialParamFloatByTransform *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetMaterialParamFloatByTransform::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetMaterialParamFloatByTransform",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3924: range 00000000111420DC-000000001114211D
void __cdecl data::SetMaterialParamFloatByTransformFactory::SetMaterialParamFloatByTransformFactory(
        data::SetMaterialParamFloatByTransformFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetMaterialParamFloatByTransformFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetMaterialParamFloatByTransformFactory = v2;
};

// Line 3932: range 0000000011142426-0000000011142485
void __cdecl data::DebugLog::DebugLog(data::DebugLog *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DebugLog + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->content);
};

// Line 3932: range 00000000111428C8-0000000011142963
void __cdecl data::DebugLog::DebugLog(data::DebugLog *const this, const data::DebugLog *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DebugLog + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->content, &a2->content);
};

// Line 3939: range 000000001130C44E-000000001130C4AD
void __cdecl data::DebugLog::~DebugLog(data::DebugLog *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DebugLog + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->content);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 3939: range 000000001130C4AE-000000001130C4D8
void __cdecl data::DebugLog::~DebugLog(data::DebugLog *const this)
{
  data::DebugLog::~DebugLog(this);
  operator delete(this, 0xA8uLL);
};

// Line 3944: range 00000000100A321C-00000000100A322C
const char *__cdecl data::DebugLog::getTypeName(const data::DebugLog *const this)
{
  return "DebugLog";
};

// Line 3945: range 00000000100A322E-00000000100A33CA
int32_t __cdecl data::DebugLog::getHashNum(const data::DebugLog *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DebugLog::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DebugLog",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3961: range 0000000011142C4C-0000000011142C8D
void __cdecl data::DebugLogFactory::DebugLogFactory(data::DebugLogFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DebugLogFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DebugLogFactory = v2;
};

// Line 3969: range 0000000010126E44-0000000010126F0C
void __cdecl data::SingleTarget::SingleTarget(data::SingleTarget *const this)
{
  __int64 v1; // rsi

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, v1);
  }
  this->target = Self_0;
  if ( *(_WORD *)(((unsigned __int64)&this->other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->target_predicates);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 3969: range 0000000010D1CD02-0000000010D1CE52
void __cdecl data::SingleTarget::SingleTarget(data::SingleTarget *const this, const data::SingleTarget *a2)
{
  data::AbilityTargetting target; // ecx
  char v3; // al
  data::ConfigAbilityPredicateArray *p_target_predicates; // rsi
  bool is_json_loaded; // cl
  char v6; // al
  const data::SingleTarget *v7; // [rsp+0h] [rbp-20h]

  v7 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  target = a2->target;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->target = target;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &v7->other_targets);
  p_target_predicates = &v7->target_predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->target_predicates, &v7->target_predicates);
  if ( *(char *)(((unsigned __int64)&v7->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v7->is_json_loaded, p_target_predicates, &v7->is_json_loaded);
  is_json_loaded = v7->is_json_loaded;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_target_predicates) = v6 != 0;
    __asan_report_store1(&this->is_json_loaded, p_target_predicates, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 3969: range 000000001050CB6E-000000001050CC97
void __cdecl data::SingleTarget::SingleTarget(data::SingleTarget *const this, data::SingleTarget *a2)
{
  data::AbilityTargetting target; // ecx
  char v3; // al
  data::ConfigAbilityPredicateArray *p_target_predicates; // rsi
  bool is_json_loaded; // cl
  char v6; // al
  data::SingleTarget *v7; // [rsp+0h] [rbp-10h]

  v7 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  target = a2->target;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->target = target;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &v7->other_targets);
  p_target_predicates = &v7->target_predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->target_predicates, &v7->target_predicates);
  if ( *(char *)(((unsigned __int64)&v7->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v7->is_json_loaded, p_target_predicates, &v7->is_json_loaded);
  is_json_loaded = v7->is_json_loaded;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_target_predicates) = v6 != 0;
    __asan_report_store1(&this->is_json_loaded, p_target_predicates, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 3969: range 0000000010126F0E-0000000010126F3C
void __cdecl data::SingleTarget::~SingleTarget(data::SingleTarget *const this)
{
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->target_predicates);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->other_targets);
};

// Line 3999: range 0000000011142FCE-00000000111433BC
void __cdecl data::TriggerBullet::TriggerBullet(data::TriggerBullet *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  __int64 v12; // rsi
  __int64 v13; // rdx
  __int64 v14; // rsi
  __int64 v15; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerBullet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->bullet_id, v1);
  }
  this->bullet_id = 0;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(char *)(((unsigned __int64)&this->owner_is_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->owner_is_target, v1, &this->owner_is_target);
  this->owner_is_target = 0;
  v3 = (((_BYTE)this - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->owner_is >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->owner_is >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->owner_is, v3);
  }
  this->owner_is = Self_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->prop_owner_is >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->prop_owner_is >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->prop_owner_is, v3);
  }
  this->prop_owner_is = Self_0;
  v4 = ((_BYTE)this - 84) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->life_by_owner_is_alive, v4, v5);
  this->life_by_owner_is_alive = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->track_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->track_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->track_target, v4);
  }
  this->track_target = SelfAttackTarget;
  std::vector<data::SingleTarget>::vector(&this->track_target_list);
  if ( *(char *)(((unsigned __int64)&this->sight_group_with_owner >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->sight_group_with_owner, v4, &this->sight_group_with_owner);
  this->sight_group_with_owner = 0;
  v6 = ((_BYTE)this - 47) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->is_peer_id_from_player >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_peer_id_from_player >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_peer_id_from_player, v6, v7);
  this->is_peer_id_from_player = 0;
  v8 = ((_BYTE)this - 46) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->life_by_owner_v2 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->life_by_owner_v2 >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->life_by_owner_v2, v8, v9);
  this->life_by_owner_v2 = 0;
  v10 = ((_BYTE)this - 45) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&this->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&this->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->dont_kill_self_by_client_prediction, v10, v11);
  this->dont_kill_self_by_client_prediction = 0;
  v12 = ((_BYTE)this - 44) & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)&this->camp_follow_prop_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)&this->camp_follow_prop_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->camp_follow_prop_owner, v12, v13);
  this->camp_follow_prop_owner = 0;
  v14 = ((_BYTE)this - 43) & 7;
  v15 = (*(_BYTE *)(((unsigned __int64)&this->flush_ability_packet >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v14 >= *(_BYTE *)(((unsigned __int64)&this->flush_ability_packet >> 3) + 0x7FFF8000));
  if ( (_BYTE)v15 )
    __asan_report_store1(&this->flush_ability_packet, v14, v15);
  this->flush_ability_packet = 0;
};

// Line 3999: range 0000000011143800-0000000011143F15
void __cdecl data::TriggerBullet::TriggerBullet(data::TriggerBullet *const this, const data::TriggerBullet *a2)
{
  int (**v2)(...); // rdx
  uint32_t bullet_id; // ecx
  char v4; // al
  data::ConfigBornTypePtr *p_born; // rsi
  bool owner_is_target; // cl
  char v7; // al
  __int64 v8; // rsi
  data::AbilityTargetting owner_is; // ecx
  char v10; // dl
  data::AbilityTargetting prop_owner_is; // ecx
  char v12; // al
  __int64 v13; // rsi
  __int64 v14; // rdx
  bool life_by_owner_is_alive; // cl
  char v16; // dl
  __int64 v17; // rdx
  data::AbilityTargetting track_target; // ecx
  char v19; // al
  data::TargetArray *p_track_target_list; // rsi
  bool sight_group_with_owner; // cl
  char v22; // al
  __int64 v23; // rsi
  __int64 v24; // rdx
  bool is_peer_id_from_player; // cl
  char v26; // dl
  __int64 v27; // rdx
  __int64 v28; // rsi
  __int64 v29; // rdx
  bool life_by_owner_v2; // cl
  char v31; // dl
  __int64 v32; // rdx
  __int64 v33; // rsi
  __int64 v34; // rdx
  bool dont_kill_self_by_client_prediction; // cl
  char v36; // dl
  __int64 v37; // rdx
  __int64 v38; // rsi
  __int64 v39; // rdx
  bool camp_follow_prop_owner; // cl
  char v41; // dl
  __int64 v42; // rdx
  __int64 v43; // rsi
  __int64 v44; // rdx
  bool flush_ability_packet; // cl
  char v46; // dl
  __int64 v47; // rdx
  const data::TriggerBullet *v48; // [rsp+0h] [rbp-20h]

  v48 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerBullet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->bullet_id);
  }
  bullet_id = a2->bullet_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->bullet_id, a2);
  }
  this->bullet_id = bullet_id;
  p_born = &v48->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v48->born);
  if ( *(char *)(((unsigned __int64)&v48->owner_is_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v48->owner_is_target, p_born, &v48->owner_is_target);
  owner_is_target = v48->owner_is_target;
  v7 = *(_BYTE *)(((unsigned __int64)&this->owner_is_target >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(p_born) = v7 != 0;
    __asan_report_store1(&this->owner_is_target, p_born, &this->owner_is_target);
  }
  this->owner_is_target = owner_is_target;
  v8 = (((_BYTE)v48 - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v48->owner_is >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v48 - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v48->owner_is >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v48->owner_is);
  }
  owner_is = v48->owner_is;
  v10 = *(_BYTE *)(((unsigned __int64)&this->owner_is >> 3) + 0x7FFF8000);
  if ( v10 != 0 && (char)((((_BYTE)this - 92) & 7) + 3) >= v10 )
  {
    LOBYTE(v8) = v10 != 0;
    __asan_report_store4(&this->owner_is, v8);
  }
  this->owner_is = owner_is;
  if ( *(_BYTE *)(((unsigned __int64)&v48->prop_owner_is >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v48->prop_owner_is >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v48->prop_owner_is);
  }
  prop_owner_is = v48->prop_owner_is;
  v12 = *(_BYTE *)(((unsigned __int64)&this->prop_owner_is >> 3) + 0x7FFF8000);
  if ( v12 != 0 && v12 <= 3 )
  {
    LOBYTE(v8) = v12 != 0;
    __asan_report_store4(&this->prop_owner_is, v8);
  }
  this->prop_owner_is = prop_owner_is;
  v13 = ((_BYTE)v48 - 84) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&v48->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&v48->life_by_owner_is_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&v48->life_by_owner_is_alive, v13, v14);
  life_by_owner_is_alive = v48->life_by_owner_is_alive;
  v16 = *(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000);
  LOBYTE(v13) = v16 != 0;
  v17 = (v16 != 0) & (unsigned __int8)((((unsigned __int8)this - 84) & 7) >= v16);
  if ( (_BYTE)v17 )
    __asan_report_store1(&this->life_by_owner_is_alive, v13, v17);
  this->life_by_owner_is_alive = life_by_owner_is_alive;
  if ( *(_BYTE *)(((unsigned __int64)&v48->track_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v48->track_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v48->track_target);
  }
  track_target = v48->track_target;
  v19 = *(_BYTE *)(((unsigned __int64)&this->track_target >> 3) + 0x7FFF8000);
  if ( v19 != 0 && v19 <= 3 )
  {
    LOBYTE(v13) = v19 != 0;
    __asan_report_store4(&this->track_target, v13);
  }
  this->track_target = track_target;
  p_track_target_list = &v48->track_target_list;
  std::vector<data::SingleTarget>::vector(&this->track_target_list, &v48->track_target_list);
  if ( *(char *)(((unsigned __int64)&v48->sight_group_with_owner >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v48->sight_group_with_owner, p_track_target_list, &v48->sight_group_with_owner);
  sight_group_with_owner = v48->sight_group_with_owner;
  v22 = *(_BYTE *)(((unsigned __int64)&this->sight_group_with_owner >> 3) + 0x7FFF8000);
  if ( v22 < 0 )
  {
    LOBYTE(p_track_target_list) = v22 != 0;
    __asan_report_store1(&this->sight_group_with_owner, p_track_target_list, &this->sight_group_with_owner);
  }
  this->sight_group_with_owner = sight_group_with_owner;
  v23 = ((_BYTE)v48 - 47) & 7;
  v24 = (*(_BYTE *)(((unsigned __int64)&v48->is_peer_id_from_player >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v23 >= *(_BYTE *)(((unsigned __int64)&v48->is_peer_id_from_player >> 3) + 0x7FFF8000));
  if ( (_BYTE)v24 )
    __asan_report_load1(&v48->is_peer_id_from_player, v23, v24);
  is_peer_id_from_player = v48->is_peer_id_from_player;
  v26 = *(_BYTE *)(((unsigned __int64)&this->is_peer_id_from_player >> 3) + 0x7FFF8000);
  LOBYTE(v23) = v26 != 0;
  v27 = (v26 != 0) & (unsigned __int8)((((unsigned __int8)this - 47) & 7) >= v26);
  if ( (_BYTE)v27 )
    __asan_report_store1(&this->is_peer_id_from_player, v23, v27);
  this->is_peer_id_from_player = is_peer_id_from_player;
  v28 = ((_BYTE)v48 - 46) & 7;
  v29 = (*(_BYTE *)(((unsigned __int64)&v48->life_by_owner_v2 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v28 >= *(_BYTE *)(((unsigned __int64)&v48->life_by_owner_v2 >> 3) + 0x7FFF8000));
  if ( (_BYTE)v29 )
    __asan_report_load1(&v48->life_by_owner_v2, v28, v29);
  life_by_owner_v2 = v48->life_by_owner_v2;
  v31 = *(_BYTE *)(((unsigned __int64)&this->life_by_owner_v2 >> 3) + 0x7FFF8000);
  LOBYTE(v28) = v31 != 0;
  v32 = (v31 != 0) & (unsigned __int8)((((unsigned __int8)this - 46) & 7) >= v31);
  if ( (_BYTE)v32 )
    __asan_report_store1(&this->life_by_owner_v2, v28, v32);
  this->life_by_owner_v2 = life_by_owner_v2;
  v33 = ((_BYTE)v48 - 45) & 7;
  v34 = (*(_BYTE *)(((unsigned __int64)&v48->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v33 >= *(_BYTE *)(((unsigned __int64)&v48->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v34 )
    __asan_report_load1(&v48->dont_kill_self_by_client_prediction, v33, v34);
  dont_kill_self_by_client_prediction = v48->dont_kill_self_by_client_prediction;
  v36 = *(_BYTE *)(((unsigned __int64)&this->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000);
  LOBYTE(v33) = v36 != 0;
  v37 = (v36 != 0) & (unsigned __int8)((((unsigned __int8)this - 45) & 7) >= v36);
  if ( (_BYTE)v37 )
    __asan_report_store1(&this->dont_kill_self_by_client_prediction, v33, v37);
  this->dont_kill_self_by_client_prediction = dont_kill_self_by_client_prediction;
  v38 = ((_BYTE)v48 - 44) & 7;
  v39 = (*(_BYTE *)(((unsigned __int64)&v48->camp_follow_prop_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v38 >= *(_BYTE *)(((unsigned __int64)&v48->camp_follow_prop_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v39 )
    __asan_report_load1(&v48->camp_follow_prop_owner, v38, v39);
  camp_follow_prop_owner = v48->camp_follow_prop_owner;
  v41 = *(_BYTE *)(((unsigned __int64)&this->camp_follow_prop_owner >> 3) + 0x7FFF8000);
  LOBYTE(v38) = v41 != 0;
  v42 = (v41 != 0) & (unsigned __int8)((((unsigned __int8)this - 44) & 7) >= v41);
  if ( (_BYTE)v42 )
    __asan_report_store1(&this->camp_follow_prop_owner, v38, v42);
  this->camp_follow_prop_owner = camp_follow_prop_owner;
  v43 = ((_BYTE)v48 - 43) & 7;
  v44 = (*(_BYTE *)(((unsigned __int64)&v48->flush_ability_packet >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v43 >= *(_BYTE *)(((unsigned __int64)&v48->flush_ability_packet >> 3) + 0x7FFF8000));
  if ( (_BYTE)v44 )
    __asan_report_load1(&v48->flush_ability_packet, v43, v44);
  flush_ability_packet = v48->flush_ability_packet;
  v46 = *(_BYTE *)(((unsigned __int64)&this->flush_ability_packet >> 3) + 0x7FFF8000);
  LOBYTE(v43) = v46 != 0;
  v47 = (v46 != 0) & (unsigned __int8)((((unsigned __int8)this - 43) & 7) >= v46);
  if ( (_BYTE)v47 )
    __asan_report_store1(&this->flush_ability_packet, v43, v47);
  this->flush_ability_packet = flush_ability_packet;
};

// Line 4019: range 000000001130C3B0-000000001130C421
void __cdecl data::TriggerBullet::~TriggerBullet(data::TriggerBullet *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerBullet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::SingleTarget>::~vector(&this->track_target_list);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4019: range 000000001130C422-000000001130C44C
void __cdecl data::TriggerBullet::~TriggerBullet(data::TriggerBullet *const this)
{
  data::TriggerBullet::~TriggerBullet(this);
  operator delete(this, 0xD8uLL);
};

// Line 4024: range 00000000100A33CC-00000000100A33DC
const char *__cdecl data::TriggerBullet::getTypeName(const data::TriggerBullet *const this)
{
  return "TriggerBullet";
};

// Line 4025: range 00000000100A33DE-00000000100A357A
int32_t __cdecl data::TriggerBullet::getHashNum(const data::TriggerBullet *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerBullet::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerBullet",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4041: range 00000000111441FE-000000001114423F
void __cdecl data::TriggerBulletFactory::TriggerBulletFactory(data::TriggerBulletFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerBulletFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerBulletFactory = v2;
};

// Line 4049: range 0000000011144548-00000000111446AA
void __cdecl data::TriggerAttackEvent::TriggerAttackEvent(data::TriggerAttackEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAttackEvent::ConfigAttackEvent(&this->attack_event);
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_type, v1);
  }
  this->target_type = None_22;
  std::vector<data::EntityType>::vector(&this->entity_types);
  if ( *(char *)(((unsigned __int64)&this->is_reject >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_reject, v1, &this->is_reject);
  this->is_reject = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_based_on_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->camp_based_on_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->camp_based_on_id, (((_BYTE)this + 116) & 7u) + 3);
  }
  this->camp_based_on_id = 0;
};

// Line 4049: range 0000000011144AEE-0000000011144D4E
void __cdecl data::TriggerAttackEvent::TriggerAttackEvent(
        data::TriggerAttackEvent *const this,
        const data::TriggerAttackEvent *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAttackEvent *p_attack_event; // rsi
  data::TargetType target_type; // ecx
  char v5; // al
  data::ConfigEntityTypeArray *p_entity_types; // rsi
  bool is_reject; // cl
  char v8; // al
  __int64 v9; // rsi
  uint32_t camp_based_on_id; // ecx
  char v11; // dl

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_attack_event = &a2->attack_event;
  data::ConfigAttackEvent::ConfigAttackEvent(&this->attack_event, &a2->attack_event);
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_type);
  }
  target_type = a2->target_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_attack_event) = v5 != 0;
    __asan_report_store4(&this->target_type, p_attack_event);
  }
  this->target_type = target_type;
  p_entity_types = &a2->entity_types;
  std::vector<data::EntityType>::vector(&this->entity_types, &a2->entity_types);
  if ( *(char *)(((unsigned __int64)&a2->is_reject >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_reject, p_entity_types, &a2->is_reject);
  is_reject = a2->is_reject;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_reject >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(p_entity_types) = v8 != 0;
    __asan_report_store1(&this->is_reject, p_entity_types, &this->is_reject);
  }
  this->is_reject = is_reject;
  v9 = (((_BYTE)a2 + 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camp_based_on_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->camp_based_on_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->camp_based_on_id);
  }
  camp_based_on_id = a2->camp_based_on_id;
  v11 = *(_BYTE *)(((unsigned __int64)&this->camp_based_on_id >> 3) + 0x7FFF8000);
  if ( v11 != 0 && (char)((((_BYTE)this + 116) & 7) + 3) >= v11 )
  {
    LOBYTE(v9) = v11 != 0;
    __asan_report_store4(&this->camp_based_on_id, v9);
  }
  this->camp_based_on_id = camp_based_on_id;
};

// Line 4060: range 000000001130C312-000000001130C383
void __cdecl data::TriggerAttackEvent::~TriggerAttackEvent(data::TriggerAttackEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::EntityType>::~vector(&this->entity_types);
  data::ConfigAttackEvent::~ConfigAttackEvent(&this->attack_event);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4060: range 000000001130C384-000000001130C3AE
void __cdecl data::TriggerAttackEvent::~TriggerAttackEvent(data::TriggerAttackEvent *const this)
{
  data::TriggerAttackEvent::~TriggerAttackEvent(this);
  operator delete(this, 0x478uLL);
};

// Line 4065: range 00000000100A357C-00000000100A358C
const char *__cdecl data::TriggerAttackEvent::getTypeName(const data::TriggerAttackEvent *const this)
{
  return "TriggerAttackEvent";
};

// Line 4066: range 00000000100A358E-00000000100A372A
int32_t __cdecl data::TriggerAttackEvent::getHashNum(const data::TriggerAttackEvent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerAttackEvent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerAttackEvent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4082: range 0000000011145038-0000000011145079
void __cdecl data::TriggerAttackEventFactory::TriggerAttackEventFactory(data::TriggerAttackEventFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackEventFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerAttackEventFactory = v2;
};

// Line 4090: range 0000000011145564-00000000111455E6
void __cdecl data::TriggerAttackTargetMapEvent::TriggerAttackTargetMapEvent(
        data::TriggerAttackTargetMapEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackTargetMapEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAttackTargetMapEvent::ConfigAttackTargetMapEvent(&this->attack_target_map_event);
};

// Line 4090: range 0000000011145A2A-0000000011145AC5
void __cdecl data::TriggerAttackTargetMapEvent::TriggerAttackTargetMapEvent(
        data::TriggerAttackTargetMapEvent *const this,
        const data::TriggerAttackTargetMapEvent *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackTargetMapEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAttackTargetMapEvent::ConfigAttackTargetMapEvent(
    &this->attack_target_map_event,
    &a2->attack_target_map_event);
};

// Line 4097: range 000000001130C2E6-000000001130C310
void __cdecl data::TriggerAttackTargetMapEvent::~TriggerAttackTargetMapEvent(
        data::TriggerAttackTargetMapEvent *const this)
{
  data::TriggerAttackTargetMapEvent::~TriggerAttackTargetMapEvent(this);
  operator delete(this, 0xD8uLL);
};

// Line 4097: range 000000001130C286-000000001130C2E5
void __cdecl data::TriggerAttackTargetMapEvent::~TriggerAttackTargetMapEvent(
        data::TriggerAttackTargetMapEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackTargetMapEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAttackTargetMapEvent::~ConfigAttackTargetMapEvent(&this->attack_target_map_event);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4102: range 00000000100A372C-00000000100A373C
const char *__cdecl data::TriggerAttackTargetMapEvent::getTypeName(const data::TriggerAttackTargetMapEvent *const this)
{
  return "TriggerAttackTargetMapEvent";
};

// Line 4103: range 00000000100A373E-00000000100A38DA
int32_t __cdecl data::TriggerAttackTargetMapEvent::getHashNum(const data::TriggerAttackTargetMapEvent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerAttackTargetMapEvent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerAttackTargetMapEvent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4119: range 0000000011145DAE-0000000011145DEF
void __cdecl data::TriggerAttackTargetMapEventFactory::TriggerAttackTargetMapEventFactory(
        data::TriggerAttackTargetMapEventFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAttackTargetMapEventFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerAttackTargetMapEventFactory = v2;
};

// Line 4127: range 00000000111460F8-0000000011146185
void __cdecl data::EnableWetElectricHitBox::EnableWetElectricHitBox(data::EnableWetElectricHitBox *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableWetElectricHitBox + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enabled >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enabled, v1, &this->enabled);
  this->enabled = 0;
};

// Line 4127: range 00000000111465CE-00000000111466A6
void __cdecl data::EnableWetElectricHitBox::EnableWetElectricHitBox(
        data::EnableWetElectricHitBox *const this,
        const data::EnableWetElectricHitBox *a2)
{
  int (**v2)(...); // rdx
  bool enabled; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableWetElectricHitBox + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enabled >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enabled, a2, &a2->enabled);
  enabled = a2->enabled;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enabled >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enabled, a2, &this->enabled);
  }
  this->enabled = enabled;
};

// Line 4134: range 000000001130C25A-000000001130C284
void __cdecl data::EnableWetElectricHitBox::~EnableWetElectricHitBox(data::EnableWetElectricHitBox *const this)
{
  data::EnableWetElectricHitBox::~EnableWetElectricHitBox(this);
  operator delete(this, 0x90uLL);
};

// Line 4134: range 000000001130C20C-000000001130C259
void __cdecl data::EnableWetElectricHitBox::~EnableWetElectricHitBox(data::EnableWetElectricHitBox *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableWetElectricHitBox + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4139: range 00000000100A38DC-00000000100A38EC
const char *__cdecl data::EnableWetElectricHitBox::getTypeName(const data::EnableWetElectricHitBox *const this)
{
  return "EnableWetElectricHitBox";
};

// Line 4140: range 00000000100A38EE-00000000100A3A8A
int32_t __cdecl data::EnableWetElectricHitBox::getHashNum(const data::EnableWetElectricHitBox *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableWetElectricHitBox::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableWetElectricHitBox",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4156: range 0000000011146990-00000000111469D1
void __cdecl data::EnableWetElectricHitBoxFactory::EnableWetElectricHitBoxFactory(
        data::EnableWetElectricHitBoxFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableWetElectricHitBoxFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableWetElectricHitBoxFactory = v2;
};

// Line 4164: range 0000000011146CDA-0000000011146E7B
void __cdecl data::CheckGround::CheckGround(data::CheckGround *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx

  v1 = (unsigned __int8)this & 7;
  v2 = (*(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v1 >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store1(this, v1, v2);
  this->enable = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->raycast_up_height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->raycast_up_height >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->raycast_up_height, (((_BYTE)this + 4) & 7u) + 3);
  }
  this->raycast_up_height = 0.5;
  if ( *(_BYTE *)(((unsigned __int64)&this->raycast_down_height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 8) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->raycast_down_height >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->raycast_down_height, (((_BYTE)this + 8) & 7u) + 3);
  }
  this->raycast_down_height = 0.5;
  v3 = ((_BYTE)this + 12) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->stick_to_ground_if_valid >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->stick_to_ground_if_valid >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->stick_to_ground_if_valid, v3, v4);
  this->stick_to_ground_if_valid = 1;
  v5 = ((_BYTE)this + 13) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->dont_create_if_invalid >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->dont_create_if_invalid >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->dont_create_if_invalid, v5, v6);
  this->dont_create_if_invalid = 1;
  v7 = ((_BYTE)this + 14) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->is_json_loaded, v7, v8);
  this->is_json_loaded = 0;
};

// Line 4191: range 0000000011146E7C-000000001114715A
void __cdecl data::CreateEntity::CreateEntity(data::CreateEntity *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::CreateEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->owner_is_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->owner_is_target, v1, &this->owner_is_target);
  this->owner_is_target = 0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->owner_is >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->owner_is >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->owner_is, v3);
  }
  this->owner_is = Self_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->prop_owner_is >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->prop_owner_is >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->prop_owner_is, v3);
  }
  this->prop_owner_is = Self_0;
  v4 = ((_BYTE)this - 108) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->life_by_owner_is_alive, v4, v5);
  this->life_by_owner_is_alive = 0;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::CheckGround::CheckGround(&this->check_ground);
  if ( *(char *)(((unsigned __int64)&this->sight_group_with_owner >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->sight_group_with_owner, v4, &this->sight_group_with_owner);
  this->sight_group_with_owner = 0;
  v6 = ((_BYTE)this - 71) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->is_peer_id_from_player >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_peer_id_from_player >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_peer_id_from_player, v6, v7);
  this->is_peer_id_from_player = 0;
  v8 = ((_BYTE)this - 70) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->life_by_owner_v2 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->life_by_owner_v2 >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->life_by_owner_v2, v8, v9);
  this->life_by_owner_v2 = 0;
  v10 = ((_BYTE)this - 69) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&this->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&this->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->dont_kill_self_by_client_prediction, v10, v11);
  this->dont_kill_self_by_client_prediction = 0;
};

// Line 4191: range 00000000111475AA-0000000011147ACC
void __cdecl data::CreateEntity::CreateEntity(data::CreateEntity *const this, const data::CreateEntity *a2)
{
  int (**v2)(...); // rdx
  bool owner_is_target; // cl
  char v4; // al
  __int64 v5; // rsi
  data::AbilityTargetting owner_is; // ecx
  char v7; // dl
  data::AbilityTargetting prop_owner_is; // ecx
  char v9; // al
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool life_by_owner_is_alive; // cl
  char v13; // dl
  __int64 v14; // rdx
  data::ConfigBornTypePtr *p_born; // rsi
  __int64 v16; // rdx
  bool sight_group_with_owner; // cl
  char v18; // al
  __int64 v19; // rsi
  __int64 v20; // rdx
  bool is_peer_id_from_player; // cl
  char v22; // dl
  __int64 v23; // rdx
  __int64 v24; // rsi
  __int64 v25; // rdx
  bool life_by_owner_v2; // cl
  char v27; // dl
  __int64 v28; // rdx
  __int64 v29; // rsi
  __int64 v30; // rdx
  bool dont_kill_self_by_client_prediction; // cl
  char v32; // dl
  __int64 v33; // rdx
  const data::CreateEntity *v34; // [rsp+0h] [rbp-10h]

  v34 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CreateEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->owner_is_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->owner_is_target, a2, &a2->owner_is_target);
  owner_is_target = a2->owner_is_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->owner_is_target >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->owner_is_target, a2, &this->owner_is_target);
  }
  this->owner_is_target = owner_is_target;
  v5 = (((_BYTE)v34 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v34->owner_is >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v34 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v34->owner_is >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v34->owner_is);
  }
  owner_is = v34->owner_is;
  v7 = *(_BYTE *)(((unsigned __int64)&this->owner_is >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->owner_is, v5);
  }
  this->owner_is = owner_is;
  if ( *(_BYTE *)(((unsigned __int64)&v34->prop_owner_is >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v34->prop_owner_is >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v34->prop_owner_is);
  }
  prop_owner_is = v34->prop_owner_is;
  v9 = *(_BYTE *)(((unsigned __int64)&this->prop_owner_is >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->prop_owner_is, v5);
  }
  this->prop_owner_is = prop_owner_is;
  v10 = ((_BYTE)v34 - 108) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v34->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v34->life_by_owner_is_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v34->life_by_owner_is_alive, v10, v11);
  life_by_owner_is_alive = v34->life_by_owner_is_alive;
  v13 = *(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this - 108) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->life_by_owner_is_alive, v10, v14);
  this->life_by_owner_is_alive = life_by_owner_is_alive;
  p_born = &v34->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v34->born);
  if ( *(_WORD *)(((unsigned __int64)&this->check_ground >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&v34->check_ground >> 3) + 0x7FFF8000) )
    __asan_report_load16(&v34->check_ground);
  v16 = *(_QWORD *)&v34->check_ground.raycast_down_height;
  *(_QWORD *)&this->check_ground.enable = *(_QWORD *)&v34->check_ground.enable;
  *(_QWORD *)&this->check_ground.raycast_down_height = v16;
  if ( *(char *)(((unsigned __int64)&v34->sight_group_with_owner >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v34->sight_group_with_owner, p_born, &v34->sight_group_with_owner);
  sight_group_with_owner = v34->sight_group_with_owner;
  v18 = *(_BYTE *)(((unsigned __int64)&this->sight_group_with_owner >> 3) + 0x7FFF8000);
  if ( v18 < 0 )
  {
    LOBYTE(p_born) = v18 != 0;
    __asan_report_store1(&this->sight_group_with_owner, p_born, &this->sight_group_with_owner);
  }
  this->sight_group_with_owner = sight_group_with_owner;
  v19 = ((_BYTE)v34 - 71) & 7;
  v20 = (*(_BYTE *)(((unsigned __int64)&v34->is_peer_id_from_player >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v19 >= *(_BYTE *)(((unsigned __int64)&v34->is_peer_id_from_player >> 3) + 0x7FFF8000));
  if ( (_BYTE)v20 )
    __asan_report_load1(&v34->is_peer_id_from_player, v19, v20);
  is_peer_id_from_player = v34->is_peer_id_from_player;
  v22 = *(_BYTE *)(((unsigned __int64)&this->is_peer_id_from_player >> 3) + 0x7FFF8000);
  LOBYTE(v19) = v22 != 0;
  v23 = (v22 != 0) & (unsigned __int8)((((unsigned __int8)this - 71) & 7) >= v22);
  if ( (_BYTE)v23 )
    __asan_report_store1(&this->is_peer_id_from_player, v19, v23);
  this->is_peer_id_from_player = is_peer_id_from_player;
  v24 = ((_BYTE)v34 - 70) & 7;
  v25 = (*(_BYTE *)(((unsigned __int64)&v34->life_by_owner_v2 >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v24 >= *(_BYTE *)(((unsigned __int64)&v34->life_by_owner_v2 >> 3) + 0x7FFF8000));
  if ( (_BYTE)v25 )
    __asan_report_load1(&v34->life_by_owner_v2, v24, v25);
  life_by_owner_v2 = v34->life_by_owner_v2;
  v27 = *(_BYTE *)(((unsigned __int64)&this->life_by_owner_v2 >> 3) + 0x7FFF8000);
  LOBYTE(v24) = v27 != 0;
  v28 = (v27 != 0) & (unsigned __int8)((((unsigned __int8)this - 70) & 7) >= v27);
  if ( (_BYTE)v28 )
    __asan_report_store1(&this->life_by_owner_v2, v24, v28);
  this->life_by_owner_v2 = life_by_owner_v2;
  v29 = ((_BYTE)v34 - 69) & 7;
  v30 = (*(_BYTE *)(((unsigned __int64)&v34->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v29 >= *(_BYTE *)(((unsigned __int64)&v34->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v30 )
    __asan_report_load1(&v34->dont_kill_self_by_client_prediction, v29, v30);
  dont_kill_self_by_client_prediction = v34->dont_kill_self_by_client_prediction;
  v32 = *(_BYTE *)(((unsigned __int64)&this->dont_kill_self_by_client_prediction >> 3) + 0x7FFF8000);
  LOBYTE(v29) = v32 != 0;
  v33 = (v32 != 0) & (unsigned __int8)((((unsigned __int8)this - 69) & 7) >= v32);
  if ( (_BYTE)v33 )
    __asan_report_store1(&this->dont_kill_self_by_client_prediction, v29, v33);
  this->dont_kill_self_by_client_prediction = dont_kill_self_by_client_prediction;
};

// Line 4207: range 0000000011147E16-0000000011147E40
void __cdecl data::CreateEntity::~CreateEntity(data::CreateEntity *const this)
{
  data::CreateEntity::~CreateEntity(this);
  operator delete(this, 0xC0uLL);
};

// Line 4207: range 0000000011147DB6-0000000011147E15
void __cdecl data::CreateEntity::~CreateEntity(data::CreateEntity *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CreateEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4212: range 00000000100A3A8C-00000000100A3A9C
const char *__cdecl data::CreateEntity::getTypeName(const data::CreateEntity *const this)
{
  return "CreateEntity";
};

// Line 4213: range 00000000100A3A9E-00000000100A3C3A
int32_t __cdecl data::CreateEntity::getHashNum(const data::CreateEntity *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CreateEntity::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CreateEntity",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4232: range 0000000011147E42-0000000011148032
void __cdecl data::CreateGadget::CreateGadget(data::CreateGadget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx

  data::CreateEntity::CreateEntity((data::CreateEntity *const)this);
  v2 = (int (**)(...))(&`vtable for'data::CreateGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = (((_BYTE)this - 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->gadget_id, v3);
  }
  this->gadget_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->camp_id, v3);
  }
  this->camp_id = 0;
  v4 = (((_BYTE)this - 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->camp_target_type, v4);
  }
  this->camp_target_type = None_22;
  if ( *(char *)(((unsigned __int64)&this->by_server >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->by_server, v4, &this->by_server);
  this->by_server = 0;
  v5 = ((_BYTE)this - 55) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->camp_follow_prop_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->camp_follow_prop_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->camp_follow_prop_owner, v5, v6);
  this->camp_follow_prop_owner = 0;
  v7 = ((_BYTE)this - 54) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->flush_ability_packet >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->flush_ability_packet >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->flush_ability_packet, v7, v8);
  this->flush_ability_packet = 0;
};

// Line 4232: range 000000001114847C-0000000011148805
void __cdecl data::CreateGadget::CreateGadget(data::CreateGadget *const this, const data::CreateGadget *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  uint32_t gadget_id; // ecx
  char v5; // dl
  uint32_t camp_id; // ecx
  char v7; // al
  __int64 v8; // rsi
  data::TargetType camp_target_type; // ecx
  char v10; // dl
  bool by_server; // cl
  char v12; // al
  __int64 v13; // rsi
  __int64 v14; // rdx
  bool camp_follow_prop_owner; // cl
  char v16; // dl
  __int64 v17; // rdx
  __int64 v18; // rsi
  __int64 v19; // rdx
  bool flush_ability_packet; // cl
  char v21; // dl
  __int64 v22; // rdx

  data::CreateEntity::CreateEntity((data::CreateEntity *const)this, (const data::CreateEntity *)a2);
  v2 = (int (**)(...))(&`vtable for'data::CreateGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = (((_BYTE)a2 - 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->gadget_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->gadget_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->gadget_id);
  }
  gadget_id = a2->gadget_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && (char)((((_BYTE)this - 68) & 7) + 3) >= v5 )
  {
    LOBYTE(v3) = v5 != 0;
    __asan_report_store4(&this->gadget_id, v3);
  }
  this->gadget_id = gadget_id;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camp_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->camp_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->camp_id);
  }
  camp_id = a2->camp_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(v3) = v7 != 0;
    __asan_report_store4(&this->camp_id, v3);
  }
  this->camp_id = camp_id;
  v8 = (((_BYTE)a2 - 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camp_target_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->camp_target_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->camp_target_type);
  }
  camp_target_type = a2->camp_target_type;
  v10 = *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v10 != 0;
  if ( v10 != 0 && (char)((((_BYTE)this - 60) & 7) + 3) >= v10 )
    __asan_report_store4(&this->camp_target_type, v8);
  this->camp_target_type = camp_target_type;
  if ( *(char *)(((unsigned __int64)&a2->by_server >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->by_server, v8, &a2->by_server);
  by_server = a2->by_server;
  v12 = *(_BYTE *)(((unsigned __int64)&this->by_server >> 3) + 0x7FFF8000);
  if ( v12 < 0 )
  {
    LOBYTE(v8) = v12 != 0;
    __asan_report_store1(&this->by_server, v8, &this->by_server);
  }
  this->by_server = by_server;
  v13 = ((_BYTE)a2 - 55) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&a2->camp_follow_prop_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&a2->camp_follow_prop_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&a2->camp_follow_prop_owner, v13, v14);
  camp_follow_prop_owner = a2->camp_follow_prop_owner;
  v16 = *(_BYTE *)(((unsigned __int64)&this->camp_follow_prop_owner >> 3) + 0x7FFF8000);
  LOBYTE(v13) = v16 != 0;
  v17 = (v16 != 0) & (unsigned __int8)((((unsigned __int8)this - 55) & 7) >= v16);
  if ( (_BYTE)v17 )
    __asan_report_store1(&this->camp_follow_prop_owner, v13, v17);
  this->camp_follow_prop_owner = camp_follow_prop_owner;
  v18 = ((_BYTE)a2 - 54) & 7;
  v19 = (*(_BYTE *)(((unsigned __int64)&a2->flush_ability_packet >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v18 >= *(_BYTE *)(((unsigned __int64)&a2->flush_ability_packet >> 3) + 0x7FFF8000));
  if ( (_BYTE)v19 )
    __asan_report_load1(&a2->flush_ability_packet, v18, v19);
  flush_ability_packet = a2->flush_ability_packet;
  v21 = *(_BYTE *)(((unsigned __int64)&this->flush_ability_packet >> 3) + 0x7FFF8000);
  LOBYTE(v18) = v21 != 0;
  v22 = (v21 != 0) & (unsigned __int8)((((unsigned __int8)this - 54) & 7) >= v21);
  if ( (_BYTE)v22 )
    __asan_report_store1(&this->flush_ability_packet, v18, v22);
  this->flush_ability_packet = flush_ability_packet;
};

// Line 4244: range 0000000011148AEE-0000000011148B3B
void __cdecl data::CreateGadget::~CreateGadget(data::CreateGadget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CreateGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::CreateEntity::~CreateEntity((data::CreateEntity *const)this);
};

// Line 4244: range 0000000011148B3C-0000000011148B66
void __cdecl data::CreateGadget::~CreateGadget(data::CreateGadget *const this)
{
  data::CreateGadget::~CreateGadget(this);
  operator delete(this, 0xD0uLL);
};

// Line 4249: range 00000000100A3C3C-00000000100A3C4C
const char *__cdecl data::CreateGadget::getTypeName(const data::CreateGadget *const this)
{
  return "CreateGadget";
};

// Line 4250: range 00000000100A3C4E-00000000100A3DEA
int32_t __cdecl data::CreateGadget::getHashNum(const data::CreateGadget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CreateGadget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CreateGadget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4269: range 0000000011148B68-0000000011148CE4
void __cdecl data::CreateMovingPlatform::CreateMovingPlatform(data::CreateMovingPlatform *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi

  data::CreateGadget::CreateGadget((data::CreateGadget *const)this);
  v2 = (int (**)(...))(&`vtable for'data::CreateMovingPlatform + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = (((_BYTE)this - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->route_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->route_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->route_id, v3);
  }
  this->route_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->detect_height, v3);
  }
  this->detect_height = 0.0;
  v4 = (((_BYTE)this - 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->detect_width, v4);
  }
  this->detect_width = 0.0;
  if ( *(char *)(((unsigned __int64)&this->enable_rotation_offset >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable_rotation_offset, v4, &this->enable_rotation_offset);
  this->enable_rotation_offset = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions);
};

// Line 4269: range 000000001114912E-00000000111493EC
void __cdecl data::CreateMovingPlatform::CreateMovingPlatform(
        data::CreateMovingPlatform *const this,
        const data::CreateMovingPlatform *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  uint32_t route_id; // ecx
  char v5; // dl
  float detect_height; // xmm0_4
  float detect_width; // xmm0_4
  __int64 v8; // rsi
  bool enable_rotation_offset; // cl
  char v10; // al

  data::CreateGadget::CreateGadget((data::CreateGadget *const)this, (const data::CreateGadget *)a2);
  v2 = (int (**)(...))(&`vtable for'data::CreateMovingPlatform + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = (((_BYTE)a2 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->route_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->route_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->route_id);
  }
  route_id = a2->route_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->route_id >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v5 != 0;
  if ( v5 != 0 && (char)((((_BYTE)this - 52) & 7) + 3) >= v5 )
    __asan_report_store4(&this->route_id, v3);
  this->route_id = route_id;
  if ( *(_BYTE *)(((unsigned __int64)&a2->detect_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->detect_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->detect_height);
  }
  detect_height = a2->detect_height;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->detect_height, v3);
  }
  this->detect_height = detect_height;
  if ( *(_BYTE *)(((unsigned __int64)&a2->detect_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->detect_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->detect_width);
  }
  detect_width = a2->detect_width;
  v8 = (((_BYTE)this - 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->detect_width, v8);
  }
  this->detect_width = detect_width;
  if ( *(char *)(((unsigned __int64)&a2->enable_rotation_offset >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable_rotation_offset, v8, &a2->enable_rotation_offset);
  enable_rotation_offset = a2->enable_rotation_offset;
  v10 = *(_BYTE *)(((unsigned __int64)&this->enable_rotation_offset >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(v8) = v10 != 0;
    __asan_report_store1(&this->enable_rotation_offset, v8, &this->enable_rotation_offset);
  }
  this->enable_rotation_offset = enable_rotation_offset;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, &a2->fail_actions);
};

// Line 4280: range 000000001130C1E0-000000001130C20A
void __cdecl data::CreateMovingPlatform::~CreateMovingPlatform(data::CreateMovingPlatform *const this)
{
  data::CreateMovingPlatform::~CreateMovingPlatform(this);
  operator delete(this, 0xF8uLL);
};

// Line 4280: range 000000001130C180-000000001130C1DF
void __cdecl data::CreateMovingPlatform::~CreateMovingPlatform(data::CreateMovingPlatform *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CreateMovingPlatform + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->fail_actions);
  data::CreateGadget::~CreateGadget((data::CreateGadget *const)this);
};

// Line 4285: range 00000000100A3DEC-00000000100A3DFC
const char *__cdecl data::CreateMovingPlatform::getTypeName(const data::CreateMovingPlatform *const this)
{
  return "CreateMovingPlatform";
};

// Line 4286: range 00000000100A3DFE-00000000100A3F9A
int32_t __cdecl data::CreateMovingPlatform::getHashNum(const data::CreateMovingPlatform *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CreateMovingPlatform::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CreateMovingPlatform",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4302: range 00000000111496D6-0000000011149717
void __cdecl data::CreateMovingPlatformFactory::CreateMovingPlatformFactory(
        data::CreateMovingPlatformFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CreateMovingPlatformFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CreateMovingPlatformFactory = v2;
};

// Line 4310: range 0000000011149A20-0000000011149BD6
void __cdecl data::TryTriggerPlatformStartMove::TryTriggerPlatformStartMove(
        data::TryTriggerPlatformStartMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TryTriggerPlatformStartMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->detect_height, v1);
  }
  this->detect_height = 0.0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->detect_width, v3);
  }
  this->detect_width = 0.0;
  if ( *(char *)(((unsigned __int64)&this->enable_rotation_offset >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable_rotation_offset, v3, &this->enable_rotation_offset);
  this->enable_rotation_offset = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions);
  if ( *(char *)(((unsigned __int64)&this->force_reset >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->force_reset, v3, &this->force_reset);
  this->force_reset = 0;
  v4 = ((_BYTE)this - 79) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->force_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->force_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->force_trigger, v4, v5);
  this->force_trigger = 0;
};

// Line 4310: range 000000001114A02C-000000001114A365
void __cdecl data::TryTriggerPlatformStartMove::TryTriggerPlatformStartMove(
        data::TryTriggerPlatformStartMove *const this,
        const data::TryTriggerPlatformStartMove *a2)
{
  int (**v2)(...); // rdx
  float detect_height; // xmm0_4
  float detect_width; // xmm0_4
  __int64 v5; // rsi
  bool enable_rotation_offset; // cl
  char v7; // al
  data::ConfigAbilityActionArray *p_fail_actions; // rsi
  bool force_reset; // cl
  char v10; // al
  __int64 v11; // rsi
  __int64 v12; // rdx
  bool force_trigger; // cl
  char v14; // dl
  __int64 v15; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TryTriggerPlatformStartMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->detect_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->detect_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->detect_height);
  }
  detect_height = a2->detect_height;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->detect_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->detect_height, a2);
  }
  this->detect_height = detect_height;
  if ( *(_BYTE *)(((unsigned __int64)&a2->detect_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->detect_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->detect_width);
  }
  detect_width = a2->detect_width;
  v5 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->detect_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->detect_width, v5);
  }
  this->detect_width = detect_width;
  if ( *(char *)(((unsigned __int64)&a2->enable_rotation_offset >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable_rotation_offset, v5, &a2->enable_rotation_offset);
  enable_rotation_offset = a2->enable_rotation_offset;
  v7 = *(_BYTE *)(((unsigned __int64)&this->enable_rotation_offset >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store1(&this->enable_rotation_offset, v5, &this->enable_rotation_offset);
  }
  this->enable_rotation_offset = enable_rotation_offset;
  p_fail_actions = &a2->fail_actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, &a2->fail_actions);
  if ( *(char *)(((unsigned __int64)&a2->force_reset >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->force_reset, p_fail_actions, &a2->force_reset);
  force_reset = a2->force_reset;
  v10 = *(_BYTE *)(((unsigned __int64)&this->force_reset >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(p_fail_actions) = v10 != 0;
    __asan_report_store1(&this->force_reset, p_fail_actions, &this->force_reset);
  }
  this->force_reset = force_reset;
  v11 = ((_BYTE)a2 - 79) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&a2->force_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&a2->force_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&a2->force_trigger, v11, v12);
  force_trigger = a2->force_trigger;
  v14 = *(_BYTE *)(((unsigned __int64)&this->force_trigger >> 3) + 0x7FFF8000);
  LOBYTE(v11) = v14 != 0;
  v15 = (v14 != 0) & (unsigned __int8)((((unsigned __int8)this - 79) & 7) >= v14);
  if ( (_BYTE)v15 )
    __asan_report_store1(&this->force_trigger, v11, v15);
  this->force_trigger = force_trigger;
};

// Line 4322: range 000000001130C0F4-000000001130C153
void __cdecl data::TryTriggerPlatformStartMove::~TryTriggerPlatformStartMove(
        data::TryTriggerPlatformStartMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryTriggerPlatformStartMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->fail_actions);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4322: range 000000001130C154-000000001130C17E
void __cdecl data::TryTriggerPlatformStartMove::~TryTriggerPlatformStartMove(
        data::TryTriggerPlatformStartMove *const this)
{
  data::TryTriggerPlatformStartMove::~TryTriggerPlatformStartMove(this);
  operator delete(this, 0xB8uLL);
};

// Line 4327: range 00000000100A3F9C-00000000100A3FAC
const char *__cdecl data::TryTriggerPlatformStartMove::getTypeName(const data::TryTriggerPlatformStartMove *const this)
{
  return "TryTriggerPlatformStartMove";
};

// Line 4328: range 00000000100A3FAE-00000000100A414A
int32_t __cdecl data::TryTriggerPlatformStartMove::getHashNum(const data::TryTriggerPlatformStartMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TryTriggerPlatformStartMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TryTriggerPlatformStartMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4344: range 000000001114A64E-000000001114A68F
void __cdecl data::TryTriggerPlatformStartMoveFactory::TryTriggerPlatformStartMoveFactory(
        data::TryTriggerPlatformStartMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryTriggerPlatformStartMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TryTriggerPlatformStartMoveFactory = v2;
};

// Line 4352: range 000000001114A998-000000001114AA09
void __cdecl data::TryTriggerTrampolineJump::TryTriggerTrampolineJump(data::TryTriggerTrampolineJump *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TryTriggerTrampolineJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions);
};

// Line 4352: range 000000001114AE5E-000000001114AF30
void __cdecl data::TryTriggerTrampolineJump::TryTriggerTrampolineJump(
        data::TryTriggerTrampolineJump *const this,
        const data::TryTriggerTrampolineJump *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TryTriggerTrampolineJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, &a2->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions, &a2->success_actions);
};

// Line 4360: range 000000001130C0C8-000000001130C0F2
void __cdecl data::TryTriggerTrampolineJump::~TryTriggerTrampolineJump(data::TryTriggerTrampolineJump *const this)
{
  data::TryTriggerTrampolineJump::~TryTriggerTrampolineJump(this);
  operator delete(this, 0xB8uLL);
};

// Line 4360: range 000000001130C056-000000001130C0C7
void __cdecl data::TryTriggerTrampolineJump::~TryTriggerTrampolineJump(data::TryTriggerTrampolineJump *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryTriggerTrampolineJump + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->fail_actions);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4365: range 00000000100A414C-00000000100A415C
const char *__cdecl data::TryTriggerTrampolineJump::getTypeName(const data::TryTriggerTrampolineJump *const this)
{
  return "TryTriggerTrampolineJump";
};

// Line 4366: range 00000000100A415E-00000000100A42FA
int32_t __cdecl data::TryTriggerTrampolineJump::getHashNum(const data::TryTriggerTrampolineJump *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TryTriggerTrampolineJump::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TryTriggerTrampolineJump",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4382: range 000000001114B21A-000000001114B25B
void __cdecl data::TryTriggerTrampolineJumpFactory::TryTriggerTrampolineJumpFactory(
        data::TryTriggerTrampolineJumpFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryTriggerTrampolineJumpFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TryTriggerTrampolineJumpFactory = v2;
};

// Line 4390: range 000000001114B564-000000001114B60E
void __cdecl data::KillGadget::KillGadget(data::KillGadget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::KillGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->gadget_info >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargetsByChildren>();
};

// Line 4390: range 000000001114BA60-000000001114BAD8
void __cdecl data::KillGadget::KillGadget(data::KillGadget *const this, const data::KillGadget *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::KillGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByChildren>::shared_ptr(&this->gadget_info, &a2->gadget_info);
};

// Line 4397: range 000000001130C02A-000000001130C054
void __cdecl data::KillGadget::~KillGadget(data::KillGadget *const this)
{
  data::KillGadget::~KillGadget(this);
  operator delete(this, 0x98uLL);
};

// Line 4397: range 000000001130BFCA-000000001130C029
void __cdecl data::KillGadget::~KillGadget(data::KillGadget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByChildren>::~shared_ptr(&this->gadget_info);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4402: range 00000000100A4338-00000000100A4348
const char *__cdecl data::KillGadget::getTypeName(const data::KillGadget *const this)
{
  return "KillGadget";
};

// Line 4403: range 00000000100A434A-00000000100A44E6
int32_t __cdecl data::KillGadget::getHashNum(const data::KillGadget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::KillGadget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "KillGadget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4419: range 000000001114BDC2-000000001114BE03
void __cdecl data::KillGadgetFactory::KillGadgetFactory(data::KillGadgetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillGadgetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_KillGadgetFactory = v2;
};

// Line 4427: range 000000001114C10C-000000001114C1FB
void __cdecl data::KillMultiBullet::KillMultiBullet(data::KillMultiBullet *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::KillMultiBullet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->gadget_info >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargetsByChildren>();
  if ( *(_BYTE *)(((unsigned __int64)&this->force_kill_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_kill_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->force_kill_time, v1);
  }
  this->force_kill_time = 0.0;
};

// Line 4427: range 000000001114C64A-000000001114C744
void __cdecl data::KillMultiBullet::KillMultiBullet(data::KillMultiBullet *const this, const data::KillMultiBullet *a2)
{
  int (**v2)(...); // rdx
  float force_kill_time; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::KillMultiBullet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByChildren>::shared_ptr(&this->gadget_info, &a2->gadget_info);
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_kill_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->force_kill_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->force_kill_time);
  }
  force_kill_time = a2->force_kill_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_kill_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_kill_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->force_kill_time, &a2->gadget_info);
  }
  this->force_kill_time = force_kill_time;
};

// Line 4435: range 000000001130BF9E-000000001130BFC8
void __cdecl data::KillMultiBullet::~KillMultiBullet(data::KillMultiBullet *const this)
{
  data::KillMultiBullet::~KillMultiBullet(this);
  operator delete(this, 0xA0uLL);
};

// Line 4435: range 000000001130BF3E-000000001130BF9D
void __cdecl data::KillMultiBullet::~KillMultiBullet(data::KillMultiBullet *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillMultiBullet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByChildren>::~shared_ptr(&this->gadget_info);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4440: range 00000000100A44E8-00000000100A44F8
const char *__cdecl data::KillMultiBullet::getTypeName(const data::KillMultiBullet *const this)
{
  return "KillMultiBullet";
};

// Line 4441: range 00000000100A44FA-00000000100A4696
int32_t __cdecl data::KillMultiBullet::getHashNum(const data::KillMultiBullet *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::KillMultiBullet::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "KillMultiBullet",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4457: range 000000001114CA2E-000000001114CA6F
void __cdecl data::KillMultiBulletFactory::KillMultiBulletFactory(data::KillMultiBulletFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillMultiBulletFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_KillMultiBulletFactory = v2;
};

// Line 4480: range 000000001114CED8-000000001114D10A
void __cdecl data::KillSelf::KillSelf(data::KillSelf *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::KillSelf + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v1);
  }
  this->duration = 0.0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_state_flage >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_state_flage >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->die_state_flage, v3);
  }
  this->die_state_flage = None_33;
  if ( *(char *)(((unsigned __int64)&this->ban_drop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ban_drop, v3, &this->ban_drop);
  this->ban_drop = 0;
  v4 = ((_BYTE)this - 111) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->ban_exp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->ban_exp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->ban_exp, v4, v5);
  this->ban_exp = 0;
  v6 = ((_BYTE)this - 110) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->ban_hppercentage_drop >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->ban_hppercentage_drop >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->ban_hppercentage_drop, v6, v7);
  this->ban_hppercentage_drop = 0;
  v8 = (((_BYTE)this - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->kill_self_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->kill_self_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->kill_self_type, v8);
  }
  this->kill_self_type = Normal_15;
  if ( *(char *)(((unsigned __int64)&this->hide_entity >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->hide_entity, v8, &this->hide_entity);
  this->hide_entity = 0;
};

// Line 4480: range 000000001114D55A-000000001114D966
void __cdecl data::KillSelf::KillSelf(data::KillSelf *const this, const data::KillSelf *a2)
{
  int (**v2)(...); // rdx
  float duration; // xmm0_4
  __int64 v4; // rsi
  data::DieStateFlag die_state_flage; // ecx
  char v6; // dl
  bool ban_drop; // cl
  char v8; // al
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool ban_exp; // cl
  char v12; // dl
  __int64 v13; // rdx
  __int64 v14; // rsi
  __int64 v15; // rdx
  bool ban_hppercentage_drop; // cl
  char v17; // dl
  __int64 v18; // rdx
  __int64 v19; // rsi
  data::KillSelfType kill_self_type; // ecx
  char v21; // dl
  bool hide_entity; // cl
  char v23; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::KillSelf + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, a2);
  }
  this->duration = duration;
  v4 = (((_BYTE)a2 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->die_state_flage >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->die_state_flage >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->die_state_flage);
  }
  die_state_flage = a2->die_state_flage;
  v6 = *(_BYTE *)(((unsigned __int64)&this->die_state_flage >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v6 != 0;
  if ( v6 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v6 )
    __asan_report_store4(&this->die_state_flage, v4);
  this->die_state_flage = die_state_flage;
  if ( *(char *)(((unsigned __int64)&a2->ban_drop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ban_drop, v4, &a2->ban_drop);
  ban_drop = a2->ban_drop;
  v8 = *(_BYTE *)(((unsigned __int64)&this->ban_drop >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(v4) = v8 != 0;
    __asan_report_store1(&this->ban_drop, v4, &this->ban_drop);
  }
  this->ban_drop = ban_drop;
  v9 = ((_BYTE)a2 - 111) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->ban_exp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->ban_exp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->ban_exp, v9, v10);
  ban_exp = a2->ban_exp;
  v12 = *(_BYTE *)(((unsigned __int64)&this->ban_exp >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this - 111) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->ban_exp, v9, v13);
  this->ban_exp = ban_exp;
  v14 = ((_BYTE)a2 - 110) & 7;
  v15 = (*(_BYTE *)(((unsigned __int64)&a2->ban_hppercentage_drop >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v14 >= *(_BYTE *)(((unsigned __int64)&a2->ban_hppercentage_drop >> 3) + 0x7FFF8000));
  if ( (_BYTE)v15 )
    __asan_report_load1(&a2->ban_hppercentage_drop, v14, v15);
  ban_hppercentage_drop = a2->ban_hppercentage_drop;
  v17 = *(_BYTE *)(((unsigned __int64)&this->ban_hppercentage_drop >> 3) + 0x7FFF8000);
  LOBYTE(v14) = v17 != 0;
  v18 = (v17 != 0) & (unsigned __int8)((((unsigned __int8)this - 110) & 7) >= v17);
  if ( (_BYTE)v18 )
    __asan_report_store1(&this->ban_hppercentage_drop, v14, v18);
  this->ban_hppercentage_drop = ban_hppercentage_drop;
  v19 = (((_BYTE)a2 - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->kill_self_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->kill_self_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->kill_self_type);
  }
  kill_self_type = a2->kill_self_type;
  v21 = *(_BYTE *)(((unsigned __int64)&this->kill_self_type >> 3) + 0x7FFF8000);
  LOBYTE(v19) = v21 != 0;
  if ( v21 != 0 && (char)((((_BYTE)this - 108) & 7) + 3) >= v21 )
    __asan_report_store4(&this->kill_self_type, v19);
  this->kill_self_type = kill_self_type;
  if ( *(char *)(((unsigned __int64)&a2->hide_entity >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->hide_entity, v19, &a2->hide_entity);
  hide_entity = a2->hide_entity;
  v23 = *(_BYTE *)(((unsigned __int64)&this->hide_entity >> 3) + 0x7FFF8000);
  if ( v23 < 0 )
  {
    LOBYTE(v19) = v23 != 0;
    __asan_report_store1(&this->hide_entity, v19, &this->hide_entity);
  }
  this->hide_entity = hide_entity;
};

// Line 4493: range 000000001130BEC4-000000001130BF11
void __cdecl data::KillSelf::~KillSelf(data::KillSelf *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillSelf + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4493: range 000000001130BF12-000000001130BF3C
void __cdecl data::KillSelf::~KillSelf(data::KillSelf *const this)
{
  data::KillSelf::~KillSelf(this);
  operator delete(this, 0xA0uLL);
};

// Line 4498: range 00000000100A4698-00000000100A46A8
const char *__cdecl data::KillSelf::getTypeName(const data::KillSelf *const this)
{
  return "KillSelf";
};

// Line 4499: range 00000000100A46AA-00000000100A4846
int32_t __cdecl data::KillSelf::getHashNum(const data::KillSelf *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::KillSelf::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "KillSelf",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4515: range 000000001114DC50-000000001114DC91
void __cdecl data::KillSelfFactory::KillSelfFactory(data::KillSelfFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillSelfFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_KillSelfFactory = v2;
};

// Line 4523: range 000000001114DF9A-000000001114E087
void __cdecl data::TriggerAudio::TriggerAudio(data::TriggerAudio *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAudio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->responder >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->responder >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->responder, v1);
  }
  this->responder = Caster_2;
  if ( *(_WORD *)(((unsigned __int64)&this->operation >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigAudioOperation>();
};

// Line 4523: range 000000001114E4D6-000000001114E5CD
void __cdecl data::TriggerAudio::TriggerAudio(data::TriggerAudio *const this, const data::TriggerAudio *a2)
{
  int (**v2)(...); // rdx
  data::OpResponder responder; // ecx
  char v4; // al
  const data::TriggerAudio *v5; // [rsp+0h] [rbp-10h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAudio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->responder >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->responder >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->responder);
  }
  responder = a2->responder;
  v4 = *(_BYTE *)(((unsigned __int64)&this->responder >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->responder, a2);
  }
  this->responder = responder;
  std::shared_ptr<data::ConfigAudioOperation>::shared_ptr(&this->operation, &v5->operation);
};

// Line 4531: range 000000001130BE98-000000001130BEC2
void __cdecl data::TriggerAudio::~TriggerAudio(data::TriggerAudio *const this)
{
  data::TriggerAudio::~TriggerAudio(this);
  operator delete(this, 0xA0uLL);
};

// Line 4531: range 000000001130BE38-000000001130BE97
void __cdecl data::TriggerAudio::~TriggerAudio(data::TriggerAudio *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAudio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigAudioOperation>::~shared_ptr(&this->operation);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4536: range 00000000100A4884-00000000100A4894
const char *__cdecl data::TriggerAudio::getTypeName(const data::TriggerAudio *const this)
{
  return "TriggerAudio";
};

// Line 4537: range 00000000100A4896-00000000100A4A32
int32_t __cdecl data::TriggerAudio::getHashNum(const data::TriggerAudio *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerAudio::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerAudio",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4553: range 000000001114E8B6-000000001114E8F7
void __cdecl data::TriggerAudioFactory::TriggerAudioFactory(data::TriggerAudioFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAudioFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerAudioFactory = v2;
};

// Line 4561: range 000000001114EC00-000000001114EC9F
void __cdecl data::TriggerDropEquipParts::TriggerDropEquipParts(data::TriggerDropEquipParts *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerDropEquipParts + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->drop_all >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->drop_all, v1, &this->drop_all);
  this->drop_all = 0;
  std::vector<std::string>::vector(&this->equip_parts);
};

// Line 4561: range 000000001114F0E2-000000001114F1FD
void __cdecl data::TriggerDropEquipParts::TriggerDropEquipParts(
        data::TriggerDropEquipParts *const this,
        const data::TriggerDropEquipParts *a2)
{
  int (**v2)(...); // rdx
  bool drop_all; // cl
  char v4; // al
  const data::TriggerDropEquipParts *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerDropEquipParts + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->drop_all >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->drop_all, a2, &a2->drop_all);
  drop_all = a2->drop_all;
  v4 = *(_BYTE *)(((unsigned __int64)&this->drop_all >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->drop_all, a2, &this->drop_all);
  }
  this->drop_all = drop_all;
  std::vector<std::string>::vector(&this->equip_parts, &v5->equip_parts);
};

// Line 4569: range 000000001130BE0C-000000001130BE36
void __cdecl data::TriggerDropEquipParts::~TriggerDropEquipParts(data::TriggerDropEquipParts *const this)
{
  data::TriggerDropEquipParts::~TriggerDropEquipParts(this);
  operator delete(this, 0xA8uLL);
};

// Line 4569: range 000000001130BDAC-000000001130BE0B
void __cdecl data::TriggerDropEquipParts::~TriggerDropEquipParts(data::TriggerDropEquipParts *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerDropEquipParts + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->equip_parts);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4574: range 00000000100A4A34-00000000100A4A44
const char *__cdecl data::TriggerDropEquipParts::getTypeName(const data::TriggerDropEquipParts *const this)
{
  return "TriggerDropEquipParts";
};

// Line 4575: range 00000000100A4A46-00000000100A4BE2
int32_t __cdecl data::TriggerDropEquipParts::getHashNum(const data::TriggerDropEquipParts *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerDropEquipParts::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerDropEquipParts",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4591: range 000000001114F4E6-000000001114F527
void __cdecl data::TriggerDropEquipPartsFactory::TriggerDropEquipPartsFactory(
        data::TriggerDropEquipPartsFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerDropEquipPartsFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerDropEquipPartsFactory = v2;
};

// Line 4599: range 000000001114F830-000000001114F93E
void __cdecl data::TriggerThrowEquipPart::TriggerThrowEquipPart(data::TriggerThrowEquipPart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerThrowEquipPart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->equip_part);
  if ( *(char *)(((unsigned __int64)&this->chase_attack_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->chase_attack_target, v1, &this->chase_attack_target);
  this->chase_attack_target = 0;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 4599: range 000000001114FD8E-000000001114FEC9
void __cdecl data::TriggerThrowEquipPart::TriggerThrowEquipPart(
        data::TriggerThrowEquipPart *const this,
        const data::TriggerThrowEquipPart *a2)
{
  int (**v2)(...); // rdx
  std::string *p_equip_part; // rsi
  bool chase_attack_target; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerThrowEquipPart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_equip_part = &a2->equip_part;
  std::string::basic_string(&this->equip_part, &a2->equip_part);
  if ( *(char *)(((unsigned __int64)&a2->chase_attack_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->chase_attack_target, p_equip_part, &a2->chase_attack_target);
  chase_attack_target = a2->chase_attack_target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->chase_attack_target >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_equip_part) = v5 != 0;
    __asan_report_store1(&this->chase_attack_target, p_equip_part, &this->chase_attack_target);
  }
  this->chase_attack_target = chase_attack_target;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
};

// Line 4608: range 000000001130BD0E-000000001130BD7F
void __cdecl data::TriggerThrowEquipPart::~TriggerThrowEquipPart(data::TriggerThrowEquipPart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerThrowEquipPart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::string::~string(&this->equip_part);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4608: range 000000001130BD80-000000001130BDAA
void __cdecl data::TriggerThrowEquipPart::~TriggerThrowEquipPart(data::TriggerThrowEquipPart *const this)
{
  data::TriggerThrowEquipPart::~TriggerThrowEquipPart(this);
  operator delete(this, 0xC0uLL);
};

// Line 4613: range 00000000100A4BE4-00000000100A4BF4
const char *__cdecl data::TriggerThrowEquipPart::getTypeName(const data::TriggerThrowEquipPart *const this)
{
  return "TriggerThrowEquipPart";
};

// Line 4614: range 00000000100A4BF6-00000000100A4D92
int32_t __cdecl data::TriggerThrowEquipPart::getHashNum(const data::TriggerThrowEquipPart *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerThrowEquipPart::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerThrowEquipPart",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4630: range 00000000111501B2-00000000111501F3
void __cdecl data::TriggerThrowEquipPartFactory::TriggerThrowEquipPartFactory(
        data::TriggerThrowEquipPartFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerThrowEquipPartFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerThrowEquipPartFactory = v2;
};

// Line 4638: range 00000000111504FC-000000001115059E
void __cdecl data::TriggerCreateGadgetToEquipPart::TriggerCreateGadgetToEquipPart(
        data::TriggerCreateGadgetToEquipPart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerCreateGadgetToEquipPart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->gadget_id, v1);
  }
  this->gadget_id = 0;
  std::string::basic_string(&this->equip_part);
};

// Line 4638: range 00000000111509E8-0000000011150B02
void __cdecl data::TriggerCreateGadgetToEquipPart::TriggerCreateGadgetToEquipPart(
        data::TriggerCreateGadgetToEquipPart *const this,
        const data::TriggerCreateGadgetToEquipPart *a2)
{
  int (**v2)(...); // rdx
  uint32_t gadget_id; // ecx
  char v4; // al
  const data::TriggerCreateGadgetToEquipPart *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerCreateGadgetToEquipPart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->gadget_id);
  }
  gadget_id = a2->gadget_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->gadget_id, a2);
  }
  this->gadget_id = gadget_id;
  std::string::basic_string(&this->equip_part, &v5->equip_part);
};

// Line 4646: range 000000001130BCE2-000000001130BD0C
void __cdecl data::TriggerCreateGadgetToEquipPart::~TriggerCreateGadgetToEquipPart(
        data::TriggerCreateGadgetToEquipPart *const this)
{
  data::TriggerCreateGadgetToEquipPart::~TriggerCreateGadgetToEquipPart(this);
  operator delete(this, 0xB0uLL);
};

// Line 4646: range 000000001130BC82-000000001130BCE1
void __cdecl data::TriggerCreateGadgetToEquipPart::~TriggerCreateGadgetToEquipPart(
        data::TriggerCreateGadgetToEquipPart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerCreateGadgetToEquipPart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->equip_part);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4651: range 00000000100A4D94-00000000100A4DA4
const char *__cdecl data::TriggerCreateGadgetToEquipPart::getTypeName(
        const data::TriggerCreateGadgetToEquipPart *const this)
{
  return "TriggerCreateGadgetToEquipPart";
};

// Line 4652: range 00000000100A4DA6-00000000100A4F42
int32_t __cdecl data::TriggerCreateGadgetToEquipPart::getHashNum(
        const data::TriggerCreateGadgetToEquipPart *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerCreateGadgetToEquipPart::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerCreateGadgetToEquipPart",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4668: range 0000000011150DEC-0000000011150E2D
void __cdecl data::TriggerCreateGadgetToEquipPartFactory::TriggerCreateGadgetToEquipPartFactory(
        data::TriggerCreateGadgetToEquipPartFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerCreateGadgetToEquipPartFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerCreateGadgetToEquipPartFactory = v2;
};

// Line 4676: range 0000000011151136-00000000111511D5
void __cdecl data::TriggerAuxWeaponTrans::TriggerAuxWeaponTrans(data::TriggerAuxWeaponTrans *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAuxWeaponTrans + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
  std::string::basic_string(&this->equip_part);
};

// Line 4676: range 000000001115161E-0000000011151739
void __cdecl data::TriggerAuxWeaponTrans::TriggerAuxWeaponTrans(
        data::TriggerAuxWeaponTrans *const this,
        const data::TriggerAuxWeaponTrans *a2)
{
  int (**v2)(...); // rdx
  bool set_enable; // cl
  char v4; // al
  const data::TriggerAuxWeaponTrans *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerAuxWeaponTrans + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, a2, &a2->set_enable);
  set_enable = a2->set_enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->set_enable, a2, &this->set_enable);
  }
  this->set_enable = set_enable;
  std::string::basic_string(&this->equip_part, &v5->equip_part);
};

// Line 4684: range 000000001130BC56-000000001130BC80
void __cdecl data::TriggerAuxWeaponTrans::~TriggerAuxWeaponTrans(data::TriggerAuxWeaponTrans *const this)
{
  data::TriggerAuxWeaponTrans::~TriggerAuxWeaponTrans(this);
  operator delete(this, 0xB0uLL);
};

// Line 4684: range 000000001130BBF6-000000001130BC55
void __cdecl data::TriggerAuxWeaponTrans::~TriggerAuxWeaponTrans(data::TriggerAuxWeaponTrans *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAuxWeaponTrans + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->equip_part);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4689: range 00000000100A4F44-00000000100A4F54
const char *__cdecl data::TriggerAuxWeaponTrans::getTypeName(const data::TriggerAuxWeaponTrans *const this)
{
  return "TriggerAuxWeaponTrans";
};

// Line 4690: range 00000000100A4F56-00000000100A50F2
int32_t __cdecl data::TriggerAuxWeaponTrans::getHashNum(const data::TriggerAuxWeaponTrans *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerAuxWeaponTrans::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerAuxWeaponTrans",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4706: range 0000000011151A22-0000000011151A63
void __cdecl data::TriggerAuxWeaponTransFactory::TriggerAuxWeaponTransFactory(
        data::TriggerAuxWeaponTransFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerAuxWeaponTransFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerAuxWeaponTransFactory = v2;
};

// Line 4714: range 0000000011151D6C-0000000011151DB9
void __cdecl data::TriggerGadgetInteractive::TriggerGadgetInteractive(data::TriggerGadgetInteractive *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerGadgetInteractive + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 4714: range 0000000011152208-0000000011152260
void __cdecl data::TriggerGadgetInteractive::TriggerGadgetInteractive(
        data::TriggerGadgetInteractive *const this,
        const data::TriggerGadgetInteractive *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerGadgetInteractive + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 4720: range 000000001130BB7C-000000001130BBC9
void __cdecl data::TriggerGadgetInteractive::~TriggerGadgetInteractive(data::TriggerGadgetInteractive *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerGadgetInteractive + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4720: range 000000001130BBCA-000000001130BBF4
void __cdecl data::TriggerGadgetInteractive::~TriggerGadgetInteractive(data::TriggerGadgetInteractive *const this)
{
  data::TriggerGadgetInteractive::~TriggerGadgetInteractive(this);
  operator delete(this, 0x88uLL);
};

// Line 4725: range 00000000100A50F4-00000000100A5104
const char *__cdecl data::TriggerGadgetInteractive::getTypeName(const data::TriggerGadgetInteractive *const this)
{
  return "TriggerGadgetInteractive";
};

// Line 4726: range 00000000100A5106-00000000100A52A2
int32_t __cdecl data::TriggerGadgetInteractive::getHashNum(const data::TriggerGadgetInteractive *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerGadgetInteractive::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerGadgetInteractive",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4742: range 000000001115254A-000000001115258B
void __cdecl data::TriggerGadgetInteractiveFactory::TriggerGadgetInteractiveFactory(
        data::TriggerGadgetInteractiveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerGadgetInteractiveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerGadgetInteractiveFactory = v2;
};

// Line 4750: range 0000000011152894-0000000011152921
void __cdecl data::TriggerSetVisible::TriggerSetVisible(data::TriggerSetVisible *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetVisible + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->visible >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->visible, v1, &this->visible);
  this->visible = 0;
};

// Line 4750: range 0000000011152D6A-0000000011152E42
void __cdecl data::TriggerSetVisible::TriggerSetVisible(
        data::TriggerSetVisible *const this,
        const data::TriggerSetVisible *a2)
{
  int (**v2)(...); // rdx
  bool visible; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetVisible + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->visible >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->visible, a2, &a2->visible);
  visible = a2->visible;
  v4 = *(_BYTE *)(((unsigned __int64)&this->visible >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->visible, a2, &this->visible);
  }
  this->visible = visible;
};

// Line 4757: range 000000001130BB50-000000001130BB7A
void __cdecl data::TriggerSetVisible::~TriggerSetVisible(data::TriggerSetVisible *const this)
{
  data::TriggerSetVisible::~TriggerSetVisible(this);
  operator delete(this, 0x90uLL);
};

// Line 4757: range 000000001130BB02-000000001130BB4F
void __cdecl data::TriggerSetVisible::~TriggerSetVisible(data::TriggerSetVisible *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetVisible + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4762: range 00000000100A52A4-00000000100A52B4
const char *__cdecl data::TriggerSetVisible::getTypeName(const data::TriggerSetVisible *const this)
{
  return "TriggerSetVisible";
};

// Line 4763: range 00000000100A52B6-00000000100A5452
int32_t __cdecl data::TriggerSetVisible::getHashNum(const data::TriggerSetVisible *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerSetVisible::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerSetVisible",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4779: range 000000001115312C-000000001115316D
void __cdecl data::TriggerSetVisibleFactory::TriggerSetVisibleFactory(data::TriggerSetVisibleFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetVisibleFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerSetVisibleFactory = v2;
};

// Line 4787: range 0000000011153476-000000001115358D
void __cdecl data::TriggerSetCastShadow::TriggerSetCastShadow(data::TriggerSetCastShadow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetCastShadow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->cast_shadow >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->cast_shadow, v1, &this->cast_shadow);
  this->cast_shadow = 0;
  v3 = ((_BYTE)this - 119) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->affect_fake_shadow >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->affect_fake_shadow >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->affect_fake_shadow, v3, v4);
  this->affect_fake_shadow = 0;
  v5 = ((_BYTE)this - 118) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->force_enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->force_enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->force_enable, v5, v6);
  this->force_enable = 0;
};

// Line 4787: range 00000000111539D6-0000000011153BC2
void __cdecl data::TriggerSetCastShadow::TriggerSetCastShadow(
        data::TriggerSetCastShadow *const this,
        const data::TriggerSetCastShadow *a2)
{
  int (**v2)(...); // rdx
  bool cast_shadow; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool affect_fake_shadow; // cl
  char v8; // dl
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool force_enable; // cl
  char v13; // dl
  __int64 v14; // rdx
  const data::TriggerSetCastShadow *v15; // [rsp+0h] [rbp-10h]

  v15 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetCastShadow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->cast_shadow >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->cast_shadow, a2, &a2->cast_shadow);
  cast_shadow = a2->cast_shadow;
  v4 = *(_BYTE *)(((unsigned __int64)&this->cast_shadow >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->cast_shadow, a2, &this->cast_shadow);
  }
  this->cast_shadow = cast_shadow;
  v5 = ((_BYTE)v15 - 119) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v15->affect_fake_shadow >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v15->affect_fake_shadow >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v15->affect_fake_shadow, v5, v6);
  affect_fake_shadow = v15->affect_fake_shadow;
  v8 = *(_BYTE *)(((unsigned __int64)&this->affect_fake_shadow >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 119) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->affect_fake_shadow, v5, v9);
  this->affect_fake_shadow = affect_fake_shadow;
  v10 = ((_BYTE)v15 - 118) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v15->force_enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v15->force_enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v15->force_enable, v10, v11);
  force_enable = v15->force_enable;
  v13 = *(_BYTE *)(((unsigned __int64)&this->force_enable >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this - 118) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->force_enable, v10, v14);
  this->force_enable = force_enable;
};

// Line 4796: range 000000001130BA88-000000001130BAD5
void __cdecl data::TriggerSetCastShadow::~TriggerSetCastShadow(data::TriggerSetCastShadow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetCastShadow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4796: range 000000001130BAD6-000000001130BB00
void __cdecl data::TriggerSetCastShadow::~TriggerSetCastShadow(data::TriggerSetCastShadow *const this)
{
  data::TriggerSetCastShadow::~TriggerSetCastShadow(this);
  operator delete(this, 0x90uLL);
};

// Line 4801: range 00000000100A5454-00000000100A5464
const char *__cdecl data::TriggerSetCastShadow::getTypeName(const data::TriggerSetCastShadow *const this)
{
  return "TriggerSetCastShadow";
};

// Line 4802: range 00000000100A5466-00000000100A5602
int32_t __cdecl data::TriggerSetCastShadow::getHashNum(const data::TriggerSetCastShadow *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerSetCastShadow::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerSetCastShadow",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4818: range 0000000011153EAC-0000000011153EED
void __cdecl data::TriggerSetCastShadowFactory::TriggerSetCastShadowFactory(
        data::TriggerSetCastShadowFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetCastShadowFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerSetCastShadowFactory = v2;
};

// Line 4826: range 00000000111541F6-0000000011154283
void __cdecl data::TriggerSetPassThrough::TriggerSetPassThrough(data::TriggerSetPassThrough *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetPassThrough + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->pass_through >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->pass_through, v1, &this->pass_through);
  this->pass_through = 0;
};

// Line 4826: range 00000000111546CC-00000000111547A4
void __cdecl data::TriggerSetPassThrough::TriggerSetPassThrough(
        data::TriggerSetPassThrough *const this,
        const data::TriggerSetPassThrough *a2)
{
  int (**v2)(...); // rdx
  bool pass_through; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetPassThrough + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->pass_through >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->pass_through, a2, &a2->pass_through);
  pass_through = a2->pass_through;
  v4 = *(_BYTE *)(((unsigned __int64)&this->pass_through >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->pass_through, a2, &this->pass_through);
  }
  this->pass_through = pass_through;
};

// Line 4833: range 000000001130BA5C-000000001130BA86
void __cdecl data::TriggerSetPassThrough::~TriggerSetPassThrough(data::TriggerSetPassThrough *const this)
{
  data::TriggerSetPassThrough::~TriggerSetPassThrough(this);
  operator delete(this, 0x90uLL);
};

// Line 4833: range 000000001130BA0E-000000001130BA5B
void __cdecl data::TriggerSetPassThrough::~TriggerSetPassThrough(data::TriggerSetPassThrough *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetPassThrough + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4838: range 00000000100A5604-00000000100A5614
const char *__cdecl data::TriggerSetPassThrough::getTypeName(const data::TriggerSetPassThrough *const this)
{
  return "TriggerSetPassThrough";
};

// Line 4839: range 00000000100A5616-00000000100A57B2
int32_t __cdecl data::TriggerSetPassThrough::getHashNum(const data::TriggerSetPassThrough *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerSetPassThrough::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerSetPassThrough",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4855: range 0000000011154A8E-0000000011154ACF
void __cdecl data::TriggerSetPassThroughFactory::TriggerSetPassThroughFactory(
        data::TriggerSetPassThroughFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetPassThroughFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerSetPassThroughFactory = v2;
};

// Line 4863: range 0000000011154DD8-0000000011154E77
void __cdecl data::TriggerSetRenderersEnable::TriggerSetRenderersEnable(data::TriggerSetRenderersEnable *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetRenderersEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->render_names);
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 4863: range 00000000111552BA-00000000111553D5
void __cdecl data::TriggerSetRenderersEnable::TriggerSetRenderersEnable(
        data::TriggerSetRenderersEnable *const this,
        const data::TriggerSetRenderersEnable *a2)
{
  int (**v2)(...); // rdx
  data::StringList *p_render_names; // rsi
  bool set_enable; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetRenderersEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_render_names = &a2->render_names;
  std::vector<std::string>::vector(&this->render_names, &a2->render_names);
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, p_render_names, &a2->set_enable);
  set_enable = a2->set_enable;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_render_names) = v5 != 0;
    __asan_report_store1(&this->set_enable, p_render_names, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 4871: range 000000001130B9E2-000000001130BA0C
void __cdecl data::TriggerSetRenderersEnable::~TriggerSetRenderersEnable(data::TriggerSetRenderersEnable *const this)
{
  data::TriggerSetRenderersEnable::~TriggerSetRenderersEnable(this);
  operator delete(this, 0xA8uLL);
};

// Line 4871: range 000000001130B982-000000001130B9E1
void __cdecl data::TriggerSetRenderersEnable::~TriggerSetRenderersEnable(data::TriggerSetRenderersEnable *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetRenderersEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->render_names);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4876: range 00000000100A57B4-00000000100A57C4
const char *__cdecl data::TriggerSetRenderersEnable::getTypeName(const data::TriggerSetRenderersEnable *const this)
{
  return "TriggerSetRenderersEnable";
};

// Line 4877: range 00000000100A57C6-00000000100A5962
int32_t __cdecl data::TriggerSetRenderersEnable::getHashNum(const data::TriggerSetRenderersEnable *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerSetRenderersEnable::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerSetRenderersEnable",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4893: range 00000000111556BE-00000000111556FF
void __cdecl data::TriggerSetRenderersEnableFactory::TriggerSetRenderersEnableFactory(
        data::TriggerSetRenderersEnableFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetRenderersEnableFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerSetRenderersEnableFactory = v2;
};

// Line 4901: range 0000000011155A08-0000000011155AE7
void __cdecl data::TriggerHideWeapon::TriggerHideWeapon(data::TriggerHideWeapon *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerHideWeapon + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->visible >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->visible, v1, &this->visible);
  this->visible = 0;
  std::vector<std::string>::vector(&this->part_names);
  if ( *(char *)(((unsigned __int64)&this->modify_another_value >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->modify_another_value, v1, &this->modify_another_value);
  this->modify_another_value = 0;
};

// Line 4901: range 0000000011155F30-00000000111560CB
void __cdecl data::TriggerHideWeapon::TriggerHideWeapon(
        data::TriggerHideWeapon *const this,
        const data::TriggerHideWeapon *a2)
{
  int (**v2)(...); // rdx
  bool visible; // cl
  char v4; // al
  data::StringList *p_part_names; // rsi
  bool modify_another_value; // cl
  char v7; // al
  const data::TriggerHideWeapon *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerHideWeapon + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->visible >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->visible, a2, &a2->visible);
  visible = a2->visible;
  v4 = *(_BYTE *)(((unsigned __int64)&this->visible >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->visible, a2, &this->visible);
  }
  this->visible = visible;
  p_part_names = &v8->part_names;
  std::vector<std::string>::vector(&this->part_names, &v8->part_names);
  if ( *(char *)(((unsigned __int64)&v8->modify_another_value >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v8->modify_another_value, p_part_names, &v8->modify_another_value);
  modify_another_value = v8->modify_another_value;
  v7 = *(_BYTE *)(((unsigned __int64)&this->modify_another_value >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(p_part_names) = v7 != 0;
    __asan_report_store1(&this->modify_another_value, p_part_names, &this->modify_another_value);
  }
  this->modify_another_value = modify_another_value;
};

// Line 4910: range 000000001130B956-000000001130B980
void __cdecl data::TriggerHideWeapon::~TriggerHideWeapon(data::TriggerHideWeapon *const this)
{
  data::TriggerHideWeapon::~TriggerHideWeapon(this);
  operator delete(this, 0xB0uLL);
};

// Line 4910: range 000000001130B8F6-000000001130B955
void __cdecl data::TriggerHideWeapon::~TriggerHideWeapon(data::TriggerHideWeapon *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerHideWeapon + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->part_names);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4915: range 00000000100A5964-00000000100A5974
const char *__cdecl data::TriggerHideWeapon::getTypeName(const data::TriggerHideWeapon *const this)
{
  return "TriggerHideWeapon";
};

// Line 4916: range 00000000100A5976-00000000100A5B12
int32_t __cdecl data::TriggerHideWeapon::getHashNum(const data::TriggerHideWeapon *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerHideWeapon::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerHideWeapon",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4932: range 00000000111563B4-00000000111563F5
void __cdecl data::TriggerHideWeaponFactory::TriggerHideWeaponFactory(data::TriggerHideWeaponFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerHideWeaponFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerHideWeaponFactory = v2;
};

// Line 4940: range 00000000111566FE-000000001115681F
void __cdecl data::TriggerTaunt::TriggerTaunt(data::TriggerTaunt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerTaunt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->taunt_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->taunt_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->taunt_level, v1);
  }
  this->taunt_level = Ability_TauntLevel_3;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->care_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->care_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->care_value, v3);
  }
  this->care_value = 99999.0;
  if ( *(char *)(((unsigned __int64)&this->taunt_modifier_owner >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->taunt_modifier_owner, v3, &this->taunt_modifier_owner);
  this->taunt_modifier_owner = 0;
};

// Line 4940: range 0000000011156C70-0000000011156E59
void __cdecl data::TriggerTaunt::TriggerTaunt(data::TriggerTaunt *const this, const data::TriggerTaunt *a2)
{
  int (**v2)(...); // rdx
  data::TauntLevel taunt_level; // ecx
  char v4; // al
  float care_value; // xmm0_4
  __int64 v6; // rsi
  bool taunt_modifier_owner; // cl
  char v8; // al
  const data::TriggerTaunt *v9; // [rsp+0h] [rbp-10h]

  v9 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerTaunt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->taunt_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->taunt_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->taunt_level);
  }
  taunt_level = a2->taunt_level;
  v4 = *(_BYTE *)(((unsigned __int64)&this->taunt_level >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->taunt_level, a2);
  }
  this->taunt_level = taunt_level;
  if ( *(_BYTE *)(((unsigned __int64)&v9->care_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v9 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->care_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v9->care_value);
  }
  care_value = v9->care_value;
  v6 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->care_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->care_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->care_value, v6);
  }
  this->care_value = care_value;
  if ( *(char *)(((unsigned __int64)&v9->taunt_modifier_owner >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v9->taunt_modifier_owner, v6, &v9->taunt_modifier_owner);
  taunt_modifier_owner = v9->taunt_modifier_owner;
  v8 = *(_BYTE *)(((unsigned __int64)&this->taunt_modifier_owner >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store1(&this->taunt_modifier_owner, v6, &this->taunt_modifier_owner);
  }
  this->taunt_modifier_owner = taunt_modifier_owner;
};

// Line 4949: range 000000001130B8CA-000000001130B8F4
void __cdecl data::TriggerTaunt::~TriggerTaunt(data::TriggerTaunt *const this)
{
  data::TriggerTaunt::~TriggerTaunt(this);
  operator delete(this, 0x98uLL);
};

// Line 4949: range 000000001130B87C-000000001130B8C9
void __cdecl data::TriggerTaunt::~TriggerTaunt(data::TriggerTaunt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerTaunt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4954: range 00000000100A5B14-00000000100A5B24
const char *__cdecl data::TriggerTaunt::getTypeName(const data::TriggerTaunt *const this)
{
  return "TriggerTaunt";
};

// Line 4955: range 00000000100A5B26-00000000100A5CC2
int32_t __cdecl data::TriggerTaunt::getHashNum(const data::TriggerTaunt *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerTaunt::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerTaunt",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4971: range 0000000011157142-0000000011157183
void __cdecl data::TriggerTauntFactory::TriggerTauntFactory(data::TriggerTauntFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerTauntFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerTauntFactory = v2;
};

// Line 4979: range 000000001115748C-0000000011157519
void __cdecl data::TriggerSetChestLock::TriggerSetChestLock(data::TriggerSetChestLock *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetChestLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->locked >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->locked, v1, &this->locked);
  this->locked = 0;
};

// Line 4979: range 0000000011157962-0000000011157A3A
void __cdecl data::TriggerSetChestLock::TriggerSetChestLock(
        data::TriggerSetChestLock *const this,
        const data::TriggerSetChestLock *a2)
{
  int (**v2)(...); // rdx
  bool locked; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetChestLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->locked >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->locked, a2, &a2->locked);
  locked = a2->locked;
  v4 = *(_BYTE *)(((unsigned __int64)&this->locked >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->locked, a2, &this->locked);
  }
  this->locked = locked;
};

// Line 4986: range 000000001130B802-000000001130B84F
void __cdecl data::TriggerSetChestLock::~TriggerSetChestLock(data::TriggerSetChestLock *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetChestLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 4986: range 000000001130B850-000000001130B87A
void __cdecl data::TriggerSetChestLock::~TriggerSetChestLock(data::TriggerSetChestLock *const this)
{
  data::TriggerSetChestLock::~TriggerSetChestLock(this);
  operator delete(this, 0x90uLL);
};

// Line 4991: range 00000000100A5CC4-00000000100A5CD4
const char *__cdecl data::TriggerSetChestLock::getTypeName(const data::TriggerSetChestLock *const this)
{
  return "TriggerSetChestLock";
};

// Line 4992: range 00000000100A5CD6-00000000100A5E72
int32_t __cdecl data::TriggerSetChestLock::getHashNum(const data::TriggerSetChestLock *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerSetChestLock::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerSetChestLock",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5008: range 0000000011157D24-0000000011157D65
void __cdecl data::TriggerSetChestLockFactory::TriggerSetChestLockFactory(data::TriggerSetChestLockFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetChestLockFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerSetChestLockFactory = v2;
};

// Line 5016: range 000000001115806E-00000000111580FB
void __cdecl data::ClearLockTarget::ClearLockTarget(data::ClearLockTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ClearLockTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->only_avatar >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->only_avatar, v1, &this->only_avatar);
  this->only_avatar = 1;
};

// Line 5016: range 0000000011158544-000000001115861C
void __cdecl data::ClearLockTarget::ClearLockTarget(data::ClearLockTarget *const this, const data::ClearLockTarget *a2)
{
  int (**v2)(...); // rdx
  bool only_avatar; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClearLockTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->only_avatar >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->only_avatar, a2, &a2->only_avatar);
  only_avatar = a2->only_avatar;
  v4 = *(_BYTE *)(((unsigned __int64)&this->only_avatar >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->only_avatar, a2, &this->only_avatar);
  }
  this->only_avatar = only_avatar;
};

// Line 5023: range 000000001130B788-000000001130B7D5
void __cdecl data::ClearLockTarget::~ClearLockTarget(data::ClearLockTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearLockTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5023: range 000000001130B7D6-000000001130B800
void __cdecl data::ClearLockTarget::~ClearLockTarget(data::ClearLockTarget *const this)
{
  data::ClearLockTarget::~ClearLockTarget(this);
  operator delete(this, 0x90uLL);
};

// Line 5028: range 00000000100A5E74-00000000100A5E84
const char *__cdecl data::ClearLockTarget::getTypeName(const data::ClearLockTarget *const this)
{
  return "ClearLockTarget";
};

// Line 5029: range 00000000100A5E86-00000000100A6022
int32_t __cdecl data::ClearLockTarget::getHashNum(const data::ClearLockTarget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClearLockTarget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClearLockTarget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5045: range 0000000011158906-0000000011158947
void __cdecl data::ClearLockTargetFactory::ClearLockTargetFactory(data::ClearLockTargetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearLockTargetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClearLockTargetFactory = v2;
};

// Line 5053: range 0000000011158C50-0000000011158CEF
void __cdecl data::SetPoseBool::SetPoseBool(data::SetPoseBool *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetPoseBool + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->bool_id);
  if ( *(char *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->value, v1, &this->value);
  this->value = 0;
};

// Line 5053: range 0000000011159138-0000000011159253
void __cdecl data::SetPoseBool::SetPoseBool(data::SetPoseBool *const this, const data::SetPoseBool *a2)
{
  int (**v2)(...); // rdx
  std::string *p_bool_id; // rsi
  bool value; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetPoseBool + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_bool_id = &a2->bool_id;
  std::string::basic_string(&this->bool_id, &a2->bool_id);
  if ( *(char *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->value, p_bool_id, &a2->value);
  value = a2->value;
  v5 = *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_bool_id) = v5 != 0;
    __asan_report_store1(&this->value, p_bool_id, &this->value);
  }
  this->value = value;
};

// Line 5061: range 000000001130B6FC-000000001130B75B
void __cdecl data::SetPoseBool::~SetPoseBool(data::SetPoseBool *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPoseBool + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->bool_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5061: range 000000001130B75C-000000001130B786
void __cdecl data::SetPoseBool::~SetPoseBool(data::SetPoseBool *const this)
{
  data::SetPoseBool::~SetPoseBool(this);
  operator delete(this, 0xB0uLL);
};

// Line 5066: range 00000000100A6024-00000000100A6034
const char *__cdecl data::SetPoseBool::getTypeName(const data::SetPoseBool *const this)
{
  return "SetPoseBool";
};

// Line 5067: range 00000000100A6036-00000000100A61D2
int32_t __cdecl data::SetPoseBool::getHashNum(const data::SetPoseBool *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetPoseBool::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetPoseBool",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5083: range 000000001115953C-000000001115957D
void __cdecl data::SetPoseBoolFactory::SetPoseBoolFactory(data::SetPoseBoolFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPoseBoolFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetPoseBoolFactory = v2;
};

// Line 5091: range 0000000011159886-0000000011159928
void __cdecl data::SetPoseInt::SetPoseInt(data::SetPoseInt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetPoseInt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->int_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value, v1);
  }
  this->value = 0;
};

// Line 5091: range 0000000011159D72-0000000011159E8C
void __cdecl data::SetPoseInt::SetPoseInt(data::SetPoseInt *const this, const data::SetPoseInt *a2)
{
  int (**v2)(...); // rdx
  std::string *p_int_id; // rsi
  int32_t value; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetPoseInt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_int_id = &a2->int_id;
  std::string::basic_string(&this->int_id, &a2->int_id);
  if ( *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->value);
  }
  value = a2->value;
  v5 = *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_int_id) = v5 != 0;
    __asan_report_store4(&this->value, p_int_id);
  }
  this->value = value;
};

// Line 5099: range 000000001130B6D0-000000001130B6FA
void __cdecl data::SetPoseInt::~SetPoseInt(data::SetPoseInt *const this)
{
  data::SetPoseInt::~SetPoseInt(this);
  operator delete(this, 0xB0uLL);
};

// Line 5099: range 000000001130B670-000000001130B6CF
void __cdecl data::SetPoseInt::~SetPoseInt(data::SetPoseInt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPoseInt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->int_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5104: range 00000000100A61D4-00000000100A61E4
const char *__cdecl data::SetPoseInt::getTypeName(const data::SetPoseInt *const this)
{
  return "SetPoseInt";
};

// Line 5105: range 00000000100A61E6-00000000100A6382
int32_t __cdecl data::SetPoseInt::getHashNum(const data::SetPoseInt *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetPoseInt::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetPoseInt",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5121: range 000000001115A176-000000001115A1B7
void __cdecl data::SetPoseIntFactory::SetPoseIntFactory(data::SetPoseIntFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPoseIntFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetPoseIntFactory = v2;
};

// Line 5129: range 000000001115A4C0-000000001115A531
void __cdecl data::SetPoseFloat::SetPoseFloat(data::SetPoseFloat *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetPoseFloat + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->float_id);
  data::DynamicFloat::DynamicFloat(&this->value);
};

// Line 5129: range 000000001115A984-000000001115AA56
void __cdecl data::SetPoseFloat::SetPoseFloat(data::SetPoseFloat *const this, const data::SetPoseFloat *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetPoseFloat + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->float_id, &a2->float_id);
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 5137: range 000000001130B644-000000001130B66E
void __cdecl data::SetPoseFloat::~SetPoseFloat(data::SetPoseFloat *const this)
{
  data::SetPoseFloat::~SetPoseFloat(this);
  operator delete(this, 0xC8uLL);
};

// Line 5137: range 000000001130B5D2-000000001130B643
void __cdecl data::SetPoseFloat::~SetPoseFloat(data::SetPoseFloat *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPoseFloat + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  std::string::~string(&this->float_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5142: range 00000000100A6384-00000000100A6394
const char *__cdecl data::SetPoseFloat::getTypeName(const data::SetPoseFloat *const this)
{
  return "SetPoseFloat";
};

// Line 5143: range 00000000100A6396-00000000100A6532
int32_t __cdecl data::SetPoseFloat::getHashNum(const data::SetPoseFloat *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetPoseFloat::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetPoseFloat",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5159: range 000000001115AD40-000000001115AD81
void __cdecl data::SetPoseFloatFactory::SetPoseFloatFactory(data::SetPoseFloatFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPoseFloatFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetPoseFloatFactory = v2;
};

// Line 5167: range 000000001115B08A-000000001115B0E9
void __cdecl data::TriggerFaceAnimation::TriggerFaceAnimation(data::TriggerFaceAnimation *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerFaceAnimation + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->face_animation);
};

// Line 5167: range 000000001115B52C-000000001115B5C7
void __cdecl data::TriggerFaceAnimation::TriggerFaceAnimation(
        data::TriggerFaceAnimation *const this,
        const data::TriggerFaceAnimation *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerFaceAnimation + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->face_animation, &a2->face_animation);
};

// Line 5174: range 000000001130B5A6-000000001130B5D0
void __cdecl data::TriggerFaceAnimation::~TriggerFaceAnimation(data::TriggerFaceAnimation *const this)
{
  data::TriggerFaceAnimation::~TriggerFaceAnimation(this);
  operator delete(this, 0xA8uLL);
};

// Line 5174: range 000000001130B546-000000001130B5A5
void __cdecl data::TriggerFaceAnimation::~TriggerFaceAnimation(data::TriggerFaceAnimation *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerFaceAnimation + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->face_animation);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5179: range 00000000100A6534-00000000100A6544
const char *__cdecl data::TriggerFaceAnimation::getTypeName(const data::TriggerFaceAnimation *const this)
{
  return "TriggerFaceAnimation";
};

// Line 5180: range 00000000100A6546-00000000100A66E2
int32_t __cdecl data::TriggerFaceAnimation::getHashNum(const data::TriggerFaceAnimation *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerFaceAnimation::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerFaceAnimation",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5196: range 000000001115B8B0-000000001115B8F1
void __cdecl data::TriggerFaceAnimationFactory::TriggerFaceAnimationFactory(
        data::TriggerFaceAnimationFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerFaceAnimationFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerFaceAnimationFactory = v2;
};

// Line 5204: range 000000001115BBFA-000000001115BC87
void __cdecl data::EnableCrashDamage::EnableCrashDamage(data::EnableCrashDamage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableCrashDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 5204: range 000000001115C0D0-000000001115C1A8
void __cdecl data::EnableCrashDamage::EnableCrashDamage(
        data::EnableCrashDamage *const this,
        const data::EnableCrashDamage *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableCrashDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 5211: range 000000001130B51A-000000001130B544
void __cdecl data::EnableCrashDamage::~EnableCrashDamage(data::EnableCrashDamage *const this)
{
  data::EnableCrashDamage::~EnableCrashDamage(this);
  operator delete(this, 0x90uLL);
};

// Line 5211: range 000000001130B4CC-000000001130B519
void __cdecl data::EnableCrashDamage::~EnableCrashDamage(data::EnableCrashDamage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableCrashDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5216: range 00000000100A66E4-00000000100A66F4
const char *__cdecl data::EnableCrashDamage::getTypeName(const data::EnableCrashDamage *const this)
{
  return "EnableCrashDamage";
};

// Line 5217: range 00000000100A66F6-00000000100A6892
int32_t __cdecl data::EnableCrashDamage::getHashNum(const data::EnableCrashDamage *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableCrashDamage::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableCrashDamage",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5233: range 000000001115C492-000000001115C4D3
void __cdecl data::EnableCrashDamageFactory::EnableCrashDamageFactory(data::EnableCrashDamageFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableCrashDamageFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableCrashDamageFactory = v2;
};

// Line 5241: range 000000001115C7DC-000000001115C83B
void __cdecl data::SetCrashDamage::SetCrashDamage(data::SetCrashDamage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetCrashDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
};

// Line 5241: range 000000001115CC7E-000000001115CD19
void __cdecl data::SetCrashDamage::SetCrashDamage(data::SetCrashDamage *const this, const data::SetCrashDamage *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetCrashDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key, &a2->key);
};

// Line 5248: range 000000001130B4A0-000000001130B4CA
void __cdecl data::SetCrashDamage::~SetCrashDamage(data::SetCrashDamage *const this)
{
  data::SetCrashDamage::~SetCrashDamage(this);
  operator delete(this, 0xA8uLL);
};

// Line 5248: range 000000001130B440-000000001130B49F
void __cdecl data::SetCrashDamage::~SetCrashDamage(data::SetCrashDamage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCrashDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5253: range 00000000100A6894-00000000100A68A4
const char *__cdecl data::SetCrashDamage::getTypeName(const data::SetCrashDamage *const this)
{
  return "SetCrashDamage";
};

// Line 5254: range 00000000100A68A6-00000000100A6A42
int32_t __cdecl data::SetCrashDamage::getHashNum(const data::SetCrashDamage *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetCrashDamage::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetCrashDamage",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5270: range 000000001115D002-000000001115D043
void __cdecl data::SetCrashDamageFactory::SetCrashDamageFactory(data::SetCrashDamageFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCrashDamageFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetCrashDamageFactory = v2;
};

// Line 5278: range 000000001115D34C-000000001115D546
void __cdecl data::TryFindBlinkPoint::TryFindBlinkPoint(data::TryFindBlinkPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->forward_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->forward_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->forward_angle, v1);
  }
  this->forward_angle = 0.0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_range, v3);
  }
  this->min_range = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, v3);
  }
  this->max_range = 0.0;
  v4 = (((_BYTE)this - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->limit_y >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->limit_y, v4);
  }
  this->limit_y = 2.5;
  if ( *(char *)(((unsigned __int64)&this->ignore_water >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ignore_water, v4, &this->ignore_water);
  this->ignore_water = 0;
  v5 = ((_BYTE)this - 103) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->check_in_camera >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->check_in_camera >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->check_in_camera, v5, v6);
  this->check_in_camera = 0;
};

// Line 5278: range 000000001115D996-000000001115DD20
void __cdecl data::TryFindBlinkPoint::TryFindBlinkPoint(
        data::TryFindBlinkPoint *const this,
        const data::TryFindBlinkPoint *a2)
{
  int (**v2)(...); // rdx
  float forward_angle; // xmm0_4
  float min_range; // xmm0_4
  __int64 v5; // rsi
  float max_range; // xmm0_4
  float limit_y; // xmm0_4
  __int64 v8; // rsi
  bool ignore_water; // cl
  char v10; // al
  __int64 v11; // rsi
  __int64 v12; // rdx
  bool check_in_camera; // cl
  char v14; // dl
  __int64 v15; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->forward_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->forward_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->forward_angle);
  }
  forward_angle = a2->forward_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->forward_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->forward_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->forward_angle, a2);
  }
  this->forward_angle = forward_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_range);
  }
  min_range = a2->min_range;
  v5 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_range, v5);
  }
  this->min_range = min_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_range);
  }
  max_range = a2->max_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, v5);
  }
  this->max_range = max_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->limit_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->limit_y >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->limit_y);
  }
  limit_y = a2->limit_y;
  v8 = (((_BYTE)this - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->limit_y >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->limit_y, v8);
  }
  this->limit_y = limit_y;
  if ( *(char *)(((unsigned __int64)&a2->ignore_water >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ignore_water, v8, &a2->ignore_water);
  ignore_water = a2->ignore_water;
  v10 = *(_BYTE *)(((unsigned __int64)&this->ignore_water >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(v8) = v10 != 0;
    __asan_report_store1(&this->ignore_water, v8, &this->ignore_water);
  }
  this->ignore_water = ignore_water;
  v11 = ((_BYTE)a2 - 103) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&a2->check_in_camera >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&a2->check_in_camera >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&a2->check_in_camera, v11, v12);
  check_in_camera = a2->check_in_camera;
  v14 = *(_BYTE *)(((unsigned __int64)&this->check_in_camera >> 3) + 0x7FFF8000);
  LOBYTE(v11) = v14 != 0;
  v15 = (v14 != 0) & (unsigned __int8)((((unsigned __int8)this - 103) & 7) >= v14);
  if ( (_BYTE)v15 )
    __asan_report_store1(&this->check_in_camera, v11, v15);
  this->check_in_camera = check_in_camera;
};

// Line 5290: range 000000001130B414-000000001130B43E
void __cdecl data::TryFindBlinkPoint::~TryFindBlinkPoint(data::TryFindBlinkPoint *const this)
{
  data::TryFindBlinkPoint::~TryFindBlinkPoint(this);
  operator delete(this, 0xA0uLL);
};

// Line 5290: range 000000001130B3C6-000000001130B413
void __cdecl data::TryFindBlinkPoint::~TryFindBlinkPoint(data::TryFindBlinkPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5295: range 00000000100A6A44-00000000100A6A54
const char *__cdecl data::TryFindBlinkPoint::getTypeName(const data::TryFindBlinkPoint *const this)
{
  return "TryFindBlinkPoint";
};

// Line 5296: range 00000000100A6A56-00000000100A6BF2
int32_t __cdecl data::TryFindBlinkPoint::getHashNum(const data::TryFindBlinkPoint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TryFindBlinkPoint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TryFindBlinkPoint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5312: range 000000001115E00A-000000001115E04B
void __cdecl data::TryFindBlinkPointFactory::TryFindBlinkPointFactory(data::TryFindBlinkPointFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPointFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TryFindBlinkPointFactory = v2;
};

// Line 5334: range 000000001115E4B4-000000001115E65A
void __cdecl data::TryFindBlinkPointByBorn::TryFindBlinkPointByBorn(data::TryFindBlinkPointByBorn *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPointByBorn + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(char *)(((unsigned __int64)&this->hit_scene_test >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->hit_scene_test, v1, &this->hit_scene_test);
  this->hit_scene_test = 1;
  v3 = (((_BYTE)this - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->hit_scene_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->hit_scene_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->hit_scene_type, v3);
  }
  this->hit_scene_type = BlinkHitSceneTestByStraightLine;
  data::DynamicFloat::DynamicFloat(&this->limit_y, 2.5);
  if ( *(char *)(((unsigned __int64)&this->ignore_water >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ignore_water, v3, &this->ignore_water);
  this->ignore_water = 0;
};

// Line 5334: range 000000001115EAAE-000000001115ED0A
void __cdecl data::TryFindBlinkPointByBorn::TryFindBlinkPointByBorn(
        data::TryFindBlinkPointByBorn *const this,
        const data::TryFindBlinkPointByBorn *a2)
{
  int (**v2)(...); // rdx
  data::ConfigBornTypePtr *p_born; // rsi
  bool hit_scene_test; // cl
  char v5; // al
  __int64 v6; // rsi
  data::BlinkHitSceneTestType hit_scene_type; // ecx
  char v8; // dl
  data::DynamicFloat *p_limit_y; // rsi
  bool ignore_water; // cl
  char v11; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPointByBorn + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_born = &a2->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(char *)(((unsigned __int64)&a2->hit_scene_test >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->hit_scene_test, p_born, &a2->hit_scene_test);
  hit_scene_test = a2->hit_scene_test;
  v5 = *(_BYTE *)(((unsigned __int64)&this->hit_scene_test >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_born) = v5 != 0;
    __asan_report_store1(&this->hit_scene_test, p_born, &this->hit_scene_test);
  }
  this->hit_scene_test = hit_scene_test;
  v6 = (((_BYTE)a2 - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->hit_scene_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->hit_scene_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->hit_scene_type);
  }
  hit_scene_type = a2->hit_scene_type;
  v8 = *(_BYTE *)(((unsigned __int64)&this->hit_scene_type >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this - 100) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->hit_scene_type, v6);
  }
  this->hit_scene_type = hit_scene_type;
  p_limit_y = &a2->limit_y;
  data::DynamicFloat::DynamicFloat(&this->limit_y, &a2->limit_y);
  if ( *(char *)(((unsigned __int64)&a2->ignore_water >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ignore_water, p_limit_y, &a2->ignore_water);
  ignore_water = a2->ignore_water;
  v11 = *(_BYTE *)(((unsigned __int64)&this->ignore_water >> 3) + 0x7FFF8000);
  if ( v11 < 0 )
  {
    LOBYTE(p_limit_y) = v11 != 0;
    __asan_report_store1(&this->ignore_water, p_limit_y, &this->ignore_water);
  }
  this->ignore_water = ignore_water;
};

// Line 5345: range 000000001130B39A-000000001130B3C4
void __cdecl data::TryFindBlinkPointByBorn::~TryFindBlinkPointByBorn(data::TryFindBlinkPointByBorn *const this)
{
  data::TryFindBlinkPointByBorn::~TryFindBlinkPointByBorn(this);
  operator delete(this, 0xC8uLL);
};

// Line 5345: range 000000001130B328-000000001130B399
void __cdecl data::TryFindBlinkPointByBorn::~TryFindBlinkPointByBorn(data::TryFindBlinkPointByBorn *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPointByBorn + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->limit_y);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5350: range 00000000100A6BF4-00000000100A6C04
const char *__cdecl data::TryFindBlinkPointByBorn::getTypeName(const data::TryFindBlinkPointByBorn *const this)
{
  return "TryFindBlinkPointByBorn";
};

// Line 5351: range 00000000100A6C06-00000000100A6DA2
int32_t __cdecl data::TryFindBlinkPointByBorn::getHashNum(const data::TryFindBlinkPointByBorn *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TryFindBlinkPointByBorn::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TryFindBlinkPointByBorn",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5367: range 000000001115EFF4-000000001115F035
void __cdecl data::TryFindBlinkPointByBornFactory::TryFindBlinkPointByBornFactory(
        data::TryFindBlinkPointByBornFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryFindBlinkPointByBornFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TryFindBlinkPointByBornFactory = v2;
};

// Line 5375: range 000000001115F33E-000000001115F502
void __cdecl data::TryFindMotionChangePosByBorn::TryFindMotionChangePosByBorn(
        data::TryFindMotionChangePosByBorn *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TryFindMotionChangePosByBorn + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_target, v1, &this->set_target);
  this->set_target = 1;
  v3 = ((_BYTE)this - 71) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->hit_scene_test >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->hit_scene_test >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->hit_scene_test, v3, v4);
  this->hit_scene_test = 1;
  data::DynamicFloat::DynamicFloat(&this->limit_y, 2.5);
  if ( *(char *)(((unsigned __int64)&this->ignore_water >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ignore_water, v3, &this->ignore_water);
  this->ignore_water = 0;
};

// Line 5375: range 000000001115F94C-000000001115FBDA
void __cdecl data::TryFindMotionChangePosByBorn::TryFindMotionChangePosByBorn(
        data::TryFindMotionChangePosByBorn *const this,
        const data::TryFindMotionChangePosByBorn *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  bool set_target; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool hit_scene_test; // cl
  char v9; // dl
  __int64 v10; // rdx
  data::DynamicFloat *p_limit_y; // rsi
  bool ignore_water; // cl
  char v13; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TryFindMotionChangePosByBorn + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(char *)(((unsigned __int64)&a2->set_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_target, p_key, &a2->set_target);
  set_target = a2->set_target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_target >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store1(&this->set_target, p_key, &this->set_target);
  }
  this->set_target = set_target;
  v6 = ((_BYTE)a2 - 71) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->hit_scene_test >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->hit_scene_test >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->hit_scene_test, v6, v7);
  hit_scene_test = a2->hit_scene_test;
  v9 = *(_BYTE *)(((unsigned __int64)&this->hit_scene_test >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this - 71) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->hit_scene_test, v6, v10);
  this->hit_scene_test = hit_scene_test;
  p_limit_y = &a2->limit_y;
  data::DynamicFloat::DynamicFloat(&this->limit_y, &a2->limit_y);
  if ( *(char *)(((unsigned __int64)&a2->ignore_water >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ignore_water, p_limit_y, &a2->ignore_water);
  ignore_water = a2->ignore_water;
  v13 = *(_BYTE *)(((unsigned __int64)&this->ignore_water >> 3) + 0x7FFF8000);
  if ( v13 < 0 )
  {
    LOBYTE(p_limit_y) = v13 != 0;
    __asan_report_store1(&this->ignore_water, p_limit_y, &this->ignore_water);
  }
  this->ignore_water = ignore_water;
};

// Line 5387: range 000000001130B278-000000001130B2FB
void __cdecl data::TryFindMotionChangePosByBorn::~TryFindMotionChangePosByBorn(
        data::TryFindMotionChangePosByBorn *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryFindMotionChangePosByBorn + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->limit_y);
  std::string::~string(&this->key);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5387: range 000000001130B2FC-000000001130B326
void __cdecl data::TryFindMotionChangePosByBorn::~TryFindMotionChangePosByBorn(
        data::TryFindMotionChangePosByBorn *const this)
{
  data::TryFindMotionChangePosByBorn::~TryFindMotionChangePosByBorn(this);
  operator delete(this, 0xE8uLL);
};

// Line 5392: range 00000000100A6DA4-00000000100A6DB4
const char *__cdecl data::TryFindMotionChangePosByBorn::getTypeName(
        const data::TryFindMotionChangePosByBorn *const this)
{
  return "TryFindMotionChangePosByBorn";
};

// Line 5393: range 00000000100A6DB6-00000000100A6F52
int32_t __cdecl data::TryFindMotionChangePosByBorn::getHashNum(const data::TryFindMotionChangePosByBorn *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TryFindMotionChangePosByBorn::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TryFindMotionChangePosByBorn",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5409: range 000000001115FEC4-000000001115FF05
void __cdecl data::TryFindMotionChangePosByBornFactory::TryFindMotionChangePosByBornFactory(
        data::TryFindMotionChangePosByBornFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TryFindMotionChangePosByBornFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TryFindMotionChangePosByBornFactory = v2;
};

// Line 5417: range 000000001116020E-000000001116025B
void __cdecl data::DoBlink::DoBlink(data::DoBlink *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DoBlink + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 5417: range 00000000111606AA-0000000011160702
void __cdecl data::DoBlink::DoBlink(data::DoBlink *const this, const data::DoBlink *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoBlink + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 5423: range 000000001130B24C-000000001130B276
void __cdecl data::DoBlink::~DoBlink(data::DoBlink *const this)
{
  data::DoBlink::~DoBlink(this);
  operator delete(this, 0x88uLL);
};

// Line 5423: range 000000001130B1FE-000000001130B24B
void __cdecl data::DoBlink::~DoBlink(data::DoBlink *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoBlink + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5428: range 00000000100A6F54-00000000100A6F64
const char *__cdecl data::DoBlink::getTypeName(const data::DoBlink *const this)
{
  return "DoBlink";
};

// Line 5429: range 00000000100A6F66-00000000100A7102
int32_t __cdecl data::DoBlink::getHashNum(const data::DoBlink *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoBlink::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoBlink",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5445: range 00000000111609EC-0000000011160A2D
void __cdecl data::DoBlinkFactory::DoBlinkFactory(data::DoBlinkFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoBlinkFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoBlinkFactory = v2;
};

// Line 5453: range 0000000011160D36-0000000011160DE7
void __cdecl data::DoBlinkByGlobalPos::DoBlinkByGlobalPos(data::DoBlinkByGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DoBlinkByGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->position_key);
  std::string::basic_string(&this->direction_key);
  if ( *(char *)(((unsigned __int64)&this->use_global_up >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_global_up, v1, &this->use_global_up);
  this->use_global_up = 0;
};

// Line 5453: range 0000000011161230-0000000011161382
void __cdecl data::DoBlinkByGlobalPos::DoBlinkByGlobalPos(
        data::DoBlinkByGlobalPos *const this,
        const data::DoBlinkByGlobalPos *a2)
{
  int (**v2)(...); // rdx
  std::string *p_direction_key; // rsi
  bool use_global_up; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoBlinkByGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->position_key, &a2->position_key);
  p_direction_key = &a2->direction_key;
  std::string::basic_string(&this->direction_key, &a2->direction_key);
  if ( *(char *)(((unsigned __int64)&a2->use_global_up >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_global_up, p_direction_key, &a2->use_global_up);
  use_global_up = a2->use_global_up;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_global_up >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_direction_key) = v5 != 0;
    __asan_report_store1(&this->use_global_up, p_direction_key, &this->use_global_up);
  }
  this->use_global_up = use_global_up;
};

// Line 5462: range 000000001130B160-000000001130B1D1
void __cdecl data::DoBlinkByGlobalPos::~DoBlinkByGlobalPos(data::DoBlinkByGlobalPos *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoBlinkByGlobalPos + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->direction_key);
  std::string::~string(&this->position_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5462: range 000000001130B1D2-000000001130B1FC
void __cdecl data::DoBlinkByGlobalPos::~DoBlinkByGlobalPos(data::DoBlinkByGlobalPos *const this)
{
  data::DoBlinkByGlobalPos::~DoBlinkByGlobalPos(this);
  operator delete(this, 0xD0uLL);
};

// Line 5467: range 00000000100A7104-00000000100A7114
const char *__cdecl data::DoBlinkByGlobalPos::getTypeName(const data::DoBlinkByGlobalPos *const this)
{
  return "DoBlinkByGlobalPos";
};

// Line 5468: range 00000000100A7116-00000000100A72B2
int32_t __cdecl data::DoBlinkByGlobalPos::getHashNum(const data::DoBlinkByGlobalPos *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoBlinkByGlobalPos::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoBlinkByGlobalPos",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5484: range 000000001116166C-00000000111616AD
void __cdecl data::DoBlinkByGlobalPosFactory::DoBlinkByGlobalPosFactory(data::DoBlinkByGlobalPosFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoBlinkByGlobalPosFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoBlinkByGlobalPosFactory = v2;
};

// Line 5492: range 00000000111619B6-0000000011161A90
void __cdecl data::AvatarDoBlink::AvatarDoBlink(data::AvatarDoBlink *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarDoBlink + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->prefer_input >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->prefer_input, v1, &this->prefer_input);
  this->prefer_input = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->distance, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->distance = 0.0;
};

// Line 5492: range 0000000011161EDA-0000000011162044
void __cdecl data::AvatarDoBlink::AvatarDoBlink(data::AvatarDoBlink *const this, const data::AvatarDoBlink *a2)
{
  int (**v2)(...); // rdx
  bool prefer_input; // cl
  char v4; // al
  float distance; // xmm0_4
  const data::AvatarDoBlink *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarDoBlink + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->prefer_input >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->prefer_input, a2, &a2->prefer_input);
  prefer_input = a2->prefer_input;
  v4 = *(_BYTE *)(((unsigned __int64)&this->prefer_input >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->prefer_input, a2, &this->prefer_input);
  }
  this->prefer_input = prefer_input;
  if ( *(_BYTE *)(((unsigned __int64)&v6->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->distance);
  }
  distance = v6->distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->distance, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->distance = distance;
};

// Line 5500: range 000000001130B134-000000001130B15E
void __cdecl data::AvatarDoBlink::~AvatarDoBlink(data::AvatarDoBlink *const this)
{
  data::AvatarDoBlink::~AvatarDoBlink(this);
  operator delete(this, 0x90uLL);
};

// Line 5500: range 000000001130B0E6-000000001130B133
void __cdecl data::AvatarDoBlink::~AvatarDoBlink(data::AvatarDoBlink *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarDoBlink + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5505: range 00000000100A72B4-00000000100A72C4
const char *__cdecl data::AvatarDoBlink::getTypeName(const data::AvatarDoBlink *const this)
{
  return "AvatarDoBlink";
};

// Line 5506: range 00000000100A72C6-00000000100A7462
int32_t __cdecl data::AvatarDoBlink::getHashNum(const data::AvatarDoBlink *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarDoBlink::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarDoBlink",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5522: range 000000001116232E-000000001116236F
void __cdecl data::AvatarDoBlinkFactory::AvatarDoBlinkFactory(data::AvatarDoBlinkFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarDoBlinkFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarDoBlinkFactory = v2;
};

// Line 5530: range 0000000011162678-0000000011162717
void __cdecl data::EnableHitBoxByName::EnableHitBoxByName(data::EnableHitBoxByName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableHitBoxByName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->hit_box_names);
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 5530: range 0000000011162B5A-0000000011162C75
void __cdecl data::EnableHitBoxByName::EnableHitBoxByName(
        data::EnableHitBoxByName *const this,
        const data::EnableHitBoxByName *a2)
{
  int (**v2)(...); // rdx
  data::StringList *p_hit_box_names; // rsi
  bool set_enable; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableHitBoxByName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_hit_box_names = &a2->hit_box_names;
  std::vector<std::string>::vector(&this->hit_box_names, &a2->hit_box_names);
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, p_hit_box_names, &a2->set_enable);
  set_enable = a2->set_enable;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_hit_box_names) = v5 != 0;
    __asan_report_store1(&this->set_enable, p_hit_box_names, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 5538: range 000000001130B05A-000000001130B0B9
void __cdecl data::EnableHitBoxByName::~EnableHitBoxByName(data::EnableHitBoxByName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHitBoxByName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->hit_box_names);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5538: range 000000001130B0BA-000000001130B0E4
void __cdecl data::EnableHitBoxByName::~EnableHitBoxByName(data::EnableHitBoxByName *const this)
{
  data::EnableHitBoxByName::~EnableHitBoxByName(this);
  operator delete(this, 0xA8uLL);
};

// Line 5543: range 00000000100A7464-00000000100A7474
const char *__cdecl data::EnableHitBoxByName::getTypeName(const data::EnableHitBoxByName *const this)
{
  return "EnableHitBoxByName";
};

// Line 5544: range 00000000100A7476-00000000100A7612
int32_t __cdecl data::EnableHitBoxByName::getHashNum(const data::EnableHitBoxByName *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableHitBoxByName::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableHitBoxByName",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5560: range 0000000011162F5E-0000000011162F9F
void __cdecl data::EnableHitBoxByNameFactory::EnableHitBoxByNameFactory(data::EnableHitBoxByNameFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHitBoxByNameFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableHitBoxByNameFactory = v2;
};

// Line 5568: range 00000000111632A8-0000000011163347
void __cdecl data::EnablePushColliderName::EnablePushColliderName(data::EnablePushColliderName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnablePushColliderName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->push_collider_names);
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 5568: range 000000001116378A-00000000111638A5
void __cdecl data::EnablePushColliderName::EnablePushColliderName(
        data::EnablePushColliderName *const this,
        const data::EnablePushColliderName *a2)
{
  int (**v2)(...); // rdx
  data::StringList *p_push_collider_names; // rsi
  bool set_enable; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnablePushColliderName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_push_collider_names = &a2->push_collider_names;
  std::vector<std::string>::vector(&this->push_collider_names, &a2->push_collider_names);
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, p_push_collider_names, &a2->set_enable);
  set_enable = a2->set_enable;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_push_collider_names) = v5 != 0;
    __asan_report_store1(&this->set_enable, p_push_collider_names, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 5576: range 000000001130AFCE-000000001130B02D
void __cdecl data::EnablePushColliderName::~EnablePushColliderName(data::EnablePushColliderName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnablePushColliderName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->push_collider_names);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5576: range 000000001130B02E-000000001130B058
void __cdecl data::EnablePushColliderName::~EnablePushColliderName(data::EnablePushColliderName *const this)
{
  data::EnablePushColliderName::~EnablePushColliderName(this);
  operator delete(this, 0xA8uLL);
};

// Line 5581: range 00000000100A7614-00000000100A7624
const char *__cdecl data::EnablePushColliderName::getTypeName(const data::EnablePushColliderName *const this)
{
  return "EnablePushColliderName";
};

// Line 5582: range 00000000100A7626-00000000100A77C2
int32_t __cdecl data::EnablePushColliderName::getHashNum(const data::EnablePushColliderName *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnablePushColliderName::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnablePushColliderName",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5598: range 0000000011163B8E-0000000011163BCF
void __cdecl data::EnablePushColliderNameFactory::EnablePushColliderNameFactory(
        data::EnablePushColliderNameFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnablePushColliderNameFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnablePushColliderNameFactory = v2;
};

// Line 5606: range 0000000011163ED8-0000000011163F77
void __cdecl data::EnableSceneTransformByName::EnableSceneTransformByName(data::EnableSceneTransformByName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableSceneTransformByName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->transform_names);
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 5606: range 00000000111643BA-00000000111644D5
void __cdecl data::EnableSceneTransformByName::EnableSceneTransformByName(
        data::EnableSceneTransformByName *const this,
        const data::EnableSceneTransformByName *a2)
{
  int (**v2)(...); // rdx
  data::StringList *p_transform_names; // rsi
  bool set_enable; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableSceneTransformByName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_transform_names = &a2->transform_names;
  std::vector<std::string>::vector(&this->transform_names, &a2->transform_names);
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, p_transform_names, &a2->set_enable);
  set_enable = a2->set_enable;
  v5 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_transform_names) = v5 != 0;
    __asan_report_store1(&this->set_enable, p_transform_names, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 5614: range 000000001130AF42-000000001130AFA1
void __cdecl data::EnableSceneTransformByName::~EnableSceneTransformByName(
        data::EnableSceneTransformByName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableSceneTransformByName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->transform_names);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5614: range 000000001130AFA2-000000001130AFCC
void __cdecl data::EnableSceneTransformByName::~EnableSceneTransformByName(
        data::EnableSceneTransformByName *const this)
{
  data::EnableSceneTransformByName::~EnableSceneTransformByName(this);
  operator delete(this, 0xA8uLL);
};

// Line 5619: range 00000000100A77C4-00000000100A77D4
const char *__cdecl data::EnableSceneTransformByName::getTypeName(const data::EnableSceneTransformByName *const this)
{
  return "EnableSceneTransformByName";
};

// Line 5620: range 00000000100A77D6-00000000100A7972
int32_t __cdecl data::EnableSceneTransformByName::getHashNum(const data::EnableSceneTransformByName *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableSceneTransformByName::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableSceneTransformByName",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5636: range 00000000111647BE-00000000111647FF
void __cdecl data::EnableSceneTransformByNameFactory::EnableSceneTransformByNameFactory(
        data::EnableSceneTransformByNameFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableSceneTransformByNameFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableSceneTransformByNameFactory = v2;
};

// Line 5659: range 0000000011164C68-0000000011164E1A
void __cdecl data::GenerateElemBall::GenerateElemBall(data::GenerateElemBall *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GenerateElemBall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->drop_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->drop_type, v1);
  }
  this->drop_type = LevelControl;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->config_id, v3);
  }
  this->config_id = 0;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::DynamicFloat::DynamicFloat(&this->ratio, 1.0);
  if ( *(_BYTE *)(((unsigned __int64)&this->base_energy >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->base_energy >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->base_energy, v3);
  }
  this->base_energy = 10.0;
};

// Line 5659: range 000000001116526E-00000000111654CB
void __cdecl data::GenerateElemBall::GenerateElemBall(
        data::GenerateElemBall *const this,
        const data::GenerateElemBall *a2)
{
  int (**v2)(...); // rdx
  data::DropElemBallType drop_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t config_id; // ecx
  char v7; // dl
  float base_energy; // xmm0_4
  const data::GenerateElemBall *v9; // [rsp+0h] [rbp-20h]

  v9 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GenerateElemBall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->drop_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->drop_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->drop_type);
  }
  drop_type = a2->drop_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->drop_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->drop_type, a2);
  }
  this->drop_type = drop_type;
  v5 = (((_BYTE)v9 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v9->config_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v9 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->config_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v9->config_id);
  }
  config_id = v9->config_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->config_id, v5);
  }
  this->config_id = config_id;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v9->born);
  data::DynamicFloat::DynamicFloat(&this->ratio, &v9->ratio);
  if ( *(_BYTE *)(((unsigned __int64)&v9->base_energy >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v9->base_energy >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v9->base_energy);
  }
  base_energy = v9->base_energy;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_energy >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->base_energy >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->base_energy, &v9->ratio);
  }
  this->base_energy = base_energy;
};

// Line 5670: range 000000001130AF16-000000001130AF40
void __cdecl data::GenerateElemBall::~GenerateElemBall(data::GenerateElemBall *const this)
{
  data::GenerateElemBall::~GenerateElemBall(this);
  operator delete(this, 0xC8uLL);
};

// Line 5670: range 000000001130AEA4-000000001130AF15
void __cdecl data::GenerateElemBall::~GenerateElemBall(data::GenerateElemBall *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GenerateElemBall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->ratio);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5675: range 00000000100A7974-00000000100A7984
const char *__cdecl data::GenerateElemBall::getTypeName(const data::GenerateElemBall *const this)
{
  return "GenerateElemBall";
};

// Line 5676: range 00000000100A7986-00000000100A7B22
int32_t __cdecl data::GenerateElemBall::getHashNum(const data::GenerateElemBall *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GenerateElemBall::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GenerateElemBall",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5692: range 00000000111657B4-00000000111657F5
void __cdecl data::GenerateElemBallFactory::GenerateElemBallFactory(data::GenerateElemBallFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GenerateElemBallFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GenerateElemBallFactory = v2;
};

// Line 5700: range 0000000011165AFE-0000000011165BA8
void __cdecl data::Randomed::Randomed(data::Randomed *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::Randomed + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->chance, 0.0);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions);
};

// Line 5700: range 0000000011165FEC-00000000111660F5
void __cdecl data::Randomed::Randomed(data::Randomed *const this, const data::Randomed *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::Randomed + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->chance, &a2->chance);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions, &a2->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, &a2->fail_actions);
};

// Line 5709: range 000000001130AE78-000000001130AEA2
void __cdecl data::Randomed::~Randomed(data::Randomed *const this)
{
  data::Randomed::~Randomed(this);
  operator delete(this, 0xD8uLL);
};

// Line 5709: range 000000001130ADF4-000000001130AE77
void __cdecl data::Randomed::~Randomed(data::Randomed *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::Randomed + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->success_actions);
  data::DynamicFloat::~DynamicFloat(&this->chance);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5714: range 00000000100A7B24-00000000100A7B34
const char *__cdecl data::Randomed::getTypeName(const data::Randomed *const this)
{
  return "Randomed";
};

// Line 5715: range 00000000100A7B36-00000000100A7CD2
int32_t __cdecl data::Randomed::getHashNum(const data::Randomed *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::Randomed::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "Randomed",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5731: range 00000000111663DE-000000001116641F
void __cdecl data::RandomedFactory::RandomedFactory(data::RandomedFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RandomedFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RandomedFactory = v2;
};

// Line 5739: range 0000000011166728-00000000111667B5
void __cdecl data::HideUIBillBoard::HideUIBillBoard(data::HideUIBillBoard *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::HideUIBillBoard + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->hide >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->hide, v1, &this->hide);
  this->hide = 0;
};

// Line 5739: range 0000000011166BFE-0000000011166CD6
void __cdecl data::HideUIBillBoard::HideUIBillBoard(data::HideUIBillBoard *const this, const data::HideUIBillBoard *a2)
{
  int (**v2)(...); // rdx
  bool hide; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HideUIBillBoard + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->hide >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->hide, a2, &a2->hide);
  hide = a2->hide;
  v4 = *(_BYTE *)(((unsigned __int64)&this->hide >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->hide, a2, &this->hide);
  }
  this->hide = hide;
};

// Line 5746: range 000000001130AD7A-000000001130ADC7
void __cdecl data::HideUIBillBoard::~HideUIBillBoard(data::HideUIBillBoard *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideUIBillBoard + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5746: range 000000001130ADC8-000000001130ADF2
void __cdecl data::HideUIBillBoard::~HideUIBillBoard(data::HideUIBillBoard *const this)
{
  data::HideUIBillBoard::~HideUIBillBoard(this);
  operator delete(this, 0x90uLL);
};

// Line 5751: range 00000000100A7CD4-00000000100A7CE4
const char *__cdecl data::HideUIBillBoard::getTypeName(const data::HideUIBillBoard *const this)
{
  return "HideUIBillBoard";
};

// Line 5752: range 00000000100A7CE6-00000000100A7E82
int32_t __cdecl data::HideUIBillBoard::getHashNum(const data::HideUIBillBoard *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HideUIBillBoard::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HideUIBillBoard",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5768: range 0000000011166FC0-0000000011167001
void __cdecl data::HideUIBillBoardFactory::HideUIBillBoardFactory(data::HideUIBillBoardFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideUIBillBoardFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HideUIBillBoardFactory = v2;
};

// Line 5776: range 000000001116730A-00000000111674EA
void __cdecl data::SendEffectTrigger::SendEffectTrigger(data::SendEffectTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SendEffectTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->parameter);
  std::string::basic_string(&this->attach_point);
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Trigger_0;
  v3 = (((_BYTE)this - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value, v3);
  }
  this->value = 0;
  data::DynamicString::DynamicString(&this->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->float_value, v3);
  }
  this->float_value = 0.0;
  v4 = ((_BYTE)this + 36) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->not_invoke_when_not_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->not_invoke_when_not_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->not_invoke_when_not_alive, v4, v5);
  this->not_invoke_when_not_alive = 0;
  v6 = ((_BYTE)this + 37) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_platform_dependent, v6, v7);
  this->is_platform_dependent = 0;
};

// Line 5776: range 000000001116792E-0000000011167CDB
void __cdecl data::SendEffectTrigger::SendEffectTrigger(
        data::SendEffectTrigger *const this,
        const data::SendEffectTrigger *a2)
{
  int (**v2)(...); // rdx
  std::string *p_attach_point; // rsi
  data::AnimatorParamType type; // ecx
  char v5; // al
  __int64 v6; // rsi
  int32_t value; // ecx
  char v8; // dl
  float float_value; // xmm0_4
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool not_invoke_when_not_alive; // cl
  char v13; // dl
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool is_platform_dependent; // cl
  char v18; // dl
  __int64 v19; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SendEffectTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->parameter, &a2->parameter);
  p_attach_point = &a2->attach_point;
  std::string::basic_string(&this->attach_point, &a2->attach_point);
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_attach_point) = v5 != 0;
    __asan_report_store4(&this->type, p_attach_point);
  }
  this->type = type;
  v6 = (((_BYTE)a2 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->value);
  }
  value = a2->value;
  v8 = *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this - 52) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->value, v6);
  }
  this->value = value;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&a2->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->float_value);
  }
  float_value = a2->float_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->float_value, &a2->effect_pattern);
  }
  this->float_value = float_value;
  v10 = ((_BYTE)a2 + 36) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&a2->not_invoke_when_not_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&a2->not_invoke_when_not_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&a2->not_invoke_when_not_alive, v10, v11);
  not_invoke_when_not_alive = a2->not_invoke_when_not_alive;
  v13 = *(_BYTE *)(((unsigned __int64)&this->not_invoke_when_not_alive >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->not_invoke_when_not_alive, v10, v14);
  this->not_invoke_when_not_alive = not_invoke_when_not_alive;
  v15 = ((_BYTE)a2 + 37) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&a2->is_platform_dependent, v15, v16);
  is_platform_dependent = a2->is_platform_dependent;
  v18 = *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this + 37) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->is_platform_dependent, v15, v19);
  this->is_platform_dependent = is_platform_dependent;
};

// Line 5790: range 000000001130AD4E-000000001130AD78
void __cdecl data::SendEffectTrigger::~SendEffectTrigger(data::SendEffectTrigger *const this)
{
  data::SendEffectTrigger::~SendEffectTrigger(this);
  operator delete(this, 0x128uLL);
};

// Line 5790: range 000000001130ACCA-000000001130AD4D
void __cdecl data::SendEffectTrigger::~SendEffectTrigger(data::SendEffectTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEffectTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::~DynamicString(&this->effect_pattern);
  std::string::~string(&this->attach_point);
  std::string::~string(&this->parameter);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5795: range 00000000100A7E84-00000000100A7E94
const char *__cdecl data::SendEffectTrigger::getTypeName(const data::SendEffectTrigger *const this)
{
  return "SendEffectTrigger";
};

// Line 5796: range 00000000100A7E96-00000000100A8032
int32_t __cdecl data::SendEffectTrigger::getHashNum(const data::SendEffectTrigger *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SendEffectTrigger::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SendEffectTrigger",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5812: range 0000000011167FC4-0000000011168005
void __cdecl data::SendEffectTriggerFactory::SendEffectTriggerFactory(data::SendEffectTriggerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEffectTriggerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SendEffectTriggerFactory = v2;
};

// Line 5820: range 000000001116830E-00000000111684EE
void __cdecl data::SendDungeonFogEffectTrigger::SendDungeonFogEffectTrigger(
        data::SendDungeonFogEffectTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SendDungeonFogEffectTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->parameter);
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Trigger_0;
  v3 = (((_BYTE)this - 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value, v3);
  }
  this->value = 0;
  data::DynamicString::DynamicString(&this->camera_fog_effect_name);
  data::DynamicString::DynamicString(&this->player_fog_effect_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->float_value, v3);
  }
  this->float_value = 0.0;
  v4 = ((_BYTE)this + 84) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->not_invoke_when_not_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->not_invoke_when_not_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->not_invoke_when_not_alive, v4, v5);
  this->not_invoke_when_not_alive = 0;
  v6 = ((_BYTE)this + 85) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_platform_dependent, v6, v7);
  this->is_platform_dependent = 0;
};

// Line 5820: range 0000000011168932-0000000011168CDF
void __cdecl data::SendDungeonFogEffectTrigger::SendDungeonFogEffectTrigger(
        data::SendDungeonFogEffectTrigger *const this,
        const data::SendDungeonFogEffectTrigger *a2)
{
  int (**v2)(...); // rdx
  std::string *p_parameter; // rsi
  data::AnimatorParamType type; // ecx
  char v5; // al
  __int64 v6; // rsi
  int32_t value; // ecx
  char v8; // dl
  float float_value; // xmm0_4
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool not_invoke_when_not_alive; // cl
  char v13; // dl
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool is_platform_dependent; // cl
  char v18; // dl
  __int64 v19; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SendDungeonFogEffectTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_parameter = &a2->parameter;
  std::string::basic_string(&this->parameter, &a2->parameter);
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_parameter) = v5 != 0;
    __asan_report_store4(&this->type, p_parameter);
  }
  this->type = type;
  v6 = (((_BYTE)a2 - 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->value);
  }
  value = a2->value;
  v8 = *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this - 84) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->value, v6);
  }
  this->value = value;
  data::DynamicString::DynamicString(&this->camera_fog_effect_name, &a2->camera_fog_effect_name);
  data::DynamicString::DynamicString(&this->player_fog_effect_name, &a2->player_fog_effect_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->float_value);
  }
  float_value = a2->float_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->float_value, &a2->player_fog_effect_name);
  }
  this->float_value = float_value;
  v10 = ((_BYTE)a2 + 84) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&a2->not_invoke_when_not_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&a2->not_invoke_when_not_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&a2->not_invoke_when_not_alive, v10, v11);
  not_invoke_when_not_alive = a2->not_invoke_when_not_alive;
  v13 = *(_BYTE *)(((unsigned __int64)&this->not_invoke_when_not_alive >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this + 84) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->not_invoke_when_not_alive, v10, v14);
  this->not_invoke_when_not_alive = not_invoke_when_not_alive;
  v15 = ((_BYTE)a2 + 85) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&a2->is_platform_dependent >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&a2->is_platform_dependent, v15, v16);
  is_platform_dependent = a2->is_platform_dependent;
  v18 = *(_BYTE *)(((unsigned __int64)&this->is_platform_dependent >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this + 85) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->is_platform_dependent, v15, v19);
  this->is_platform_dependent = is_platform_dependent;
};

// Line 5834: range 000000001130AC1A-000000001130AC9D
void __cdecl data::SendDungeonFogEffectTrigger::~SendDungeonFogEffectTrigger(
        data::SendDungeonFogEffectTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendDungeonFogEffectTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::~DynamicString(&this->player_fog_effect_name);
  data::DynamicString::~DynamicString(&this->camera_fog_effect_name);
  std::string::~string(&this->parameter);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5834: range 000000001130AC9E-000000001130ACC8
void __cdecl data::SendDungeonFogEffectTrigger::~SendDungeonFogEffectTrigger(
        data::SendDungeonFogEffectTrigger *const this)
{
  data::SendDungeonFogEffectTrigger::~SendDungeonFogEffectTrigger(this);
  operator delete(this, 0x158uLL);
};

// Line 5839: range 00000000100A8034-00000000100A8044
const char *__cdecl data::SendDungeonFogEffectTrigger::getTypeName(const data::SendDungeonFogEffectTrigger *const this)
{
  return "SendDungeonFogEffectTrigger";
};

// Line 5840: range 00000000100A8046-00000000100A81E2
int32_t __cdecl data::SendDungeonFogEffectTrigger::getHashNum(const data::SendDungeonFogEffectTrigger *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SendDungeonFogEffectTrigger::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SendDungeonFogEffectTrigger",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5856: range 0000000011168FC8-0000000011169009
void __cdecl data::SendDungeonFogEffectTriggerFactory::SendDungeonFogEffectTriggerFactory(
        data::SendDungeonFogEffectTriggerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendDungeonFogEffectTriggerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SendDungeonFogEffectTriggerFactory = v2;
};

// Line 5864: range 0000000011169312-0000000011169395
void __cdecl data::SetEffectFollowPath::SetEffectFollowPath(data::SetEffectFollowPath *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetEffectFollowPath + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->follow_path);
  data::DynamicString::DynamicString(&this->effect_pattern);
  std::string::basic_string(&this->attach_point);
};

// Line 5864: range 00000000111697E6-00000000111698EF
void __cdecl data::SetEffectFollowPath::SetEffectFollowPath(
        data::SetEffectFollowPath *const this,
        const data::SetEffectFollowPath *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetEffectFollowPath + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->follow_path, &a2->follow_path);
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  std::string::basic_string(&this->attach_point, &a2->attach_point);
};

// Line 5873: range 000000001130AB6A-000000001130ABED
void __cdecl data::SetEffectFollowPath::~SetEffectFollowPath(data::SetEffectFollowPath *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetEffectFollowPath + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attach_point);
  data::DynamicString::~DynamicString(&this->effect_pattern);
  std::string::~string(&this->follow_path);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5873: range 000000001130ABEE-000000001130AC18
void __cdecl data::SetEffectFollowPath::~SetEffectFollowPath(data::SetEffectFollowPath *const this)
{
  data::SetEffectFollowPath::~SetEffectFollowPath(this);
  operator delete(this, 0x118uLL);
};

// Line 5878: range 00000000100A81E4-00000000100A81F4
const char *__cdecl data::SetEffectFollowPath::getTypeName(const data::SetEffectFollowPath *const this)
{
  return "SetEffectFollowPath";
};

// Line 5879: range 00000000100A81F6-00000000100A8392
int32_t __cdecl data::SetEffectFollowPath::getHashNum(const data::SetEffectFollowPath *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetEffectFollowPath::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetEffectFollowPath",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5895: range 0000000011169BD8-0000000011169C19
void __cdecl data::SetEffectFollowPathFactory::SetEffectFollowPathFactory(data::SetEffectFollowPathFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetEffectFollowPathFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetEffectFollowPathFactory = v2;
};

// Line 5903: range 0000000011169F22-000000001116A078
void __cdecl data::SendEffectTriggerToLineEffect::SendEffectTriggerToLineEffect(
        data::SendEffectTriggerToLineEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SendEffectTriggerToLineEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->parameter);
  std::string::basic_string(&this->attach_point);
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Trigger_0;
  v3 = (((_BYTE)this - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value, v3);
  }
  this->value = 0;
  data::DynamicString::DynamicString(&this->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->float_value, v3);
  }
  this->float_value = 0.0;
};

// Line 5903: range 000000001116A4BC-000000001116A755
void __cdecl data::SendEffectTriggerToLineEffect::SendEffectTriggerToLineEffect(
        data::SendEffectTriggerToLineEffect *const this,
        const data::SendEffectTriggerToLineEffect *a2)
{
  int (**v2)(...); // rdx
  std::string *p_attach_point; // rsi
  data::AnimatorParamType type; // ecx
  char v5; // al
  __int64 v6; // rsi
  int32_t value; // ecx
  char v8; // dl
  float float_value; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SendEffectTriggerToLineEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->parameter, &a2->parameter);
  p_attach_point = &a2->attach_point;
  std::string::basic_string(&this->attach_point, &a2->attach_point);
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_attach_point) = v5 != 0;
    __asan_report_store4(&this->type, p_attach_point);
  }
  this->type = type;
  v6 = (((_BYTE)a2 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->value);
  }
  value = a2->value;
  v8 = *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this - 52) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->value, v6);
  }
  this->value = value;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&a2->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->float_value);
  }
  float_value = a2->float_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->float_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->float_value, &a2->effect_pattern);
  }
  this->float_value = float_value;
};

// Line 5915: range 000000001130AABA-000000001130AB3D
void __cdecl data::SendEffectTriggerToLineEffect::~SendEffectTriggerToLineEffect(
        data::SendEffectTriggerToLineEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEffectTriggerToLineEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::~DynamicString(&this->effect_pattern);
  std::string::~string(&this->attach_point);
  std::string::~string(&this->parameter);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5915: range 000000001130AB3E-000000001130AB68
void __cdecl data::SendEffectTriggerToLineEffect::~SendEffectTriggerToLineEffect(
        data::SendEffectTriggerToLineEffect *const this)
{
  data::SendEffectTriggerToLineEffect::~SendEffectTriggerToLineEffect(this);
  operator delete(this, 0x128uLL);
};

// Line 5920: range 00000000100A8394-00000000100A83A4
const char *__cdecl data::SendEffectTriggerToLineEffect::getTypeName(
        const data::SendEffectTriggerToLineEffect *const this)
{
  return "SendEffectTriggerToLineEffect";
};

// Line 5921: range 00000000100A83A6-00000000100A8542
int32_t __cdecl data::SendEffectTriggerToLineEffect::getHashNum(const data::SendEffectTriggerToLineEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SendEffectTriggerToLineEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SendEffectTriggerToLineEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5937: range 000000001116AA3E-000000001116AA7F
void __cdecl data::SendEffectTriggerToLineEffectFactory::SendEffectTriggerToLineEffectFactory(
        data::SendEffectTriggerToLineEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEffectTriggerToLineEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SendEffectTriggerToLineEffectFactory = v2;
};

// Line 5945: range 000000001116AD88-000000001116AE0B
void __cdecl data::ChangeFollowDampTime::ChangeFollowDampTime(data::ChangeFollowDampTime *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeFollowDampTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern);
  data::DynamicFloat::DynamicFloat(&this->position_damp_time);
  data::DynamicFloat::DynamicFloat(&this->rotation_damp_time);
};

// Line 5945: range 000000001116B25C-000000001116B365
void __cdecl data::ChangeFollowDampTime::ChangeFollowDampTime(
        data::ChangeFollowDampTime *const this,
        const data::ChangeFollowDampTime *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeFollowDampTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
  data::DynamicFloat::DynamicFloat(&this->position_damp_time, &a2->position_damp_time);
  data::DynamicFloat::DynamicFloat(&this->rotation_damp_time, &a2->rotation_damp_time);
};

// Line 5954: range 000000001130AA8E-000000001130AAB8
void __cdecl data::ChangeFollowDampTime::~ChangeFollowDampTime(data::ChangeFollowDampTime *const this)
{
  data::ChangeFollowDampTime::~ChangeFollowDampTime(this);
  operator delete(this, 0x118uLL);
};

// Line 5954: range 000000001130AA0A-000000001130AA8D
void __cdecl data::ChangeFollowDampTime::~ChangeFollowDampTime(data::ChangeFollowDampTime *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeFollowDampTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->rotation_damp_time);
  data::DynamicFloat::~DynamicFloat(&this->position_damp_time);
  data::DynamicString::~DynamicString(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5959: range 00000000100A8544-00000000100A8554
const char *__cdecl data::ChangeFollowDampTime::getTypeName(const data::ChangeFollowDampTime *const this)
{
  return "ChangeFollowDampTime";
};

// Line 5960: range 00000000100A8556-00000000100A86F2
int32_t __cdecl data::ChangeFollowDampTime::getHashNum(const data::ChangeFollowDampTime *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeFollowDampTime::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeFollowDampTime",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5976: range 000000001116B64E-000000001116B68F
void __cdecl data::ChangeFollowDampTimeFactory::ChangeFollowDampTimeFactory(
        data::ChangeFollowDampTimeFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeFollowDampTimeFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeFollowDampTimeFactory = v2;
};

// Line 5984: range 000000001116B998-000000001116BA6A
void __cdecl data::SetSelfAttackTarget::SetSelfAttackTarget(data::SetSelfAttackTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSelfAttackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->turn_to_target_immediately >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->turn_to_target_immediately, v1, &this->turn_to_target_immediately);
  this->turn_to_target_immediately = 0;
  v3 = ((_BYTE)this - 119) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->turn_to_target_keep_up_axis_direction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->turn_to_target_keep_up_axis_direction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->turn_to_target_keep_up_axis_direction, v3, v4);
  this->turn_to_target_keep_up_axis_direction = 0;
};

// Line 5984: range 000000001116BEB4-000000001116C016
void __cdecl data::SetSelfAttackTarget::SetSelfAttackTarget(
        data::SetSelfAttackTarget *const this,
        const data::SetSelfAttackTarget *a2)
{
  int (**v2)(...); // rdx
  bool turn_to_target_immediately; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool turn_to_target_keep_up_axis_direction; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::SetSelfAttackTarget *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSelfAttackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->turn_to_target_immediately >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->turn_to_target_immediately, a2, &a2->turn_to_target_immediately);
  turn_to_target_immediately = a2->turn_to_target_immediately;
  v4 = *(_BYTE *)(((unsigned __int64)&this->turn_to_target_immediately >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->turn_to_target_immediately, a2, &this->turn_to_target_immediately);
  }
  this->turn_to_target_immediately = turn_to_target_immediately;
  v5 = ((_BYTE)v10 - 119) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->turn_to_target_keep_up_axis_direction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->turn_to_target_keep_up_axis_direction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->turn_to_target_keep_up_axis_direction, v5, v6);
  turn_to_target_keep_up_axis_direction = v10->turn_to_target_keep_up_axis_direction;
  v8 = *(_BYTE *)(((unsigned __int64)&this->turn_to_target_keep_up_axis_direction >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 119) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->turn_to_target_keep_up_axis_direction, v5, v9);
  this->turn_to_target_keep_up_axis_direction = turn_to_target_keep_up_axis_direction;
};

// Line 5992: range 000000001130A9DE-000000001130AA08
void __cdecl data::SetSelfAttackTarget::~SetSelfAttackTarget(data::SetSelfAttackTarget *const this)
{
  data::SetSelfAttackTarget::~SetSelfAttackTarget(this);
  operator delete(this, 0x90uLL);
};

// Line 5992: range 000000001130A990-000000001130A9DD
void __cdecl data::SetSelfAttackTarget::~SetSelfAttackTarget(data::SetSelfAttackTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSelfAttackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 5997: range 00000000100A86F4-00000000100A8704
const char *__cdecl data::SetSelfAttackTarget::getTypeName(const data::SetSelfAttackTarget *const this)
{
  return "SetSelfAttackTarget";
};

// Line 5998: range 00000000100A8706-00000000100A88A2
int32_t __cdecl data::SetSelfAttackTarget::getHashNum(const data::SetSelfAttackTarget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSelfAttackTarget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSelfAttackTarget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6014: range 000000001116C300-000000001116C341
void __cdecl data::SetSelfAttackTargetFactory::SetSelfAttackTargetFactory(data::SetSelfAttackTargetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSelfAttackTargetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSelfAttackTargetFactory = v2;
};

// Line 6022: range 000000001116C64A-000000001116C7D3
void __cdecl data::ForceInitMassiveEntity::ForceInitMassiveEntity(data::ForceInitMassiveEntity *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ForceInitMassiveEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->radius, v1);
  }
  this->radius = 0.0;
  v3 = (((_BYTE)this - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->angle, v3);
  }
  this->angle = 360.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->height, v3);
  }
  this->height = 10.0;
};

// Line 6022: range 000000001116CC16-000000001116CE24
void __cdecl data::ForceInitMassiveEntity::ForceInitMassiveEntity(
        data::ForceInitMassiveEntity *const this,
        const data::ForceInitMassiveEntity *a2)
{
  int (**v2)(...); // rdx
  float radius; // xmm0_4
  float angle; // xmm0_4
  __int64 v5; // rsi
  float height; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ForceInitMassiveEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->radius);
  }
  radius = a2->radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->radius, &a2->born);
  }
  this->radius = radius;
  if ( *(_BYTE *)(((unsigned __int64)&a2->angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->angle);
  }
  angle = a2->angle;
  v5 = (((_BYTE)this - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->angle, v5);
  }
  this->angle = angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->height);
  }
  height = a2->height;
  if ( *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->height, v5);
  }
  this->height = height;
};

// Line 6032: range 000000001130A964-000000001130A98E
void __cdecl data::ForceInitMassiveEntity::~ForceInitMassiveEntity(data::ForceInitMassiveEntity *const this)
{
  data::ForceInitMassiveEntity::~ForceInitMassiveEntity(this);
  operator delete(this, 0xA8uLL);
};

// Line 6032: range 000000001130A904-000000001130A963
void __cdecl data::ForceInitMassiveEntity::~ForceInitMassiveEntity(data::ForceInitMassiveEntity *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceInitMassiveEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6037: range 00000000100A88A4-00000000100A88B4
const char *__cdecl data::ForceInitMassiveEntity::getTypeName(const data::ForceInitMassiveEntity *const this)
{
  return "ForceInitMassiveEntity";
};

// Line 6038: range 00000000100A88B6-00000000100A8A52
int32_t __cdecl data::ForceInitMassiveEntity::getHashNum(const data::ForceInitMassiveEntity *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ForceInitMassiveEntity::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ForceInitMassiveEntity",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6054: range 000000001116D10E-000000001116D14F
void __cdecl data::ForceInitMassiveEntityFactory::ForceInitMassiveEntityFactory(
        data::ForceInitMassiveEntityFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceInitMassiveEntityFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ForceInitMassiveEntityFactory = v2;
};

// Line 6062: range 000000001116D458-000000001116D52A
void __cdecl data::EnableHeadControl::EnableHeadControl(data::EnableHeadControl *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableHeadControl + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  v3 = ((_BYTE)this - 119) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->blend >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->blend >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->blend, v3, v4);
  this->blend = 1;
};

// Line 6062: range 000000001116D974-000000001116DAD6
void __cdecl data::EnableHeadControl::EnableHeadControl(
        data::EnableHeadControl *const this,
        const data::EnableHeadControl *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool blend; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::EnableHeadControl *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableHeadControl + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  v5 = ((_BYTE)v10 - 119) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->blend >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->blend >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->blend, v5, v6);
  blend = v10->blend;
  v8 = *(_BYTE *)(((unsigned __int64)&this->blend >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 119) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->blend, v5, v9);
  this->blend = blend;
};

// Line 6070: range 000000001130A8D8-000000001130A902
void __cdecl data::EnableHeadControl::~EnableHeadControl(data::EnableHeadControl *const this)
{
  data::EnableHeadControl::~EnableHeadControl(this);
  operator delete(this, 0x90uLL);
};

// Line 6070: range 000000001130A88A-000000001130A8D7
void __cdecl data::EnableHeadControl::~EnableHeadControl(data::EnableHeadControl *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHeadControl + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6075: range 00000000100A8A54-00000000100A8A64
const char *__cdecl data::EnableHeadControl::getTypeName(const data::EnableHeadControl *const this)
{
  return "EnableHeadControl";
};

// Line 6076: range 00000000100A8A66-00000000100A8C02
int32_t __cdecl data::EnableHeadControl::getHashNum(const data::EnableHeadControl *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableHeadControl::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableHeadControl",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6092: range 000000001116DDC0-000000001116DE01
void __cdecl data::EnableHeadControlFactory::EnableHeadControlFactory(data::EnableHeadControlFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHeadControlFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableHeadControlFactory = v2;
};

// Line 6100: range 000000001116E10A-000000001116E1A9
void __cdecl data::EnablePartControl::EnablePartControl(data::EnablePartControl *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnablePartControl + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->part_root_names);
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 6100: range 000000001116E5EC-000000001116E707
void __cdecl data::EnablePartControl::EnablePartControl(
        data::EnablePartControl *const this,
        const data::EnablePartControl *a2)
{
  int (**v2)(...); // rdx
  data::StringList *p_part_root_names; // rsi
  bool enable; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnablePartControl + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_part_root_names = &a2->part_root_names;
  std::vector<std::string>::vector(&this->part_root_names, &a2->part_root_names);
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, p_part_root_names, &a2->enable);
  enable = a2->enable;
  v5 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_part_root_names) = v5 != 0;
    __asan_report_store1(&this->enable, p_part_root_names, &this->enable);
  }
  this->enable = enable;
};

// Line 6108: range 000000001130A85E-000000001130A888
void __cdecl data::EnablePartControl::~EnablePartControl(data::EnablePartControl *const this)
{
  data::EnablePartControl::~EnablePartControl(this);
  operator delete(this, 0xA8uLL);
};

// Line 6108: range 000000001130A7FE-000000001130A85D
void __cdecl data::EnablePartControl::~EnablePartControl(data::EnablePartControl *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnablePartControl + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->part_root_names);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6113: range 00000000100A8C04-00000000100A8C14
const char *__cdecl data::EnablePartControl::getTypeName(const data::EnablePartControl *const this)
{
  return "EnablePartControl";
};

// Line 6114: range 00000000100A8C16-00000000100A8DB2
int32_t __cdecl data::EnablePartControl::getHashNum(const data::EnablePartControl *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnablePartControl::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnablePartControl",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6130: range 000000001116E9F0-000000001116EA31
void __cdecl data::EnablePartControlFactory::EnablePartControlFactory(data::EnablePartControlFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnablePartControlFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnablePartControlFactory = v2;
};

// Line 6138: range 000000001116ED3A-000000001116EE11
void __cdecl data::StartDither::StartDither(data::StartDither *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::StartDither + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v1);
  }
  this->duration = 0.0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->reverse >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->reverse >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->reverse, v3, v4);
  this->reverse = 0;
};

// Line 6138: range 000000001116F25A-000000001116F3BE
void __cdecl data::StartDither::StartDither(data::StartDither *const this, const data::StartDither *a2)
{
  int (**v2)(...); // rdx
  float duration; // xmm0_4
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool reverse; // cl
  char v7; // dl
  __int64 v8; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::StartDither + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, a2);
  }
  this->duration = duration;
  v4 = ((_BYTE)a2 - 116) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&a2->reverse >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&a2->reverse >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&a2->reverse, v4, v5);
  reverse = a2->reverse;
  v7 = *(_BYTE *)(((unsigned __int64)&this->reverse >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->reverse, v4, v8);
  this->reverse = reverse;
};

// Line 6146: range 000000001130A7D2-000000001130A7FC
void __cdecl data::StartDither::~StartDither(data::StartDither *const this)
{
  data::StartDither::~StartDither(this);
  operator delete(this, 0x90uLL);
};

// Line 6146: range 000000001130A784-000000001130A7D1
void __cdecl data::StartDither::~StartDither(data::StartDither *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StartDither + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6151: range 00000000100A8DB4-00000000100A8DC4
const char *__cdecl data::StartDither::getTypeName(const data::StartDither *const this)
{
  return "StartDither";
};

// Line 6152: range 00000000100A8DC6-00000000100A8F62
int32_t __cdecl data::StartDither::getHashNum(const data::StartDither *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::StartDither::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "StartDither",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6168: range 000000001116F6A8-000000001116F6E9
void __cdecl data::StartDitherFactory::StartDitherFactory(data::StartDitherFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StartDitherFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_StartDitherFactory = v2;
};

// Line 6176: range 000000001116F9F2-000000001116FD28
void __cdecl data::Summon::Summon(data::Summon *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::Summon + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->monster_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->monster_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->monster_id, v1);
  }
  this->monster_id = 0;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->born_slot_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->born_slot_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->born_slot_index, v1);
  }
  this->born_slot_index = 0;
  v3 = (((_BYTE)this - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->face_to_target >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->face_to_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->face_to_target, v3);
  }
  this->face_to_target = SelfAttackTarget;
  if ( *(_BYTE *)(((unsigned __int64)&this->summon_tag >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->summon_tag >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->summon_tag, v3);
  }
  this->summon_tag = 0;
  v4 = ((_BYTE)this - 84) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->alive_by_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->alive_by_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->alive_by_owner, v4, v5);
  this->alive_by_owner = 0;
  v6 = ((_BYTE)this - 83) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->is_elite >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_elite >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_elite, v6, v7);
  this->is_elite = 0;
  std::vector<unsigned int>::vector(&this->affix_list);
  data::DynamicInt::DynamicInt(&this->level_delta);
  if ( *(char *)(((unsigned __int64)&this->has_drop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->has_drop, v6, &this->has_drop);
  this->has_drop = 0;
  v8 = ((_BYTE)this - 7) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->has_exp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->has_exp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->has_exp, v8, v9);
  this->has_exp = 0;
  v10 = ((_BYTE)this - 6) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&this->sight_group_with_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&this->sight_group_with_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->sight_group_with_owner, v10, v11);
  this->sight_group_with_owner = 0;
};

// Line 6176: range 0000000011170172-000000001117072A
void __cdecl data::Summon::Summon(data::Summon *const this, const data::Summon *a2)
{
  int (**v2)(...); // rdx
  uint32_t monster_id; // ecx
  char v4; // al
  data::ConfigBornTypePtr *p_born; // rsi
  uint32_t born_slot_index; // ecx
  char v7; // al
  __int64 v8; // rsi
  data::AbilityTargetting face_to_target; // ecx
  char v10; // dl
  uint32_t summon_tag; // ecx
  char v12; // al
  __int64 v13; // rsi
  __int64 v14; // rdx
  bool alive_by_owner; // cl
  char v16; // dl
  __int64 v17; // rdx
  __int64 v18; // rsi
  __int64 v19; // rdx
  bool is_elite; // cl
  char v21; // dl
  __int64 v22; // rdx
  data::DynamicInt *p_level_delta; // rsi
  bool has_drop; // cl
  char v25; // al
  __int64 v26; // rsi
  __int64 v27; // rdx
  bool has_exp; // cl
  char v29; // dl
  __int64 v30; // rdx
  __int64 v31; // rsi
  __int64 v32; // rdx
  bool sight_group_with_owner; // cl
  char v34; // dl
  __int64 v35; // rdx
  const data::Summon *v36; // [rsp+0h] [rbp-20h]

  v36 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::Summon + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->monster_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->monster_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->monster_id);
  }
  monster_id = a2->monster_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->monster_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->monster_id, a2);
  }
  this->monster_id = monster_id;
  p_born = &v36->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v36->born);
  if ( *(_BYTE *)(((unsigned __int64)&v36->born_slot_index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v36->born_slot_index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v36->born_slot_index);
  }
  born_slot_index = v36->born_slot_index;
  v7 = *(_BYTE *)(((unsigned __int64)&this->born_slot_index >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(p_born) = v7 != 0;
    __asan_report_store4(&this->born_slot_index, p_born);
  }
  this->born_slot_index = born_slot_index;
  v8 = (((_BYTE)v36 - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v36->face_to_target >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v36 - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v36->face_to_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v36->face_to_target);
  }
  face_to_target = v36->face_to_target;
  v10 = *(_BYTE *)(((unsigned __int64)&this->face_to_target >> 3) + 0x7FFF8000);
  if ( v10 != 0 && (char)((((_BYTE)this - 92) & 7) + 3) >= v10 )
  {
    LOBYTE(v8) = v10 != 0;
    __asan_report_store4(&this->face_to_target, v8);
  }
  this->face_to_target = face_to_target;
  if ( *(_BYTE *)(((unsigned __int64)&v36->summon_tag >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v36->summon_tag >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v36->summon_tag);
  }
  summon_tag = v36->summon_tag;
  v12 = *(_BYTE *)(((unsigned __int64)&this->summon_tag >> 3) + 0x7FFF8000);
  if ( v12 != 0 && v12 <= 3 )
  {
    LOBYTE(v8) = v12 != 0;
    __asan_report_store4(&this->summon_tag, v8);
  }
  this->summon_tag = summon_tag;
  v13 = ((_BYTE)v36 - 84) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&v36->alive_by_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&v36->alive_by_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&v36->alive_by_owner, v13, v14);
  alive_by_owner = v36->alive_by_owner;
  v16 = *(_BYTE *)(((unsigned __int64)&this->alive_by_owner >> 3) + 0x7FFF8000);
  LOBYTE(v13) = v16 != 0;
  v17 = (v16 != 0) & (unsigned __int8)((((unsigned __int8)this - 84) & 7) >= v16);
  if ( (_BYTE)v17 )
    __asan_report_store1(&this->alive_by_owner, v13, v17);
  this->alive_by_owner = alive_by_owner;
  v18 = ((_BYTE)v36 - 83) & 7;
  v19 = (*(_BYTE *)(((unsigned __int64)&v36->is_elite >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v18 >= *(_BYTE *)(((unsigned __int64)&v36->is_elite >> 3) + 0x7FFF8000));
  if ( (_BYTE)v19 )
    __asan_report_load1(&v36->is_elite, v18, v19);
  is_elite = v36->is_elite;
  v21 = *(_BYTE *)(((unsigned __int64)&this->is_elite >> 3) + 0x7FFF8000);
  LOBYTE(v18) = v21 != 0;
  v22 = (v21 != 0) & (unsigned __int8)((((unsigned __int8)this - 83) & 7) >= v21);
  if ( (_BYTE)v22 )
    __asan_report_store1(&this->is_elite, v18, v22);
  this->is_elite = is_elite;
  std::vector<unsigned int>::vector(&this->affix_list, &v36->affix_list);
  p_level_delta = &v36->level_delta;
  data::DynamicInt::DynamicInt(&this->level_delta, &v36->level_delta);
  if ( *(char *)(((unsigned __int64)&v36->has_drop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v36->has_drop, p_level_delta, &v36->has_drop);
  has_drop = v36->has_drop;
  v25 = *(_BYTE *)(((unsigned __int64)&this->has_drop >> 3) + 0x7FFF8000);
  if ( v25 < 0 )
  {
    LOBYTE(p_level_delta) = v25 != 0;
    __asan_report_store1(&this->has_drop, p_level_delta, &this->has_drop);
  }
  this->has_drop = has_drop;
  v26 = ((_BYTE)v36 - 7) & 7;
  v27 = (*(_BYTE *)(((unsigned __int64)&v36->has_exp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v26 >= *(_BYTE *)(((unsigned __int64)&v36->has_exp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v27 )
    __asan_report_load1(&v36->has_exp, v26, v27);
  has_exp = v36->has_exp;
  v29 = *(_BYTE *)(((unsigned __int64)&this->has_exp >> 3) + 0x7FFF8000);
  LOBYTE(v26) = v29 != 0;
  v30 = (v29 != 0) & (unsigned __int8)((((unsigned __int8)this - 7) & 7) >= v29);
  if ( (_BYTE)v30 )
    __asan_report_store1(&this->has_exp, v26, v30);
  this->has_exp = has_exp;
  v31 = ((_BYTE)v36 - 6) & 7;
  v32 = (*(_BYTE *)(((unsigned __int64)&v36->sight_group_with_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v31 >= *(_BYTE *)(((unsigned __int64)&v36->sight_group_with_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v32 )
    __asan_report_load1(&v36->sight_group_with_owner, v31, v32);
  sight_group_with_owner = v36->sight_group_with_owner;
  v34 = *(_BYTE *)(((unsigned __int64)&this->sight_group_with_owner >> 3) + 0x7FFF8000);
  LOBYTE(v31) = v34 != 0;
  v35 = (v34 != 0) & (unsigned __int8)((((unsigned __int8)this - 6) & 7) >= v34);
  if ( (_BYTE)v35 )
    __asan_report_store1(&this->sight_group_with_owner, v31, v35);
  this->sight_group_with_owner = sight_group_with_owner;
};

// Line 6194: range 000000001130A6D4-000000001130A757
void __cdecl data::Summon::~Summon(data::Summon *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::Summon + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicInt::~DynamicInt(&this->level_delta);
  std::vector<unsigned int>::~vector(&this->affix_list);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6194: range 000000001130A758-000000001130A782
void __cdecl data::Summon::~Summon(data::Summon *const this)
{
  data::Summon::~Summon(this);
  operator delete(this, 0x100uLL);
};

// Line 6199: range 00000000100A8F64-00000000100A8F74
const char *__cdecl data::Summon::getTypeName(const data::Summon *const this)
{
  return "Summon";
};

// Line 6200: range 00000000100A8F76-00000000100A9112
int32_t __cdecl data::Summon::getHashNum(const data::Summon *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::Summon::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "Summon",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6216: range 0000000011170A14-0000000011170A55
void __cdecl data::SummonFactory::SummonFactory(data::SummonFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SummonFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SummonFactory = v2;
};

// Line 6224: range 0000000011170D96-0000000011170E81
void __cdecl data::AttachAbilityStateResistance::AttachAbilityStateResistance(
        data::AttachAbilityStateResistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachAbilityStateResistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->resistance_list_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->resistance_list_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->resistance_list_id, v1);
  }
  this->resistance_list_id = 0;
  std::vector<data::AbilityState>::vector(&this->resistance_buff_debuffs);
  if ( *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration_ratio, v1);
  }
  this->duration_ratio = 1.0;
};

// Line 6233: range 000000001130A6A8-000000001130A6D2
void __cdecl data::AttachAbilityStateResistance::~AttachAbilityStateResistance(
        data::AttachAbilityStateResistance *const this)
{
  data::AttachAbilityStateResistance::~AttachAbilityStateResistance(this);
  operator delete(this, 0xB0uLL);
};

// Line 6233: range 000000001130A648-000000001130A6A7
void __cdecl data::AttachAbilityStateResistance::~AttachAbilityStateResistance(
        data::AttachAbilityStateResistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachAbilityStateResistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::AbilityState>::~vector(&this->resistance_buff_debuffs);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6238: range 00000000100A9114-00000000100A9124
const char *__cdecl data::AttachAbilityStateResistance::getTypeName(
        const data::AttachAbilityStateResistance *const this)
{
  return "AttachAbilityStateResistance";
};

// Line 6239: range 00000000100A9126-00000000100A92C2
int32_t __cdecl data::AttachAbilityStateResistance::getHashNum(const data::AttachAbilityStateResistance *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachAbilityStateResistance::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachAbilityStateResistance",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6255: range 0000000011171876-00000000111718B7
void __cdecl data::AttachAbilityStateResistanceFactory::AttachAbilityStateResistanceFactory(
        data::AttachAbilityStateResistanceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachAbilityStateResistanceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachAbilityStateResistanceFactory = v2;
};

// Line 6263: range 0000000011171BC0-0000000011171C56
void __cdecl data::FireAISoundEvent::FireAISoundEvent(data::FireAISoundEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireAISoundEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->volume >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->volume >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->volume, v1);
  }
  this->volume = 50.0;
};

// Line 6263: range 00000000111720A0-000000001117217A
void __cdecl data::FireAISoundEvent::FireAISoundEvent(
        data::FireAISoundEvent *const this,
        const data::FireAISoundEvent *a2)
{
  int (**v2)(...); // rdx
  float volume; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireAISoundEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->volume >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->volume >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->volume);
  }
  volume = a2->volume;
  if ( *(_BYTE *)(((unsigned __int64)&this->volume >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->volume >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->volume, a2);
  }
  this->volume = volume;
};

// Line 6270: range 000000001130A5CE-000000001130A61B
void __cdecl data::FireAISoundEvent::~FireAISoundEvent(data::FireAISoundEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireAISoundEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6270: range 000000001130A61C-000000001130A646
void __cdecl data::FireAISoundEvent::~FireAISoundEvent(data::FireAISoundEvent *const this)
{
  data::FireAISoundEvent::~FireAISoundEvent(this);
  operator delete(this, 0x90uLL);
};

// Line 6275: range 00000000100A92C4-00000000100A92D4
const char *__cdecl data::FireAISoundEvent::getTypeName(const data::FireAISoundEvent *const this)
{
  return "FireAISoundEvent";
};

// Line 6276: range 00000000100A92D6-00000000100A9472
int32_t __cdecl data::FireAISoundEvent::getHashNum(const data::FireAISoundEvent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireAISoundEvent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireAISoundEvent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6292: range 0000000011172464-00000000111724A5
void __cdecl data::FireAISoundEventFactory::FireAISoundEventFactory(data::FireAISoundEventFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireAISoundEventFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireAISoundEventFactory = v2;
};

// Line 6300: range 00000000111727AE-00000000111729AE
void __cdecl data::AddElementDurability::AddElementDurability(data::AddElementDurability *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddElementDurability + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->element_type, v1);
  }
  this->element_type = None_0;
  v3 = (((_BYTE)this - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->sort_modifier >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->sort_modifier >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->sort_modifier, v3);
  }
  this->sort_modifier = None_40;
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v3, &this->use_limit_range);
  this->use_limit_range = 0;
  v4 = ((_BYTE)this - 47) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->use_muti_player_fix_data >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->use_muti_player_fix_data >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->use_muti_player_fix_data, v4, v5);
  this->use_muti_player_fix_data = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 3.4028235e38);
  data::DynamicFloat::DynamicFloat(&this->min_value);
};

// Line 6300: range 0000000011172E00-0000000011173158
void __cdecl data::AddElementDurability::AddElementDurability(
        data::AddElementDurability *const this,
        const data::AddElementDurability *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  data::ElementType element_type; // ecx
  char v5; // al
  __int64 v6; // rsi
  data::SortModifierType sort_modifier; // ecx
  char v8; // dl
  bool use_limit_range; // cl
  char v10; // al
  __int64 v11; // rsi
  __int64 v12; // rdx
  bool use_muti_player_fix_data; // cl
  char v14; // dl
  __int64 v15; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddElementDurability + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->element_type);
  }
  element_type = a2->element_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store4(&this->element_type, p_modifier_name);
  }
  this->element_type = element_type;
  v6 = (((_BYTE)a2 - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->sort_modifier >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->sort_modifier >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->sort_modifier);
  }
  sort_modifier = a2->sort_modifier;
  v8 = *(_BYTE *)(((unsigned __int64)&this->sort_modifier >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v8 != 0;
  if ( v8 != 0 && (char)((((_BYTE)this - 52) & 7) + 3) >= v8 )
    __asan_report_store4(&this->sort_modifier, v6);
  this->sort_modifier = sort_modifier;
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, v6, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v10 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(v6) = v10 != 0;
    __asan_report_store1(&this->use_limit_range, v6, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  v11 = ((_BYTE)a2 - 47) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&a2->use_muti_player_fix_data >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&a2->use_muti_player_fix_data >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&a2->use_muti_player_fix_data, v11, v12);
  use_muti_player_fix_data = a2->use_muti_player_fix_data;
  v14 = *(_BYTE *)(((unsigned __int64)&this->use_muti_player_fix_data >> 3) + 0x7FFF8000);
  LOBYTE(v11) = v14 != 0;
  v15 = (v14 != 0) & (unsigned __int8)((((unsigned __int8)this - 47) & 7) >= v14);
  if ( (_BYTE)v15 )
    __asan_report_store1(&this->use_muti_player_fix_data, v11, v15);
  this->use_muti_player_fix_data = use_muti_player_fix_data;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
};

// Line 6314: range 000000001130A50C-000000001130A5A1
void __cdecl data::AddElementDurability::~AddElementDurability(data::AddElementDurability *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddElementDurability + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  std::string::~string(&this->modifier_name);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6314: range 000000001130A5A2-000000001130A5CC
void __cdecl data::AddElementDurability::~AddElementDurability(data::AddElementDurability *const this)
{
  data::AddElementDurability::~AddElementDurability(this);
  operator delete(this, 0x118uLL);
};

// Line 6319: range 00000000100A9474-00000000100A9484
const char *__cdecl data::AddElementDurability::getTypeName(const data::AddElementDurability *const this)
{
  return "AddElementDurability";
};

// Line 6320: range 00000000100A9486-00000000100A9622
int32_t __cdecl data::AddElementDurability::getHashNum(const data::AddElementDurability *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddElementDurability::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddElementDurability",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6336: range 0000000011173442-0000000011173483
void __cdecl data::AddElementDurabilityFactory::AddElementDurabilityFactory(
        data::AddElementDurabilityFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddElementDurabilityFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddElementDurabilityFactory = v2;
};

// Line 6344: range 000000001117378C-000000001117382E
void __cdecl data::SetPartControlTarget::SetPartControlTarget(data::SetPartControlTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetPartControlTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->part_root_names);
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_type, v1);
  }
  this->target_type = ActionSetTarget;
};

// Line 6344: range 0000000011173C72-0000000011173D8C
void __cdecl data::SetPartControlTarget::SetPartControlTarget(
        data::SetPartControlTarget *const this,
        const data::SetPartControlTarget *a2)
{
  int (**v2)(...); // rdx
  data::StringList *p_part_root_names; // rsi
  data::ControlPartTargetType target_type; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetPartControlTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_part_root_names = &a2->part_root_names;
  std::vector<std::string>::vector(&this->part_root_names, &a2->part_root_names);
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_type);
  }
  target_type = a2->target_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_part_root_names) = v5 != 0;
    __asan_report_store4(&this->target_type, p_part_root_names);
  }
  this->target_type = target_type;
};

// Line 6352: range 000000001130A4E0-000000001130A50A
void __cdecl data::SetPartControlTarget::~SetPartControlTarget(data::SetPartControlTarget *const this)
{
  data::SetPartControlTarget::~SetPartControlTarget(this);
  operator delete(this, 0xA8uLL);
};

// Line 6352: range 000000001130A480-000000001130A4DF
void __cdecl data::SetPartControlTarget::~SetPartControlTarget(data::SetPartControlTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPartControlTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->part_root_names);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6357: range 00000000100A9624-00000000100A9634
const char *__cdecl data::SetPartControlTarget::getTypeName(const data::SetPartControlTarget *const this)
{
  return "SetPartControlTarget";
};

// Line 6358: range 00000000100A9636-00000000100A97D2
int32_t __cdecl data::SetPartControlTarget::getHashNum(const data::SetPartControlTarget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetPartControlTarget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetPartControlTarget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6374: range 0000000011174076-00000000111740B7
void __cdecl data::SetPartControlTargetFactory::SetPartControlTargetFactory(
        data::SetPartControlTargetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPartControlTargetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetPartControlTargetFactory = v2;
};

// Line 6382: range 00000000111743C0-000000001117441F
void __cdecl data::DropSubfield::DropSubfield(data::DropSubfield *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DropSubfield + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->subfield_name);
};

// Line 6382: range 0000000011174862-00000000111748FD
void __cdecl data::DropSubfield::DropSubfield(data::DropSubfield *const this, const data::DropSubfield *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DropSubfield + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->subfield_name, &a2->subfield_name);
};

// Line 6389: range 000000001130A3F4-000000001130A453
void __cdecl data::DropSubfield::~DropSubfield(data::DropSubfield *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DropSubfield + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->subfield_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6389: range 000000001130A454-000000001130A47E
void __cdecl data::DropSubfield::~DropSubfield(data::DropSubfield *const this)
{
  data::DropSubfield::~DropSubfield(this);
  operator delete(this, 0xA8uLL);
};

// Line 6394: range 00000000100A97D4-00000000100A97E4
const char *__cdecl data::DropSubfield::getTypeName(const data::DropSubfield *const this)
{
  return "DropSubfield";
};

// Line 6395: range 00000000100A97E6-00000000100A9982
int32_t __cdecl data::DropSubfield::getHashNum(const data::DropSubfield *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DropSubfield::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DropSubfield",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6411: range 0000000011174BE6-0000000011174C27
void __cdecl data::DropSubfieldFactory::DropSubfieldFactory(data::DropSubfieldFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DropSubfieldFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DropSubfieldFactory = v2;
};

// Line 6419: range 0000000011174F30-0000000011174FBD
void __cdecl data::EnableGadgetIntee::EnableGadgetIntee(data::EnableGadgetIntee *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetIntee + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 6419: range 0000000011175406-00000000111754DE
void __cdecl data::EnableGadgetIntee::EnableGadgetIntee(
        data::EnableGadgetIntee *const this,
        const data::EnableGadgetIntee *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetIntee + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 6426: range 00000000111757C8-0000000011175815
void __cdecl data::EnableGadgetIntee::~EnableGadgetIntee(data::EnableGadgetIntee *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetIntee + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6426: range 0000000011175816-0000000011175840
void __cdecl data::EnableGadgetIntee::~EnableGadgetIntee(data::EnableGadgetIntee *const this)
{
  data::EnableGadgetIntee::~EnableGadgetIntee(this);
  operator delete(this, 0x90uLL);
};

// Line 6431: range 00000000100A9984-00000000100A9994
const char *__cdecl data::EnableGadgetIntee::getTypeName(const data::EnableGadgetIntee *const this)
{
  return "EnableGadgetIntee";
};

// Line 6432: range 00000000100A9996-00000000100A9B32
int32_t __cdecl data::EnableGadgetIntee::getHashNum(const data::EnableGadgetIntee *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableGadgetIntee::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableGadgetIntee",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6451: range 0000000011175842-000000001117588F
void __cdecl data::EnableGadgetInteeMp::EnableGadgetInteeMp(data::EnableGadgetInteeMp *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::EnableGadgetIntee::EnableGadgetIntee(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetInteeMp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 6451: range 0000000011175CD8-0000000011175D30
void __cdecl data::EnableGadgetInteeMp::EnableGadgetInteeMp(
        data::EnableGadgetInteeMp *const this,
        const data::EnableGadgetInteeMp *a2)
{
  int (**v2)(...); // rdx

  data::EnableGadgetIntee::EnableGadgetIntee(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetInteeMp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 6457: range 000000001130A37A-000000001130A3C7
void __cdecl data::EnableGadgetInteeMp::~EnableGadgetInteeMp(data::EnableGadgetInteeMp *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetInteeMp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::EnableGadgetIntee::~EnableGadgetIntee(this);
};

// Line 6457: range 000000001130A3C8-000000001130A3F2
void __cdecl data::EnableGadgetInteeMp::~EnableGadgetInteeMp(data::EnableGadgetInteeMp *const this)
{
  data::EnableGadgetInteeMp::~EnableGadgetInteeMp(this);
  operator delete(this, 0x90uLL);
};

// Line 6462: range 00000000100A9B34-00000000100A9B44
const char *__cdecl data::EnableGadgetInteeMp::getTypeName(const data::EnableGadgetInteeMp *const this)
{
  return "EnableGadgetInteeMp";
};

// Line 6463: range 00000000100A9B46-00000000100A9CE2
int32_t __cdecl data::EnableGadgetInteeMp::getHashNum(const data::EnableGadgetInteeMp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableGadgetInteeMp::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableGadgetInteeMp",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6479: range 000000001117601A-000000001117605B
void __cdecl data::EnableGadgetInteeMpFactory::EnableGadgetInteeMpFactory(data::EnableGadgetInteeMpFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetInteeMpFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableGadgetInteeMpFactory = v2;
};

// Line 6487: range 0000000011176364-000000001117643C
void __cdecl data::EnableGadgetExtraButton::EnableGadgetExtraButton(data::EnableGadgetExtraButton *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetExtraButton + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->extra_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->extra_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->extra_id, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->extra_id = 0;
};

// Line 6487: range 0000000011176886-00000000111769ED
void __cdecl data::EnableGadgetExtraButton::EnableGadgetExtraButton(
        data::EnableGadgetExtraButton *const this,
        const data::EnableGadgetExtraButton *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  __int64 v5; // rsi
  int32_t extra_id; // ecx
  char v7; // dl
  const data::EnableGadgetExtraButton *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetExtraButton + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  v5 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->extra_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->extra_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->extra_id);
  }
  extra_id = v8->extra_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->extra_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->extra_id, v5);
  }
  this->extra_id = extra_id;
};

// Line 6495: range 000000001130A34E-000000001130A378
void __cdecl data::EnableGadgetExtraButton::~EnableGadgetExtraButton(data::EnableGadgetExtraButton *const this)
{
  data::EnableGadgetExtraButton::~EnableGadgetExtraButton(this);
  operator delete(this, 0x90uLL);
};

// Line 6495: range 000000001130A300-000000001130A34D
void __cdecl data::EnableGadgetExtraButton::~EnableGadgetExtraButton(data::EnableGadgetExtraButton *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetExtraButton + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6500: range 00000000100A9CE4-00000000100A9CF4
const char *__cdecl data::EnableGadgetExtraButton::getTypeName(const data::EnableGadgetExtraButton *const this)
{
  return "EnableGadgetExtraButton";
};

// Line 6501: range 00000000100A9CF6-00000000100A9E92
int32_t __cdecl data::EnableGadgetExtraButton::getHashNum(const data::EnableGadgetExtraButton *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableGadgetExtraButton::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableGadgetExtraButton",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6517: range 0000000011176CD6-0000000011176D17
void __cdecl data::EnableGadgetExtraButtonFactory::EnableGadgetExtraButtonFactory(
        data::EnableGadgetExtraButtonFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetExtraButtonFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableGadgetExtraButtonFactory = v2;
};

// Line 6525: range 0000000011177020-000000001117707F
void __cdecl data::RemoveVelocityForce::RemoveVelocityForce(data::RemoveVelocityForce *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RemoveVelocityForce + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::VelocityForceType>::vector(&this->forces);
};

// Line 6525: range 0000000011177618-00000000111776B3
void __cdecl data::RemoveVelocityForce::RemoveVelocityForce(
        data::RemoveVelocityForce *const this,
        const data::RemoveVelocityForce *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RemoveVelocityForce + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::VelocityForceType>::vector(&this->forces, &a2->forces);
};

// Line 6532: range 000000001130A2D4-000000001130A2FE
void __cdecl data::RemoveVelocityForce::~RemoveVelocityForce(data::RemoveVelocityForce *const this)
{
  data::RemoveVelocityForce::~RemoveVelocityForce(this);
  operator delete(this, 0xA0uLL);
};

// Line 6532: range 000000001130A274-000000001130A2D3
void __cdecl data::RemoveVelocityForce::~RemoveVelocityForce(data::RemoveVelocityForce *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveVelocityForce + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::VelocityForceType>::~vector(&this->forces);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6537: range 00000000100A9E94-00000000100A9EA4
const char *__cdecl data::RemoveVelocityForce::getTypeName(const data::RemoveVelocityForce *const this)
{
  return "RemoveVelocityForce";
};

// Line 6538: range 00000000100A9EA6-00000000100AA042
int32_t __cdecl data::RemoveVelocityForce::getHashNum(const data::RemoveVelocityForce *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RemoveVelocityForce::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RemoveVelocityForce",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6554: range 000000001117799C-00000000111779DD
void __cdecl data::RemoveVelocityForceFactory::RemoveVelocityForceFactory(data::RemoveVelocityForceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveVelocityForceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RemoveVelocityForceFactory = v2;
};

// Line 6562: range 0000000011177CE6-0000000011177E16
void __cdecl data::ExecuteGroupTrigger::ExecuteGroupTrigger(data::ExecuteGroupTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ExecuteGroupTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->source_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->param1 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->param1 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->param1, v1);
  }
  this->param1 = 0;
  v3 = (((_BYTE)this - 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->param2 >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->param2 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->param2, v3);
  }
  this->param2 = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->param3 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->param3 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->param3, v3);
  }
  this->param3 = 0;
};

// Line 6562: range 000000001117826C-0000000011178494
void __cdecl data::ExecuteGroupTrigger::ExecuteGroupTrigger(
        data::ExecuteGroupTrigger *const this,
        const data::ExecuteGroupTrigger *a2)
{
  int (**v2)(...); // rdx
  std::string *p_source_name; // rsi
  int32_t param1; // ecx
  char v5; // al
  __int64 v6; // rsi
  int32_t param2; // ecx
  char v8; // dl
  int32_t param3; // ecx
  char v10; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ExecuteGroupTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_source_name = &a2->source_name;
  std::string::basic_string(&this->source_name, &a2->source_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->param1 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->param1 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->param1);
  }
  param1 = a2->param1;
  v5 = *(_BYTE *)(((unsigned __int64)&this->param1 >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_source_name) = v5 != 0;
    __asan_report_store4(&this->param1, p_source_name);
  }
  this->param1 = param1;
  v6 = (((_BYTE)a2 - 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->param2 >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->param2 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->param2);
  }
  param2 = a2->param2;
  v8 = *(_BYTE *)(((unsigned __int64)&this->param2 >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this - 84) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->param2, v6);
  }
  this->param2 = param2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->param3 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->param3 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->param3);
  }
  param3 = a2->param3;
  v10 = *(_BYTE *)(((unsigned __int64)&this->param3 >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(v6) = v10 != 0;
    __asan_report_store4(&this->param3, v6);
  }
  this->param3 = param3;
};

// Line 6572: range 000000001130A1E8-000000001130A247
void __cdecl data::ExecuteGroupTrigger::~ExecuteGroupTrigger(data::ExecuteGroupTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExecuteGroupTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->source_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6572: range 000000001130A248-000000001130A272
void __cdecl data::ExecuteGroupTrigger::~ExecuteGroupTrigger(data::ExecuteGroupTrigger *const this)
{
  data::ExecuteGroupTrigger::~ExecuteGroupTrigger(this);
  operator delete(this, 0xB8uLL);
};

// Line 6577: range 00000000100AA044-00000000100AA054
const char *__cdecl data::ExecuteGroupTrigger::getTypeName(const data::ExecuteGroupTrigger *const this)
{
  return "ExecuteGroupTrigger";
};

// Line 6578: range 00000000100AA056-00000000100AA1F2
int32_t __cdecl data::ExecuteGroupTrigger::getHashNum(const data::ExecuteGroupTrigger *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ExecuteGroupTrigger::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ExecuteGroupTrigger",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6594: range 000000001117877E-00000000111787BF
void __cdecl data::ExecuteGroupTriggerFactory::ExecuteGroupTriggerFactory(data::ExecuteGroupTriggerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExecuteGroupTriggerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ExecuteGroupTriggerFactory = v2;
};

// Line 6602: range 0000000011178AC8-0000000011178B67
void __cdecl data::ReTriggerAISkillInitialCD::ReTriggerAISkillInitialCD(data::ReTriggerAISkillInitialCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ReTriggerAISkillInitialCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->skill_ids);
  if ( *(char *)(((unsigned __int64)&this->force_reinit >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->force_reinit, v1, &this->force_reinit);
  this->force_reinit = 0;
};

// Line 6602: range 0000000011178FAA-00000000111790C5
void __cdecl data::ReTriggerAISkillInitialCD::ReTriggerAISkillInitialCD(
        data::ReTriggerAISkillInitialCD *const this,
        const data::ReTriggerAISkillInitialCD *a2)
{
  int (**v2)(...); // rdx
  data::UInt32List *p_skill_ids; // rsi
  bool force_reinit; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReTriggerAISkillInitialCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_skill_ids = &a2->skill_ids;
  std::vector<unsigned int>::vector(&this->skill_ids, &a2->skill_ids);
  if ( *(char *)(((unsigned __int64)&a2->force_reinit >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->force_reinit, p_skill_ids, &a2->force_reinit);
  force_reinit = a2->force_reinit;
  v5 = *(_BYTE *)(((unsigned __int64)&this->force_reinit >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_skill_ids) = v5 != 0;
    __asan_report_store1(&this->force_reinit, p_skill_ids, &this->force_reinit);
  }
  this->force_reinit = force_reinit;
};

// Line 6610: range 000000001130A1BC-000000001130A1E6
void __cdecl data::ReTriggerAISkillInitialCD::~ReTriggerAISkillInitialCD(data::ReTriggerAISkillInitialCD *const this)
{
  data::ReTriggerAISkillInitialCD::~ReTriggerAISkillInitialCD(this);
  operator delete(this, 0xA8uLL);
};

// Line 6610: range 000000001130A15C-000000001130A1BB
void __cdecl data::ReTriggerAISkillInitialCD::~ReTriggerAISkillInitialCD(data::ReTriggerAISkillInitialCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReTriggerAISkillInitialCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->skill_ids);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6615: range 00000000100AA1F4-00000000100AA204
const char *__cdecl data::ReTriggerAISkillInitialCD::getTypeName(const data::ReTriggerAISkillInitialCD *const this)
{
  return "ReTriggerAISkillInitialCD";
};

// Line 6616: range 00000000100AA206-00000000100AA3A2
int32_t __cdecl data::ReTriggerAISkillInitialCD::getHashNum(const data::ReTriggerAISkillInitialCD *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReTriggerAISkillInitialCD::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReTriggerAISkillInitialCD",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6632: range 00000000111793AE-00000000111793EF
void __cdecl data::ReTriggerAISkillInitialCDFactory::ReTriggerAISkillInitialCDFactory(
        data::ReTriggerAISkillInitialCDFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReTriggerAISkillInitialCDFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReTriggerAISkillInitialCDFactory = v2;
};

// Line 6640: range 00000000111796F8-0000000011179757
void __cdecl data::SetAISkillCDAvailableNow::SetAISkillCDAvailableNow(data::SetAISkillCDAvailableNow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDAvailableNow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->skill_ids);
};

// Line 6640: range 0000000011179BA6-0000000011179C41
void __cdecl data::SetAISkillCDAvailableNow::SetAISkillCDAvailableNow(
        data::SetAISkillCDAvailableNow *const this,
        const data::SetAISkillCDAvailableNow *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDAvailableNow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->skill_ids, &a2->skill_ids);
};

// Line 6647: range 000000001130A130-000000001130A15A
void __cdecl data::SetAISkillCDAvailableNow::~SetAISkillCDAvailableNow(data::SetAISkillCDAvailableNow *const this)
{
  data::SetAISkillCDAvailableNow::~SetAISkillCDAvailableNow(this);
  operator delete(this, 0xA0uLL);
};

// Line 6647: range 000000001130A0D0-000000001130A12F
void __cdecl data::SetAISkillCDAvailableNow::~SetAISkillCDAvailableNow(data::SetAISkillCDAvailableNow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDAvailableNow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->skill_ids);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6652: range 00000000100AA3A4-00000000100AA3B4
const char *__cdecl data::SetAISkillCDAvailableNow::getTypeName(const data::SetAISkillCDAvailableNow *const this)
{
  return "SetAISkillCDAvailableNow";
};

// Line 6653: range 00000000100AA3B6-00000000100AA552
int32_t __cdecl data::SetAISkillCDAvailableNow::getHashNum(const data::SetAISkillCDAvailableNow *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAISkillCDAvailableNow::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAISkillCDAvailableNow",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6669: range 0000000011179F2A-0000000011179F6B
void __cdecl data::SetAISkillCDAvailableNowFactory::SetAISkillCDAvailableNowFactory(
        data::SetAISkillCDAvailableNowFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDAvailableNowFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAISkillCDAvailableNowFactory = v2;
};

// Line 6677: range 000000001117A274-000000001117A306
void __cdecl data::SetAISkillGCD::SetAISkillGCD(data::SetAISkillGCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAISkillGCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value, v1);
  }
  this->value = 0.0;
};

// Line 6677: range 000000001117A750-000000001117A82A
void __cdecl data::SetAISkillGCD::SetAISkillGCD(data::SetAISkillGCD *const this, const data::SetAISkillGCD *a2)
{
  int (**v2)(...); // rdx
  float value; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAISkillGCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->value);
  }
  value = a2->value;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value, a2);
  }
  this->value = value;
};

// Line 6684: range 000000001130A056-000000001130A0A3
void __cdecl data::SetAISkillGCD::~SetAISkillGCD(data::SetAISkillGCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAISkillGCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6684: range 000000001130A0A4-000000001130A0CE
void __cdecl data::SetAISkillGCD::~SetAISkillGCD(data::SetAISkillGCD *const this)
{
  data::SetAISkillGCD::~SetAISkillGCD(this);
  operator delete(this, 0x90uLL);
};

// Line 6689: range 00000000100AA554-00000000100AA564
const char *__cdecl data::SetAISkillGCD::getTypeName(const data::SetAISkillGCD *const this)
{
  return "SetAISkillGCD";
};

// Line 6690: range 00000000100AA566-00000000100AA702
int32_t __cdecl data::SetAISkillGCD::getHashNum(const data::SetAISkillGCD *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAISkillGCD::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAISkillGCD",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6706: range 000000001117AB14-000000001117AB55
void __cdecl data::SetAISkillGCDFactory::SetAISkillGCDFactory(data::SetAISkillGCDFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAISkillGCDFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAISkillGCDFactory = v2;
};

// Line 6714: range 000000001117AE5E-000000001117AEEB
void __cdecl data::EnableAIStealthy::EnableAIStealthy(data::EnableAIStealthy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableAIStealthy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 6714: range 000000001117B334-000000001117B40C
void __cdecl data::EnableAIStealthy::EnableAIStealthy(
        data::EnableAIStealthy *const this,
        const data::EnableAIStealthy *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableAIStealthy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 6721: range 0000000011309FDC-000000001130A029
void __cdecl data::EnableAIStealthy::~EnableAIStealthy(data::EnableAIStealthy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAIStealthy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6721: range 000000001130A02A-000000001130A054
void __cdecl data::EnableAIStealthy::~EnableAIStealthy(data::EnableAIStealthy *const this)
{
  data::EnableAIStealthy::~EnableAIStealthy(this);
  operator delete(this, 0x90uLL);
};

// Line 6726: range 00000000100AA704-00000000100AA714
const char *__cdecl data::EnableAIStealthy::getTypeName(const data::EnableAIStealthy *const this)
{
  return "EnableAIStealthy";
};

// Line 6727: range 00000000100AA716-00000000100AA8B2
int32_t __cdecl data::EnableAIStealthy::getHashNum(const data::EnableAIStealthy *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableAIStealthy::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableAIStealthy",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6743: range 000000001117B6F6-000000001117B737
void __cdecl data::EnableAIStealthyFactory::EnableAIStealthyFactory(data::EnableAIStealthyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAIStealthyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableAIStealthyFactory = v2;
};

// Line 6751: range 000000001117BA40-000000001117BAD0
void __cdecl data::UnlockSkill::UnlockSkill(data::UnlockSkill *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::UnlockSkill + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
};

// Line 6751: range 000000001117BF1A-000000001117BFF1
void __cdecl data::UnlockSkill::UnlockSkill(data::UnlockSkill *const this, const data::UnlockSkill *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UnlockSkill + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
};

// Line 6758: range 0000000011309FB0-0000000011309FDA
void __cdecl data::UnlockSkill::~UnlockSkill(data::UnlockSkill *const this)
{
  data::UnlockSkill::~UnlockSkill(this);
  operator delete(this, 0x90uLL);
};

// Line 6758: range 0000000011309F62-0000000011309FAF
void __cdecl data::UnlockSkill::~UnlockSkill(data::UnlockSkill *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UnlockSkill + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6763: range 00000000100AA8B4-00000000100AA8C4
const char *__cdecl data::UnlockSkill::getTypeName(const data::UnlockSkill *const this)
{
  return "UnlockSkill";
};

// Line 6764: range 00000000100AA8C6-00000000100AAA62
int32_t __cdecl data::UnlockSkill::getHashNum(const data::UnlockSkill *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UnlockSkill::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UnlockSkill",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6780: range 000000001117C2DA-000000001117C31B
void __cdecl data::UnlockSkillFactory::UnlockSkillFactory(data::UnlockSkillFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UnlockSkillFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UnlockSkillFactory = v2;
};

// Line 6788: range 000000001117C624-000000001117C6B4
void __cdecl data::AddAvatarSkillInfo::AddAvatarSkillInfo(data::AddAvatarSkillInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddAvatarSkillInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
};

// Line 6788: range 000000001117CAFE-000000001117CBD5
void __cdecl data::AddAvatarSkillInfo::AddAvatarSkillInfo(
        data::AddAvatarSkillInfo *const this,
        const data::AddAvatarSkillInfo *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddAvatarSkillInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
};

// Line 6795: range 0000000011309F36-0000000011309F60
void __cdecl data::AddAvatarSkillInfo::~AddAvatarSkillInfo(data::AddAvatarSkillInfo *const this)
{
  data::AddAvatarSkillInfo::~AddAvatarSkillInfo(this);
  operator delete(this, 0x90uLL);
};

// Line 6795: range 0000000011309EE8-0000000011309F35
void __cdecl data::AddAvatarSkillInfo::~AddAvatarSkillInfo(data::AddAvatarSkillInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddAvatarSkillInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6800: range 00000000100AAA64-00000000100AAA74
const char *__cdecl data::AddAvatarSkillInfo::getTypeName(const data::AddAvatarSkillInfo *const this)
{
  return "AddAvatarSkillInfo";
};

// Line 6801: range 00000000100AAA76-00000000100AAC12
int32_t __cdecl data::AddAvatarSkillInfo::getHashNum(const data::AddAvatarSkillInfo *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddAvatarSkillInfo::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddAvatarSkillInfo",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6817: range 000000001117CEBE-000000001117CEFF
void __cdecl data::AddAvatarSkillInfoFactory::AddAvatarSkillInfoFactory(data::AddAvatarSkillInfoFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddAvatarSkillInfoFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddAvatarSkillInfoFactory = v2;
};

// Line 6825: range 000000001117D208-000000001117D2DD
void __cdecl data::RemoveAvatarSkillInfo::RemoveAvatarSkillInfo(data::RemoveAvatarSkillInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RemoveAvatarSkillInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->refresh_after_remove >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->refresh_after_remove >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->refresh_after_remove, v3, v4);
  this->refresh_after_remove = 0;
};

// Line 6825: range 000000001117D726-000000001117D887
void __cdecl data::RemoveAvatarSkillInfo::RemoveAvatarSkillInfo(
        data::RemoveAvatarSkillInfo *const this,
        const data::RemoveAvatarSkillInfo *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool refresh_after_remove; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::RemoveAvatarSkillInfo *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RemoveAvatarSkillInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->refresh_after_remove >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->refresh_after_remove >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->refresh_after_remove, v5, v6);
  refresh_after_remove = v10->refresh_after_remove;
  v8 = *(_BYTE *)(((unsigned __int64)&this->refresh_after_remove >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->refresh_after_remove, v5, v9);
  this->refresh_after_remove = refresh_after_remove;
};

// Line 6833: range 0000000011309EBC-0000000011309EE6
void __cdecl data::RemoveAvatarSkillInfo::~RemoveAvatarSkillInfo(data::RemoveAvatarSkillInfo *const this)
{
  data::RemoveAvatarSkillInfo::~RemoveAvatarSkillInfo(this);
  operator delete(this, 0x90uLL);
};

// Line 6833: range 0000000011309E6E-0000000011309EBB
void __cdecl data::RemoveAvatarSkillInfo::~RemoveAvatarSkillInfo(data::RemoveAvatarSkillInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveAvatarSkillInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6838: range 00000000100AAC14-00000000100AAC24
const char *__cdecl data::RemoveAvatarSkillInfo::getTypeName(const data::RemoveAvatarSkillInfo *const this)
{
  return "RemoveAvatarSkillInfo";
};

// Line 6839: range 00000000100AAC26-00000000100AADC2
int32_t __cdecl data::RemoveAvatarSkillInfo::getHashNum(const data::RemoveAvatarSkillInfo *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RemoveAvatarSkillInfo::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RemoveAvatarSkillInfo",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6855: range 000000001117DB70-000000001117DBB1
void __cdecl data::RemoveAvatarSkillInfoFactory::RemoveAvatarSkillInfoFactory(
        data::RemoveAvatarSkillInfoFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveAvatarSkillInfoFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RemoveAvatarSkillInfoFactory = v2;
};

// Line 6863: range 000000001117DEBA-000000001117DF47
void __cdecl data::SetCanDieImmediately::SetCanDieImmediately(data::SetCanDieImmediately *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetCanDieImmediately + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->die_immediately >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->die_immediately, v1, &this->die_immediately);
  this->die_immediately = 0;
};

// Line 6863: range 000000001117E390-000000001117E468
void __cdecl data::SetCanDieImmediately::SetCanDieImmediately(
        data::SetCanDieImmediately *const this,
        const data::SetCanDieImmediately *a2)
{
  int (**v2)(...); // rdx
  bool die_immediately; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetCanDieImmediately + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->die_immediately >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->die_immediately, a2, &a2->die_immediately);
  die_immediately = a2->die_immediately;
  v4 = *(_BYTE *)(((unsigned __int64)&this->die_immediately >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->die_immediately, a2, &this->die_immediately);
  }
  this->die_immediately = die_immediately;
};

// Line 6870: range 0000000011309DF4-0000000011309E41
void __cdecl data::SetCanDieImmediately::~SetCanDieImmediately(data::SetCanDieImmediately *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCanDieImmediately + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6870: range 0000000011309E42-0000000011309E6C
void __cdecl data::SetCanDieImmediately::~SetCanDieImmediately(data::SetCanDieImmediately *const this)
{
  data::SetCanDieImmediately::~SetCanDieImmediately(this);
  operator delete(this, 0x90uLL);
};

// Line 6875: range 00000000100AADC4-00000000100AADD4
const char *__cdecl data::SetCanDieImmediately::getTypeName(const data::SetCanDieImmediately *const this)
{
  return "SetCanDieImmediately";
};

// Line 6876: range 00000000100AADD6-00000000100AAF72
int32_t __cdecl data::SetCanDieImmediately::getHashNum(const data::SetCanDieImmediately *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetCanDieImmediately::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetCanDieImmediately",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6892: range 000000001117E752-000000001117E793
void __cdecl data::SetCanDieImmediatelyFactory::SetCanDieImmediatelyFactory(
        data::SetCanDieImmediatelyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCanDieImmediatelyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetCanDieImmediatelyFactory = v2;
};

// Line 6900: range 000000001117EA9C-000000001117EAFB
void __cdecl data::PlayEmojiBubble::PlayEmojiBubble(data::PlayEmojiBubble *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::PlayEmojiBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->name);
};

// Line 6900: range 000000001117EF3E-000000001117EFD9
void __cdecl data::PlayEmojiBubble::PlayEmojiBubble(data::PlayEmojiBubble *const this, const data::PlayEmojiBubble *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PlayEmojiBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->name, &a2->name);
};

// Line 6907: range 0000000011309D68-0000000011309DC7
void __cdecl data::PlayEmojiBubble::~PlayEmojiBubble(data::PlayEmojiBubble *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlayEmojiBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6907: range 0000000011309DC8-0000000011309DF2
void __cdecl data::PlayEmojiBubble::~PlayEmojiBubble(data::PlayEmojiBubble *const this)
{
  data::PlayEmojiBubble::~PlayEmojiBubble(this);
  operator delete(this, 0xA8uLL);
};

// Line 6912: range 00000000100AAF74-00000000100AAF84
const char *__cdecl data::PlayEmojiBubble::getTypeName(const data::PlayEmojiBubble *const this)
{
  return "PlayEmojiBubble";
};

// Line 6913: range 00000000100AAF86-00000000100AB122
int32_t __cdecl data::PlayEmojiBubble::getHashNum(const data::PlayEmojiBubble *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PlayEmojiBubble::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PlayEmojiBubble",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6929: range 000000001117F2C2-000000001117F303
void __cdecl data::PlayEmojiBubbleFactory::PlayEmojiBubbleFactory(data::PlayEmojiBubbleFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlayEmojiBubbleFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PlayEmojiBubbleFactory = v2;
};

// Line 6937: range 000000001117F60C-000000001117F66B
void __cdecl data::AttachBulletAimPoint::AttachBulletAimPoint(data::AttachBulletAimPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachBulletAimPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->bullet_aim_point);
};

// Line 6937: range 000000001117FAAE-000000001117FB49
void __cdecl data::AttachBulletAimPoint::AttachBulletAimPoint(
        data::AttachBulletAimPoint *const this,
        const data::AttachBulletAimPoint *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachBulletAimPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->bullet_aim_point, &a2->bullet_aim_point);
};

// Line 6944: range 0000000011309CDC-0000000011309D3B
void __cdecl data::AttachBulletAimPoint::~AttachBulletAimPoint(data::AttachBulletAimPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachBulletAimPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->bullet_aim_point);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6944: range 0000000011309D3C-0000000011309D66
void __cdecl data::AttachBulletAimPoint::~AttachBulletAimPoint(data::AttachBulletAimPoint *const this)
{
  data::AttachBulletAimPoint::~AttachBulletAimPoint(this);
  operator delete(this, 0xA8uLL);
};

// Line 6949: range 00000000100AB124-00000000100AB134
const char *__cdecl data::AttachBulletAimPoint::getTypeName(const data::AttachBulletAimPoint *const this)
{
  return "AttachBulletAimPoint";
};

// Line 6950: range 00000000100AB136-00000000100AB2D2
int32_t __cdecl data::AttachBulletAimPoint::getHashNum(const data::AttachBulletAimPoint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachBulletAimPoint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachBulletAimPoint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6966: range 000000001117FE32-000000001117FE73
void __cdecl data::AttachBulletAimPointFactory::AttachBulletAimPointFactory(
        data::AttachBulletAimPointFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachBulletAimPointFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachBulletAimPointFactory = v2;
};

// Line 6974: range 000000001118017C-0000000011180209
void __cdecl data::EnableBulletCollisionPluginTrigger::EnableBulletCollisionPluginTrigger(
        data::EnableBulletCollisionPluginTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableBulletCollisionPluginTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 6974: range 0000000011180652-000000001118072A
void __cdecl data::EnableBulletCollisionPluginTrigger::EnableBulletCollisionPluginTrigger(
        data::EnableBulletCollisionPluginTrigger *const this,
        const data::EnableBulletCollisionPluginTrigger *a2)
{
  int (**v2)(...); // rdx
  bool set_enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableBulletCollisionPluginTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, a2, &a2->set_enable);
  set_enable = a2->set_enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->set_enable, a2, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 6981: range 0000000011309C62-0000000011309CAF
void __cdecl data::EnableBulletCollisionPluginTrigger::~EnableBulletCollisionPluginTrigger(
        data::EnableBulletCollisionPluginTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableBulletCollisionPluginTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 6981: range 0000000011309CB0-0000000011309CDA
void __cdecl data::EnableBulletCollisionPluginTrigger::~EnableBulletCollisionPluginTrigger(
        data::EnableBulletCollisionPluginTrigger *const this)
{
  data::EnableBulletCollisionPluginTrigger::~EnableBulletCollisionPluginTrigger(this);
  operator delete(this, 0x90uLL);
};

// Line 6986: range 00000000100AB2D4-00000000100AB2E4
const char *__cdecl data::EnableBulletCollisionPluginTrigger::getTypeName(
        const data::EnableBulletCollisionPluginTrigger *const this)
{
  return "EnableBulletCollisionPluginTrigger";
};

// Line 6987: range 00000000100AB2E6-00000000100AB482
int32_t __cdecl data::EnableBulletCollisionPluginTrigger::getHashNum(
        const data::EnableBulletCollisionPluginTrigger *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableBulletCollisionPluginTrigger::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableBulletCollisionPluginTrigger",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7003: range 0000000011180A14-0000000011180A55
void __cdecl data::EnableBulletCollisionPluginTriggerFactory::EnableBulletCollisionPluginTriggerFactory(
        data::EnableBulletCollisionPluginTriggerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableBulletCollisionPluginTriggerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableBulletCollisionPluginTriggerFactory = v2;
};

// Line 7011: range 0000000011180D5E-0000000011180DAB
void __cdecl data::GuidePaimonDisappearEnd::GuidePaimonDisappearEnd(data::GuidePaimonDisappearEnd *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GuidePaimonDisappearEnd + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 7011: range 00000000111811FA-0000000011181252
void __cdecl data::GuidePaimonDisappearEnd::GuidePaimonDisappearEnd(
        data::GuidePaimonDisappearEnd *const this,
        const data::GuidePaimonDisappearEnd *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GuidePaimonDisappearEnd + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 7017: range 0000000011309BE8-0000000011309C35
void __cdecl data::GuidePaimonDisappearEnd::~GuidePaimonDisappearEnd(data::GuidePaimonDisappearEnd *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GuidePaimonDisappearEnd + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7017: range 0000000011309C36-0000000011309C60
void __cdecl data::GuidePaimonDisappearEnd::~GuidePaimonDisappearEnd(data::GuidePaimonDisappearEnd *const this)
{
  data::GuidePaimonDisappearEnd::~GuidePaimonDisappearEnd(this);
  operator delete(this, 0x88uLL);
};

// Line 7022: range 00000000100AB484-00000000100AB494
const char *__cdecl data::GuidePaimonDisappearEnd::getTypeName(const data::GuidePaimonDisappearEnd *const this)
{
  return "GuidePaimonDisappearEnd";
};

// Line 7023: range 00000000100AB496-00000000100AB632
int32_t __cdecl data::GuidePaimonDisappearEnd::getHashNum(const data::GuidePaimonDisappearEnd *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GuidePaimonDisappearEnd::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GuidePaimonDisappearEnd",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7039: range 000000001118153C-000000001118157D
void __cdecl data::GuidePaimonDisappearEndFactory::GuidePaimonDisappearEndFactory(
        data::GuidePaimonDisappearEndFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GuidePaimonDisappearEndFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GuidePaimonDisappearEndFactory = v2;
};

// Line 7047: range 0000000011181886-00000000111819ED
void __cdecl data::SetPaimonLookAtCamera::SetPaimonLookAtCamera(data::SetPaimonLookAtCamera *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->from, v1);
  }
  this->from = 0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->lookat >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->lookat >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->lookat, v3, v4);
  this->lookat = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_time, v3);
  }
  this->min_time = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_time, (((_BYTE)this - 108) & 7u) + 3);
  }
  this->max_time = 0.0;
};

// Line 7047: range 0000000011181E3E-00000000111820B3
void __cdecl data::SetPaimonLookAtCamera::SetPaimonLookAtCamera(
        data::SetPaimonLookAtCamera *const this,
        const data::SetPaimonLookAtCamera *a2)
{
  int (**v2)(...); // rdx
  data::PaimonRequestFrom from; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool lookat; // cl
  char v8; // dl
  __int64 v9; // rdx
  float min_time; // xmm0_4
  float max_time; // xmm0_4
  const data::SetPaimonLookAtCamera *v12; // [rsp+0h] [rbp-10h]

  v12 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->from);
  }
  from = a2->from;
  v4 = *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->from, a2);
  }
  this->from = from;
  v5 = ((_BYTE)v12 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v12->lookat >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v12->lookat >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v12->lookat, v5, v6);
  lookat = v12->lookat;
  v8 = *(_BYTE *)(((unsigned __int64)&this->lookat >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->lookat, v5, v9);
  this->lookat = lookat;
  if ( *(_BYTE *)(((unsigned __int64)&v12->min_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v12->min_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v12->min_time);
  }
  min_time = v12->min_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_time, v5);
  }
  this->min_time = min_time;
  if ( *(_BYTE *)(((unsigned __int64)&v12->max_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v12 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v12->max_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v12->max_time);
  }
  max_time = v12->max_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_time, (((_BYTE)this - 108) & 7u) + 3);
  }
  this->max_time = max_time;
};

// Line 7057: range 0000000011309B6E-0000000011309BBB
void __cdecl data::SetPaimonLookAtCamera::~SetPaimonLookAtCamera(data::SetPaimonLookAtCamera *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7057: range 0000000011309BBC-0000000011309BE6
void __cdecl data::SetPaimonLookAtCamera::~SetPaimonLookAtCamera(data::SetPaimonLookAtCamera *const this)
{
  data::SetPaimonLookAtCamera::~SetPaimonLookAtCamera(this);
  operator delete(this, 0x98uLL);
};

// Line 7062: range 00000000100AB634-00000000100AB644
const char *__cdecl data::SetPaimonLookAtCamera::getTypeName(const data::SetPaimonLookAtCamera *const this)
{
  return "SetPaimonLookAtCamera";
};

// Line 7063: range 00000000100AB646-00000000100AB7E2
int32_t __cdecl data::SetPaimonLookAtCamera::getHashNum(const data::SetPaimonLookAtCamera *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetPaimonLookAtCamera::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetPaimonLookAtCamera",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7079: range 000000001118239C-00000000111823DD
void __cdecl data::SetPaimonLookAtCameraFactory::SetPaimonLookAtCameraFactory(
        data::SetPaimonLookAtCameraFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtCameraFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetPaimonLookAtCameraFactory = v2;
};

// Line 7087: range 00000000111826E6-00000000111827C1
void __cdecl data::PaimonAction::PaimonAction(data::PaimonAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::PaimonAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->from, v1);
  }
  this->from = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->action_name >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->action_name >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->action_name, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->action_name = 0;
};

// Line 7087: range 0000000011182C0A-0000000011182D70
void __cdecl data::PaimonAction::PaimonAction(data::PaimonAction *const this, const data::PaimonAction *a2)
{
  int (**v2)(...); // rdx
  data::PaimonRequestFrom from; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::PaimonSkill action_name; // ecx
  char v7; // dl
  const data::PaimonAction *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PaimonAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->from);
  }
  from = a2->from;
  v4 = *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->from, a2);
  }
  this->from = from;
  v5 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->action_name >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->action_name >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->action_name);
  }
  action_name = v8->action_name;
  v7 = *(_BYTE *)(((unsigned __int64)&this->action_name >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->action_name, v5);
  }
  this->action_name = action_name;
};

// Line 7095: range 0000000011309AF4-0000000011309B41
void __cdecl data::PaimonAction::~PaimonAction(data::PaimonAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PaimonAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7095: range 0000000011309B42-0000000011309B6C
void __cdecl data::PaimonAction::~PaimonAction(data::PaimonAction *const this)
{
  data::PaimonAction::~PaimonAction(this);
  operator delete(this, 0x90uLL);
};

// Line 7100: range 00000000100AB7E4-00000000100AB7F4
const char *__cdecl data::PaimonAction::getTypeName(const data::PaimonAction *const this)
{
  return "PaimonAction";
};

// Line 7101: range 00000000100AB7F6-00000000100AB992
int32_t __cdecl data::PaimonAction::getHashNum(const data::PaimonAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PaimonAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PaimonAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7117: range 000000001118305A-000000001118309B
void __cdecl data::PaimonActionFactory::PaimonActionFactory(data::PaimonActionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PaimonActionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PaimonActionFactory = v2;
};

// Line 7125: range 00000000111833A4-000000001118350B
void __cdecl data::SetPaimonLookAtAvatar::SetPaimonLookAtAvatar(data::SetPaimonLookAtAvatar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->from, v1);
  }
  this->from = 0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->lookat >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->lookat >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->lookat, v3, v4);
  this->lookat = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_time, v3);
  }
  this->min_time = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_time, (((_BYTE)this - 108) & 7u) + 3);
  }
  this->max_time = 0.0;
};

// Line 7125: range 000000001118395C-0000000011183BD1
void __cdecl data::SetPaimonLookAtAvatar::SetPaimonLookAtAvatar(
        data::SetPaimonLookAtAvatar *const this,
        const data::SetPaimonLookAtAvatar *a2)
{
  int (**v2)(...); // rdx
  data::PaimonRequestFrom from; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool lookat; // cl
  char v8; // dl
  __int64 v9; // rdx
  float min_time; // xmm0_4
  float max_time; // xmm0_4
  const data::SetPaimonLookAtAvatar *v12; // [rsp+0h] [rbp-10h]

  v12 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->from);
  }
  from = a2->from;
  v4 = *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->from, a2);
  }
  this->from = from;
  v5 = ((_BYTE)v12 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v12->lookat >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v12->lookat >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v12->lookat, v5, v6);
  lookat = v12->lookat;
  v8 = *(_BYTE *)(((unsigned __int64)&this->lookat >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->lookat, v5, v9);
  this->lookat = lookat;
  if ( *(_BYTE *)(((unsigned __int64)&v12->min_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v12->min_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v12->min_time);
  }
  min_time = v12->min_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_time, v5);
  }
  this->min_time = min_time;
  if ( *(_BYTE *)(((unsigned __int64)&v12->max_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v12 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v12->max_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v12->max_time);
  }
  max_time = v12->max_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_time, (((_BYTE)this - 108) & 7u) + 3);
  }
  this->max_time = max_time;
};

// Line 7135: range 0000000011309A7A-0000000011309AC7
void __cdecl data::SetPaimonLookAtAvatar::~SetPaimonLookAtAvatar(data::SetPaimonLookAtAvatar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtAvatar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7135: range 0000000011309AC8-0000000011309AF2
void __cdecl data::SetPaimonLookAtAvatar::~SetPaimonLookAtAvatar(data::SetPaimonLookAtAvatar *const this)
{
  data::SetPaimonLookAtAvatar::~SetPaimonLookAtAvatar(this);
  operator delete(this, 0x98uLL);
};

// Line 7140: range 00000000100AB994-00000000100AB9A4
const char *__cdecl data::SetPaimonLookAtAvatar::getTypeName(const data::SetPaimonLookAtAvatar *const this)
{
  return "SetPaimonLookAtAvatar";
};

// Line 7141: range 00000000100AB9A6-00000000100ABB42
int32_t __cdecl data::SetPaimonLookAtAvatar::getHashNum(const data::SetPaimonLookAtAvatar *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetPaimonLookAtAvatar::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetPaimonLookAtAvatar",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7157: range 0000000011183EBA-0000000011183EFB
void __cdecl data::SetPaimonLookAtAvatarFactory::SetPaimonLookAtAvatarFactory(
        data::SetPaimonLookAtAvatarFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPaimonLookAtAvatarFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetPaimonLookAtAvatarFactory = v2;
};

// Line 7165: range 0000000011184204-00000000111842F3
void __cdecl data::SetPaimonTempOffset::SetPaimonTempOffset(data::SetPaimonTempOffset *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetPaimonTempOffset + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->from, v1);
  }
  this->from = 0;
  data::Vector::Vector(&this->off_set_pos);
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->time, (((_BYTE)this - 100) & 7u) + 3);
  }
  this->time = 0.0;
};

// Line 7165: range 0000000011184742-00000000111849B1
void __cdecl data::SetPaimonTempOffset::SetPaimonTempOffset(
        data::SetPaimonTempOffset *const this,
        const data::SetPaimonTempOffset *a2)
{
  int (**v2)(...); // rdx
  data::PaimonRequestFrom from; // ecx
  char v4; // al
  __int64 v5; // rdx
  float time; // xmm0_4
  const data::SetPaimonTempOffset *v7; // [rsp+0h] [rbp-10h]

  v7 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetPaimonTempOffset + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->from >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->from);
  }
  from = a2->from;
  v4 = *(_BYTE *)(((unsigned __int64)&this->from >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->from, a2);
  }
  this->from = from;
  if ( (((unsigned __int8)this - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&this->off_set_pos >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->off_set_pos >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->off_set_pos.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->off_set_pos.is_json_loaded + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->off_set_pos, 16LL);
  }
  if ( (((unsigned __int8)v7 - 116) & 7) >= *(_BYTE *)(((unsigned __int64)&v7->off_set_pos >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&v7->off_set_pos >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&v7->off_set_pos.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)v7 - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&v7->off_set_pos.is_json_loaded + 3) >> 3)
                                                     + 0x7FFF8000) )
  {
    __asan_report_load_n(&v7->off_set_pos, 16LL);
  }
  v5 = *(_QWORD *)&v7->off_set_pos.z;
  *(_QWORD *)&this->off_set_pos.x = *(_QWORD *)&v7->off_set_pos.x;
  *(_QWORD *)&this->off_set_pos.z = v5;
  if ( *(_BYTE *)(((unsigned __int64)&v7->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v7 - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v7->time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v7->time);
  }
  time = v7->time;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->time, (((_BYTE)this - 100) & 7u) + 3);
  }
  this->time = time;
};

// Line 7174: range 0000000011309A4E-0000000011309A78
void __cdecl data::SetPaimonTempOffset::~SetPaimonTempOffset(data::SetPaimonTempOffset *const this)
{
  data::SetPaimonTempOffset::~SetPaimonTempOffset(this);
  operator delete(this, 0xA0uLL);
};

// Line 7174: range 0000000011309A00-0000000011309A4D
void __cdecl data::SetPaimonTempOffset::~SetPaimonTempOffset(data::SetPaimonTempOffset *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPaimonTempOffset + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7179: range 00000000100ABB44-00000000100ABB54
const char *__cdecl data::SetPaimonTempOffset::getTypeName(const data::SetPaimonTempOffset *const this)
{
  return "SetPaimonTempOffset";
};

// Line 7180: range 00000000100ABB56-00000000100ABCF2
int32_t __cdecl data::SetPaimonTempOffset::getHashNum(const data::SetPaimonTempOffset *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetPaimonTempOffset::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetPaimonTempOffset",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7196: range 0000000011184C9A-0000000011184CDB
void __cdecl data::SetPaimonTempOffsetFactory::SetPaimonTempOffsetFactory(data::SetPaimonTempOffsetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetPaimonTempOffsetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetPaimonTempOffsetFactory = v2;
};

// Line 7204: range 0000000011184FE4-0000000011185071
void __cdecl data::SetKeepInAirVelocityForce::SetKeepInAirVelocityForce(data::SetKeepInAirVelocityForce *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetKeepInAirVelocityForce + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 7204: range 00000000111854BA-0000000011185592
void __cdecl data::SetKeepInAirVelocityForce::SetKeepInAirVelocityForce(
        data::SetKeepInAirVelocityForce *const this,
        const data::SetKeepInAirVelocityForce *a2)
{
  int (**v2)(...); // rdx
  bool set_enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetKeepInAirVelocityForce + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, a2, &a2->set_enable);
  set_enable = a2->set_enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->set_enable, a2, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 7211: range 0000000011309986-00000000113099D3
void __cdecl data::SetKeepInAirVelocityForce::~SetKeepInAirVelocityForce(data::SetKeepInAirVelocityForce *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetKeepInAirVelocityForce + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7211: range 00000000113099D4-00000000113099FE
void __cdecl data::SetKeepInAirVelocityForce::~SetKeepInAirVelocityForce(data::SetKeepInAirVelocityForce *const this)
{
  data::SetKeepInAirVelocityForce::~SetKeepInAirVelocityForce(this);
  operator delete(this, 0x90uLL);
};

// Line 7216: range 00000000100ABCF4-00000000100ABD04
const char *__cdecl data::SetKeepInAirVelocityForce::getTypeName(const data::SetKeepInAirVelocityForce *const this)
{
  return "SetKeepInAirVelocityForce";
};

// Line 7217: range 00000000100ABD06-00000000100ABEA2
int32_t __cdecl data::SetKeepInAirVelocityForce::getHashNum(const data::SetKeepInAirVelocityForce *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetKeepInAirVelocityForce::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetKeepInAirVelocityForce",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7233: range 000000001118587C-00000000111858BD
void __cdecl data::SetKeepInAirVelocityForceFactory::SetKeepInAirVelocityForceFactory(
        data::SetKeepInAirVelocityForceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetKeepInAirVelocityForceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetKeepInAirVelocityForceFactory = v2;
};

// Line 7241: range 0000000011185BC6-0000000011185C53
void __cdecl data::ForceAirStateFly::ForceAirStateFly(data::ForceAirStateFly *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ForceAirStateFly + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->is_active >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_active, v1, &this->is_active);
  this->is_active = 0;
};

// Line 7241: range 000000001118609C-0000000011186174
void __cdecl data::ForceAirStateFly::ForceAirStateFly(
        data::ForceAirStateFly *const this,
        const data::ForceAirStateFly *a2)
{
  int (**v2)(...); // rdx
  bool is_active; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ForceAirStateFly + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->is_active >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_active, a2, &a2->is_active);
  is_active = a2->is_active;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_active >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->is_active, a2, &this->is_active);
  }
  this->is_active = is_active;
};

// Line 7248: range 000000001130995A-0000000011309984
void __cdecl data::ForceAirStateFly::~ForceAirStateFly(data::ForceAirStateFly *const this)
{
  data::ForceAirStateFly::~ForceAirStateFly(this);
  operator delete(this, 0x90uLL);
};

// Line 7248: range 000000001130990C-0000000011309959
void __cdecl data::ForceAirStateFly::~ForceAirStateFly(data::ForceAirStateFly *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceAirStateFly + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7253: range 00000000100ABEA4-00000000100ABEB4
const char *__cdecl data::ForceAirStateFly::getTypeName(const data::ForceAirStateFly *const this)
{
  return "ForceAirStateFly";
};

// Line 7254: range 00000000100ABEB6-00000000100AC052
int32_t __cdecl data::ForceAirStateFly::getHashNum(const data::ForceAirStateFly *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ForceAirStateFly::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ForceAirStateFly",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7270: range 000000001118645E-000000001118649F
void __cdecl data::ForceAirStateFlyFactory::ForceAirStateFlyFactory(data::ForceAirStateFlyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceAirStateFlyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ForceAirStateFlyFactory = v2;
};

// Line 7278: range 00000000111867A8-00000000111867F5
void __cdecl data::ToNearstAnchorPoint::ToNearstAnchorPoint(data::ToNearstAnchorPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ToNearstAnchorPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 7278: range 0000000011186C44-0000000011186C9C
void __cdecl data::ToNearstAnchorPoint::ToNearstAnchorPoint(
        data::ToNearstAnchorPoint *const this,
        const data::ToNearstAnchorPoint *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ToNearstAnchorPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 7284: range 00000000113098E0-000000001130990A
void __cdecl data::ToNearstAnchorPoint::~ToNearstAnchorPoint(data::ToNearstAnchorPoint *const this)
{
  data::ToNearstAnchorPoint::~ToNearstAnchorPoint(this);
  operator delete(this, 0x88uLL);
};

// Line 7284: range 0000000011309892-00000000113098DF
void __cdecl data::ToNearstAnchorPoint::~ToNearstAnchorPoint(data::ToNearstAnchorPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ToNearstAnchorPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7289: range 00000000100AC054-00000000100AC064
const char *__cdecl data::ToNearstAnchorPoint::getTypeName(const data::ToNearstAnchorPoint *const this)
{
  return "ToNearstAnchorPoint";
};

// Line 7290: range 00000000100AC066-00000000100AC202
int32_t __cdecl data::ToNearstAnchorPoint::getHashNum(const data::ToNearstAnchorPoint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ToNearstAnchorPoint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ToNearstAnchorPoint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7306: range 0000000011186F86-0000000011186FC7
void __cdecl data::ToNearstAnchorPointFactory::ToNearstAnchorPointFactory(data::ToNearstAnchorPointFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ToNearstAnchorPointFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ToNearstAnchorPointFactory = v2;
};

// Line 7314: range 00000000111872D0-0000000011187493
void __cdecl data::PushDvalinS01Process::PushDvalinS01Process(data::PushDvalinS01Process *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::PushDvalinS01Process + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->time, v1);
  }
  this->time = 0.0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->to_percentage >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->to_percentage >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->to_percentage, v3);
  }
  this->to_percentage = 0.0;
  if ( *(char *)(((unsigned __int64)&this->un_break >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->un_break, v3, &this->un_break);
  this->un_break = 0;
  v4 = ((_BYTE)this - 111) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->set_force >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->set_force >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->set_force, v4, v5);
  this->set_force = 1;
  data::Vector::Vector(&this->vector);
  if ( *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->attenuation, (((_BYTE)this - 92) & 7u) + 3);
  }
  this->attenuation = 0.0;
};

// Line 7314: range 00000000111878D6-0000000011187CE4
void __cdecl data::PushDvalinS01Process::PushDvalinS01Process(
        data::PushDvalinS01Process *const this,
        const data::PushDvalinS01Process *a2)
{
  int (**v2)(...); // rdx
  float time; // xmm0_4
  float to_percentage; // xmm0_4
  __int64 v5; // rsi
  bool un_break; // cl
  char v7; // al
  __int64 v8; // rsi
  __int64 v9; // rdx
  bool set_force; // cl
  char v11; // dl
  __int64 v12; // rdx
  __int64 v13; // rdx
  float attenuation; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PushDvalinS01Process + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->time);
  }
  time = a2->time;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->time, a2);
  }
  this->time = time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->to_percentage >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->to_percentage >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->to_percentage);
  }
  to_percentage = a2->to_percentage;
  v5 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->to_percentage >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->to_percentage >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->to_percentage, v5);
  }
  this->to_percentage = to_percentage;
  if ( *(char *)(((unsigned __int64)&a2->un_break >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->un_break, v5, &a2->un_break);
  un_break = a2->un_break;
  v7 = *(_BYTE *)(((unsigned __int64)&this->un_break >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store1(&this->un_break, v5, &this->un_break);
  }
  this->un_break = un_break;
  v8 = ((_BYTE)a2 - 111) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&a2->set_force >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&a2->set_force >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&a2->set_force, v8, v9);
  set_force = a2->set_force;
  v11 = *(_BYTE *)(((unsigned __int64)&this->set_force >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v11 != 0;
  v12 = (v11 != 0) & (unsigned __int8)((((unsigned __int8)this - 111) & 7) >= v11);
  if ( (_BYTE)v12 )
    __asan_report_store1(&this->set_force, v8, v12);
  this->set_force = set_force;
  if ( (((unsigned __int8)this - 108) & 7) >= *(_BYTE *)(((unsigned __int64)&this->vector >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->vector >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->vector.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 93) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->vector.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->vector, 16LL);
  }
  if ( (((unsigned __int8)a2 - 108) & 7) >= *(_BYTE *)(((unsigned __int64)&a2->vector >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&a2->vector >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&a2->vector.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 - 93) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->vector.is_json_loaded + 3) >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->vector, 16LL);
  }
  v13 = *(_QWORD *)&a2->vector.z;
  *(_QWORD *)&this->vector.x = *(_QWORD *)&a2->vector.x;
  *(_QWORD *)&this->vector.z = v13;
  if ( *(_BYTE *)(((unsigned __int64)&a2->attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->attenuation >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->attenuation);
  }
  attenuation = a2->attenuation;
  if ( *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->attenuation, (((_BYTE)this - 92) & 7u) + 3);
  }
  this->attenuation = attenuation;
};

// Line 7326: range 0000000011309818-0000000011309865
void __cdecl data::PushDvalinS01Process::~PushDvalinS01Process(data::PushDvalinS01Process *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PushDvalinS01Process + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7326: range 0000000011309866-0000000011309890
void __cdecl data::PushDvalinS01Process::~PushDvalinS01Process(data::PushDvalinS01Process *const this)
{
  data::PushDvalinS01Process::~PushDvalinS01Process(this);
  operator delete(this, 0xA8uLL);
};

// Line 7331: range 00000000100AC204-00000000100AC214
const char *__cdecl data::PushDvalinS01Process::getTypeName(const data::PushDvalinS01Process *const this)
{
  return "PushDvalinS01Process";
};

// Line 7332: range 00000000100AC216-00000000100AC3B2
int32_t __cdecl data::PushDvalinS01Process::getHashNum(const data::PushDvalinS01Process *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PushDvalinS01Process::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PushDvalinS01Process",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7348: range 0000000011187FCE-000000001118800F
void __cdecl data::PushDvalinS01ProcessFactory::PushDvalinS01ProcessFactory(
        data::PushDvalinS01ProcessFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PushDvalinS01ProcessFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PushDvalinS01ProcessFactory = v2;
};

// Line 7356: range 0000000011188318-00000000111883A8
void __cdecl data::SetDvalinS01FlyState::SetDvalinS01FlyState(data::SetDvalinS01FlyState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetDvalinS01FlyState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->to_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->to_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->to_state, v1);
  }
  this->to_state = 0;
};

// Line 7356: range 00000000111887F2-00000000111888C9
void __cdecl data::SetDvalinS01FlyState::SetDvalinS01FlyState(
        data::SetDvalinS01FlyState *const this,
        const data::SetDvalinS01FlyState *a2)
{
  int (**v2)(...); // rdx
  int32_t to_state; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetDvalinS01FlyState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->to_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->to_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->to_state);
  }
  to_state = a2->to_state;
  v4 = *(_BYTE *)(((unsigned __int64)&this->to_state >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->to_state, a2);
  }
  this->to_state = to_state;
};

// Line 7363: range 000000001130979E-00000000113097EB
void __cdecl data::SetDvalinS01FlyState::~SetDvalinS01FlyState(data::SetDvalinS01FlyState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetDvalinS01FlyState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7363: range 00000000113097EC-0000000011309816
void __cdecl data::SetDvalinS01FlyState::~SetDvalinS01FlyState(data::SetDvalinS01FlyState *const this)
{
  data::SetDvalinS01FlyState::~SetDvalinS01FlyState(this);
  operator delete(this, 0x90uLL);
};

// Line 7368: range 00000000100AC3B4-00000000100AC3C4
const char *__cdecl data::SetDvalinS01FlyState::getTypeName(const data::SetDvalinS01FlyState *const this)
{
  return "SetDvalinS01FlyState";
};

// Line 7369: range 00000000100AC3C6-00000000100AC562
int32_t __cdecl data::SetDvalinS01FlyState::getHashNum(const data::SetDvalinS01FlyState *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetDvalinS01FlyState::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetDvalinS01FlyState",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7385: range 0000000011188BB2-0000000011188BF3
void __cdecl data::SetDvalinS01FlyStateFactory::SetDvalinS01FlyStateFactory(
        data::SetDvalinS01FlyStateFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetDvalinS01FlyStateFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetDvalinS01FlyStateFactory = v2;
};

// Line 7393: range 0000000011188EFC-0000000011188F5B
void __cdecl data::RegistToStageScript::RegistToStageScript(data::RegistToStageScript *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RegistToStageScript + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->alias);
};

// Line 7393: range 000000001118939E-0000000011189439
void __cdecl data::RegistToStageScript::RegistToStageScript(
        data::RegistToStageScript *const this,
        const data::RegistToStageScript *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RegistToStageScript + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->alias, &a2->alias);
};

// Line 7400: range 0000000011309712-0000000011309771
void __cdecl data::RegistToStageScript::~RegistToStageScript(data::RegistToStageScript *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RegistToStageScript + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->alias);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7400: range 0000000011309772-000000001130979C
void __cdecl data::RegistToStageScript::~RegistToStageScript(data::RegistToStageScript *const this)
{
  data::RegistToStageScript::~RegistToStageScript(this);
  operator delete(this, 0xA8uLL);
};

// Line 7405: range 00000000100AC564-00000000100AC574
const char *__cdecl data::RegistToStageScript::getTypeName(const data::RegistToStageScript *const this)
{
  return "RegistToStageScript";
};

// Line 7406: range 00000000100AC576-00000000100AC712
int32_t __cdecl data::RegistToStageScript::getHashNum(const data::RegistToStageScript *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RegistToStageScript::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RegistToStageScript",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7422: range 0000000011189722-0000000011189763
void __cdecl data::RegistToStageScriptFactory::RegistToStageScriptFactory(data::RegistToStageScriptFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RegistToStageScriptFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RegistToStageScriptFactory = v2;
};

// Line 7430: range 0000000011189A6C-0000000011189ACB
void __cdecl data::SyncToStageScript::SyncToStageScript(data::SyncToStageScript *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SyncToStageScript + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->alias);
};

// Line 7430: range 0000000011189F0E-0000000011189FA9
void __cdecl data::SyncToStageScript::SyncToStageScript(
        data::SyncToStageScript *const this,
        const data::SyncToStageScript *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SyncToStageScript + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->alias, &a2->alias);
};

// Line 7437: range 00000000113096E6-0000000011309710
void __cdecl data::SyncToStageScript::~SyncToStageScript(data::SyncToStageScript *const this)
{
  data::SyncToStageScript::~SyncToStageScript(this);
  operator delete(this, 0xA8uLL);
};

// Line 7437: range 0000000011309686-00000000113096E5
void __cdecl data::SyncToStageScript::~SyncToStageScript(data::SyncToStageScript *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SyncToStageScript + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->alias);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7442: range 00000000100AC714-00000000100AC724
const char *__cdecl data::SyncToStageScript::getTypeName(const data::SyncToStageScript *const this)
{
  return "SyncToStageScript";
};

// Line 7443: range 00000000100AC726-00000000100AC8C2
int32_t __cdecl data::SyncToStageScript::getHashNum(const data::SyncToStageScript *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SyncToStageScript::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SyncToStageScript",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7459: range 000000001118A292-000000001118A2D3
void __cdecl data::SyncToStageScriptFactory::SyncToStageScriptFactory(data::SyncToStageScriptFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SyncToStageScriptFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SyncToStageScriptFactory = v2;
};

// Line 7467: range 000000001118A5DC-000000001118A669
void __cdecl data::CalcDvalinS04RebornPoint::CalcDvalinS04RebornPoint(data::CalcDvalinS04RebornPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::CalcDvalinS04RebornPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 7467: range 000000001118AAB2-000000001118AB8A
void __cdecl data::CalcDvalinS04RebornPoint::CalcDvalinS04RebornPoint(
        data::CalcDvalinS04RebornPoint *const this,
        const data::CalcDvalinS04RebornPoint *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CalcDvalinS04RebornPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 7474: range 000000001130960C-0000000011309659
void __cdecl data::CalcDvalinS04RebornPoint::~CalcDvalinS04RebornPoint(data::CalcDvalinS04RebornPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CalcDvalinS04RebornPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7474: range 000000001130965A-0000000011309684
void __cdecl data::CalcDvalinS04RebornPoint::~CalcDvalinS04RebornPoint(data::CalcDvalinS04RebornPoint *const this)
{
  data::CalcDvalinS04RebornPoint::~CalcDvalinS04RebornPoint(this);
  operator delete(this, 0x90uLL);
};

// Line 7479: range 00000000100AC8C4-00000000100AC8D4
const char *__cdecl data::CalcDvalinS04RebornPoint::getTypeName(const data::CalcDvalinS04RebornPoint *const this)
{
  return "CalcDvalinS04RebornPoint";
};

// Line 7480: range 00000000100AC8D6-00000000100ACA72
int32_t __cdecl data::CalcDvalinS04RebornPoint::getHashNum(const data::CalcDvalinS04RebornPoint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CalcDvalinS04RebornPoint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CalcDvalinS04RebornPoint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7496: range 000000001118AE74-000000001118AEB5
void __cdecl data::CalcDvalinS04RebornPointFactory::CalcDvalinS04RebornPointFactory(
        data::CalcDvalinS04RebornPointFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CalcDvalinS04RebornPointFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CalcDvalinS04RebornPointFactory = v2;
};

// Line 7504: range 000000001118B1BE-000000001118B20B
void __cdecl data::TriggerPlayerDie::TriggerPlayerDie(data::TriggerPlayerDie *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerPlayerDie + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 7504: range 000000001118B65A-000000001118B6B2
void __cdecl data::TriggerPlayerDie::TriggerPlayerDie(
        data::TriggerPlayerDie *const this,
        const data::TriggerPlayerDie *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerPlayerDie + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 7510: range 00000000113095E0-000000001130960A
void __cdecl data::TriggerPlayerDie::~TriggerPlayerDie(data::TriggerPlayerDie *const this)
{
  data::TriggerPlayerDie::~TriggerPlayerDie(this);
  operator delete(this, 0x88uLL);
};

// Line 7510: range 0000000011309592-00000000113095DF
void __cdecl data::TriggerPlayerDie::~TriggerPlayerDie(data::TriggerPlayerDie *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerPlayerDie + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7515: range 00000000100ACA74-00000000100ACA84
const char *__cdecl data::TriggerPlayerDie::getTypeName(const data::TriggerPlayerDie *const this)
{
  return "TriggerPlayerDie";
};

// Line 7516: range 00000000100ACA86-00000000100ACC22
int32_t __cdecl data::TriggerPlayerDie::getHashNum(const data::TriggerPlayerDie *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerPlayerDie::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerPlayerDie",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7532: range 000000001118B99C-000000001118B9DD
void __cdecl data::TriggerPlayerDieFactory::TriggerPlayerDieFactory(data::TriggerPlayerDieFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerPlayerDieFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerPlayerDieFactory = v2;
};

// Line 7540: range 000000001118BCE6-000000001118BD45
void __cdecl data::ResetEnviroEular::ResetEnviroEular(data::ResetEnviroEular *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetEnviroEular + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::Vector::Vector(&this->eular_angles);
};

// Line 7540: range 000000001118C196-000000001118C262
void __cdecl data::ResetEnviroEular::ResetEnviroEular(
        data::ResetEnviroEular *const this,
        const data::ResetEnviroEular *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetEnviroEular + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->eular_angles >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->eular_angles >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->eular_angles);
  v3 = *(_QWORD *)&a2->eular_angles.z;
  *(_QWORD *)&this->eular_angles.x = *(_QWORD *)&a2->eular_angles.x;
  *(_QWORD *)&this->eular_angles.z = v3;
};

// Line 7547: range 0000000011309518-0000000011309565
void __cdecl data::ResetEnviroEular::~ResetEnviroEular(data::ResetEnviroEular *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetEnviroEular + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7547: range 0000000011309566-0000000011309590
void __cdecl data::ResetEnviroEular::~ResetEnviroEular(data::ResetEnviroEular *const this)
{
  data::ResetEnviroEular::~ResetEnviroEular(this);
  operator delete(this, 0x98uLL);
};

// Line 7552: range 00000000100ACC24-00000000100ACC34
const char *__cdecl data::ResetEnviroEular::getTypeName(const data::ResetEnviroEular *const this)
{
  return "ResetEnviroEular";
};

// Line 7553: range 00000000100ACC36-00000000100ACDD2
int32_t __cdecl data::ResetEnviroEular::getHashNum(const data::ResetEnviroEular *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetEnviroEular::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetEnviroEular",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7569: range 000000001118C54C-000000001118C58D
void __cdecl data::ResetEnviroEularFactory::ResetEnviroEularFactory(data::ResetEnviroEularFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetEnviroEularFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetEnviroEularFactory = v2;
};

// Line 7577: range 000000001118C896-000000001118CA58
void __cdecl data::SetEmissionScaler::SetEmissionScaler(data::SetEmissionScaler *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetEmissionScaler + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->material_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->material_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->material_type, v1);
  }
  this->material_type = All_4;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->use_default_color >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->use_default_color >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->use_default_color, v3, v4);
  this->use_default_color = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value, v3);
  }
  this->value = 0.0;
  v5 = (((_BYTE)this - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, v5);
  }
  this->duration = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->emission_power >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->emission_power >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->emission_power, v5);
  }
  this->emission_power = 3.4028235e38;
  data::ColorVector::ColorVector(&this->emission_color);
};

// Line 7577: range 000000001118CEA2-000000001118D2AB
void __cdecl data::SetEmissionScaler::SetEmissionScaler(
        data::SetEmissionScaler *const this,
        const data::SetEmissionScaler *a2)
{
  int (**v2)(...); // rdx
  data::BodyMaterialType material_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool use_default_color; // cl
  char v8; // dl
  __int64 v9; // rdx
  float value; // xmm0_4
  float duration; // xmm0_4
  __int64 v12; // rsi
  float emission_power; // xmm0_4
  __int64 v14; // rdx
  const data::SetEmissionScaler *v15; // [rsp+0h] [rbp-10h]

  v15 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetEmissionScaler + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->material_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->material_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->material_type);
  }
  material_type = a2->material_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->material_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->material_type, a2);
  }
  this->material_type = material_type;
  v5 = ((_BYTE)v15 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v15->use_default_color >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v15->use_default_color >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v15->use_default_color, v5, v6);
  use_default_color = v15->use_default_color;
  v8 = *(_BYTE *)(((unsigned __int64)&this->use_default_color >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->use_default_color, v5, v9);
  this->use_default_color = use_default_color;
  if ( *(_BYTE *)(((unsigned __int64)&v15->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v15->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v15->value);
  }
  value = v15->value;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value, v5);
  }
  this->value = value;
  if ( *(_BYTE *)(((unsigned __int64)&v15->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v15 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v15->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v15->duration);
  }
  duration = v15->duration;
  v12 = (((_BYTE)this - 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, v12);
  }
  this->duration = duration;
  if ( *(_BYTE *)(((unsigned __int64)&v15->emission_power >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v15->emission_power >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v15->emission_power);
  }
  emission_power = v15->emission_power;
  if ( *(_BYTE *)(((unsigned __int64)&this->emission_power >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->emission_power >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->emission_power, v12);
  }
  this->emission_power = emission_power;
  if ( (((unsigned __int8)this - 100) & 7) >= *(_BYTE *)(((unsigned __int64)&this->emission_color >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->emission_color >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->emission_color.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 81) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->emission_color.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->emission_color, 20LL);
  }
  if ( (((unsigned __int8)v15 - 100) & 7) >= *(_BYTE *)(((unsigned __int64)&v15->emission_color >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&v15->emission_color >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&v15->emission_color.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)v15 - 81) & 7) >= *(_BYTE *)(((unsigned __int64)(&v15->emission_color.is_json_loaded + 3) >> 3)
                                                     + 0x7FFF8000) )
  {
    __asan_report_load_n(&v15->emission_color, 20LL);
  }
  v14 = *(_QWORD *)&v15->emission_color.b;
  *(_QWORD *)&this->emission_color.r = *(_QWORD *)&v15->emission_color.r;
  *(_QWORD *)&this->emission_color.b = v14;
  *(_DWORD *)&this->emission_color.is_json_loaded = *(_DWORD *)&v15->emission_color.is_json_loaded;
};

// Line 7589: range 00000000113094EC-0000000011309516
void __cdecl data::SetEmissionScaler::~SetEmissionScaler(data::SetEmissionScaler *const this)
{
  data::SetEmissionScaler::~SetEmissionScaler(this);
  operator delete(this, 0xB0uLL);
};

// Line 7589: range 000000001130949E-00000000113094EB
void __cdecl data::SetEmissionScaler::~SetEmissionScaler(data::SetEmissionScaler *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetEmissionScaler + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7594: range 00000000100ACDD4-00000000100ACDE4
const char *__cdecl data::SetEmissionScaler::getTypeName(const data::SetEmissionScaler *const this)
{
  return "SetEmissionScaler";
};

// Line 7595: range 00000000100ACDE6-00000000100ACF82
int32_t __cdecl data::SetEmissionScaler::getHashNum(const data::SetEmissionScaler *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetEmissionScaler::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetEmissionScaler",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7611: range 000000001118D594-000000001118D5D5
void __cdecl data::SetEmissionScalerFactory::SetEmissionScalerFactory(data::SetEmissionScalerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetEmissionScalerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetEmissionScalerFactory = v2;
};

// Line 7619: range 000000001118D8DE-000000001118DA0F
void __cdecl data::SetSubWeaponEmissionScaler::SetSubWeaponEmissionScaler(data::SetSubWeaponEmissionScaler *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSubWeaponEmissionScaler + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->sub_weapons);
  if ( *(char *)(((unsigned __int64)&this->use_default_color >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_default_color, v1, &this->use_default_color);
  this->use_default_color = 0;
  v3 = (((_BYTE)this - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value, v3);
  }
  this->value = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v3);
  }
  this->duration = 0.0;
};

// Line 7619: range 000000001118DE58-000000001118E087
void __cdecl data::SetSubWeaponEmissionScaler::SetSubWeaponEmissionScaler(
        data::SetSubWeaponEmissionScaler *const this,
        const data::SetSubWeaponEmissionScaler *a2)
{
  int (**v2)(...); // rdx
  data::StringList *p_sub_weapons; // rsi
  bool use_default_color; // cl
  char v5; // al
  float value; // xmm0_4
  __int64 v7; // rsi
  float duration; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSubWeaponEmissionScaler + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_sub_weapons = &a2->sub_weapons;
  std::vector<std::string>::vector(&this->sub_weapons, &a2->sub_weapons);
  if ( *(char *)(((unsigned __int64)&a2->use_default_color >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_default_color, p_sub_weapons, &a2->use_default_color);
  use_default_color = a2->use_default_color;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_default_color >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_sub_weapons) = v5 != 0;
    __asan_report_store1(&this->use_default_color, p_sub_weapons, &this->use_default_color);
  }
  this->use_default_color = use_default_color;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->value);
  }
  value = a2->value;
  v7 = (((_BYTE)this - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value, v7);
  }
  this->value = value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v7);
  }
  this->duration = duration;
};

// Line 7629: range 0000000011309412-0000000011309471
void __cdecl data::SetSubWeaponEmissionScaler::~SetSubWeaponEmissionScaler(
        data::SetSubWeaponEmissionScaler *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSubWeaponEmissionScaler + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->sub_weapons);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7629: range 0000000011309472-000000001130949C
void __cdecl data::SetSubWeaponEmissionScaler::~SetSubWeaponEmissionScaler(
        data::SetSubWeaponEmissionScaler *const this)
{
  data::SetSubWeaponEmissionScaler::~SetSubWeaponEmissionScaler(this);
  operator delete(this, 0xB0uLL);
};

// Line 7634: range 00000000100ACF84-00000000100ACF94
const char *__cdecl data::SetSubWeaponEmissionScaler::getTypeName(const data::SetSubWeaponEmissionScaler *const this)
{
  return "SetSubWeaponEmissionScaler";
};

// Line 7635: range 00000000100ACF96-00000000100AD132
int32_t __cdecl data::SetSubWeaponEmissionScaler::getHashNum(const data::SetSubWeaponEmissionScaler *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSubWeaponEmissionScaler::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSubWeaponEmissionScaler",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7651: range 000000001118E370-000000001118E3B1
void __cdecl data::SetSubWeaponEmissionScalerFactory::SetSubWeaponEmissionScalerFactory(
        data::SetSubWeaponEmissionScalerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSubWeaponEmissionScalerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSubWeaponEmissionScalerFactory = v2;
};

// Line 7659: range 000000001118E6BA-000000001118E72B
void __cdecl data::EnterCameraLock::EnterCameraLock(data::EnterCameraLock *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnterCameraLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->trans_name);
  std::string::basic_string(&this->cfg_path);
};

// Line 7659: range 000000001118EB7E-000000001118EC50
void __cdecl data::EnterCameraLock::EnterCameraLock(data::EnterCameraLock *const this, const data::EnterCameraLock *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnterCameraLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->trans_name, &a2->trans_name);
  std::string::basic_string(&this->cfg_path, &a2->cfg_path);
};

// Line 7667: range 0000000011309374-00000000113093E5
void __cdecl data::EnterCameraLock::~EnterCameraLock(data::EnterCameraLock *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnterCameraLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->cfg_path);
  std::string::~string(&this->trans_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7667: range 00000000113093E6-0000000011309410
void __cdecl data::EnterCameraLock::~EnterCameraLock(data::EnterCameraLock *const this)
{
  data::EnterCameraLock::~EnterCameraLock(this);
  operator delete(this, 0xC8uLL);
};

// Line 7672: range 00000000100AD134-00000000100AD144
const char *__cdecl data::EnterCameraLock::getTypeName(const data::EnterCameraLock *const this)
{
  return "EnterCameraLock";
};

// Line 7673: range 00000000100AD146-00000000100AD2E2
int32_t __cdecl data::EnterCameraLock::getHashNum(const data::EnterCameraLock *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnterCameraLock::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnterCameraLock",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7689: range 000000001118EF3A-000000001118EF7B
void __cdecl data::EnterCameraLockFactory::EnterCameraLockFactory(data::EnterCameraLockFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnterCameraLockFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnterCameraLockFactory = v2;
};

// Line 7697: range 000000001118F284-000000001118F3E1
void __cdecl data::ShowUICombatBar::ShowUICombatBar(data::ShowUICombatBar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ShowUICombatBar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->show, v1, &this->show);
  this->show = 0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->sort_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->sort_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->sort_id, v3);
  }
  this->sort_id = 0;
  if ( *(char *)(((unsigned __int64)&this->changing_sort_id >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->changing_sort_id, v3, &this->changing_sort_id);
  this->changing_sort_id = 0;
  v4 = ((_BYTE)this - 111) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->fore >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->fore >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->fore, v4, v5);
  this->fore = 0;
};

// Line 7697: range 000000001118F832-000000001118FAA3
void __cdecl data::ShowUICombatBar::ShowUICombatBar(data::ShowUICombatBar *const this, const data::ShowUICombatBar *a2)
{
  int (**v2)(...); // rdx
  bool show; // cl
  char v4; // al
  __int64 v5; // rsi
  uint32_t sort_id; // ecx
  char v7; // dl
  bool changing_sort_id; // cl
  char v9; // al
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool fore; // cl
  char v13; // dl
  __int64 v14; // rdx
  const data::ShowUICombatBar *v15; // [rsp+0h] [rbp-10h]

  v15 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShowUICombatBar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->show >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->show, a2, &a2->show);
  show = a2->show;
  v4 = *(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->show, a2, &this->show);
  }
  this->show = show;
  v5 = (((_BYTE)v15 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v15->sort_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v15 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v15->sort_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v15->sort_id);
  }
  sort_id = v15->sort_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->sort_id >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v7 != 0;
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
    __asan_report_store4(&this->sort_id, v5);
  this->sort_id = sort_id;
  if ( *(char *)(((unsigned __int64)&v15->changing_sort_id >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v15->changing_sort_id, v5, &v15->changing_sort_id);
  changing_sort_id = v15->changing_sort_id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->changing_sort_id >> 3) + 0x7FFF8000);
  if ( v9 < 0 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store1(&this->changing_sort_id, v5, &this->changing_sort_id);
  }
  this->changing_sort_id = changing_sort_id;
  v10 = ((_BYTE)v15 - 111) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v15->fore >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v15->fore >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v15->fore, v10, v11);
  fore = v15->fore;
  v13 = *(_BYTE *)(((unsigned __int64)&this->fore >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this - 111) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->fore, v10, v14);
  this->fore = fore;
};

// Line 7707: range 0000000011309348-0000000011309372
void __cdecl data::ShowUICombatBar::~ShowUICombatBar(data::ShowUICombatBar *const this)
{
  data::ShowUICombatBar::~ShowUICombatBar(this);
  operator delete(this, 0x98uLL);
};

// Line 7707: range 00000000113092FA-0000000011309347
void __cdecl data::ShowUICombatBar::~ShowUICombatBar(data::ShowUICombatBar *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowUICombatBar + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7712: range 00000000100AD2E4-00000000100AD2F4
const char *__cdecl data::ShowUICombatBar::getTypeName(const data::ShowUICombatBar *const this)
{
  return "ShowUICombatBar";
};

// Line 7713: range 00000000100AD2F6-00000000100AD492
int32_t __cdecl data::ShowUICombatBar::getHashNum(const data::ShowUICombatBar *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShowUICombatBar::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShowUICombatBar",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7729: range 000000001118FD8C-000000001118FDCD
void __cdecl data::ShowUICombatBarFactory::ShowUICombatBarFactory(data::ShowUICombatBarFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowUICombatBarFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShowUICombatBarFactory = v2;
};

// Line 7750: range 0000000011190236-000000001119030B
void __cdecl data::ShowScreenEffect::ShowScreenEffect(data::ShowScreenEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ShowScreenEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->effect_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->effect_type, v1);
  }
  this->effect_type = WindEffect;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->show, v3, v4);
  this->show = 0;
};

// Line 7750: range 0000000011190754-00000000111908B5
void __cdecl data::ShowScreenEffect::ShowScreenEffect(
        data::ShowScreenEffect *const this,
        const data::ShowScreenEffect *a2)
{
  int (**v2)(...); // rdx
  data::EffectType effect_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool show; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::ShowScreenEffect *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShowScreenEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->effect_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->effect_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->effect_type);
  }
  effect_type = a2->effect_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->effect_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->effect_type, a2);
  }
  this->effect_type = effect_type;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->show >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->show >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->show, v5, v6);
  show = v10->show;
  v8 = *(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->show, v5, v9);
  this->show = show;
};

// Line 7758: range 00000000113092CE-00000000113092F8
void __cdecl data::ShowScreenEffect::~ShowScreenEffect(data::ShowScreenEffect *const this)
{
  data::ShowScreenEffect::~ShowScreenEffect(this);
  operator delete(this, 0x90uLL);
};

// Line 7758: range 0000000011309280-00000000113092CD
void __cdecl data::ShowScreenEffect::~ShowScreenEffect(data::ShowScreenEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowScreenEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7763: range 00000000100AD494-00000000100AD4A4
const char *__cdecl data::ShowScreenEffect::getTypeName(const data::ShowScreenEffect *const this)
{
  return "ShowScreenEffect";
};

// Line 7764: range 00000000100AD4A6-00000000100AD642
int32_t __cdecl data::ShowScreenEffect::getHashNum(const data::ShowScreenEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShowScreenEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShowScreenEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7780: range 0000000011190B9E-0000000011190BDF
void __cdecl data::ShowScreenEffectFactory::ShowScreenEffectFactory(data::ShowScreenEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowScreenEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShowScreenEffectFactory = v2;
};

// Line 7788: range 0000000011190EE8-0000000011190FC5
void __cdecl data::AddServerBuff::AddServerBuff(data::AddServerBuff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddServerBuff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->sbuff_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->sbuff_id, v1);
  }
  this->sbuff_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->time, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->time = 0.0;
};

// Line 7788: range 000000001119140E-0000000011191577
void __cdecl data::AddServerBuff::AddServerBuff(data::AddServerBuff *const this, const data::AddServerBuff *a2)
{
  int (**v2)(...); // rdx
  uint32_t sbuff_id; // ecx
  char v4; // al
  float time; // xmm0_4
  const data::AddServerBuff *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddServerBuff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->sbuff_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->sbuff_id);
  }
  sbuff_id = a2->sbuff_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->sbuff_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->sbuff_id, a2);
  }
  this->sbuff_id = sbuff_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->time);
  }
  time = v6->time;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->time, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->time = time;
};

// Line 7796: range 0000000011309206-0000000011309253
void __cdecl data::AddServerBuff::~AddServerBuff(data::AddServerBuff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddServerBuff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7796: range 0000000011309254-000000001130927E
void __cdecl data::AddServerBuff::~AddServerBuff(data::AddServerBuff *const this)
{
  data::AddServerBuff::~AddServerBuff(this);
  operator delete(this, 0x90uLL);
};

// Line 7801: range 00000000100AD644-00000000100AD654
const char *__cdecl data::AddServerBuff::getTypeName(const data::AddServerBuff *const this)
{
  return "AddServerBuff";
};

// Line 7802: range 00000000100AD656-00000000100AD7F2
int32_t __cdecl data::AddServerBuff::getHashNum(const data::AddServerBuff *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddServerBuff::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddServerBuff",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7818: range 0000000011191860-00000000111918A1
void __cdecl data::AddServerBuffFactory::AddServerBuffFactory(data::AddServerBuffFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddServerBuffFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddServerBuffFactory = v2;
};

// Line 7826: range 0000000011191BAA-0000000011191C7F
void __cdecl data::RemoveServerBuff::RemoveServerBuff(data::RemoveServerBuff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RemoveServerBuff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->sbuff_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->sbuff_id, v1);
  }
  this->sbuff_id = 0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_team_buff >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_team_buff >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_team_buff, v3, v4);
  this->is_team_buff = 0;
};

// Line 7826: range 00000000111920C8-0000000011192229
void __cdecl data::RemoveServerBuff::RemoveServerBuff(
        data::RemoveServerBuff *const this,
        const data::RemoveServerBuff *a2)
{
  int (**v2)(...); // rdx
  uint32_t sbuff_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool is_team_buff; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::RemoveServerBuff *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RemoveServerBuff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->sbuff_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->sbuff_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->sbuff_id);
  }
  sbuff_id = a2->sbuff_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->sbuff_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->sbuff_id, a2);
  }
  this->sbuff_id = sbuff_id;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->is_team_buff >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->is_team_buff >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->is_team_buff, v5, v6);
  is_team_buff = v10->is_team_buff;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_team_buff >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_team_buff, v5, v9);
  this->is_team_buff = is_team_buff;
};

// Line 7834: range 000000001130918C-00000000113091D9
void __cdecl data::RemoveServerBuff::~RemoveServerBuff(data::RemoveServerBuff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveServerBuff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7834: range 00000000113091DA-0000000011309204
void __cdecl data::RemoveServerBuff::~RemoveServerBuff(data::RemoveServerBuff *const this)
{
  data::RemoveServerBuff::~RemoveServerBuff(this);
  operator delete(this, 0x90uLL);
};

// Line 7839: range 00000000100AD7F4-00000000100AD804
const char *__cdecl data::RemoveServerBuff::getTypeName(const data::RemoveServerBuff *const this)
{
  return "RemoveServerBuff";
};

// Line 7840: range 00000000100AD806-00000000100AD9A2
int32_t __cdecl data::RemoveServerBuff::getHashNum(const data::RemoveServerBuff *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RemoveServerBuff::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RemoveServerBuff",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7856: range 0000000011192512-0000000011192553
void __cdecl data::RemoveServerBuffFactory::RemoveServerBuffFactory(data::RemoveServerBuffFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RemoveServerBuffFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RemoveServerBuffFactory = v2;
};

// Line 7864: range 000000001119285C-0000000011192922
void __cdecl data::ModifyAvatarSkillCD::ModifyAvatarSkillCD(data::ModifyAvatarSkillCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyAvatarSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  std::vector<unsigned int>::vector(&this->skill_slot);
  data::DynamicFloat::DynamicFloat(&this->cd_delta);
  data::DynamicFloat::DynamicFloat(&this->cd_ratio);
};

// Line 7864: range 0000000011192D6C-0000000011192EF4
void __cdecl data::ModifyAvatarSkillCD::ModifyAvatarSkillCD(
        data::ModifyAvatarSkillCD *const this,
        const data::ModifyAvatarSkillCD *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  const data::ModifyAvatarSkillCD *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyAvatarSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  std::vector<unsigned int>::vector(&this->skill_slot, &v5->skill_slot);
  data::DynamicFloat::DynamicFloat(&this->cd_delta, &v5->cd_delta);
  data::DynamicFloat::DynamicFloat(&this->cd_ratio, &v5->cd_ratio);
};

// Line 7874: range 00000000113090DC-000000001130915F
void __cdecl data::ModifyAvatarSkillCD::~ModifyAvatarSkillCD(data::ModifyAvatarSkillCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyAvatarSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->cd_ratio);
  data::DynamicFloat::~DynamicFloat(&this->cd_delta);
  std::vector<unsigned int>::~vector(&this->skill_slot);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7874: range 0000000011309160-000000001130918A
void __cdecl data::ModifyAvatarSkillCD::~ModifyAvatarSkillCD(data::ModifyAvatarSkillCD *const this)
{
  data::ModifyAvatarSkillCD::~ModifyAvatarSkillCD(this);
  operator delete(this, 0xE8uLL);
};

// Line 7879: range 00000000100AD9A4-00000000100AD9B4
const char *__cdecl data::ModifyAvatarSkillCD::getTypeName(const data::ModifyAvatarSkillCD *const this)
{
  return "ModifyAvatarSkillCD";
};

// Line 7880: range 00000000100AD9B6-00000000100ADB52
int32_t __cdecl data::ModifyAvatarSkillCD::getHashNum(const data::ModifyAvatarSkillCD *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyAvatarSkillCD::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyAvatarSkillCD",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7896: range 00000000111931DE-000000001119321F
void __cdecl data::ModifyAvatarSkillCDFactory::ModifyAvatarSkillCDFactory(data::ModifyAvatarSkillCDFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyAvatarSkillCDFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifyAvatarSkillCDFactory = v2;
};

// Line 7904: range 0000000011193528-00000000111935EE
void __cdecl data::ModifyExtraSkillCD::ModifyExtraSkillCD(data::ModifyExtraSkillCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyExtraSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  data::DynamicFloat::DynamicFloat(&this->cd_delta);
  data::DynamicFloat::DynamicFloat(&this->cd_ratio);
  data::DynamicFloat::DynamicFloat(&this->cd_min);
};

// Line 7904: range 0000000011193A2E-0000000011193BB6
void __cdecl data::ModifyExtraSkillCD::ModifyExtraSkillCD(
        data::ModifyExtraSkillCD *const this,
        const data::ModifyExtraSkillCD *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  const data::ModifyExtraSkillCD *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyExtraSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  data::DynamicFloat::DynamicFloat(&this->cd_delta, &v5->cd_delta);
  data::DynamicFloat::DynamicFloat(&this->cd_ratio, &v5->cd_ratio);
  data::DynamicFloat::DynamicFloat(&this->cd_min, &v5->cd_min);
};

// Line 7914: range 000000001130902C-00000000113090AF
void __cdecl data::ModifyExtraSkillCD::~ModifyExtraSkillCD(data::ModifyExtraSkillCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyExtraSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->cd_min);
  data::DynamicFloat::~DynamicFloat(&this->cd_ratio);
  data::DynamicFloat::~DynamicFloat(&this->cd_delta);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7914: range 00000000113090B0-00000000113090DA
void __cdecl data::ModifyExtraSkillCD::~ModifyExtraSkillCD(data::ModifyExtraSkillCD *const this)
{
  data::ModifyExtraSkillCD::~ModifyExtraSkillCD(this);
  operator delete(this, 0xF0uLL);
};

// Line 7919: range 00000000100ADB54-00000000100ADB64
const char *__cdecl data::ModifyExtraSkillCD::getTypeName(const data::ModifyExtraSkillCD *const this)
{
  return "ModifyExtraSkillCD";
};

// Line 7920: range 00000000100ADB66-00000000100ADD02
int32_t __cdecl data::ModifyExtraSkillCD::getHashNum(const data::ModifyExtraSkillCD *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyExtraSkillCD::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyExtraSkillCD",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7936: range 0000000011193EA0-0000000011193EE1
void __cdecl data::ModifyExtraSkillCDFactory::ModifyExtraSkillCDFactory(data::ModifyExtraSkillCDFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyExtraSkillCDFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifyExtraSkillCDFactory = v2;
};

// Line 7944: range 00000000111941EA-000000001119429E
void __cdecl data::ModifyVehicleSkillCD::ModifyVehicleSkillCD(data::ModifyVehicleSkillCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyVehicleSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  data::DynamicFloat::DynamicFloat(&this->cd_delta);
  data::DynamicFloat::DynamicFloat(&this->cd_ratio);
};

// Line 7944: range 00000000111946E8-0000000011194839
void __cdecl data::ModifyVehicleSkillCD::ModifyVehicleSkillCD(
        data::ModifyVehicleSkillCD *const this,
        const data::ModifyVehicleSkillCD *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  const data::ModifyVehicleSkillCD *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyVehicleSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  data::DynamicFloat::DynamicFloat(&this->cd_delta, &v5->cd_delta);
  data::DynamicFloat::DynamicFloat(&this->cd_ratio, &v5->cd_ratio);
};

// Line 7953: range 0000000011308F8E-0000000011308FFF
void __cdecl data::ModifyVehicleSkillCD::~ModifyVehicleSkillCD(data::ModifyVehicleSkillCD *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyVehicleSkillCD + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->cd_ratio);
  data::DynamicFloat::~DynamicFloat(&this->cd_delta);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7953: range 0000000011309000-000000001130902A
void __cdecl data::ModifyVehicleSkillCD::~ModifyVehicleSkillCD(data::ModifyVehicleSkillCD *const this)
{
  data::ModifyVehicleSkillCD::~ModifyVehicleSkillCD(this);
  operator delete(this, 0xD0uLL);
};

// Line 7958: range 00000000100ADD04-00000000100ADD14
const char *__cdecl data::ModifyVehicleSkillCD::getTypeName(const data::ModifyVehicleSkillCD *const this)
{
  return "ModifyVehicleSkillCD";
};

// Line 7959: range 00000000100ADD16-00000000100ADEB2
int32_t __cdecl data::ModifyVehicleSkillCD::getHashNum(const data::ModifyVehicleSkillCD *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyVehicleSkillCD::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyVehicleSkillCD",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7975: range 0000000011194B22-0000000011194B63
void __cdecl data::ModifyVehicleSkillCDFactory::ModifyVehicleSkillCDFactory(
        data::ModifyVehicleSkillCDFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyVehicleSkillCDFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifyVehicleSkillCDFactory = v2;
};

// Line 7983: range 0000000011194E6C-0000000011194EDD
void __cdecl data::ResetAbilitySpecial::ResetAbilitySpecial(data::ResetAbilitySpecial *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetAbilitySpecial + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key_name);
  std::string::basic_string(&this->value_name);
};

// Line 7983: range 0000000011195330-0000000011195402
void __cdecl data::ResetAbilitySpecial::ResetAbilitySpecial(
        data::ResetAbilitySpecial *const this,
        const data::ResetAbilitySpecial *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetAbilitySpecial + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key_name, &a2->key_name);
  std::string::basic_string(&this->value_name, &a2->value_name);
};

// Line 7991: range 0000000011308F62-0000000011308F8C
void __cdecl data::ResetAbilitySpecial::~ResetAbilitySpecial(data::ResetAbilitySpecial *const this)
{
  data::ResetAbilitySpecial::~ResetAbilitySpecial(this);
  operator delete(this, 0xC8uLL);
};

// Line 7991: range 0000000011308EF0-0000000011308F61
void __cdecl data::ResetAbilitySpecial::~ResetAbilitySpecial(data::ResetAbilitySpecial *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAbilitySpecial + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->value_name);
  std::string::~string(&this->key_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 7996: range 00000000100ADEB4-00000000100ADEC4
const char *__cdecl data::ResetAbilitySpecial::getTypeName(const data::ResetAbilitySpecial *const this)
{
  return "ResetAbilitySpecial";
};

// Line 7997: range 00000000100ADEC6-00000000100AE062
int32_t __cdecl data::ResetAbilitySpecial::getHashNum(const data::ResetAbilitySpecial *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetAbilitySpecial::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetAbilitySpecial",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8013: range 00000000111956EC-000000001119572D
void __cdecl data::ResetAbilitySpecialFactory::ResetAbilitySpecialFactory(data::ResetAbilitySpecialFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAbilitySpecialFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetAbilitySpecialFactory = v2;
};

// Line 8021: range 0000000011195A36-0000000011195AC3
void __cdecl data::EnableAvatarFlyStateTrail::EnableAvatarFlyStateTrail(data::EnableAvatarFlyStateTrail *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarFlyStateTrail + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 8021: range 0000000011195F0C-0000000011195FE4
void __cdecl data::EnableAvatarFlyStateTrail::EnableAvatarFlyStateTrail(
        data::EnableAvatarFlyStateTrail *const this,
        const data::EnableAvatarFlyStateTrail *a2)
{
  int (**v2)(...); // rdx
  bool set_enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarFlyStateTrail + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, a2, &a2->set_enable);
  set_enable = a2->set_enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->set_enable, a2, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 8028: range 0000000011308EC4-0000000011308EEE
void __cdecl data::EnableAvatarFlyStateTrail::~EnableAvatarFlyStateTrail(data::EnableAvatarFlyStateTrail *const this)
{
  data::EnableAvatarFlyStateTrail::~EnableAvatarFlyStateTrail(this);
  operator delete(this, 0x90uLL);
};

// Line 8028: range 0000000011308E76-0000000011308EC3
void __cdecl data::EnableAvatarFlyStateTrail::~EnableAvatarFlyStateTrail(data::EnableAvatarFlyStateTrail *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarFlyStateTrail + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8033: range 00000000100AE064-00000000100AE074
const char *__cdecl data::EnableAvatarFlyStateTrail::getTypeName(const data::EnableAvatarFlyStateTrail *const this)
{
  return "EnableAvatarFlyStateTrail";
};

// Line 8034: range 00000000100AE076-00000000100AE212
int32_t __cdecl data::EnableAvatarFlyStateTrail::getHashNum(const data::EnableAvatarFlyStateTrail *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableAvatarFlyStateTrail::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableAvatarFlyStateTrail",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8050: range 00000000111962CE-000000001119630F
void __cdecl data::EnableAvatarFlyStateTrailFactory::EnableAvatarFlyStateTrailFactory(
        data::EnableAvatarFlyStateTrailFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarFlyStateTrailFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableAvatarFlyStateTrailFactory = v2;
};

// Line 8058: range 0000000011196618-00000000111966ED
void __cdecl data::ShowReminder::ShowReminder(data::ShowReminder *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ShowReminder + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->id, v1);
  }
  this->id = 0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->local_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->local_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->local_only, v3, v4);
  this->local_only = 0;
};

// Line 8058: range 0000000011196B36-0000000011196C97
void __cdecl data::ShowReminder::ShowReminder(data::ShowReminder *const this, const data::ShowReminder *a2)
{
  int (**v2)(...); // rdx
  uint32_t id; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool local_only; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::ShowReminder *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShowReminder + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->id);
  }
  id = a2->id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->id, a2);
  }
  this->id = id;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->local_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->local_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->local_only, v5, v6);
  local_only = v10->local_only;
  v8 = *(_BYTE *)(((unsigned __int64)&this->local_only >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->local_only, v5, v9);
  this->local_only = local_only;
};

// Line 8066: range 0000000011308DFC-0000000011308E49
void __cdecl data::ShowReminder::~ShowReminder(data::ShowReminder *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowReminder + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8066: range 0000000011308E4A-0000000011308E74
void __cdecl data::ShowReminder::~ShowReminder(data::ShowReminder *const this)
{
  data::ShowReminder::~ShowReminder(this);
  operator delete(this, 0x90uLL);
};

// Line 8071: range 00000000100AE214-00000000100AE224
const char *__cdecl data::ShowReminder::getTypeName(const data::ShowReminder *const this)
{
  return "ShowReminder";
};

// Line 8072: range 00000000100AE226-00000000100AE3C2
int32_t __cdecl data::ShowReminder::getHashNum(const data::ShowReminder *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShowReminder::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShowReminder",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8088: range 0000000011196F80-0000000011196FC1
void __cdecl data::ShowReminderFactory::ShowReminderFactory(data::ShowReminderFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowReminderFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShowReminderFactory = v2;
};

// Line 8096: range 00000000111972CA-000000001119736C
void __cdecl data::UpdateReactionDamage::UpdateReactionDamage(data::UpdateReactionDamage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::UpdateReactionDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->level_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->level_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->level_target, v1);
  }
  this->level_target = Self_0;
  std::string::basic_string(&this->reaction_damage_name);
};

// Line 8096: range 00000000111977B6-00000000111978D0
void __cdecl data::UpdateReactionDamage::UpdateReactionDamage(
        data::UpdateReactionDamage *const this,
        const data::UpdateReactionDamage *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting level_target; // ecx
  char v4; // al
  const data::UpdateReactionDamage *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UpdateReactionDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->level_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->level_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->level_target);
  }
  level_target = a2->level_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->level_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->level_target, a2);
  }
  this->level_target = level_target;
  std::string::basic_string(&this->reaction_damage_name, &v5->reaction_damage_name);
};

// Line 8104: range 0000000011308D70-0000000011308DCF
void __cdecl data::UpdateReactionDamage::~UpdateReactionDamage(data::UpdateReactionDamage *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UpdateReactionDamage + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->reaction_damage_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8104: range 0000000011308DD0-0000000011308DFA
void __cdecl data::UpdateReactionDamage::~UpdateReactionDamage(data::UpdateReactionDamage *const this)
{
  data::UpdateReactionDamage::~UpdateReactionDamage(this);
  operator delete(this, 0xB0uLL);
};

// Line 8109: range 00000000100AE3C4-00000000100AE3D4
const char *__cdecl data::UpdateReactionDamage::getTypeName(const data::UpdateReactionDamage *const this)
{
  return "UpdateReactionDamage";
};

// Line 8110: range 00000000100AE3D6-00000000100AE572
int32_t __cdecl data::UpdateReactionDamage::getHashNum(const data::UpdateReactionDamage *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UpdateReactionDamage::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UpdateReactionDamage",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8126: range 0000000011197BBA-0000000011197BFB
void __cdecl data::UpdateReactionDamageFactory::UpdateReactionDamageFactory(
        data::UpdateReactionDamageFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UpdateReactionDamageFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UpdateReactionDamageFactory = v2;
};

// Line 8134: range 0000000011197F04-0000000011198022
void __cdecl data::ExecuteGadgetLua::ExecuteGadgetLua(data::ExecuteGadgetLua *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ExecuteGadgetLua + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->param1 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->param1 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->param1, v1);
  }
  this->param1 = 0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->param2 >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->param2 >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->param2, v3);
  }
  this->param2 = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->param3 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->param3 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->param3, v3);
  }
  this->param3 = 0;
};

// Line 8134: range 0000000011198474-0000000011198659
void __cdecl data::ExecuteGadgetLua::ExecuteGadgetLua(
        data::ExecuteGadgetLua *const this,
        const data::ExecuteGadgetLua *a2)
{
  int (**v2)(...); // rdx
  int32_t param1; // ecx
  char v4; // al
  __int64 v5; // rsi
  int32_t param2; // ecx
  char v7; // dl
  int32_t param3; // ecx
  char v9; // al
  const data::ExecuteGadgetLua *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ExecuteGadgetLua + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->param1 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->param1 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->param1);
  }
  param1 = a2->param1;
  v4 = *(_BYTE *)(((unsigned __int64)&this->param1 >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->param1, a2);
  }
  this->param1 = param1;
  v5 = (((_BYTE)v10 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v10->param2 >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v10 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->param2 >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v10->param2);
  }
  param2 = v10->param2;
  v7 = *(_BYTE *)(((unsigned __int64)&this->param2 >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->param2, v5);
  }
  this->param2 = param2;
  if ( *(_BYTE *)(((unsigned __int64)&v10->param3 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v10->param3 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v10->param3);
  }
  param3 = v10->param3;
  v9 = *(_BYTE *)(((unsigned __int64)&this->param3 >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->param3, v5);
  }
  this->param3 = param3;
};

// Line 8143: range 0000000011308CF6-0000000011308D43
void __cdecl data::ExecuteGadgetLua::~ExecuteGadgetLua(data::ExecuteGadgetLua *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExecuteGadgetLua + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8143: range 0000000011308D44-0000000011308D6E
void __cdecl data::ExecuteGadgetLua::~ExecuteGadgetLua(data::ExecuteGadgetLua *const this)
{
  data::ExecuteGadgetLua::~ExecuteGadgetLua(this);
  operator delete(this, 0x98uLL);
};

// Line 8148: range 00000000100AE574-00000000100AE584
const char *__cdecl data::ExecuteGadgetLua::getTypeName(const data::ExecuteGadgetLua *const this)
{
  return "ExecuteGadgetLua";
};

// Line 8149: range 00000000100AE586-00000000100AE722
int32_t __cdecl data::ExecuteGadgetLua::getHashNum(const data::ExecuteGadgetLua *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ExecuteGadgetLua::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ExecuteGadgetLua",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8165: range 0000000011198942-0000000011198983
void __cdecl data::ExecuteGadgetLuaFactory::ExecuteGadgetLuaFactory(data::ExecuteGadgetLuaFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExecuteGadgetLuaFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ExecuteGadgetLuaFactory = v2;
};

// Line 8173: range 0000000011198C8C-0000000011198D9A
void __cdecl data::SetWeaponBindState::SetWeaponBindState(data::SetWeaponBindState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetWeaponBindState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->place >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->place, v1, &this->place);
  this->place = 0;
  std::string::basic_string(&this->equip_part_name);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 8173: range 00000000111991EA-0000000011199325
void __cdecl data::SetWeaponBindState::SetWeaponBindState(
        data::SetWeaponBindState *const this,
        const data::SetWeaponBindState *a2)
{
  int (**v2)(...); // rdx
  bool place; // cl
  char v4; // al
  const data::SetWeaponBindState *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetWeaponBindState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->place >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->place, a2, &a2->place);
  place = a2->place;
  v4 = *(_BYTE *)(((unsigned __int64)&this->place >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->place, a2, &this->place);
  }
  this->place = place;
  std::string::basic_string(&this->equip_part_name, &v5->equip_part_name);
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v5->born);
};

// Line 8182: range 0000000011308C58-0000000011308CC9
void __cdecl data::SetWeaponBindState::~SetWeaponBindState(data::SetWeaponBindState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetWeaponBindState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::string::~string(&this->equip_part_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8182: range 0000000011308CCA-0000000011308CF4
void __cdecl data::SetWeaponBindState::~SetWeaponBindState(data::SetWeaponBindState *const this)
{
  data::SetWeaponBindState::~SetWeaponBindState(this);
  operator delete(this, 0xC0uLL);
};

// Line 8187: range 00000000100AE724-00000000100AE734
const char *__cdecl data::SetWeaponBindState::getTypeName(const data::SetWeaponBindState *const this)
{
  return "SetWeaponBindState";
};

// Line 8188: range 00000000100AE736-00000000100AE8D2
int32_t __cdecl data::SetWeaponBindState::getHashNum(const data::SetWeaponBindState *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetWeaponBindState::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetWeaponBindState",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8204: range 000000001119960E-000000001119964F
void __cdecl data::SetWeaponBindStateFactory::SetWeaponBindStateFactory(data::SetWeaponBindStateFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetWeaponBindStateFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetWeaponBindStateFactory = v2;
};

// Line 8212: range 0000000011199958-00000000111999C9
void __cdecl data::SetWeaponAttachPointRealName::SetWeaponAttachPointRealName(
        data::SetWeaponAttachPointRealName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetWeaponAttachPointRealName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->part_name);
  std::string::basic_string(&this->real_name);
};

// Line 8212: range 0000000011199E1C-0000000011199EEE
void __cdecl data::SetWeaponAttachPointRealName::SetWeaponAttachPointRealName(
        data::SetWeaponAttachPointRealName *const this,
        const data::SetWeaponAttachPointRealName *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetWeaponAttachPointRealName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->part_name, &a2->part_name);
  std::string::basic_string(&this->real_name, &a2->real_name);
};

// Line 8220: range 0000000011308BBA-0000000011308C2B
void __cdecl data::SetWeaponAttachPointRealName::~SetWeaponAttachPointRealName(
        data::SetWeaponAttachPointRealName *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetWeaponAttachPointRealName + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->real_name);
  std::string::~string(&this->part_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8220: range 0000000011308C2C-0000000011308C56
void __cdecl data::SetWeaponAttachPointRealName::~SetWeaponAttachPointRealName(
        data::SetWeaponAttachPointRealName *const this)
{
  data::SetWeaponAttachPointRealName::~SetWeaponAttachPointRealName(this);
  operator delete(this, 0xC8uLL);
};

// Line 8225: range 00000000100AE8D4-00000000100AE8E4
const char *__cdecl data::SetWeaponAttachPointRealName::getTypeName(
        const data::SetWeaponAttachPointRealName *const this)
{
  return "SetWeaponAttachPointRealName";
};

// Line 8226: range 00000000100AE8E6-00000000100AEA82
int32_t __cdecl data::SetWeaponAttachPointRealName::getHashNum(const data::SetWeaponAttachPointRealName *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetWeaponAttachPointRealName::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetWeaponAttachPointRealName",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8242: range 000000001119A1D8-000000001119A219
void __cdecl data::SetWeaponAttachPointRealNameFactory::SetWeaponAttachPointRealNameFactory(
        data::SetWeaponAttachPointRealNameFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetWeaponAttachPointRealNameFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetWeaponAttachPointRealNameFactory = v2;
};

// Line 8250: range 000000001119A522-000000001119A5AF
void __cdecl data::SetAvatarCanShakeOff::SetAvatarCanShakeOff(data::SetAvatarCanShakeOff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAvatarCanShakeOff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->can_shake_off >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->can_shake_off, v1, &this->can_shake_off);
  this->can_shake_off = 0;
};

// Line 8250: range 000000001119A9F8-000000001119AAD0
void __cdecl data::SetAvatarCanShakeOff::SetAvatarCanShakeOff(
        data::SetAvatarCanShakeOff *const this,
        const data::SetAvatarCanShakeOff *a2)
{
  int (**v2)(...); // rdx
  bool can_shake_off; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAvatarCanShakeOff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->can_shake_off >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->can_shake_off, a2, &a2->can_shake_off);
  can_shake_off = a2->can_shake_off;
  v4 = *(_BYTE *)(((unsigned __int64)&this->can_shake_off >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->can_shake_off, a2, &this->can_shake_off);
  }
  this->can_shake_off = can_shake_off;
};

// Line 8257: range 0000000011308B40-0000000011308B8D
void __cdecl data::SetAvatarCanShakeOff::~SetAvatarCanShakeOff(data::SetAvatarCanShakeOff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAvatarCanShakeOff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8257: range 0000000011308B8E-0000000011308BB8
void __cdecl data::SetAvatarCanShakeOff::~SetAvatarCanShakeOff(data::SetAvatarCanShakeOff *const this)
{
  data::SetAvatarCanShakeOff::~SetAvatarCanShakeOff(this);
  operator delete(this, 0x90uLL);
};

// Line 8262: range 00000000100AEA84-00000000100AEA94
const char *__cdecl data::SetAvatarCanShakeOff::getTypeName(const data::SetAvatarCanShakeOff *const this)
{
  return "SetAvatarCanShakeOff";
};

// Line 8263: range 00000000100AEA96-00000000100AEC32
int32_t __cdecl data::SetAvatarCanShakeOff::getHashNum(const data::SetAvatarCanShakeOff *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAvatarCanShakeOff::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAvatarCanShakeOff",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8279: range 000000001119ADBA-000000001119ADFB
void __cdecl data::SetAvatarCanShakeOffFactory::SetAvatarCanShakeOffFactory(
        data::SetAvatarCanShakeOffFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAvatarCanShakeOffFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAvatarCanShakeOffFactory = v2;
};

// Line 8287: range 000000001119B104-000000001119B191
void __cdecl data::EnableMainInterface::EnableMainInterface(data::EnableMainInterface *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableMainInterface + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 8287: range 000000001119B5DA-000000001119B6B2
void __cdecl data::EnableMainInterface::EnableMainInterface(
        data::EnableMainInterface *const this,
        const data::EnableMainInterface *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableMainInterface + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 8294: range 0000000011308AC6-0000000011308B13
void __cdecl data::EnableMainInterface::~EnableMainInterface(data::EnableMainInterface *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableMainInterface + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8294: range 0000000011308B14-0000000011308B3E
void __cdecl data::EnableMainInterface::~EnableMainInterface(data::EnableMainInterface *const this)
{
  data::EnableMainInterface::~EnableMainInterface(this);
  operator delete(this, 0x90uLL);
};

// Line 8299: range 00000000100AEC34-00000000100AEC44
const char *__cdecl data::EnableMainInterface::getTypeName(const data::EnableMainInterface *const this)
{
  return "EnableMainInterface";
};

// Line 8300: range 00000000100AEC46-00000000100AEDE2
int32_t __cdecl data::EnableMainInterface::getHashNum(const data::EnableMainInterface *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableMainInterface::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableMainInterface",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8316: range 000000001119B99C-000000001119B9DD
void __cdecl data::EnableMainInterfaceFactory::EnableMainInterfaceFactory(data::EnableMainInterfaceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableMainInterfaceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableMainInterfaceFactory = v2;
};

// Line 8324: range 000000001119BCE6-000000001119BDBB
void __cdecl data::ChangePlayMode::ChangePlayMode(data::ChangePlayMode *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangePlayMode + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->to_play_mode >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->to_play_mode >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->to_play_mode, v1);
  }
  this->to_play_mode = Normal_9;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->authority_only, v3, v4);
  this->authority_only = 1;
};

// Line 8324: range 000000001119C204-000000001119C365
void __cdecl data::ChangePlayMode::ChangePlayMode(data::ChangePlayMode *const this, const data::ChangePlayMode *a2)
{
  int (**v2)(...); // rdx
  data::PlayModeType to_play_mode; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool authority_only; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::ChangePlayMode *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangePlayMode + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->to_play_mode >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->to_play_mode >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->to_play_mode);
  }
  to_play_mode = a2->to_play_mode;
  v4 = *(_BYTE *)(((unsigned __int64)&this->to_play_mode >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->to_play_mode, a2);
  }
  this->to_play_mode = to_play_mode;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->authority_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->authority_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->authority_only, v5, v6);
  authority_only = v10->authority_only;
  v8 = *(_BYTE *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->authority_only, v5, v9);
  this->authority_only = authority_only;
};

// Line 8332: range 0000000011308A4C-0000000011308A99
void __cdecl data::ChangePlayMode::~ChangePlayMode(data::ChangePlayMode *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangePlayMode + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8332: range 0000000011308A9A-0000000011308AC4
void __cdecl data::ChangePlayMode::~ChangePlayMode(data::ChangePlayMode *const this)
{
  data::ChangePlayMode::~ChangePlayMode(this);
  operator delete(this, 0x90uLL);
};

// Line 8337: range 00000000100AEDE4-00000000100AEDF4
const char *__cdecl data::ChangePlayMode::getTypeName(const data::ChangePlayMode *const this)
{
  return "ChangePlayMode";
};

// Line 8338: range 00000000100AEDF6-00000000100AEF92
int32_t __cdecl data::ChangePlayMode::getHashNum(const data::ChangePlayMode *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangePlayMode::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangePlayMode",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8354: range 000000001119C64E-000000001119C68F
void __cdecl data::ChangePlayModeFactory::ChangePlayModeFactory(data::ChangePlayModeFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangePlayModeFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangePlayModeFactory = v2;
};

// Line 8362: range 000000001119C998-000000001119CA25
void __cdecl data::EnableCameraDof::EnableCameraDof(data::EnableCameraDof *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableCameraDof + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable_dof >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable_dof, v1, &this->enable_dof);
  this->enable_dof = 0;
};

// Line 8362: range 000000001119CE6E-000000001119CF46
void __cdecl data::EnableCameraDof::EnableCameraDof(data::EnableCameraDof *const this, const data::EnableCameraDof *a2)
{
  int (**v2)(...); // rdx
  bool enable_dof; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableCameraDof + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable_dof >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable_dof, a2, &a2->enable_dof);
  enable_dof = a2->enable_dof;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable_dof >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable_dof, a2, &this->enable_dof);
  }
  this->enable_dof = enable_dof;
};

// Line 8369: range 0000000011308A20-0000000011308A4A
void __cdecl data::EnableCameraDof::~EnableCameraDof(data::EnableCameraDof *const this)
{
  data::EnableCameraDof::~EnableCameraDof(this);
  operator delete(this, 0x90uLL);
};

// Line 8369: range 00000000113089D2-0000000011308A1F
void __cdecl data::EnableCameraDof::~EnableCameraDof(data::EnableCameraDof *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableCameraDof + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8374: range 00000000100AEF94-00000000100AEFA4
const char *__cdecl data::EnableCameraDof::getTypeName(const data::EnableCameraDof *const this)
{
  return "EnableCameraDof";
};

// Line 8375: range 00000000100AEFA6-00000000100AF142
int32_t __cdecl data::EnableCameraDof::getHashNum(const data::EnableCameraDof *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableCameraDof::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableCameraDof",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8391: range 000000001119D230-000000001119D271
void __cdecl data::EnableCameraDofFactory::EnableCameraDofFactory(data::EnableCameraDofFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableCameraDofFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableCameraDofFactory = v2;
};

// Line 8399: range 000000001119D57A-000000001119D607
void __cdecl data::EnableHitAutoRedirect::EnableHitAutoRedirect(data::EnableHitAutoRedirect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableHitAutoRedirect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_enable, v1, &this->set_enable);
  this->set_enable = 0;
};

// Line 8399: range 000000001119DA50-000000001119DB28
void __cdecl data::EnableHitAutoRedirect::EnableHitAutoRedirect(
        data::EnableHitAutoRedirect *const this,
        const data::EnableHitAutoRedirect *a2)
{
  int (**v2)(...); // rdx
  bool set_enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableHitAutoRedirect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->set_enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_enable, a2, &a2->set_enable);
  set_enable = a2->set_enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->set_enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->set_enable, a2, &this->set_enable);
  }
  this->set_enable = set_enable;
};

// Line 8406: range 00000000113089A6-00000000113089D0
void __cdecl data::EnableHitAutoRedirect::~EnableHitAutoRedirect(data::EnableHitAutoRedirect *const this)
{
  data::EnableHitAutoRedirect::~EnableHitAutoRedirect(this);
  operator delete(this, 0x90uLL);
};

// Line 8406: range 0000000011308958-00000000113089A5
void __cdecl data::EnableHitAutoRedirect::~EnableHitAutoRedirect(data::EnableHitAutoRedirect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHitAutoRedirect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8411: range 00000000100AF144-00000000100AF154
const char *__cdecl data::EnableHitAutoRedirect::getTypeName(const data::EnableHitAutoRedirect *const this)
{
  return "EnableHitAutoRedirect";
};

// Line 8412: range 00000000100AF156-00000000100AF2F2
int32_t __cdecl data::EnableHitAutoRedirect::getHashNum(const data::EnableHitAutoRedirect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableHitAutoRedirect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableHitAutoRedirect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8428: range 000000001119DE12-000000001119DE53
void __cdecl data::EnableHitAutoRedirectFactory::EnableHitAutoRedirectFactory(
        data::EnableHitAutoRedirectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHitAutoRedirectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableHitAutoRedirectFactory = v2;
};

// Line 8436: range 000000001119E15C-000000001119E1F2
void __cdecl data::ClearEndura::ClearEndura(data::ClearEndura *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ClearEndura + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->percent >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->percent >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->percent, v1);
  }
  this->percent = 1.0;
};

// Line 8436: range 000000001119E63C-000000001119E716
void __cdecl data::ClearEndura::ClearEndura(data::ClearEndura *const this, const data::ClearEndura *a2)
{
  int (**v2)(...); // rdx
  float percent; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClearEndura + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->percent >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->percent >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->percent);
  }
  percent = a2->percent;
  if ( *(_BYTE *)(((unsigned __int64)&this->percent >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->percent >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->percent, a2);
  }
  this->percent = percent;
};

// Line 8443: range 00000000113088DE-000000001130892B
void __cdecl data::ClearEndura::~ClearEndura(data::ClearEndura *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearEndura + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8443: range 000000001130892C-0000000011308956
void __cdecl data::ClearEndura::~ClearEndura(data::ClearEndura *const this)
{
  data::ClearEndura::~ClearEndura(this);
  operator delete(this, 0x90uLL);
};

// Line 8448: range 00000000100AF2F4-00000000100AF304
const char *__cdecl data::ClearEndura::getTypeName(const data::ClearEndura *const this)
{
  return "ClearEndura";
};

// Line 8449: range 00000000100AF306-00000000100AF4A2
int32_t __cdecl data::ClearEndura::getHashNum(const data::ClearEndura *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClearEndura::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClearEndura",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8465: range 000000001119EA00-000000001119EA41
void __cdecl data::ClearEnduraFactory::ClearEnduraFactory(data::ClearEnduraFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearEnduraFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClearEnduraFactory = v2;
};

// Line 8473: range 000000001119ED4A-000000001119EECF
void __cdecl data::RushMove::RushMove(data::RushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_range, v1);
  }
  this->min_range = 0.0;
  v3 = (((_BYTE)this - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_range, v3);
  }
  this->max_range = 20.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->time_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->time_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->time_range, v3);
  }
  this->time_range = 0.0;
};

// Line 8473: range 000000001119F312-000000001119F520
void __cdecl data::RushMove::RushMove(data::RushMove *const this, const data::RushMove *a2)
{
  int (**v2)(...); // rdx
  float min_range; // xmm0_4
  float max_range; // xmm0_4
  __int64 v5; // rsi
  float time_range; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &a2->to_pos);
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_range);
  }
  min_range = a2->min_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_range, &a2->to_pos);
  }
  this->min_range = min_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_range);
  }
  max_range = a2->max_range;
  v5 = (((_BYTE)this - 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_range, v5);
  }
  this->max_range = max_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->time_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->time_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->time_range);
  }
  time_range = a2->time_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->time_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->time_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->time_range, v5);
  }
  this->time_range = time_range;
};

// Line 8483: range 0000000011308852-00000000113088B1
void __cdecl data::RushMove::~RushMove(data::RushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8483: range 00000000113088B2-00000000113088DC
void __cdecl data::RushMove::~RushMove(data::RushMove *const this)
{
  data::RushMove::~RushMove(this);
  operator delete(this, 0xA8uLL);
};

// Line 8488: range 00000000100AF4A4-00000000100AF4B4
const char *__cdecl data::RushMove::getTypeName(const data::RushMove *const this)
{
  return "RushMove";
};

// Line 8489: range 00000000100AF4B6-00000000100AF652
int32_t __cdecl data::RushMove::getHashNum(const data::RushMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RushMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RushMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8505: range 000000001119F80A-000000001119F84B
void __cdecl data::RushMoveFactory::RushMoveFactory(data::RushMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RushMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RushMoveFactory = v2;
};

// Line 8513: range 000000001119FB54-000000001119FBA1
void __cdecl data::ResetAIAttackTarget::ResetAIAttackTarget(data::ResetAIAttackTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetAIAttackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8513: range 000000001119FFF0-00000000111A0048
void __cdecl data::ResetAIAttackTarget::ResetAIAttackTarget(
        data::ResetAIAttackTarget *const this,
        const data::ResetAIAttackTarget *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetAIAttackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8519: range 0000000011308826-0000000011308850
void __cdecl data::ResetAIAttackTarget::~ResetAIAttackTarget(data::ResetAIAttackTarget *const this)
{
  data::ResetAIAttackTarget::~ResetAIAttackTarget(this);
  operator delete(this, 0x88uLL);
};

// Line 8519: range 00000000113087D8-0000000011308825
void __cdecl data::ResetAIAttackTarget::~ResetAIAttackTarget(data::ResetAIAttackTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAIAttackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8524: range 00000000100AF654-00000000100AF664
const char *__cdecl data::ResetAIAttackTarget::getTypeName(const data::ResetAIAttackTarget *const this)
{
  return "ResetAIAttackTarget";
};

// Line 8525: range 00000000100AF666-00000000100AF802
int32_t __cdecl data::ResetAIAttackTarget::getHashNum(const data::ResetAIAttackTarget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetAIAttackTarget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetAIAttackTarget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8541: range 00000000111A0332-00000000111A0373
void __cdecl data::ResetAIAttackTargetFactory::ResetAIAttackTargetFactory(data::ResetAIAttackTargetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAIAttackTargetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetAIAttackTargetFactory = v2;
};

// Line 8549: range 00000000111A067C-00000000111A070C
void __cdecl data::ResetAIResistTauntLevel::ResetAIResistTauntLevel(data::ResetAIResistTauntLevel *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetAIResistTauntLevel + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->resist_taunt_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->resist_taunt_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->resist_taunt_level, v1);
  }
  this->resist_taunt_level = Monster_TauntLevel_1;
};

// Line 8549: range 00000000111A0B56-00000000111A0C2D
void __cdecl data::ResetAIResistTauntLevel::ResetAIResistTauntLevel(
        data::ResetAIResistTauntLevel *const this,
        const data::ResetAIResistTauntLevel *a2)
{
  int (**v2)(...); // rdx
  data::TauntLevel resist_taunt_level; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetAIResistTauntLevel + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->resist_taunt_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->resist_taunt_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->resist_taunt_level);
  }
  resist_taunt_level = a2->resist_taunt_level;
  v4 = *(_BYTE *)(((unsigned __int64)&this->resist_taunt_level >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->resist_taunt_level, a2);
  }
  this->resist_taunt_level = resist_taunt_level;
};

// Line 8556: range 000000001130875E-00000000113087AB
void __cdecl data::ResetAIResistTauntLevel::~ResetAIResistTauntLevel(data::ResetAIResistTauntLevel *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAIResistTauntLevel + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8556: range 00000000113087AC-00000000113087D6
void __cdecl data::ResetAIResistTauntLevel::~ResetAIResistTauntLevel(data::ResetAIResistTauntLevel *const this)
{
  data::ResetAIResistTauntLevel::~ResetAIResistTauntLevel(this);
  operator delete(this, 0x90uLL);
};

// Line 8561: range 00000000100AF804-00000000100AF814
const char *__cdecl data::ResetAIResistTauntLevel::getTypeName(const data::ResetAIResistTauntLevel *const this)
{
  return "ResetAIResistTauntLevel";
};

// Line 8562: range 00000000100AF816-00000000100AF9B2
int32_t __cdecl data::ResetAIResistTauntLevel::getHashNum(const data::ResetAIResistTauntLevel *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetAIResistTauntLevel::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetAIResistTauntLevel",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8578: range 00000000111A0F16-00000000111A0F57
void __cdecl data::ResetAIResistTauntLevelFactory::ResetAIResistTauntLevelFactory(
        data::ResetAIResistTauntLevelFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAIResistTauntLevelFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetAIResistTauntLevelFactory = v2;
};

// Line 8586: range 00000000111A1260-00000000111A1302
void __cdecl data::ChangeColliderSurface::ChangeColliderSurface(data::ChangeColliderSurface *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderSurface + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->transform_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->surface_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->surface_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->surface_type, v1);
  }
  this->surface_type = Invalid;
};

// Line 8586: range 00000000111A174C-00000000111A1866
void __cdecl data::ChangeColliderSurface::ChangeColliderSurface(
        data::ChangeColliderSurface *const this,
        const data::ChangeColliderSurface *a2)
{
  int (**v2)(...); // rdx
  std::string *p_transform_name; // rsi
  data::SceneSurfaceType surface_type; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderSurface + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_transform_name = &a2->transform_name;
  std::string::basic_string(&this->transform_name, &a2->transform_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->surface_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->surface_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->surface_type);
  }
  surface_type = a2->surface_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->surface_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_transform_name) = v5 != 0;
    __asan_report_store4(&this->surface_type, p_transform_name);
  }
  this->surface_type = surface_type;
};

// Line 8594: range 00000000113086D2-0000000011308731
void __cdecl data::ChangeColliderSurface::~ChangeColliderSurface(data::ChangeColliderSurface *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderSurface + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->transform_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8594: range 0000000011308732-000000001130875C
void __cdecl data::ChangeColliderSurface::~ChangeColliderSurface(data::ChangeColliderSurface *const this)
{
  data::ChangeColliderSurface::~ChangeColliderSurface(this);
  operator delete(this, 0xB0uLL);
};

// Line 8599: range 00000000100AF9B4-00000000100AF9C4
const char *__cdecl data::ChangeColliderSurface::getTypeName(const data::ChangeColliderSurface *const this)
{
  return "ChangeColliderSurface";
};

// Line 8600: range 00000000100AF9C6-00000000100AFB62
int32_t __cdecl data::ChangeColliderSurface::getHashNum(const data::ChangeColliderSurface *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeColliderSurface::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeColliderSurface",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8616: range 00000000111A1B50-00000000111A1B91
void __cdecl data::ChangeColliderSurfaceFactory::ChangeColliderSurfaceFactory(
        data::ChangeColliderSurfaceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderSurfaceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeColliderSurfaceFactory = v2;
};

// Line 8624: range 00000000111A1E9A-00000000111A1FB5
void __cdecl data::SetSurroundAnchor::SetSurroundAnchor(data::SetSurroundAnchor *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSurroundAnchor + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->set_point >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_point, v1, &this->set_point);
  this->set_point = 1;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->action_point_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->action_point_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->action_point_type, v3);
  }
  this->action_point_type = InvalidPoint;
  if ( *(_BYTE *)(((unsigned __int64)&this->action_point_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->action_point_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->action_point_id, v3);
  }
  this->action_point_id = 0;
};

// Line 8624: range 00000000111A2406-00000000111A25EC
void __cdecl data::SetSurroundAnchor::SetSurroundAnchor(
        data::SetSurroundAnchor *const this,
        const data::SetSurroundAnchor *a2)
{
  int (**v2)(...); // rdx
  bool set_point; // cl
  char v4; // al
  __int64 v5; // rsi
  data::ActionPointType action_point_type; // ecx
  char v7; // dl
  uint32_t action_point_id; // ecx
  char v9; // al
  const data::SetSurroundAnchor *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSurroundAnchor + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->set_point >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_point, a2, &a2->set_point);
  set_point = a2->set_point;
  v4 = *(_BYTE *)(((unsigned __int64)&this->set_point >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->set_point, a2, &this->set_point);
  }
  this->set_point = set_point;
  v5 = (((_BYTE)v10 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v10->action_point_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v10 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->action_point_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v10->action_point_type);
  }
  action_point_type = v10->action_point_type;
  v7 = *(_BYTE *)(((unsigned __int64)&this->action_point_type >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->action_point_type, v5);
  }
  this->action_point_type = action_point_type;
  if ( *(_BYTE *)(((unsigned __int64)&v10->action_point_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v10->action_point_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v10->action_point_id);
  }
  action_point_id = v10->action_point_id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->action_point_id >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->action_point_id, v5);
  }
  this->action_point_id = action_point_id;
};

// Line 8633: range 00000000113086A6-00000000113086D0
void __cdecl data::SetSurroundAnchor::~SetSurroundAnchor(data::SetSurroundAnchor *const this)
{
  data::SetSurroundAnchor::~SetSurroundAnchor(this);
  operator delete(this, 0x98uLL);
};

// Line 8633: range 0000000011308658-00000000113086A5
void __cdecl data::SetSurroundAnchor::~SetSurroundAnchor(data::SetSurroundAnchor *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSurroundAnchor + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8638: range 00000000100AFB64-00000000100AFB74
const char *__cdecl data::SetSurroundAnchor::getTypeName(const data::SetSurroundAnchor *const this)
{
  return "SetSurroundAnchor";
};

// Line 8639: range 00000000100AFB76-00000000100AFD12
int32_t __cdecl data::SetSurroundAnchor::getHashNum(const data::SetSurroundAnchor *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSurroundAnchor::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSurroundAnchor",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8655: range 00000000111A28D6-00000000111A2917
void __cdecl data::SetSurroundAnchorFactory::SetSurroundAnchorFactory(data::SetSurroundAnchorFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSurroundAnchorFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSurroundAnchorFactory = v2;
};

// Line 8663: range 00000000111A2C20-00000000111A2D0A
void __cdecl data::SetCombatFixedMovePoint::SetCombatFixedMovePoint(data::SetCombatFixedMovePoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetCombatFixedMovePoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->set_point >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_point, v1, &this->set_point);
  this->set_point = 1;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 8663: range 00000000111A315A-00000000111A3252
void __cdecl data::SetCombatFixedMovePoint::SetCombatFixedMovePoint(
        data::SetCombatFixedMovePoint *const this,
        const data::SetCombatFixedMovePoint *a2)
{
  int (**v2)(...); // rdx
  bool set_point; // cl
  char v4; // al
  const data::SetCombatFixedMovePoint *v5; // [rsp+0h] [rbp-10h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetCombatFixedMovePoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->set_point >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_point, a2, &a2->set_point);
  set_point = a2->set_point;
  v4 = *(_BYTE *)(((unsigned __int64)&this->set_point >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->set_point, a2, &this->set_point);
  }
  this->set_point = set_point;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &v5->to_pos);
};

// Line 8671: range 00000000113085CC-000000001130862B
void __cdecl data::SetCombatFixedMovePoint::~SetCombatFixedMovePoint(data::SetCombatFixedMovePoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCombatFixedMovePoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8671: range 000000001130862C-0000000011308656
void __cdecl data::SetCombatFixedMovePoint::~SetCombatFixedMovePoint(data::SetCombatFixedMovePoint *const this)
{
  data::SetCombatFixedMovePoint::~SetCombatFixedMovePoint(this);
  operator delete(this, 0xA0uLL);
};

// Line 8676: range 00000000100AFD14-00000000100AFD24
const char *__cdecl data::SetCombatFixedMovePoint::getTypeName(const data::SetCombatFixedMovePoint *const this)
{
  return "SetCombatFixedMovePoint";
};

// Line 8677: range 00000000100AFD26-00000000100AFEC2
int32_t __cdecl data::SetCombatFixedMovePoint::getHashNum(const data::SetCombatFixedMovePoint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetCombatFixedMovePoint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetCombatFixedMovePoint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8693: range 00000000111A353C-00000000111A357D
void __cdecl data::SetCombatFixedMovePointFactory::SetCombatFixedMovePointFactory(
        data::SetCombatFixedMovePointFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCombatFixedMovePointFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetCombatFixedMovePointFactory = v2;
};

// Line 8701: range 00000000111A39F4-00000000111A3A53
void __cdecl data::SetAvatarHitBuckets::SetAvatarHitBuckets(data::SetAvatarHitBuckets *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAvatarHitBuckets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAvatarHitBucketSetting::ConfigAvatarHitBucketSetting(&this->override_avatar_hit_bucket_setting);
};

// Line 8701: range 00000000111A3EA2-00000000111A3FFE
void __cdecl data::SetAvatarHitBuckets::SetAvatarHitBuckets(
        data::SetAvatarHitBuckets *const this,
        const data::SetAvatarHitBuckets *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAvatarHitBuckets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->override_avatar_hit_bucket_setting >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&this->override_avatar_hit_bucket_setting.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->override_avatar_hit_bucket_setting.is_json_loaded
                                                                           + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->override_avatar_hit_bucket_setting, 20LL);
  }
  if ( *(char *)(((unsigned __int64)&a2->override_avatar_hit_bucket_setting >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)(&a2->override_avatar_hit_bucket_setting.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 - 101) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->override_avatar_hit_bucket_setting.is_json_loaded
                                                                         + 3) >> 3)
                                                     + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->override_avatar_hit_bucket_setting, 20LL);
  }
  v3 = *(_QWORD *)&a2->override_avatar_hit_bucket_setting.ranged_bucket_count;
  *(_QWORD *)&this->override_avatar_hit_bucket_setting.melee_bucket_count = *(_QWORD *)&a2->override_avatar_hit_bucket_setting.melee_bucket_count;
  *(_QWORD *)&this->override_avatar_hit_bucket_setting.ranged_bucket_count = v3;
  *(_DWORD *)&this->override_avatar_hit_bucket_setting.is_json_loaded = *(_DWORD *)&a2->override_avatar_hit_bucket_setting.is_json_loaded;
};

// Line 8708: range 0000000011308552-000000001130859F
void __cdecl data::SetAvatarHitBuckets::~SetAvatarHitBuckets(data::SetAvatarHitBuckets *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAvatarHitBuckets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8708: range 00000000113085A0-00000000113085CA
void __cdecl data::SetAvatarHitBuckets::~SetAvatarHitBuckets(data::SetAvatarHitBuckets *const this)
{
  data::SetAvatarHitBuckets::~SetAvatarHitBuckets(this);
  operator delete(this, 0xA0uLL);
};

// Line 8713: range 00000000100AFEC4-00000000100AFED4
const char *__cdecl data::SetAvatarHitBuckets::getTypeName(const data::SetAvatarHitBuckets *const this)
{
  return "SetAvatarHitBuckets";
};

// Line 8714: range 00000000100AFED6-00000000100B0072
int32_t __cdecl data::SetAvatarHitBuckets::getHashNum(const data::SetAvatarHitBuckets *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAvatarHitBuckets::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAvatarHitBuckets",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8730: range 00000000111A42E8-00000000111A4329
void __cdecl data::SetAvatarHitBucketsFactory::SetAvatarHitBucketsFactory(data::SetAvatarHitBucketsFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAvatarHitBucketsFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAvatarHitBucketsFactory = v2;
};

// Line 8738: range 00000000111A4632-00000000111A467F
void __cdecl data::ResetAvatarHitBuckets::ResetAvatarHitBuckets(data::ResetAvatarHitBuckets *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetAvatarHitBuckets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8738: range 00000000111A4ACE-00000000111A4B26
void __cdecl data::ResetAvatarHitBuckets::ResetAvatarHitBuckets(
        data::ResetAvatarHitBuckets *const this,
        const data::ResetAvatarHitBuckets *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetAvatarHitBuckets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8744: range 00000000113084D8-0000000011308525
void __cdecl data::ResetAvatarHitBuckets::~ResetAvatarHitBuckets(data::ResetAvatarHitBuckets *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAvatarHitBuckets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8744: range 0000000011308526-0000000011308550
void __cdecl data::ResetAvatarHitBuckets::~ResetAvatarHitBuckets(data::ResetAvatarHitBuckets *const this)
{
  data::ResetAvatarHitBuckets::~ResetAvatarHitBuckets(this);
  operator delete(this, 0x88uLL);
};

// Line 8749: range 00000000100B0074-00000000100B0084
const char *__cdecl data::ResetAvatarHitBuckets::getTypeName(const data::ResetAvatarHitBuckets *const this)
{
  return "ResetAvatarHitBuckets";
};

// Line 8750: range 00000000100B0086-00000000100B0222
int32_t __cdecl data::ResetAvatarHitBuckets::getHashNum(const data::ResetAvatarHitBuckets *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetAvatarHitBuckets::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetAvatarHitBuckets",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8766: range 00000000111A4E10-00000000111A4E51
void __cdecl data::ResetAvatarHitBucketsFactory::ResetAvatarHitBucketsFactory(
        data::ResetAvatarHitBucketsFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAvatarHitBucketsFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetAvatarHitBucketsFactory = v2;
};

// Line 8774: range 00000000111A515A-00000000111A51F0
void __cdecl data::SetAISkillCDMultiplier::SetAISkillCDMultiplier(data::SetAISkillCDMultiplier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDMultiplier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->multiplier >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->multiplier >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->multiplier, v1);
  }
  this->multiplier = 1.0;
};

// Line 8774: range 00000000111A563A-00000000111A5714
void __cdecl data::SetAISkillCDMultiplier::SetAISkillCDMultiplier(
        data::SetAISkillCDMultiplier *const this,
        const data::SetAISkillCDMultiplier *a2)
{
  int (**v2)(...); // rdx
  float multiplier; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDMultiplier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->multiplier >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->multiplier >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->multiplier);
  }
  multiplier = a2->multiplier;
  if ( *(_BYTE *)(((unsigned __int64)&this->multiplier >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->multiplier >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->multiplier, a2);
  }
  this->multiplier = multiplier;
};

// Line 8781: range 000000001130845E-00000000113084AB
void __cdecl data::SetAISkillCDMultiplier::~SetAISkillCDMultiplier(data::SetAISkillCDMultiplier *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDMultiplier + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8781: range 00000000113084AC-00000000113084D6
void __cdecl data::SetAISkillCDMultiplier::~SetAISkillCDMultiplier(data::SetAISkillCDMultiplier *const this)
{
  data::SetAISkillCDMultiplier::~SetAISkillCDMultiplier(this);
  operator delete(this, 0x90uLL);
};

// Line 8786: range 00000000100B0224-00000000100B0234
const char *__cdecl data::SetAISkillCDMultiplier::getTypeName(const data::SetAISkillCDMultiplier *const this)
{
  return "SetAISkillCDMultiplier";
};

// Line 8787: range 00000000100B0236-00000000100B03D2
int32_t __cdecl data::SetAISkillCDMultiplier::getHashNum(const data::SetAISkillCDMultiplier *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAISkillCDMultiplier::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAISkillCDMultiplier",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8803: range 00000000111A59FE-00000000111A5A3F
void __cdecl data::SetAISkillCDMultiplierFactory::SetAISkillCDMultiplierFactory(
        data::SetAISkillCDMultiplierFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAISkillCDMultiplierFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAISkillCDMultiplierFactory = v2;
};

// Line 8811: range 00000000111A5D48-00000000111A5DD8
void __cdecl data::RegisterAIActionPoint::RegisterAIActionPoint(data::RegisterAIActionPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RegisterAIActionPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->point_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->point_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->point_type, v1);
  }
  this->point_type = InvalidPoint;
};

// Line 8811: range 00000000111A6222-00000000111A62F9
void __cdecl data::RegisterAIActionPoint::RegisterAIActionPoint(
        data::RegisterAIActionPoint *const this,
        const data::RegisterAIActionPoint *a2)
{
  int (**v2)(...); // rdx
  data::ActionPointType point_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RegisterAIActionPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->point_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->point_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->point_type);
  }
  point_type = a2->point_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->point_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->point_type, a2);
  }
  this->point_type = point_type;
};

// Line 8818: range 00000000113083E4-0000000011308431
void __cdecl data::RegisterAIActionPoint::~RegisterAIActionPoint(data::RegisterAIActionPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RegisterAIActionPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8818: range 0000000011308432-000000001130845C
void __cdecl data::RegisterAIActionPoint::~RegisterAIActionPoint(data::RegisterAIActionPoint *const this)
{
  data::RegisterAIActionPoint::~RegisterAIActionPoint(this);
  operator delete(this, 0x90uLL);
};

// Line 8823: range 00000000100B03D4-00000000100B03E4
const char *__cdecl data::RegisterAIActionPoint::getTypeName(const data::RegisterAIActionPoint *const this)
{
  return "RegisterAIActionPoint";
};

// Line 8824: range 00000000100B03E6-00000000100B0582
int32_t __cdecl data::RegisterAIActionPoint::getHashNum(const data::RegisterAIActionPoint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RegisterAIActionPoint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RegisterAIActionPoint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8840: range 00000000111A65E2-00000000111A6623
void __cdecl data::RegisterAIActionPointFactory::RegisterAIActionPointFactory(
        data::RegisterAIActionPointFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RegisterAIActionPointFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RegisterAIActionPointFactory = v2;
};

// Line 8848: range 00000000111A692C-00000000111A69BC
void __cdecl data::ReleaseAIActionPoint::ReleaseAIActionPoint(data::ReleaseAIActionPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ReleaseAIActionPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->point_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->point_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->point_type, v1);
  }
  this->point_type = InvalidPoint;
};

// Line 8848: range 00000000111A6E06-00000000111A6EDD
void __cdecl data::ReleaseAIActionPoint::ReleaseAIActionPoint(
        data::ReleaseAIActionPoint *const this,
        const data::ReleaseAIActionPoint *a2)
{
  int (**v2)(...); // rdx
  data::ActionPointType point_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReleaseAIActionPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->point_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->point_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->point_type);
  }
  point_type = a2->point_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->point_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->point_type, a2);
  }
  this->point_type = point_type;
};

// Line 8855: range 000000001130836A-00000000113083B7
void __cdecl data::ReleaseAIActionPoint::~ReleaseAIActionPoint(data::ReleaseAIActionPoint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReleaseAIActionPoint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8855: range 00000000113083B8-00000000113083E2
void __cdecl data::ReleaseAIActionPoint::~ReleaseAIActionPoint(data::ReleaseAIActionPoint *const this)
{
  data::ReleaseAIActionPoint::~ReleaseAIActionPoint(this);
  operator delete(this, 0x90uLL);
};

// Line 8860: range 00000000100B0584-00000000100B0594
const char *__cdecl data::ReleaseAIActionPoint::getTypeName(const data::ReleaseAIActionPoint *const this)
{
  return "ReleaseAIActionPoint";
};

// Line 8861: range 00000000100B0596-00000000100B0732
int32_t __cdecl data::ReleaseAIActionPoint::getHashNum(const data::ReleaseAIActionPoint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReleaseAIActionPoint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReleaseAIActionPoint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8877: range 00000000111A71C6-00000000111A7207
void __cdecl data::ReleaseAIActionPointFactory::ReleaseAIActionPointFactory(
        data::ReleaseAIActionPointFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReleaseAIActionPointFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReleaseAIActionPointFactory = v2;
};

// Line 8885: range 00000000111A7510-00000000111A75E5
void __cdecl data::SetNeuronEnable::SetNeuronEnable(data::SetNeuronEnable *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetNeuronEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->neuron_name, v1);
  }
  this->neuron_name = HIT;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->enable, v3, v4);
  this->enable = 0;
};

// Line 8885: range 00000000111A7A2E-00000000111A7B8F
void __cdecl data::SetNeuronEnable::SetNeuronEnable(data::SetNeuronEnable *const this, const data::SetNeuronEnable *a2)
{
  int (**v2)(...); // rdx
  data::NeuronName neuron_name; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool enable; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::SetNeuronEnable *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetNeuronEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->neuron_name >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->neuron_name >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->neuron_name);
  }
  neuron_name = a2->neuron_name;
  v4 = *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->neuron_name, a2);
  }
  this->neuron_name = neuron_name;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->enable, v5, v6);
  enable = v10->enable;
  v8 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->enable, v5, v9);
  this->enable = enable;
};

// Line 8893: range 000000001130833E-0000000011308368
void __cdecl data::SetNeuronEnable::~SetNeuronEnable(data::SetNeuronEnable *const this)
{
  data::SetNeuronEnable::~SetNeuronEnable(this);
  operator delete(this, 0x90uLL);
};

// Line 8893: range 00000000113082F0-000000001130833D
void __cdecl data::SetNeuronEnable::~SetNeuronEnable(data::SetNeuronEnable *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetNeuronEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8898: range 00000000100B0734-00000000100B0744
const char *__cdecl data::SetNeuronEnable::getTypeName(const data::SetNeuronEnable *const this)
{
  return "SetNeuronEnable";
};

// Line 8899: range 00000000100B0746-00000000100B08E2
int32_t __cdecl data::SetNeuronEnable::getHashNum(const data::SetNeuronEnable *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetNeuronEnable::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetNeuronEnable",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8915: range 00000000111A7E78-00000000111A7EB9
void __cdecl data::SetNeuronEnableFactory::SetNeuronEnableFactory(data::SetNeuronEnableFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetNeuronEnableFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetNeuronEnableFactory = v2;
};

// Line 8923: range 00000000111A81C2-00000000111A8297
void __cdecl data::SetNeuronMute::SetNeuronMute(data::SetNeuronMute *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetNeuronMute + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->neuron_name, v1);
  }
  this->neuron_name = HIT;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->enable, v3, v4);
  this->enable = 0;
};

// Line 8923: range 00000000111A86E0-00000000111A8841
void __cdecl data::SetNeuronMute::SetNeuronMute(data::SetNeuronMute *const this, const data::SetNeuronMute *a2)
{
  int (**v2)(...); // rdx
  data::NeuronName neuron_name; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool enable; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::SetNeuronMute *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetNeuronMute + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->neuron_name >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->neuron_name >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->neuron_name);
  }
  neuron_name = a2->neuron_name;
  v4 = *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->neuron_name, a2);
  }
  this->neuron_name = neuron_name;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->enable, v5, v6);
  enable = v10->enable;
  v8 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->enable, v5, v9);
  this->enable = enable;
};

// Line 8931: range 00000000113082C4-00000000113082EE
void __cdecl data::SetNeuronMute::~SetNeuronMute(data::SetNeuronMute *const this)
{
  data::SetNeuronMute::~SetNeuronMute(this);
  operator delete(this, 0x90uLL);
};

// Line 8931: range 0000000011308276-00000000113082C3
void __cdecl data::SetNeuronMute::~SetNeuronMute(data::SetNeuronMute *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetNeuronMute + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8936: range 00000000100B08E4-00000000100B08F4
const char *__cdecl data::SetNeuronMute::getTypeName(const data::SetNeuronMute *const this)
{
  return "SetNeuronMute";
};

// Line 8937: range 00000000100B08F6-00000000100B0A92
int32_t __cdecl data::SetNeuronMute::getHashNum(const data::SetNeuronMute *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetNeuronMute::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetNeuronMute",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8953: range 00000000111A8B2A-00000000111A8B6B
void __cdecl data::SetNeuronMuteFactory::SetNeuronMuteFactory(data::SetNeuronMuteFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetNeuronMuteFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetNeuronMuteFactory = v2;
};

// Line 8961: range 00000000111A8E74-00000000111A8F8E
void __cdecl data::BroadcastNeuronStimulate::BroadcastNeuronStimulate(data::BroadcastNeuronStimulate *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::BroadcastNeuronStimulate + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->neuron_name, v1);
  }
  this->neuron_name = HIT;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->stimulate >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->stimulate >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->stimulate, v3, v4);
  this->stimulate = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, v3);
  }
  this->range = 0.0;
};

// Line 8961: range 00000000111A93E0-00000000111A95C3
void __cdecl data::BroadcastNeuronStimulate::BroadcastNeuronStimulate(
        data::BroadcastNeuronStimulate *const this,
        const data::BroadcastNeuronStimulate *a2)
{
  int (**v2)(...); // rdx
  data::NeuronName neuron_name; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool stimulate; // cl
  char v8; // dl
  __int64 v9; // rdx
  float range; // xmm0_4
  const data::BroadcastNeuronStimulate *v11; // [rsp+0h] [rbp-10h]

  v11 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BroadcastNeuronStimulate + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->neuron_name >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->neuron_name >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->neuron_name);
  }
  neuron_name = a2->neuron_name;
  v4 = *(_BYTE *)(((unsigned __int64)&this->neuron_name >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->neuron_name, a2);
  }
  this->neuron_name = neuron_name;
  v5 = ((_BYTE)v11 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v11->stimulate >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v11->stimulate >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v11->stimulate, v5, v6);
  stimulate = v11->stimulate;
  v8 = *(_BYTE *)(((unsigned __int64)&this->stimulate >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->stimulate, v5, v9);
  this->stimulate = stimulate;
  if ( *(_BYTE *)(((unsigned __int64)&v11->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v11->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v11->range);
  }
  range = v11->range;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, v5);
  }
  this->range = range;
};

// Line 8970: range 000000001130824A-0000000011308274
void __cdecl data::BroadcastNeuronStimulate::~BroadcastNeuronStimulate(data::BroadcastNeuronStimulate *const this)
{
  data::BroadcastNeuronStimulate::~BroadcastNeuronStimulate(this);
  operator delete(this, 0x98uLL);
};

// Line 8970: range 00000000113081FC-0000000011308249
void __cdecl data::BroadcastNeuronStimulate::~BroadcastNeuronStimulate(data::BroadcastNeuronStimulate *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BroadcastNeuronStimulate + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 8975: range 00000000100B0A94-00000000100B0AA4
const char *__cdecl data::BroadcastNeuronStimulate::getTypeName(const data::BroadcastNeuronStimulate *const this)
{
  return "BroadcastNeuronStimulate";
};

// Line 8976: range 00000000100B0AA6-00000000100B0C42
int32_t __cdecl data::BroadcastNeuronStimulate::getHashNum(const data::BroadcastNeuronStimulate *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BroadcastNeuronStimulate::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BroadcastNeuronStimulate",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8992: range 00000000111A98AC-00000000111A98ED
void __cdecl data::BroadcastNeuronStimulateFactory::BroadcastNeuronStimulateFactory(
        data::BroadcastNeuronStimulateFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BroadcastNeuronStimulateFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BroadcastNeuronStimulateFactory = v2;
};

// Line 9000: range 00000000111A9BF6-00000000111A9CD3
void __cdecl data::IssueCommand::IssueCommand(data::IssueCommand *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::IssueCommand + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->command_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->command_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->command_id, v1);
  }
  this->command_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->duration = 0.0;
};

// Line 9000: range 00000000111AA11C-00000000111AA285
void __cdecl data::IssueCommand::IssueCommand(data::IssueCommand *const this, const data::IssueCommand *a2)
{
  int (**v2)(...); // rdx
  int32_t command_id; // ecx
  char v4; // al
  float duration; // xmm0_4
  const data::IssueCommand *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::IssueCommand + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->command_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->command_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->command_id);
  }
  command_id = a2->command_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->command_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->command_id, a2);
  }
  this->command_id = command_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->duration);
  }
  duration = v6->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->duration = duration;
};

// Line 9008: range 00000000113081D0-00000000113081FA
void __cdecl data::IssueCommand::~IssueCommand(data::IssueCommand *const this)
{
  data::IssueCommand::~IssueCommand(this);
  operator delete(this, 0x90uLL);
};

// Line 9008: range 0000000011308182-00000000113081CF
void __cdecl data::IssueCommand::~IssueCommand(data::IssueCommand *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IssueCommand + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9013: range 00000000100B0C44-00000000100B0C54
const char *__cdecl data::IssueCommand::getTypeName(const data::IssueCommand *const this)
{
  return "IssueCommand";
};

// Line 9014: range 00000000100B0C56-00000000100B0DF2
int32_t __cdecl data::IssueCommand::getHashNum(const data::IssueCommand *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::IssueCommand::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "IssueCommand",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9030: range 00000000111AA56E-00000000111AA5AF
void __cdecl data::IssueCommandFactory::IssueCommandFactory(data::IssueCommandFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IssueCommandFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_IssueCommandFactory = v2;
};

// Line 9038: range 00000000111AA8B8-00000000111AA917
void __cdecl data::ResetAIThreatBroadcastRange::ResetAIThreatBroadcastRange(
        data::ResetAIThreatBroadcastRange *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetAIThreatBroadcastRange + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->range);
};

// Line 9038: range 00000000111AAD5A-00000000111AADF5
void __cdecl data::ResetAIThreatBroadcastRange::ResetAIThreatBroadcastRange(
        data::ResetAIThreatBroadcastRange *const this,
        const data::ResetAIThreatBroadcastRange *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetAIThreatBroadcastRange + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->range, &a2->range);
};

// Line 9045: range 0000000011308156-0000000011308180
void __cdecl data::ResetAIThreatBroadcastRange::~ResetAIThreatBroadcastRange(
        data::ResetAIThreatBroadcastRange *const this)
{
  data::ResetAIThreatBroadcastRange::~ResetAIThreatBroadcastRange(this);
  operator delete(this, 0xA8uLL);
};

// Line 9045: range 00000000113080F6-0000000011308155
void __cdecl data::ResetAIThreatBroadcastRange::~ResetAIThreatBroadcastRange(
        data::ResetAIThreatBroadcastRange *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAIThreatBroadcastRange + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->range);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9050: range 00000000100B0DF4-00000000100B0E04
const char *__cdecl data::ResetAIThreatBroadcastRange::getTypeName(const data::ResetAIThreatBroadcastRange *const this)
{
  return "ResetAIThreatBroadcastRange";
};

// Line 9051: range 00000000100B0E06-00000000100B0FA2
int32_t __cdecl data::ResetAIThreatBroadcastRange::getHashNum(const data::ResetAIThreatBroadcastRange *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetAIThreatBroadcastRange::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetAIThreatBroadcastRange",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9067: range 00000000111AB0DE-00000000111AB11F
void __cdecl data::ResetAIThreatBroadcastRangeFactory::ResetAIThreatBroadcastRangeFactory(
        data::ResetAIThreatBroadcastRangeFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetAIThreatBroadcastRangeFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetAIThreatBroadcastRangeFactory = v2;
};

// Line 9075: range 00000000111AB428-00000000111AB487
void __cdecl data::AddAISpecialAlertTemperature::AddAISpecialAlertTemperature(
        data::AddAISpecialAlertTemperature *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddAISpecialAlertTemperature + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->temperature);
};

// Line 9075: range 00000000111AB8CA-00000000111AB965
void __cdecl data::AddAISpecialAlertTemperature::AddAISpecialAlertTemperature(
        data::AddAISpecialAlertTemperature *const this,
        const data::AddAISpecialAlertTemperature *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddAISpecialAlertTemperature + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->temperature, &a2->temperature);
};

// Line 9082: range 00000000113080CA-00000000113080F4
void __cdecl data::AddAISpecialAlertTemperature::~AddAISpecialAlertTemperature(
        data::AddAISpecialAlertTemperature *const this)
{
  data::AddAISpecialAlertTemperature::~AddAISpecialAlertTemperature(this);
  operator delete(this, 0xA8uLL);
};

// Line 9082: range 000000001130806A-00000000113080C9
void __cdecl data::AddAISpecialAlertTemperature::~AddAISpecialAlertTemperature(
        data::AddAISpecialAlertTemperature *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddAISpecialAlertTemperature + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->temperature);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9087: range 00000000100B0FA4-00000000100B0FB4
const char *__cdecl data::AddAISpecialAlertTemperature::getTypeName(
        const data::AddAISpecialAlertTemperature *const this)
{
  return "AddAISpecialAlertTemperature";
};

// Line 9088: range 00000000100B0FB6-00000000100B1152
int32_t __cdecl data::AddAISpecialAlertTemperature::getHashNum(const data::AddAISpecialAlertTemperature *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddAISpecialAlertTemperature::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddAISpecialAlertTemperature",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9104: range 00000000111ABC4E-00000000111ABC8F
void __cdecl data::AddAISpecialAlertTemperatureFactory::AddAISpecialAlertTemperatureFactory(
        data::AddAISpecialAlertTemperatureFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddAISpecialAlertTemperatureFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddAISpecialAlertTemperatureFactory = v2;
};

// Line 9112: range 00000000111ABF98-00000000111AC025
void __cdecl data::SetAIHitFeeling::SetAIHitFeeling(data::SetAIHitFeeling *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAIHitFeeling + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 9112: range 00000000111AC46E-00000000111AC546
void __cdecl data::SetAIHitFeeling::SetAIHitFeeling(data::SetAIHitFeeling *const this, const data::SetAIHitFeeling *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAIHitFeeling + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 9119: range 0000000011307FF0-000000001130803D
void __cdecl data::SetAIHitFeeling::~SetAIHitFeeling(data::SetAIHitFeeling *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAIHitFeeling + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9119: range 000000001130803E-0000000011308068
void __cdecl data::SetAIHitFeeling::~SetAIHitFeeling(data::SetAIHitFeeling *const this)
{
  data::SetAIHitFeeling::~SetAIHitFeeling(this);
  operator delete(this, 0x90uLL);
};

// Line 9124: range 00000000100B1154-00000000100B1164
const char *__cdecl data::SetAIHitFeeling::getTypeName(const data::SetAIHitFeeling *const this)
{
  return "SetAIHitFeeling";
};

// Line 9125: range 00000000100B1166-00000000100B1302
int32_t __cdecl data::SetAIHitFeeling::getHashNum(const data::SetAIHitFeeling *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAIHitFeeling::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAIHitFeeling",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9141: range 00000000111AC830-00000000111AC871
void __cdecl data::SetAIHitFeelingFactory::SetAIHitFeelingFactory(data::SetAIHitFeelingFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAIHitFeelingFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAIHitFeelingFactory = v2;
};

// Line 9149: range 00000000111ACB7A-00000000111ACC07
void __cdecl data::SetVelocityIgnoreAirGY::SetVelocityIgnoreAirGY(data::SetVelocityIgnoreAirGY *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetVelocityIgnoreAirGY + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->ignore_air_gy >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ignore_air_gy, v1, &this->ignore_air_gy);
  this->ignore_air_gy = 0;
};

// Line 9149: range 00000000111AD050-00000000111AD128
void __cdecl data::SetVelocityIgnoreAirGY::SetVelocityIgnoreAirGY(
        data::SetVelocityIgnoreAirGY *const this,
        const data::SetVelocityIgnoreAirGY *a2)
{
  int (**v2)(...); // rdx
  bool ignore_air_gy; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetVelocityIgnoreAirGY + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->ignore_air_gy >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ignore_air_gy, a2, &a2->ignore_air_gy);
  ignore_air_gy = a2->ignore_air_gy;
  v4 = *(_BYTE *)(((unsigned __int64)&this->ignore_air_gy >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->ignore_air_gy, a2, &this->ignore_air_gy);
  }
  this->ignore_air_gy = ignore_air_gy;
};

// Line 9156: range 0000000011307FC4-0000000011307FEE
void __cdecl data::SetVelocityIgnoreAirGY::~SetVelocityIgnoreAirGY(data::SetVelocityIgnoreAirGY *const this)
{
  data::SetVelocityIgnoreAirGY::~SetVelocityIgnoreAirGY(this);
  operator delete(this, 0x90uLL);
};

// Line 9156: range 0000000011307F76-0000000011307FC3
void __cdecl data::SetVelocityIgnoreAirGY::~SetVelocityIgnoreAirGY(data::SetVelocityIgnoreAirGY *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetVelocityIgnoreAirGY + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9161: range 00000000100B1304-00000000100B1314
const char *__cdecl data::SetVelocityIgnoreAirGY::getTypeName(const data::SetVelocityIgnoreAirGY *const this)
{
  return "SetVelocityIgnoreAirGY";
};

// Line 9162: range 00000000100B1316-00000000100B14B2
int32_t __cdecl data::SetVelocityIgnoreAirGY::getHashNum(const data::SetVelocityIgnoreAirGY *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetVelocityIgnoreAirGY::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetVelocityIgnoreAirGY",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9178: range 00000000111AD412-00000000111AD453
void __cdecl data::SetVelocityIgnoreAirGYFactory::SetVelocityIgnoreAirGYFactory(
        data::SetVelocityIgnoreAirGYFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetVelocityIgnoreAirGYFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetVelocityIgnoreAirGYFactory = v2;
};

// Line 9186: range 00000000111AD75C-00000000111AD837
void __cdecl data::UseItem::UseItem(data::UseItem *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::UseItem + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->item_id, v1);
  }
  this->item_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->item_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->item_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->item_num, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->item_num = 0;
};

// Line 9186: range 00000000111ADC80-00000000111ADDE6
void __cdecl data::UseItem::UseItem(data::UseItem *const this, const data::UseItem *a2)
{
  int (**v2)(...); // rdx
  uint32_t item_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t item_num; // ecx
  char v7; // dl
  const data::UseItem *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UseItem + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->item_id);
  }
  item_id = a2->item_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->item_id, a2);
  }
  this->item_id = item_id;
  v5 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->item_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->item_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->item_num);
  }
  item_num = v8->item_num;
  v7 = *(_BYTE *)(((unsigned __int64)&this->item_num >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->item_num, v5);
  }
  this->item_num = item_num;
};

// Line 9194: range 0000000011307F4A-0000000011307F74
void __cdecl data::UseItem::~UseItem(data::UseItem *const this)
{
  data::UseItem::~UseItem(this);
  operator delete(this, 0x90uLL);
};

// Line 9194: range 0000000011307EFC-0000000011307F49
void __cdecl data::UseItem::~UseItem(data::UseItem *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UseItem + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9199: range 00000000100B14B4-00000000100B14C4
const char *__cdecl data::UseItem::getTypeName(const data::UseItem *const this)
{
  return "UseItem";
};

// Line 9200: range 00000000100B14C6-00000000100B1662
int32_t __cdecl data::UseItem::getHashNum(const data::UseItem *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UseItem::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UseItem",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9216: range 00000000111AE0D0-00000000111AE111
void __cdecl data::UseItemFactory::UseItemFactory(data::UseItemFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UseItemFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UseItemFactory = v2;
};

// Line 9224: range 00000000111AE41A-00000000111AE4B3
void __cdecl data::Repeated::Repeated(data::Repeated *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::Repeated + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicInt::DynamicInt(&this->repeat_times, 1);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 9224: range 00000000111AE8FC-00000000111AE9CE
void __cdecl data::Repeated::Repeated(data::Repeated *const this, const data::Repeated *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::Repeated + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicInt::DynamicInt(&this->repeat_times, &a2->repeat_times);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 9232: range 0000000011307ED0-0000000011307EFA
void __cdecl data::Repeated::~Repeated(data::Repeated *const this)
{
  data::Repeated::~Repeated(this);
  operator delete(this, 0xD0uLL);
};

// Line 9232: range 0000000011307E5E-0000000011307ECF
void __cdecl data::Repeated::~Repeated(data::Repeated *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::Repeated + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  data::DynamicInt::~DynamicInt(&this->repeat_times);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9237: range 00000000100B1664-00000000100B1674
const char *__cdecl data::Repeated::getTypeName(const data::Repeated *const this)
{
  return "Repeated";
};

// Line 9238: range 00000000100B1676-00000000100B1812
int32_t __cdecl data::Repeated::getHashNum(const data::Repeated *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::Repeated::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "Repeated",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9254: range 00000000111AECB8-00000000111AECF9
void __cdecl data::RepeatedFactory::RepeatedFactory(data::RepeatedFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RepeatedFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RepeatedFactory = v2;
};

// Line 9262: range 00000000111AF002-00000000111AF098
void __cdecl data::SetEntityScale::SetEntityScale(data::SetEntityScale *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetEntityScale + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, v1);
  }
  this->scale = 1.0;
};

// Line 9262: range 00000000111AF4E2-00000000111AF5BC
void __cdecl data::SetEntityScale::SetEntityScale(data::SetEntityScale *const this, const data::SetEntityScale *a2)
{
  int (**v2)(...); // rdx
  float scale; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetEntityScale + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->scale);
  }
  scale = a2->scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->scale, a2);
  }
  this->scale = scale;
};

// Line 9269: range 0000000011307E32-0000000011307E5C
void __cdecl data::SetEntityScale::~SetEntityScale(data::SetEntityScale *const this)
{
  data::SetEntityScale::~SetEntityScale(this);
  operator delete(this, 0x90uLL);
};

// Line 9269: range 0000000011307DE4-0000000011307E31
void __cdecl data::SetEntityScale::~SetEntityScale(data::SetEntityScale *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetEntityScale + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9274: range 00000000100B1814-00000000100B1824
const char *__cdecl data::SetEntityScale::getTypeName(const data::SetEntityScale *const this)
{
  return "SetEntityScale";
};

// Line 9275: range 00000000100B1826-00000000100B19C2
int32_t __cdecl data::SetEntityScale::getHashNum(const data::SetEntityScale *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetEntityScale::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetEntityScale",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9291: range 00000000111AF8A6-00000000111AF8E7
void __cdecl data::SetEntityScaleFactory::SetEntityScaleFactory(data::SetEntityScaleFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetEntityScaleFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetEntityScaleFactory = v2;
};

// Line 9299: range 00000000111AFBF0-00000000111AFCF1
void __cdecl data::CallLuaTask::CallLuaTask(data::CallLuaTask *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::CallLuaTask + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->target_alias);
  if ( *(_BYTE *)(((unsigned __int64)&this->value_int >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->value_int >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->value_int, v1);
  }
  this->value_int = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->value_float >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value_float >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value_float, (((_BYTE)this - 84) & 7u) + 3);
  }
  this->value_float = 0.0;
  std::string::basic_string(&this->value_string);
};

// Line 9299: range 00000000111B013A-00000000111B031D
void __cdecl data::CallLuaTask::CallLuaTask(data::CallLuaTask *const this, const data::CallLuaTask *a2)
{
  int (**v2)(...); // rdx
  std::string *p_target_alias; // rsi
  int32_t value_int; // ecx
  char v5; // al
  float value_float; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CallLuaTask + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_target_alias = &a2->target_alias;
  std::string::basic_string(&this->target_alias, &a2->target_alias);
  if ( *(_BYTE *)(((unsigned __int64)&a2->value_int >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->value_int >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->value_int);
  }
  value_int = a2->value_int;
  v5 = *(_BYTE *)(((unsigned __int64)&this->value_int >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_target_alias) = v5 != 0;
    __asan_report_store4(&this->value_int, p_target_alias);
  }
  this->value_int = value_int;
  if ( *(_BYTE *)(((unsigned __int64)&a2->value_float >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->value_float >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->value_float);
  }
  value_float = a2->value_float;
  if ( *(_BYTE *)(((unsigned __int64)&this->value_float >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->value_float >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->value_float, (((_BYTE)this - 84) & 7u) + 3);
  }
  this->value_float = value_float;
  std::string::basic_string(&this->value_string, &a2->value_string);
};

// Line 9309: range 0000000011307DB8-0000000011307DE2
void __cdecl data::CallLuaTask::~CallLuaTask(data::CallLuaTask *const this)
{
  data::CallLuaTask::~CallLuaTask(this);
  operator delete(this, 0xD0uLL);
};

// Line 9309: range 0000000011307D46-0000000011307DB7
void __cdecl data::CallLuaTask::~CallLuaTask(data::CallLuaTask *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CallLuaTask + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->value_string);
  std::string::~string(&this->target_alias);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9314: range 00000000100B19C4-00000000100B19D4
const char *__cdecl data::CallLuaTask::getTypeName(const data::CallLuaTask *const this)
{
  return "CallLuaTask";
};

// Line 9315: range 00000000100B19D6-00000000100B1B72
int32_t __cdecl data::CallLuaTask::getHashNum(const data::CallLuaTask *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CallLuaTask::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CallLuaTask",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9331: range 00000000111B0606-00000000111B0647
void __cdecl data::CallLuaTaskFactory::CallLuaTaskFactory(data::CallLuaTaskFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CallLuaTaskFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CallLuaTaskFactory = v2;
};

// Line 9339: range 00000000111B0950-00000000111B0A13
void __cdecl data::DungeonFogEffects::DungeonFogEffects(data::DungeonFogEffects *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DungeonFogEffects + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  std::string::basic_string(&this->camera_fog_effect_name);
  std::string::basic_string(&this->player_fog_effect_name);
  data::Vector::Vector(&this->local_offset);
};

// Line 9339: range 00000000111B0E5C-00000000111B1022
void __cdecl data::DungeonFogEffects::DungeonFogEffects(
        data::DungeonFogEffects *const this,
        const data::DungeonFogEffects *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  __int64 v5; // rdx
  const data::DungeonFogEffects *v6; // [rsp+0h] [rbp-20h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DungeonFogEffects + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  std::string::basic_string(&this->camera_fog_effect_name, &v6->camera_fog_effect_name);
  std::string::basic_string(&this->player_fog_effect_name, &v6->player_fog_effect_name);
  if ( *(_WORD *)(((unsigned __int64)&this->local_offset >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&v6->local_offset >> 3) + 0x7FFF8000) )
    __asan_report_load16(&v6->local_offset);
  v5 = *(_QWORD *)&v6->local_offset.z;
  *(_QWORD *)&this->local_offset.x = *(_QWORD *)&v6->local_offset.x;
  *(_QWORD *)&this->local_offset.z = v5;
};

// Line 9349: range 0000000011307D1A-0000000011307D44
void __cdecl data::DungeonFogEffects::~DungeonFogEffects(data::DungeonFogEffects *const this)
{
  data::DungeonFogEffects::~DungeonFogEffects(this);
  operator delete(this, 0xE0uLL);
};

// Line 9349: range 0000000011307CA8-0000000011307D19
void __cdecl data::DungeonFogEffects::~DungeonFogEffects(data::DungeonFogEffects *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DungeonFogEffects + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->player_fog_effect_name);
  std::string::~string(&this->camera_fog_effect_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9354: range 00000000100B1B74-00000000100B1B84
const char *__cdecl data::DungeonFogEffects::getTypeName(const data::DungeonFogEffects *const this)
{
  return "DungeonFogEffects";
};

// Line 9355: range 00000000100B1B86-00000000100B1D22
int32_t __cdecl data::DungeonFogEffects::getHashNum(const data::DungeonFogEffects *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DungeonFogEffects::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DungeonFogEffects",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9371: range 00000000111B130C-00000000111B134D
void __cdecl data::DungeonFogEffectsFactory::DungeonFogEffectsFactory(data::DungeonFogEffectsFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DungeonFogEffectsFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DungeonFogEffectsFactory = v2;
};

// Line 9379: range 00000000111B1656-00000000111B16B5
void __cdecl data::DoTileAction::DoTileAction(data::DoTileAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DoTileAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->action_id);
};

// Line 9379: range 00000000111B1AF8-00000000111B1B93
void __cdecl data::DoTileAction::DoTileAction(data::DoTileAction *const this, const data::DoTileAction *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoTileAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->action_id, &a2->action_id);
};

// Line 9386: range 0000000011307C7C-0000000011307CA6
void __cdecl data::DoTileAction::~DoTileAction(data::DoTileAction *const this)
{
  data::DoTileAction::~DoTileAction(this);
  operator delete(this, 0xA8uLL);
};

// Line 9386: range 0000000011307C1C-0000000011307C7B
void __cdecl data::DoTileAction::~DoTileAction(data::DoTileAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoTileAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->action_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9391: range 00000000100B1D24-00000000100B1D34
const char *__cdecl data::DoTileAction::getTypeName(const data::DoTileAction *const this)
{
  return "DoTileAction";
};

// Line 9392: range 00000000100B1D36-00000000100B1ED2
int32_t __cdecl data::DoTileAction::getHashNum(const data::DoTileAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoTileAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoTileAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9408: range 00000000111B1E7C-00000000111B1EBD
void __cdecl data::DoTileActionFactory::DoTileActionFactory(data::DoTileActionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoTileActionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoTileActionFactory = v2;
};

// Line 9416: range 00000000111B21C6-00000000111B22E0
void __cdecl data::DoWatcherSystemAction::DoWatcherSystemAction(data::DoWatcherSystemAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DoWatcherSystemAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->watcher_id, v1);
  }
  this->watcher_id = 0;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->authority_only, v3, v4);
  this->authority_only = 0;
  v5 = ((_BYTE)this - 115) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->in_threat_list_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->in_threat_list_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->in_threat_list_only, v5, v6);
  this->in_threat_list_only = 0;
};

// Line 9416: range 000000000F7CDB4E-000000000F7CDD39
void __cdecl data::DoWatcherSystemAction::DoWatcherSystemAction(
        data::DoWatcherSystemAction *const this,
        const data::DoWatcherSystemAction *a2)
{
  int (**v2)(...); // rdx
  uint32_t watcher_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool authority_only; // cl
  char v8; // dl
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool in_threat_list_only; // cl
  char v13; // dl
  __int64 v14; // rdx
  const data::DoWatcherSystemAction *v15; // [rsp+0h] [rbp-10h]

  v15 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoWatcherSystemAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->watcher_id);
  }
  watcher_id = a2->watcher_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->watcher_id, a2);
  }
  this->watcher_id = watcher_id;
  v5 = ((_BYTE)v15 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v15->authority_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v15->authority_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v15->authority_only, v5, v6);
  authority_only = v15->authority_only;
  v8 = *(_BYTE *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->authority_only, v5, v9);
  this->authority_only = authority_only;
  v10 = ((_BYTE)v15 - 115) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v15->in_threat_list_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v15->in_threat_list_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v15->in_threat_list_only, v10, v11);
  in_threat_list_only = v15->in_threat_list_only;
  v13 = *(_BYTE *)(((unsigned __int64)&this->in_threat_list_only >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this - 115) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->in_threat_list_only, v10, v14);
  this->in_threat_list_only = in_threat_list_only;
};

// Line 9425: range 000000000F8FD20C-000000000F8FD259
void __cdecl data::DoWatcherSystemAction::~DoWatcherSystemAction(data::DoWatcherSystemAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoWatcherSystemAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9425: range 000000000F8FD25A-000000000F8FD284
void __cdecl data::DoWatcherSystemAction::~DoWatcherSystemAction(data::DoWatcherSystemAction *const this)
{
  data::DoWatcherSystemAction::~DoWatcherSystemAction(this);
  operator delete(this, 0x90uLL);
};

// Line 9430: range 00000000100B1ED4-00000000100B1EE4
const char *__cdecl data::DoWatcherSystemAction::getTypeName(const data::DoWatcherSystemAction *const this)
{
  return "DoWatcherSystemAction";
};

// Line 9431: range 00000000100B1EE6-00000000100B2082
int32_t __cdecl data::DoWatcherSystemAction::getHashNum(const data::DoWatcherSystemAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoWatcherSystemAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoWatcherSystemAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9450: range 00000000111B2A12-00000000111B2A9F
void __cdecl data::ShowProgressBarAction::ShowProgressBarAction(data::ShowProgressBarAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ShowProgressBarAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->show, v1, &this->show);
  this->show = 1;
};

// Line 9450: range 00000000111B2EE8-00000000111B2FC0
void __cdecl data::ShowProgressBarAction::ShowProgressBarAction(
        data::ShowProgressBarAction *const this,
        const data::ShowProgressBarAction *a2)
{
  int (**v2)(...); // rdx
  bool show; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShowProgressBarAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->show >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->show, a2, &a2->show);
  show = a2->show;
  v4 = *(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->show, a2, &this->show);
  }
  this->show = show;
};

// Line 9457: range 0000000011307BF0-0000000011307C1A
void __cdecl data::ShowProgressBarAction::~ShowProgressBarAction(data::ShowProgressBarAction *const this)
{
  data::ShowProgressBarAction::~ShowProgressBarAction(this);
  operator delete(this, 0x90uLL);
};

// Line 9457: range 0000000011307BA2-0000000011307BEF
void __cdecl data::ShowProgressBarAction::~ShowProgressBarAction(data::ShowProgressBarAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowProgressBarAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9462: range 00000000100B2084-00000000100B2094
const char *__cdecl data::ShowProgressBarAction::getTypeName(const data::ShowProgressBarAction *const this)
{
  return "ShowProgressBarAction";
};

// Line 9463: range 00000000100B2096-00000000100B2232
int32_t __cdecl data::ShowProgressBarAction::getHashNum(const data::ShowProgressBarAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShowProgressBarAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShowProgressBarAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9479: range 00000000111B32AA-00000000111B32EB
void __cdecl data::ShowProgressBarActionFactory::ShowProgressBarActionFactory(
        data::ShowProgressBarActionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowProgressBarActionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShowProgressBarActionFactory = v2;
};

// Line 9487: range 00000000111B35F4-00000000111B3693
void __cdecl data::ChangeTag::ChangeTag(data::ChangeTag *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeTag + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->is_add >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_add, v1, &this->is_add);
  this->is_add = 0;
  std::string::basic_string(&this->tag);
};

// Line 9487: range 00000000111B3ADC-00000000111B3BF7
void __cdecl data::ChangeTag::ChangeTag(data::ChangeTag *const this, const data::ChangeTag *a2)
{
  int (**v2)(...); // rdx
  bool is_add; // cl
  char v4; // al
  const data::ChangeTag *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeTag + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->is_add >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_add, a2, &a2->is_add);
  is_add = a2->is_add;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_add >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->is_add, a2, &this->is_add);
  }
  this->is_add = is_add;
  std::string::basic_string(&this->tag, &v5->tag);
};

// Line 9495: range 0000000011307B16-0000000011307B75
void __cdecl data::ChangeTag::~ChangeTag(data::ChangeTag *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeTag + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->tag);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9495: range 0000000011307B76-0000000011307BA0
void __cdecl data::ChangeTag::~ChangeTag(data::ChangeTag *const this)
{
  data::ChangeTag::~ChangeTag(this);
  operator delete(this, 0xB0uLL);
};

// Line 9500: range 00000000100B2234-00000000100B2244
const char *__cdecl data::ChangeTag::getTypeName(const data::ChangeTag *const this)
{
  return "ChangeTag";
};

// Line 9501: range 00000000100B2246-00000000100B23E2
int32_t __cdecl data::ChangeTag::getHashNum(const data::ChangeTag *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeTag::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeTag",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9517: range 00000000111B3EE0-00000000111B3F21
void __cdecl data::ChangeTagFactory::ChangeTagFactory(data::ChangeTagFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeTagFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeTagFactory = v2;
};

// Line 9525: range 00000000111B422A-00000000111B42B7
void __cdecl data::UseSkillEliteSet::UseSkillEliteSet(data::UseSkillEliteSet *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::UseSkillEliteSet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->skill_elite_set_id >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->skill_elite_set_id, v1, &this->skill_elite_set_id);
  this->skill_elite_set_id = 0;
};

// Line 9525: range 00000000111B4700-00000000111B47D8
void __cdecl data::UseSkillEliteSet::UseSkillEliteSet(
        data::UseSkillEliteSet *const this,
        const data::UseSkillEliteSet *a2)
{
  int (**v2)(...); // rdx
  uint8_t skill_elite_set_id; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UseSkillEliteSet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->skill_elite_set_id >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->skill_elite_set_id, a2, &a2->skill_elite_set_id);
  skill_elite_set_id = a2->skill_elite_set_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_elite_set_id >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->skill_elite_set_id, a2, &this->skill_elite_set_id);
  }
  this->skill_elite_set_id = skill_elite_set_id;
};

// Line 9532: range 0000000011307AEA-0000000011307B14
void __cdecl data::UseSkillEliteSet::~UseSkillEliteSet(data::UseSkillEliteSet *const this)
{
  data::UseSkillEliteSet::~UseSkillEliteSet(this);
  operator delete(this, 0x90uLL);
};

// Line 9532: range 0000000011307A9C-0000000011307AE9
void __cdecl data::UseSkillEliteSet::~UseSkillEliteSet(data::UseSkillEliteSet *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UseSkillEliteSet + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9537: range 00000000100B23E4-00000000100B23F4
const char *__cdecl data::UseSkillEliteSet::getTypeName(const data::UseSkillEliteSet *const this)
{
  return "UseSkillEliteSet";
};

// Line 9538: range 00000000100B23F6-00000000100B2592
int32_t __cdecl data::UseSkillEliteSet::getHashNum(const data::UseSkillEliteSet *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UseSkillEliteSet::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UseSkillEliteSet",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9554: range 00000000111B4AC2-00000000111B4B03
void __cdecl data::UseSkillEliteSetFactory::UseSkillEliteSetFactory(data::UseSkillEliteSetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UseSkillEliteSetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UseSkillEliteSetFactory = v2;
};

// Line 9562: range 00000000111B4E0C-00000000111B505F
void __cdecl data::FixedMonsterRushMove::FixedMonsterRushMove(data::FixedMonsterRushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FixedMonsterRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::DynamicFloat::DynamicFloat(&this->time_range, 1.0);
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, v1);
  }
  this->max_range = 0.0;
  std::vector<std::string>::vector(&this->animator_state_ids);
  std::string::basic_string(&this->override_move_collider);
  if ( *(char *)(((unsigned __int64)&this->is_in_air >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_in_air, v1, &this->is_in_air);
  this->is_in_air = 0;
  v3 = ((_BYTE)this - 7) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->check_animator_state_on_exit_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->check_animator_state_on_exit_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->check_animator_state_on_exit_only, v3, v4);
  this->check_animator_state_on_exit_only = 0;
  v5 = ((_BYTE)this - 6) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->ignore_detect_forward >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->ignore_detect_forward >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->ignore_detect_forward, v5, v6);
  this->ignore_detect_forward = 0;
  v7 = ((_BYTE)this - 5) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->exact_arrive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->exact_arrive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->exact_arrive, v7, v8);
  this->exact_arrive = 0;
};

// Line 9562: range 00000000111B54A8-00000000111B5883
void __cdecl data::FixedMonsterRushMove::FixedMonsterRushMove(
        data::FixedMonsterRushMove *const this,
        const data::FixedMonsterRushMove *a2)
{
  int (**v2)(...); // rdx
  float max_range; // xmm0_4
  std::string *p_override_move_collider; // rsi
  bool is_in_air; // cl
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  bool check_animator_state_on_exit_only; // cl
  char v10; // dl
  __int64 v11; // rdx
  __int64 v12; // rsi
  __int64 v13; // rdx
  bool ignore_detect_forward; // cl
  char v15; // dl
  __int64 v16; // rdx
  __int64 v17; // rsi
  __int64 v18; // rdx
  bool exact_arrive; // cl
  char v20; // dl
  __int64 v21; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FixedMonsterRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &a2->to_pos);
  data::DynamicFloat::DynamicFloat(&this->time_range, &a2->time_range);
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_range);
  }
  max_range = a2->max_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, &a2->time_range);
  }
  this->max_range = max_range;
  std::vector<std::string>::vector(&this->animator_state_ids, &a2->animator_state_ids);
  p_override_move_collider = &a2->override_move_collider;
  std::string::basic_string(&this->override_move_collider, &a2->override_move_collider);
  if ( *(char *)(((unsigned __int64)&a2->is_in_air >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_in_air, p_override_move_collider, &a2->is_in_air);
  is_in_air = a2->is_in_air;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_in_air >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_override_move_collider) = v6 != 0;
    __asan_report_store1(&this->is_in_air, p_override_move_collider, &this->is_in_air);
  }
  this->is_in_air = is_in_air;
  v7 = ((_BYTE)a2 - 7) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&a2->check_animator_state_on_exit_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&a2->check_animator_state_on_exit_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&a2->check_animator_state_on_exit_only, v7, v8);
  check_animator_state_on_exit_only = a2->check_animator_state_on_exit_only;
  v10 = *(_BYTE *)(((unsigned __int64)&this->check_animator_state_on_exit_only >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v10 != 0;
  v11 = (v10 != 0) & (unsigned __int8)((((unsigned __int8)this - 7) & 7) >= v10);
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->check_animator_state_on_exit_only, v7, v11);
  this->check_animator_state_on_exit_only = check_animator_state_on_exit_only;
  v12 = ((_BYTE)a2 - 6) & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)&a2->ignore_detect_forward >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)&a2->ignore_detect_forward >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_load1(&a2->ignore_detect_forward, v12, v13);
  ignore_detect_forward = a2->ignore_detect_forward;
  v15 = *(_BYTE *)(((unsigned __int64)&this->ignore_detect_forward >> 3) + 0x7FFF8000);
  LOBYTE(v12) = v15 != 0;
  v16 = (v15 != 0) & (unsigned __int8)((((unsigned __int8)this - 6) & 7) >= v15);
  if ( (_BYTE)v16 )
    __asan_report_store1(&this->ignore_detect_forward, v12, v16);
  this->ignore_detect_forward = ignore_detect_forward;
  v17 = ((_BYTE)a2 - 5) & 7;
  v18 = (*(_BYTE *)(((unsigned __int64)&a2->exact_arrive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v17 >= *(_BYTE *)(((unsigned __int64)&a2->exact_arrive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v18 )
    __asan_report_load1(&a2->exact_arrive, v17, v18);
  exact_arrive = a2->exact_arrive;
  v20 = *(_BYTE *)(((unsigned __int64)&this->exact_arrive >> 3) + 0x7FFF8000);
  LOBYTE(v17) = v20 != 0;
  v21 = (v20 != 0) & (unsigned __int8)((((unsigned __int8)this - 5) & 7) >= v20);
  if ( (_BYTE)v21 )
    __asan_report_store1(&this->exact_arrive, v17, v21);
  this->exact_arrive = exact_arrive;
};

// Line 9577: range 00000000113079DA-0000000011307A6F
void __cdecl data::FixedMonsterRushMove::~FixedMonsterRushMove(data::FixedMonsterRushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixedMonsterRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_move_collider);
  std::vector<std::string>::~vector(&this->animator_state_ids);
  data::DynamicFloat::~DynamicFloat(&this->time_range);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9577: range 0000000011307A70-0000000011307A9A
void __cdecl data::FixedMonsterRushMove::~FixedMonsterRushMove(data::FixedMonsterRushMove *const this)
{
  data::FixedMonsterRushMove::~FixedMonsterRushMove(this);
  operator delete(this, 0x100uLL);
};

// Line 9582: range 00000000100B2594-00000000100B25A4
const char *__cdecl data::FixedMonsterRushMove::getTypeName(const data::FixedMonsterRushMove *const this)
{
  return "FixedMonsterRushMove";
};

// Line 9583: range 00000000100B25A6-00000000100B2742
int32_t __cdecl data::FixedMonsterRushMove::getHashNum(const data::FixedMonsterRushMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FixedMonsterRushMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FixedMonsterRushMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9599: range 00000000111B5B6C-00000000111B5BAD
void __cdecl data::FixedMonsterRushMoveFactory::FixedMonsterRushMoveFactory(
        data::FixedMonsterRushMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixedMonsterRushMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FixedMonsterRushMoveFactory = v2;
};

// Line 9607: range 00000000111B5EB6-00000000111B6109
void __cdecl data::FixedAvatarRushMove::FixedAvatarRushMove(data::FixedAvatarRushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::DynamicFloat::DynamicFloat(&this->time_range, 1.0);
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, v1);
  }
  this->max_range = 0.0;
  std::vector<std::string>::vector(&this->animator_state_ids);
  std::string::basic_string(&this->override_move_collider);
  if ( *(char *)(((unsigned __int64)&this->is_in_air >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_in_air, v1, &this->is_in_air);
  this->is_in_air = 0;
  v3 = ((_BYTE)this - 7) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->check_animator_state_on_exit_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->check_animator_state_on_exit_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->check_animator_state_on_exit_only, v3, v4);
  this->check_animator_state_on_exit_only = 0;
  v5 = ((_BYTE)this - 6) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->ignore_detect_forward >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->ignore_detect_forward >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->ignore_detect_forward, v5, v6);
  this->ignore_detect_forward = 0;
  v7 = ((_BYTE)this - 5) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->exact_arrive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->exact_arrive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->exact_arrive, v7, v8);
  this->exact_arrive = 0;
};

// Line 9607: range 00000000111B6552-00000000111B692D
void __cdecl data::FixedAvatarRushMove::FixedAvatarRushMove(
        data::FixedAvatarRushMove *const this,
        const data::FixedAvatarRushMove *a2)
{
  int (**v2)(...); // rdx
  float max_range; // xmm0_4
  std::string *p_override_move_collider; // rsi
  bool is_in_air; // cl
  char v6; // al
  __int64 v7; // rsi
  __int64 v8; // rdx
  bool check_animator_state_on_exit_only; // cl
  char v10; // dl
  __int64 v11; // rdx
  __int64 v12; // rsi
  __int64 v13; // rdx
  bool ignore_detect_forward; // cl
  char v15; // dl
  __int64 v16; // rdx
  __int64 v17; // rsi
  __int64 v18; // rdx
  bool exact_arrive; // cl
  char v20; // dl
  __int64 v21; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &a2->to_pos);
  data::DynamicFloat::DynamicFloat(&this->time_range, &a2->time_range);
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_range);
  }
  max_range = a2->max_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, &a2->time_range);
  }
  this->max_range = max_range;
  std::vector<std::string>::vector(&this->animator_state_ids, &a2->animator_state_ids);
  p_override_move_collider = &a2->override_move_collider;
  std::string::basic_string(&this->override_move_collider, &a2->override_move_collider);
  if ( *(char *)(((unsigned __int64)&a2->is_in_air >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_in_air, p_override_move_collider, &a2->is_in_air);
  is_in_air = a2->is_in_air;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_in_air >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_override_move_collider) = v6 != 0;
    __asan_report_store1(&this->is_in_air, p_override_move_collider, &this->is_in_air);
  }
  this->is_in_air = is_in_air;
  v7 = ((_BYTE)a2 - 7) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&a2->check_animator_state_on_exit_only >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&a2->check_animator_state_on_exit_only >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&a2->check_animator_state_on_exit_only, v7, v8);
  check_animator_state_on_exit_only = a2->check_animator_state_on_exit_only;
  v10 = *(_BYTE *)(((unsigned __int64)&this->check_animator_state_on_exit_only >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v10 != 0;
  v11 = (v10 != 0) & (unsigned __int8)((((unsigned __int8)this - 7) & 7) >= v10);
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->check_animator_state_on_exit_only, v7, v11);
  this->check_animator_state_on_exit_only = check_animator_state_on_exit_only;
  v12 = ((_BYTE)a2 - 6) & 7;
  v13 = (*(_BYTE *)(((unsigned __int64)&a2->ignore_detect_forward >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v12 >= *(_BYTE *)(((unsigned __int64)&a2->ignore_detect_forward >> 3) + 0x7FFF8000));
  if ( (_BYTE)v13 )
    __asan_report_load1(&a2->ignore_detect_forward, v12, v13);
  ignore_detect_forward = a2->ignore_detect_forward;
  v15 = *(_BYTE *)(((unsigned __int64)&this->ignore_detect_forward >> 3) + 0x7FFF8000);
  LOBYTE(v12) = v15 != 0;
  v16 = (v15 != 0) & (unsigned __int8)((((unsigned __int8)this - 6) & 7) >= v15);
  if ( (_BYTE)v16 )
    __asan_report_store1(&this->ignore_detect_forward, v12, v16);
  this->ignore_detect_forward = ignore_detect_forward;
  v17 = ((_BYTE)a2 - 5) & 7;
  v18 = (*(_BYTE *)(((unsigned __int64)&a2->exact_arrive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v17 >= *(_BYTE *)(((unsigned __int64)&a2->exact_arrive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v18 )
    __asan_report_load1(&a2->exact_arrive, v17, v18);
  exact_arrive = a2->exact_arrive;
  v20 = *(_BYTE *)(((unsigned __int64)&this->exact_arrive >> 3) + 0x7FFF8000);
  LOBYTE(v17) = v20 != 0;
  v21 = (v20 != 0) & (unsigned __int8)((((unsigned __int8)this - 5) & 7) >= v20);
  if ( (_BYTE)v21 )
    __asan_report_store1(&this->exact_arrive, v17, v21);
  this->exact_arrive = exact_arrive;
};

// Line 9622: range 00000000113079AE-00000000113079D8
void __cdecl data::FixedAvatarRushMove::~FixedAvatarRushMove(data::FixedAvatarRushMove *const this)
{
  data::FixedAvatarRushMove::~FixedAvatarRushMove(this);
  operator delete(this, 0x100uLL);
};

// Line 9622: range 0000000011307918-00000000113079AD
void __cdecl data::FixedAvatarRushMove::~FixedAvatarRushMove(data::FixedAvatarRushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_move_collider);
  std::vector<std::string>::~vector(&this->animator_state_ids);
  data::DynamicFloat::~DynamicFloat(&this->time_range);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9627: range 00000000100B2744-00000000100B2754
const char *__cdecl data::FixedAvatarRushMove::getTypeName(const data::FixedAvatarRushMove *const this)
{
  return "FixedAvatarRushMove";
};

// Line 9628: range 00000000100B2756-00000000100B28F2
int32_t __cdecl data::FixedAvatarRushMove::getHashNum(const data::FixedAvatarRushMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FixedAvatarRushMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FixedAvatarRushMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9644: range 00000000111B6C16-00000000111B6C57
void __cdecl data::FixedAvatarRushMoveFactory::FixedAvatarRushMoveFactory(data::FixedAvatarRushMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarRushMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FixedAvatarRushMoveFactory = v2;
};

// Line 9652: range 00000000111B6F60-00000000111B701C
void __cdecl data::FixedAvatarFlashMove::FixedAvatarFlashMove(data::FixedAvatarFlashMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarFlashMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  std::vector<std::string>::vector(&this->animator_state_ids);
};

// Line 9652: range 00000000111B7466-00000000111B7533
void __cdecl data::FixedAvatarFlashMove::FixedAvatarFlashMove(
        data::FixedAvatarFlashMove *const this,
        const data::FixedAvatarFlashMove *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarFlashMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &a2->to_pos);
  std::vector<std::string>::vector(&this->animator_state_ids, &a2->animator_state_ids);
};

// Line 9660: range 00000000113078EC-0000000011307916
void __cdecl data::FixedAvatarFlashMove::~FixedAvatarFlashMove(data::FixedAvatarFlashMove *const this)
{
  data::FixedAvatarFlashMove::~FixedAvatarFlashMove(this);
  operator delete(this, 0xB0uLL);
};

// Line 9660: range 000000001130787A-00000000113078EB
void __cdecl data::FixedAvatarFlashMove::~FixedAvatarFlashMove(data::FixedAvatarFlashMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarFlashMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->animator_state_ids);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9665: range 00000000100B28F4-00000000100B2904
const char *__cdecl data::FixedAvatarFlashMove::getTypeName(const data::FixedAvatarFlashMove *const this)
{
  return "FixedAvatarFlashMove";
};

// Line 9666: range 00000000100B2906-00000000100B2AA2
int32_t __cdecl data::FixedAvatarFlashMove::getHashNum(const data::FixedAvatarFlashMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FixedAvatarFlashMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FixedAvatarFlashMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9682: range 00000000111B781C-00000000111B785D
void __cdecl data::FixedAvatarFlashMoveFactory::FixedAvatarFlashMoveFactory(
        data::FixedAvatarFlashMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixedAvatarFlashMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FixedAvatarFlashMoveFactory = v2;
};

// Line 9690: range 00000000111B7B66-00000000111B7CF1
void __cdecl data::GrapplingHookRushMove::GrapplingHookRushMove(data::GrapplingHookRushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::DynamicFloat::DynamicFloat(&this->speed, 10.0);
  data::DynamicFloat::DynamicFloat(&this->acc_speed, 0.0);
  data::DynamicFloat::DynamicFloat(&this->max_speed, 10.0);
  std::vector<std::string>::vector(&this->animator_state_ids);
  if ( *(char *)(((unsigned __int64)&this->is_in_air >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_in_air, v1, &this->is_in_air);
  this->is_in_air = 0;
};

// Line 9690: range 00000000111B8142-00000000111B8334
void __cdecl data::GrapplingHookRushMove::GrapplingHookRushMove(
        data::GrapplingHookRushMove *const this,
        const data::GrapplingHookRushMove *a2)
{
  int (**v2)(...); // rdx
  data::StringArray *p_animator_state_ids; // rsi
  bool is_in_air; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &a2->to_pos);
  data::DynamicFloat::DynamicFloat(&this->speed, &a2->speed);
  data::DynamicFloat::DynamicFloat(&this->acc_speed, &a2->acc_speed);
  data::DynamicFloat::DynamicFloat(&this->max_speed, &a2->max_speed);
  p_animator_state_ids = &a2->animator_state_ids;
  std::vector<std::string>::vector(&this->animator_state_ids, &a2->animator_state_ids);
  if ( *(char *)(((unsigned __int64)&a2->is_in_air >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_in_air, p_animator_state_ids, &a2->is_in_air);
  is_in_air = a2->is_in_air;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_in_air >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_animator_state_ids) = v5 != 0;
    __asan_report_store1(&this->is_in_air, p_animator_state_ids, &this->is_in_air);
  }
  this->is_in_air = is_in_air;
};

// Line 9702: range 000000001130784E-0000000011307878
void __cdecl data::GrapplingHookRushMove::~GrapplingHookRushMove(data::GrapplingHookRushMove *const this)
{
  data::GrapplingHookRushMove::~GrapplingHookRushMove(this);
  operator delete(this, 0x118uLL);
};

// Line 9702: range 00000000113077A6-000000001130784D
void __cdecl data::GrapplingHookRushMove::~GrapplingHookRushMove(data::GrapplingHookRushMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookRushMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->animator_state_ids);
  data::DynamicFloat::~DynamicFloat(&this->max_speed);
  data::DynamicFloat::~DynamicFloat(&this->acc_speed);
  data::DynamicFloat::~DynamicFloat(&this->speed);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9707: range 00000000100B2AA4-00000000100B2AB4
const char *__cdecl data::GrapplingHookRushMove::getTypeName(const data::GrapplingHookRushMove *const this)
{
  return "GrapplingHookRushMove";
};

// Line 9708: range 00000000100B2AB6-00000000100B2C52
int32_t __cdecl data::GrapplingHookRushMove::getHashNum(const data::GrapplingHookRushMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GrapplingHookRushMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GrapplingHookRushMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9724: range 00000000111B861E-00000000111B865F
void __cdecl data::GrapplingHookRushMoveFactory::GrapplingHookRushMoveFactory(
        data::GrapplingHookRushMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookRushMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GrapplingHookRushMoveFactory = v2;
};

// Line 9732: range 00000000111B8968-00000000111B8A45
void __cdecl data::AttachElementTypeResistance::AttachElementTypeResistance(
        data::AttachElementTypeResistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachElementTypeResistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->element_type, v1);
  }
  this->element_type = None_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration_ratio, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->duration_ratio = 0.0;
};

// Line 9732: range 00000000111B8E8E-00000000111B8FF7
void __cdecl data::AttachElementTypeResistance::AttachElementTypeResistance(
        data::AttachElementTypeResistance *const this,
        const data::AttachElementTypeResistance *a2)
{
  int (**v2)(...); // rdx
  data::ElementType element_type; // ecx
  char v4; // al
  float duration_ratio; // xmm0_4
  const data::AttachElementTypeResistance *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachElementTypeResistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->element_type);
  }
  element_type = a2->element_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->element_type, a2);
  }
  this->element_type = element_type;
  if ( *(_BYTE *)(((unsigned __int64)&v6->duration_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->duration_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->duration_ratio);
  }
  duration_ratio = v6->duration_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration_ratio, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->duration_ratio = duration_ratio;
};

// Line 9740: range 000000001130777A-00000000113077A4
void __cdecl data::AttachElementTypeResistance::~AttachElementTypeResistance(
        data::AttachElementTypeResistance *const this)
{
  data::AttachElementTypeResistance::~AttachElementTypeResistance(this);
  operator delete(this, 0x90uLL);
};

// Line 9740: range 000000001130772C-0000000011307779
void __cdecl data::AttachElementTypeResistance::~AttachElementTypeResistance(
        data::AttachElementTypeResistance *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachElementTypeResistance + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9745: range 00000000100B2C54-00000000100B2C64
const char *__cdecl data::AttachElementTypeResistance::getTypeName(const data::AttachElementTypeResistance *const this)
{
  return "AttachElementTypeResistance";
};

// Line 9746: range 00000000100B2C66-00000000100B2E02
int32_t __cdecl data::AttachElementTypeResistance::getHashNum(const data::AttachElementTypeResistance *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachElementTypeResistance::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachElementTypeResistance",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9762: range 00000000111B92E0-00000000111B9321
void __cdecl data::AttachElementTypeResistanceFactory::AttachElementTypeResistanceFactory(
        data::AttachElementTypeResistanceFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachElementTypeResistanceFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachElementTypeResistanceFactory = v2;
};

// Line 9770: range 00000000111B962A-00000000111B9729
void __cdecl data::AddGlobalValueToTarget::AddGlobalValueToTarget(data::AddGlobalValueToTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValueToTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->src_target, v1);
  }
  this->src_target = Caster;
  if ( *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->dst_target, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->dst_target = Target;
  std::string::basic_string(&this->src_key);
  std::string::basic_string(&this->dst_key);
};

// Line 9770: range 00000000111B9B72-00000000111B9D52
void __cdecl data::AddGlobalValueToTarget::AddGlobalValueToTarget(
        data::AddGlobalValueToTarget *const this,
        const data::AddGlobalValueToTarget *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting src_target; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::AbilityTargetting dst_target; // ecx
  char v7; // dl
  const data::AddGlobalValueToTarget *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValueToTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->src_target);
  }
  src_target = a2->src_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->src_target, a2);
  }
  this->src_target = src_target;
  v5 = (((_BYTE)v8 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->dst_target >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->dst_target >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->dst_target);
  }
  dst_target = v8->dst_target;
  v7 = *(_BYTE *)(((unsigned __int64)&this->dst_target >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->dst_target, v5);
  }
  this->dst_target = dst_target;
  std::string::basic_string(&this->src_key, &v8->src_key);
  std::string::basic_string(&this->dst_key, &v8->dst_key);
};

// Line 9780: range 0000000011307700-000000001130772A
void __cdecl data::AddGlobalValueToTarget::~AddGlobalValueToTarget(data::AddGlobalValueToTarget *const this)
{
  data::AddGlobalValueToTarget::~AddGlobalValueToTarget(this);
  operator delete(this, 0xD0uLL);
};

// Line 9780: range 000000001130768E-00000000113076FF
void __cdecl data::AddGlobalValueToTarget::~AddGlobalValueToTarget(data::AddGlobalValueToTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValueToTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->dst_key);
  std::string::~string(&this->src_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9785: range 00000000100B2E04-00000000100B2E14
const char *__cdecl data::AddGlobalValueToTarget::getTypeName(const data::AddGlobalValueToTarget *const this)
{
  return "AddGlobalValueToTarget";
};

// Line 9786: range 00000000100B2E16-00000000100B2FB2
int32_t __cdecl data::AddGlobalValueToTarget::getHashNum(const data::AddGlobalValueToTarget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddGlobalValueToTarget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddGlobalValueToTarget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9802: range 00000000111BA03C-00000000111BA07D
void __cdecl data::AddGlobalValueToTargetFactory::AddGlobalValueToTargetFactory(
        data::AddGlobalValueToTargetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddGlobalValueToTargetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddGlobalValueToTargetFactory = v2;
};

// Line 9810: range 00000000111BA386-00000000111BA3E5
void __cdecl data::ReviveElemEnergy::ReviveElemEnergy(data::ReviveElemEnergy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value);
};

// Line 9810: range 00000000111BA828-00000000111BA8C3
void __cdecl data::ReviveElemEnergy::ReviveElemEnergy(
        data::ReviveElemEnergy *const this,
        const data::ReviveElemEnergy *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 9817: range 0000000011307602-0000000011307661
void __cdecl data::ReviveElemEnergy::~ReviveElemEnergy(data::ReviveElemEnergy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9817: range 0000000011307662-000000001130768C
void __cdecl data::ReviveElemEnergy::~ReviveElemEnergy(data::ReviveElemEnergy *const this)
{
  data::ReviveElemEnergy::~ReviveElemEnergy(this);
  operator delete(this, 0xA8uLL);
};

// Line 9822: range 00000000100B2FB4-00000000100B2FC4
const char *__cdecl data::ReviveElemEnergy::getTypeName(const data::ReviveElemEnergy *const this)
{
  return "ReviveElemEnergy";
};

// Line 9823: range 00000000100B2FC6-00000000100B3162
int32_t __cdecl data::ReviveElemEnergy::getHashNum(const data::ReviveElemEnergy *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReviveElemEnergy::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReviveElemEnergy",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9839: range 00000000111BABAC-00000000111BABED
void __cdecl data::ReviveElemEnergyFactory::ReviveElemEnergyFactory(data::ReviveElemEnergyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReviveElemEnergyFactory = v2;
};

// Line 9847: range 00000000111BAEF6-00000000111BAF98
void __cdecl data::AddClimateMeter::AddClimateMeter(data::AddClimateMeter *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddClimateMeter + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->climate_type, v1);
  }
  this->climate_type = Normal;
  data::DynamicFloat::DynamicFloat(&this->value);
};

// Line 9847: range 00000000111BB3E2-00000000111BB4FC
void __cdecl data::AddClimateMeter::AddClimateMeter(data::AddClimateMeter *const this, const data::AddClimateMeter *a2)
{
  int (**v2)(...); // rdx
  data::JsonClimateType climate_type; // ecx
  char v4; // al
  const data::AddClimateMeter *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddClimateMeter + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->climate_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->climate_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->climate_type);
  }
  climate_type = a2->climate_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->climate_type, a2);
  }
  this->climate_type = climate_type;
  data::DynamicFloat::DynamicFloat(&this->value, &v5->value);
};

// Line 9855: range 00000000113075D6-0000000011307600
void __cdecl data::AddClimateMeter::~AddClimateMeter(data::AddClimateMeter *const this)
{
  data::AddClimateMeter::~AddClimateMeter(this);
  operator delete(this, 0xB0uLL);
};

// Line 9855: range 0000000011307576-00000000113075D5
void __cdecl data::AddClimateMeter::~AddClimateMeter(data::AddClimateMeter *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddClimateMeter + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9860: range 00000000100B3164-00000000100B3174
const char *__cdecl data::AddClimateMeter::getTypeName(const data::AddClimateMeter *const this)
{
  return "AddClimateMeter";
};

// Line 9861: range 00000000100B3176-00000000100B3312
int32_t __cdecl data::AddClimateMeter::getHashNum(const data::AddClimateMeter *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddClimateMeter::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddClimateMeter",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9877: range 00000000111BB7E6-00000000111BB827
void __cdecl data::AddClimateMeterFactory::AddClimateMeterFactory(data::AddClimateMeterFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddClimateMeterFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddClimateMeterFactory = v2;
};

// Line 9885: range 00000000111BBB30-00000000111BBBC0
void __cdecl data::ResetClimateMeter::ResetClimateMeter(data::ResetClimateMeter *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ResetClimateMeter + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->climate_type, v1);
  }
  this->climate_type = Normal;
};

// Line 9885: range 00000000111BC00A-00000000111BC0E1
void __cdecl data::ResetClimateMeter::ResetClimateMeter(
        data::ResetClimateMeter *const this,
        const data::ResetClimateMeter *a2)
{
  int (**v2)(...); // rdx
  data::JsonClimateType climate_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResetClimateMeter + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->climate_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->climate_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->climate_type);
  }
  climate_type = a2->climate_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->climate_type, a2);
  }
  this->climate_type = climate_type;
};

// Line 9892: range 00000000113074FC-0000000011307549
void __cdecl data::ResetClimateMeter::~ResetClimateMeter(data::ResetClimateMeter *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetClimateMeter + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9892: range 000000001130754A-0000000011307574
void __cdecl data::ResetClimateMeter::~ResetClimateMeter(data::ResetClimateMeter *const this)
{
  data::ResetClimateMeter::~ResetClimateMeter(this);
  operator delete(this, 0x90uLL);
};

// Line 9897: range 00000000100B3314-00000000100B3324
const char *__cdecl data::ResetClimateMeter::getTypeName(const data::ResetClimateMeter *const this)
{
  return "ResetClimateMeter";
};

// Line 9898: range 00000000100B3326-00000000100B34C2
int32_t __cdecl data::ResetClimateMeter::getHashNum(const data::ResetClimateMeter *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResetClimateMeter::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResetClimateMeter",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9914: range 00000000111BC3CA-00000000111BC40B
void __cdecl data::ResetClimateMeterFactory::ResetClimateMeterFactory(data::ResetClimateMeterFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResetClimateMeterFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResetClimateMeterFactory = v2;
};

// Line 9922: range 00000000111BC714-00000000111BC7A4
void __cdecl data::FireGainCrystalSeedEvent::FireGainCrystalSeedEvent(data::FireGainCrystalSeedEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireGainCrystalSeedEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->element_type, v1);
  }
  this->element_type = None_0;
};

// Line 9922: range 00000000111BCBEE-00000000111BCCC5
void __cdecl data::FireGainCrystalSeedEvent::FireGainCrystalSeedEvent(
        data::FireGainCrystalSeedEvent *const this,
        const data::FireGainCrystalSeedEvent *a2)
{
  int (**v2)(...); // rdx
  data::ElementType element_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireGainCrystalSeedEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->element_type);
  }
  element_type = a2->element_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->element_type, a2);
  }
  this->element_type = element_type;
};

// Line 9929: range 00000000113074D0-00000000113074FA
void __cdecl data::FireGainCrystalSeedEvent::~FireGainCrystalSeedEvent(data::FireGainCrystalSeedEvent *const this)
{
  data::FireGainCrystalSeedEvent::~FireGainCrystalSeedEvent(this);
  operator delete(this, 0x90uLL);
};

// Line 9929: range 0000000011307482-00000000113074CF
void __cdecl data::FireGainCrystalSeedEvent::~FireGainCrystalSeedEvent(data::FireGainCrystalSeedEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireGainCrystalSeedEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9934: range 00000000100B34C4-00000000100B34D4
const char *__cdecl data::FireGainCrystalSeedEvent::getTypeName(const data::FireGainCrystalSeedEvent *const this)
{
  return "FireGainCrystalSeedEvent";
};

// Line 9935: range 00000000100B34D6-00000000100B3672
int32_t __cdecl data::FireGainCrystalSeedEvent::getHashNum(const data::FireGainCrystalSeedEvent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireGainCrystalSeedEvent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireGainCrystalSeedEvent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9951: range 00000000111BCFAE-00000000111BCFEF
void __cdecl data::FireGainCrystalSeedEventFactory::FireGainCrystalSeedEventFactory(
        data::FireGainCrystalSeedEventFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireGainCrystalSeedEventFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireGainCrystalSeedEventFactory = v2;
};

// Line 9959: range 00000000111BD2F8-00000000111BD385
void __cdecl data::EnableMonsterMoveOnWater::EnableMonsterMoveOnWater(data::EnableMonsterMoveOnWater *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableMonsterMoveOnWater + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 9959: range 00000000111BD7CE-00000000111BD8A6
void __cdecl data::EnableMonsterMoveOnWater::EnableMonsterMoveOnWater(
        data::EnableMonsterMoveOnWater *const this,
        const data::EnableMonsterMoveOnWater *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableMonsterMoveOnWater + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 9966: range 0000000011307408-0000000011307455
void __cdecl data::EnableMonsterMoveOnWater::~EnableMonsterMoveOnWater(data::EnableMonsterMoveOnWater *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableMonsterMoveOnWater + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 9966: range 0000000011307456-0000000011307480
void __cdecl data::EnableMonsterMoveOnWater::~EnableMonsterMoveOnWater(data::EnableMonsterMoveOnWater *const this)
{
  data::EnableMonsterMoveOnWater::~EnableMonsterMoveOnWater(this);
  operator delete(this, 0x90uLL);
};

// Line 9971: range 00000000100B3674-00000000100B3684
const char *__cdecl data::EnableMonsterMoveOnWater::getTypeName(const data::EnableMonsterMoveOnWater *const this)
{
  return "EnableMonsterMoveOnWater";
};

// Line 9972: range 00000000100B3686-00000000100B3822
int32_t __cdecl data::EnableMonsterMoveOnWater::getHashNum(const data::EnableMonsterMoveOnWater *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableMonsterMoveOnWater::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableMonsterMoveOnWater",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9988: range 00000000111BDB90-00000000111BDBD1
void __cdecl data::EnableMonsterMoveOnWaterFactory::EnableMonsterMoveOnWaterFactory(
        data::EnableMonsterMoveOnWaterFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableMonsterMoveOnWaterFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableMonsterMoveOnWaterFactory = v2;
};

// Line 9996: range 00000000111BDEDA-00000000111BDF67
void __cdecl data::EnableAvatarMoveOnWater::EnableAvatarMoveOnWater(data::EnableAvatarMoveOnWater *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarMoveOnWater + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 9996: range 00000000111BE3B0-00000000111BE488
void __cdecl data::EnableAvatarMoveOnWater::EnableAvatarMoveOnWater(
        data::EnableAvatarMoveOnWater *const this,
        const data::EnableAvatarMoveOnWater *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarMoveOnWater + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 10003: range 000000001130738E-00000000113073DB
void __cdecl data::EnableAvatarMoveOnWater::~EnableAvatarMoveOnWater(data::EnableAvatarMoveOnWater *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarMoveOnWater + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10003: range 00000000113073DC-0000000011307406
void __cdecl data::EnableAvatarMoveOnWater::~EnableAvatarMoveOnWater(data::EnableAvatarMoveOnWater *const this)
{
  data::EnableAvatarMoveOnWater::~EnableAvatarMoveOnWater(this);
  operator delete(this, 0x90uLL);
};

// Line 10008: range 00000000100B3824-00000000100B3834
const char *__cdecl data::EnableAvatarMoveOnWater::getTypeName(const data::EnableAvatarMoveOnWater *const this)
{
  return "EnableAvatarMoveOnWater";
};

// Line 10009: range 00000000100B3836-00000000100B39D2
int32_t __cdecl data::EnableAvatarMoveOnWater::getHashNum(const data::EnableAvatarMoveOnWater *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableAvatarMoveOnWater::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableAvatarMoveOnWater",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10025: range 00000000111BE772-00000000111BE7B3
void __cdecl data::EnableAvatarMoveOnWaterFactory::EnableAvatarMoveOnWaterFactory(
        data::EnableAvatarMoveOnWaterFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableAvatarMoveOnWaterFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableAvatarMoveOnWaterFactory = v2;
};

// Line 10033: range 00000000111BEABC-00000000111BEBDC
void __cdecl data::ChangeEnviroWeather::ChangeEnviroWeather(data::ChangeEnviroWeather *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeEnviroWeather + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->area_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->area_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->area_id, v1);
  }
  this->area_id = 0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->climate_type, v3);
  }
  this->climate_type = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trans_duration, v3);
  }
  this->trans_duration = 0.0;
};

// Line 10033: range 00000000111BF02E-00000000111BF216
void __cdecl data::ChangeEnviroWeather::ChangeEnviroWeather(
        data::ChangeEnviroWeather *const this,
        const data::ChangeEnviroWeather *a2)
{
  int (**v2)(...); // rdx
  uint32_t area_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t climate_type; // ecx
  char v7; // dl
  float trans_duration; // xmm0_4
  const data::ChangeEnviroWeather *v9; // [rsp+0h] [rbp-10h]

  v9 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeEnviroWeather + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->area_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->area_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->area_id);
  }
  area_id = a2->area_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->area_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->area_id, a2);
  }
  this->area_id = area_id;
  v5 = (((_BYTE)v9 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v9->climate_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v9 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->climate_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v9->climate_type);
  }
  climate_type = v9->climate_type;
  v7 = *(_BYTE *)(((unsigned __int64)&this->climate_type >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v7 != 0;
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
    __asan_report_store4(&this->climate_type, v5);
  this->climate_type = climate_type;
  if ( *(_BYTE *)(((unsigned __int64)&v9->trans_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v9->trans_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v9->trans_duration);
  }
  trans_duration = v9->trans_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trans_duration, v5);
  }
  this->trans_duration = trans_duration;
};

// Line 10042: range 0000000011307314-0000000011307361
void __cdecl data::ChangeEnviroWeather::~ChangeEnviroWeather(data::ChangeEnviroWeather *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeEnviroWeather + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10042: range 0000000011307362-000000001130738C
void __cdecl data::ChangeEnviroWeather::~ChangeEnviroWeather(data::ChangeEnviroWeather *const this)
{
  data::ChangeEnviroWeather::~ChangeEnviroWeather(this);
  operator delete(this, 0x98uLL);
};

// Line 10047: range 00000000100B39D4-00000000100B39E4
const char *__cdecl data::ChangeEnviroWeather::getTypeName(const data::ChangeEnviroWeather *const this)
{
  return "ChangeEnviroWeather";
};

// Line 10048: range 00000000100B39E6-00000000100B3B82
int32_t __cdecl data::ChangeEnviroWeather::getHashNum(const data::ChangeEnviroWeather *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeEnviroWeather::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeEnviroWeather",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10064: range 00000000111BF500-00000000111BF541
void __cdecl data::ChangeEnviroWeatherFactory::ChangeEnviroWeatherFactory(data::ChangeEnviroWeatherFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeEnviroWeatherFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeEnviroWeatherFactory = v2;
};

// Line 10072: range 00000000111BF84A-00000000111BF8DC
void __cdecl data::SyncEntityPositionByNormalizedTime::SyncEntityPositionByNormalizedTime(
        data::SyncEntityPositionByNormalizedTime *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SyncEntityPositionByNormalizedTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalized_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->normalized_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->normalized_time, v1);
  }
  this->normalized_time = 0.0;
};

// Line 10072: range 00000000111BFD26-00000000111BFE00
void __cdecl data::SyncEntityPositionByNormalizedTime::SyncEntityPositionByNormalizedTime(
        data::SyncEntityPositionByNormalizedTime *const this,
        const data::SyncEntityPositionByNormalizedTime *a2)
{
  int (**v2)(...); // rdx
  float normalized_time; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SyncEntityPositionByNormalizedTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->normalized_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->normalized_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->normalized_time);
  }
  normalized_time = a2->normalized_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalized_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->normalized_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->normalized_time, a2);
  }
  this->normalized_time = normalized_time;
};

// Line 10079: range 000000001130729A-00000000113072E7
void __cdecl data::SyncEntityPositionByNormalizedTime::~SyncEntityPositionByNormalizedTime(
        data::SyncEntityPositionByNormalizedTime *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SyncEntityPositionByNormalizedTime + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10079: range 00000000113072E8-0000000011307312
void __cdecl data::SyncEntityPositionByNormalizedTime::~SyncEntityPositionByNormalizedTime(
        data::SyncEntityPositionByNormalizedTime *const this)
{
  data::SyncEntityPositionByNormalizedTime::~SyncEntityPositionByNormalizedTime(this);
  operator delete(this, 0x90uLL);
};

// Line 10084: range 00000000100B3B84-00000000100B3B94
const char *__cdecl data::SyncEntityPositionByNormalizedTime::getTypeName(
        const data::SyncEntityPositionByNormalizedTime *const this)
{
  return "SyncEntityPositionByNormalizedTime";
};

// Line 10085: range 00000000100B3B96-00000000100B3D32
int32_t __cdecl data::SyncEntityPositionByNormalizedTime::getHashNum(
        const data::SyncEntityPositionByNormalizedTime *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SyncEntityPositionByNormalizedTime::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SyncEntityPositionByNormalizedTime",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10101: range 00000000111C00EA-00000000111C012B
void __cdecl data::SyncEntityPositionByNormalizedTimeFactory::SyncEntityPositionByNormalizedTimeFactory(
        data::SyncEntityPositionByNormalizedTimeFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SyncEntityPositionByNormalizedTimeFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SyncEntityPositionByNormalizedTimeFactory = v2;
};

// Line 10109: range 00000000111C0434-00000000111C04D6
void __cdecl data::EquipAffixStart::EquipAffixStart(data::EquipAffixStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EquipAffixStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->cd);
  if ( *(_BYTE *)(((unsigned __int64)&this->equip_affix_data_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->equip_affix_data_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->equip_affix_data_id, v1);
  }
  this->equip_affix_data_id = 0;
};

// Line 10109: range 00000000111C0920-00000000111C0A3A
void __cdecl data::EquipAffixStart::EquipAffixStart(data::EquipAffixStart *const this, const data::EquipAffixStart *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_cd; // rsi
  uint32_t equip_affix_data_id; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EquipAffixStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_cd = &a2->cd;
  data::DynamicFloat::DynamicFloat(&this->cd, &a2->cd);
  if ( *(_BYTE *)(((unsigned __int64)&a2->equip_affix_data_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->equip_affix_data_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->equip_affix_data_id);
  }
  equip_affix_data_id = a2->equip_affix_data_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->equip_affix_data_id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_cd) = v5 != 0;
    __asan_report_store4(&this->equip_affix_data_id, p_cd);
  }
  this->equip_affix_data_id = equip_affix_data_id;
};

// Line 10117: range 000000001130726E-0000000011307298
void __cdecl data::EquipAffixStart::~EquipAffixStart(data::EquipAffixStart *const this)
{
  data::EquipAffixStart::~EquipAffixStart(this);
  operator delete(this, 0xB0uLL);
};

// Line 10117: range 000000001130720E-000000001130726D
void __cdecl data::EquipAffixStart::~EquipAffixStart(data::EquipAffixStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EquipAffixStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->cd);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10122: range 00000000100B3D34-00000000100B3D44
const char *__cdecl data::EquipAffixStart::getTypeName(const data::EquipAffixStart *const this)
{
  return "EquipAffixStart";
};

// Line 10123: range 00000000100B3D46-00000000100B3EE2
int32_t __cdecl data::EquipAffixStart::getHashNum(const data::EquipAffixStart *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EquipAffixStart::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EquipAffixStart",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10139: range 00000000111C0D24-00000000111C0D65
void __cdecl data::EquipAffixStartFactory::EquipAffixStartFactory(data::EquipAffixStartFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EquipAffixStartFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EquipAffixStartFactory = v2;
};

// Line 10147: range 00000000111C106E-00000000111C10FE
void __cdecl data::ShowExtraAbility::ShowExtraAbility(data::ShowExtraAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ShowExtraAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
};

// Line 10147: range 00000000111C1548-00000000111C161F
void __cdecl data::ShowExtraAbility::ShowExtraAbility(
        data::ShowExtraAbility *const this,
        const data::ShowExtraAbility *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShowExtraAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
};

// Line 10154: range 0000000011307194-00000000113071E1
void __cdecl data::ShowExtraAbility::~ShowExtraAbility(data::ShowExtraAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowExtraAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10154: range 00000000113071E2-000000001130720C
void __cdecl data::ShowExtraAbility::~ShowExtraAbility(data::ShowExtraAbility *const this)
{
  data::ShowExtraAbility::~ShowExtraAbility(this);
  operator delete(this, 0x90uLL);
};

// Line 10159: range 00000000100B3EE4-00000000100B3EF4
const char *__cdecl data::ShowExtraAbility::getTypeName(const data::ShowExtraAbility *const this)
{
  return "ShowExtraAbility";
};

// Line 10160: range 00000000100B3EF6-00000000100B4092
int32_t __cdecl data::ShowExtraAbility::getHashNum(const data::ShowExtraAbility *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShowExtraAbility::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShowExtraAbility",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10176: range 00000000111C1908-00000000111C1949
void __cdecl data::ShowExtraAbilityFactory::ShowExtraAbilityFactory(data::ShowExtraAbilityFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowExtraAbilityFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShowExtraAbilityFactory = v2;
};

// Line 10184: range 00000000111C1C52-00000000111C1CDF
void __cdecl data::SetExtraAbilityEnable::SetExtraAbilityEnable(data::SetExtraAbilityEnable *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 10184: range 00000000111C2128-00000000111C2200
void __cdecl data::SetExtraAbilityEnable::SetExtraAbilityEnable(
        data::SetExtraAbilityEnable *const this,
        const data::SetExtraAbilityEnable *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 10191: range 000000001130711A-0000000011307167
void __cdecl data::SetExtraAbilityEnable::~SetExtraAbilityEnable(data::SetExtraAbilityEnable *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityEnable + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10191: range 0000000011307168-0000000011307192
void __cdecl data::SetExtraAbilityEnable::~SetExtraAbilityEnable(data::SetExtraAbilityEnable *const this)
{
  data::SetExtraAbilityEnable::~SetExtraAbilityEnable(this);
  operator delete(this, 0x90uLL);
};

// Line 10196: range 00000000100B4094-00000000100B40A4
const char *__cdecl data::SetExtraAbilityEnable::getTypeName(const data::SetExtraAbilityEnable *const this)
{
  return "SetExtraAbilityEnable";
};

// Line 10197: range 00000000100B40A6-00000000100B4242
int32_t __cdecl data::SetExtraAbilityEnable::getHashNum(const data::SetExtraAbilityEnable *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetExtraAbilityEnable::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetExtraAbilityEnable",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10213: range 00000000111C24EA-00000000111C252B
void __cdecl data::SetExtraAbilityEnableFactory::SetExtraAbilityEnableFactory(
        data::SetExtraAbilityEnableFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityEnableFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetExtraAbilityEnableFactory = v2;
};

// Line 10236: range 00000000111C2994-00000000111C2A24
void __cdecl data::SetExtraAbilityState::SetExtraAbilityState(data::SetExtraAbilityState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->state, v1);
  }
  this->state = Start;
};

// Line 10236: range 00000000111C2E6E-00000000111C2F45
void __cdecl data::SetExtraAbilityState::SetExtraAbilityState(
        data::SetExtraAbilityState *const this,
        const data::SetExtraAbilityState *a2)
{
  int (**v2)(...); // rdx
  data::ExtraAbilityState state; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->state);
  }
  state = a2->state;
  v4 = *(_BYTE *)(((unsigned __int64)&this->state >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->state, a2);
  }
  this->state = state;
};

// Line 10243: range 00000000113070A0-00000000113070ED
void __cdecl data::SetExtraAbilityState::~SetExtraAbilityState(data::SetExtraAbilityState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10243: range 00000000113070EE-0000000011307118
void __cdecl data::SetExtraAbilityState::~SetExtraAbilityState(data::SetExtraAbilityState *const this)
{
  data::SetExtraAbilityState::~SetExtraAbilityState(this);
  operator delete(this, 0x90uLL);
};

// Line 10248: range 00000000100B4244-00000000100B4254
const char *__cdecl data::SetExtraAbilityState::getTypeName(const data::SetExtraAbilityState *const this)
{
  return "SetExtraAbilityState";
};

// Line 10249: range 00000000100B4256-00000000100B43F2
int32_t __cdecl data::SetExtraAbilityState::getHashNum(const data::SetExtraAbilityState *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetExtraAbilityState::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetExtraAbilityState",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10265: range 00000000111C322E-00000000111C326F
void __cdecl data::SetExtraAbilityStateFactory::SetExtraAbilityStateFactory(
        data::SetExtraAbilityStateFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetExtraAbilityStateFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetExtraAbilityStateFactory = v2;
};

// Line 10273: range 00000000111C3578-00000000111C35C5
void __cdecl data::UpdateUidValue::UpdateUidValue(data::UpdateUidValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::UpdateUidValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10273: range 00000000111C3A14-00000000111C3A6C
void __cdecl data::UpdateUidValue::UpdateUidValue(data::UpdateUidValue *const this, const data::UpdateUidValue *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UpdateUidValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10279: range 0000000011307026-0000000011307073
void __cdecl data::UpdateUidValue::~UpdateUidValue(data::UpdateUidValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UpdateUidValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10279: range 0000000011307074-000000001130709E
void __cdecl data::UpdateUidValue::~UpdateUidValue(data::UpdateUidValue *const this)
{
  data::UpdateUidValue::~UpdateUidValue(this);
  operator delete(this, 0x88uLL);
};

// Line 10284: range 00000000100B43F4-00000000100B4404
const char *__cdecl data::UpdateUidValue::getTypeName(const data::UpdateUidValue *const this)
{
  return "UpdateUidValue";
};

// Line 10285: range 00000000100B4406-00000000100B45A2
int32_t __cdecl data::UpdateUidValue::getHashNum(const data::UpdateUidValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UpdateUidValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UpdateUidValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10301: range 00000000111C3D56-00000000111C3D97
void __cdecl data::UpdateUidValueFactory::UpdateUidValueFactory(data::UpdateUidValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UpdateUidValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UpdateUidValueFactory = v2;
};

// Line 10326: range 00000000111C4200-00000000111C431B
void __cdecl data::ForceUseSkillSuccess::ForceUseSkillSuccess(data::ForceUseSkillSuccess *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ForceUseSkillSuccess + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->type, v3);
  }
  this->type = None_44;
  if ( *(char *)(((unsigned __int64)&this->immediately >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->immediately, v3, &this->immediately);
  this->immediately = 1;
};

// Line 10326: range 00000000111C476C-00000000111C4952
void __cdecl data::ForceUseSkillSuccess::ForceUseSkillSuccess(
        data::ForceUseSkillSuccess *const this,
        const data::ForceUseSkillSuccess *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::UseSkillType type; // ecx
  char v7; // dl
  bool immediately; // cl
  char v9; // al
  const data::ForceUseSkillSuccess *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ForceUseSkillSuccess + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  v5 = (((_BYTE)v10 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v10->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v10 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v10->type);
  }
  type = v10->type;
  v7 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v7 != 0;
  if ( v7 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v7 )
    __asan_report_store4(&this->type, v5);
  this->type = type;
  if ( *(char *)(((unsigned __int64)&v10->immediately >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v10->immediately, v5, &v10->immediately);
  immediately = v10->immediately;
  v9 = *(_BYTE *)(((unsigned __int64)&this->immediately >> 3) + 0x7FFF8000);
  if ( v9 < 0 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store1(&this->immediately, v5, &this->immediately);
  }
  this->immediately = immediately;
};

// Line 10335: range 0000000011306FAC-0000000011306FF9
void __cdecl data::ForceUseSkillSuccess::~ForceUseSkillSuccess(data::ForceUseSkillSuccess *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceUseSkillSuccess + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10335: range 0000000011306FFA-0000000011307024
void __cdecl data::ForceUseSkillSuccess::~ForceUseSkillSuccess(data::ForceUseSkillSuccess *const this)
{
  data::ForceUseSkillSuccess::~ForceUseSkillSuccess(this);
  operator delete(this, 0x98uLL);
};

// Line 10340: range 00000000100B45A4-00000000100B45B4
const char *__cdecl data::ForceUseSkillSuccess::getTypeName(const data::ForceUseSkillSuccess *const this)
{
  return "ForceUseSkillSuccess";
};

// Line 10341: range 00000000100B45B6-00000000100B4752
int32_t __cdecl data::ForceUseSkillSuccess::getHashNum(const data::ForceUseSkillSuccess *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ForceUseSkillSuccess::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ForceUseSkillSuccess",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10357: range 00000000111C4C3C-00000000111C4C7D
void __cdecl data::ForceUseSkillSuccessFactory::ForceUseSkillSuccessFactory(
        data::ForceUseSkillSuccessFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceUseSkillSuccessFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ForceUseSkillSuccessFactory = v2;
};

// Line 10387: range 00000000111C50E6-00000000111C52D9
void __cdecl data::ServerLuaCall::ServerLuaCall(data::ServerLuaCall *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ServerLuaCall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->lua_call_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lua_call_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lua_call_type, v1);
  }
  this->lua_call_type = Gadget_1;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_target, v3, v4);
  this->is_target = 0;
  std::vector<unsigned int>::vector(&this->call_param_list);
  std::string::basic_string(&this->func_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->param_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->param_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->param_num, v3);
  }
  this->param_num = 0;
  data::DynamicFloat::DynamicFloat(&this->param1, 0.0);
  data::DynamicFloat::DynamicFloat(&this->param2, 0.0);
  data::DynamicFloat::DynamicFloat(&this->param3, 0.0);
};

// Line 10387: range 00000000111C5722-00000000111C5A21
void __cdecl data::ServerLuaCall::ServerLuaCall(data::ServerLuaCall *const this, const data::ServerLuaCall *a2)
{
  int (**v2)(...); // rdx
  data::LuaCallType lua_call_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool is_target; // cl
  char v8; // dl
  __int64 v9; // rdx
  std::string *p_func_name; // rsi
  uint32_t param_num; // ecx
  char v12; // al
  const data::ServerLuaCall *v13; // [rsp+0h] [rbp-20h]

  v13 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ServerLuaCall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lua_call_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->lua_call_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->lua_call_type);
  }
  lua_call_type = a2->lua_call_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->lua_call_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->lua_call_type, a2);
  }
  this->lua_call_type = lua_call_type;
  v5 = ((_BYTE)v13 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v13->is_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v13->is_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v13->is_target, v5, v6);
  is_target = v13->is_target;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_target >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_target, v5, v9);
  this->is_target = is_target;
  std::vector<unsigned int>::vector(&this->call_param_list, &v13->call_param_list);
  p_func_name = &v13->func_name;
  std::string::basic_string(&this->func_name, &v13->func_name);
  if ( *(_BYTE *)(((unsigned __int64)&v13->param_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v13->param_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v13->param_num);
  }
  param_num = v13->param_num;
  v12 = *(_BYTE *)(((unsigned __int64)&this->param_num >> 3) + 0x7FFF8000);
  if ( v12 != 0 && v12 <= 3 )
  {
    LOBYTE(p_func_name) = v12 != 0;
    __asan_report_store4(&this->param_num, p_func_name);
  }
  this->param_num = param_num;
  data::DynamicFloat::DynamicFloat(&this->param1, &v13->param1);
  data::DynamicFloat::DynamicFloat(&this->param2, &v13->param2);
  data::DynamicFloat::DynamicFloat(&this->param3, &v13->param3);
};

// Line 10401: range 0000000011306F80-0000000011306FAA
void __cdecl data::ServerLuaCall::~ServerLuaCall(data::ServerLuaCall *const this)
{
  data::ServerLuaCall::~ServerLuaCall(this);
  operator delete(this, 0x130uLL);
};

// Line 10401: range 0000000011306ED8-0000000011306F7F
void __cdecl data::ServerLuaCall::~ServerLuaCall(data::ServerLuaCall *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerLuaCall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->param3);
  data::DynamicFloat::~DynamicFloat(&this->param2);
  data::DynamicFloat::~DynamicFloat(&this->param1);
  std::string::~string(&this->func_name);
  std::vector<unsigned int>::~vector(&this->call_param_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10406: range 00000000100B4754-00000000100B4764
const char *__cdecl data::ServerLuaCall::getTypeName(const data::ServerLuaCall *const this)
{
  return "ServerLuaCall";
};

// Line 10407: range 00000000100B4766-00000000100B4902
int32_t __cdecl data::ServerLuaCall::getHashNum(const data::ServerLuaCall *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ServerLuaCall::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ServerLuaCall",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10423: range 00000000111C5D0A-00000000111C5D4B
void __cdecl data::ServerLuaCallFactory::ServerLuaCallFactory(data::ServerLuaCallFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerLuaCallFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ServerLuaCallFactory = v2;
};

// Line 10431: range 00000000111C6054-00000000111C60E4
void __cdecl data::DoWidgetSystemAction::DoWidgetSystemAction(data::DoWidgetSystemAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DoWidgetSystemAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->widget_event >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->widget_event >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->widget_event, v1);
  }
  this->widget_event = 0;
};

// Line 10431: range 00000000111C652E-00000000111C6605
void __cdecl data::DoWidgetSystemAction::DoWidgetSystemAction(
        data::DoWidgetSystemAction *const this,
        const data::DoWidgetSystemAction *a2)
{
  int (**v2)(...); // rdx
  data::WidgetEventType widget_event; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoWidgetSystemAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->widget_event >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->widget_event >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->widget_event);
  }
  widget_event = a2->widget_event;
  v4 = *(_BYTE *)(((unsigned __int64)&this->widget_event >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->widget_event, a2);
  }
  this->widget_event = widget_event;
};

// Line 10438: range 0000000011306EAC-0000000011306ED6
void __cdecl data::DoWidgetSystemAction::~DoWidgetSystemAction(data::DoWidgetSystemAction *const this)
{
  data::DoWidgetSystemAction::~DoWidgetSystemAction(this);
  operator delete(this, 0x90uLL);
};

// Line 10438: range 0000000011306E5E-0000000011306EAB
void __cdecl data::DoWidgetSystemAction::~DoWidgetSystemAction(data::DoWidgetSystemAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoWidgetSystemAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10443: range 00000000100B4904-00000000100B4914
const char *__cdecl data::DoWidgetSystemAction::getTypeName(const data::DoWidgetSystemAction *const this)
{
  return "DoWidgetSystemAction";
};

// Line 10444: range 00000000100B4916-00000000100B4AB2
int32_t __cdecl data::DoWidgetSystemAction::getHashNum(const data::DoWidgetSystemAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoWidgetSystemAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoWidgetSystemAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10460: range 00000000111C68EE-00000000111C692F
void __cdecl data::DoWidgetSystemActionFactory::DoWidgetSystemActionFactory(
        data::DoWidgetSystemActionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoWidgetSystemActionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoWidgetSystemActionFactory = v2;
};

// Line 10468: range 00000000111C6C38-00000000111C6C97
void __cdecl data::ChangeGadgetUIInteractHint::ChangeGadgetUIInteractHint(data::ChangeGadgetUIInteractHint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetUIInteractHint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->hint_text_map_id);
};

// Line 10468: range 00000000111C70DA-00000000111C7175
void __cdecl data::ChangeGadgetUIInteractHint::ChangeGadgetUIInteractHint(
        data::ChangeGadgetUIInteractHint *const this,
        const data::ChangeGadgetUIInteractHint *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetUIInteractHint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->hint_text_map_id, &a2->hint_text_map_id);
};

// Line 10475: range 0000000011306DD2-0000000011306E31
void __cdecl data::ChangeGadgetUIInteractHint::~ChangeGadgetUIInteractHint(
        data::ChangeGadgetUIInteractHint *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetUIInteractHint + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->hint_text_map_id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10475: range 0000000011306E32-0000000011306E5C
void __cdecl data::ChangeGadgetUIInteractHint::~ChangeGadgetUIInteractHint(
        data::ChangeGadgetUIInteractHint *const this)
{
  data::ChangeGadgetUIInteractHint::~ChangeGadgetUIInteractHint(this);
  operator delete(this, 0xA8uLL);
};

// Line 10480: range 00000000100B4AB4-00000000100B4AC4
const char *__cdecl data::ChangeGadgetUIInteractHint::getTypeName(const data::ChangeGadgetUIInteractHint *const this)
{
  return "ChangeGadgetUIInteractHint";
};

// Line 10481: range 00000000100B4AC6-00000000100B4C62
int32_t __cdecl data::ChangeGadgetUIInteractHint::getHashNum(const data::ChangeGadgetUIInteractHint *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeGadgetUIInteractHint::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeGadgetUIInteractHint",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10497: range 00000000111C745E-00000000111C749F
void __cdecl data::ChangeGadgetUIInteractHintFactory::ChangeGadgetUIInteractHintFactory(
        data::ChangeGadgetUIInteractHintFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetUIInteractHintFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeGadgetUIInteractHintFactory = v2;
};

// Line 10505: range 00000000111C77A8-00000000111C77F5
void __cdecl data::KillPlayEntity::KillPlayEntity(data::KillPlayEntity *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::KillPlayEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10505: range 00000000111C7C44-00000000111C7C9C
void __cdecl data::KillPlayEntity::KillPlayEntity(data::KillPlayEntity *const this, const data::KillPlayEntity *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::KillPlayEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10511: range 0000000011306DA6-0000000011306DD0
void __cdecl data::KillPlayEntity::~KillPlayEntity(data::KillPlayEntity *const this)
{
  data::KillPlayEntity::~KillPlayEntity(this);
  operator delete(this, 0x88uLL);
};

// Line 10511: range 0000000011306D58-0000000011306DA5
void __cdecl data::KillPlayEntity::~KillPlayEntity(data::KillPlayEntity *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillPlayEntity + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10516: range 00000000100B4C64-00000000100B4C74
const char *__cdecl data::KillPlayEntity::getTypeName(const data::KillPlayEntity *const this)
{
  return "KillPlayEntity";
};

// Line 10517: range 00000000100B4C76-00000000100B4E12
int32_t __cdecl data::KillPlayEntity::getHashNum(const data::KillPlayEntity *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::KillPlayEntity::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "KillPlayEntity",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10533: range 00000000111C7F86-00000000111C7FC7
void __cdecl data::KillPlayEntityFactory::KillPlayEntityFactory(data::KillPlayEntityFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillPlayEntityFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_KillPlayEntityFactory = v2;
};

// Line 10541: range 00000000111C82D0-00000000111C832F
void __cdecl data::DummyAction::DummyAction(data::DummyAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DummyAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 10541: range 00000000111C877E-00000000111C8819
void __cdecl data::DummyAction::DummyAction(data::DummyAction *const this, const data::DummyAction *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DummyAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &a2->action_list);
};

// Line 10548: range 0000000011306D2C-0000000011306D56
void __cdecl data::DummyAction::~DummyAction(data::DummyAction *const this)
{
  data::DummyAction::~DummyAction(this);
  operator delete(this, 0xA0uLL);
};

// Line 10548: range 0000000011306CCC-0000000011306D2B
void __cdecl data::DummyAction::~DummyAction(data::DummyAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DummyAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10553: range 00000000100B4E14-00000000100B4E24
const char *__cdecl data::DummyAction::getTypeName(const data::DummyAction *const this)
{
  return "DummyAction";
};

// Line 10554: range 00000000100B4E26-00000000100B4FC2
int32_t __cdecl data::DummyAction::getHashNum(const data::DummyAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DummyAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DummyAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10570: range 00000000111C8B02-00000000111C8B43
void __cdecl data::DummyActionFactory::DummyActionFactory(data::DummyActionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DummyActionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DummyActionFactory = v2;
};

// Line 10578: range 00000000111C8E4C-00000000111C8ED9
void __cdecl data::BanEntityMark::BanEntityMark(data::BanEntityMark *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::BanEntityMark + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->is_ban >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_ban, v1, &this->is_ban);
  this->is_ban = 0;
};

// Line 10578: range 00000000111C9322-00000000111C93FA
void __cdecl data::BanEntityMark::BanEntityMark(data::BanEntityMark *const this, const data::BanEntityMark *a2)
{
  int (**v2)(...); // rdx
  bool is_ban; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BanEntityMark + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->is_ban >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_ban, a2, &a2->is_ban);
  is_ban = a2->is_ban;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_ban >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->is_ban, a2, &this->is_ban);
  }
  this->is_ban = is_ban;
};

// Line 10585: range 0000000011306C52-0000000011306C9F
void __cdecl data::BanEntityMark::~BanEntityMark(data::BanEntityMark *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BanEntityMark + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10585: range 0000000011306CA0-0000000011306CCA
void __cdecl data::BanEntityMark::~BanEntityMark(data::BanEntityMark *const this)
{
  data::BanEntityMark::~BanEntityMark(this);
  operator delete(this, 0x90uLL);
};

// Line 10590: range 00000000100B4FC4-00000000100B4FD4
const char *__cdecl data::BanEntityMark::getTypeName(const data::BanEntityMark *const this)
{
  return "BanEntityMark";
};

// Line 10591: range 00000000100B4FD6-00000000100B5172
int32_t __cdecl data::BanEntityMark::getHashNum(const data::BanEntityMark *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BanEntityMark::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BanEntityMark",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10607: range 00000000111C96E4-00000000111C9725
void __cdecl data::BanEntityMarkFactory::BanEntityMarkFactory(data::BanEntityMarkFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BanEntityMarkFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BanEntityMarkFactory = v2;
};

// Line 10630: range 00000000111C9B8E-00000000111C9C30
void __cdecl data::FireUIEffect::FireUIEffect(data::FireUIEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireUIEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_slot >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->effect_slot >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->effect_slot, v1);
  }
  this->effect_slot = ElementArt;
};

// Line 10630: range 00000000111CA07A-00000000111CA194
void __cdecl data::FireUIEffect::FireUIEffect(data::FireUIEffect *const this, const data::FireUIEffect *a2)
{
  int (**v2)(...); // rdx
  std::string *p_effect_pattern; // rsi
  data::ActionPanelEffectSlot effect_slot; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireUIEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_effect_pattern = &a2->effect_pattern;
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&a2->effect_slot >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->effect_slot >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->effect_slot);
  }
  effect_slot = a2->effect_slot;
  v5 = *(_BYTE *)(((unsigned __int64)&this->effect_slot >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_effect_pattern) = v5 != 0;
    __asan_report_store4(&this->effect_slot, p_effect_pattern);
  }
  this->effect_slot = effect_slot;
};

// Line 10638: range 0000000011306C26-0000000011306C50
void __cdecl data::FireUIEffect::~FireUIEffect(data::FireUIEffect *const this)
{
  data::FireUIEffect::~FireUIEffect(this);
  operator delete(this, 0xB0uLL);
};

// Line 10638: range 0000000011306BC6-0000000011306C25
void __cdecl data::FireUIEffect::~FireUIEffect(data::FireUIEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireUIEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10643: range 00000000100B5174-00000000100B5184
const char *__cdecl data::FireUIEffect::getTypeName(const data::FireUIEffect *const this)
{
  return "FireUIEffect";
};

// Line 10644: range 00000000100B5186-00000000100B5322
int32_t __cdecl data::FireUIEffect::getHashNum(const data::FireUIEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireUIEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireUIEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10660: range 00000000111CA47E-00000000111CA4BF
void __cdecl data::FireUIEffectFactory::FireUIEffectFactory(data::FireUIEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireUIEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireUIEffectFactory = v2;
};

// Line 10668: range 00000000111CA7C8-00000000111CA86A
void __cdecl data::AttachUIEffect::AttachUIEffect(data::AttachUIEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachUIEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_slot >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->effect_slot >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->effect_slot, v1);
  }
  this->effect_slot = ElementArt;
};

// Line 10668: range 00000000111CACB4-00000000111CADCE
void __cdecl data::AttachUIEffect::AttachUIEffect(data::AttachUIEffect *const this, const data::AttachUIEffect *a2)
{
  int (**v2)(...); // rdx
  std::string *p_effect_pattern; // rsi
  data::ActionPanelEffectSlot effect_slot; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachUIEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_effect_pattern = &a2->effect_pattern;
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&a2->effect_slot >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->effect_slot >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->effect_slot);
  }
  effect_slot = a2->effect_slot;
  v5 = *(_BYTE *)(((unsigned __int64)&this->effect_slot >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_effect_pattern) = v5 != 0;
    __asan_report_store4(&this->effect_slot, p_effect_pattern);
  }
  this->effect_slot = effect_slot;
};

// Line 10676: range 0000000011306B3A-0000000011306B99
void __cdecl data::AttachUIEffect::~AttachUIEffect(data::AttachUIEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachUIEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->effect_pattern);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10676: range 0000000011306B9A-0000000011306BC4
void __cdecl data::AttachUIEffect::~AttachUIEffect(data::AttachUIEffect *const this)
{
  data::AttachUIEffect::~AttachUIEffect(this);
  operator delete(this, 0xB0uLL);
};

// Line 10681: range 00000000100B5324-00000000100B5334
const char *__cdecl data::AttachUIEffect::getTypeName(const data::AttachUIEffect *const this)
{
  return "AttachUIEffect";
};

// Line 10682: range 00000000100B5336-00000000100B54D2
int32_t __cdecl data::AttachUIEffect::getHashNum(const data::AttachUIEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachUIEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachUIEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10698: range 00000000111CB0B8-00000000111CB0F9
void __cdecl data::AttachUIEffectFactory::AttachUIEffectFactory(data::AttachUIEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachUIEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachUIEffectFactory = v2;
};

// Line 10706: range 00000000111CB402-00000000111CB4AC
void __cdecl data::SetSkillAnchor::SetSkillAnchor(data::SetSkillAnchor *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSkillAnchor + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 10706: range 00000000111CB8FE-00000000111CB976
void __cdecl data::SetSkillAnchor::SetSkillAnchor(data::SetSkillAnchor *const this, const data::SetSkillAnchor *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSkillAnchor + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
};

// Line 10713: range 0000000011306B0E-0000000011306B38
void __cdecl data::SetSkillAnchor::~SetSkillAnchor(data::SetSkillAnchor *const this)
{
  data::SetSkillAnchor::~SetSkillAnchor(this);
  operator delete(this, 0x98uLL);
};

// Line 10713: range 0000000011306AAE-0000000011306B0D
void __cdecl data::SetSkillAnchor::~SetSkillAnchor(data::SetSkillAnchor *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSkillAnchor + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10718: range 00000000100B54D4-00000000100B54E4
const char *__cdecl data::SetSkillAnchor::getTypeName(const data::SetSkillAnchor *const this)
{
  return "SetSkillAnchor";
};

// Line 10719: range 00000000100B54E6-00000000100B5682
int32_t __cdecl data::SetSkillAnchor::getHashNum(const data::SetSkillAnchor *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSkillAnchor::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSkillAnchor",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10735: range 00000000111CBC60-00000000111CBCA1
void __cdecl data::SetSkillAnchorFactory::SetSkillAnchorFactory(data::SetSkillAnchorFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSkillAnchorFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSkillAnchorFactory = v2;
};

// Line 10743: range 00000000111CBFAA-00000000111CC05E
void __cdecl data::AddChargeValue::AddChargeValue(data::AddChargeValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddChargeValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->charge_type, v1);
  }
  this->charge_type = None_0;
  data::DynamicFloat::DynamicFloat(&this->value);
  std::string::basic_string(&this->global_value_key);
};

// Line 10743: range 00000000111CC4A8-00000000111CC5F9
void __cdecl data::AddChargeValue::AddChargeValue(data::AddChargeValue *const this, const data::AddChargeValue *a2)
{
  int (**v2)(...); // rdx
  data::ElementType charge_type; // ecx
  char v4; // al
  const data::AddChargeValue *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddChargeValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->charge_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->charge_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->charge_type);
  }
  charge_type = a2->charge_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->charge_type, a2);
  }
  this->charge_type = charge_type;
  data::DynamicFloat::DynamicFloat(&this->value, &v5->value);
  std::string::basic_string(&this->global_value_key, &v5->global_value_key);
};

// Line 10752: range 0000000011306A10-0000000011306A81
void __cdecl data::AddChargeValue::~AddChargeValue(data::AddChargeValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddChargeValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10752: range 0000000011306A82-0000000011306AAC
void __cdecl data::AddChargeValue::~AddChargeValue(data::AddChargeValue *const this)
{
  data::AddChargeValue::~AddChargeValue(this);
  operator delete(this, 0xD0uLL);
};

// Line 10757: range 00000000100B5684-00000000100B5694
const char *__cdecl data::AddChargeValue::getTypeName(const data::AddChargeValue *const this)
{
  return "AddChargeValue";
};

// Line 10758: range 00000000100B5696-00000000100B5832
int32_t __cdecl data::AddChargeValue::getHashNum(const data::AddChargeValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddChargeValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddChargeValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10774: range 00000000111CC8E2-00000000111CC923
void __cdecl data::AddChargeValueFactory::AddChargeValueFactory(data::AddChargeValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddChargeValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddChargeValueFactory = v2;
};

// Line 10782: range 00000000111CCC2C-00000000111CCCE0
void __cdecl data::SetChargeRatio::SetChargeRatio(data::SetChargeRatio *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetChargeRatio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->charge_type, v1);
  }
  this->charge_type = None_0;
  data::DynamicFloat::DynamicFloat(&this->ratio);
  std::string::basic_string(&this->global_value_key);
};

// Line 10782: range 00000000111CD12A-00000000111CD27B
void __cdecl data::SetChargeRatio::SetChargeRatio(data::SetChargeRatio *const this, const data::SetChargeRatio *a2)
{
  int (**v2)(...); // rdx
  data::ElementType charge_type; // ecx
  char v4; // al
  const data::SetChargeRatio *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetChargeRatio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->charge_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->charge_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->charge_type);
  }
  charge_type = a2->charge_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->charge_type, a2);
  }
  this->charge_type = charge_type;
  data::DynamicFloat::DynamicFloat(&this->ratio, &v5->ratio);
  std::string::basic_string(&this->global_value_key, &v5->global_value_key);
};

// Line 10791: range 00000000113069E4-0000000011306A0E
void __cdecl data::SetChargeRatio::~SetChargeRatio(data::SetChargeRatio *const this)
{
  data::SetChargeRatio::~SetChargeRatio(this);
  operator delete(this, 0xD0uLL);
};

// Line 10791: range 0000000011306972-00000000113069E3
void __cdecl data::SetChargeRatio::~SetChargeRatio(data::SetChargeRatio *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetChargeRatio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  data::DynamicFloat::~DynamicFloat(&this->ratio);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10796: range 00000000100B5834-00000000100B5844
const char *__cdecl data::SetChargeRatio::getTypeName(const data::SetChargeRatio *const this)
{
  return "SetChargeRatio";
};

// Line 10797: range 00000000100B5846-00000000100B59E2
int32_t __cdecl data::SetChargeRatio::getHashNum(const data::SetChargeRatio *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetChargeRatio::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetChargeRatio",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10813: range 00000000111CD564-00000000111CD5A5
void __cdecl data::SetChargeRatioFactory::SetChargeRatioFactory(data::SetChargeRatioFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetChargeRatioFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetChargeRatioFactory = v2;
};

// Line 10821: range 00000000111CD8AE-00000000111CD93B
void __cdecl data::EnableLightCoreComponent::EnableLightCoreComponent(data::EnableLightCoreComponent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableLightCoreComponent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 10821: range 00000000111CDD84-00000000111CDE5C
void __cdecl data::EnableLightCoreComponent::EnableLightCoreComponent(
        data::EnableLightCoreComponent *const this,
        const data::EnableLightCoreComponent *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableLightCoreComponent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 10828: range 0000000011306946-0000000011306970
void __cdecl data::EnableLightCoreComponent::~EnableLightCoreComponent(data::EnableLightCoreComponent *const this)
{
  data::EnableLightCoreComponent::~EnableLightCoreComponent(this);
  operator delete(this, 0x90uLL);
};

// Line 10828: range 00000000113068F8-0000000011306945
void __cdecl data::EnableLightCoreComponent::~EnableLightCoreComponent(data::EnableLightCoreComponent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableLightCoreComponent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10833: range 00000000100B59E4-00000000100B59F4
const char *__cdecl data::EnableLightCoreComponent::getTypeName(const data::EnableLightCoreComponent *const this)
{
  return "EnableLightCoreComponent";
};

// Line 10834: range 00000000100B59F6-00000000100B5B92
int32_t __cdecl data::EnableLightCoreComponent::getHashNum(const data::EnableLightCoreComponent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableLightCoreComponent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableLightCoreComponent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10850: range 00000000111CE146-00000000111CE187
void __cdecl data::EnableLightCoreComponentFactory::EnableLightCoreComponentFactory(
        data::EnableLightCoreComponentFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableLightCoreComponentFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableLightCoreComponentFactory = v2;
};

// Line 10858: range 00000000111CE490-00000000111CE4EF
void __cdecl data::ServerMonsterLog::ServerMonsterLog(data::ServerMonsterLog *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ServerMonsterLog + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->param_list);
};

// Line 10858: range 00000000111CE93E-00000000111CE9D9
void __cdecl data::ServerMonsterLog::ServerMonsterLog(
        data::ServerMonsterLog *const this,
        const data::ServerMonsterLog *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ServerMonsterLog + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->param_list, &a2->param_list);
};

// Line 10865: range 000000001130686C-00000000113068CB
void __cdecl data::ServerMonsterLog::~ServerMonsterLog(data::ServerMonsterLog *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerMonsterLog + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::~vector(&this->param_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10865: range 00000000113068CC-00000000113068F6
void __cdecl data::ServerMonsterLog::~ServerMonsterLog(data::ServerMonsterLog *const this)
{
  data::ServerMonsterLog::~ServerMonsterLog(this);
  operator delete(this, 0xA0uLL);
};

// Line 10870: range 00000000100B5B94-00000000100B5BA4
const char *__cdecl data::ServerMonsterLog::getTypeName(const data::ServerMonsterLog *const this)
{
  return "ServerMonsterLog";
};

// Line 10871: range 00000000100B5BA6-00000000100B5D42
int32_t __cdecl data::ServerMonsterLog::getHashNum(const data::ServerMonsterLog *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ServerMonsterLog::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ServerMonsterLog",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10887: range 00000000111CECC2-00000000111CED03
void __cdecl data::ServerMonsterLogFactory::ServerMonsterLogFactory(data::ServerMonsterLogFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerMonsterLogFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ServerMonsterLogFactory = v2;
};

// Line 10895: range 00000000111CF00C-00000000111CF099
void __cdecl data::EnablePositionSynchronization::EnablePositionSynchronization(
        data::EnablePositionSynchronization *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnablePositionSynchronization + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 10895: range 00000000111CF4E2-00000000111CF5BA
void __cdecl data::EnablePositionSynchronization::EnablePositionSynchronization(
        data::EnablePositionSynchronization *const this,
        const data::EnablePositionSynchronization *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnablePositionSynchronization + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 10902: range 00000000113067F2-000000001130683F
void __cdecl data::EnablePositionSynchronization::~EnablePositionSynchronization(
        data::EnablePositionSynchronization *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnablePositionSynchronization + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10902: range 0000000011306840-000000001130686A
void __cdecl data::EnablePositionSynchronization::~EnablePositionSynchronization(
        data::EnablePositionSynchronization *const this)
{
  data::EnablePositionSynchronization::~EnablePositionSynchronization(this);
  operator delete(this, 0x90uLL);
};

// Line 10907: range 00000000100B5D44-00000000100B5D54
const char *__cdecl data::EnablePositionSynchronization::getTypeName(
        const data::EnablePositionSynchronization *const this)
{
  return "EnablePositionSynchronization";
};

// Line 10908: range 00000000100B5D56-00000000100B5EF2
int32_t __cdecl data::EnablePositionSynchronization::getHashNum(const data::EnablePositionSynchronization *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnablePositionSynchronization::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnablePositionSynchronization",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10924: range 00000000111CF8A4-00000000111CF8E5
void __cdecl data::EnablePositionSynchronizationFactory::EnablePositionSynchronizationFactory(
        data::EnablePositionSynchronizationFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnablePositionSynchronizationFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnablePositionSynchronizationFactory = v2;
};

// Line 10932: range 00000000111CFBEE-00000000111CFC74
void __cdecl data::ReviveStamina::ReviveStamina(data::ReviveStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ReviveStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
};

// Line 10932: range 00000000111D00B8-00000000111D0153
void __cdecl data::ReviveStamina::ReviveStamina(data::ReviveStamina *const this, const data::ReviveStamina *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReviveStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 10939: range 00000000113067C6-00000000113067F0
void __cdecl data::ReviveStamina::~ReviveStamina(data::ReviveStamina *const this)
{
  data::ReviveStamina::~ReviveStamina(this);
  operator delete(this, 0xA8uLL);
};

// Line 10939: range 0000000011306766-00000000113067C5
void __cdecl data::ReviveStamina::~ReviveStamina(data::ReviveStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10944: range 00000000100B5EF4-00000000100B5F04
const char *__cdecl data::ReviveStamina::getTypeName(const data::ReviveStamina *const this)
{
  return "ReviveStamina";
};

// Line 10945: range 00000000100B5F06-00000000100B60A2
int32_t __cdecl data::ReviveStamina::getHashNum(const data::ReviveStamina *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReviveStamina::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReviveStamina",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10961: range 00000000111D043C-00000000111D047D
void __cdecl data::ReviveStaminaFactory::ReviveStaminaFactory(data::ReviveStaminaFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveStaminaFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReviveStaminaFactory = v2;
};

// Line 10969: range 00000000111D0786-00000000111D084C
void __cdecl data::DeductStamina::DeductStamina(data::DeductStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DeductStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  if ( *(char *)(((unsigned __int64)&this->swim_check >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->swim_check, v1, &this->swim_check);
  this->swim_check = 0;
};

// Line 10969: range 00000000111D0C96-00000000111D0DB1
void __cdecl data::DeductStamina::DeductStamina(data::DeductStamina *const this, const data::DeductStamina *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool swim_check; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DeductStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->swim_check >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->swim_check, p_value, &a2->swim_check);
  swim_check = a2->swim_check;
  v5 = *(_BYTE *)(((unsigned __int64)&this->swim_check >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->swim_check, p_value, &this->swim_check);
  }
  this->swim_check = swim_check;
};

// Line 10977: range 00000000113066DA-0000000011306739
void __cdecl data::DeductStamina::~DeductStamina(data::DeductStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeductStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 10977: range 000000001130673A-0000000011306764
void __cdecl data::DeductStamina::~DeductStamina(data::DeductStamina *const this)
{
  data::DeductStamina::~DeductStamina(this);
  operator delete(this, 0xB0uLL);
};

// Line 10982: range 00000000100B60A4-00000000100B60B4
const char *__cdecl data::DeductStamina::getTypeName(const data::DeductStamina *const this)
{
  return "DeductStamina";
};

// Line 10983: range 00000000100B60B6-00000000100B6252
int32_t __cdecl data::DeductStamina::getHashNum(const data::DeductStamina *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DeductStamina::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DeductStamina",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10999: range 00000000111D109A-00000000111D10DB
void __cdecl data::DeductStaminaFactory::DeductStaminaFactory(data::DeductStaminaFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeductStaminaFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DeductStaminaFactory = v2;
};

// Line 11007: range 00000000111D13E4-00000000111D146A
void __cdecl data::DeductStrafeStamina::DeductStrafeStamina(data::DeductStrafeStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DeductStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
};

// Line 11007: range 00000000111D18AE-00000000111D1949
void __cdecl data::DeductStrafeStamina::DeductStrafeStamina(
        data::DeductStrafeStamina *const this,
        const data::DeductStrafeStamina *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DeductStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 11014: range 000000001130664E-00000000113066AD
void __cdecl data::DeductStrafeStamina::~DeductStrafeStamina(data::DeductStrafeStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeductStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11014: range 00000000113066AE-00000000113066D8
void __cdecl data::DeductStrafeStamina::~DeductStrafeStamina(data::DeductStrafeStamina *const this)
{
  data::DeductStrafeStamina::~DeductStrafeStamina(this);
  operator delete(this, 0xA8uLL);
};

// Line 11019: range 00000000100B6254-00000000100B6264
const char *__cdecl data::DeductStrafeStamina::getTypeName(const data::DeductStrafeStamina *const this)
{
  return "DeductStrafeStamina";
};

// Line 11020: range 00000000100B6266-00000000100B6402
int32_t __cdecl data::DeductStrafeStamina::getHashNum(const data::DeductStrafeStamina *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DeductStrafeStamina::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DeductStrafeStamina",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11036: range 00000000111D1C32-00000000111D1C73
void __cdecl data::DeductStrafeStaminaFactory::DeductStrafeStaminaFactory(data::DeductStrafeStaminaFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeductStrafeStaminaFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DeductStrafeStaminaFactory = v2;
};

// Line 11044: range 00000000111D1F7C-00000000111D2002
void __cdecl data::ReviveStrafeStamina::ReviveStrafeStamina(data::ReviveStrafeStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ReviveStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
};

// Line 11044: range 00000000111D2446-00000000111D24E1
void __cdecl data::ReviveStrafeStamina::ReviveStrafeStamina(
        data::ReviveStrafeStamina *const this,
        const data::ReviveStrafeStamina *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReviveStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 11051: range 0000000011306622-000000001130664C
void __cdecl data::ReviveStrafeStamina::~ReviveStrafeStamina(data::ReviveStrafeStamina *const this)
{
  data::ReviveStrafeStamina::~ReviveStrafeStamina(this);
  operator delete(this, 0xA8uLL);
};

// Line 11051: range 00000000113065C2-0000000011306621
void __cdecl data::ReviveStrafeStamina::~ReviveStrafeStamina(data::ReviveStrafeStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11056: range 00000000100B6404-00000000100B6414
const char *__cdecl data::ReviveStrafeStamina::getTypeName(const data::ReviveStrafeStamina *const this)
{
  return "ReviveStrafeStamina";
};

// Line 11057: range 00000000100B6416-00000000100B65B2
int32_t __cdecl data::ReviveStrafeStamina::getHashNum(const data::ReviveStrafeStamina *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReviveStrafeStamina::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReviveStrafeStamina",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11073: range 00000000111D27CA-00000000111D280B
void __cdecl data::ReviveStrafeStaminaFactory::ReviveStrafeStaminaFactory(data::ReviveStrafeStaminaFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveStrafeStaminaFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReviveStrafeStaminaFactory = v2;
};

// Line 11081: range 00000000111D2B14-00000000111D2B9A
void __cdecl data::ManipulateStrafeStamina::ManipulateStrafeStamina(data::ManipulateStrafeStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ManipulateStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
};

// Line 11081: range 00000000111D2FDE-00000000111D3079
void __cdecl data::ManipulateStrafeStamina::ManipulateStrafeStamina(
        data::ManipulateStrafeStamina *const this,
        const data::ManipulateStrafeStamina *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ManipulateStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 11088: range 0000000011306536-0000000011306595
void __cdecl data::ManipulateStrafeStamina::~ManipulateStrafeStamina(data::ManipulateStrafeStamina *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ManipulateStrafeStamina + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11088: range 0000000011306596-00000000113065C0
void __cdecl data::ManipulateStrafeStamina::~ManipulateStrafeStamina(data::ManipulateStrafeStamina *const this)
{
  data::ManipulateStrafeStamina::~ManipulateStrafeStamina(this);
  operator delete(this, 0xA8uLL);
};

// Line 11093: range 00000000100B65B4-00000000100B65C4
const char *__cdecl data::ManipulateStrafeStamina::getTypeName(const data::ManipulateStrafeStamina *const this)
{
  return "ManipulateStrafeStamina";
};

// Line 11094: range 00000000100B65C6-00000000100B6762
int32_t __cdecl data::ManipulateStrafeStamina::getHashNum(const data::ManipulateStrafeStamina *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ManipulateStrafeStamina::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ManipulateStrafeStamina",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11110: range 00000000111D3362-00000000111D33A3
void __cdecl data::ManipulateStrafeStaminaFactory::ManipulateStrafeStaminaFactory(
        data::ManipulateStrafeStaminaFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ManipulateStrafeStaminaFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ManipulateStrafeStaminaFactory = v2;
};

// Line 11132: range 00000000111D380C-00000000111D38AE
void __cdecl data::GetStrafeStaminaToGlobalValue::GetStrafeStaminaToGlobalValue(
        data::GetStrafeStaminaToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GetStrafeStaminaToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Consumed;
  std::string::basic_string(&this->key);
};

// Line 11132: range 00000000111D3CF8-00000000111D3E12
void __cdecl data::GetStrafeStaminaToGlobalValue::GetStrafeStaminaToGlobalValue(
        data::GetStrafeStaminaToGlobalValue *const this,
        const data::GetStrafeStaminaToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::GetStrafeStaminaType type; // ecx
  char v4; // al
  const data::GetStrafeStaminaToGlobalValue *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GetStrafeStaminaToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  std::string::basic_string(&this->key, &v5->key);
};

// Line 11140: range 00000000113064AA-0000000011306509
void __cdecl data::GetStrafeStaminaToGlobalValue::~GetStrafeStaminaToGlobalValue(
        data::GetStrafeStaminaToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetStrafeStaminaToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11140: range 000000001130650A-0000000011306534
void __cdecl data::GetStrafeStaminaToGlobalValue::~GetStrafeStaminaToGlobalValue(
        data::GetStrafeStaminaToGlobalValue *const this)
{
  data::GetStrafeStaminaToGlobalValue::~GetStrafeStaminaToGlobalValue(this);
  operator delete(this, 0xB0uLL);
};

// Line 11145: range 00000000100B6764-00000000100B6774
const char *__cdecl data::GetStrafeStaminaToGlobalValue::getTypeName(
        const data::GetStrafeStaminaToGlobalValue *const this)
{
  return "GetStrafeStaminaToGlobalValue";
};

// Line 11146: range 00000000100B6776-00000000100B6912
int32_t __cdecl data::GetStrafeStaminaToGlobalValue::getHashNum(const data::GetStrafeStaminaToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GetStrafeStaminaToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GetStrafeStaminaToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11162: range 00000000111D40FC-00000000111D413D
void __cdecl data::GetStrafeStaminaToGlobalValueFactory::GetStrafeStaminaToGlobalValueFactory(
        data::GetStrafeStaminaToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetStrafeStaminaToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GetStrafeStaminaToGlobalValueFactory = v2;
};

// Line 11170: range 00000000111D4446-00000000111D4566
void __cdecl data::AddChargeBarValue::AddChargeBarValue(data::AddChargeBarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddChargeBarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  if ( *(char *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->random_in_range, v1, &this->random_in_range);
  this->random_in_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 11170: range 00000000111D49A6-00000000111D4B2F
void __cdecl data::AddChargeBarValue::AddChargeBarValue(
        data::AddChargeBarValue *const this,
        const data::AddChargeBarValue *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool random_in_range; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddChargeBarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->random_in_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->random_in_range, p_value, &a2->random_in_range);
  random_in_range = a2->random_in_range;
  v5 = *(_BYTE *)(((unsigned __int64)&this->random_in_range >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->random_in_range, p_value, &this->random_in_range);
  }
  this->random_in_range = random_in_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
};

// Line 11180: range 00000000113063FA-000000001130647D
void __cdecl data::AddChargeBarValue::~AddChargeBarValue(data::AddChargeBarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddChargeBarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11180: range 000000001130647E-00000000113064A8
void __cdecl data::AddChargeBarValue::~AddChargeBarValue(data::AddChargeBarValue *const this)
{
  data::AddChargeBarValue::~AddChargeBarValue(this);
  operator delete(this, 0xF0uLL);
};

// Line 11185: range 00000000100B6914-00000000100B6924
const char *__cdecl data::AddChargeBarValue::getTypeName(const data::AddChargeBarValue *const this)
{
  return "AddChargeBarValue";
};

// Line 11186: range 00000000100B6926-00000000100B6AC2
int32_t __cdecl data::AddChargeBarValue::getHashNum(const data::AddChargeBarValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddChargeBarValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddChargeBarValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11202: range 00000000111D4E18-00000000111D4E59
void __cdecl data::AddChargeBarValueFactory::AddChargeBarValueFactory(data::AddChargeBarValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddChargeBarValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddChargeBarValueFactory = v2;
};

// Line 11210: range 00000000111D5162-00000000111D51E8
void __cdecl data::SetChargeBarValue::SetChargeBarValue(data::SetChargeBarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetChargeBarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
};

// Line 11210: range 00000000111D562C-00000000111D56C7
void __cdecl data::SetChargeBarValue::SetChargeBarValue(
        data::SetChargeBarValue *const this,
        const data::SetChargeBarValue *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetChargeBarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 11217: range 000000001130636E-00000000113063CD
void __cdecl data::SetChargeBarValue::~SetChargeBarValue(data::SetChargeBarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetChargeBarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11217: range 00000000113063CE-00000000113063F8
void __cdecl data::SetChargeBarValue::~SetChargeBarValue(data::SetChargeBarValue *const this)
{
  data::SetChargeBarValue::~SetChargeBarValue(this);
  operator delete(this, 0xA8uLL);
};

// Line 11222: range 00000000100B6AC4-00000000100B6AD4
const char *__cdecl data::SetChargeBarValue::getTypeName(const data::SetChargeBarValue *const this)
{
  return "SetChargeBarValue";
};

// Line 11223: range 00000000100B6AD6-00000000100B6C72
int32_t __cdecl data::SetChargeBarValue::getHashNum(const data::SetChargeBarValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetChargeBarValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetChargeBarValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11239: range 00000000111D59B0-00000000111D59F1
void __cdecl data::SetChargeBarValueFactory::SetChargeBarValueFactory(data::SetChargeBarValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetChargeBarValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetChargeBarValueFactory = v2;
};

// Line 11247: range 00000000111D5CFA-00000000111D5D87
void __cdecl data::SetUICombatBarSpark::SetUICombatBarSpark(data::SetUICombatBarSpark *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarSpark + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 11247: range 00000000111D61D0-00000000111D62A8
void __cdecl data::SetUICombatBarSpark::SetUICombatBarSpark(
        data::SetUICombatBarSpark *const this,
        const data::SetUICombatBarSpark *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarSpark + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 11254: range 00000000113062F4-0000000011306341
void __cdecl data::SetUICombatBarSpark::~SetUICombatBarSpark(data::SetUICombatBarSpark *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarSpark + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11254: range 0000000011306342-000000001130636C
void __cdecl data::SetUICombatBarSpark::~SetUICombatBarSpark(data::SetUICombatBarSpark *const this)
{
  data::SetUICombatBarSpark::~SetUICombatBarSpark(this);
  operator delete(this, 0x90uLL);
};

// Line 11259: range 00000000100B6C74-00000000100B6C84
const char *__cdecl data::SetUICombatBarSpark::getTypeName(const data::SetUICombatBarSpark *const this)
{
  return "SetUICombatBarSpark";
};

// Line 11260: range 00000000100B6C86-00000000100B6E22
int32_t __cdecl data::SetUICombatBarSpark::getHashNum(const data::SetUICombatBarSpark *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetUICombatBarSpark::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetUICombatBarSpark",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11276: range 00000000111D6592-00000000111D65D3
void __cdecl data::SetUICombatBarSparkFactory::SetUICombatBarSparkFactory(data::SetUICombatBarSparkFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarSparkFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetUICombatBarSparkFactory = v2;
};

// Line 11284: range 00000000111D68DC-00000000111D6969
void __cdecl data::SetUICombatBarAsh::SetUICombatBarAsh(data::SetUICombatBarAsh *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarAsh + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 11284: range 00000000111D6DB2-00000000111D6E8A
void __cdecl data::SetUICombatBarAsh::SetUICombatBarAsh(
        data::SetUICombatBarAsh *const this,
        const data::SetUICombatBarAsh *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarAsh + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 11291: range 000000001130627A-00000000113062C7
void __cdecl data::SetUICombatBarAsh::~SetUICombatBarAsh(data::SetUICombatBarAsh *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarAsh + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11291: range 00000000113062C8-00000000113062F2
void __cdecl data::SetUICombatBarAsh::~SetUICombatBarAsh(data::SetUICombatBarAsh *const this)
{
  data::SetUICombatBarAsh::~SetUICombatBarAsh(this);
  operator delete(this, 0x90uLL);
};

// Line 11296: range 00000000100B6E24-00000000100B6E34
const char *__cdecl data::SetUICombatBarAsh::getTypeName(const data::SetUICombatBarAsh *const this)
{
  return "SetUICombatBarAsh";
};

// Line 11297: range 00000000100B6E36-00000000100B6FD2
int32_t __cdecl data::SetUICombatBarAsh::getHashNum(const data::SetUICombatBarAsh *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetUICombatBarAsh::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetUICombatBarAsh",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11313: range 00000000111D7174-00000000111D71B5
void __cdecl data::SetUICombatBarAshFactory::SetUICombatBarAshFactory(data::SetUICombatBarAshFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetUICombatBarAshFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetUICombatBarAshFactory = v2;
};

// Line 11321: range 00000000111D74BE-00000000111D750B
void __cdecl data::RefreshUICombatBarLayout::RefreshUICombatBarLayout(data::RefreshUICombatBarLayout *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RefreshUICombatBarLayout + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 11321: range 00000000111D795A-00000000111D79B2
void __cdecl data::RefreshUICombatBarLayout::RefreshUICombatBarLayout(
        data::RefreshUICombatBarLayout *const this,
        const data::RefreshUICombatBarLayout *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RefreshUICombatBarLayout + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 11327: range 0000000011306200-000000001130624D
void __cdecl data::RefreshUICombatBarLayout::~RefreshUICombatBarLayout(data::RefreshUICombatBarLayout *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RefreshUICombatBarLayout + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11327: range 000000001130624E-0000000011306278
void __cdecl data::RefreshUICombatBarLayout::~RefreshUICombatBarLayout(data::RefreshUICombatBarLayout *const this)
{
  data::RefreshUICombatBarLayout::~RefreshUICombatBarLayout(this);
  operator delete(this, 0x88uLL);
};

// Line 11332: range 00000000100B6FD4-00000000100B6FE4
const char *__cdecl data::RefreshUICombatBarLayout::getTypeName(const data::RefreshUICombatBarLayout *const this)
{
  return "RefreshUICombatBarLayout";
};

// Line 11333: range 00000000100B6FE6-00000000100B7182
int32_t __cdecl data::RefreshUICombatBarLayout::getHashNum(const data::RefreshUICombatBarLayout *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RefreshUICombatBarLayout::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RefreshUICombatBarLayout",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11349: range 00000000111D7C9C-00000000111D7CDD
void __cdecl data::RefreshUICombatBarLayoutFactory::RefreshUICombatBarLayoutFactory(
        data::RefreshUICombatBarLayoutFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RefreshUICombatBarLayoutFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RefreshUICombatBarLayoutFactory = v2;
};

// Line 11357: range 00000000111D7FE6-00000000111D8073
void __cdecl data::EnableGadgetSpecialCamera::EnableGadgetSpecialCamera(data::EnableGadgetSpecialCamera *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetSpecialCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 11357: range 00000000111D84BC-00000000111D8594
void __cdecl data::EnableGadgetSpecialCamera::EnableGadgetSpecialCamera(
        data::EnableGadgetSpecialCamera *const this,
        const data::EnableGadgetSpecialCamera *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetSpecialCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 11364: range 0000000011306186-00000000113061D3
void __cdecl data::EnableGadgetSpecialCamera::~EnableGadgetSpecialCamera(data::EnableGadgetSpecialCamera *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetSpecialCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11364: range 00000000113061D4-00000000113061FE
void __cdecl data::EnableGadgetSpecialCamera::~EnableGadgetSpecialCamera(data::EnableGadgetSpecialCamera *const this)
{
  data::EnableGadgetSpecialCamera::~EnableGadgetSpecialCamera(this);
  operator delete(this, 0x90uLL);
};

// Line 11369: range 00000000100B7184-00000000100B7194
const char *__cdecl data::EnableGadgetSpecialCamera::getTypeName(const data::EnableGadgetSpecialCamera *const this)
{
  return "EnableGadgetSpecialCamera";
};

// Line 11370: range 00000000100B7196-00000000100B7332
int32_t __cdecl data::EnableGadgetSpecialCamera::getHashNum(const data::EnableGadgetSpecialCamera *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableGadgetSpecialCamera::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableGadgetSpecialCamera",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11386: range 00000000111D887E-00000000111D88BF
void __cdecl data::EnableGadgetSpecialCameraFactory::EnableGadgetSpecialCameraFactory(
        data::EnableGadgetSpecialCameraFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableGadgetSpecialCameraFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableGadgetSpecialCameraFactory = v2;
};

// Line 11394: range 00000000111D8BC8-00000000111D8C67
void __cdecl data::SetSpecialCamera::SetSpecialCamera(data::SetSpecialCamera *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSpecialCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  std::string::basic_string(&this->special_camera_name);
};

// Line 11394: range 00000000111D90B0-00000000111D91CB
void __cdecl data::SetSpecialCamera::SetSpecialCamera(
        data::SetSpecialCamera *const this,
        const data::SetSpecialCamera *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  const data::SetSpecialCamera *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSpecialCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  std::string::basic_string(&this->special_camera_name, &v5->special_camera_name);
};

// Line 11402: range 00000000113060FA-0000000011306159
void __cdecl data::SetSpecialCamera::~SetSpecialCamera(data::SetSpecialCamera *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSpecialCamera + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->special_camera_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11402: range 000000001130615A-0000000011306184
void __cdecl data::SetSpecialCamera::~SetSpecialCamera(data::SetSpecialCamera *const this)
{
  data::SetSpecialCamera::~SetSpecialCamera(this);
  operator delete(this, 0xB0uLL);
};

// Line 11407: range 00000000100B7334-00000000100B7344
const char *__cdecl data::SetSpecialCamera::getTypeName(const data::SetSpecialCamera *const this)
{
  return "SetSpecialCamera";
};

// Line 11408: range 00000000100B7346-00000000100B74E2
int32_t __cdecl data::SetSpecialCamera::getHashNum(const data::SetSpecialCamera *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSpecialCamera::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSpecialCamera",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11424: range 00000000111D94B4-00000000111D94F5
void __cdecl data::SetSpecialCameraFactory::SetSpecialCameraFactory(data::SetSpecialCameraFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSpecialCameraFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSpecialCameraFactory = v2;
};

// Line 11432: range 00000000111D97FE-00000000111D989D
void __cdecl data::SetLockingV3Config::SetLockingV3Config(data::SetLockingV3Config *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetLockingV3Config + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  std::string::basic_string(&this->special_camera_name);
};

// Line 11432: range 00000000111D9CE6-00000000111D9E01
void __cdecl data::SetLockingV3Config::SetLockingV3Config(
        data::SetLockingV3Config *const this,
        const data::SetLockingV3Config *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  const data::SetLockingV3Config *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetLockingV3Config + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  std::string::basic_string(&this->special_camera_name, &v5->special_camera_name);
};

// Line 11440: range 000000001130606E-00000000113060CD
void __cdecl data::SetLockingV3Config::~SetLockingV3Config(data::SetLockingV3Config *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetLockingV3Config + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->special_camera_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11440: range 00000000113060CE-00000000113060F8
void __cdecl data::SetLockingV3Config::~SetLockingV3Config(data::SetLockingV3Config *const this)
{
  data::SetLockingV3Config::~SetLockingV3Config(this);
  operator delete(this, 0xB0uLL);
};

// Line 11445: range 00000000100B74E4-00000000100B74F4
const char *__cdecl data::SetLockingV3Config::getTypeName(const data::SetLockingV3Config *const this)
{
  return "SetLockingV3Config";
};

// Line 11446: range 00000000100B74F6-00000000100B7692
int32_t __cdecl data::SetLockingV3Config::getHashNum(const data::SetLockingV3Config *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetLockingV3Config::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetLockingV3Config",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11462: range 00000000111DA0EA-00000000111DA12B
void __cdecl data::SetLockingV3ConfigFactory::SetLockingV3ConfigFactory(data::SetLockingV3ConfigFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetLockingV3ConfigFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetLockingV3ConfigFactory = v2;
};

// Line 11470: range 00000000111DA434-00000000111DA4DE
void __cdecl data::KillServerGadget::KillServerGadget(data::KillServerGadget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::KillServerGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->gadget_info >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargetsByChildren>();
};

// Line 11470: range 00000000111DA930-00000000111DA9A8
void __cdecl data::KillServerGadget::KillServerGadget(
        data::KillServerGadget *const this,
        const data::KillServerGadget *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::KillServerGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByChildren>::shared_ptr(&this->gadget_info, &a2->gadget_info);
};

// Line 11477: range 0000000011305FE2-0000000011306041
void __cdecl data::KillServerGadget::~KillServerGadget(data::KillServerGadget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillServerGadget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByChildren>::~shared_ptr(&this->gadget_info);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11477: range 0000000011306042-000000001130606C
void __cdecl data::KillServerGadget::~KillServerGadget(data::KillServerGadget *const this)
{
  data::KillServerGadget::~KillServerGadget(this);
  operator delete(this, 0x98uLL);
};

// Line 11482: range 00000000100B7694-00000000100B76A4
const char *__cdecl data::KillServerGadget::getTypeName(const data::KillServerGadget *const this)
{
  return "KillServerGadget";
};

// Line 11483: range 00000000100B76A6-00000000100B7842
int32_t __cdecl data::KillServerGadget::getHashNum(const data::KillServerGadget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::KillServerGadget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "KillServerGadget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11499: range 00000000111DAC92-00000000111DACD3
void __cdecl data::KillServerGadgetFactory::KillServerGadgetFactory(data::KillServerGadgetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::KillServerGadgetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_KillServerGadgetFactory = v2;
};

// Line 11507: range 00000000111DAFDC-00000000111DB03B
void __cdecl data::ShowTextMap::ShowTextMap(data::ShowTextMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ShowTextMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->id);
};

// Line 11507: range 00000000111DB47E-00000000111DB519
void __cdecl data::ShowTextMap::ShowTextMap(data::ShowTextMap *const this, const data::ShowTextMap *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShowTextMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->id, &a2->id);
};

// Line 11514: range 0000000011305F56-0000000011305FB5
void __cdecl data::ShowTextMap::~ShowTextMap(data::ShowTextMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowTextMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->id);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11514: range 0000000011305FB6-0000000011305FE0
void __cdecl data::ShowTextMap::~ShowTextMap(data::ShowTextMap *const this)
{
  data::ShowTextMap::~ShowTextMap(this);
  operator delete(this, 0xA8uLL);
};

// Line 11519: range 00000000100B7844-00000000100B7854
const char *__cdecl data::ShowTextMap::getTypeName(const data::ShowTextMap *const this)
{
  return "ShowTextMap";
};

// Line 11520: range 00000000100B7856-00000000100B79F2
int32_t __cdecl data::ShowTextMap::getHashNum(const data::ShowTextMap *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShowTextMap::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShowTextMap",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11536: range 00000000111DB802-00000000111DB843
void __cdecl data::ShowTextMapFactory::ShowTextMapFactory(data::ShowTextMapFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowTextMapFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShowTextMapFactory = v2;
};

// Line 11544: range 00000000111DBB4C-00000000111DBB99
void __cdecl data::FireChargeBarEffect::FireChargeBarEffect(data::FireChargeBarEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireChargeBarEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 11544: range 00000000111DBFE8-00000000111DC040
void __cdecl data::FireChargeBarEffect::FireChargeBarEffect(
        data::FireChargeBarEffect *const this,
        const data::FireChargeBarEffect *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireChargeBarEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 11550: range 0000000011305EDC-0000000011305F29
void __cdecl data::FireChargeBarEffect::~FireChargeBarEffect(data::FireChargeBarEffect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireChargeBarEffect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11550: range 0000000011305F2A-0000000011305F54
void __cdecl data::FireChargeBarEffect::~FireChargeBarEffect(data::FireChargeBarEffect *const this)
{
  data::FireChargeBarEffect::~FireChargeBarEffect(this);
  operator delete(this, 0x88uLL);
};

// Line 11555: range 00000000100B79F4-00000000100B7A04
const char *__cdecl data::FireChargeBarEffect::getTypeName(const data::FireChargeBarEffect *const this)
{
  return "FireChargeBarEffect";
};

// Line 11556: range 00000000100B7A06-00000000100B7BA2
int32_t __cdecl data::FireChargeBarEffect::getHashNum(const data::FireChargeBarEffect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireChargeBarEffect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireChargeBarEffect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11572: range 00000000111DC32A-00000000111DC36B
void __cdecl data::FireChargeBarEffectFactory::FireChargeBarEffectFactory(data::FireChargeBarEffectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireChargeBarEffectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireChargeBarEffectFactory = v2;
};

// Line 11580: range 00000000111DC674-00000000111DC701
void __cdecl data::EnableWeatherLock::EnableWeatherLock(data::EnableWeatherLock *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableWeatherLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 11580: range 00000000111DCB4A-00000000111DCC22
void __cdecl data::EnableWeatherLock::EnableWeatherLock(
        data::EnableWeatherLock *const this,
        const data::EnableWeatherLock *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableWeatherLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 11587: range 0000000011305E62-0000000011305EAF
void __cdecl data::EnableWeatherLock::~EnableWeatherLock(data::EnableWeatherLock *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableWeatherLock + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11587: range 0000000011305EB0-0000000011305EDA
void __cdecl data::EnableWeatherLock::~EnableWeatherLock(data::EnableWeatherLock *const this)
{
  data::EnableWeatherLock::~EnableWeatherLock(this);
  operator delete(this, 0x90uLL);
};

// Line 11592: range 00000000100B7BA4-00000000100B7BB4
const char *__cdecl data::EnableWeatherLock::getTypeName(const data::EnableWeatherLock *const this)
{
  return "EnableWeatherLock";
};

// Line 11593: range 00000000100B7BB6-00000000100B7D52
int32_t __cdecl data::EnableWeatherLock::getHashNum(const data::EnableWeatherLock *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableWeatherLock::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableWeatherLock",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11609: range 00000000111DCF0C-00000000111DCF4D
void __cdecl data::EnableWeatherLockFactory::EnableWeatherLockFactory(data::EnableWeatherLockFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableWeatherLockFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableWeatherLockFactory = v2;
};

// Line 11617: range 00000000111DD256-00000000111DD2F5
void __cdecl data::PushInterActionByConfigPath::PushInterActionByConfigPath(
        data::PushInterActionByConfigPath *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::PushInterActionByConfigPath + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->cfg_path);
  if ( *(char *)(((unsigned __int64)&this->is_external >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_external, v1, &this->is_external);
  this->is_external = 0;
};

// Line 11617: range 00000000111DD73E-00000000111DD859
void __cdecl data::PushInterActionByConfigPath::PushInterActionByConfigPath(
        data::PushInterActionByConfigPath *const this,
        const data::PushInterActionByConfigPath *a2)
{
  int (**v2)(...); // rdx
  std::string *p_cfg_path; // rsi
  bool is_external; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PushInterActionByConfigPath + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_cfg_path = &a2->cfg_path;
  std::string::basic_string(&this->cfg_path, &a2->cfg_path);
  if ( *(char *)(((unsigned __int64)&a2->is_external >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_external, p_cfg_path, &a2->is_external);
  is_external = a2->is_external;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_external >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_cfg_path) = v5 != 0;
    __asan_report_store1(&this->is_external, p_cfg_path, &this->is_external);
  }
  this->is_external = is_external;
};

// Line 11625: range 0000000011305DD6-0000000011305E35
void __cdecl data::PushInterActionByConfigPath::~PushInterActionByConfigPath(
        data::PushInterActionByConfigPath *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PushInterActionByConfigPath + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->cfg_path);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11625: range 0000000011305E36-0000000011305E60
void __cdecl data::PushInterActionByConfigPath::~PushInterActionByConfigPath(
        data::PushInterActionByConfigPath *const this)
{
  data::PushInterActionByConfigPath::~PushInterActionByConfigPath(this);
  operator delete(this, 0xB0uLL);
};

// Line 11630: range 00000000100B7D54-00000000100B7D64
const char *__cdecl data::PushInterActionByConfigPath::getTypeName(const data::PushInterActionByConfigPath *const this)
{
  return "PushInterActionByConfigPath";
};

// Line 11631: range 00000000100B7D66-00000000100B7F02
int32_t __cdecl data::PushInterActionByConfigPath::getHashNum(const data::PushInterActionByConfigPath *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PushInterActionByConfigPath::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PushInterActionByConfigPath",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11647: range 00000000111DDB42-00000000111DDB83
void __cdecl data::PushInterActionByConfigPathFactory::PushInterActionByConfigPathFactory(
        data::PushInterActionByConfigPathFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PushInterActionByConfigPathFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PushInterActionByConfigPathFactory = v2;
};

// Line 11655: range 00000000111DDE8C-00000000111DDF19
void __cdecl data::IgnoreMoveColToRockCol::IgnoreMoveColToRockCol(data::IgnoreMoveColToRockCol *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::IgnoreMoveColToRockCol + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->ignore >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ignore, v1, &this->ignore);
  this->ignore = 0;
};

// Line 11655: range 00000000111DE362-00000000111DE43A
void __cdecl data::IgnoreMoveColToRockCol::IgnoreMoveColToRockCol(
        data::IgnoreMoveColToRockCol *const this,
        const data::IgnoreMoveColToRockCol *a2)
{
  int (**v2)(...); // rdx
  bool ignore; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::IgnoreMoveColToRockCol + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->ignore >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ignore, a2, &a2->ignore);
  ignore = a2->ignore;
  v4 = *(_BYTE *)(((unsigned __int64)&this->ignore >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->ignore, a2, &this->ignore);
  }
  this->ignore = ignore;
};

// Line 11662: range 0000000011305D5C-0000000011305DA9
void __cdecl data::IgnoreMoveColToRockCol::~IgnoreMoveColToRockCol(data::IgnoreMoveColToRockCol *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IgnoreMoveColToRockCol + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11662: range 0000000011305DAA-0000000011305DD4
void __cdecl data::IgnoreMoveColToRockCol::~IgnoreMoveColToRockCol(data::IgnoreMoveColToRockCol *const this)
{
  data::IgnoreMoveColToRockCol::~IgnoreMoveColToRockCol(this);
  operator delete(this, 0x90uLL);
};

// Line 11667: range 00000000100B7F04-00000000100B7F14
const char *__cdecl data::IgnoreMoveColToRockCol::getTypeName(const data::IgnoreMoveColToRockCol *const this)
{
  return "IgnoreMoveColToRockCol";
};

// Line 11668: range 00000000100B7F16-00000000100B80B2
int32_t __cdecl data::IgnoreMoveColToRockCol::getHashNum(const data::IgnoreMoveColToRockCol *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::IgnoreMoveColToRockCol::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "IgnoreMoveColToRockCol",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11684: range 00000000111DE724-00000000111DE765
void __cdecl data::IgnoreMoveColToRockColFactory::IgnoreMoveColToRockColFactory(
        data::IgnoreMoveColToRockColFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IgnoreMoveColToRockColFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_IgnoreMoveColToRockColFactory = v2;
};

// Line 11692: range 00000000111DEA6E-00000000111DEB3C
void __cdecl data::CreateTile::CreateTile(data::CreateTile *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::CreateTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->tile_name);
  if ( *(_WORD *)(((unsigned __int64)&this->attack_pattern >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBaseAttackPattern>();
};

// Line 11692: range 00000000111DEF92-00000000111DF04D
void __cdecl data::CreateTile::CreateTile(data::CreateTile *const this, const data::CreateTile *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CreateTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->tile_name, &a2->tile_name);
  std::shared_ptr<data::ConfigBaseAttackPattern>::shared_ptr(&this->attack_pattern, &a2->attack_pattern);
};

// Line 11700: range 0000000011305CBE-0000000011305D2F
void __cdecl data::CreateTile::~CreateTile(data::CreateTile *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CreateTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBaseAttackPattern>::~shared_ptr(&this->attack_pattern);
  std::string::~string(&this->tile_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11700: range 0000000011305D30-0000000011305D5A
void __cdecl data::CreateTile::~CreateTile(data::CreateTile *const this)
{
  data::CreateTile::~CreateTile(this);
  operator delete(this, 0xB8uLL);
};

// Line 11705: range 00000000100B80B4-00000000100B80C4
const char *__cdecl data::CreateTile::getTypeName(const data::CreateTile *const this)
{
  return "CreateTile";
};

// Line 11706: range 00000000100B80C6-00000000100B8262
int32_t __cdecl data::CreateTile::getHashNum(const data::CreateTile *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CreateTile::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CreateTile",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11722: range 00000000111DF336-00000000111DF377
void __cdecl data::CreateTileFactory::CreateTileFactory(data::CreateTileFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CreateTileFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CreateTileFactory = v2;
};

// Line 11730: range 00000000111DF680-00000000111DF74E
void __cdecl data::DestroyTile::DestroyTile(data::DestroyTile *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DestroyTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->tile_name);
  if ( *(_WORD *)(((unsigned __int64)&this->attack_pattern >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBaseAttackPattern>();
};

// Line 11730: range 00000000111DFBA4-00000000111DFC5F
void __cdecl data::DestroyTile::DestroyTile(data::DestroyTile *const this, const data::DestroyTile *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DestroyTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->tile_name, &a2->tile_name);
  std::shared_ptr<data::ConfigBaseAttackPattern>::shared_ptr(&this->attack_pattern, &a2->attack_pattern);
};

// Line 11738: range 0000000011305C92-0000000011305CBC
void __cdecl data::DestroyTile::~DestroyTile(data::DestroyTile *const this)
{
  data::DestroyTile::~DestroyTile(this);
  operator delete(this, 0xB8uLL);
};

// Line 11738: range 0000000011305C20-0000000011305C91
void __cdecl data::DestroyTile::~DestroyTile(data::DestroyTile *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DestroyTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBaseAttackPattern>::~shared_ptr(&this->attack_pattern);
  std::string::~string(&this->tile_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11743: range 00000000100B8264-00000000100B8274
const char *__cdecl data::DestroyTile::getTypeName(const data::DestroyTile *const this)
{
  return "DestroyTile";
};

// Line 11744: range 00000000100B8276-00000000100B8412
int32_t __cdecl data::DestroyTile::getHashNum(const data::DestroyTile *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DestroyTile::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DestroyTile",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11760: range 00000000111DFF48-00000000111DFF89
void __cdecl data::DestroyTileFactory::DestroyTileFactory(data::DestroyTileFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DestroyTileFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DestroyTileFactory = v2;
};

// Line 11768: range 00000000111E0292-00000000111E02F1
void __cdecl data::ClearTile::ClearTile(data::ClearTile *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ClearTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->tile_name);
};

// Line 11768: range 00000000111E0734-00000000111E07CF
void __cdecl data::ClearTile::ClearTile(data::ClearTile *const this, const data::ClearTile *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClearTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->tile_name, &a2->tile_name);
};

// Line 11775: range 0000000011305B94-0000000011305BF3
void __cdecl data::ClearTile::~ClearTile(data::ClearTile *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearTile + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->tile_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11775: range 0000000011305BF4-0000000011305C1E
void __cdecl data::ClearTile::~ClearTile(data::ClearTile *const this)
{
  data::ClearTile::~ClearTile(this);
  operator delete(this, 0xA8uLL);
};

// Line 11780: range 00000000100B8414-00000000100B8424
const char *__cdecl data::ClearTile::getTypeName(const data::ClearTile *const this)
{
  return "ClearTile";
};

// Line 11781: range 00000000100B8426-00000000100B85C2
int32_t __cdecl data::ClearTile::getHashNum(const data::ClearTile *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClearTile::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClearTile",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11797: range 00000000111E0AB8-00000000111E0AF9
void __cdecl data::ClearTileFactory::ClearTileFactory(data::ClearTileFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearTileFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClearTileFactory = v2;
};

// Line 11805: range 00000000111E0E02-00000000111E0F2B
void __cdecl data::ChangeShieldValue::ChangeShieldValue(data::ChangeShieldValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeShieldValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio, 0.0);
  data::DynamicFloat::DynamicFloat(&this->shield_hp, 0.0);
  data::DynamicFloat::DynamicFloat(&this->max_shield_by_hpratio);
  data::DynamicFloat::DynamicFloat(&this->max_shield_hp);
  std::string::basic_string(&this->modifier_name);
  if ( *(char *)(((unsigned __int64)&this->refresh_time >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->refresh_time, v1, &this->refresh_time);
  this->refresh_time = 0;
};

// Line 11805: range 00000000111E1374-00000000111E156B
void __cdecl data::ChangeShieldValue::ChangeShieldValue(
        data::ChangeShieldValue *const this,
        const data::ChangeShieldValue *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  bool refresh_time; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeShieldValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio, &a2->shield_hpratio);
  data::DynamicFloat::DynamicFloat(&this->shield_hp, &a2->shield_hp);
  data::DynamicFloat::DynamicFloat(&this->max_shield_by_hpratio, &a2->max_shield_by_hpratio);
  data::DynamicFloat::DynamicFloat(&this->max_shield_hp, &a2->max_shield_hp);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(char *)(((unsigned __int64)&a2->refresh_time >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->refresh_time, p_modifier_name, &a2->refresh_time);
  refresh_time = a2->refresh_time;
  v5 = *(_BYTE *)(((unsigned __int64)&this->refresh_time >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store1(&this->refresh_time, p_modifier_name, &this->refresh_time);
  }
  this->refresh_time = refresh_time;
};

// Line 11817: range 0000000011305AC0-0000000011305B67
void __cdecl data::ChangeShieldValue::~ChangeShieldValue(data::ChangeShieldValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeShieldValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::DynamicFloat::~DynamicFloat(&this->max_shield_hp);
  data::DynamicFloat::~DynamicFloat(&this->max_shield_by_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->shield_hp);
  data::DynamicFloat::~DynamicFloat(&this->shield_hpratio);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11817: range 0000000011305B68-0000000011305B92
void __cdecl data::ChangeShieldValue::~ChangeShieldValue(data::ChangeShieldValue *const this)
{
  data::ChangeShieldValue::~ChangeShieldValue(this);
  operator delete(this, 0x130uLL);
};

// Line 11822: range 00000000100B85C4-00000000100B85D4
const char *__cdecl data::ChangeShieldValue::getTypeName(const data::ChangeShieldValue *const this)
{
  return "ChangeShieldValue";
};

// Line 11823: range 00000000100B85D6-00000000100B8772
int32_t __cdecl data::ChangeShieldValue::getHashNum(const data::ChangeShieldValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeShieldValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeShieldValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11839: range 00000000111E1854-00000000111E1895
void __cdecl data::ChangeShieldValueFactory::ChangeShieldValueFactory(data::ChangeShieldValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeShieldValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeShieldValueFactory = v2;
};

// Line 11867: range 00000000111E1CFE-00000000111E1D8E
void __cdecl data::FireFishingEvent::FireFishingEvent(data::FireFishingEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::FireFishingEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->event_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->event_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->event_type, v1);
  }
  this->event_type = None_45;
};

// Line 11867: range 00000000111E21D8-00000000111E22AF
void __cdecl data::FireFishingEvent::FireFishingEvent(
        data::FireFishingEvent *const this,
        const data::FireFishingEvent *a2)
{
  int (**v2)(...); // rdx
  data::FishingEvent event_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireFishingEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->event_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->event_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->event_type);
  }
  event_type = a2->event_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->event_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->event_type, a2);
  }
  this->event_type = event_type;
};

// Line 11874: range 0000000011305A94-0000000011305ABE
void __cdecl data::FireFishingEvent::~FireFishingEvent(data::FireFishingEvent *const this)
{
  data::FireFishingEvent::~FireFishingEvent(this);
  operator delete(this, 0x90uLL);
};

// Line 11874: range 0000000011305A46-0000000011305A93
void __cdecl data::FireFishingEvent::~FireFishingEvent(data::FireFishingEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireFishingEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11879: range 00000000100B8774-00000000100B8784
const char *__cdecl data::FireFishingEvent::getTypeName(const data::FireFishingEvent *const this)
{
  return "FireFishingEvent";
};

// Line 11880: range 00000000100B8786-00000000100B8922
int32_t __cdecl data::FireFishingEvent::getHashNum(const data::FireFishingEvent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireFishingEvent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireFishingEvent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11896: range 00000000111E2598-00000000111E25D9
void __cdecl data::FireFishingEventFactory::FireFishingEventFactory(data::FireFishingEventFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireFishingEventFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireFishingEventFactory = v2;
};

// Line 11920: range 00000000111E2A42-00000000111E2AD2
void __cdecl data::SetOvergrowDamgeToOverrideMap::SetOvergrowDamgeToOverrideMap(
        data::SetOvergrowDamgeToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->reaction_trigger_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->reaction_trigger_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->reaction_trigger_type, v1);
  }
  this->reaction_trigger_type = Mushroom_0;
};

// Line 11920: range 00000000111E2F1C-00000000111E2FF3
void __cdecl data::SetOvergrowDamgeToOverrideMap::SetOvergrowDamgeToOverrideMap(
        data::SetOvergrowDamgeToOverrideMap *const this,
        const data::SetOvergrowDamgeToOverrideMap *a2)
{
  int (**v2)(...); // rdx
  data::ReactionTriggerType reaction_trigger_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->reaction_trigger_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->reaction_trigger_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->reaction_trigger_type);
  }
  reaction_trigger_type = a2->reaction_trigger_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->reaction_trigger_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->reaction_trigger_type, a2);
  }
  this->reaction_trigger_type = reaction_trigger_type;
};

// Line 11927: range 0000000011305A1A-0000000011305A44
void __cdecl data::SetOvergrowDamgeToOverrideMap::~SetOvergrowDamgeToOverrideMap(
        data::SetOvergrowDamgeToOverrideMap *const this)
{
  data::SetOvergrowDamgeToOverrideMap::~SetOvergrowDamgeToOverrideMap(this);
  operator delete(this, 0x90uLL);
};

// Line 11927: range 00000000113059CC-0000000011305A19
void __cdecl data::SetOvergrowDamgeToOverrideMap::~SetOvergrowDamgeToOverrideMap(
        data::SetOvergrowDamgeToOverrideMap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToOverrideMap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11932: range 00000000100B8924-00000000100B8934
const char *__cdecl data::SetOvergrowDamgeToOverrideMap::getTypeName(
        const data::SetOvergrowDamgeToOverrideMap *const this)
{
  return "SetOvergrowDamgeToOverrideMap";
};

// Line 11933: range 00000000100B8936-00000000100B8AD2
int32_t __cdecl data::SetOvergrowDamgeToOverrideMap::getHashNum(const data::SetOvergrowDamgeToOverrideMap *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetOvergrowDamgeToOverrideMap::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetOvergrowDamgeToOverrideMap",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11949: range 00000000111E32DC-00000000111E331D
void __cdecl data::SetOvergrowDamgeToOverrideMapFactory::SetOvergrowDamgeToOverrideMapFactory(
        data::SetOvergrowDamgeToOverrideMapFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToOverrideMapFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetOvergrowDamgeToOverrideMapFactory = v2;
};

// Line 11957: range 00000000111E3626-00000000111E36B6
void __cdecl data::SetOvergrowDamgeToGlobalValue::SetOvergrowDamgeToGlobalValue(
        data::SetOvergrowDamgeToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->reaction_trigger_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->reaction_trigger_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->reaction_trigger_type, v1);
  }
  this->reaction_trigger_type = Mushroom_0;
};

// Line 11957: range 00000000111E3B00-00000000111E3BD7
void __cdecl data::SetOvergrowDamgeToGlobalValue::SetOvergrowDamgeToGlobalValue(
        data::SetOvergrowDamgeToGlobalValue *const this,
        const data::SetOvergrowDamgeToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::ReactionTriggerType reaction_trigger_type; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->reaction_trigger_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->reaction_trigger_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->reaction_trigger_type);
  }
  reaction_trigger_type = a2->reaction_trigger_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->reaction_trigger_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->reaction_trigger_type, a2);
  }
  this->reaction_trigger_type = reaction_trigger_type;
};

// Line 11964: range 0000000011305952-000000001130599F
void __cdecl data::SetOvergrowDamgeToGlobalValue::~SetOvergrowDamgeToGlobalValue(
        data::SetOvergrowDamgeToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 11964: range 00000000113059A0-00000000113059CA
void __cdecl data::SetOvergrowDamgeToGlobalValue::~SetOvergrowDamgeToGlobalValue(
        data::SetOvergrowDamgeToGlobalValue *const this)
{
  data::SetOvergrowDamgeToGlobalValue::~SetOvergrowDamgeToGlobalValue(this);
  operator delete(this, 0x90uLL);
};

// Line 11969: range 00000000100B8AD4-00000000100B8AE4
const char *__cdecl data::SetOvergrowDamgeToGlobalValue::getTypeName(
        const data::SetOvergrowDamgeToGlobalValue *const this)
{
  return "SetOvergrowDamgeToGlobalValue";
};

// Line 11970: range 00000000100B8AE6-00000000100B8C82
int32_t __cdecl data::SetOvergrowDamgeToGlobalValue::getHashNum(const data::SetOvergrowDamgeToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetOvergrowDamgeToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetOvergrowDamgeToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11986: range 00000000111E3EC0-00000000111E3F01
void __cdecl data::SetOvergrowDamgeToGlobalValueFactory::SetOvergrowDamgeToGlobalValueFactory(
        data::SetOvergrowDamgeToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetOvergrowDamgeToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetOvergrowDamgeToGlobalValueFactory = v2;
};

// Line 11994: range 00000000111E420A-00000000111E4257
void __cdecl data::SendEvtElectricCoreMoveEnterP1::SendEvtElectricCoreMoveEnterP1(
        data::SendEvtElectricCoreMoveEnterP1 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveEnterP1 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 11994: range 00000000111E46A6-00000000111E46FE
void __cdecl data::SendEvtElectricCoreMoveEnterP1::SendEvtElectricCoreMoveEnterP1(
        data::SendEvtElectricCoreMoveEnterP1 *const this,
        const data::SendEvtElectricCoreMoveEnterP1 *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveEnterP1 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 12000: range 00000000113058D8-0000000011305925
void __cdecl data::SendEvtElectricCoreMoveEnterP1::~SendEvtElectricCoreMoveEnterP1(
        data::SendEvtElectricCoreMoveEnterP1 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveEnterP1 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12000: range 0000000011305926-0000000011305950
void __cdecl data::SendEvtElectricCoreMoveEnterP1::~SendEvtElectricCoreMoveEnterP1(
        data::SendEvtElectricCoreMoveEnterP1 *const this)
{
  data::SendEvtElectricCoreMoveEnterP1::~SendEvtElectricCoreMoveEnterP1(this);
  operator delete(this, 0x88uLL);
};

// Line 12005: range 00000000100B8C84-00000000100B8C94
const char *__cdecl data::SendEvtElectricCoreMoveEnterP1::getTypeName(
        const data::SendEvtElectricCoreMoveEnterP1 *const this)
{
  return "SendEvtElectricCoreMoveEnterP1";
};

// Line 12006: range 00000000100B8C96-00000000100B8E32
int32_t __cdecl data::SendEvtElectricCoreMoveEnterP1::getHashNum(
        const data::SendEvtElectricCoreMoveEnterP1 *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SendEvtElectricCoreMoveEnterP1::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SendEvtElectricCoreMoveEnterP1",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12022: range 00000000111E49E8-00000000111E4A29
void __cdecl data::SendEvtElectricCoreMoveEnterP1Factory::SendEvtElectricCoreMoveEnterP1Factory(
        data::SendEvtElectricCoreMoveEnterP1Factory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveEnterP1Factory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SendEvtElectricCoreMoveEnterP1Factory = v2;
};

// Line 12030: range 00000000111E4D32-00000000111E4D7F
void __cdecl data::SendEvtElectricCoreMoveInterrupt::SendEvtElectricCoreMoveInterrupt(
        data::SendEvtElectricCoreMoveInterrupt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveInterrupt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 12030: range 00000000111E51CE-00000000111E5226
void __cdecl data::SendEvtElectricCoreMoveInterrupt::SendEvtElectricCoreMoveInterrupt(
        data::SendEvtElectricCoreMoveInterrupt *const this,
        const data::SendEvtElectricCoreMoveInterrupt *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveInterrupt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 12036: range 000000001130585E-00000000113058AB
void __cdecl data::SendEvtElectricCoreMoveInterrupt::~SendEvtElectricCoreMoveInterrupt(
        data::SendEvtElectricCoreMoveInterrupt *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveInterrupt + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12036: range 00000000113058AC-00000000113058D6
void __cdecl data::SendEvtElectricCoreMoveInterrupt::~SendEvtElectricCoreMoveInterrupt(
        data::SendEvtElectricCoreMoveInterrupt *const this)
{
  data::SendEvtElectricCoreMoveInterrupt::~SendEvtElectricCoreMoveInterrupt(this);
  operator delete(this, 0x88uLL);
};

// Line 12041: range 00000000100B8E34-00000000100B8E44
const char *__cdecl data::SendEvtElectricCoreMoveInterrupt::getTypeName(
        const data::SendEvtElectricCoreMoveInterrupt *const this)
{
  return "SendEvtElectricCoreMoveInterrupt";
};

// Line 12042: range 00000000100B8E46-00000000100B8FE2
int32_t __cdecl data::SendEvtElectricCoreMoveInterrupt::getHashNum(
        const data::SendEvtElectricCoreMoveInterrupt *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SendEvtElectricCoreMoveInterrupt::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SendEvtElectricCoreMoveInterrupt",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12058: range 00000000111E5510-00000000111E5551
void __cdecl data::SendEvtElectricCoreMoveInterruptFactory::SendEvtElectricCoreMoveInterruptFactory(
        data::SendEvtElectricCoreMoveInterruptFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendEvtElectricCoreMoveInterruptFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SendEvtElectricCoreMoveInterruptFactory = v2;
};

// Line 12066: range 00000000111E585A-00000000111E590E
void __cdecl data::GetFightProperty::GetFightProperty(data::GetFightProperty *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GetFightProperty + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->fight_prop_source_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->fight_prop_source_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->fight_prop_source_target, v1);
  }
  this->fight_prop_source_target = Self_0;
  std::string::basic_string(&this->fight_prop);
  std::string::basic_string(&this->global_value_key);
};

// Line 12066: range 00000000111E5D58-00000000111E5EA9
void __cdecl data::GetFightProperty::GetFightProperty(
        data::GetFightProperty *const this,
        const data::GetFightProperty *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting fight_prop_source_target; // ecx
  char v4; // al
  const data::GetFightProperty *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GetFightProperty + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->fight_prop_source_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->fight_prop_source_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->fight_prop_source_target);
  }
  fight_prop_source_target = a2->fight_prop_source_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->fight_prop_source_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->fight_prop_source_target, a2);
  }
  this->fight_prop_source_target = fight_prop_source_target;
  std::string::basic_string(&this->fight_prop, &v5->fight_prop);
  std::string::basic_string(&this->global_value_key, &v5->global_value_key);
};

// Line 12075: range 00000000113057C0-0000000011305831
void __cdecl data::GetFightProperty::~GetFightProperty(data::GetFightProperty *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetFightProperty + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  std::string::~string(&this->fight_prop);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12075: range 0000000011305832-000000001130585C
void __cdecl data::GetFightProperty::~GetFightProperty(data::GetFightProperty *const this)
{
  data::GetFightProperty::~GetFightProperty(this);
  operator delete(this, 0xD0uLL);
};

// Line 12080: range 00000000100B8FE4-00000000100B8FF4
const char *__cdecl data::GetFightProperty::getTypeName(const data::GetFightProperty *const this)
{
  return "GetFightProperty";
};

// Line 12081: range 00000000100B8FF6-00000000100B9192
int32_t __cdecl data::GetFightProperty::getHashNum(const data::GetFightProperty *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GetFightProperty::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GetFightProperty",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12097: range 00000000111E6192-00000000111E61D3
void __cdecl data::GetFightPropertyFactory::GetFightPropertyFactory(data::GetFightPropertyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetFightPropertyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GetFightPropertyFactory = v2;
};

// Line 12105: range 00000000111E64DC-00000000111E656C
void __cdecl data::CaptureAnimal::CaptureAnimal(data::CaptureAnimal *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::CaptureAnimal + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->material_id, v1);
  }
  this->material_id = 0;
};

// Line 12105: range 00000000111E69B6-00000000111E6A8D
void __cdecl data::CaptureAnimal::CaptureAnimal(data::CaptureAnimal *const this, const data::CaptureAnimal *a2)
{
  int (**v2)(...); // rdx
  uint32_t material_id; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CaptureAnimal + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->material_id);
  }
  material_id = a2->material_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->material_id, a2);
  }
  this->material_id = material_id;
};

// Line 12112: range 0000000011305746-0000000011305793
void __cdecl data::CaptureAnimal::~CaptureAnimal(data::CaptureAnimal *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CaptureAnimal + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12112: range 0000000011305794-00000000113057BE
void __cdecl data::CaptureAnimal::~CaptureAnimal(data::CaptureAnimal *const this)
{
  data::CaptureAnimal::~CaptureAnimal(this);
  operator delete(this, 0x90uLL);
};

// Line 12117: range 00000000100B9194-00000000100B91A4
const char *__cdecl data::CaptureAnimal::getTypeName(const data::CaptureAnimal *const this)
{
  return "CaptureAnimal";
};

// Line 12118: range 00000000100B91A6-00000000100B9342
int32_t __cdecl data::CaptureAnimal::getHashNum(const data::CaptureAnimal *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CaptureAnimal::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CaptureAnimal",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12134: range 00000000111E6D76-00000000111E6DB7
void __cdecl data::CaptureAnimalFactory::CaptureAnimalFactory(data::CaptureAnimalFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CaptureAnimalFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CaptureAnimalFactory = v2;
};

// Line 12142: range 00000000111E70C0-00000000111E719D
void __cdecl data::WidgetHitTree::WidgetHitTree(data::WidgetHitTree *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::WidgetHitTree + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->radius, v1);
  }
  this->radius = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_count, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->max_count = 0;
};

// Line 12142: range 00000000111E75E6-00000000111E774F
void __cdecl data::WidgetHitTree::WidgetHitTree(data::WidgetHitTree *const this, const data::WidgetHitTree *a2)
{
  int (**v2)(...); // rdx
  float radius; // xmm0_4
  __int64 v4; // rsi
  uint32_t max_count; // ecx
  char v6; // dl

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::WidgetHitTree + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->radius);
  }
  radius = a2->radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->radius, a2);
  }
  this->radius = radius;
  v4 = (((_BYTE)a2 - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_count);
  }
  max_count = a2->max_count;
  v6 = *(_BYTE *)(((unsigned __int64)&this->max_count >> 3) + 0x7FFF8000);
  if ( v6 != 0 && (char)((((_BYTE)this - 116) & 7) + 3) >= v6 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store4(&this->max_count, v4);
  }
  this->max_count = max_count;
};

// Line 12150: range 000000001130571A-0000000011305744
void __cdecl data::WidgetHitTree::~WidgetHitTree(data::WidgetHitTree *const this)
{
  data::WidgetHitTree::~WidgetHitTree(this);
  operator delete(this, 0x90uLL);
};

// Line 12150: range 00000000113056CC-0000000011305719
void __cdecl data::WidgetHitTree::~WidgetHitTree(data::WidgetHitTree *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetHitTree + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12155: range 00000000100B9344-00000000100B9354
const char *__cdecl data::WidgetHitTree::getTypeName(const data::WidgetHitTree *const this)
{
  return "WidgetHitTree";
};

// Line 12156: range 00000000100B9356-00000000100B94F2
int32_t __cdecl data::WidgetHitTree::getHashNum(const data::WidgetHitTree *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WidgetHitTree::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WidgetHitTree",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12172: range 00000000111E7A38-00000000111E7A79
void __cdecl data::WidgetHitTreeFactory::WidgetHitTreeFactory(data::WidgetHitTreeFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetHitTreeFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WidgetHitTreeFactory = v2;
};

// Line 12194: range 00000000111E7EE2-00000000111E7F84
void __cdecl data::GetTeamTotalMaxEnergyToOverridemap::GetTeamTotalMaxEnergyToOverridemap(
        data::GetTeamTotalMaxEnergyToOverridemap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GetTeamTotalMaxEnergyToOverridemap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->team_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->team_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->team_type, v1);
  }
  this->team_type = CurTeam;
  std::string::basic_string(&this->override_map_key);
};

// Line 12194: range 00000000111E83CE-00000000111E84E8
void __cdecl data::GetTeamTotalMaxEnergyToOverridemap::GetTeamTotalMaxEnergyToOverridemap(
        data::GetTeamTotalMaxEnergyToOverridemap *const this,
        const data::GetTeamTotalMaxEnergyToOverridemap *a2)
{
  int (**v2)(...); // rdx
  data::TeamType team_type; // ecx
  char v4; // al
  const data::GetTeamTotalMaxEnergyToOverridemap *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GetTeamTotalMaxEnergyToOverridemap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->team_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->team_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->team_type);
  }
  team_type = a2->team_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->team_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->team_type, a2);
  }
  this->team_type = team_type;
  std::string::basic_string(&this->override_map_key, &v5->override_map_key);
};

// Line 12202: range 00000000113056A0-00000000113056CA
void __cdecl data::GetTeamTotalMaxEnergyToOverridemap::~GetTeamTotalMaxEnergyToOverridemap(
        data::GetTeamTotalMaxEnergyToOverridemap *const this)
{
  data::GetTeamTotalMaxEnergyToOverridemap::~GetTeamTotalMaxEnergyToOverridemap(this);
  operator delete(this, 0xB0uLL);
};

// Line 12202: range 0000000011305640-000000001130569F
void __cdecl data::GetTeamTotalMaxEnergyToOverridemap::~GetTeamTotalMaxEnergyToOverridemap(
        data::GetTeamTotalMaxEnergyToOverridemap *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetTeamTotalMaxEnergyToOverridemap + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_map_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12207: range 00000000100B94F4-00000000100B9504
const char *__cdecl data::GetTeamTotalMaxEnergyToOverridemap::getTypeName(
        const data::GetTeamTotalMaxEnergyToOverridemap *const this)
{
  return "GetTeamTotalMaxEnergyToOverridemap";
};

// Line 12208: range 00000000100B9506-00000000100B96A2
int32_t __cdecl data::GetTeamTotalMaxEnergyToOverridemap::getHashNum(
        const data::GetTeamTotalMaxEnergyToOverridemap *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GetTeamTotalMaxEnergyToOverridemap::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GetTeamTotalMaxEnergyToOverridemap",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12224: range 00000000111E87D2-00000000111E8813
void __cdecl data::GetTeamTotalMaxEnergyToOverridemapFactory::GetTeamTotalMaxEnergyToOverridemapFactory(
        data::GetTeamTotalMaxEnergyToOverridemapFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetTeamTotalMaxEnergyToOverridemapFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GetTeamTotalMaxEnergyToOverridemapFactory = v2;
};

// Line 12232: range 00000000111E8B1C-00000000111E8BBB
void __cdecl data::TriggerSetShadowRamp::TriggerSetShadowRamp(data::TriggerSetShadowRamp *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetShadowRamp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->use_shadow_ramp >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_shadow_ramp, v1, &this->use_shadow_ramp);
  this->use_shadow_ramp = 0;
  std::vector<std::string>::vector(&this->special_mats);
};

// Line 12232: range 00000000111E8FFE-00000000111E9119
void __cdecl data::TriggerSetShadowRamp::TriggerSetShadowRamp(
        data::TriggerSetShadowRamp *const this,
        const data::TriggerSetShadowRamp *a2)
{
  int (**v2)(...); // rdx
  bool use_shadow_ramp; // cl
  char v4; // al
  const data::TriggerSetShadowRamp *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSetShadowRamp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->use_shadow_ramp >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_shadow_ramp, a2, &a2->use_shadow_ramp);
  use_shadow_ramp = a2->use_shadow_ramp;
  v4 = *(_BYTE *)(((unsigned __int64)&this->use_shadow_ramp >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->use_shadow_ramp, a2, &this->use_shadow_ramp);
  }
  this->use_shadow_ramp = use_shadow_ramp;
  std::vector<std::string>::vector(&this->special_mats, &v5->special_mats);
};

// Line 12240: range 0000000011305614-000000001130563E
void __cdecl data::TriggerSetShadowRamp::~TriggerSetShadowRamp(data::TriggerSetShadowRamp *const this)
{
  data::TriggerSetShadowRamp::~TriggerSetShadowRamp(this);
  operator delete(this, 0xA8uLL);
};

// Line 12240: range 00000000113055B4-0000000011305613
void __cdecl data::TriggerSetShadowRamp::~TriggerSetShadowRamp(data::TriggerSetShadowRamp *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetShadowRamp + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->special_mats);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12245: range 00000000100B96A4-00000000100B96B4
const char *__cdecl data::TriggerSetShadowRamp::getTypeName(const data::TriggerSetShadowRamp *const this)
{
  return "TriggerSetShadowRamp";
};

// Line 12246: range 00000000100B96B6-00000000100B9852
int32_t __cdecl data::TriggerSetShadowRamp::getHashNum(const data::TriggerSetShadowRamp *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerSetShadowRamp::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerSetShadowRamp",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12262: range 00000000111E9402-00000000111E9443
void __cdecl data::TriggerSetShadowRampFactory::TriggerSetShadowRampFactory(
        data::TriggerSetShadowRampFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSetShadowRampFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerSetShadowRampFactory = v2;
};

// Line 12270: range 00000000111E974C-00000000111E97EB
void __cdecl data::SectorCityManeuver::SectorCityManeuver(data::SectorCityManeuver *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuver + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->start >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->start, v1, &this->start);
  this->start = 0;
  std::string::basic_string(&this->attach_point_name);
};

// Line 12270: range 00000000111E9C34-00000000111E9D4F
void __cdecl data::SectorCityManeuver::SectorCityManeuver(
        data::SectorCityManeuver *const this,
        const data::SectorCityManeuver *a2)
{
  int (**v2)(...); // rdx
  bool start; // cl
  char v4; // al
  const data::SectorCityManeuver *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuver + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->start >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->start, a2, &a2->start);
  start = a2->start;
  v4 = *(_BYTE *)(((unsigned __int64)&this->start >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->start, a2, &this->start);
  }
  this->start = start;
  std::string::basic_string(&this->attach_point_name, &v5->attach_point_name);
};

// Line 12278: range 0000000011305528-0000000011305587
void __cdecl data::SectorCityManeuver::~SectorCityManeuver(data::SectorCityManeuver *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuver + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attach_point_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12278: range 0000000011305588-00000000113055B2
void __cdecl data::SectorCityManeuver::~SectorCityManeuver(data::SectorCityManeuver *const this)
{
  data::SectorCityManeuver::~SectorCityManeuver(this);
  operator delete(this, 0xB0uLL);
};

// Line 12283: range 00000000100B9854-00000000100B9864
const char *__cdecl data::SectorCityManeuver::getTypeName(const data::SectorCityManeuver *const this)
{
  return "SectorCityManeuver";
};

// Line 12284: range 00000000100B9866-00000000100B9A02
int32_t __cdecl data::SectorCityManeuver::getHashNum(const data::SectorCityManeuver *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SectorCityManeuver::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SectorCityManeuver",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12300: range 00000000111EA038-00000000111EA079
void __cdecl data::SectorCityManeuverFactory::SectorCityManeuverFactory(data::SectorCityManeuverFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuverFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SectorCityManeuverFactory = v2;
};

// Line 12308: range 00000000111EA382-00000000111EA412
void __cdecl data::WidgetSkillStart::WidgetSkillStart(data::WidgetSkillStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::WidgetSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->item_id, v1);
  }
  this->item_id = 0;
};

// Line 12308: range 00000000111EA85C-00000000111EA933
void __cdecl data::WidgetSkillStart::WidgetSkillStart(
        data::WidgetSkillStart *const this,
        const data::WidgetSkillStart *a2)
{
  int (**v2)(...); // rdx
  uint32_t item_id; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::WidgetSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->item_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->item_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->item_id);
  }
  item_id = a2->item_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->item_id, a2);
  }
  this->item_id = item_id;
};

// Line 12315: range 00000000113054AE-00000000113054FB
void __cdecl data::WidgetSkillStart::~WidgetSkillStart(data::WidgetSkillStart *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetSkillStart + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12315: range 00000000113054FC-0000000011305526
void __cdecl data::WidgetSkillStart::~WidgetSkillStart(data::WidgetSkillStart *const this)
{
  data::WidgetSkillStart::~WidgetSkillStart(this);
  operator delete(this, 0x90uLL);
};

// Line 12320: range 00000000100B9A04-00000000100B9A14
const char *__cdecl data::WidgetSkillStart::getTypeName(const data::WidgetSkillStart *const this)
{
  return "WidgetSkillStart";
};

// Line 12321: range 00000000100B9A16-00000000100B9BB2
int32_t __cdecl data::WidgetSkillStart::getHashNum(const data::WidgetSkillStart *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WidgetSkillStart::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WidgetSkillStart",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12337: range 00000000111EAC1C-00000000111EAC5D
void __cdecl data::WidgetSkillStartFactory::WidgetSkillStartFactory(data::WidgetSkillStartFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetSkillStartFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WidgetSkillStartFactory = v2;
};

// Line 12345: range 00000000111EAF66-00000000111EB057
void __cdecl data::AttackByEnergy::AttackByEnergy(data::AttackByEnergy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AttackByEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->energy);
  if ( *(_BYTE *)(((unsigned __int64)&this->over_damage_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->over_damage_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->over_damage_ratio, v1);
  }
  this->over_damage_ratio = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->over_damage_max_hpratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->over_damage_max_hpratio >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->over_damage_max_hpratio, (((_BYTE)this - 84) & 7u) + 3);
  }
  this->over_damage_max_hpratio = 0.0;
};

// Line 12345: range 00000000111EB4A0-00000000111EB64F
void __cdecl data::AttackByEnergy::AttackByEnergy(data::AttackByEnergy *const this, const data::AttackByEnergy *a2)
{
  int (**v2)(...); // rdx
  float over_damage_ratio; // xmm0_4
  float over_damage_max_hpratio; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttackByEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->energy, &a2->energy);
  if ( *(_BYTE *)(((unsigned __int64)&a2->over_damage_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->over_damage_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->over_damage_ratio);
  }
  over_damage_ratio = a2->over_damage_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->over_damage_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->over_damage_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->over_damage_ratio, &a2->energy);
  }
  this->over_damage_ratio = over_damage_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&a2->over_damage_max_hpratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->over_damage_max_hpratio >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->over_damage_max_hpratio);
  }
  over_damage_max_hpratio = a2->over_damage_max_hpratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->over_damage_max_hpratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->over_damage_max_hpratio >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->over_damage_max_hpratio, (((_BYTE)this - 84) & 7u) + 3);
  }
  this->over_damage_max_hpratio = over_damage_max_hpratio;
};

// Line 12354: range 0000000011305422-0000000011305481
void __cdecl data::AttackByEnergy::~AttackByEnergy(data::AttackByEnergy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackByEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->energy);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12354: range 0000000011305482-00000000113054AC
void __cdecl data::AttackByEnergy::~AttackByEnergy(data::AttackByEnergy *const this)
{
  data::AttackByEnergy::~AttackByEnergy(this);
  operator delete(this, 0xB0uLL);
};

// Line 12359: range 00000000100B9BB4-00000000100B9BC4
const char *__cdecl data::AttackByEnergy::getTypeName(const data::AttackByEnergy *const this)
{
  return "AttackByEnergy";
};

// Line 12360: range 00000000100B9BC6-00000000100B9D62
int32_t __cdecl data::AttackByEnergy::getHashNum(const data::AttackByEnergy *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttackByEnergy::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttackByEnergy",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12376: range 00000000111EB938-00000000111EB979
void __cdecl data::AttackByEnergyFactory::AttackByEnergyFactory(data::AttackByEnergyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackByEnergyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttackByEnergyFactory = v2;
};

// Line 12384: range 00000000111EBC82-00000000111EBD12
void __cdecl data::ChangeUGCRayTag::ChangeUGCRayTag(data::ChangeUGCRayTag *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeUGCRayTag + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->ray_tag >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->ray_tag >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->ray_tag, v1);
  }
  this->ray_tag = 0;
};

// Line 12384: range 00000000111EC15C-00000000111EC233
void __cdecl data::ChangeUGCRayTag::ChangeUGCRayTag(data::ChangeUGCRayTag *const this, const data::ChangeUGCRayTag *a2)
{
  int (**v2)(...); // rdx
  uint32_t ray_tag; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeUGCRayTag + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->ray_tag >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->ray_tag >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->ray_tag);
  }
  ray_tag = a2->ray_tag;
  v4 = *(_BYTE *)(((unsigned __int64)&this->ray_tag >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->ray_tag, a2);
  }
  this->ray_tag = ray_tag;
};

// Line 12391: range 00000000113053A8-00000000113053F5
void __cdecl data::ChangeUGCRayTag::~ChangeUGCRayTag(data::ChangeUGCRayTag *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeUGCRayTag + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12391: range 00000000113053F6-0000000011305420
void __cdecl data::ChangeUGCRayTag::~ChangeUGCRayTag(data::ChangeUGCRayTag *const this)
{
  data::ChangeUGCRayTag::~ChangeUGCRayTag(this);
  operator delete(this, 0x90uLL);
};

// Line 12396: range 00000000100B9D64-00000000100B9D74
const char *__cdecl data::ChangeUGCRayTag::getTypeName(const data::ChangeUGCRayTag *const this)
{
  return "ChangeUGCRayTag";
};

// Line 12397: range 00000000100B9D76-00000000100B9F12
int32_t __cdecl data::ChangeUGCRayTag::getHashNum(const data::ChangeUGCRayTag *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeUGCRayTag::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeUGCRayTag",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12413: range 00000000111EC51C-00000000111EC55D
void __cdecl data::ChangeUGCRayTagFactory::ChangeUGCRayTagFactory(data::ChangeUGCRayTagFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeUGCRayTagFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeUGCRayTagFactory = v2;
};

// Line 12421: range 00000000111EC866-00000000111EC943
void __cdecl data::SetRegionalPlayVarValue::SetRegionalPlayVarValue(data::SetRegionalPlayVarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetRegionalPlayVarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->var_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->var_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->var_type, v1);
  }
  this->var_type = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->var_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->var_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->var_value, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->var_value = 0.0;
};

// Line 12421: range 00000000111ECD8C-00000000111ECEF5
void __cdecl data::SetRegionalPlayVarValue::SetRegionalPlayVarValue(
        data::SetRegionalPlayVarValue *const this,
        const data::SetRegionalPlayVarValue *a2)
{
  int (**v2)(...); // rdx
  data::RegionalPlayVarType var_type; // ecx
  char v4; // al
  float var_value; // xmm0_4
  const data::SetRegionalPlayVarValue *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetRegionalPlayVarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->var_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->var_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->var_type);
  }
  var_type = a2->var_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->var_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->var_type, a2);
  }
  this->var_type = var_type;
  if ( *(_BYTE *)(((unsigned __int64)&v6->var_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->var_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->var_value);
  }
  var_value = v6->var_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->var_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->var_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->var_value, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->var_value = var_value;
};

// Line 12429: range 000000001130537C-00000000113053A6
void __cdecl data::SetRegionalPlayVarValue::~SetRegionalPlayVarValue(data::SetRegionalPlayVarValue *const this)
{
  data::SetRegionalPlayVarValue::~SetRegionalPlayVarValue(this);
  operator delete(this, 0x90uLL);
};

// Line 12429: range 000000001130532E-000000001130537B
void __cdecl data::SetRegionalPlayVarValue::~SetRegionalPlayVarValue(data::SetRegionalPlayVarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetRegionalPlayVarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12434: range 00000000100B9F14-00000000100B9F24
const char *__cdecl data::SetRegionalPlayVarValue::getTypeName(const data::SetRegionalPlayVarValue *const this)
{
  return "SetRegionalPlayVarValue";
};

// Line 12435: range 00000000100B9F26-00000000100BA0C2
int32_t __cdecl data::SetRegionalPlayVarValue::getHashNum(const data::SetRegionalPlayVarValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetRegionalPlayVarValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetRegionalPlayVarValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12451: range 00000000111ED1DE-00000000111ED21F
void __cdecl data::SetRegionalPlayVarValueFactory::SetRegionalPlayVarValueFactory(
        data::SetRegionalPlayVarValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetRegionalPlayVarValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetRegionalPlayVarValueFactory = v2;
};

// Line 12459: range 00000000111ED528-00000000111ED605
void __cdecl data::AddRegionalPlayVarValue::AddRegionalPlayVarValue(data::AddRegionalPlayVarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddRegionalPlayVarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->var_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->var_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->var_type, v1);
  }
  this->var_type = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->add_value, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->add_value = 0.0;
};

// Line 12459: range 00000000111EDA4E-00000000111EDBB7
void __cdecl data::AddRegionalPlayVarValue::AddRegionalPlayVarValue(
        data::AddRegionalPlayVarValue *const this,
        const data::AddRegionalPlayVarValue *a2)
{
  int (**v2)(...); // rdx
  data::RegionalPlayVarType var_type; // ecx
  char v4; // al
  float add_value; // xmm0_4
  const data::AddRegionalPlayVarValue *v6; // [rsp+0h] [rbp-10h]

  v6 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddRegionalPlayVarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->var_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->var_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->var_type);
  }
  var_type = a2->var_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->var_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->var_type, a2);
  }
  this->var_type = var_type;
  if ( *(_BYTE *)(((unsigned __int64)&v6->add_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->add_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->add_value);
  }
  add_value = v6->add_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->add_value, (((_BYTE)this - 116) & 7u) + 3);
  }
  this->add_value = add_value;
};

// Line 12467: range 00000000113052B4-0000000011305301
void __cdecl data::AddRegionalPlayVarValue::~AddRegionalPlayVarValue(data::AddRegionalPlayVarValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddRegionalPlayVarValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12467: range 0000000011305302-000000001130532C
void __cdecl data::AddRegionalPlayVarValue::~AddRegionalPlayVarValue(data::AddRegionalPlayVarValue *const this)
{
  data::AddRegionalPlayVarValue::~AddRegionalPlayVarValue(this);
  operator delete(this, 0x90uLL);
};

// Line 12472: range 00000000100BA0C4-00000000100BA0D4
const char *__cdecl data::AddRegionalPlayVarValue::getTypeName(const data::AddRegionalPlayVarValue *const this)
{
  return "AddRegionalPlayVarValue";
};

// Line 12473: range 00000000100BA0D6-00000000100BA272
int32_t __cdecl data::AddRegionalPlayVarValue::getHashNum(const data::AddRegionalPlayVarValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddRegionalPlayVarValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddRegionalPlayVarValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12489: range 00000000111EDEA0-00000000111EDEE1
void __cdecl data::AddRegionalPlayVarValueFactory::AddRegionalPlayVarValueFactory(
        data::AddRegionalPlayVarValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddRegionalPlayVarValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddRegionalPlayVarValueFactory = v2;
};

// Line 12497: range 00000000111EE1EA-00000000111EE237
void __cdecl data::TriggerUGCGadgetMove::TriggerUGCGadgetMove(data::TriggerUGCGadgetMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerUGCGadgetMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 12497: range 00000000111EE686-00000000111EE6DE
void __cdecl data::TriggerUGCGadgetMove::TriggerUGCGadgetMove(
        data::TriggerUGCGadgetMove *const this,
        const data::TriggerUGCGadgetMove *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerUGCGadgetMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 12503: range 0000000011305288-00000000113052B2
void __cdecl data::TriggerUGCGadgetMove::~TriggerUGCGadgetMove(data::TriggerUGCGadgetMove *const this)
{
  data::TriggerUGCGadgetMove::~TriggerUGCGadgetMove(this);
  operator delete(this, 0x88uLL);
};

// Line 12503: range 000000001130523A-0000000011305287
void __cdecl data::TriggerUGCGadgetMove::~TriggerUGCGadgetMove(data::TriggerUGCGadgetMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerUGCGadgetMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12508: range 00000000100BA274-00000000100BA284
const char *__cdecl data::TriggerUGCGadgetMove::getTypeName(const data::TriggerUGCGadgetMove *const this)
{
  return "TriggerUGCGadgetMove";
};

// Line 12509: range 00000000100BA286-00000000100BA422
int32_t __cdecl data::TriggerUGCGadgetMove::getHashNum(const data::TriggerUGCGadgetMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerUGCGadgetMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerUGCGadgetMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12525: range 00000000111EE9C8-00000000111EEA09
void __cdecl data::TriggerUGCGadgetMoveFactory::TriggerUGCGadgetMoveFactory(
        data::TriggerUGCGadgetMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerUGCGadgetMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerUGCGadgetMoveFactory = v2;
};

// Line 12533: range 00000000111EED12-00000000111EEF05
void __cdecl data::ServerLuaTriggerEvent::ServerLuaTriggerEvent(data::ServerLuaTriggerEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ServerLuaTriggerEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->lua_call_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lua_call_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lua_call_type, v1);
  }
  this->lua_call_type = Gadget_1;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_target, v3, v4);
  this->is_target = 0;
  std::vector<unsigned int>::vector(&this->call_param_list);
  std::string::basic_string(&this->source_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->param_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->param_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->param_num, v3);
  }
  this->param_num = 0;
  data::DynamicFloat::DynamicFloat(&this->param1, 0.0);
  data::DynamicFloat::DynamicFloat(&this->param2, 0.0);
  data::DynamicFloat::DynamicFloat(&this->param3, 0.0);
};

// Line 12533: range 00000000111EF34E-00000000111EF64D
void __cdecl data::ServerLuaTriggerEvent::ServerLuaTriggerEvent(
        data::ServerLuaTriggerEvent *const this,
        const data::ServerLuaTriggerEvent *a2)
{
  int (**v2)(...); // rdx
  data::LuaCallType lua_call_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool is_target; // cl
  char v8; // dl
  __int64 v9; // rdx
  std::string *p_source_name; // rsi
  uint32_t param_num; // ecx
  char v12; // al
  const data::ServerLuaTriggerEvent *v13; // [rsp+0h] [rbp-20h]

  v13 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ServerLuaTriggerEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lua_call_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->lua_call_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->lua_call_type);
  }
  lua_call_type = a2->lua_call_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->lua_call_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->lua_call_type, a2);
  }
  this->lua_call_type = lua_call_type;
  v5 = ((_BYTE)v13 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v13->is_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v13->is_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v13->is_target, v5, v6);
  is_target = v13->is_target;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_target >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_target, v5, v9);
  this->is_target = is_target;
  std::vector<unsigned int>::vector(&this->call_param_list, &v13->call_param_list);
  p_source_name = &v13->source_name;
  std::string::basic_string(&this->source_name, &v13->source_name);
  if ( *(_BYTE *)(((unsigned __int64)&v13->param_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v13->param_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v13->param_num);
  }
  param_num = v13->param_num;
  v12 = *(_BYTE *)(((unsigned __int64)&this->param_num >> 3) + 0x7FFF8000);
  if ( v12 != 0 && v12 <= 3 )
  {
    LOBYTE(p_source_name) = v12 != 0;
    __asan_report_store4(&this->param_num, p_source_name);
  }
  this->param_num = param_num;
  data::DynamicFloat::DynamicFloat(&this->param1, &v13->param1);
  data::DynamicFloat::DynamicFloat(&this->param2, &v13->param2);
  data::DynamicFloat::DynamicFloat(&this->param3, &v13->param3);
};

// Line 12547: range 0000000011305166-000000001130520D
void __cdecl data::ServerLuaTriggerEvent::~ServerLuaTriggerEvent(data::ServerLuaTriggerEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerLuaTriggerEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->param3);
  data::DynamicFloat::~DynamicFloat(&this->param2);
  data::DynamicFloat::~DynamicFloat(&this->param1);
  std::string::~string(&this->source_name);
  std::vector<unsigned int>::~vector(&this->call_param_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12547: range 000000001130520E-0000000011305238
void __cdecl data::ServerLuaTriggerEvent::~ServerLuaTriggerEvent(data::ServerLuaTriggerEvent *const this)
{
  data::ServerLuaTriggerEvent::~ServerLuaTriggerEvent(this);
  operator delete(this, 0x130uLL);
};

// Line 12552: range 00000000100BA424-00000000100BA434
const char *__cdecl data::ServerLuaTriggerEvent::getTypeName(const data::ServerLuaTriggerEvent *const this)
{
  return "ServerLuaTriggerEvent";
};

// Line 12553: range 00000000100BA436-00000000100BA5D2
int32_t __cdecl data::ServerLuaTriggerEvent::getHashNum(const data::ServerLuaTriggerEvent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ServerLuaTriggerEvent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ServerLuaTriggerEvent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12569: range 00000000111EF936-00000000111EF977
void __cdecl data::ServerLuaTriggerEventFactory::ServerLuaTriggerEventFactory(
        data::ServerLuaTriggerEventFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerLuaTriggerEventFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ServerLuaTriggerEventFactory = v2;
};

// Line 12577: range 00000000111EFC80-00000000111EFCDF
void __cdecl data::GetInteractIdToGlobalValue::GetInteractIdToGlobalValue(data::GetInteractIdToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::GetInteractIdToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
};

// Line 12577: range 00000000111F0122-00000000111F01BD
void __cdecl data::GetInteractIdToGlobalValue::GetInteractIdToGlobalValue(
        data::GetInteractIdToGlobalValue *const this,
        const data::GetInteractIdToGlobalValue *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GetInteractIdToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key, &a2->key);
};

// Line 12584: range 000000001130513A-0000000011305164
void __cdecl data::GetInteractIdToGlobalValue::~GetInteractIdToGlobalValue(
        data::GetInteractIdToGlobalValue *const this)
{
  data::GetInteractIdToGlobalValue::~GetInteractIdToGlobalValue(this);
  operator delete(this, 0xA8uLL);
};

// Line 12584: range 00000000113050DA-0000000011305139
void __cdecl data::GetInteractIdToGlobalValue::~GetInteractIdToGlobalValue(
        data::GetInteractIdToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetInteractIdToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12589: range 00000000100BA5D4-00000000100BA5E4
const char *__cdecl data::GetInteractIdToGlobalValue::getTypeName(const data::GetInteractIdToGlobalValue *const this)
{
  return "GetInteractIdToGlobalValue";
};

// Line 12590: range 00000000100BA5E6-00000000100BA782
int32_t __cdecl data::GetInteractIdToGlobalValue::getHashNum(const data::GetInteractIdToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GetInteractIdToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GetInteractIdToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12606: range 00000000111F04A6-00000000111F04E7
void __cdecl data::GetInteractIdToGlobalValueFactory::GetInteractIdToGlobalValueFactory(
        data::GetInteractIdToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GetInteractIdToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GetInteractIdToGlobalValueFactory = v2;
};

// Line 12614: range 00000000111F07F0-00000000111F08E1
void __cdecl data::ShowGadgetBubble::ShowGadgetBubble(data::ShowGadgetBubble *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ShowGadgetBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v1);
  }
  this->duration = -1.0;
  std::string::basic_string(&this->content);
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->distance, v1);
  }
  this->distance = 40.0;
};

// Line 12614: range 00000000111F0D36-00000000111F0ED5
void __cdecl data::ShowGadgetBubble::ShowGadgetBubble(
        data::ShowGadgetBubble *const this,
        const data::ShowGadgetBubble *a2)
{
  int (**v2)(...); // rdx
  float duration; // xmm0_4
  float distance; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShowGadgetBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, a2);
  }
  this->duration = duration;
  std::string::basic_string(&this->content, &a2->content);
  if ( *(_BYTE *)(((unsigned __int64)&a2->distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->distance);
  }
  distance = a2->distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->distance, &a2->content);
  }
  this->distance = distance;
};

// Line 12623: range 000000001130504E-00000000113050AD
void __cdecl data::ShowGadgetBubble::~ShowGadgetBubble(data::ShowGadgetBubble *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowGadgetBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->content);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12623: range 00000000113050AE-00000000113050D8
void __cdecl data::ShowGadgetBubble::~ShowGadgetBubble(data::ShowGadgetBubble *const this)
{
  data::ShowGadgetBubble::~ShowGadgetBubble(this);
  operator delete(this, 0xB8uLL);
};

// Line 12628: range 00000000100BA784-00000000100BA794
const char *__cdecl data::ShowGadgetBubble::getTypeName(const data::ShowGadgetBubble *const this)
{
  return "ShowGadgetBubble";
};

// Line 12629: range 00000000100BA796-00000000100BA932
int32_t __cdecl data::ShowGadgetBubble::getHashNum(const data::ShowGadgetBubble *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShowGadgetBubble::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShowGadgetBubble",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12645: range 00000000111F11BE-00000000111F11FF
void __cdecl data::ShowGadgetBubbleFactory::ShowGadgetBubbleFactory(data::ShowGadgetBubbleFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShowGadgetBubbleFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShowGadgetBubbleFactory = v2;
};

// Line 12653: range 00000000111F1508-00000000111F1555
void __cdecl data::HideGadgetBubble::HideGadgetBubble(data::HideGadgetBubble *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::HideGadgetBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 12653: range 00000000111F19A4-00000000111F19FC
void __cdecl data::HideGadgetBubble::HideGadgetBubble(
        data::HideGadgetBubble *const this,
        const data::HideGadgetBubble *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HideGadgetBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 12659: range 0000000011304FD4-0000000011305021
void __cdecl data::HideGadgetBubble::~HideGadgetBubble(data::HideGadgetBubble *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideGadgetBubble + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12659: range 0000000011305022-000000001130504C
void __cdecl data::HideGadgetBubble::~HideGadgetBubble(data::HideGadgetBubble *const this)
{
  data::HideGadgetBubble::~HideGadgetBubble(this);
  operator delete(this, 0x88uLL);
};

// Line 12664: range 00000000100BA934-00000000100BA944
const char *__cdecl data::HideGadgetBubble::getTypeName(const data::HideGadgetBubble *const this)
{
  return "HideGadgetBubble";
};

// Line 12665: range 00000000100BA946-00000000100BAAE2
int32_t __cdecl data::HideGadgetBubble::getHashNum(const data::HideGadgetBubble *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HideGadgetBubble::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HideGadgetBubble",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12681: range 00000000111F1CE6-00000000111F1D27
void __cdecl data::HideGadgetBubbleFactory::HideGadgetBubbleFactory(data::HideGadgetBubbleFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideGadgetBubbleFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HideGadgetBubbleFactory = v2;
};

// Line 12689: range 00000000111F2030-00000000111F20CF
void __cdecl data::RunGM::RunGM(data::RunGM *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RunGM + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->gm);
  if ( *(char *)(((unsigned __int64)&this->flush >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->flush, v1, &this->flush);
  this->flush = 1;
};

// Line 12689: range 00000000111F2518-00000000111F2633
void __cdecl data::RunGM::RunGM(data::RunGM *const this, const data::RunGM *a2)
{
  int (**v2)(...); // rdx
  std::string *p_gm; // rsi
  bool flush; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RunGM + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_gm = &a2->gm;
  std::string::basic_string(&this->gm, &a2->gm);
  if ( *(char *)(((unsigned __int64)&a2->flush >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->flush, p_gm, &a2->flush);
  flush = a2->flush;
  v5 = *(_BYTE *)(((unsigned __int64)&this->flush >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_gm) = v5 != 0;
    __asan_report_store1(&this->flush, p_gm, &this->flush);
  }
  this->flush = flush;
};

// Line 12697: range 0000000011304F48-0000000011304FA7
void __cdecl data::RunGM::~RunGM(data::RunGM *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RunGM + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->gm);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12697: range 0000000011304FA8-0000000011304FD2
void __cdecl data::RunGM::~RunGM(data::RunGM *const this)
{
  data::RunGM::~RunGM(this);
  operator delete(this, 0xB0uLL);
};

// Line 12702: range 00000000100BAAE4-00000000100BAAF4
const char *__cdecl data::RunGM::getTypeName(const data::RunGM *const this)
{
  return "RunGM";
};

// Line 12703: range 00000000100BAAF6-00000000100BAC92
int32_t __cdecl data::RunGM::getHashNum(const data::RunGM *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RunGM::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RunGM",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12719: range 00000000111F291C-00000000111F295D
void __cdecl data::RunGMFactory::RunGMFactory(data::RunGMFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RunGMFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RunGMFactory = v2;
};

// Line 12727: range 00000000111F2C66-00000000111F2DAA
void __cdecl data::AddLogicStateValue::AddLogicStateValue(data::AddLogicStateValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::AddLogicStateValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->logic_state_name);
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 12727: range 00000000111F31F4-00000000111F33B4
void __cdecl data::AddLogicStateValue::AddLogicStateValue(
        data::AddLogicStateValue *const this,
        const data::AddLogicStateValue *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool use_limit_range; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddLogicStateValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->logic_state_name, &a2->logic_state_name);
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_value, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->use_limit_range, p_value, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
};

// Line 12738: range 0000000011304F1C-0000000011304F46
void __cdecl data::AddLogicStateValue::~AddLogicStateValue(data::AddLogicStateValue *const this)
{
  data::AddLogicStateValue::~AddLogicStateValue(this);
  operator delete(this, 0x110uLL);
};

// Line 12738: range 0000000011304E86-0000000011304F1B
void __cdecl data::AddLogicStateValue::~AddLogicStateValue(data::AddLogicStateValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddLogicStateValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  data::DynamicFloat::~DynamicFloat(&this->value);
  std::string::~string(&this->logic_state_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12743: range 00000000100BAC94-00000000100BACA4
const char *__cdecl data::AddLogicStateValue::getTypeName(const data::AddLogicStateValue *const this)
{
  return "AddLogicStateValue";
};

// Line 12744: range 00000000100BACA6-00000000100BAE42
int32_t __cdecl data::AddLogicStateValue::getHashNum(const data::AddLogicStateValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddLogicStateValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddLogicStateValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12760: range 00000000111F369E-00000000111F36DF
void __cdecl data::AddLogicStateValueFactory::AddLogicStateValueFactory(data::AddLogicStateValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddLogicStateValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddLogicStateValueFactory = v2;
};

// Line 12768: range 00000000111F39E8-00000000111F3A92
void __cdecl data::SetLogicStateValue::SetLogicStateValue(data::SetLogicStateValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetLogicStateValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->logic_state_name);
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
};

// Line 12768: range 00000000111F3EE6-00000000111F3FB8
void __cdecl data::SetLogicStateValue::SetLogicStateValue(
        data::SetLogicStateValue *const this,
        const data::SetLogicStateValue *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetLogicStateValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->logic_state_name, &a2->logic_state_name);
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
};

// Line 12776: range 0000000011304DE8-0000000011304E59
void __cdecl data::SetLogicStateValue::~SetLogicStateValue(data::SetLogicStateValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetLogicStateValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->value);
  std::string::~string(&this->logic_state_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12776: range 0000000011304E5A-0000000011304E84
void __cdecl data::SetLogicStateValue::~SetLogicStateValue(data::SetLogicStateValue *const this)
{
  data::SetLogicStateValue::~SetLogicStateValue(this);
  operator delete(this, 0xC8uLL);
};

// Line 12781: range 00000000100BAE44-00000000100BAE54
const char *__cdecl data::SetLogicStateValue::getTypeName(const data::SetLogicStateValue *const this)
{
  return "SetLogicStateValue";
};

// Line 12782: range 00000000100BAE56-00000000100BAFF2
int32_t __cdecl data::SetLogicStateValue::getHashNum(const data::SetLogicStateValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetLogicStateValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetLogicStateValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12798: range 00000000111F42A2-00000000111F42E3
void __cdecl data::SetLogicStateValueFactory::SetLogicStateValueFactory(data::SetLogicStateValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetLogicStateValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetLogicStateValueFactory = v2;
};

// Line 12806: range 00000000111F45EC-00000000111F467C
void __cdecl data::ChangeGadgetState::ChangeGadgetState(data::ChangeGadgetState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->state, v1);
  }
  this->state = 0;
};

// Line 12806: range 00000000111F4AC6-00000000111F4B9D
void __cdecl data::ChangeGadgetState::ChangeGadgetState(
        data::ChangeGadgetState *const this,
        const data::ChangeGadgetState *a2)
{
  int (**v2)(...); // rdx
  int32_t state; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->state);
  }
  state = a2->state;
  v4 = *(_BYTE *)(((unsigned __int64)&this->state >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->state, a2);
  }
  this->state = state;
};

// Line 12813: range 0000000011304D6E-0000000011304DBB
void __cdecl data::ChangeGadgetState::~ChangeGadgetState(data::ChangeGadgetState *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetState + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12813: range 0000000011304DBC-0000000011304DE6
void __cdecl data::ChangeGadgetState::~ChangeGadgetState(data::ChangeGadgetState *const this)
{
  data::ChangeGadgetState::~ChangeGadgetState(this);
  operator delete(this, 0x90uLL);
};

// Line 12818: range 00000000100BAFF4-00000000100BB004
const char *__cdecl data::ChangeGadgetState::getTypeName(const data::ChangeGadgetState *const this)
{
  return "ChangeGadgetState";
};

// Line 12819: range 00000000100BB006-00000000100BB1A2
int32_t __cdecl data::ChangeGadgetState::getHashNum(const data::ChangeGadgetState *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeGadgetState::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeGadgetState",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12835: range 00000000111F4E86-00000000111F4EC7
void __cdecl data::ChangeGadgetStateFactory::ChangeGadgetStateFactory(data::ChangeGadgetStateFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeGadgetStateFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeGadgetStateFactory = v2;
};

// Line 12843: range 00000000111F51D0-00000000111F525D
void __cdecl data::ForceEnableShakeOffButton::ForceEnableShakeOffButton(data::ForceEnableShakeOffButton *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ForceEnableShakeOffButton + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
};

// Line 12843: range 00000000111F56A6-00000000111F577E
void __cdecl data::ForceEnableShakeOffButton::ForceEnableShakeOffButton(
        data::ForceEnableShakeOffButton *const this,
        const data::ForceEnableShakeOffButton *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ForceEnableShakeOffButton + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
};

// Line 12850: range 0000000011304CF4-0000000011304D41
void __cdecl data::ForceEnableShakeOffButton::~ForceEnableShakeOffButton(data::ForceEnableShakeOffButton *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceEnableShakeOffButton + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12850: range 0000000011304D42-0000000011304D6C
void __cdecl data::ForceEnableShakeOffButton::~ForceEnableShakeOffButton(data::ForceEnableShakeOffButton *const this)
{
  data::ForceEnableShakeOffButton::~ForceEnableShakeOffButton(this);
  operator delete(this, 0x90uLL);
};

// Line 12855: range 00000000100BB1A4-00000000100BB1B4
const char *__cdecl data::ForceEnableShakeOffButton::getTypeName(const data::ForceEnableShakeOffButton *const this)
{
  return "ForceEnableShakeOffButton";
};

// Line 12856: range 00000000100BB1B6-00000000100BB352
int32_t __cdecl data::ForceEnableShakeOffButton::getHashNum(const data::ForceEnableShakeOffButton *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ForceEnableShakeOffButton::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ForceEnableShakeOffButton",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12872: range 00000000111F5A68-00000000111F5AA9
void __cdecl data::ForceEnableShakeOffButtonFactory::ForceEnableShakeOffButtonFactory(
        data::ForceEnableShakeOffButtonFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ForceEnableShakeOffButtonFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ForceEnableShakeOffButtonFactory = v2;
};

// Line 12880: range 00000000111F5DB2-00000000111F5E42
void __cdecl data::ElementAttachForActivityGacha::ElementAttachForActivityGacha(
        data::ElementAttachForActivityGacha *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ElementAttachForActivityGacha + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->element >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->element >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->element, v1);
  }
  this->element = None_0;
};

// Line 12880: range 00000000111F628C-00000000111F6363
void __cdecl data::ElementAttachForActivityGacha::ElementAttachForActivityGacha(
        data::ElementAttachForActivityGacha *const this,
        const data::ElementAttachForActivityGacha *a2)
{
  int (**v2)(...); // rdx
  data::ElementType element; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElementAttachForActivityGacha + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->element >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->element >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->element);
  }
  element = a2->element;
  v4 = *(_BYTE *)(((unsigned __int64)&this->element >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->element, a2);
  }
  this->element = element;
};

// Line 12887: range 0000000011304CC8-0000000011304CF2
void __cdecl data::ElementAttachForActivityGacha::~ElementAttachForActivityGacha(
        data::ElementAttachForActivityGacha *const this)
{
  data::ElementAttachForActivityGacha::~ElementAttachForActivityGacha(this);
  operator delete(this, 0x90uLL);
};

// Line 12887: range 0000000011304C7A-0000000011304CC7
void __cdecl data::ElementAttachForActivityGacha::~ElementAttachForActivityGacha(
        data::ElementAttachForActivityGacha *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementAttachForActivityGacha + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12892: range 00000000100BB354-00000000100BB364
const char *__cdecl data::ElementAttachForActivityGacha::getTypeName(
        const data::ElementAttachForActivityGacha *const this)
{
  return "ElementAttachForActivityGacha";
};

// Line 12893: range 00000000100BB366-00000000100BB502
int32_t __cdecl data::ElementAttachForActivityGacha::getHashNum(const data::ElementAttachForActivityGacha *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElementAttachForActivityGacha::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElementAttachForActivityGacha",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12909: range 00000000111F664C-00000000111F668D
void __cdecl data::ElementAttachForActivityGachaFactory::ElementAttachForActivityGachaFactory(
        data::ElementAttachForActivityGachaFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementAttachForActivityGachaFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElementAttachForActivityGachaFactory = v2;
};

// Line 12917: range 00000000111F6996-00000000111F6A28
void __cdecl data::SetCameraEntityDampRatio::SetCameraEntityDampRatio(data::SetCameraEntityDampRatio *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetCameraEntityDampRatio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->damp_ratio, v1);
  }
  this->damp_ratio = 0.0;
};

// Line 12917: range 00000000111F6E72-00000000111F6F4C
void __cdecl data::SetCameraEntityDampRatio::SetCameraEntityDampRatio(
        data::SetCameraEntityDampRatio *const this,
        const data::SetCameraEntityDampRatio *a2)
{
  int (**v2)(...); // rdx
  float damp_ratio; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetCameraEntityDampRatio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->damp_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->damp_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->damp_ratio);
  }
  damp_ratio = a2->damp_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->damp_ratio, a2);
  }
  this->damp_ratio = damp_ratio;
};

// Line 12924: range 0000000011304C00-0000000011304C4D
void __cdecl data::SetCameraEntityDampRatio::~SetCameraEntityDampRatio(data::SetCameraEntityDampRatio *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCameraEntityDampRatio + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12924: range 0000000011304C4E-0000000011304C78
void __cdecl data::SetCameraEntityDampRatio::~SetCameraEntityDampRatio(data::SetCameraEntityDampRatio *const this)
{
  data::SetCameraEntityDampRatio::~SetCameraEntityDampRatio(this);
  operator delete(this, 0x90uLL);
};

// Line 12929: range 00000000100BB504-00000000100BB514
const char *__cdecl data::SetCameraEntityDampRatio::getTypeName(const data::SetCameraEntityDampRatio *const this)
{
  return "SetCameraEntityDampRatio";
};

// Line 12930: range 00000000100BB516-00000000100BB6B2
int32_t __cdecl data::SetCameraEntityDampRatio::getHashNum(const data::SetCameraEntityDampRatio *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetCameraEntityDampRatio::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetCameraEntityDampRatio",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12946: range 00000000111F7236-00000000111F7277
void __cdecl data::SetCameraEntityDampRatioFactory::SetCameraEntityDampRatioFactory(
        data::SetCameraEntityDampRatioFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetCameraEntityDampRatioFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetCameraEntityDampRatioFactory = v2;
};

// Line 12954: range 00000000111F7580-00000000111F761F
void __cdecl data::SetFollowMove::SetFollowMove(data::SetFollowMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetFollowMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attach_point);
  if ( *(char *)(((unsigned __int64)&this->follow_rotation >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->follow_rotation, v1, &this->follow_rotation);
  this->follow_rotation = 0;
};

// Line 12954: range 00000000111F7A68-00000000111F7B83
void __cdecl data::SetFollowMove::SetFollowMove(data::SetFollowMove *const this, const data::SetFollowMove *a2)
{
  int (**v2)(...); // rdx
  std::string *p_attach_point; // rsi
  bool follow_rotation; // cl
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetFollowMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_attach_point = &a2->attach_point;
  std::string::basic_string(&this->attach_point, &a2->attach_point);
  if ( *(char *)(((unsigned __int64)&a2->follow_rotation >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->follow_rotation, p_attach_point, &a2->follow_rotation);
  follow_rotation = a2->follow_rotation;
  v5 = *(_BYTE *)(((unsigned __int64)&this->follow_rotation >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_attach_point) = v5 != 0;
    __asan_report_store1(&this->follow_rotation, p_attach_point, &this->follow_rotation);
  }
  this->follow_rotation = follow_rotation;
};

// Line 12962: range 0000000011304B74-0000000011304BD3
void __cdecl data::SetFollowMove::~SetFollowMove(data::SetFollowMove *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetFollowMove + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attach_point);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 12962: range 0000000011304BD4-0000000011304BFE
void __cdecl data::SetFollowMove::~SetFollowMove(data::SetFollowMove *const this)
{
  data::SetFollowMove::~SetFollowMove(this);
  operator delete(this, 0xB0uLL);
};

// Line 12967: range 00000000100BB6B4-00000000100BB6C4
const char *__cdecl data::SetFollowMove::getTypeName(const data::SetFollowMove *const this)
{
  return "SetFollowMove";
};

// Line 12968: range 00000000100BB6C6-00000000100BB862
int32_t __cdecl data::SetFollowMove::getHashNum(const data::SetFollowMove *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetFollowMove::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetFollowMove",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12984: range 00000000111F7E6C-00000000111F7EAD
void __cdecl data::SetFollowMoveFactory::SetFollowMoveFactory(data::SetFollowMoveFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetFollowMoveFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetFollowMoveFactory = v2;
};

// Line 12992: range 00000000111F81B6-00000000111F8243
void __cdecl data::DisableAffectedByWorld::DisableAffectedByWorld(data::DisableAffectedByWorld *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DisableAffectedByWorld + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->disable_weather_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->disable_weather_effect, v1, &this->disable_weather_effect);
  this->disable_weather_effect = 0;
};

// Line 12992: range 00000000111F868C-00000000111F8764
void __cdecl data::DisableAffectedByWorld::DisableAffectedByWorld(
        data::DisableAffectedByWorld *const this,
        const data::DisableAffectedByWorld *a2)
{
  int (**v2)(...); // rdx
  bool disable_weather_effect; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DisableAffectedByWorld + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->disable_weather_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->disable_weather_effect, a2, &a2->disable_weather_effect);
  disable_weather_effect = a2->disable_weather_effect;
  v4 = *(_BYTE *)(((unsigned __int64)&this->disable_weather_effect >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->disable_weather_effect, a2, &this->disable_weather_effect);
  }
  this->disable_weather_effect = disable_weather_effect;
};

// Line 12999: range 0000000011304B48-0000000011304B72
void __cdecl data::DisableAffectedByWorld::~DisableAffectedByWorld(data::DisableAffectedByWorld *const this)
{
  data::DisableAffectedByWorld::~DisableAffectedByWorld(this);
  operator delete(this, 0x90uLL);
};

// Line 12999: range 0000000011304AFA-0000000011304B47
void __cdecl data::DisableAffectedByWorld::~DisableAffectedByWorld(data::DisableAffectedByWorld *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableAffectedByWorld + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13004: range 00000000100BB864-00000000100BB874
const char *__cdecl data::DisableAffectedByWorld::getTypeName(const data::DisableAffectedByWorld *const this)
{
  return "DisableAffectedByWorld";
};

// Line 13005: range 00000000100BB876-00000000100BBA12
int32_t __cdecl data::DisableAffectedByWorld::getHashNum(const data::DisableAffectedByWorld *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DisableAffectedByWorld::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DisableAffectedByWorld",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13021: range 00000000111F8A4E-00000000111F8A8F
void __cdecl data::DisableAffectedByWorldFactory::DisableAffectedByWorldFactory(
        data::DisableAffectedByWorldFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableAffectedByWorldFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DisableAffectedByWorldFactory = v2;
};

// Line 13029: range 00000000111F8D98-00000000111F8E37
void __cdecl data::EnableHDMesh::EnableHDMesh(data::EnableHDMesh *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableHDMesh + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->enable, v1, &this->enable);
  this->enable = 0;
  std::string::basic_string(&this->hd_mesh_key);
};

// Line 13029: range 00000000111F9280-00000000111F939B
void __cdecl data::EnableHDMesh::EnableHDMesh(data::EnableHDMesh *const this, const data::EnableHDMesh *a2)
{
  int (**v2)(...); // rdx
  bool enable; // cl
  char v4; // al
  const data::EnableHDMesh *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableHDMesh + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->enable >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->enable, a2, &a2->enable);
  enable = a2->enable;
  v4 = *(_BYTE *)(((unsigned __int64)&this->enable >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->enable, a2, &this->enable);
  }
  this->enable = enable;
  std::string::basic_string(&this->hd_mesh_key, &v5->hd_mesh_key);
};

// Line 13037: range 0000000011304ACE-0000000011304AF8
void __cdecl data::EnableHDMesh::~EnableHDMesh(data::EnableHDMesh *const this)
{
  data::EnableHDMesh::~EnableHDMesh(this);
  operator delete(this, 0xB0uLL);
};

// Line 13037: range 0000000011304A6E-0000000011304ACD
void __cdecl data::EnableHDMesh::~EnableHDMesh(data::EnableHDMesh *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHDMesh + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->hd_mesh_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13042: range 00000000100BBA14-00000000100BBA24
const char *__cdecl data::EnableHDMesh::getTypeName(const data::EnableHDMesh *const this)
{
  return "EnableHDMesh";
};

// Line 13043: range 00000000100BBA26-00000000100BBBC2
int32_t __cdecl data::EnableHDMesh::getHashNum(const data::EnableHDMesh *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableHDMesh::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableHDMesh",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13059: range 00000000111F9684-00000000111F96C5
void __cdecl data::EnableHDMeshFactory::EnableHDMeshFactory(data::EnableHDMeshFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableHDMeshFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableHDMeshFactory = v2;
};

// Line 13067: range 00000000111F99CE-00000000111F9AE1
void __cdecl data::NotifyUI::NotifyUI(data::NotifyUI *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::NotifyUI + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ui_context_name);
  std::string::basic_string(&this->message);
  if ( *(_BYTE *)(((unsigned __int64)&this->int_param >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->int_param >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->int_param, v1);
  }
  this->int_param = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->float_param >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->float_param >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->float_param, (((_BYTE)this - 52) & 7u) + 3);
  }
  this->float_param = 0.0;
  std::string::basic_string(&this->string_param);
};

// Line 13067: range 00000000111F9F20-00000000111FA13A
void __cdecl data::NotifyUI::NotifyUI(data::NotifyUI *const this, const data::NotifyUI *a2)
{
  int (**v2)(...); // rdx
  std::string *p_message; // rsi
  int32_t int_param; // ecx
  char v5; // al
  float float_param; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::NotifyUI + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ui_context_name, &a2->ui_context_name);
  p_message = &a2->message;
  std::string::basic_string(&this->message, &a2->message);
  if ( *(_BYTE *)(((unsigned __int64)&a2->int_param >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->int_param >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->int_param);
  }
  int_param = a2->int_param;
  v5 = *(_BYTE *)(((unsigned __int64)&this->int_param >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_message) = v5 != 0;
    __asan_report_store4(&this->int_param, p_message);
  }
  this->int_param = int_param;
  if ( *(_BYTE *)(((unsigned __int64)&a2->float_param >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->float_param >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->float_param);
  }
  float_param = a2->float_param;
  if ( *(_BYTE *)(((unsigned __int64)&this->float_param >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->float_param >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->float_param, (((_BYTE)this - 52) & 7u) + 3);
  }
  this->float_param = float_param;
  std::string::basic_string(&this->string_param, &a2->string_param);
};

// Line 13078: range 0000000011304A42-0000000011304A6C
void __cdecl data::NotifyUI::~NotifyUI(data::NotifyUI *const this)
{
  data::NotifyUI::~NotifyUI(this);
  operator delete(this, 0xF0uLL);
};

// Line 13078: range 00000000113049BE-0000000011304A41
void __cdecl data::NotifyUI::~NotifyUI(data::NotifyUI *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NotifyUI + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->string_param);
  std::string::~string(&this->message);
  std::string::~string(&this->ui_context_name);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13083: range 00000000100BBBC4-00000000100BBBD4
const char *__cdecl data::NotifyUI::getTypeName(const data::NotifyUI *const this)
{
  return "NotifyUI";
};

// Line 13084: range 00000000100BBBD6-00000000100BBD72
int32_t __cdecl data::NotifyUI::getHashNum(const data::NotifyUI *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::NotifyUI::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "NotifyUI",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13100: range 00000000111FA424-00000000111FA465
void __cdecl data::NotifyUIFactory::NotifyUIFactory(data::NotifyUIFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NotifyUIFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_NotifyUIFactory = v2;
};

// Line 13108: range 00000000111FA76E-00000000111FA89E
void __cdecl data::ModifySkiffPhysicsParam::ModifySkiffPhysicsParam(data::ModifySkiffPhysicsParam *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifySkiffPhysicsParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_velocity_clamp, v1);
  }
  this->angular_velocity_clamp = 0.40000001;
  v3 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->disable_min_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->disable_min_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->disable_min_speed, v3);
  }
  this->disable_min_speed = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp_fade_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp_fade_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_velocity_clamp_fade_time, v3);
  }
  this->angular_velocity_clamp_fade_time = 0.5;
};

// Line 13108: range 00000000111FACF0-00000000111FAEDE
void __cdecl data::ModifySkiffPhysicsParam::ModifySkiffPhysicsParam(
        data::ModifySkiffPhysicsParam *const this,
        const data::ModifySkiffPhysicsParam *a2)
{
  int (**v2)(...); // rdx
  float angular_velocity_clamp; // xmm0_4
  float disable_min_speed; // xmm0_4
  __int64 v5; // rsi
  float angular_velocity_clamp_fade_time; // xmm0_4

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifySkiffPhysicsParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->angular_velocity_clamp >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->angular_velocity_clamp >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->angular_velocity_clamp);
  }
  angular_velocity_clamp = a2->angular_velocity_clamp;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_velocity_clamp, a2);
  }
  this->angular_velocity_clamp = angular_velocity_clamp;
  if ( *(_BYTE *)(((unsigned __int64)&a2->disable_min_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->disable_min_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->disable_min_speed);
  }
  disable_min_speed = a2->disable_min_speed;
  v5 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->disable_min_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->disable_min_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->disable_min_speed, v5);
  }
  this->disable_min_speed = disable_min_speed;
  if ( *(_BYTE *)(((unsigned __int64)&a2->angular_velocity_clamp_fade_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->angular_velocity_clamp_fade_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->angular_velocity_clamp_fade_time);
  }
  angular_velocity_clamp_fade_time = a2->angular_velocity_clamp_fade_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp_fade_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_velocity_clamp_fade_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_velocity_clamp_fade_time, v5);
  }
  this->angular_velocity_clamp_fade_time = angular_velocity_clamp_fade_time;
};

// Line 13117: range 0000000011304944-0000000011304991
void __cdecl data::ModifySkiffPhysicsParam::~ModifySkiffPhysicsParam(data::ModifySkiffPhysicsParam *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifySkiffPhysicsParam + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13117: range 0000000011304992-00000000113049BC
void __cdecl data::ModifySkiffPhysicsParam::~ModifySkiffPhysicsParam(data::ModifySkiffPhysicsParam *const this)
{
  data::ModifySkiffPhysicsParam::~ModifySkiffPhysicsParam(this);
  operator delete(this, 0x98uLL);
};

// Line 13122: range 00000000100BBD74-00000000100BBD84
const char *__cdecl data::ModifySkiffPhysicsParam::getTypeName(const data::ModifySkiffPhysicsParam *const this)
{
  return "ModifySkiffPhysicsParam";
};

// Line 13123: range 00000000100BBD86-00000000100BBF22
int32_t __cdecl data::ModifySkiffPhysicsParam::getHashNum(const data::ModifySkiffPhysicsParam *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifySkiffPhysicsParam::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifySkiffPhysicsParam",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13139: range 00000000111FB1C8-00000000111FB209
void __cdecl data::ModifySkiffPhysicsParamFactory::ModifySkiffPhysicsParamFactory(
        data::ModifySkiffPhysicsParamFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifySkiffPhysicsParamFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifySkiffPhysicsParamFactory = v2;
};

// Line 13147: range 00000000111FB512-00000000111FB55F
void __cdecl data::RefreshRainOccluder::RefreshRainOccluder(data::RefreshRainOccluder *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RefreshRainOccluder + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 13147: range 00000000111FB9AE-00000000111FBA06
void __cdecl data::RefreshRainOccluder::RefreshRainOccluder(
        data::RefreshRainOccluder *const this,
        const data::RefreshRainOccluder *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RefreshRainOccluder + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 13153: range 0000000011304918-0000000011304942
void __cdecl data::RefreshRainOccluder::~RefreshRainOccluder(data::RefreshRainOccluder *const this)
{
  data::RefreshRainOccluder::~RefreshRainOccluder(this);
  operator delete(this, 0x88uLL);
};

// Line 13153: range 00000000113048CA-0000000011304917
void __cdecl data::RefreshRainOccluder::~RefreshRainOccluder(data::RefreshRainOccluder *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RefreshRainOccluder + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13158: range 00000000100BBF24-00000000100BBF34
const char *__cdecl data::RefreshRainOccluder::getTypeName(const data::RefreshRainOccluder *const this)
{
  return "RefreshRainOccluder";
};

// Line 13159: range 00000000100BBF36-00000000100BC0D2
int32_t __cdecl data::RefreshRainOccluder::getHashNum(const data::RefreshRainOccluder *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RefreshRainOccluder::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RefreshRainOccluder",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13175: range 00000000111FBCF0-00000000111FBD31
void __cdecl data::RefreshRainOccluderFactory::RefreshRainOccluderFactory(data::RefreshRainOccluderFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RefreshRainOccluderFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RefreshRainOccluderFactory = v2;
};

// Line 13183: range 00000000111FC03A-00000000111FC099
void __cdecl data::TriggerCountCheckEvent::TriggerCountCheckEvent(data::TriggerCountCheckEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerCountCheckEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->event_key);
};

// Line 13183: range 00000000111FC4DC-00000000111FC577
void __cdecl data::TriggerCountCheckEvent::TriggerCountCheckEvent(
        data::TriggerCountCheckEvent *const this,
        const data::TriggerCountCheckEvent *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerCountCheckEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->event_key, &a2->event_key);
};

// Line 13190: range 000000001130483E-000000001130489D
void __cdecl data::TriggerCountCheckEvent::~TriggerCountCheckEvent(data::TriggerCountCheckEvent *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerCountCheckEvent + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->event_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13190: range 000000001130489E-00000000113048C8
void __cdecl data::TriggerCountCheckEvent::~TriggerCountCheckEvent(data::TriggerCountCheckEvent *const this)
{
  data::TriggerCountCheckEvent::~TriggerCountCheckEvent(this);
  operator delete(this, 0xA8uLL);
};

// Line 13195: range 00000000100BC0D4-00000000100BC0E4
const char *__cdecl data::TriggerCountCheckEvent::getTypeName(const data::TriggerCountCheckEvent *const this)
{
  return "TriggerCountCheckEvent";
};

// Line 13196: range 00000000100BC0E6-00000000100BC282
int32_t __cdecl data::TriggerCountCheckEvent::getHashNum(const data::TriggerCountCheckEvent *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerCountCheckEvent::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerCountCheckEvent",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13212: range 00000000111FC860-00000000111FC8A1
void __cdecl data::TriggerCountCheckEventFactory::TriggerCountCheckEventFactory(
        data::TriggerCountCheckEventFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerCountCheckEventFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerCountCheckEventFactory = v2;
};

// Line 13220: range 00000000111FCBAA-00000000111FCC09
void __cdecl data::ClearLocalGadgets::ClearLocalGadgets(data::ClearLocalGadgets *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ClearLocalGadgets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->white_list);
};

// Line 13220: range 00000000111FD058-00000000111FD0F3
void __cdecl data::ClearLocalGadgets::ClearLocalGadgets(
        data::ClearLocalGadgets *const this,
        const data::ClearLocalGadgets *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClearLocalGadgets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->white_list, &a2->white_list);
};

// Line 13227: range 00000000113047B2-0000000011304811
void __cdecl data::ClearLocalGadgets::~ClearLocalGadgets(data::ClearLocalGadgets *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearLocalGadgets + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->white_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13227: range 0000000011304812-000000001130483C
void __cdecl data::ClearLocalGadgets::~ClearLocalGadgets(data::ClearLocalGadgets *const this)
{
  data::ClearLocalGadgets::~ClearLocalGadgets(this);
  operator delete(this, 0xA0uLL);
};

// Line 13232: range 00000000100BC284-00000000100BC294
const char *__cdecl data::ClearLocalGadgets::getTypeName(const data::ClearLocalGadgets *const this)
{
  return "ClearLocalGadgets";
};

// Line 13233: range 00000000100BC296-00000000100BC432
int32_t __cdecl data::ClearLocalGadgets::getHashNum(const data::ClearLocalGadgets *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClearLocalGadgets::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClearLocalGadgets",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13249: range 00000000111FD3DC-00000000111FD41D
void __cdecl data::ClearLocalGadgetsFactory::ClearLocalGadgetsFactory(data::ClearLocalGadgetsFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClearLocalGadgetsFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClearLocalGadgetsFactory = v2;
};

// Line 13271: range 00000000111FD886-00000000111FD95B
void __cdecl data::TeasureHuntMarkShow::TeasureHuntMarkShow(data::TeasureHuntMarkShow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TeasureHuntMarkShow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->mark_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->mark_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->mark_type, v1);
  }
  this->mark_type = exploration;
  v3 = ((_BYTE)this - 116) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->show, v3, v4);
  this->show = 0;
};

// Line 13271: range 00000000111FDDA4-00000000111FDF05
void __cdecl data::TeasureHuntMarkShow::TeasureHuntMarkShow(
        data::TeasureHuntMarkShow *const this,
        const data::TeasureHuntMarkShow *a2)
{
  int (**v2)(...); // rdx
  data::TreasureHuntMarkType mark_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool show; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::TeasureHuntMarkShow *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TeasureHuntMarkShow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->mark_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->mark_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->mark_type);
  }
  mark_type = a2->mark_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->mark_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->mark_type, a2);
  }
  this->mark_type = mark_type;
  v5 = ((_BYTE)v10 - 116) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->show >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->show >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->show, v5, v6);
  show = v10->show;
  v8 = *(_BYTE *)(((unsigned __int64)&this->show >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this - 116) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->show, v5, v9);
  this->show = show;
};

// Line 13279: range 0000000011304786-00000000113047B0
void __cdecl data::TeasureHuntMarkShow::~TeasureHuntMarkShow(data::TeasureHuntMarkShow *const this)
{
  data::TeasureHuntMarkShow::~TeasureHuntMarkShow(this);
  operator delete(this, 0x90uLL);
};

// Line 13279: range 0000000011304738-0000000011304785
void __cdecl data::TeasureHuntMarkShow::~TeasureHuntMarkShow(data::TeasureHuntMarkShow *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TeasureHuntMarkShow + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13284: range 00000000100BC434-00000000100BC444
const char *__cdecl data::TeasureHuntMarkShow::getTypeName(const data::TeasureHuntMarkShow *const this)
{
  return "TeasureHuntMarkShow";
};

// Line 13285: range 00000000100BC446-00000000100BC5E2
int32_t __cdecl data::TeasureHuntMarkShow::getHashNum(const data::TeasureHuntMarkShow *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TeasureHuntMarkShow::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TeasureHuntMarkShow",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13301: range 00000000111FE1EE-00000000111FE22F
void __cdecl data::TeasureHuntMarkShowFactory::TeasureHuntMarkShowFactory(data::TeasureHuntMarkShowFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TeasureHuntMarkShowFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TeasureHuntMarkShowFactory = v2;
};

// Line 13309: range 00000000111FE538-00000000111FE5F4
void __cdecl data::NotifyNahidaTrigger::NotifyNahidaTrigger(data::NotifyNahidaTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::NotifyNahidaTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->select_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargetsByShape>();
  data::DynamicString::DynamicString(&this->effect_pattern);
};

// Line 13309: range 00000000111FEA3E-00000000111FEB0B
void __cdecl data::NotifyNahidaTrigger::NotifyNahidaTrigger(
        data::NotifyNahidaTrigger *const this,
        const data::NotifyNahidaTrigger *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::NotifyNahidaTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByShape>::shared_ptr(&this->select_targets, &a2->select_targets);
  data::DynamicString::DynamicString(&this->effect_pattern, &a2->effect_pattern);
};

// Line 13317: range 000000001130470C-0000000011304736
void __cdecl data::NotifyNahidaTrigger::~NotifyNahidaTrigger(data::NotifyNahidaTrigger *const this)
{
  data::NotifyNahidaTrigger::~NotifyNahidaTrigger(this);
  operator delete(this, 0xE8uLL);
};

// Line 13317: range 000000001130469A-000000001130470B
void __cdecl data::NotifyNahidaTrigger::~NotifyNahidaTrigger(data::NotifyNahidaTrigger *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NotifyNahidaTrigger + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicString::~DynamicString(&this->effect_pattern);
  std::shared_ptr<data::SelectTargetsByShape>::~shared_ptr(&this->select_targets);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13322: range 00000000100BC620-00000000100BC630
const char *__cdecl data::NotifyNahidaTrigger::getTypeName(const data::NotifyNahidaTrigger *const this)
{
  return "NotifyNahidaTrigger";
};

// Line 13323: range 00000000100BC632-00000000100BC7CE
int32_t __cdecl data::NotifyNahidaTrigger::getHashNum(const data::NotifyNahidaTrigger *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::NotifyNahidaTrigger::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "NotifyNahidaTrigger",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13339: range 00000000111FEDF4-00000000111FEE35
void __cdecl data::NotifyNahidaTriggerFactory::NotifyNahidaTriggerFactory(data::NotifyNahidaTriggerFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NotifyNahidaTriggerFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_NotifyNahidaTriggerFactory = v2;
};

// Line 13361: range 00000000111FF29E-00000000111FF3B6
void __cdecl data::SetTeamFightPropertyToOverrideMapKey::SetTeamFightPropertyToOverrideMapKey(
        data::SetTeamFightPropertyToOverrideMapKey *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetTeamFightPropertyToOverrideMapKey + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Max_1;
  std::string::basic_string(&this->fight_property);
  std::string::basic_string(&this->override_map_key);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value);
};

// Line 13361: range 00000000111FF808-00000000111FFA47
void __cdecl data::SetTeamFightPropertyToOverrideMapKey::SetTeamFightPropertyToOverrideMapKey(
        data::SetTeamFightPropertyToOverrideMapKey *const this,
        const data::SetTeamFightPropertyToOverrideMapKey *a2)
{
  int (**v2)(...); // rdx
  data::SetTeamFightPropertyToOverrideMapKeyType type; // ecx
  char v4; // al
  std::string *p_override_map_key; // rsi
  bool use_limit_range; // cl
  char v7; // al
  const data::SetTeamFightPropertyToOverrideMapKey *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetTeamFightPropertyToOverrideMapKey + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  std::string::basic_string(&this->fight_property, &v8->fight_property);
  p_override_map_key = &v8->override_map_key;
  std::string::basic_string(&this->override_map_key, &v8->override_map_key);
  if ( *(char *)(((unsigned __int64)&v8->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v8->use_limit_range, p_override_map_key, &v8->use_limit_range);
  use_limit_range = v8->use_limit_range;
  v7 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(p_override_map_key) = v7 != 0;
    __asan_report_store1(&this->use_limit_range, p_override_map_key, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &v8->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &v8->min_value);
};

// Line 13373: range 000000001130466E-0000000011304698
void __cdecl data::SetTeamFightPropertyToOverrideMapKey::~SetTeamFightPropertyToOverrideMapKey(
        data::SetTeamFightPropertyToOverrideMapKey *const this)
{
  data::SetTeamFightPropertyToOverrideMapKey::~SetTeamFightPropertyToOverrideMapKey(this);
  operator delete(this, 0x118uLL);
};

// Line 13373: range 00000000113045D8-000000001130466D
void __cdecl data::SetTeamFightPropertyToOverrideMapKey::~SetTeamFightPropertyToOverrideMapKey(
        data::SetTeamFightPropertyToOverrideMapKey *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetTeamFightPropertyToOverrideMapKey + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  std::string::~string(&this->override_map_key);
  std::string::~string(&this->fight_property);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13378: range 00000000100BC7D0-00000000100BC7E0
const char *__cdecl data::SetTeamFightPropertyToOverrideMapKey::getTypeName(
        const data::SetTeamFightPropertyToOverrideMapKey *const this)
{
  return "SetTeamFightPropertyToOverrideMapKey";
};

// Line 13379: range 00000000100BC7E2-00000000100BC97E
int32_t __cdecl data::SetTeamFightPropertyToOverrideMapKey::getHashNum(
        const data::SetTeamFightPropertyToOverrideMapKey *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetTeamFightPropertyToOverrideMapKey::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetTeamFightPropertyToOverrideMapKey",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13395: range 00000000111FFD30-00000000111FFD71
void __cdecl data::SetTeamFightPropertyToOverrideMapKeyFactory::SetTeamFightPropertyToOverrideMapKeyFactory(
        data::SetTeamFightPropertyToOverrideMapKeyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetTeamFightPropertyToOverrideMapKeyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetTeamFightPropertyToOverrideMapKeyFactory = v2;
};

// Line 13403: range 000000001120007A-00000000112000C7
void __cdecl data::ActivityBreakoutLaunchBall::ActivityBreakoutLaunchBall(data::ActivityBreakoutLaunchBall *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutLaunchBall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 13403: range 0000000011200516-000000001120056E
void __cdecl data::ActivityBreakoutLaunchBall::ActivityBreakoutLaunchBall(
        data::ActivityBreakoutLaunchBall *const this,
        const data::ActivityBreakoutLaunchBall *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutLaunchBall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 13409: range 00000000113045AC-00000000113045D6
void __cdecl data::ActivityBreakoutLaunchBall::~ActivityBreakoutLaunchBall(
        data::ActivityBreakoutLaunchBall *const this)
{
  data::ActivityBreakoutLaunchBall::~ActivityBreakoutLaunchBall(this);
  operator delete(this, 0x88uLL);
};

// Line 13409: range 000000001130455E-00000000113045AB
void __cdecl data::ActivityBreakoutLaunchBall::~ActivityBreakoutLaunchBall(
        data::ActivityBreakoutLaunchBall *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutLaunchBall + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13414: range 00000000100BC980-00000000100BC990
const char *__cdecl data::ActivityBreakoutLaunchBall::getTypeName(const data::ActivityBreakoutLaunchBall *const this)
{
  return "ActivityBreakoutLaunchBall";
};

// Line 13415: range 00000000100BC992-00000000100BCB2E
int32_t __cdecl data::ActivityBreakoutLaunchBall::getHashNum(const data::ActivityBreakoutLaunchBall *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActivityBreakoutLaunchBall::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActivityBreakoutLaunchBall",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13431: range 0000000011200858-0000000011200899
void __cdecl data::ActivityBreakoutLaunchBallFactory::ActivityBreakoutLaunchBallFactory(
        data::ActivityBreakoutLaunchBallFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutLaunchBallFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActivityBreakoutLaunchBallFactory = v2;
};

// Line 13439: range 0000000011200BDA-0000000011200C8E
void __cdecl data::ActivityBreakoutSpawnBrickSuite::ActivityBreakoutSpawnBrickSuite(
        data::ActivityBreakoutSpawnBrickSuite *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutSpawnBrickSuite + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->suite_id_list);
  std::vector<data::DynamicFloat>::vector(&this->spawn_point_id_list);
  if ( *(_BYTE *)(((unsigned __int64)&this->spawn_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->spawn_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->spawn_count, v1);
  }
  this->spawn_count = 0;
};

// Line 13439: range 00000000112010DE-000000001120122F
void __cdecl data::ActivityBreakoutSpawnBrickSuite::ActivityBreakoutSpawnBrickSuite(
        data::ActivityBreakoutSpawnBrickSuite *const this,
        const data::ActivityBreakoutSpawnBrickSuite *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloatArray *p_spawn_point_id_list; // rsi
  uint32_t spawn_count; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutSpawnBrickSuite + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->suite_id_list, &a2->suite_id_list);
  p_spawn_point_id_list = &a2->spawn_point_id_list;
  std::vector<data::DynamicFloat>::vector(&this->spawn_point_id_list, &a2->spawn_point_id_list);
  if ( *(_BYTE *)(((unsigned __int64)&a2->spawn_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->spawn_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->spawn_count);
  }
  spawn_count = a2->spawn_count;
  v5 = *(_BYTE *)(((unsigned __int64)&this->spawn_count >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_spawn_point_id_list) = v5 != 0;
    __asan_report_store4(&this->spawn_count, p_spawn_point_id_list);
  }
  this->spawn_count = spawn_count;
};

// Line 13448: range 0000000011304532-000000001130455C
void __cdecl data::ActivityBreakoutSpawnBrickSuite::~ActivityBreakoutSpawnBrickSuite(
        data::ActivityBreakoutSpawnBrickSuite *const this)
{
  data::ActivityBreakoutSpawnBrickSuite::~ActivityBreakoutSpawnBrickSuite(this);
  operator delete(this, 0xC0uLL);
};

// Line 13448: range 00000000113044C0-0000000011304531
void __cdecl data::ActivityBreakoutSpawnBrickSuite::~ActivityBreakoutSpawnBrickSuite(
        data::ActivityBreakoutSpawnBrickSuite *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutSpawnBrickSuite + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::~vector(&this->spawn_point_id_list);
  std::vector<data::DynamicFloat>::~vector(&this->suite_id_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13453: range 00000000100BCB30-00000000100BCB40
const char *__cdecl data::ActivityBreakoutSpawnBrickSuite::getTypeName(
        const data::ActivityBreakoutSpawnBrickSuite *const this)
{
  return "ActivityBreakoutSpawnBrickSuite";
};

// Line 13454: range 00000000100BCB42-00000000100BCCDE
int32_t __cdecl data::ActivityBreakoutSpawnBrickSuite::getHashNum(
        const data::ActivityBreakoutSpawnBrickSuite *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActivityBreakoutSpawnBrickSuite::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActivityBreakoutSpawnBrickSuite",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13470: range 0000000011201518-0000000011201559
void __cdecl data::ActivityBreakoutSpawnBrickSuiteFactory::ActivityBreakoutSpawnBrickSuiteFactory(
        data::ActivityBreakoutSpawnBrickSuiteFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutSpawnBrickSuiteFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActivityBreakoutSpawnBrickSuiteFactory = v2;
};

// Line 13478: range 0000000011201862-0000000011201916
void __cdecl data::ActivityBreakoutTeleport::ActivityBreakoutTeleport(data::ActivityBreakoutTeleport *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutTeleport + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->spawn_point_id_list);
  if ( *(_BYTE *)(((unsigned __int64)&this->suite_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->suite_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->suite_id, v1);
  }
  this->suite_id = 0;
  std::string::basic_string(&this->global_value_key);
};

// Line 13478: range 0000000011201D6A-0000000011201EBB
void __cdecl data::ActivityBreakoutTeleport::ActivityBreakoutTeleport(
        data::ActivityBreakoutTeleport *const this,
        const data::ActivityBreakoutTeleport *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloatArray *p_spawn_point_id_list; // rsi
  uint32_t suite_id; // ecx
  char v5; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutTeleport + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_spawn_point_id_list = &a2->spawn_point_id_list;
  std::vector<data::DynamicFloat>::vector(&this->spawn_point_id_list, &a2->spawn_point_id_list);
  if ( *(_BYTE *)(((unsigned __int64)&a2->suite_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->suite_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->suite_id);
  }
  suite_id = a2->suite_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->suite_id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_spawn_point_id_list) = v5 != 0;
    __asan_report_store4(&this->suite_id, p_spawn_point_id_list);
  }
  this->suite_id = suite_id;
  std::string::basic_string(&this->global_value_key, &a2->global_value_key);
};

// Line 13487: range 0000000011304422-0000000011304493
void __cdecl data::ActivityBreakoutTeleport::~ActivityBreakoutTeleport(data::ActivityBreakoutTeleport *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutTeleport + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  std::vector<data::DynamicFloat>::~vector(&this->spawn_point_id_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13487: range 0000000011304494-00000000113044BE
void __cdecl data::ActivityBreakoutTeleport::~ActivityBreakoutTeleport(data::ActivityBreakoutTeleport *const this)
{
  data::ActivityBreakoutTeleport::~ActivityBreakoutTeleport(this);
  operator delete(this, 0xC8uLL);
};

// Line 13492: range 00000000100BCCE0-00000000100BCCF0
const char *__cdecl data::ActivityBreakoutTeleport::getTypeName(const data::ActivityBreakoutTeleport *const this)
{
  return "ActivityBreakoutTeleport";
};

// Line 13493: range 00000000100BCCF2-00000000100BCE8E
int32_t __cdecl data::ActivityBreakoutTeleport::getHashNum(const data::ActivityBreakoutTeleport *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActivityBreakoutTeleport::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActivityBreakoutTeleport",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13509: range 00000000112021A4-00000000112021E5
void __cdecl data::ActivityBreakoutTeleportFactory::ActivityBreakoutTeleportFactory(
        data::ActivityBreakoutTeleportFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutTeleportFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActivityBreakoutTeleportFactory = v2;
};

// Line 13517: range 00000000112024EE-000000001120254D
void __cdecl data::ActivityBreakoutClearSpawnedBricks::ActivityBreakoutClearSpawnedBricks(
        data::ActivityBreakoutClearSpawnedBricks *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutClearSpawnedBricks + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->suite_id_list);
};

// Line 13517: range 000000001120299C-0000000011202A37
void __cdecl data::ActivityBreakoutClearSpawnedBricks::ActivityBreakoutClearSpawnedBricks(
        data::ActivityBreakoutClearSpawnedBricks *const this,
        const data::ActivityBreakoutClearSpawnedBricks *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutClearSpawnedBricks + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->suite_id_list, &a2->suite_id_list);
};

// Line 13524: range 0000000011304396-00000000113043F5
void __cdecl data::ActivityBreakoutClearSpawnedBricks::~ActivityBreakoutClearSpawnedBricks(
        data::ActivityBreakoutClearSpawnedBricks *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutClearSpawnedBricks + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->suite_id_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13524: range 00000000113043F6-0000000011304420
void __cdecl data::ActivityBreakoutClearSpawnedBricks::~ActivityBreakoutClearSpawnedBricks(
        data::ActivityBreakoutClearSpawnedBricks *const this)
{
  data::ActivityBreakoutClearSpawnedBricks::~ActivityBreakoutClearSpawnedBricks(this);
  operator delete(this, 0xA0uLL);
};

// Line 13529: range 00000000100BCE90-00000000100BCEA0
const char *__cdecl data::ActivityBreakoutClearSpawnedBricks::getTypeName(
        const data::ActivityBreakoutClearSpawnedBricks *const this)
{
  return "ActivityBreakoutClearSpawnedBricks";
};

// Line 13530: range 00000000100BCEA2-00000000100BD03E
int32_t __cdecl data::ActivityBreakoutClearSpawnedBricks::getHashNum(
        const data::ActivityBreakoutClearSpawnedBricks *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActivityBreakoutClearSpawnedBricks::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActivityBreakoutClearSpawnedBricks",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13546: range 0000000011202D20-0000000011202D61
void __cdecl data::ActivityBreakoutClearSpawnedBricksFactory::ActivityBreakoutClearSpawnedBricksFactory(
        data::ActivityBreakoutClearSpawnedBricksFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutClearSpawnedBricksFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActivityBreakoutClearSpawnedBricksFactory = v2;
};

// Line 13554: range 000000001120306A-00000000112030FA
void __cdecl data::ActivityBreakoutChangeWallLevel::ActivityBreakoutChangeWallLevel(
        data::ActivityBreakoutChangeWallLevel *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutChangeWallLevel + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->level, v1);
  }
  this->level = 0;
};

// Line 13554: range 0000000011203544-000000001120361B
void __cdecl data::ActivityBreakoutChangeWallLevel::ActivityBreakoutChangeWallLevel(
        data::ActivityBreakoutChangeWallLevel *const this,
        const data::ActivityBreakoutChangeWallLevel *a2)
{
  int (**v2)(...); // rdx
  uint32_t level; // ecx
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutChangeWallLevel + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->level);
  }
  level = a2->level;
  v4 = *(_BYTE *)(((unsigned __int64)&this->level >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->level, a2);
  }
  this->level = level;
};

// Line 13561: range 000000001130436A-0000000011304394
void __cdecl data::ActivityBreakoutChangeWallLevel::~ActivityBreakoutChangeWallLevel(
        data::ActivityBreakoutChangeWallLevel *const this)
{
  data::ActivityBreakoutChangeWallLevel::~ActivityBreakoutChangeWallLevel(this);
  operator delete(this, 0x90uLL);
};

// Line 13561: range 000000001130431C-0000000011304369
void __cdecl data::ActivityBreakoutChangeWallLevel::~ActivityBreakoutChangeWallLevel(
        data::ActivityBreakoutChangeWallLevel *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutChangeWallLevel + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13566: range 00000000100BD040-00000000100BD050
const char *__cdecl data::ActivityBreakoutChangeWallLevel::getTypeName(
        const data::ActivityBreakoutChangeWallLevel *const this)
{
  return "ActivityBreakoutChangeWallLevel";
};

// Line 13567: range 00000000100BD052-00000000100BD1EE
int32_t __cdecl data::ActivityBreakoutChangeWallLevel::getHashNum(
        const data::ActivityBreakoutChangeWallLevel *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActivityBreakoutChangeWallLevel::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActivityBreakoutChangeWallLevel",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13583: range 0000000011203904-0000000011203945
void __cdecl data::ActivityBreakoutChangeWallLevelFactory::ActivityBreakoutChangeWallLevelFactory(
        data::ActivityBreakoutChangeWallLevelFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutChangeWallLevelFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActivityBreakoutChangeWallLevelFactory = v2;
};

// Line 13591: range 0000000011203C4E-0000000011203CDE
void __cdecl data::DoWatcherSystemStageAction::DoWatcherSystemStageAction(data::DoWatcherSystemStageAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::DoWatcherSystemAction::DoWatcherSystemAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DoWatcherSystemStageAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->stage >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->stage, v1);
  }
  this->stage = 0;
};

// Line 13591: range 0000000011204130-0000000011204207
void __cdecl data::DoWatcherSystemStageAction::DoWatcherSystemStageAction(
        data::DoWatcherSystemStageAction *const this,
        const data::DoWatcherSystemStageAction *a2)
{
  int (**v2)(...); // rdx
  uint32_t stage; // ecx
  char v4; // al

  data::DoWatcherSystemAction::DoWatcherSystemAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoWatcherSystemStageAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->stage >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->stage >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->stage);
  }
  stage = a2->stage;
  v4 = *(_BYTE *)(((unsigned __int64)&this->stage >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->stage, a2);
  }
  this->stage = stage;
};

// Line 13598: range 00000000113042F0-000000001130431A
void __cdecl data::DoWatcherSystemStageAction::~DoWatcherSystemStageAction(
        data::DoWatcherSystemStageAction *const this)
{
  data::DoWatcherSystemStageAction::~DoWatcherSystemStageAction(this);
  operator delete(this, 0x98uLL);
};

// Line 13598: range 00000000113042A2-00000000113042EF
void __cdecl data::DoWatcherSystemStageAction::~DoWatcherSystemStageAction(
        data::DoWatcherSystemStageAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoWatcherSystemStageAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DoWatcherSystemAction::~DoWatcherSystemAction(this);
};

// Line 13603: range 00000000100BD1F0-00000000100BD200
const char *__cdecl data::DoWatcherSystemStageAction::getTypeName(const data::DoWatcherSystemStageAction *const this)
{
  return "DoWatcherSystemStageAction";
};

// Line 13604: range 00000000100BD202-00000000100BD39E
int32_t __cdecl data::DoWatcherSystemStageAction::getHashNum(const data::DoWatcherSystemStageAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoWatcherSystemStageAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoWatcherSystemStageAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13620: range 00000000112044F0-0000000011204531
void __cdecl data::DoWatcherSystemStageActionFactory::DoWatcherSystemStageActionFactory(
        data::DoWatcherSystemStageActionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoWatcherSystemStageActionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoWatcherSystemStageActionFactory = v2;
};

// Line 13628: range 000000001120483A-00000000112048C7
void __cdecl data::SetBulletTrackTarget::SetBulletTrackTarget(data::SetBulletTrackTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetBulletTrackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->not_do_if_track_target_alive >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->not_do_if_track_target_alive, v1, &this->not_do_if_track_target_alive);
  this->not_do_if_track_target_alive = 0;
};

// Line 13628: range 0000000011204D10-0000000011204DE8
void __cdecl data::SetBulletTrackTarget::SetBulletTrackTarget(
        data::SetBulletTrackTarget *const this,
        const data::SetBulletTrackTarget *a2)
{
  int (**v2)(...); // rdx
  bool not_do_if_track_target_alive; // cl
  char v4; // al

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetBulletTrackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&a2->not_do_if_track_target_alive >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->not_do_if_track_target_alive, a2, &a2->not_do_if_track_target_alive);
  not_do_if_track_target_alive = a2->not_do_if_track_target_alive;
  v4 = *(_BYTE *)(((unsigned __int64)&this->not_do_if_track_target_alive >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store1(&this->not_do_if_track_target_alive, a2, &this->not_do_if_track_target_alive);
  }
  this->not_do_if_track_target_alive = not_do_if_track_target_alive;
};

// Line 13635: range 0000000011304276-00000000113042A0
void __cdecl data::SetBulletTrackTarget::~SetBulletTrackTarget(data::SetBulletTrackTarget *const this)
{
  data::SetBulletTrackTarget::~SetBulletTrackTarget(this);
  operator delete(this, 0x90uLL);
};

// Line 13635: range 0000000011304228-0000000011304275
void __cdecl data::SetBulletTrackTarget::~SetBulletTrackTarget(data::SetBulletTrackTarget *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetBulletTrackTarget + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13640: range 00000000100BD3A0-00000000100BD3B0
const char *__cdecl data::SetBulletTrackTarget::getTypeName(const data::SetBulletTrackTarget *const this)
{
  return "SetBulletTrackTarget";
};

// Line 13641: range 00000000100BD3B2-00000000100BD54E
int32_t __cdecl data::SetBulletTrackTarget::getHashNum(const data::SetBulletTrackTarget *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetBulletTrackTarget::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetBulletTrackTarget",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13657: range 00000000112050D2-0000000011205113
void __cdecl data::SetBulletTrackTargetFactory::SetBulletTrackTargetFactory(
        data::SetBulletTrackTargetFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetBulletTrackTargetFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetBulletTrackTargetFactory = v2;
};

// Line 13665: range 000000001120541C-00000000112054F4
void __cdecl data::TriggerGatherCollect::TriggerGatherCollect(data::TriggerGatherCollect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerGatherCollect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->select_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargetsByShape>();
  data::DynamicInt::DynamicInt(&this->max_count, 1);
};

// Line 13665: range 0000000011205948-0000000011205A15
void __cdecl data::TriggerGatherCollect::TriggerGatherCollect(
        data::TriggerGatherCollect *const this,
        const data::TriggerGatherCollect *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerGatherCollect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargetsByShape>::shared_ptr(&this->select_targets, &a2->select_targets);
  data::DynamicInt::DynamicInt(&this->max_count, &a2->max_count);
};

// Line 13673: range 000000001130418A-00000000113041FB
void __cdecl data::TriggerGatherCollect::~TriggerGatherCollect(data::TriggerGatherCollect *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerGatherCollect + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicInt::~DynamicInt(&this->max_count);
  std::shared_ptr<data::SelectTargetsByShape>::~shared_ptr(&this->select_targets);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13673: range 00000000113041FC-0000000011304226
void __cdecl data::TriggerGatherCollect::~TriggerGatherCollect(data::TriggerGatherCollect *const this)
{
  data::TriggerGatherCollect::~TriggerGatherCollect(this);
  operator delete(this, 0xC8uLL);
};

// Line 13678: range 00000000100BD550-00000000100BD560
const char *__cdecl data::TriggerGatherCollect::getTypeName(const data::TriggerGatherCollect *const this)
{
  return "TriggerGatherCollect";
};

// Line 13679: range 00000000100BD562-00000000100BD6FE
int32_t __cdecl data::TriggerGatherCollect::getHashNum(const data::TriggerGatherCollect *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerGatherCollect::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerGatherCollect",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13695: range 0000000011205CFE-0000000011205D3F
void __cdecl data::TriggerGatherCollectFactory::TriggerGatherCollectFactory(
        data::TriggerGatherCollectFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerGatherCollectFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerGatherCollectFactory = v2;
};

// Line 13703: range 0000000011206048-00000000112060A7
void __cdecl data::DoActionsLocal::DoActionsLocal(data::DoActionsLocal *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionsLocal + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 13703: range 00000000112064F6-0000000011206591
void __cdecl data::DoActionsLocal::DoActionsLocal(data::DoActionsLocal *const this, const data::DoActionsLocal *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionsLocal + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &a2->action_list);
};

// Line 13710: range 000000001130415E-0000000011304188
void __cdecl data::DoActionsLocal::~DoActionsLocal(data::DoActionsLocal *const this)
{
  data::DoActionsLocal::~DoActionsLocal(this);
  operator delete(this, 0xA0uLL);
};

// Line 13710: range 00000000113040FE-000000001130415D
void __cdecl data::DoActionsLocal::~DoActionsLocal(data::DoActionsLocal *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionsLocal + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13715: range 00000000100BD700-00000000100BD710
const char *__cdecl data::DoActionsLocal::getTypeName(const data::DoActionsLocal *const this)
{
  return "DoActionsLocal";
};

// Line 13716: range 00000000100BD712-00000000100BD8AE
int32_t __cdecl data::DoActionsLocal::getHashNum(const data::DoActionsLocal *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionsLocal::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionsLocal",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13732: range 000000001120687A-00000000112068BB
void __cdecl data::DoActionsLocalFactory::DoActionsLocalFactory(data::DoActionsLocalFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionsLocalFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionsLocalFactory = v2;
};

// Line 13740: range 0000000011206BC4-0000000011206CFD
void __cdecl data::SetNearestPosIndexToGlobalValue::SetNearestPosIndexToGlobalValue(
        data::SetNearestPosIndexToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetNearestPosIndexToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->src_target, v1);
  }
  this->src_target = Self_0;
  std::string::basic_string(&this->global_value_key);
  std::vector<std::string>::vector(&this->pos_gvlist);
  if ( *(char *)(((unsigned __int64)&this->only_xz >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->only_xz, v1, &this->only_xz);
  this->only_xz = 0;
  v3 = ((_BYTE)this - 55) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->use_farthest >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->use_farthest >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->use_farthest, v3, v4);
  this->use_farthest = 0;
};

// Line 13740: range 0000000011207146-00000000112073A1
void __cdecl data::SetNearestPosIndexToGlobalValue::SetNearestPosIndexToGlobalValue(
        data::SetNearestPosIndexToGlobalValue *const this,
        const data::SetNearestPosIndexToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting src_target; // ecx
  char v4; // al
  data::StringList *p_pos_gvlist; // rsi
  bool only_xz; // cl
  char v7; // al
  __int64 v8; // rsi
  __int64 v9; // rdx
  bool use_farthest; // cl
  char v11; // dl
  __int64 v12; // rdx
  const data::SetNearestPosIndexToGlobalValue *v13; // [rsp+0h] [rbp-20h]

  v13 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetNearestPosIndexToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->src_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->src_target);
  }
  src_target = a2->src_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->src_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->src_target, a2);
  }
  this->src_target = src_target;
  std::string::basic_string(&this->global_value_key, &v13->global_value_key);
  p_pos_gvlist = &v13->pos_gvlist;
  std::vector<std::string>::vector(&this->pos_gvlist, &v13->pos_gvlist);
  if ( *(char *)(((unsigned __int64)&v13->only_xz >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v13->only_xz, p_pos_gvlist, &v13->only_xz);
  only_xz = v13->only_xz;
  v7 = *(_BYTE *)(((unsigned __int64)&this->only_xz >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(p_pos_gvlist) = v7 != 0;
    __asan_report_store1(&this->only_xz, p_pos_gvlist, &this->only_xz);
  }
  this->only_xz = only_xz;
  v8 = ((_BYTE)v13 - 55) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&v13->use_farthest >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&v13->use_farthest >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&v13->use_farthest, v8, v9);
  use_farthest = v13->use_farthest;
  v11 = *(_BYTE *)(((unsigned __int64)&this->use_farthest >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v11 != 0;
  v12 = (v11 != 0) & (unsigned __int8)((((unsigned __int8)this - 55) & 7) >= v11);
  if ( (_BYTE)v12 )
    __asan_report_store1(&this->use_farthest, v8, v12);
  this->use_farthest = use_farthest;
};

// Line 13751: range 00000000113040D2-00000000113040FC
void __cdecl data::SetNearestPosIndexToGlobalValue::~SetNearestPosIndexToGlobalValue(
        data::SetNearestPosIndexToGlobalValue *const this)
{
  data::SetNearestPosIndexToGlobalValue::~SetNearestPosIndexToGlobalValue(this);
  operator delete(this, 0xD0uLL);
};

// Line 13751: range 0000000011304060-00000000113040D1
void __cdecl data::SetNearestPosIndexToGlobalValue::~SetNearestPosIndexToGlobalValue(
        data::SetNearestPosIndexToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetNearestPosIndexToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->pos_gvlist);
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13756: range 00000000100BD8B0-00000000100BD8C0
const char *__cdecl data::SetNearestPosIndexToGlobalValue::getTypeName(
        const data::SetNearestPosIndexToGlobalValue *const this)
{
  return "SetNearestPosIndexToGlobalValue";
};

// Line 13757: range 00000000100BD8C2-00000000100BDA5E
int32_t __cdecl data::SetNearestPosIndexToGlobalValue::getHashNum(
        const data::SetNearestPosIndexToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetNearestPosIndexToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetNearestPosIndexToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13773: range 000000001120768A-00000000112076CB
void __cdecl data::SetNearestPosIndexToGlobalValueFactory::SetNearestPosIndexToGlobalValueFactory(
        data::SetNearestPosIndexToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetNearestPosIndexToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetNearestPosIndexToGlobalValueFactory = v2;
};

// Line 13794: range 0000000011207B34-0000000011207BD6
void __cdecl data::SetGalleryInfoToGlobalValue::SetGalleryInfoToGlobalValue(
        data::SetGalleryInfoToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGalleryInfoToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = GalleryTime;
  std::string::basic_string(&this->global_value_key);
};

// Line 13794: range 0000000011208020-000000001120813A
void __cdecl data::SetGalleryInfoToGlobalValue::SetGalleryInfoToGlobalValue(
        data::SetGalleryInfoToGlobalValue *const this,
        const data::SetGalleryInfoToGlobalValue *a2)
{
  int (**v2)(...); // rdx
  data::SetGalleryInfoToGlobalValueType type; // ecx
  char v4; // al
  const data::SetGalleryInfoToGlobalValue *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGalleryInfoToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  std::string::basic_string(&this->global_value_key, &v5->global_value_key);
};

// Line 13802: range 0000000011304034-000000001130405E
void __cdecl data::SetGalleryInfoToGlobalValue::~SetGalleryInfoToGlobalValue(
        data::SetGalleryInfoToGlobalValue *const this)
{
  data::SetGalleryInfoToGlobalValue::~SetGalleryInfoToGlobalValue(this);
  operator delete(this, 0xB0uLL);
};

// Line 13802: range 0000000011303FD4-0000000011304033
void __cdecl data::SetGalleryInfoToGlobalValue::~SetGalleryInfoToGlobalValue(
        data::SetGalleryInfoToGlobalValue *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGalleryInfoToGlobalValue + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13807: range 00000000100BDA60-00000000100BDA70
const char *__cdecl data::SetGalleryInfoToGlobalValue::getTypeName(const data::SetGalleryInfoToGlobalValue *const this)
{
  return "SetGalleryInfoToGlobalValue";
};

// Line 13808: range 00000000100BDA72-00000000100BDC0E
int32_t __cdecl data::SetGalleryInfoToGlobalValue::getHashNum(const data::SetGalleryInfoToGlobalValue *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGalleryInfoToGlobalValue::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGalleryInfoToGlobalValue",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13824: range 0000000011208424-0000000011208465
void __cdecl data::SetGalleryInfoToGlobalValueFactory::SetGalleryInfoToGlobalValueFactory(
        data::SetGalleryInfoToGlobalValueFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGalleryInfoToGlobalValueFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGalleryInfoToGlobalValueFactory = v2;
};

// Line 13832: range 000000001015633C-00000000101563A1
void __cdecl data::RandomActionGroup::RandomActionGroup(data::RandomActionGroup *const this)
{
  __int64 v1; // rsi

  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->random_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 13832: range 0000000010DE2F76-0000000010DE304F
void __cdecl data::RandomActionGroup::RandomActionGroup(
        data::RandomActionGroup *const this,
        const data::RandomActionGroup *a2)
{
  data::ConfigAbilityActionArray *p_action_queue; // rsi
  bool is_json_loaded; // cl
  char v4; // al

  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->random_predicates, &a2->random_predicates);
  p_action_queue = &a2->action_queue;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, p_action_queue);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_action_queue, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_action_queue) = v4 != 0;
    __asan_report_store1(&this->is_json_loaded, p_action_queue, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 13832: range 0000000010555F72-0000000010556028
void __cdecl data::RandomActionGroup::RandomActionGroup(
        data::RandomActionGroup *const this,
        data::RandomActionGroup *a2)
{
  std::vector<std::shared_ptr<data::ConfigAbilityAction>> *p_action_queue; // rsi
  bool is_json_loaded; // cl
  char v4; // al

  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->random_predicates, &a2->random_predicates);
  p_action_queue = &a2->action_queue;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, p_action_queue);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_action_queue, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_action_queue) = v4 != 0;
    __asan_report_store1(&this->is_json_loaded, p_action_queue, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 13832: range 00000000101563A2-00000000101563CC
void __cdecl data::RandomActionGroup::~RandomActionGroup(data::RandomActionGroup *const this)
{
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->random_predicates);
};

// Line 13861: range 00000000112087A6-0000000011208848
void __cdecl data::RandomAction::RandomAction(data::RandomAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::RandomAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->random_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->random_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->random_count, v1);
  }
  this->random_count = 0;
  std::vector<data::RandomActionGroup>::vector(&this->random_queue);
};

// Line 13861: range 0000000011208C8C-0000000011208DA6
void __cdecl data::RandomAction::RandomAction(data::RandomAction *const this, const data::RandomAction *a2)
{
  int (**v2)(...); // rdx
  int32_t random_count; // ecx
  char v4; // al
  const data::RandomAction *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RandomAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->random_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->random_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->random_count);
  }
  random_count = a2->random_count;
  v4 = *(_BYTE *)(((unsigned __int64)&this->random_count >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->random_count, a2);
  }
  this->random_count = random_count;
  std::vector<data::RandomActionGroup>::vector(&this->random_queue, &v5->random_queue);
};

// Line 13869: range 0000000011303FA8-0000000011303FD2
void __cdecl data::RandomAction::~RandomAction(data::RandomAction *const this)
{
  data::RandomAction::~RandomAction(this);
  operator delete(this, 0xA8uLL);
};

// Line 13869: range 0000000011303F48-0000000011303FA7
void __cdecl data::RandomAction::~RandomAction(data::RandomAction *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RandomAction + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::RandomActionGroup>::~vector(&this->random_queue);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13874: range 00000000100BDC10-00000000100BDC20
const char *__cdecl data::RandomAction::getTypeName(const data::RandomAction *const this)
{
  return "RandomAction";
};

// Line 13875: range 00000000100BDC22-00000000100BDDBE
int32_t __cdecl data::RandomAction::getHashNum(const data::RandomAction *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RandomAction::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RandomAction",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13891: range 0000000011209090-00000000112090D1
void __cdecl data::RandomActionFactory::RandomActionFactory(data::RandomActionFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RandomActionFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RandomActionFactory = v2;
};

// Line 13899: range 00000000112093DA-0000000011209427
void __cdecl data::TriggerVehicleOff::TriggerVehicleOff(data::TriggerVehicleOff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerVehicleOff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 13899: range 0000000011209876-00000000112098CE
void __cdecl data::TriggerVehicleOff::TriggerVehicleOff(
        data::TriggerVehicleOff *const this,
        const data::TriggerVehicleOff *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerVehicleOff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 13905: range 0000000011303ECE-0000000011303F1B
void __cdecl data::TriggerVehicleOff::~TriggerVehicleOff(data::TriggerVehicleOff *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerVehicleOff + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13905: range 0000000011303F1C-0000000011303F46
void __cdecl data::TriggerVehicleOff::~TriggerVehicleOff(data::TriggerVehicleOff *const this)
{
  data::TriggerVehicleOff::~TriggerVehicleOff(this);
  operator delete(this, 0x88uLL);
};

// Line 13910: range 00000000100BDDC0-00000000100BDDD0
const char *__cdecl data::TriggerVehicleOff::getTypeName(const data::TriggerVehicleOff *const this)
{
  return "TriggerVehicleOff";
};

// Line 13911: range 00000000100BDDD2-00000000100BDF6E
int32_t __cdecl data::TriggerVehicleOff::getHashNum(const data::TriggerVehicleOff *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerVehicleOff::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerVehicleOff",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13927: range 0000000011209BB8-0000000011209BF9
void __cdecl data::TriggerVehicleOffFactory::TriggerVehicleOffFactory(data::TriggerVehicleOffFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerVehicleOffFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerVehicleOffFactory = v2;
};

// Line 13935: range 0000000011209F02-0000000011209FA4
void __cdecl data::UpdateWeatherWizardEnergy::UpdateWeatherWizardEnergy(data::UpdateWeatherWizardEnergy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityAction::ConfigAbilityAction(this);
  v2 = (int (**)(...))(&`vtable for'data::UpdateWeatherWizardEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->material_id, v1);
  }
  this->material_id = 0;
  std::string::basic_string(&this->global_value_key);
};

// Line 13935: range 000000001120A3EE-000000001120A508
void __cdecl data::UpdateWeatherWizardEnergy::UpdateWeatherWizardEnergy(
        data::UpdateWeatherWizardEnergy *const this,
        const data::UpdateWeatherWizardEnergy *a2)
{
  int (**v2)(...); // rdx
  uint32_t material_id; // ecx
  char v4; // al
  const data::UpdateWeatherWizardEnergy *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityAction::ConfigAbilityAction(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UpdateWeatherWizardEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->material_id);
  }
  material_id = a2->material_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->material_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->material_id, a2);
  }
  this->material_id = material_id;
  std::string::basic_string(&this->global_value_key, &v5->global_value_key);
};

// Line 13943: range 0000000011303E42-0000000011303EA1
void __cdecl data::UpdateWeatherWizardEnergy::~UpdateWeatherWizardEnergy(data::UpdateWeatherWizardEnergy *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UpdateWeatherWizardEnergy + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityAction::~ConfigAbilityAction(this);
};

// Line 13943: range 0000000011303EA2-0000000011303ECC
void __cdecl data::UpdateWeatherWizardEnergy::~UpdateWeatherWizardEnergy(data::UpdateWeatherWizardEnergy *const this)
{
  data::UpdateWeatherWizardEnergy::~UpdateWeatherWizardEnergy(this);
  operator delete(this, 0xB0uLL);
};

// Line 13948: range 00000000100BDF70-00000000100BDF80
const char *__cdecl data::UpdateWeatherWizardEnergy::getTypeName(const data::UpdateWeatherWizardEnergy *const this)
{
  return "UpdateWeatherWizardEnergy";
};

// Line 13949: range 00000000100BDF82-00000000100BE11E
int32_t __cdecl data::UpdateWeatherWizardEnergy::getHashNum(const data::UpdateWeatherWizardEnergy *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UpdateWeatherWizardEnergy::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UpdateWeatherWizardEnergy",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 13965: range 000000001120A7F2-000000001120A833
void __cdecl data::UpdateWeatherWizardEnergyFactory::UpdateWeatherWizardEnergyFactory(
        data::UpdateWeatherWizardEnergyFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UpdateWeatherWizardEnergyFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UpdateWeatherWizardEnergyFactory = v2;
};
