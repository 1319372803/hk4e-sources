// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/json_data_auto/ComponentDefines/Ability/ConfigAbilityMixin.h

// Line 41: range 000000001015D04C-000000001015D0D1
void __cdecl data::ConfigAbilityStateToActions::ConfigAbilityStateToActions(
        data::ConfigAbilityStateToActions *const this)
{
  __int64 v1; // rsi

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->ability_state = None_5;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 41: range 000000000D426244-000000000D426337
void __cdecl data::ConfigAbilityStateToActions::ConfigAbilityStateToActions(
        data::ConfigAbilityStateToActions *const this,
        const data::ConfigAbilityStateToActions *a2)
{
  data::AbilityState ability_state; // rdx
  data::ConfigAbilityActionArray *p_actions; // rsi
  bool is_json_loaded; // cl
  char v5; // al

  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  ability_state = a2->ability_state;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->ability_state = ability_state;
  p_actions = &a2->actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_actions, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_actions) = v5 != 0;
    __asan_report_store1(&this->is_json_loaded, p_actions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 41: range 000000001056016A-000000001056025D
void __cdecl data::ConfigAbilityStateToActions::ConfigAbilityStateToActions(
        data::ConfigAbilityStateToActions *const this,
        data::ConfigAbilityStateToActions *a2)
{
  data::AbilityState ability_state; // rdx
  data::ConfigAbilityActionArray *p_actions; // rsi
  bool is_json_loaded; // cl
  char v5; // al

  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) )
    __asan_report_load8(a2);
  ability_state = a2->ability_state;
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->ability_state = ability_state;
  p_actions = &a2->actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_actions, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_actions) = v5 != 0;
    __asan_report_store1(&this->is_json_loaded, p_actions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 70: range 0000000011211EAA-0000000011211F37
void __cdecl data::ConfigAbilityMixin::ConfigAbilityMixin(data::ConfigAbilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::BaseActionContainer::BaseActionContainer((data::BaseActionContainer *const)this);
  v2 = (int (**)(...))(&`vtable for'data::ConfigAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 29) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_unique >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_unique >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_unique, v3, v4);
  this->is_unique = 0;
};

// Line 70: range 000000000F7CC43E-000000000F7CC516
void __cdecl data::ConfigAbilityMixin::ConfigAbilityMixin(
        data::ConfigAbilityMixin *const this,
        const data::ConfigAbilityMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool is_unique; // cl
  char v6; // dl
  __int64 v7; // rdx

  data::BaseActionContainer::BaseActionContainer(
    (data::BaseActionContainer *const)this,
    (const data::BaseActionContainer *)a2);
  v2 = (int (**)(...))(&`vtable for'data::ConfigAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 29) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->is_unique >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->is_unique >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->is_unique, v3, v4);
  is_unique = a2->is_unique;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_unique >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 29) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_unique, v3, v7);
  this->is_unique = is_unique;
};

// Line 75: range 000000000D4263A6-000000000D4263C4
void __cdecl data::ConfigAbilityStateToActions::~ConfigAbilityStateToActions(
        data::ConfigAbilityStateToActions *const this)
{
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
};

// Line 77: range 000000000F7CD69E-000000000F7CD6C8
void __cdecl data::ConfigAbilityMixin::~ConfigAbilityMixin(data::ConfigAbilityMixin *const this)
{
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 77: range 000000000F7CD650-000000000F7CD69D
void __cdecl data::ConfigAbilityMixin::~ConfigAbilityMixin(data::ConfigAbilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ConfigAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::BaseActionContainer::~BaseActionContainer((data::BaseActionContainer *const)this);
};

// Line 82: range 00000000100BE120-00000000100BE130
const char *__cdecl data::ConfigAbilityMixin::getTypeName(const data::ConfigAbilityMixin *const this)
{
  return "ConfigAbilityMixin";
};

// Line 83: range 00000000100BE132-00000000100BE2CE
int32_t __cdecl data::ConfigAbilityMixin::getHashNum(const data::ConfigAbilityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigAbilityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ConfigAbilityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 90: range 00000000100BE2D0-00000000100BE2FA
BaseAbilityMixinPtr __cdecl data::ConfigAbilityMixin::createAbilityMixin(
        data::ConfigAbilityMixin *const this,
        MixinParam *param)
{
  BaseAbilityMixinPtr result; // rax

  std::shared_ptr<BaseAbilityMixin>::shared_ptr((std::shared_ptr<BaseAbilityMixin> *const)this, 0LL);
  result._M_ptr = (std::__shared_ptr<BaseAbilityMixin,(__gnu_cxx::_Lock_policy)2>::element_type *)this;
  return result;
};

// Line 111: range 000000001121277C-00000000112127C9
void __cdecl data::DebugMixin::DebugMixin(data::DebugMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DebugMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 111: range 0000000011212CCA-0000000011212D22
void __cdecl data::DebugMixin::DebugMixin(data::DebugMixin *const this, const data::DebugMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DebugMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 117: range 000000001130397C-00000000113039A6
void __cdecl data::DebugMixin::~DebugMixin(data::DebugMixin *const this)
{
  data::DebugMixin::~DebugMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 117: range 000000001130392E-000000001130397B
void __cdecl data::DebugMixin::~DebugMixin(data::DebugMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DebugMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 122: range 00000000100BE2FC-00000000100BE30C
const char *__cdecl data::DebugMixin::getTypeName(const data::DebugMixin *const this)
{
  return "DebugMixin";
};

// Line 123: range 00000000100BE30E-00000000100BE4AA
int32_t __cdecl data::DebugMixin::getHashNum(const data::DebugMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DebugMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DebugMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 139: range 0000000011212F6C-0000000011212FAD
void __cdecl data::DebugMixinFactory::DebugMixinFactory(data::DebugMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DebugMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DebugMixinFactory = v2;
};

// Line 147: range 00000000112132B6-0000000011213341
void __cdecl data::RelyOnElementMixin::RelyOnElementMixin(data::RelyOnElementMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::RelyOnElementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->element_type, v1);
  }
  this->element_type = None_0;
};

// Line 147: range 0000000011213716-00000000112137E3
void __cdecl data::RelyOnElementMixin::RelyOnElementMixin(
        data::RelyOnElementMixin *const this,
        const data::RelyOnElementMixin *a2)
{
  int (**v2)(...); // rdx
  data::ElementType element_type; // ecx
  char v4; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RelyOnElementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->element_type);
  }
  element_type = a2->element_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->element_type, a2);
  }
  this->element_type = element_type;
};

// Line 154: range 0000000011303902-000000001130392C
void __cdecl data::RelyOnElementMixin::~RelyOnElementMixin(data::RelyOnElementMixin *const this)
{
  data::RelyOnElementMixin::~RelyOnElementMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 154: range 00000000113038B4-0000000011303901
void __cdecl data::RelyOnElementMixin::~RelyOnElementMixin(data::RelyOnElementMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RelyOnElementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 159: range 00000000100BE4AC-00000000100BE4BC
const char *__cdecl data::RelyOnElementMixin::getTypeName(const data::RelyOnElementMixin *const this)
{
  return "RelyOnElementMixin";
};

// Line 160: range 00000000100BE4BE-00000000100BE65A
int32_t __cdecl data::RelyOnElementMixin::getHashNum(const data::RelyOnElementMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RelyOnElementMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RelyOnElementMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 176: range 0000000011213A2C-0000000011213A6D
void __cdecl data::RelyOnElementMixinFactory::RelyOnElementMixinFactory(data::RelyOnElementMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RelyOnElementMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RelyOnElementMixinFactory = v2;
};

// Line 184: range 0000000011213D76-0000000011213DE3
void __cdecl data::ReplaceEventPatternMixin::ReplaceEventPatternMixin(data::ReplaceEventPatternMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ReplaceEventPatternMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->old_patterns);
  std::vector<std::string>::vector(&this->new_patterns);
};

// Line 184: range 0000000011214208-00000000112142CE
void __cdecl data::ReplaceEventPatternMixin::ReplaceEventPatternMixin(
        data::ReplaceEventPatternMixin *const this,
        const data::ReplaceEventPatternMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReplaceEventPatternMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->old_patterns, &a2->old_patterns);
  std::vector<std::string>::vector(&this->new_patterns, &a2->new_patterns);
};

// Line 192: range 0000000011303888-00000000113038B2
void __cdecl data::ReplaceEventPatternMixin::~ReplaceEventPatternMixin(data::ReplaceEventPatternMixin *const this)
{
  data::ReplaceEventPatternMixin::~ReplaceEventPatternMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 192: range 000000001130381A-0000000011303887
void __cdecl data::ReplaceEventPatternMixin::~ReplaceEventPatternMixin(data::ReplaceEventPatternMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReplaceEventPatternMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->new_patterns);
  std::vector<std::string>::~vector(&this->old_patterns);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 197: range 00000000100BE65C-00000000100BE66C
const char *__cdecl data::ReplaceEventPatternMixin::getTypeName(const data::ReplaceEventPatternMixin *const this)
{
  return "ReplaceEventPatternMixin";
};

// Line 198: range 00000000100BE66E-00000000100BE80A
int32_t __cdecl data::ReplaceEventPatternMixin::getHashNum(const data::ReplaceEventPatternMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReplaceEventPatternMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReplaceEventPatternMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 214: range 00000000112145B8-00000000112145F9
void __cdecl data::ReplaceEventPatternMixinFactory::ReplaceEventPatternMixinFactory(
        data::ReplaceEventPatternMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReplaceEventPatternMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReplaceEventPatternMixinFactory = v2;
};

// Line 222: range 0000000011214902-0000000011214A1A
void __cdecl data::AttachToStateIDMixin::AttachToStateIDMixin(data::AttachToStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids);
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target, v1);
  }
  this->target = Self_0;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(char *)(((unsigned __int64)&this->is_check_on_attach >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_check_on_attach, v1, &this->is_check_on_attach);
  this->is_check_on_attach = 0;
  std::vector<std::string>::vector(&this->animator_white_list);
  std::vector<std::string>::vector(&this->animator_black_list);
};

// Line 222: range 0000000011214DD0-0000000011215016
void __cdecl data::AttachToStateIDMixin::AttachToStateIDMixin(
        data::AttachToStateIDMixin *const this,
        const data::AttachToStateIDMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  data::AbilityTargetting target; // ecx
  char v5; // al
  data::ConfigAbilityPredicateArray *p_predicates; // rsi
  bool is_check_on_attach; // cl
  char v8; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids, &a2->state_ids);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target);
  }
  target = a2->target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store4(&this->target, p_modifier_name);
  }
  this->target = target;
  p_predicates = &a2->predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(char *)(((unsigned __int64)&a2->is_check_on_attach >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_check_on_attach, p_predicates, &a2->is_check_on_attach);
  is_check_on_attach = a2->is_check_on_attach;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_check_on_attach >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(p_predicates) = v8 != 0;
    __asan_report_store1(&this->is_check_on_attach, p_predicates, &this->is_check_on_attach);
  }
  this->is_check_on_attach = is_check_on_attach;
  std::vector<std::string>::vector(&this->animator_white_list, &a2->animator_white_list);
  std::vector<std::string>::vector(&this->animator_black_list, &a2->animator_black_list);
};

// Line 235: range 0000000011217992-00000000112179BC
void __cdecl data::AttachToStateIDMixin::~AttachToStateIDMixin(data::AttachToStateIDMixin *const this)
{
  data::AttachToStateIDMixin::~AttachToStateIDMixin(this);
  operator delete(this, 0xB0uLL);
};

// Line 235: range 00000000112178F2-0000000011217991
void __cdecl data::AttachToStateIDMixin::~AttachToStateIDMixin(data::AttachToStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->animator_black_list);
  std::vector<std::string>::~vector(&this->animator_white_list);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::string::~string(&this->modifier_name);
  std::vector<std::string>::~vector(&this->state_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 240: range 00000000100BE80C-00000000100BE81C
const char *__cdecl data::AttachToStateIDMixin::getTypeName(const data::AttachToStateIDMixin *const this)
{
  return "AttachToStateIDMixin";
};

// Line 241: range 00000000100BE81E-00000000100BE9BA
int32_t __cdecl data::AttachToStateIDMixin::getHashNum(const data::AttachToStateIDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToStateIDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToStateIDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 260: range 0000000011215300-0000000011215398
void __cdecl data::AttachToMonsterAirStateMixin::AttachToMonsterAirStateMixin(
        data::AttachToMonsterAirStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToMonsterAirStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
  if ( *(char *)(((unsigned __int64)&this->is_air_move >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_air_move, v1, &this->is_air_move);
  this->is_air_move = 0;
};

// Line 260: range 00000000112157B4-00000000112158C0
void __cdecl data::AttachToMonsterAirStateMixin::AttachToMonsterAirStateMixin(
        data::AttachToMonsterAirStateMixin *const this,
        const data::AttachToMonsterAirStateMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  bool is_air_move; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToMonsterAirStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(char *)(((unsigned __int64)&a2->is_air_move >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_air_move, p_modifier_name, &a2->is_air_move);
  is_air_move = a2->is_air_move;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_air_move >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store1(&this->is_air_move, p_modifier_name, &this->is_air_move);
  }
  this->is_air_move = is_air_move;
};

// Line 268: range 0000000011303790-00000000113037ED
void __cdecl data::AttachToMonsterAirStateMixin::~AttachToMonsterAirStateMixin(
        data::AttachToMonsterAirStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToMonsterAirStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 268: range 00000000113037EE-0000000011303818
void __cdecl data::AttachToMonsterAirStateMixin::~AttachToMonsterAirStateMixin(
        data::AttachToMonsterAirStateMixin *const this)
{
  data::AttachToMonsterAirStateMixin::~AttachToMonsterAirStateMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 273: range 00000000100BE9BC-00000000100BE9CC
const char *__cdecl data::AttachToMonsterAirStateMixin::getTypeName(
        const data::AttachToMonsterAirStateMixin *const this)
{
  return "AttachToMonsterAirStateMixin";
};

// Line 274: range 00000000100BE9CE-00000000100BEB6A
int32_t __cdecl data::AttachToMonsterAirStateMixin::getHashNum(const data::AttachToMonsterAirStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToMonsterAirStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToMonsterAirStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 290: range 0000000011215BAA-0000000011215BEB
void __cdecl data::AttachToMonsterAirStateMixinFactory::AttachToMonsterAirStateMixinFactory(
        data::AttachToMonsterAirStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToMonsterAirStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToMonsterAirStateMixinFactory = v2;
};

// Line 296: range 000000001125124A-0000000011251490
void __cdecl data::DoActionByEnergyChangeMixin::DoActionByEnergyChangeMixin(
        data::DoActionByEnergyChangeMixin *const this,
        const data::DoActionByEnergyChangeMixin *a2)
{
  int (**v2)(...); // rdx
  data::AvatarStageType type; // ecx
  char v4; // al
  data::ConfigElementTypeList *p_element_types; // rsi
  bool do_when_energy_max; // cl
  char v7; // al
  const data::DoActionByEnergyChangeMixin *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByEnergyChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  p_element_types = &v8->element_types;
  std::vector<data::ElementType>::vector(&this->element_types, &v8->element_types);
  if ( *(char *)(((unsigned __int64)&v8->do_when_energy_max >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v8->do_when_energy_max, p_element_types, &v8->do_when_energy_max);
  do_when_energy_max = v8->do_when_energy_max;
  v7 = *(_BYTE *)(((unsigned __int64)&this->do_when_energy_max >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(p_element_types) = v7 != 0;
    __asan_report_store1(&this->do_when_energy_max, p_element_types, &this->do_when_energy_max);
  }
  this->do_when_energy_max = do_when_energy_max;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_gain_energy_by_ball,
    &v8->on_gain_energy_by_ball);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_gain_energy_by_other,
    &v8->on_gain_energy_by_other);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_gain_energy_by_all,
    &v8->on_gain_energy_by_all);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_gain_energy_max, &v8->on_gain_energy_max);
};

// Line 298: range 0000000011215EF4-0000000011216043
void __cdecl data::AttachToNormalizedTimeMixin::AttachToNormalizedTimeMixin(
        data::AttachToNormalizedTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToNormalizedTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->state_id);
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target, v1);
  }
  this->target = Self_0;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->normalize_start, v1);
  }
  this->normalize_start = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->normalize_end, (((_BYTE)this - 124) & 7u) + 3);
  }
  this->normalize_end = 1.0;
};

// Line 298: range 00000000112163FE-0000000011216679
void __cdecl data::AttachToNormalizedTimeMixin::AttachToNormalizedTimeMixin(
        data::AttachToNormalizedTimeMixin *const this,
        const data::AttachToNormalizedTimeMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  data::AbilityTargetting target; // ecx
  char v5; // al
  float normalize_start; // xmm0_4
  float normalize_end; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToNormalizedTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->state_id, &a2->state_id);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target);
  }
  target = a2->target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store4(&this->target, p_modifier_name);
  }
  this->target = target;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->normalize_start);
  }
  normalize_start = a2->normalize_start;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->normalize_start, &a2->predicates);
  }
  this->normalize_start = normalize_start;
  if ( *(_BYTE *)(((unsigned __int64)&a2->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->normalize_end);
  }
  normalize_end = a2->normalize_end;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->normalize_end, (((_BYTE)this - 124) & 7u) + 3);
  }
  this->normalize_end = normalize_end;
};

// Line 310: range 00000000113036E6-0000000011303763
void __cdecl data::AttachToNormalizedTimeMixin::~AttachToNormalizedTimeMixin(
        data::AttachToNormalizedTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToNormalizedTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::string::~string(&this->modifier_name);
  std::string::~string(&this->state_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 310: range 0000000011303764-000000001130378E
void __cdecl data::AttachToNormalizedTimeMixin::~AttachToNormalizedTimeMixin(
        data::AttachToNormalizedTimeMixin *const this)
{
  data::AttachToNormalizedTimeMixin::~AttachToNormalizedTimeMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 315: range 00000000100BEB6C-00000000100BEB7C
const char *__cdecl data::AttachToNormalizedTimeMixin::getTypeName(const data::AttachToNormalizedTimeMixin *const this)
{
  return "AttachToNormalizedTimeMixin";
};

// Line 316: range 00000000100BEB7E-00000000100BED1A
int32_t __cdecl data::AttachToNormalizedTimeMixin::getHashNum(const data::AttachToNormalizedTimeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToNormalizedTimeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToNormalizedTimeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 332: range 0000000011216962-00000000112169A3
void __cdecl data::AttachToNormalizedTimeMixinFactory::AttachToNormalizedTimeMixinFactory(
        data::AttachToNormalizedTimeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToNormalizedTimeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToNormalizedTimeMixinFactory = v2;
};

// Line 340: range 000000001015E13A-000000001015E21B
void __cdecl data::AttachToMultiNormalizedTimeMixinItem::AttachToMultiNormalizedTimeMixinItem(
        data::AttachToMultiNormalizedTimeMixinItem *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi

  std::string::basic_string(this);
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->normalize_start, v1);
  }
  this->normalize_start = 0.0;
  v2 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->normalize_end, v2);
  }
  this->normalize_end = 1.0;
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v2, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 340: range 0000000010DF1954-0000000010DF1AEF
void __cdecl data::AttachToMultiNormalizedTimeMixinItem::AttachToMultiNormalizedTimeMixinItem(
        data::AttachToMultiNormalizedTimeMixinItem *const this,
        const data::AttachToMultiNormalizedTimeMixinItem *a2)
{
  float normalize_start; // xmm0_4
  float normalize_end; // xmm0_4
  __int64 v4; // rsi
  bool is_json_loaded; // cl
  char v6; // al

  std::string::basic_string(this, a2);
  if ( *(_BYTE *)(((unsigned __int64)&a2->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->normalize_start);
  }
  normalize_start = a2->normalize_start;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->normalize_start, a2);
  }
  this->normalize_start = normalize_start;
  if ( *(_BYTE *)(((unsigned __int64)&a2->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->normalize_end);
  }
  normalize_end = a2->normalize_end;
  v4 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->normalize_end, v4);
  }
  this->normalize_end = normalize_end;
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, v4, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store1(&this->is_json_loaded, v4, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 340: range 0000000010563B22-0000000010563CBD
void __cdecl data::AttachToMultiNormalizedTimeMixinItem::AttachToMultiNormalizedTimeMixinItem(
        data::AttachToMultiNormalizedTimeMixinItem *const this,
        data::AttachToMultiNormalizedTimeMixinItem *a2)
{
  float normalize_start; // xmm0_4
  float normalize_end; // xmm0_4
  __int64 v4; // rsi
  bool is_json_loaded; // cl
  char v6; // al

  std::string::basic_string(this, a2);
  if ( *(_BYTE *)(((unsigned __int64)&a2->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->normalize_start);
  }
  normalize_start = a2->normalize_start;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->normalize_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->normalize_start, a2);
  }
  this->normalize_start = normalize_start;
  if ( *(_BYTE *)(((unsigned __int64)&a2->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->normalize_end);
  }
  normalize_end = a2->normalize_end;
  v4 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->normalize_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->normalize_end, v4);
  }
  this->normalize_end = normalize_end;
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, v4, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store1(&this->is_json_loaded, v4, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 340: range 000000001015E21C-000000001015E236
void __cdecl data::AttachToMultiNormalizedTimeMixinItem::~AttachToMultiNormalizedTimeMixinItem(
        data::AttachToMultiNormalizedTimeMixinItem *const this)
{
  std::string::~string(this);
};

// Line 370: range 0000000011216CE4-0000000011216D9F
void __cdecl data::AttachToMultiNormalizedTimeMixin::AttachToMultiNormalizedTimeMixin(
        data::AttachToMultiNormalizedTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToMultiNormalizedTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::AttachToMultiNormalizedTimeMixinItem>::vector(&this->normalized_state_idlist);
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target, v1);
  }
  this->target = Self_0;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
};

// Line 370: range 0000000011217154-00000000112172BF
void __cdecl data::AttachToMultiNormalizedTimeMixin::AttachToMultiNormalizedTimeMixin(
        data::AttachToMultiNormalizedTimeMixin *const this,
        const data::AttachToMultiNormalizedTimeMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  data::AbilityTargetting target; // ecx
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToMultiNormalizedTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::AttachToMultiNormalizedTimeMixinItem>::vector(
    &this->normalized_state_idlist,
    &a2->normalized_state_idlist);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target);
  }
  target = a2->target;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store4(&this->target, p_modifier_name);
  }
  this->target = target;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
};

// Line 380: range 000000001130363C-00000000113036B9
void __cdecl data::AttachToMultiNormalizedTimeMixin::~AttachToMultiNormalizedTimeMixin(
        data::AttachToMultiNormalizedTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToMultiNormalizedTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::string::~string(&this->modifier_name);
  std::vector<data::AttachToMultiNormalizedTimeMixinItem>::~vector(&this->normalized_state_idlist);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 380: range 00000000113036BA-00000000113036E4
void __cdecl data::AttachToMultiNormalizedTimeMixin::~AttachToMultiNormalizedTimeMixin(
        data::AttachToMultiNormalizedTimeMixin *const this)
{
  data::AttachToMultiNormalizedTimeMixin::~AttachToMultiNormalizedTimeMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 385: range 00000000100BED1C-00000000100BED2C
const char *__cdecl data::AttachToMultiNormalizedTimeMixin::getTypeName(
        const data::AttachToMultiNormalizedTimeMixin *const this)
{
  return "AttachToMultiNormalizedTimeMixin";
};

// Line 386: range 00000000100BED2E-00000000100BEECA
int32_t __cdecl data::AttachToMultiNormalizedTimeMixin::getHashNum(
        const data::AttachToMultiNormalizedTimeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToMultiNormalizedTimeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToMultiNormalizedTimeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 402: range 00000000112175A8-00000000112175E9
void __cdecl data::AttachToMultiNormalizedTimeMixinFactory::AttachToMultiNormalizedTimeMixinFactory(
        data::AttachToMultiNormalizedTimeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToMultiNormalizedTimeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToMultiNormalizedTimeMixinFactory = v2;
};

// Line 410: range 00000000112179BE-0000000011217A0B
void __cdecl data::AttachToAnimatorStateIDMixin::AttachToAnimatorStateIDMixin(
        data::AttachToAnimatorStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::AttachToStateIDMixin::AttachToStateIDMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToAnimatorStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 410: range 0000000011217DC0-0000000011217E18
void __cdecl data::AttachToAnimatorStateIDMixin::AttachToAnimatorStateIDMixin(
        data::AttachToAnimatorStateIDMixin *const this,
        const data::AttachToAnimatorStateIDMixin *a2)
{
  int (**v2)(...); // rdx

  data::AttachToStateIDMixin::AttachToStateIDMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToAnimatorStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 416: range 0000000011303610-000000001130363A
void __cdecl data::AttachToAnimatorStateIDMixin::~AttachToAnimatorStateIDMixin(
        data::AttachToAnimatorStateIDMixin *const this)
{
  data::AttachToAnimatorStateIDMixin::~AttachToAnimatorStateIDMixin(this);
  operator delete(this, 0xB0uLL);
};

// Line 416: range 00000000113035C2-000000001130360F
void __cdecl data::AttachToAnimatorStateIDMixin::~AttachToAnimatorStateIDMixin(
        data::AttachToAnimatorStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToAnimatorStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::AttachToStateIDMixin::~AttachToStateIDMixin(this);
};

// Line 421: range 00000000100BEECC-00000000100BEEDC
const char *__cdecl data::AttachToAnimatorStateIDMixin::getTypeName(
        const data::AttachToAnimatorStateIDMixin *const this)
{
  return "AttachToAnimatorStateIDMixin";
};

// Line 422: range 00000000100BEEDE-00000000100BF07A
int32_t __cdecl data::AttachToAnimatorStateIDMixin::getHashNum(const data::AttachToAnimatorStateIDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToAnimatorStateIDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToAnimatorStateIDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 438: range 0000000011218102-0000000011218143
void __cdecl data::AttachToAnimatorStateIDMixinFactory::AttachToAnimatorStateIDMixinFactory(
        data::AttachToAnimatorStateIDMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToAnimatorStateIDMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToAnimatorStateIDMixinFactory = v2;
};

// Line 446: range 000000001121844C-00000000112184B9
void __cdecl data::AttachToPoseIDMixin::AttachToPoseIDMixin(data::AttachToPoseIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToPoseIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->pose_ids);
  std::string::basic_string(&this->modifier_name);
};

// Line 446: range 0000000011218874-000000001121893A
void __cdecl data::AttachToPoseIDMixin::AttachToPoseIDMixin(
        data::AttachToPoseIDMixin *const this,
        const data::AttachToPoseIDMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToPoseIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->pose_ids, &a2->pose_ids);
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 454: range 0000000011303596-00000000113035C0
void __cdecl data::AttachToPoseIDMixin::~AttachToPoseIDMixin(data::AttachToPoseIDMixin *const this)
{
  data::AttachToPoseIDMixin::~AttachToPoseIDMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 454: range 0000000011303528-0000000011303595
void __cdecl data::AttachToPoseIDMixin::~AttachToPoseIDMixin(data::AttachToPoseIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToPoseIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  std::vector<int>::~vector(&this->pose_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 459: range 00000000100BF07C-00000000100BF08C
const char *__cdecl data::AttachToPoseIDMixin::getTypeName(const data::AttachToPoseIDMixin *const this)
{
  return "AttachToPoseIDMixin";
};

// Line 460: range 00000000100BF08E-00000000100BF22A
int32_t __cdecl data::AttachToPoseIDMixin::getHashNum(const data::AttachToPoseIDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToPoseIDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToPoseIDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 476: range 0000000011218C24-0000000011218C65
void __cdecl data::AttachToPoseIDMixinFactory::AttachToPoseIDMixinFactory(data::AttachToPoseIDMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToPoseIDMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToPoseIDMixinFactory = v2;
};

// Line 484: range 0000000011218F6E-0000000011219009
void __cdecl data::AttachToGadgetStateMixin::AttachToGadgetStateMixin(data::AttachToGadgetStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->gadget_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->gadget_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->gadget_state, v1);
  }
  this->gadget_state = 0;
  std::string::basic_string(&this->modifier_name);
};

// Line 484: range 0000000011219424-000000001121952F
void __cdecl data::AttachToGadgetStateMixin::AttachToGadgetStateMixin(
        data::AttachToGadgetStateMixin *const this,
        const data::AttachToGadgetStateMixin *a2)
{
  int (**v2)(...); // rdx
  int32_t gadget_state; // ecx
  char v4; // al
  const data::AttachToGadgetStateMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->gadget_state >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->gadget_state >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->gadget_state);
  }
  gadget_state = a2->gadget_state;
  v4 = *(_BYTE *)(((unsigned __int64)&this->gadget_state >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->gadget_state, a2);
  }
  this->gadget_state = gadget_state;
  std::string::basic_string(&this->modifier_name, &v5->modifier_name);
};

// Line 492: range 000000001130349E-00000000113034FB
void __cdecl data::AttachToGadgetStateMixin::~AttachToGadgetStateMixin(data::AttachToGadgetStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 492: range 00000000113034FC-0000000011303526
void __cdecl data::AttachToGadgetStateMixin::~AttachToGadgetStateMixin(data::AttachToGadgetStateMixin *const this)
{
  data::AttachToGadgetStateMixin::~AttachToGadgetStateMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 497: range 00000000100BF22C-00000000100BF23C
const char *__cdecl data::AttachToGadgetStateMixin::getTypeName(const data::AttachToGadgetStateMixin *const this)
{
  return "AttachToGadgetStateMixin";
};

// Line 498: range 00000000100BF23E-00000000100BF3DA
int32_t __cdecl data::AttachToGadgetStateMixin::getHashNum(const data::AttachToGadgetStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToGadgetStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToGadgetStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 514: range 0000000011219818-0000000011219859
void __cdecl data::AttachToGadgetStateMixinFactory::AttachToGadgetStateMixinFactory(
        data::AttachToGadgetStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToGadgetStateMixinFactory = v2;
};

// Line 522: range 0000000011219B9A-0000000011219C07
void __cdecl data::AttachToGadgetStateMutexMixin::AttachToGadgetStateMutexMixin(
        data::AttachToGadgetStateMutexMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMutexMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->gadget_states);
  std::vector<std::vector<std::string>>::vector(&this->modifier_names);
};

// Line 522: range 000000001121A02C-000000001121A0F2
void __cdecl data::AttachToGadgetStateMutexMixin::AttachToGadgetStateMutexMixin(
        data::AttachToGadgetStateMutexMixin *const this,
        const data::AttachToGadgetStateMutexMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMutexMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->gadget_states, &a2->gadget_states);
  std::vector<std::vector<std::string>>::vector(&this->modifier_names, &a2->modifier_names);
};

// Line 530: range 0000000011303472-000000001130349C
void __cdecl data::AttachToGadgetStateMutexMixin::~AttachToGadgetStateMutexMixin(
        data::AttachToGadgetStateMutexMixin *const this)
{
  data::AttachToGadgetStateMutexMixin::~AttachToGadgetStateMutexMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 530: range 0000000011303404-0000000011303471
void __cdecl data::AttachToGadgetStateMutexMixin::~AttachToGadgetStateMutexMixin(
        data::AttachToGadgetStateMutexMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMutexMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::string>>::~vector(&this->modifier_names);
  std::vector<int>::~vector(&this->gadget_states);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 535: range 00000000100BF3DC-00000000100BF3EC
const char *__cdecl data::AttachToGadgetStateMutexMixin::getTypeName(
        const data::AttachToGadgetStateMutexMixin *const this)
{
  return "AttachToGadgetStateMutexMixin";
};

// Line 536: range 00000000100BF3EE-00000000100BF58A
int32_t __cdecl data::AttachToGadgetStateMutexMixin::getHashNum(const data::AttachToGadgetStateMutexMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToGadgetStateMutexMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToGadgetStateMutexMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 552: range 000000001121A3DC-000000001121A41D
void __cdecl data::AttachToGadgetStateMutexMixinFactory::AttachToGadgetStateMutexMixinFactory(
        data::AttachToGadgetStateMutexMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToGadgetStateMutexMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToGadgetStateMutexMixinFactory = v2;
};

// Line 560: range 000000001121A726-000000001121A793
void __cdecl data::AttachModifierByStackingMixin::AttachModifierByStackingMixin(
        data::AttachModifierByStackingMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByStackingMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
  std::string::basic_string(&this->stacking_modifier);
};

// Line 560: range 000000001121AB4E-000000001121AC14
void __cdecl data::AttachModifierByStackingMixin::AttachModifierByStackingMixin(
        data::AttachModifierByStackingMixin *const this,
        const data::AttachModifierByStackingMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByStackingMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
  std::string::basic_string(&this->stacking_modifier, &a2->stacking_modifier);
};

// Line 568: range 000000001130336A-00000000113033D7
void __cdecl data::AttachModifierByStackingMixin::~AttachModifierByStackingMixin(
        data::AttachModifierByStackingMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByStackingMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->stacking_modifier);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 568: range 00000000113033D8-0000000011303402
void __cdecl data::AttachModifierByStackingMixin::~AttachModifierByStackingMixin(
        data::AttachModifierByStackingMixin *const this)
{
  data::AttachModifierByStackingMixin::~AttachModifierByStackingMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 573: range 00000000100BF58C-00000000100BF59C
const char *__cdecl data::AttachModifierByStackingMixin::getTypeName(
        const data::AttachModifierByStackingMixin *const this)
{
  return "AttachModifierByStackingMixin";
};

// Line 574: range 00000000100BF59E-00000000100BF73A
int32_t __cdecl data::AttachModifierByStackingMixin::getHashNum(const data::AttachModifierByStackingMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierByStackingMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierByStackingMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 590: range 000000001121AEFE-000000001121AF3F
void __cdecl data::AttachModifierByStackingMixinFactory::AttachModifierByStackingMixinFactory(
        data::AttachModifierByStackingMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByStackingMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierByStackingMixinFactory = v2;
};

// Line 598: range 000000001121B248-000000001121B2B5
void __cdecl data::AttachToAIAlertnessMixin::AttachToAIAlertnessMixin(data::AttachToAIAlertnessMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToAIAlertnessMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->alertness);
  std::string::basic_string(&this->modifier_name);
};

// Line 598: range 000000001121B670-000000001121B736
void __cdecl data::AttachToAIAlertnessMixin::AttachToAIAlertnessMixin(
        data::AttachToAIAlertnessMixin *const this,
        const data::AttachToAIAlertnessMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToAIAlertnessMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->alertness, &a2->alertness);
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 606: range 00000000113032D0-000000001130333D
void __cdecl data::AttachToAIAlertnessMixin::~AttachToAIAlertnessMixin(data::AttachToAIAlertnessMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToAIAlertnessMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  std::vector<int>::~vector(&this->alertness);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 606: range 000000001130333E-0000000011303368
void __cdecl data::AttachToAIAlertnessMixin::~AttachToAIAlertnessMixin(data::AttachToAIAlertnessMixin *const this)
{
  data::AttachToAIAlertnessMixin::~AttachToAIAlertnessMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 611: range 00000000100BF73C-00000000100BF74C
const char *__cdecl data::AttachToAIAlertnessMixin::getTypeName(const data::AttachToAIAlertnessMixin *const this)
{
  return "AttachToAIAlertnessMixin";
};

// Line 612: range 00000000100BF74E-00000000100BF8EA
int32_t __cdecl data::AttachToAIAlertnessMixin::getHashNum(const data::AttachToAIAlertnessMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToAIAlertnessMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToAIAlertnessMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 628: range 000000001121BA20-000000001121BA61
void __cdecl data::AttachToAIAlertnessMixinFactory::AttachToAIAlertnessMixinFactory(
        data::AttachToAIAlertnessMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToAIAlertnessMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToAIAlertnessMixinFactory = v2;
};

// Line 662: range 000000001121BF02-000000001121C013
void __cdecl data::AttachModifierToPredicateMixin::AttachModifierToPredicateMixin(
        data::AttachModifierToPredicateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToPredicateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Both_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->on_event >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->on_event >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->on_event, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->on_event = None_47;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  std::string::basic_string(&this->modifier_name);
  std::vector<data::ConfigAbilityStateToActions>::vector(&this->on_ability_state_added);
  std::vector<data::ConfigAbilityStateToActions>::vector(&this->on_ability_state_removed);
};

// Line 662: range 000000001121C3C8-000000001121C5E8
void __cdecl data::AttachModifierToPredicateMixin::AttachModifierToPredicateMixin(
        data::AttachModifierToPredicateMixin *const this,
        const data::AttachModifierToPredicateMixin *a2)
{
  int (**v2)(...); // rdx
  data::AvatarStageType type; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::OnEventType on_event; // ecx
  char v7; // dl
  const data::AttachModifierToPredicateMixin *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToPredicateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  v5 = (((_BYTE)v8 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->on_event >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->on_event >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->on_event);
  }
  on_event = v8->on_event;
  v7 = *(_BYTE *)(((unsigned __int64)&this->on_event >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->on_event, v5);
  }
  this->on_event = on_event;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &v8->predicates);
  std::string::basic_string(&this->modifier_name, &v8->modifier_name);
  std::vector<data::ConfigAbilityStateToActions>::vector(&this->on_ability_state_added, &v8->on_ability_state_added);
  std::vector<data::ConfigAbilityStateToActions>::vector(&this->on_ability_state_removed, &v8->on_ability_state_removed);
};

// Line 674: range 0000000011303216-00000000113032A3
void __cdecl data::AttachModifierToPredicateMixin::~AttachModifierToPredicateMixin(
        data::AttachModifierToPredicateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToPredicateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ConfigAbilityStateToActions>::~vector(&this->on_ability_state_removed);
  std::vector<data::ConfigAbilityStateToActions>::~vector(&this->on_ability_state_added);
  std::string::~string(&this->modifier_name);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 674: range 00000000113032A4-00000000113032CE
void __cdecl data::AttachModifierToPredicateMixin::~AttachModifierToPredicateMixin(
        data::AttachModifierToPredicateMixin *const this)
{
  data::AttachModifierToPredicateMixin::~AttachModifierToPredicateMixin(this);
  operator delete(this, 0x90uLL);
};

// Line 679: range 00000000100BF8EC-00000000100BF8FC
const char *__cdecl data::AttachModifierToPredicateMixin::getTypeName(
        const data::AttachModifierToPredicateMixin *const this)
{
  return "AttachModifierToPredicateMixin";
};

// Line 680: range 00000000100BF8FE-00000000100BFA9A
int32_t __cdecl data::AttachModifierToPredicateMixin::getHashNum(
        const data::AttachModifierToPredicateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToPredicateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToPredicateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 696: range 000000001121C8D2-000000001121C913
void __cdecl data::AttachModifierToPredicateMixinFactory::AttachModifierToPredicateMixinFactory(
        data::AttachModifierToPredicateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToPredicateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToPredicateMixinFactory = v2;
};

// Line 704: range 000000001121CC1C-000000001121CD8F
void __cdecl data::DoActionByEventMixin::DoActionByEventMixin(data::DoActionByEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Both_0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->on_event >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->on_event >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->on_event, v3);
  }
  this->on_event = None_47;
  std::vector<unsigned int>::vector(&this->pick_item_config_ids);
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_ready_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_ready_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_ready_id, v3);
  }
  this->skill_ready_id = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
  std::vector<data::ConfigAbilityStateToActions>::vector(&this->on_ability_state_added);
  std::vector<data::ConfigAbilityStateToActions>::vector(&this->on_ability_state_removed);
  std::string::basic_string(&this->cost_energy_delta_name);
};

// Line 704: range 000000001121D14E-000000001121D452
void __cdecl data::DoActionByEventMixin::DoActionByEventMixin(
        data::DoActionByEventMixin *const this,
        const data::DoActionByEventMixin *a2)
{
  int (**v2)(...); // rdx
  data::AvatarStageType type; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::OnEventType on_event; // ecx
  char v7; // dl
  data::UInt32Array *p_pick_item_config_ids; // rsi
  uint32_t skill_ready_id; // ecx
  char v10; // al
  const data::DoActionByEventMixin *v11; // [rsp+0h] [rbp-20h]

  v11 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  v5 = (((_BYTE)v11 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v11->on_event >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v11 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v11->on_event >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v11->on_event);
  }
  on_event = v11->on_event;
  v7 = *(_BYTE *)(((unsigned __int64)&this->on_event >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->on_event, v5);
  }
  this->on_event = on_event;
  p_pick_item_config_ids = &v11->pick_item_config_ids;
  std::vector<unsigned int>::vector(&this->pick_item_config_ids, &v11->pick_item_config_ids);
  if ( *(_BYTE *)(((unsigned __int64)&v11->skill_ready_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v11->skill_ready_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v11->skill_ready_id);
  }
  skill_ready_id = v11->skill_ready_id;
  v10 = *(_BYTE *)(((unsigned __int64)&this->skill_ready_id >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(p_pick_item_config_ids) = v10 != 0;
    __asan_report_store4(&this->skill_ready_id, p_pick_item_config_ids);
  }
  this->skill_ready_id = skill_ready_id;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &v11->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &v11->actions);
  std::vector<data::ConfigAbilityStateToActions>::vector(&this->on_ability_state_added, &v11->on_ability_state_added);
  std::vector<data::ConfigAbilityStateToActions>::vector(
    &this->on_ability_state_removed,
    &v11->on_ability_state_removed);
  std::string::basic_string(&this->cost_energy_delta_name, &v11->cost_energy_delta_name);
};

// Line 719: range 0000000011303138-00000000113031E9
void __cdecl data::DoActionByEventMixin::~DoActionByEventMixin(data::DoActionByEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->cost_energy_delta_name);
  std::vector<data::ConfigAbilityStateToActions>::~vector(&this->on_ability_state_removed);
  std::vector<data::ConfigAbilityStateToActions>::~vector(&this->on_ability_state_added);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::vector<unsigned int>::~vector(&this->pick_item_config_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 719: range 00000000113031EA-0000000011303214
void __cdecl data::DoActionByEventMixin::~DoActionByEventMixin(data::DoActionByEventMixin *const this)
{
  data::DoActionByEventMixin::~DoActionByEventMixin(this);
  operator delete(this, 0xC8uLL);
};

// Line 724: range 00000000100BFA9C-00000000100BFAAC
const char *__cdecl data::DoActionByEventMixin::getTypeName(const data::DoActionByEventMixin *const this)
{
  return "DoActionByEventMixin";
};

// Line 725: range 00000000100BFAAE-00000000100BFC4A
int32_t __cdecl data::DoActionByEventMixin::getHashNum(const data::DoActionByEventMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByEventMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByEventMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 741: range 000000001121D73C-000000001121D77D
void __cdecl data::DoActionByEventMixinFactory::DoActionByEventMixinFactory(
        data::DoActionByEventMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByEventMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByEventMixinFactory = v2;
};

// Line 749: range 000000001121DA86-000000001121DC1E
void __cdecl data::ButtonHoldChargeMixin::ButtonHoldChargeMixin(data::ButtonHoldChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ButtonHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->charge_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->charge_time, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->charge_time = 0.0;
  data::DynamicFloat::DynamicFloat(&this->second_charge_time, 999999.0);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_begin_uncharged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_release_uncharged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_begin_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_release_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_begin_second_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_release_second_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_cancel_charged);
  std::vector<std::string>::vector(&this->charge_state_ids);
};

// Line 749: range 000000001121E062-000000001121E399
void __cdecl data::ButtonHoldChargeMixin::ButtonHoldChargeMixin(
        data::ButtonHoldChargeMixin *const this,
        const data::ButtonHoldChargeMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  float charge_time; // xmm0_4
  const data::ButtonHoldChargeMixin *v6; // [rsp+0h] [rbp-20h]

  v6 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ButtonHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->charge_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->charge_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->charge_time);
  }
  charge_time = v6->charge_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->charge_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->charge_time, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->charge_time = charge_time;
  data::DynamicFloat::DynamicFloat(&this->second_charge_time, &v6->second_charge_time);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_begin_uncharged, &v6->on_begin_uncharged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_release_uncharged,
    &v6->on_release_uncharged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_begin_charged, &v6->on_begin_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_release_charged, &v6->on_release_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_begin_second_charged,
    &v6->on_begin_second_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_release_second_charged,
    &v6->on_release_second_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_cancel_charged, &v6->on_cancel_charged);
  std::vector<std::string>::vector(&this->charge_state_ids, &v6->charge_state_ids);
};

// Line 766: range 000000001121F7FC-000000001121F8E3
void __cdecl data::ButtonHoldChargeMixin::~ButtonHoldChargeMixin(data::ButtonHoldChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ButtonHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->charge_state_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_cancel_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_release_second_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_begin_second_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_release_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_begin_charged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_release_uncharged);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_begin_uncharged);
  data::DynamicFloat::~DynamicFloat(&this->second_charge_time);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 766: range 000000001121F8E4-000000001121F90E
void __cdecl data::ButtonHoldChargeMixin::~ButtonHoldChargeMixin(data::ButtonHoldChargeMixin *const this)
{
  data::ButtonHoldChargeMixin::~ButtonHoldChargeMixin(this);
  operator delete(this, 0x108uLL);
};

// Line 771: range 00000000100BFC4C-00000000100BFC5C
const char *__cdecl data::ButtonHoldChargeMixin::getTypeName(const data::ButtonHoldChargeMixin *const this)
{
  return "ButtonHoldChargeMixin";
};

// Line 772: range 00000000100BFC5E-00000000100BFDFA
int32_t __cdecl data::ButtonHoldChargeMixin::getHashNum(const data::ButtonHoldChargeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ButtonHoldChargeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ButtonHoldChargeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 791: range 000000001121E682-000000001121E80C
void __cdecl data::SkillButtonHoldChargeMixin::SkillButtonHoldChargeMixin(data::SkillButtonHoldChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::SkillButtonHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->allow_hold_lock_direction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->allow_hold_lock_direction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->allow_hold_lock_direction, v3, v4);
  this->allow_hold_lock_direction = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v3);
  }
  this->skill_id = 0;
  std::string::basic_string(&this->next_loop_trigger_id);
  std::string::basic_string(&this->end_hold_trigger);
  std::vector<std::string>::vector(&this->before_state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&this->before_hold_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->before_hold_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->before_hold_duration, v3);
  }
  this->before_hold_duration = -1.0;
  std::vector<std::string>::vector(&this->charge_loop_state_ids);
  std::vector<std::string>::vector(&this->after_state_ids);
  std::vector<float>::vector(&this->charge_loop_durations);
  std::vector<std::string>::vector(&this->transient_state_ids);
};

// Line 791: range 000000001121EBC2-000000001121EF08
void __cdecl data::SkillButtonHoldChargeMixin::SkillButtonHoldChargeMixin(
        data::SkillButtonHoldChargeMixin *const this,
        const data::SkillButtonHoldChargeMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool allow_hold_lock_direction; // cl
  char v6; // dl
  __int64 v7; // rdx
  uint32_t skill_id; // ecx
  char v9; // al
  float before_hold_duration; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::SkillButtonHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->allow_hold_lock_direction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->allow_hold_lock_direction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->allow_hold_lock_direction, v3, v4);
  allow_hold_lock_direction = a2->allow_hold_lock_direction;
  v6 = *(_BYTE *)(((unsigned __int64)&this->allow_hold_lock_direction >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->allow_hold_lock_direction, v3, v7);
  this->allow_hold_lock_direction = allow_hold_lock_direction;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v3) = v9 != 0;
    __asan_report_store4(&this->skill_id, v3);
  }
  this->skill_id = skill_id;
  std::string::basic_string(&this->next_loop_trigger_id, &a2->next_loop_trigger_id);
  std::string::basic_string(&this->end_hold_trigger, &a2->end_hold_trigger);
  std::vector<std::string>::vector(&this->before_state_ids, &a2->before_state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&a2->before_hold_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->before_hold_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->before_hold_duration);
  }
  before_hold_duration = a2->before_hold_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->before_hold_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->before_hold_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->before_hold_duration, &a2->before_state_ids);
  }
  this->before_hold_duration = before_hold_duration;
  std::vector<std::string>::vector(&this->charge_loop_state_ids, &a2->charge_loop_state_ids);
  std::vector<std::string>::vector(&this->after_state_ids, &a2->after_state_ids);
  std::vector<float>::vector(&this->charge_loop_durations, &a2->charge_loop_durations);
  std::vector<std::string>::vector(&this->transient_state_ids, &a2->transient_state_ids);
};

// Line 807: range 0000000011303046-000000001130310B
void __cdecl data::SkillButtonHoldChargeMixin::~SkillButtonHoldChargeMixin(
        data::SkillButtonHoldChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SkillButtonHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->transient_state_ids);
  std::vector<float>::~vector(&this->charge_loop_durations);
  std::vector<std::string>::~vector(&this->after_state_ids);
  std::vector<std::string>::~vector(&this->charge_loop_state_ids);
  std::vector<std::string>::~vector(&this->before_state_ids);
  std::string::~string(&this->end_hold_trigger);
  std::string::~string(&this->next_loop_trigger_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 807: range 000000001130310C-0000000011303136
void __cdecl data::SkillButtonHoldChargeMixin::~SkillButtonHoldChargeMixin(
        data::SkillButtonHoldChargeMixin *const this)
{
  data::SkillButtonHoldChargeMixin::~SkillButtonHoldChargeMixin(this);
  operator delete(this, 0xE8uLL);
};

// Line 812: range 00000000100BFDFC-00000000100BFE0C
const char *__cdecl data::SkillButtonHoldChargeMixin::getTypeName(const data::SkillButtonHoldChargeMixin *const this)
{
  return "SkillButtonHoldChargeMixin";
};

// Line 813: range 00000000100BFE0E-00000000100BFFAA
int32_t __cdecl data::SkillButtonHoldChargeMixin::getHashNum(const data::SkillButtonHoldChargeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SkillButtonHoldChargeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SkillButtonHoldChargeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 829: range 000000001121F1F2-000000001121F233
void __cdecl data::SkillButtonHoldChargeMixinFactory::SkillButtonHoldChargeMixinFactory(
        data::SkillButtonHoldChargeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SkillButtonHoldChargeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SkillButtonHoldChargeMixinFactory = v2;
};

// Line 873: range 000000001121F910-000000001121F9EB
void __cdecl data::InputActionHoldChargeMixin::InputActionHoldChargeMixin(data::InputActionHoldChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ButtonHoldChargeMixin::ButtonHoldChargeMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::InputActionHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->input_action_controller_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->input_action_controller_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->input_action_controller_type, v1);
  }
  this->input_action_controller_type = ElectroherculesBattle;
  if ( *(_BYTE *)(((unsigned __int64)&this->input_action_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->input_action_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->input_action_type, (((_BYTE)this + 12) & 7u) + 3);
  }
  this->input_action_type = Invalid_6;
};

// Line 873: range 000000001121FE34-000000001121FF9A
void __cdecl data::InputActionHoldChargeMixin::InputActionHoldChargeMixin(
        data::InputActionHoldChargeMixin *const this,
        const data::InputActionHoldChargeMixin *a2)
{
  int (**v2)(...); // rdx
  data::InputActionControllerType input_action_controller_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::GeneralInputActionType input_action_type; // ecx
  char v7; // dl
  const data::InputActionHoldChargeMixin *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ButtonHoldChargeMixin::ButtonHoldChargeMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::InputActionHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->input_action_controller_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->input_action_controller_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->input_action_controller_type);
  }
  input_action_controller_type = a2->input_action_controller_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->input_action_controller_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->input_action_controller_type, a2);
  }
  this->input_action_controller_type = input_action_controller_type;
  v5 = (((_BYTE)v8 + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->input_action_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->input_action_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->input_action_type);
  }
  input_action_type = v8->input_action_type;
  v7 = *(_BYTE *)(((unsigned __int64)&this->input_action_type >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 12) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->input_action_type, v5);
  }
  this->input_action_type = input_action_type;
};

// Line 881: range 0000000011302FCC-0000000011303019
void __cdecl data::InputActionHoldChargeMixin::~InputActionHoldChargeMixin(
        data::InputActionHoldChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InputActionHoldChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ButtonHoldChargeMixin::~ButtonHoldChargeMixin(this);
};

// Line 881: range 000000001130301A-0000000011303044
void __cdecl data::InputActionHoldChargeMixin::~InputActionHoldChargeMixin(
        data::InputActionHoldChargeMixin *const this)
{
  data::InputActionHoldChargeMixin::~InputActionHoldChargeMixin(this);
  operator delete(this, 0x110uLL);
};

// Line 886: range 00000000100BFFAC-00000000100BFFBC
const char *__cdecl data::InputActionHoldChargeMixin::getTypeName(const data::InputActionHoldChargeMixin *const this)
{
  return "InputActionHoldChargeMixin";
};

// Line 887: range 00000000100BFFBE-00000000100C015A
int32_t __cdecl data::InputActionHoldChargeMixin::getHashNum(const data::InputActionHoldChargeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::InputActionHoldChargeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "InputActionHoldChargeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 903: range 0000000011220284-00000000112202C5
void __cdecl data::InputActionHoldChargeMixinFactory::InputActionHoldChargeMixinFactory(
        data::InputActionHoldChargeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InputActionHoldChargeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_InputActionHoldChargeMixinFactory = v2;
};

// Line 911: range 00000000112205CE-00000000112206EF
void __cdecl data::AvatarSteerByCameraMixin::AvatarSteerByCameraMixin(data::AvatarSteerByCameraMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarSteerByCameraMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_speed, v1);
  }
  this->angular_speed = 360.0;
  v3 = ((_BYTE)this + 60) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->can_revive_stamina >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->can_revive_stamina >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->can_revive_stamina, v3, v4);
  this->can_revive_stamina = 0;
  v5 = ((_BYTE)this + 61) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->is_check_on_attach >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->is_check_on_attach >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->is_check_on_attach, v5, v6);
  this->is_check_on_attach = 0;
};

// Line 911: range 0000000011220AF4-0000000011220D02
void __cdecl data::AvatarSteerByCameraMixin::AvatarSteerByCameraMixin(
        data::AvatarSteerByCameraMixin *const this,
        const data::AvatarSteerByCameraMixin *a2)
{
  int (**v2)(...); // rdx
  float angular_speed; // xmm0_4
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool can_revive_stamina; // cl
  char v7; // dl
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool is_check_on_attach; // cl
  char v12; // dl
  __int64 v13; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarSteerByCameraMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids, &a2->state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&a2->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->angular_speed);
  }
  angular_speed = a2->angular_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_speed, &a2->state_ids);
  }
  this->angular_speed = angular_speed;
  v4 = ((_BYTE)a2 + 60) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&a2->can_revive_stamina >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&a2->can_revive_stamina >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&a2->can_revive_stamina, v4, v5);
  can_revive_stamina = a2->can_revive_stamina;
  v7 = *(_BYTE *)(((unsigned __int64)&this->can_revive_stamina >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 60) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->can_revive_stamina, v4, v8);
  this->can_revive_stamina = can_revive_stamina;
  v9 = ((_BYTE)a2 + 61) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->is_check_on_attach >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->is_check_on_attach >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->is_check_on_attach, v9, v10);
  is_check_on_attach = a2->is_check_on_attach;
  v12 = *(_BYTE *)(((unsigned __int64)&this->is_check_on_attach >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 61) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->is_check_on_attach, v9, v13);
  this->is_check_on_attach = is_check_on_attach;
};

// Line 921: range 0000000011302F42-0000000011302F9F
void __cdecl data::AvatarSteerByCameraMixin::~AvatarSteerByCameraMixin(data::AvatarSteerByCameraMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarSteerByCameraMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->state_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 921: range 0000000011302FA0-0000000011302FCA
void __cdecl data::AvatarSteerByCameraMixin::~AvatarSteerByCameraMixin(data::AvatarSteerByCameraMixin *const this)
{
  data::AvatarSteerByCameraMixin::~AvatarSteerByCameraMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 926: range 00000000100C015C-00000000100C016C
const char *__cdecl data::AvatarSteerByCameraMixin::getTypeName(const data::AvatarSteerByCameraMixin *const this)
{
  return "AvatarSteerByCameraMixin";
};

// Line 927: range 00000000100C016E-00000000100C030A
int32_t __cdecl data::AvatarSteerByCameraMixin::getHashNum(const data::AvatarSteerByCameraMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarSteerByCameraMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarSteerByCameraMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 943: range 0000000011220FEC-000000001122102D
void __cdecl data::AvatarSteerByCameraMixinFactory::AvatarSteerByCameraMixinFactory(
        data::AvatarSteerByCameraMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarSteerByCameraMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarSteerByCameraMixinFactory = v2;
};

// Line 971: range 00000000112214CE-00000000112216DF
void __cdecl data::SteerAttackMixin::SteerAttackMixin(data::SteerAttackMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->steer_state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&this->start_normalized_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->start_normalized_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->start_normalized_time, v1);
  }
  this->start_normalized_time = 0.0;
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->end_normalized_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->end_normalized_time >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->end_normalized_time, v3);
  }
  this->end_normalized_time = 1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_speed, v3);
  }
  this->angular_speed = 0.0;
  v4 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attack_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->attack_angle, v4);
  }
  this->attack_angle = 0.0;
  std::string::basic_string(&this->attack_trigger);
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attack_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attack_distance, v4);
  }
  this->attack_distance = 0.0;
  v5 = ((_BYTE)this + 108) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->remote_steer_to_local_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->remote_steer_to_local_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->remote_steer_to_local_target, v5, v6);
  this->remote_steer_to_local_target = 1;
  std::vector<data::SteerAttackTargetType>::vector(&this->facing_target_types);
};

// Line 971: range 0000000011221BC0-0000000011221FAE
void __cdecl data::SteerAttackMixin::SteerAttackMixin(
        data::SteerAttackMixin *const this,
        const data::SteerAttackMixin *a2)
{
  int (**v2)(...); // rdx
  float start_normalized_time; // xmm0_4
  float end_normalized_time; // xmm0_4
  __int64 v5; // rsi
  float angular_speed; // xmm0_4
  float attack_angle; // xmm0_4
  float attack_distance; // xmm0_4
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool remote_steer_to_local_target; // cl
  char v12; // dl
  __int64 v13; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->steer_state_ids, &a2->steer_state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&a2->start_normalized_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->start_normalized_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->start_normalized_time);
  }
  start_normalized_time = a2->start_normalized_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->start_normalized_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->start_normalized_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->start_normalized_time, &a2->steer_state_ids);
  }
  this->start_normalized_time = start_normalized_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->end_normalized_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->end_normalized_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->end_normalized_time);
  }
  end_normalized_time = a2->end_normalized_time;
  v5 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->end_normalized_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->end_normalized_time >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->end_normalized_time, v5);
  }
  this->end_normalized_time = end_normalized_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->angular_speed);
  }
  angular_speed = a2->angular_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_speed, v5);
  }
  this->angular_speed = angular_speed;
  if ( *(_BYTE *)(((unsigned __int64)&a2->attack_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->attack_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->attack_angle);
  }
  attack_angle = a2->attack_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attack_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->attack_angle, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->attack_angle = attack_angle;
  std::string::basic_string(&this->attack_trigger, &a2->attack_trigger);
  if ( *(_BYTE *)(((unsigned __int64)&a2->attack_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->attack_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->attack_distance);
  }
  attack_distance = a2->attack_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attack_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attack_distance, &a2->attack_trigger);
  }
  this->attack_distance = attack_distance;
  v9 = ((_BYTE)a2 + 108) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->remote_steer_to_local_target >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->remote_steer_to_local_target >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->remote_steer_to_local_target, v9, v10);
  remote_steer_to_local_target = a2->remote_steer_to_local_target;
  v12 = *(_BYTE *)(((unsigned __int64)&this->remote_steer_to_local_target >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 108) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->remote_steer_to_local_target, v9, v13);
  this->remote_steer_to_local_target = remote_steer_to_local_target;
  std::vector<data::SteerAttackTargetType>::vector(&this->facing_target_types, &a2->facing_target_types);
};

// Line 986: range 0000000011222316-0000000011222340
void __cdecl data::SteerAttackMixin::~SteerAttackMixin(data::SteerAttackMixin *const this)
{
  data::SteerAttackMixin::~SteerAttackMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 986: range 0000000011222298-0000000011222315
void __cdecl data::SteerAttackMixin::~SteerAttackMixin(data::SteerAttackMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::SteerAttackTargetType>::~vector(&this->facing_target_types);
  std::string::~string(&this->attack_trigger);
  std::vector<std::string>::~vector(&this->steer_state_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 991: range 00000000100C030C-00000000100C031C
const char *__cdecl data::SteerAttackMixin::getTypeName(const data::SteerAttackMixin *const this)
{
  return "SteerAttackMixin";
};

// Line 992: range 00000000100C031E-00000000100C04BA
int32_t __cdecl data::SteerAttackMixin::getHashNum(const data::SteerAttackMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SteerAttackMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SteerAttackMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1011: range 0000000011222342-000000001122238F
void __cdecl data::SteerAttackMoveMixin::SteerAttackMoveMixin(data::SteerAttackMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1011: range 000000001122274A-00000000112227A2
void __cdecl data::SteerAttackMoveMixin::SteerAttackMoveMixin(
        data::SteerAttackMoveMixin *const this,
        const data::SteerAttackMoveMixin *a2)
{
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1017: range 0000000011302EC8-0000000011302F15
void __cdecl data::SteerAttackMoveMixin::~SteerAttackMoveMixin(data::SteerAttackMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::SteerAttackMixin::~SteerAttackMixin(this);
};

// Line 1017: range 0000000011302F16-0000000011302F40
void __cdecl data::SteerAttackMoveMixin::~SteerAttackMoveMixin(data::SteerAttackMoveMixin *const this)
{
  data::SteerAttackMoveMixin::~SteerAttackMoveMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 1022: range 00000000100C04BC-00000000100C04CC
const char *__cdecl data::SteerAttackMoveMixin::getTypeName(const data::SteerAttackMoveMixin *const this)
{
  return "SteerAttackMoveMixin";
};

// Line 1023: range 00000000100C04CE-00000000100C066A
int32_t __cdecl data::SteerAttackMoveMixin::getHashNum(const data::SteerAttackMoveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SteerAttackMoveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SteerAttackMoveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1039: range 0000000011222A8C-0000000011222ACD
void __cdecl data::SteerAttackMoveMixinFactory::SteerAttackMoveMixinFactory(
        data::SteerAttackMoveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackMoveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SteerAttackMoveMixinFactory = v2;
};

// Line 1047: range 0000000011222DD6-0000000011222E23
void __cdecl data::SteerAttackTraceMixin::SteerAttackTraceMixin(data::SteerAttackTraceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1047: range 00000000112231DE-0000000011223236
void __cdecl data::SteerAttackTraceMixin::SteerAttackTraceMixin(
        data::SteerAttackTraceMixin *const this,
        const data::SteerAttackTraceMixin *a2)
{
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1053: range 0000000011302E4E-0000000011302E9B
void __cdecl data::SteerAttackTraceMixin::~SteerAttackTraceMixin(data::SteerAttackTraceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::SteerAttackMixin::~SteerAttackMixin(this);
};

// Line 1053: range 0000000011302E9C-0000000011302EC6
void __cdecl data::SteerAttackTraceMixin::~SteerAttackTraceMixin(data::SteerAttackTraceMixin *const this)
{
  data::SteerAttackTraceMixin::~SteerAttackTraceMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 1058: range 00000000100C066C-00000000100C067C
const char *__cdecl data::SteerAttackTraceMixin::getTypeName(const data::SteerAttackTraceMixin *const this)
{
  return "SteerAttackTraceMixin";
};

// Line 1059: range 00000000100C067E-00000000100C081A
int32_t __cdecl data::SteerAttackTraceMixin::getHashNum(const data::SteerAttackTraceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SteerAttackTraceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SteerAttackTraceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1075: range 0000000011223520-0000000011223561
void __cdecl data::SteerAttackTraceMixinFactory::SteerAttackTraceMixinFactory(
        data::SteerAttackTraceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SteerAttackTraceMixinFactory = v2;
};

// Line 1083: range 000000001122386A-00000000112238C9
void __cdecl data::SteerAttackTraceToPosMixin::SteerAttackTraceToPosMixin(data::SteerAttackTraceToPosMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceToPosMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_pos_key);
};

// Line 1083: range 0000000011223C78-0000000011223D13
void __cdecl data::SteerAttackTraceToPosMixin::SteerAttackTraceToPosMixin(
        data::SteerAttackTraceToPosMixin *const this,
        const data::SteerAttackTraceToPosMixin *a2)
{
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceToPosMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_pos_key, &a2->global_pos_key);
};

// Line 1090: range 0000000011302E22-0000000011302E4C
void __cdecl data::SteerAttackTraceToPosMixin::~SteerAttackTraceToPosMixin(
        data::SteerAttackTraceToPosMixin *const this)
{
  data::SteerAttackTraceToPosMixin::~SteerAttackTraceToPosMixin(this);
  operator delete(this, 0xA8uLL);
};

// Line 1090: range 0000000011302DC2-0000000011302E21
void __cdecl data::SteerAttackTraceToPosMixin::~SteerAttackTraceToPosMixin(
        data::SteerAttackTraceToPosMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceToPosMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_pos_key);
  data::SteerAttackMixin::~SteerAttackMixin(this);
};

// Line 1095: range 00000000100C081C-00000000100C082C
const char *__cdecl data::SteerAttackTraceToPosMixin::getTypeName(const data::SteerAttackTraceToPosMixin *const this)
{
  return "SteerAttackTraceToPosMixin";
};

// Line 1096: range 00000000100C082E-00000000100C09CA
int32_t __cdecl data::SteerAttackTraceToPosMixin::getHashNum(const data::SteerAttackTraceToPosMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SteerAttackTraceToPosMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SteerAttackTraceToPosMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1112: range 0000000011223FFC-000000001122403D
void __cdecl data::SteerAttackTraceToPosMixinFactory::SteerAttackTraceToPosMixinFactory(
        data::SteerAttackTraceToPosMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackTraceToPosMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SteerAttackTraceToPosMixinFactory = v2;
};

// Line 1120: range 0000000011224346-0000000011224393
void __cdecl data::SteerAttackClothoidMixin::SteerAttackClothoidMixin(data::SteerAttackClothoidMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackClothoidMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1120: range 000000001122474E-00000000112247A6
void __cdecl data::SteerAttackClothoidMixin::SteerAttackClothoidMixin(
        data::SteerAttackClothoidMixin *const this,
        const data::SteerAttackClothoidMixin *a2)
{
  int (**v2)(...); // rdx

  data::SteerAttackMixin::SteerAttackMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SteerAttackClothoidMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 1126: range 0000000011302D96-0000000011302DC0
void __cdecl data::SteerAttackClothoidMixin::~SteerAttackClothoidMixin(data::SteerAttackClothoidMixin *const this)
{
  data::SteerAttackClothoidMixin::~SteerAttackClothoidMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 1126: range 0000000011302D48-0000000011302D95
void __cdecl data::SteerAttackClothoidMixin::~SteerAttackClothoidMixin(data::SteerAttackClothoidMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackClothoidMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::SteerAttackMixin::~SteerAttackMixin(this);
};

// Line 1131: range 00000000100C09CC-00000000100C09DC
const char *__cdecl data::SteerAttackClothoidMixin::getTypeName(const data::SteerAttackClothoidMixin *const this)
{
  return "SteerAttackClothoidMixin";
};

// Line 1132: range 00000000100C09DE-00000000100C0B7A
int32_t __cdecl data::SteerAttackClothoidMixin::getHashNum(const data::SteerAttackClothoidMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SteerAttackClothoidMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SteerAttackClothoidMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1148: range 0000000011224A90-0000000011224AD1
void __cdecl data::SteerAttackClothoidMixinFactory::SteerAttackClothoidMixinFactory(
        data::SteerAttackClothoidMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SteerAttackClothoidMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SteerAttackClothoidMixinFactory = v2;
};

// Line 1156: range 0000000011224DDA-0000000011224F43
void __cdecl data::ShieldBarMixin::ShieldBarMixin(data::ShieldBarMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ShieldBarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken);
  if ( *(char *)(((unsigned __int64)&this->revert >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->revert, v1, &this->revert);
  this->revert = 0;
  std::string::basic_string(&this->show_damage_text);
  if ( *(char *)(((unsigned __int64)&this->use_muti_player_fix_data >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_muti_player_fix_data, v1, &this->use_muti_player_fix_data);
  this->use_muti_player_fix_data = 0;
  v3 = ((_BYTE)this + 97) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->skip_init_anim >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->skip_init_anim >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->skip_init_anim, v3, v4);
  this->skip_init_anim = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->bar_element_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->bar_element_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->bar_element_type, (((_BYTE)this + 100) & 7u) + 3);
  }
  this->bar_element_type = None_0;
};

// Line 1156: range 00000000112252F8-00000000112255AF
void __cdecl data::ShieldBarMixin::ShieldBarMixin(data::ShieldBarMixin *const this, const data::ShieldBarMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityActionArray *p_on_shield_broken; // rsi
  bool revert; // cl
  char v5; // al
  std::string *p_show_damage_text; // rsi
  bool use_muti_player_fix_data; // cl
  char v8; // al
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool skip_init_anim; // cl
  char v12; // dl
  __int64 v13; // rdx
  __int64 v14; // rsi
  data::ElementType bar_element_type; // ecx
  char v16; // dl

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShieldBarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_on_shield_broken = &a2->on_shield_broken;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken, &a2->on_shield_broken);
  if ( *(char *)(((unsigned __int64)&a2->revert >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->revert, p_on_shield_broken, &a2->revert);
  revert = a2->revert;
  v5 = *(_BYTE *)(((unsigned __int64)&this->revert >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_on_shield_broken) = v5 != 0;
    __asan_report_store1(&this->revert, p_on_shield_broken, &this->revert);
  }
  this->revert = revert;
  p_show_damage_text = &a2->show_damage_text;
  std::string::basic_string(&this->show_damage_text, &a2->show_damage_text);
  if ( *(char *)(((unsigned __int64)&a2->use_muti_player_fix_data >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_muti_player_fix_data, p_show_damage_text, &a2->use_muti_player_fix_data);
  use_muti_player_fix_data = a2->use_muti_player_fix_data;
  v8 = *(_BYTE *)(((unsigned __int64)&this->use_muti_player_fix_data >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(p_show_damage_text) = v8 != 0;
    __asan_report_store1(&this->use_muti_player_fix_data, p_show_damage_text, &this->use_muti_player_fix_data);
  }
  this->use_muti_player_fix_data = use_muti_player_fix_data;
  v9 = ((_BYTE)a2 + 97) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->skip_init_anim >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->skip_init_anim >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->skip_init_anim, v9, v10);
  skip_init_anim = a2->skip_init_anim;
  v12 = *(_BYTE *)(((unsigned __int64)&this->skip_init_anim >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 97) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->skip_init_anim, v9, v13);
  this->skip_init_anim = skip_init_anim;
  v14 = (((_BYTE)a2 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->bar_element_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->bar_element_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->bar_element_type);
  }
  bar_element_type = a2->bar_element_type;
  v16 = *(_BYTE *)(((unsigned __int64)&this->bar_element_type >> 3) + 0x7FFF8000);
  if ( v16 != 0 && (char)((((_BYTE)this + 100) & 7) + 3) >= v16 )
  {
    LOBYTE(v14) = v16 != 0;
    __asan_report_store4(&this->bar_element_type, v14);
  }
  this->bar_element_type = bar_element_type;
};

// Line 1168: range 0000000011302CAE-0000000011302D1B
void __cdecl data::ShieldBarMixin::~ShieldBarMixin(data::ShieldBarMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShieldBarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->show_damage_text);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_shield_broken);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1168: range 0000000011302D1C-0000000011302D46
void __cdecl data::ShieldBarMixin::~ShieldBarMixin(data::ShieldBarMixin *const this)
{
  data::ShieldBarMixin::~ShieldBarMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 1173: range 00000000100C0B7C-00000000100C0B8C
const char *__cdecl data::ShieldBarMixin::getTypeName(const data::ShieldBarMixin *const this)
{
  return "ShieldBarMixin";
};

// Line 1174: range 00000000100C0B8E-00000000100C0D2A
int32_t __cdecl data::ShieldBarMixin::getHashNum(const data::ShieldBarMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShieldBarMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShieldBarMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1190: range 0000000011225898-00000000112258D9
void __cdecl data::ShieldBarMixinFactory::ShieldBarMixinFactory(data::ShieldBarMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShieldBarMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShieldBarMixinFactory = v2;
};

// Line 1198: range 0000000011225BE2-0000000011225D17
void __cdecl data::ChargeBarMixin::ChargeBarMixin(data::ChargeBarMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ChargeBarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_bar_element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->charge_bar_element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->charge_bar_element_type, v1);
  }
  this->charge_bar_element_type = None_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_bar_icon_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->charge_bar_icon_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->charge_bar_icon_id, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->charge_bar_icon_id = 1;
  data::DynamicFloat::DynamicFloat(&this->initial_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->max_value, 100.0);
};

// Line 1198: range 0000000011226160-0000000011226320
void __cdecl data::ChargeBarMixin::ChargeBarMixin(data::ChargeBarMixin *const this, const data::ChargeBarMixin *a2)
{
  int (**v2)(...); // rdx
  data::ElementType charge_bar_element_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  int32_t charge_bar_icon_id; // ecx
  char v7; // dl
  const data::ChargeBarMixin *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChargeBarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->charge_bar_element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->charge_bar_element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->charge_bar_element_type);
  }
  charge_bar_element_type = a2->charge_bar_element_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->charge_bar_element_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->charge_bar_element_type, a2);
  }
  this->charge_bar_element_type = charge_bar_element_type;
  v5 = (((_BYTE)v8 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->charge_bar_icon_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->charge_bar_icon_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->charge_bar_icon_id);
  }
  charge_bar_icon_id = v8->charge_bar_icon_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->charge_bar_icon_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->charge_bar_icon_id, v5);
  }
  this->charge_bar_icon_id = charge_bar_icon_id;
  data::DynamicFloat::DynamicFloat(&this->initial_value, &v8->initial_value);
  data::DynamicFloat::DynamicFloat(&this->max_value, &v8->max_value);
};

// Line 1208: range 0000000011302C82-0000000011302CAC
void __cdecl data::ChargeBarMixin::~ChargeBarMixin(data::ChargeBarMixin *const this)
{
  data::ChargeBarMixin::~ChargeBarMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 1208: range 0000000011302C14-0000000011302C81
void __cdecl data::ChargeBarMixin::~ChargeBarMixin(data::ChargeBarMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChargeBarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  data::DynamicFloat::~DynamicFloat(&this->initial_value);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1213: range 00000000100C0D2C-00000000100C0D3C
const char *__cdecl data::ChargeBarMixin::getTypeName(const data::ChargeBarMixin *const this)
{
  return "ChargeBarMixin";
};

// Line 1214: range 00000000100C0D3E-00000000100C0EDA
int32_t __cdecl data::ChargeBarMixin::getHashNum(const data::ChargeBarMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChargeBarMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChargeBarMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1230: range 000000001122660A-000000001122664B
void __cdecl data::ChargeBarMixinFactory::ChargeBarMixinFactory(data::ChargeBarMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChargeBarMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChargeBarMixinFactory = v2;
};

// Line 1238: range 0000000011226954-0000000011226B68
void __cdecl data::ElementShieldMixin::ElementShieldMixin(data::ElementShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ElementShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->element_type, v1);
  }
  this->element_type = None_0;
  std::string::basic_string(&this->show_damage_text);
  data::DynamicFloat::DynamicFloat(&this->shield_angle, 360.0);
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio);
  data::DynamicFloat::DynamicFloat(&this->shield_hp);
  data::DynamicFloat::DynamicFloat(&this->damage_ratio, 0.2);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_success);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_failed);
  if ( *(char *)(((unsigned __int64)&this->use_muti_player_fix_data >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_muti_player_fix_data, v1, &this->use_muti_player_fix_data);
  this->use_muti_player_fix_data = 0;
  v3 = ((_BYTE)this + 17) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->update_shield_by_max_hp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->update_shield_by_max_hp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->update_shield_by_max_hp, v3, v4);
  this->update_shield_by_max_hp = 0;
};

// Line 1238: range 0000000011226FBA-0000000011227343
void __cdecl data::ElementShieldMixin::ElementShieldMixin(
        data::ElementShieldMixin *const this,
        const data::ElementShieldMixin *a2)
{
  int (**v2)(...); // rdx
  data::ElementType element_type; // ecx
  char v4; // al
  data::ConfigAbilityActionArray *p_on_shield_failed; // rsi
  bool use_muti_player_fix_data; // cl
  char v7; // al
  __int64 v8; // rsi
  __int64 v9; // rdx
  bool update_shield_by_max_hp; // cl
  char v11; // dl
  __int64 v12; // rdx
  const data::ElementShieldMixin *v13; // [rsp+0h] [rbp-20h]

  v13 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElementShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->element_type);
  }
  element_type = a2->element_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->element_type, a2);
  }
  this->element_type = element_type;
  std::string::basic_string(&this->show_damage_text, &v13->show_damage_text);
  data::DynamicFloat::DynamicFloat(&this->shield_angle, &v13->shield_angle);
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio, &v13->shield_hpratio);
  data::DynamicFloat::DynamicFloat(&this->shield_hp, &v13->shield_hp);
  data::DynamicFloat::DynamicFloat(&this->damage_ratio, &v13->damage_ratio);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken, &v13->on_shield_broken);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_success, &v13->on_shield_success);
  p_on_shield_failed = &v13->on_shield_failed;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_failed, &v13->on_shield_failed);
  if ( *(char *)(((unsigned __int64)&v13->use_muti_player_fix_data >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v13->use_muti_player_fix_data, p_on_shield_failed, &v13->use_muti_player_fix_data);
  use_muti_player_fix_data = v13->use_muti_player_fix_data;
  v7 = *(_BYTE *)(((unsigned __int64)&this->use_muti_player_fix_data >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(p_on_shield_failed) = v7 != 0;
    __asan_report_store1(&this->use_muti_player_fix_data, p_on_shield_failed, &this->use_muti_player_fix_data);
  }
  this->use_muti_player_fix_data = use_muti_player_fix_data;
  v8 = ((_BYTE)v13 + 17) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&v13->update_shield_by_max_hp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&v13->update_shield_by_max_hp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&v13->update_shield_by_max_hp, v8, v9);
  update_shield_by_max_hp = v13->update_shield_by_max_hp;
  v11 = *(_BYTE *)(((unsigned __int64)&this->update_shield_by_max_hp >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v11 != 0;
  v12 = (v11 != 0) & (unsigned __int8)((((unsigned __int8)this + 17) & 7) >= v11);
  if ( (_BYTE)v12 )
    __asan_report_store1(&this->update_shield_by_max_hp, v8, v12);
  this->update_shield_by_max_hp = update_shield_by_max_hp;
};

// Line 1255: range 0000000011302B10-0000000011302BE7
void __cdecl data::ElementShieldMixin::~ElementShieldMixin(data::ElementShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_shield_failed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_shield_success);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_shield_broken);
  data::DynamicFloat::~DynamicFloat(&this->damage_ratio);
  data::DynamicFloat::~DynamicFloat(&this->shield_hp);
  data::DynamicFloat::~DynamicFloat(&this->shield_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->shield_angle);
  std::string::~string(&this->show_damage_text);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1255: range 0000000011302BE8-0000000011302C12
void __cdecl data::ElementShieldMixin::~ElementShieldMixin(data::ElementShieldMixin *const this)
{
  data::ElementShieldMixin::~ElementShieldMixin(this);
  operator delete(this, 0x118uLL);
};

// Line 1260: range 00000000100C0EDC-00000000100C0EEC
const char *__cdecl data::ElementShieldMixin::getTypeName(const data::ElementShieldMixin *const this)
{
  return "ElementShieldMixin";
};

// Line 1261: range 00000000100C0EEE-00000000100C108A
int32_t __cdecl data::ElementShieldMixin::getHashNum(const data::ElementShieldMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElementShieldMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElementShieldMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1277: range 000000001122762C-000000001122766D
void __cdecl data::ElementShieldMixinFactory::ElementShieldMixinFactory(data::ElementShieldMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementShieldMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElementShieldMixinFactory = v2;
};

// Line 1285: range 0000000011227976-0000000011227C23
void __cdecl data::EliteShieldMixin::EliteShieldMixin(data::EliteShieldMixin *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int (**v5)(...); // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx
  char v8[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::EliteShieldMixin::EliteShieldMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v5 = (int (**)(...))(&`vtable for'data::EliteShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v5;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    &this->shield_type,
    "default",
    (const std::allocator<char> *)(v2 + 32));
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  data::DynamicFloat::DynamicFloat(&this->shield_angle, 360.0);
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio);
  data::DynamicFloat::DynamicFloat(&this->shield_hp);
  std::string::basic_string(&this->cost_shield_ratio_name);
  std::string::basic_string(&this->show_damage_text);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken);
  data::DynamicFloat::DynamicFloat(&this->amount_by_get_damage);
  if ( *(char *)(((unsigned __int64)&this->target_mute_hit_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->target_mute_hit_effect, "default", &this->target_mute_hit_effect);
  this->target_mute_hit_effect = 1;
  v6 = ((_BYTE)this + 25) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->infinite_shield >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->infinite_shield >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->infinite_shield, v6, v7);
  this->infinite_shield = 0;
  data::DynamicFloat::DynamicFloat(&this->heal_limited_by_caster_max_hpratio);
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1285: range 0000000011228074-00000000112283B8
void __cdecl data::EliteShieldMixin::EliteShieldMixin(
        data::EliteShieldMixin *const this,
        const data::EliteShieldMixin *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_amount_by_get_damage; // rsi
  bool target_mute_hit_effect; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool infinite_shield; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EliteShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->shield_type, &a2->shield_type);
  data::DynamicFloat::DynamicFloat(&this->shield_angle, &a2->shield_angle);
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio, &a2->shield_hpratio);
  data::DynamicFloat::DynamicFloat(&this->shield_hp, &a2->shield_hp);
  std::string::basic_string(&this->cost_shield_ratio_name, &a2->cost_shield_ratio_name);
  std::string::basic_string(&this->show_damage_text, &a2->show_damage_text);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken, &a2->on_shield_broken);
  p_amount_by_get_damage = &a2->amount_by_get_damage;
  data::DynamicFloat::DynamicFloat(&this->amount_by_get_damage, &a2->amount_by_get_damage);
  if ( *(char *)(((unsigned __int64)&a2->target_mute_hit_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->target_mute_hit_effect, p_amount_by_get_damage, &a2->target_mute_hit_effect);
  target_mute_hit_effect = a2->target_mute_hit_effect;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target_mute_hit_effect >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_amount_by_get_damage) = v5 != 0;
    __asan_report_store1(&this->target_mute_hit_effect, p_amount_by_get_damage, &this->target_mute_hit_effect);
  }
  this->target_mute_hit_effect = target_mute_hit_effect;
  v6 = ((_BYTE)a2 + 25) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->infinite_shield >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->infinite_shield >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->infinite_shield, v6, v7);
  infinite_shield = a2->infinite_shield;
  v9 = *(_BYTE *)(((unsigned __int64)&this->infinite_shield >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 25) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->infinite_shield, v6, v10);
  this->infinite_shield = infinite_shield;
  data::DynamicFloat::DynamicFloat(&this->heal_limited_by_caster_max_hpratio, &a2->heal_limited_by_caster_max_hpratio);
};

// Line 1302: range 00000000113029FC-0000000011302AE3
void __cdecl data::EliteShieldMixin::~EliteShieldMixin(data::EliteShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EliteShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->heal_limited_by_caster_max_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_get_damage);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_shield_broken);
  std::string::~string(&this->show_damage_text);
  std::string::~string(&this->cost_shield_ratio_name);
  data::DynamicFloat::~DynamicFloat(&this->shield_hp);
  data::DynamicFloat::~DynamicFloat(&this->shield_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->shield_angle);
  std::string::~string(&this->shield_type);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1302: range 0000000011302AE4-0000000011302B0E
void __cdecl data::EliteShieldMixin::~EliteShieldMixin(data::EliteShieldMixin *const this)
{
  data::EliteShieldMixin::~EliteShieldMixin(this);
  operator delete(this, 0x140uLL);
};

// Line 1307: range 00000000100C108C-00000000100C109C
const char *__cdecl data::EliteShieldMixin::getTypeName(const data::EliteShieldMixin *const this)
{
  return "EliteShieldMixin";
};

// Line 1308: range 00000000100C109E-00000000100C123A
int32_t __cdecl data::EliteShieldMixin::getHashNum(const data::EliteShieldMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EliteShieldMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EliteShieldMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1324: range 00000000112286A2-00000000112286E3
void __cdecl data::EliteShieldMixinFactory::EliteShieldMixinFactory(data::EliteShieldMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EliteShieldMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EliteShieldMixinFactory = v2;
};

// Line 1332: range 00000000112289EC-0000000011228A49
void __cdecl data::OverrideAttackEventMixin::OverrideAttackEventMixin(data::OverrideAttackEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OverrideAttackEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->override_attack_event);
};

// Line 1332: range 0000000011228E4E-0000000011228EE4
void __cdecl data::OverrideAttackEventMixin::OverrideAttackEventMixin(
        data::OverrideAttackEventMixin *const this,
        const data::OverrideAttackEventMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OverrideAttackEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->override_attack_event, &a2->override_attack_event);
};

// Line 1339: range 00000000113029D0-00000000113029FA
void __cdecl data::OverrideAttackEventMixin::~OverrideAttackEventMixin(data::OverrideAttackEventMixin *const this)
{
  data::OverrideAttackEventMixin::~OverrideAttackEventMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 1339: range 0000000011302972-00000000113029CF
void __cdecl data::OverrideAttackEventMixin::~OverrideAttackEventMixin(data::OverrideAttackEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideAttackEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_attack_event);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1344: range 00000000100C123C-00000000100C124C
const char *__cdecl data::OverrideAttackEventMixin::getTypeName(const data::OverrideAttackEventMixin *const this)
{
  return "OverrideAttackEventMixin";
};

// Line 1345: range 00000000100C124E-00000000100C13EA
int32_t __cdecl data::OverrideAttackEventMixin::getHashNum(const data::OverrideAttackEventMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OverrideAttackEventMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OverrideAttackEventMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1361: range 00000000112291CE-000000001122920F
void __cdecl data::OverrideAttackEventMixinFactory::OverrideAttackEventMixinFactory(
        data::OverrideAttackEventMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideAttackEventMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OverrideAttackEventMixinFactory = v2;
};

// Line 1383: range 0000000011229678-000000001122980C
void __cdecl data::AttachModifierToSelfGlobalValueMixin::AttachModifierToSelfGlobalValueMixin(
        data::AttachModifierToSelfGlobalValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->global_value_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->global_value_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->global_value_target, v1);
  }
  this->global_value_target = Self_0;
  std::string::basic_string(&this->global_value_key);
  if ( *(_BYTE *)(((unsigned __int64)&this->add_action >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->add_action >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->add_action, v1);
  }
  this->add_action = Idle_0;
  data::DynamicFloat::DynamicFloat(&this->default_global_value_on_create, 0.0);
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_queues);
  if ( *(char *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->remove_applied_modifier, v1, &this->remove_applied_modifier);
  this->remove_applied_modifier = 1;
};

// Line 1383: range 0000000011229C5C-0000000011229F28
void __cdecl data::AttachModifierToSelfGlobalValueMixin::AttachModifierToSelfGlobalValueMixin(
        data::AttachModifierToSelfGlobalValueMixin *const this,
        const data::AttachModifierToSelfGlobalValueMixin *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting global_value_target; // ecx
  char v4; // al
  std::string *p_global_value_key; // rsi
  data::AddActionType add_action; // ecx
  char v7; // al
  data::ConfigAbilityActionArrayArray *p_action_queues; // rsi
  bool remove_applied_modifier; // cl
  char v10; // al
  const data::AttachModifierToSelfGlobalValueMixin *v11; // [rsp+0h] [rbp-20h]

  v11 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->global_value_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->global_value_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->global_value_target);
  }
  global_value_target = a2->global_value_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->global_value_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->global_value_target, a2);
  }
  this->global_value_target = global_value_target;
  p_global_value_key = &v11->global_value_key;
  std::string::basic_string(&this->global_value_key, &v11->global_value_key);
  if ( *(_BYTE *)(((unsigned __int64)&v11->add_action >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v11->add_action >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v11->add_action);
  }
  add_action = v11->add_action;
  v7 = *(_BYTE *)(((unsigned __int64)&this->add_action >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(p_global_value_key) = v7 != 0;
    __asan_report_store4(&this->add_action, p_global_value_key);
  }
  this->add_action = add_action;
  data::DynamicFloat::DynamicFloat(&this->default_global_value_on_create, &v11->default_global_value_on_create);
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &v11->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps, &v11->modifier_name_steps);
  p_action_queues = &v11->action_queues;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(
    &this->action_queues,
    &v11->action_queues);
  if ( *(char *)(((unsigned __int64)&v11->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v11->remove_applied_modifier, p_action_queues, &v11->remove_applied_modifier);
  remove_applied_modifier = v11->remove_applied_modifier;
  v10 = *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(p_action_queues) = v10 != 0;
    __asan_report_store1(&this->remove_applied_modifier, p_action_queues, &this->remove_applied_modifier);
  }
  this->remove_applied_modifier = remove_applied_modifier;
};

// Line 1397: range 000000001122A2B4-000000001122A2DE
void __cdecl data::AttachModifierToSelfGlobalValueMixin::~AttachModifierToSelfGlobalValueMixin(
        data::AttachModifierToSelfGlobalValueMixin *const this)
{
  data::AttachModifierToSelfGlobalValueMixin::~AttachModifierToSelfGlobalValueMixin(this);
  operator delete(this, 0xC0uLL);
};

// Line 1397: range 000000001122A212-000000001122A2B3
void __cdecl data::AttachModifierToSelfGlobalValueMixin::~AttachModifierToSelfGlobalValueMixin(
        data::AttachModifierToSelfGlobalValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::~vector(&this->action_queues);
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  data::DynamicFloat::~DynamicFloat(&this->default_global_value_on_create);
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1402: range 00000000100C13EC-00000000100C13FC
const char *__cdecl data::AttachModifierToSelfGlobalValueMixin::getTypeName(
        const data::AttachModifierToSelfGlobalValueMixin *const this)
{
  return "AttachModifierToSelfGlobalValueMixin";
};

// Line 1403: range 00000000100C13FE-00000000100C159A
int32_t __cdecl data::AttachModifierToSelfGlobalValueMixin::getHashNum(
        const data::AttachModifierToSelfGlobalValueMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToSelfGlobalValueMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToSelfGlobalValueMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1422: range 000000001122A2E0-000000001122A366
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateMixin::AttachModifierToSelfGlobalValueAndTalkStateMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::AttachModifierToSelfGlobalValueMixin::AttachModifierToSelfGlobalValueMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->gvin_talk, 0.0);
};

// Line 1422: range 000000001122A7B0-000000001122A84B
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateMixin::AttachModifierToSelfGlobalValueAndTalkStateMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateMixin *const this,
        const data::AttachModifierToSelfGlobalValueAndTalkStateMixin *a2)
{
  int (**v2)(...); // rdx

  data::AttachModifierToSelfGlobalValueMixin::AttachModifierToSelfGlobalValueMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->gvin_talk, &a2->gvin_talk);
};

// Line 1429: range 0000000011302946-0000000011302970
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateMixin::~AttachModifierToSelfGlobalValueAndTalkStateMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateMixin *const this)
{
  data::AttachModifierToSelfGlobalValueAndTalkStateMixin::~AttachModifierToSelfGlobalValueAndTalkStateMixin(this);
  operator delete(this, 0xE0uLL);
};

// Line 1429: range 00000000113028E6-0000000011302945
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateMixin::~AttachModifierToSelfGlobalValueAndTalkStateMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->gvin_talk);
  data::AttachModifierToSelfGlobalValueMixin::~AttachModifierToSelfGlobalValueMixin(this);
};

// Line 1434: range 00000000100C159C-00000000100C15AC
const char *__cdecl data::AttachModifierToSelfGlobalValueAndTalkStateMixin::getTypeName(
        const data::AttachModifierToSelfGlobalValueAndTalkStateMixin *const this)
{
  return "AttachModifierToSelfGlobalValueAndTalkStateMixin";
};

// Line 1435: range 00000000100C15AE-00000000100C174A
int32_t __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateMixin::getHashNum(
        const data::AttachModifierToSelfGlobalValueAndTalkStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToSelfGlobalValueAndTalkStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToSelfGlobalValueAndTalkStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1451: range 000000001122AB34-000000001122AB75
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateMixinFactory::AttachModifierToSelfGlobalValueAndTalkStateMixinFactory(
        data::AttachModifierToSelfGlobalValueAndTalkStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToSelfGlobalValueAndTalkStateMixinFactory = v2;
};

// Line 1459: range 000000001122AE7E-000000001122AF89
void __cdecl data::AttachModifierToSelfGlobalValueNoInitMixin::AttachModifierToSelfGlobalValueNoInitMixin(
        data::AttachModifierToSelfGlobalValueNoInitMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueNoInitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_value_key);
  if ( *(_BYTE *)(((unsigned __int64)&this->add_action >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->add_action >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->add_action, v1);
  }
  this->add_action = Idle_0;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_queues);
  if ( *(char *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->remove_applied_modifier, v1, &this->remove_applied_modifier);
  this->remove_applied_modifier = 1;
};

// Line 1459: range 000000001122B346-000000001122B561
void __cdecl data::AttachModifierToSelfGlobalValueNoInitMixin::AttachModifierToSelfGlobalValueNoInitMixin(
        data::AttachModifierToSelfGlobalValueNoInitMixin *const this,
        const data::AttachModifierToSelfGlobalValueNoInitMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_global_value_key; // rsi
  data::AddActionType add_action; // ecx
  char v5; // al
  data::ConfigAbilityActionArrayArray *p_action_queues; // rsi
  bool remove_applied_modifier; // cl
  char v8; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueNoInitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_global_value_key = &a2->global_value_key;
  std::string::basic_string(&this->global_value_key, &a2->global_value_key);
  if ( *(_BYTE *)(((unsigned __int64)&a2->add_action >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->add_action >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->add_action);
  }
  add_action = a2->add_action;
  v5 = *(_BYTE *)(((unsigned __int64)&this->add_action >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_global_value_key) = v5 != 0;
    __asan_report_store4(&this->add_action, p_global_value_key);
  }
  this->add_action = add_action;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps, &a2->modifier_name_steps);
  p_action_queues = &a2->action_queues;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_queues, &a2->action_queues);
  if ( *(char *)(((unsigned __int64)&a2->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->remove_applied_modifier, p_action_queues, &a2->remove_applied_modifier);
  remove_applied_modifier = a2->remove_applied_modifier;
  v8 = *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(p_action_queues) = v8 != 0;
    __asan_report_store1(&this->remove_applied_modifier, p_action_queues, &this->remove_applied_modifier);
  }
  this->remove_applied_modifier = remove_applied_modifier;
};

// Line 1471: range 000000001122B8D8-000000001122B902
void __cdecl data::AttachModifierToSelfGlobalValueNoInitMixin::~AttachModifierToSelfGlobalValueNoInitMixin(
        data::AttachModifierToSelfGlobalValueNoInitMixin *const this)
{
  data::AttachModifierToSelfGlobalValueNoInitMixin::~AttachModifierToSelfGlobalValueNoInitMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 1471: range 000000001122B84A-000000001122B8D7
void __cdecl data::AttachModifierToSelfGlobalValueNoInitMixin::~AttachModifierToSelfGlobalValueNoInitMixin(
        data::AttachModifierToSelfGlobalValueNoInitMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueNoInitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::~vector(&this->action_queues);
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1476: range 00000000100C174C-00000000100C175C
const char *__cdecl data::AttachModifierToSelfGlobalValueNoInitMixin::getTypeName(
        const data::AttachModifierToSelfGlobalValueNoInitMixin *const this)
{
  return "AttachModifierToSelfGlobalValueNoInitMixin";
};

// Line 1477: range 00000000100C175E-00000000100C18FA
int32_t __cdecl data::AttachModifierToSelfGlobalValueNoInitMixin::getHashNum(
        const data::AttachModifierToSelfGlobalValueNoInitMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToSelfGlobalValueNoInitMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToSelfGlobalValueNoInitMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1496: range 000000001122B904-000000001122B98A
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::AttachModifierToSelfGlobalValueNoInitMixin::AttachModifierToSelfGlobalValueNoInitMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->gvin_talk, 0.0);
};

// Line 1496: range 000000001122BDE0-000000001122BE7B
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin *const this,
        const data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin *a2)
{
  int (**v2)(...); // rdx

  data::AttachModifierToSelfGlobalValueNoInitMixin::AttachModifierToSelfGlobalValueNoInitMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->gvin_talk, &a2->gvin_talk);
};

// Line 1503: range 00000000113028BA-00000000113028E4
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::~AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin *const this)
{
  data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::~AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin(this);
  operator delete(this, 0xB8uLL);
};

// Line 1503: range 000000001130285A-00000000113028B9
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::~AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin(
        data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->gvin_talk);
  data::AttachModifierToSelfGlobalValueNoInitMixin::~AttachModifierToSelfGlobalValueNoInitMixin(this);
};

// Line 1508: range 00000000100C18FC-00000000100C190C
const char *__cdecl data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::getTypeName(
        const data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin *const this)
{
  return "AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin";
};

// Line 1509: range 00000000100C190E-00000000100C1AAA
int32_t __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::getHashNum(
        const data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToSelfGlobalValueAndTalkStateNoInitMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1525: range 000000001122C164-000000001122C1A5
void __cdecl data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixinFactory::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixinFactory(
        data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSelfGlobalValueAndTalkStateNoInitMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToSelfGlobalValueAndTalkStateNoInitMixinFactory = v2;
};

// Line 1533: range 000000001122C4AE-000000001122C54F
void __cdecl data::TemperatureGrowRateMixin::TemperatureGrowRateMixin(data::TemperatureGrowRateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TemperatureGrowRateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->monster_gv);
  if ( *(_BYTE *)(((unsigned __int64)&this->grow_rate_multiplier >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->grow_rate_multiplier >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->grow_rate_multiplier, v1);
  }
  this->grow_rate_multiplier = 1.0;
};

// Line 1533: range 000000001122C96A-000000001122CA78
void __cdecl data::TemperatureGrowRateMixin::TemperatureGrowRateMixin(
        data::TemperatureGrowRateMixin *const this,
        const data::TemperatureGrowRateMixin *a2)
{
  int (**v2)(...); // rdx
  float grow_rate_multiplier; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TemperatureGrowRateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->monster_gv, &a2->monster_gv);
  if ( *(_BYTE *)(((unsigned __int64)&a2->grow_rate_multiplier >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->grow_rate_multiplier >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->grow_rate_multiplier);
  }
  grow_rate_multiplier = a2->grow_rate_multiplier;
  if ( *(_BYTE *)(((unsigned __int64)&this->grow_rate_multiplier >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->grow_rate_multiplier >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->grow_rate_multiplier, &a2->monster_gv);
  }
  this->grow_rate_multiplier = grow_rate_multiplier;
};

// Line 1541: range 00000000113027D0-000000001130282D
void __cdecl data::TemperatureGrowRateMixin::~TemperatureGrowRateMixin(data::TemperatureGrowRateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TemperatureGrowRateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->monster_gv);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1541: range 000000001130282E-0000000011302858
void __cdecl data::TemperatureGrowRateMixin::~TemperatureGrowRateMixin(data::TemperatureGrowRateMixin *const this)
{
  data::TemperatureGrowRateMixin::~TemperatureGrowRateMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 1546: range 00000000100C1AAC-00000000100C1ABC
const char *__cdecl data::TemperatureGrowRateMixin::getTypeName(const data::TemperatureGrowRateMixin *const this)
{
  return "TemperatureGrowRateMixin";
};

// Line 1547: range 00000000100C1ABE-00000000100C1C5A
int32_t __cdecl data::TemperatureGrowRateMixin::getHashNum(const data::TemperatureGrowRateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TemperatureGrowRateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TemperatureGrowRateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1563: range 000000001122CD62-000000001122CDA3
void __cdecl data::TemperatureGrowRateMixinFactory::TemperatureGrowRateMixinFactory(
        data::TemperatureGrowRateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TemperatureGrowRateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TemperatureGrowRateMixinFactory = v2;
};

// Line 1585: range 000000001122D20C-000000001122D4CC
void __cdecl data::AttachModifierToGlobalValueMixin::AttachModifierToGlobalValueMixin(
        data::AttachModifierToGlobalValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->global_value_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->global_value_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->global_value_target, v1);
  }
  this->global_value_target = Self_0;
  if ( *(_WORD *)(((unsigned __int64)&this->other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  std::string::basic_string(&this->global_value_key);
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_queues);
  if ( *(char *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->remove_applied_modifier, v1, &this->remove_applied_modifier);
  this->remove_applied_modifier = 1;
  v3 = ((_BYTE)this - 95) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier_target_disappear >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier_target_disappear >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->remove_applied_modifier_target_disappear, v3, v4);
  this->remove_applied_modifier_target_disappear = 1;
  v5 = ((_BYTE)this - 94) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier_clear_global_value >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier_clear_global_value >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->remove_applied_modifier_clear_global_value, v5, v6);
  this->remove_applied_modifier_clear_global_value = 1;
  v7 = ((_BYTE)this - 93) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->remove_modifier_by_attach >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->remove_modifier_by_attach >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->remove_modifier_by_attach, v7, v8);
  this->remove_modifier_by_attach = 0;
  v9 = (((_BYTE)this - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_register_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_register_type >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->target_register_type, v9);
  }
  this->target_register_type = RegisterOnce;
  if ( *(char *)(((unsigned __int64)&this->not_remove_modifier_when_entity_not_sync >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(
      &this->not_remove_modifier_when_entity_not_sync,
      v9,
      &this->not_remove_modifier_when_entity_not_sync);
  this->not_remove_modifier_when_entity_not_sync = 0;
};

// Line 1585: range 000000001122D916-000000001122DE0E
void __cdecl data::AttachModifierToGlobalValueMixin::AttachModifierToGlobalValueMixin(
        data::AttachModifierToGlobalValueMixin *const this,
        const data::AttachModifierToGlobalValueMixin *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting global_value_target; // ecx
  char v4; // al
  data::ConfigAbilityActionArrayArray *p_action_queues; // rsi
  bool remove_applied_modifier; // cl
  char v7; // al
  __int64 v8; // rsi
  __int64 v9; // rdx
  bool remove_applied_modifier_target_disappear; // cl
  char v11; // dl
  __int64 v12; // rdx
  __int64 v13; // rsi
  __int64 v14; // rdx
  bool remove_applied_modifier_clear_global_value; // cl
  char v16; // dl
  __int64 v17; // rdx
  __int64 v18; // rsi
  __int64 v19; // rdx
  bool remove_modifier_by_attach; // cl
  char v21; // dl
  __int64 v22; // rdx
  __int64 v23; // rsi
  data::TargetRegisterType target_register_type; // ecx
  char v25; // dl
  bool not_remove_modifier_when_entity_not_sync; // cl
  char v27; // al
  const data::AttachModifierToGlobalValueMixin *v28; // [rsp+0h] [rbp-20h]

  v28 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->global_value_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->global_value_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->global_value_target);
  }
  global_value_target = a2->global_value_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->global_value_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->global_value_target, a2);
  }
  this->global_value_target = global_value_target;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &v28->other_targets);
  std::string::basic_string(&this->global_value_key, &v28->global_value_key);
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &v28->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps, &v28->modifier_name_steps);
  p_action_queues = &v28->action_queues;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(
    &this->action_queues,
    &v28->action_queues);
  if ( *(char *)(((unsigned __int64)&v28->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v28->remove_applied_modifier, p_action_queues, &v28->remove_applied_modifier);
  remove_applied_modifier = v28->remove_applied_modifier;
  v7 = *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(p_action_queues) = v7 != 0;
    __asan_report_store1(&this->remove_applied_modifier, p_action_queues, &this->remove_applied_modifier);
  }
  this->remove_applied_modifier = remove_applied_modifier;
  v8 = ((_BYTE)v28 - 95) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&v28->remove_applied_modifier_target_disappear >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&v28->remove_applied_modifier_target_disappear >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&v28->remove_applied_modifier_target_disappear, v8, v9);
  remove_applied_modifier_target_disappear = v28->remove_applied_modifier_target_disappear;
  v11 = *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier_target_disappear >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v11 != 0;
  v12 = (v11 != 0) & (unsigned __int8)((((unsigned __int8)this - 95) & 7) >= v11);
  if ( (_BYTE)v12 )
    __asan_report_store1(&this->remove_applied_modifier_target_disappear, v8, v12);
  this->remove_applied_modifier_target_disappear = remove_applied_modifier_target_disappear;
  v13 = ((_BYTE)v28 - 94) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&v28->remove_applied_modifier_clear_global_value >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&v28->remove_applied_modifier_clear_global_value >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&v28->remove_applied_modifier_clear_global_value, v13, v14);
  remove_applied_modifier_clear_global_value = v28->remove_applied_modifier_clear_global_value;
  v16 = *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier_clear_global_value >> 3) + 0x7FFF8000);
  LOBYTE(v13) = v16 != 0;
  v17 = (v16 != 0) & (unsigned __int8)((((unsigned __int8)this - 94) & 7) >= v16);
  if ( (_BYTE)v17 )
    __asan_report_store1(&this->remove_applied_modifier_clear_global_value, v13, v17);
  this->remove_applied_modifier_clear_global_value = remove_applied_modifier_clear_global_value;
  v18 = ((_BYTE)v28 - 93) & 7;
  v19 = (*(_BYTE *)(((unsigned __int64)&v28->remove_modifier_by_attach >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v18 >= *(_BYTE *)(((unsigned __int64)&v28->remove_modifier_by_attach >> 3) + 0x7FFF8000));
  if ( (_BYTE)v19 )
    __asan_report_load1(&v28->remove_modifier_by_attach, v18, v19);
  remove_modifier_by_attach = v28->remove_modifier_by_attach;
  v21 = *(_BYTE *)(((unsigned __int64)&this->remove_modifier_by_attach >> 3) + 0x7FFF8000);
  LOBYTE(v18) = v21 != 0;
  v22 = (v21 != 0) & (unsigned __int8)((((unsigned __int8)this - 93) & 7) >= v21);
  if ( (_BYTE)v22 )
    __asan_report_store1(&this->remove_modifier_by_attach, v18, v22);
  this->remove_modifier_by_attach = remove_modifier_by_attach;
  v23 = (((_BYTE)v28 - 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v28->target_register_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v28 - 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v28->target_register_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v28->target_register_type);
  }
  target_register_type = v28->target_register_type;
  v25 = *(_BYTE *)(((unsigned __int64)&this->target_register_type >> 3) + 0x7FFF8000);
  LOBYTE(v23) = v25 != 0;
  if ( v25 != 0 && (char)((((_BYTE)this - 92) & 7) + 3) >= v25 )
    __asan_report_store4(&this->target_register_type, v23);
  this->target_register_type = target_register_type;
  if ( *(char *)(((unsigned __int64)&v28->not_remove_modifier_when_entity_not_sync >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(
      &v28->not_remove_modifier_when_entity_not_sync,
      v23,
      &v28->not_remove_modifier_when_entity_not_sync);
  not_remove_modifier_when_entity_not_sync = v28->not_remove_modifier_when_entity_not_sync;
  v27 = *(_BYTE *)(((unsigned __int64)&this->not_remove_modifier_when_entity_not_sync >> 3) + 0x7FFF8000);
  if ( v27 < 0 )
  {
    LOBYTE(v23) = v27 != 0;
    __asan_report_store1(
      &this->not_remove_modifier_when_entity_not_sync,
      v23,
      &this->not_remove_modifier_when_entity_not_sync);
  }
  this->not_remove_modifier_when_entity_not_sync = not_remove_modifier_when_entity_not_sync;
};

// Line 1603: range 00000000113027A4-00000000113027CE
void __cdecl data::AttachModifierToGlobalValueMixin::~AttachModifierToGlobalValueMixin(
        data::AttachModifierToGlobalValueMixin *const this)
{
  data::AttachModifierToGlobalValueMixin::~AttachModifierToGlobalValueMixin(this);
  operator delete(this, 0xB0uLL);
};

// Line 1603: range 0000000011302704-00000000113027A3
void __cdecl data::AttachModifierToGlobalValueMixin::~AttachModifierToGlobalValueMixin(
        data::AttachModifierToGlobalValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::~vector(&this->action_queues);
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  std::string::~string(&this->global_value_key);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->other_targets);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1608: range 00000000100C1C5C-00000000100C1C6C
const char *__cdecl data::AttachModifierToGlobalValueMixin::getTypeName(
        const data::AttachModifierToGlobalValueMixin *const this)
{
  return "AttachModifierToGlobalValueMixin";
};

// Line 1609: range 00000000100C1C6E-00000000100C1E0A
int32_t __cdecl data::AttachModifierToGlobalValueMixin::getHashNum(
        const data::AttachModifierToGlobalValueMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToGlobalValueMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToGlobalValueMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1625: range 000000001122E0F8-000000001122E139
void __cdecl data::AttachModifierToGlobalValueMixinFactory::AttachModifierToGlobalValueMixinFactory(
        data::AttachModifierToGlobalValueMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToGlobalValueMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToGlobalValueMixinFactory = v2;
};

// Line 1633: range 000000001122E442-000000001122E51B
void __cdecl data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(data::TriggerTypeSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerTypeSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v1);
  }
  this->duration = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->radius, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->radius = 5.0;
};

// Line 1633: range 000000001122E8F0-000000001122EA48
void __cdecl data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(
        data::TriggerTypeSupportMixin *const this,
        const data::TriggerTypeSupportMixin *a2)
{
  int (**v2)(...); // rdx
  float duration; // xmm0_4
  float radius; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerTypeSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, a2);
  }
  this->duration = duration;
  if ( *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->radius);
  }
  radius = a2->radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->radius, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->radius = radius;
};

// Line 1641: range 000000001122ECE0-000000001122ED0A
void __cdecl data::TriggerTypeSupportMixin::~TriggerTypeSupportMixin(data::TriggerTypeSupportMixin *const this)
{
  data::TriggerTypeSupportMixin::~TriggerTypeSupportMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 1641: range 000000001122EC92-000000001122ECDF
void __cdecl data::TriggerTypeSupportMixin::~TriggerTypeSupportMixin(data::TriggerTypeSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerTypeSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1646: range 00000000100C1E0C-00000000100C1E1C
const char *__cdecl data::TriggerTypeSupportMixin::getTypeName(const data::TriggerTypeSupportMixin *const this)
{
  return "TriggerTypeSupportMixin";
};

// Line 1647: range 00000000100C1E1E-00000000100C1FBA
int32_t __cdecl data::TriggerTypeSupportMixin::getHashNum(const data::TriggerTypeSupportMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerTypeSupportMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerTypeSupportMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1666: range 000000001122ED0C-000000001122ED97
void __cdecl data::TriggerElementSupportMixin::TriggerElementSupportMixin(data::TriggerElementSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerElementSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->element_type, v1);
  }
  this->element_type = None_0;
};

// Line 1666: range 000000001122F172-000000001122F23F
void __cdecl data::TriggerElementSupportMixin::TriggerElementSupportMixin(
        data::TriggerElementSupportMixin *const this,
        const data::TriggerElementSupportMixin *a2)
{
  int (**v2)(...); // rdx
  data::ElementType element_type; // ecx
  char v4; // al

  data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerElementSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->element_type);
  }
  element_type = a2->element_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->element_type, a2);
  }
  this->element_type = element_type;
};

// Line 1673: range 00000000113026D8-0000000011302702
void __cdecl data::TriggerElementSupportMixin::~TriggerElementSupportMixin(
        data::TriggerElementSupportMixin *const this)
{
  data::TriggerElementSupportMixin::~TriggerElementSupportMixin(this);
  operator delete(this, 0x30uLL);
};

// Line 1673: range 000000001130268A-00000000113026D7
void __cdecl data::TriggerElementSupportMixin::~TriggerElementSupportMixin(
        data::TriggerElementSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerElementSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::TriggerTypeSupportMixin::~TriggerTypeSupportMixin(this);
};

// Line 1678: range 00000000100C1FBC-00000000100C1FCC
const char *__cdecl data::TriggerElementSupportMixin::getTypeName(const data::TriggerElementSupportMixin *const this)
{
  return "TriggerElementSupportMixin";
};

// Line 1679: range 00000000100C1FCE-00000000100C216A
int32_t __cdecl data::TriggerElementSupportMixin::getHashNum(const data::TriggerElementSupportMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerElementSupportMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerElementSupportMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1695: range 000000001122F488-000000001122F4C9
void __cdecl data::TriggerElementSupportMixinFactory::TriggerElementSupportMixinFactory(
        data::TriggerElementSupportMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerElementSupportMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerElementSupportMixinFactory = v2;
};

// Line 1703: range 000000001122F7D2-000000001122F85D
void __cdecl data::TriggerBeHitSupportMixin::TriggerBeHitSupportMixin(data::TriggerBeHitSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerBeHitSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->hit_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->hit_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->hit_level, v1);
  }
  this->hit_level = Mute;
};

// Line 1703: range 000000001122FC38-000000001122FD05
void __cdecl data::TriggerBeHitSupportMixin::TriggerBeHitSupportMixin(
        data::TriggerBeHitSupportMixin *const this,
        const data::TriggerBeHitSupportMixin *a2)
{
  int (**v2)(...); // rdx
  data::HitLevel hit_level; // ecx
  char v4; // al

  data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerBeHitSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->hit_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->hit_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->hit_level);
  }
  hit_level = a2->hit_level;
  v4 = *(_BYTE *)(((unsigned __int64)&this->hit_level >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->hit_level, a2);
  }
  this->hit_level = hit_level;
};

// Line 1710: range 0000000011302610-000000001130265D
void __cdecl data::TriggerBeHitSupportMixin::~TriggerBeHitSupportMixin(data::TriggerBeHitSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerBeHitSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::TriggerTypeSupportMixin::~TriggerTypeSupportMixin(this);
};

// Line 1710: range 000000001130265E-0000000011302688
void __cdecl data::TriggerBeHitSupportMixin::~TriggerBeHitSupportMixin(data::TriggerBeHitSupportMixin *const this)
{
  data::TriggerBeHitSupportMixin::~TriggerBeHitSupportMixin(this);
  operator delete(this, 0x30uLL);
};

// Line 1715: range 00000000100C216C-00000000100C217C
const char *__cdecl data::TriggerBeHitSupportMixin::getTypeName(const data::TriggerBeHitSupportMixin *const this)
{
  return "TriggerBeHitSupportMixin";
};

// Line 1716: range 00000000100C217E-00000000100C231A
int32_t __cdecl data::TriggerBeHitSupportMixin::getHashNum(const data::TriggerBeHitSupportMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerBeHitSupportMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerBeHitSupportMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1732: range 000000001122FF4E-000000001122FF8F
void __cdecl data::TriggerBeHitSupportMixinFactory::TriggerBeHitSupportMixinFactory(
        data::TriggerBeHitSupportMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerBeHitSupportMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerBeHitSupportMixinFactory = v2;
};

// Line 1740: range 0000000011230298-00000000112303F5
void __cdecl data::TriggerRageSupportMixin::TriggerRageSupportMixin(data::TriggerRageSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerRageSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->damp_ratio, v1);
  }
  this->damp_ratio = 0.0;
  v3 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->add_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->add_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->add_ratio, v3);
  }
  this->add_ratio = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_value, v3);
  }
  this->max_value = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_value, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->min_value = 0.0;
};

// Line 1740: range 00000000112307EA-0000000011230A42
void __cdecl data::TriggerRageSupportMixin::TriggerRageSupportMixin(
        data::TriggerRageSupportMixin *const this,
        const data::TriggerRageSupportMixin *a2)
{
  int (**v2)(...); // rdx
  float damp_ratio; // xmm0_4
  float add_ratio; // xmm0_4
  __int64 v5; // rsi
  float max_value; // xmm0_4
  float min_value; // xmm0_4

  data::TriggerTypeSupportMixin::TriggerTypeSupportMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerRageSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->damp_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->damp_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->damp_ratio);
  }
  damp_ratio = a2->damp_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->damp_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->damp_ratio, a2);
  }
  this->damp_ratio = damp_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&a2->add_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->add_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->add_ratio);
  }
  add_ratio = a2->add_ratio;
  v5 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->add_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->add_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->add_ratio, v5);
  }
  this->add_ratio = add_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_value);
  }
  max_value = a2->max_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_value, v5);
  }
  this->max_value = max_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_value);
  }
  min_value = a2->min_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_value, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->min_value = min_value;
};

// Line 1750: range 0000000011302596-00000000113025E3
void __cdecl data::TriggerRageSupportMixin::~TriggerRageSupportMixin(data::TriggerRageSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerRageSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::TriggerTypeSupportMixin::~TriggerTypeSupportMixin(this);
};

// Line 1750: range 00000000113025E4-000000001130260E
void __cdecl data::TriggerRageSupportMixin::~TriggerRageSupportMixin(data::TriggerRageSupportMixin *const this)
{
  data::TriggerRageSupportMixin::~TriggerRageSupportMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 1755: range 00000000100C231C-00000000100C232C
const char *__cdecl data::TriggerRageSupportMixin::getTypeName(const data::TriggerRageSupportMixin *const this)
{
  return "TriggerRageSupportMixin";
};

// Line 1756: range 00000000100C232E-00000000100C24CA
int32_t __cdecl data::TriggerRageSupportMixin::getHashNum(const data::TriggerRageSupportMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerRageSupportMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerRageSupportMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1772: range 0000000011230C8C-0000000011230CCD
void __cdecl data::TriggerRageSupportMixinFactory::TriggerRageSupportMixinFactory(
        data::TriggerRageSupportMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerRageSupportMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerRageSupportMixinFactory = v2;
};

// Line 1780: range 0000000011230FD6-00000000112314AF
void __cdecl data::WindZoneMixin::WindZoneMixin(data::WindZoneMixin *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int (**v5)(...); // rdx
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi
  char v9[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::WindZoneMixin::WindZoneMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v5 = (int (**)(...))(&`vtable for'data::WindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v5;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    &this->shape_name,
    "CircleR5",
    (const std::allocator<char> *)(v2 + 32));
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::DynamicFloat::DynamicFloat(&this->strength, 0.0);
  data::DynamicFloat::DynamicFloat(&this->attenuation, 0.0);
  data::DynamicFloat::DynamicFloat(&this->inner_radius, 0.0);
  if ( *(char *)(((unsigned __int64)&this->reverse >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->reverse, "CircleR5", &this->reverse);
  this->reverse = 0;
  v6 = (((_BYTE)this - 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->target_type, v6);
  }
  this->target_type = None_22;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_num, v6);
  }
  this->max_num = 12;
  v7 = (((_BYTE)this - 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->force_growth, v7);
  }
  this->force_growth = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->force_fallen, v7);
  }
  this->force_fallen = 100.0;
  data::Vector::Vector(&this->offset);
  v8 = (((_BYTE)this + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->force_type, v8);
  }
  this->force_type = WindZoneType;
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->think_interval, v8);
  }
  this->think_interval = 0.1;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_think_interval);
  if ( *(_BYTE *)(((unsigned __int64)&this->override_weight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->override_weight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->override_weight, v8);
  }
  this->override_weight = 0.0;
  if ( v9 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1780: range 0000000011231900-0000000011232039
void __cdecl data::WindZoneMixin::WindZoneMixin(data::WindZoneMixin *const this, const data::WindZoneMixin *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_inner_radius; // rsi
  bool reverse; // cl
  char v5; // al
  __int64 v6; // rsi
  data::TargetType target_type; // ecx
  char v8; // dl
  std::string *p_modifier_name; // rsi
  uint32_t max_num; // ecx
  char v11; // al
  float force_growth; // xmm0_4
  __int64 v13; // rsi
  float force_fallen; // xmm0_4
  __int64 v15; // rdx
  __int64 v16; // rsi
  data::VelocityForceType force_type; // ecx
  char v18; // dl
  float think_interval; // xmm0_4
  float override_weight; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::WindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->shape_name, &a2->shape_name);
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  data::DynamicFloat::DynamicFloat(&this->strength, &a2->strength);
  data::DynamicFloat::DynamicFloat(&this->attenuation, &a2->attenuation);
  p_inner_radius = &a2->inner_radius;
  data::DynamicFloat::DynamicFloat(&this->inner_radius, &a2->inner_radius);
  if ( *(char *)(((unsigned __int64)&a2->reverse >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->reverse, p_inner_radius, &a2->reverse);
  reverse = a2->reverse;
  v5 = *(_BYTE *)(((unsigned __int64)&this->reverse >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_inner_radius) = v5 != 0;
    __asan_report_store1(&this->reverse, p_inner_radius, &this->reverse);
  }
  this->reverse = reverse;
  v6 = (((_BYTE)a2 - 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->target_type);
  }
  target_type = a2->target_type;
  v8 = *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this - 76) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->target_type, v6);
  }
  this->target_type = target_type;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_num);
  }
  max_num = a2->max_num;
  v11 = *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000);
  if ( v11 != 0 && v11 <= 3 )
  {
    LOBYTE(p_modifier_name) = v11 != 0;
    __asan_report_store4(&this->max_num, p_modifier_name);
  }
  this->max_num = max_num;
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->force_growth);
  }
  force_growth = a2->force_growth;
  v13 = (((_BYTE)this - 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->force_growth, v13);
  }
  this->force_growth = force_growth;
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->force_fallen);
  }
  force_fallen = a2->force_fallen;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->force_fallen, v13);
  }
  this->force_fallen = force_fallen;
  if ( (((unsigned __int8)this - 4) & 7) >= *(_BYTE *)(((unsigned __int64)&this->offset >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->offset >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->offset.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 11) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->offset.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->offset, 16LL);
  }
  if ( (((unsigned __int8)a2 - 4) & 7) >= *(_BYTE *)(((unsigned __int64)&a2->offset >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&a2->offset >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&a2->offset.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 + 11) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->offset.is_json_loaded + 3) >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->offset, 16LL);
  }
  v15 = *(_QWORD *)&a2->offset.z;
  *(_QWORD *)&this->offset.x = *(_QWORD *)&a2->offset.x;
  *(_QWORD *)&this->offset.z = v15;
  v16 = (((_BYTE)a2 + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->force_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->force_type);
  }
  force_type = a2->force_type;
  v18 = *(_BYTE *)(((unsigned __int64)&this->force_type >> 3) + 0x7FFF8000);
  LOBYTE(v16) = v18 != 0;
  if ( v18 != 0 && (char)((((_BYTE)this + 12) & 7) + 3) >= v18 )
    __asan_report_store4(&this->force_type, v16);
  this->force_type = force_type;
  if ( *(_BYTE *)(((unsigned __int64)&a2->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->think_interval);
  }
  think_interval = a2->think_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->think_interval, v16);
  }
  this->think_interval = think_interval;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_think_interval, &a2->on_think_interval);
  if ( *(_BYTE *)(((unsigned __int64)&a2->override_weight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->override_weight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->override_weight);
  }
  override_weight = a2->override_weight;
  if ( *(_BYTE *)(((unsigned __int64)&this->override_weight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->override_weight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->override_weight, &a2->on_think_interval);
  }
  this->override_weight = override_weight;
};

// Line 1803: range 000000001130256A-0000000011302594
void __cdecl data::WindZoneMixin::~WindZoneMixin(data::WindZoneMixin *const this)
{
  data::WindZoneMixin::~WindZoneMixin(this);
  operator delete(this, 0x138uLL);
};

// Line 1803: range 0000000011302494-0000000011302569
void __cdecl data::WindZoneMixin::~WindZoneMixin(data::WindZoneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_think_interval);
  std::string::~string(&this->modifier_name);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  data::DynamicFloat::~DynamicFloat(&this->inner_radius);
  data::DynamicFloat::~DynamicFloat(&this->attenuation);
  data::DynamicFloat::~DynamicFloat(&this->strength);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::string::~string(&this->shape_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1808: range 00000000100C24CC-00000000100C24DC
const char *__cdecl data::WindZoneMixin::getTypeName(const data::WindZoneMixin *const this)
{
  return "WindZoneMixin";
};

// Line 1809: range 00000000100C24DE-00000000100C267A
int32_t __cdecl data::WindZoneMixin::getHashNum(const data::WindZoneMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WindZoneMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WindZoneMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1825: range 0000000011232322-0000000011232363
void __cdecl data::WindZoneMixinFactory::WindZoneMixinFactory(data::WindZoneMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WindZoneMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WindZoneMixinFactory = v2;
};

// Line 1833: range 0000000010166094-00000000101663CB
void __cdecl data::ConfigTornadoZone::ConfigTornadoZone(data::ConfigTornadoZone *const this)
{
  unsigned __int64 v1; // rbx
  __int64 v2; // rax
  unsigned __int64 v3; // r12
  __int64 v4; // rsi
  __int64 v5; // rsi
  char v6[112]; // [rsp+10h] [rbp-70h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_0(64LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConfigTornadoZone::ConfigTornadoZone;
  v3 = v1 >> 3;
  *(_DWORD *)(v3 + 2147450880) = -235802127;
  *(_DWORD *)(v3 + 2147450884) = -202116351;
  std::allocator<char>::allocator(v1 + 32);
  std::string::basic_string<std::allocator<char>>(
    &this->shape_name,
    "CircleR5",
    (const std::allocator<char> *)(v1 + 32));
  std::allocator<char>::~allocator(v1 + 32);
  *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
  data::Vector::Vector(&this->offset);
  data::Vector::Vector(&this->dir);
  data::DynamicFloat::DynamicFloat(&this->strength, 0.0);
  data::DynamicFloat::DynamicFloat(&this->attenuation, 0.0);
  data::DynamicFloat::DynamicFloat(&this->inner_radius, 0.0);
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_num, "CircleR5");
  }
  this->max_num = 12;
  v4 = (((_BYTE)this - 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->force_growth, v4);
  }
  this->force_growth = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->force_fallen, v4);
  }
  this->force_fallen = 100.0;
  v5 = (((_BYTE)this - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, v5);
  }
  this->duration = 0.0;
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
  this->is_json_loaded = 0;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1833: range 0000000010E0B1B4-0000000010E0B619
void __cdecl data::ConfigTornadoZone::ConfigTornadoZone(
        data::ConfigTornadoZone *const this,
        const data::ConfigTornadoZone *a2)
{
  __int64 v2; // rdx
  __int64 v3; // rdx
  std::string *p_modifier_name; // rsi
  uint32_t max_num; // ecx
  char v6; // al
  float force_growth; // xmm0_4
  __int64 v8; // rsi
  float force_fallen; // xmm0_4
  float duration; // xmm0_4
  __int64 v11; // rsi
  bool is_json_loaded; // cl
  char v13; // al

  std::string::basic_string(this, a2);
  if ( *(_WORD *)(((unsigned __int64)&this->offset >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->offset >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->offset);
  v2 = *(_QWORD *)&a2->offset.z;
  *(_QWORD *)&this->offset.x = *(_QWORD *)&a2->offset.x;
  *(_QWORD *)&this->offset.z = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->dir >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->dir >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->dir);
  v3 = *(_QWORD *)&a2->dir.z;
  *(_QWORD *)&this->dir.x = *(_QWORD *)&a2->dir.x;
  *(_QWORD *)&this->dir.z = v3;
  data::DynamicFloat::DynamicFloat(&this->strength, &a2->strength);
  data::DynamicFloat::DynamicFloat(&this->attenuation, &a2->attenuation);
  data::DynamicFloat::DynamicFloat(&this->inner_radius, &a2->inner_radius);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_num);
  }
  max_num = a2->max_num;
  v6 = *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(p_modifier_name) = v6 != 0;
    __asan_report_store4(&this->max_num, p_modifier_name);
  }
  this->max_num = max_num;
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->force_growth);
  }
  force_growth = a2->force_growth;
  v8 = (((_BYTE)this - 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->force_growth, v8);
  }
  this->force_growth = force_growth;
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->force_fallen);
  }
  force_fallen = a2->force_fallen;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->force_fallen, v8);
  }
  this->force_fallen = force_fallen;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  v11 = (((_BYTE)this - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, v11);
  }
  this->duration = duration;
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, v11, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v13 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v13 < 0 )
  {
    LOBYTE(v11) = v13 != 0;
    __asan_report_store1(&this->is_json_loaded, v11, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 1833: range 0000000010570404-0000000010570807
void __cdecl data::ConfigTornadoZone::ConfigTornadoZone(
        data::ConfigTornadoZone *const this,
        data::ConfigTornadoZone *a2)
{
  __int64 v2; // rdx
  __int64 v3; // rdx
  std::string *p_modifier_name; // rsi
  uint32_t max_num; // ecx
  char v6; // al
  float force_growth; // xmm0_4
  __int64 v8; // rsi
  float force_fallen; // xmm0_4
  float duration; // xmm0_4
  __int64 v11; // rsi
  bool is_json_loaded; // cl
  char v13; // al

  std::string::basic_string(this, a2);
  if ( *(_WORD *)(((unsigned __int64)&this->offset >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->offset >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->offset);
  v2 = *(_QWORD *)&a2->offset.z;
  *(_QWORD *)&this->offset.x = *(_QWORD *)&a2->offset.x;
  *(_QWORD *)&this->offset.z = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->dir >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->dir >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->dir);
  v3 = *(_QWORD *)&a2->dir.z;
  *(_QWORD *)&this->dir.x = *(_QWORD *)&a2->dir.x;
  *(_QWORD *)&this->dir.z = v3;
  data::DynamicFloat::DynamicFloat(&this->strength, &a2->strength);
  data::DynamicFloat::DynamicFloat(&this->attenuation, &a2->attenuation);
  data::DynamicFloat::DynamicFloat(&this->inner_radius, &a2->inner_radius);
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_num);
  }
  max_num = a2->max_num;
  v6 = *(_BYTE *)(((unsigned __int64)&this->max_num >> 3) + 0x7FFF8000);
  if ( v6 != 0 && v6 <= 3 )
  {
    LOBYTE(p_modifier_name) = v6 != 0;
    __asan_report_store4(&this->max_num, p_modifier_name);
  }
  this->max_num = max_num;
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->force_growth);
  }
  force_growth = a2->force_growth;
  v8 = (((_BYTE)this - 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->force_growth >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->force_growth, v8);
  }
  this->force_growth = force_growth;
  if ( *(_BYTE *)(((unsigned __int64)&a2->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->force_fallen);
  }
  force_fallen = a2->force_fallen;
  if ( *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->force_fallen >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->force_fallen, v8);
  }
  this->force_fallen = force_fallen;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  v11 = (((_BYTE)this - 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, v11);
  }
  this->duration = duration;
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, v11, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v13 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v13 < 0 )
  {
    LOBYTE(v11) = v13 != 0;
    __asan_report_store1(&this->is_json_loaded, v11, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 1833: range 00000000101663CC-0000000010166428
void __cdecl data::ConfigTornadoZone::~ConfigTornadoZone(data::ConfigTornadoZone *const this)
{
  std::string::~string(&this->modifier_name);
  data::DynamicFloat::~DynamicFloat(&this->inner_radius);
  data::DynamicFloat::~DynamicFloat(&this->attenuation);
  data::DynamicFloat::~DynamicFloat(&this->strength);
  std::string::~string(this);
};

// Line 1871: range 00000000112326A4-000000001123281C
void __cdecl data::TornadoMixin::TornadoMixin(data::TornadoMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TornadoMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ConfigTornadoZone>::vector(&this->stage_zone);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_type, v1);
  }
  this->target_type = None_22;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  data::DynamicFloat::DynamicFloat(&this->enviro_wind_strength, 0.0);
  data::DynamicFloat::DynamicFloat(&this->enviro_wind_radius, 0.0);
};

// Line 1871: range 0000000011232C60-0000000011232E2B
void __cdecl data::TornadoMixin::TornadoMixin(data::TornadoMixin *const this, const data::TornadoMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityPredicateArray *p_predicates; // rsi
  data::TargetType target_type; // ecx
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TornadoMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ConfigTornadoZone>::vector(&this->stage_zone, &a2->stage_zone);
  p_predicates = &a2->predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_type);
  }
  target_type = a2->target_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_predicates) = v5 != 0;
    __asan_report_store4(&this->target_type, p_predicates);
  }
  this->target_type = target_type;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  data::DynamicFloat::DynamicFloat(&this->enviro_wind_strength, &a2->enviro_wind_strength);
  data::DynamicFloat::DynamicFloat(&this->enviro_wind_radius, &a2->enviro_wind_radius);
};

// Line 1883: range 0000000011302468-0000000011302492
void __cdecl data::TornadoMixin::~TornadoMixin(data::TornadoMixin *const this)
{
  data::TornadoMixin::~TornadoMixin(this);
  operator delete(this, 0xA8uLL);
};

// Line 1883: range 00000000113023C8-0000000011302467
void __cdecl data::TornadoMixin::~TornadoMixin(data::TornadoMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TornadoMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->enviro_wind_radius);
  data::DynamicFloat::~DynamicFloat(&this->enviro_wind_strength);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::vector<data::ConfigTornadoZone>::~vector(&this->stage_zone);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1888: range 00000000100C267C-00000000100C268C
const char *__cdecl data::TornadoMixin::getTypeName(const data::TornadoMixin *const this)
{
  return "TornadoMixin";
};

// Line 1889: range 00000000100C268E-00000000100C282A
int32_t __cdecl data::TornadoMixin::getHashNum(const data::TornadoMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TornadoMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TornadoMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1905: range 0000000011233114-0000000011233155
void __cdecl data::TornadoMixinFactory::TornadoMixinFactory(data::TornadoMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TornadoMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TornadoMixinFactory = v2;
};

// Line 1913: range 000000001123345E-00000000112335C6
void __cdecl data::AirFlowMixin::AirFlowMixin(data::AirFlowMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AirFlowMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->gadget_id, v1);
  }
  this->gadget_id = 0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->camp_id, v3);
  }
  this->camp_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->camp_target_type, v3);
  }
  this->camp_target_type = None_22;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 1913: range 0000000011233A62-0000000011233C44
void __cdecl data::AirFlowMixin::AirFlowMixin(data::AirFlowMixin *const this, const data::AirFlowMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t gadget_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t camp_id; // ecx
  char v7; // dl
  data::TargetType camp_target_type; // ecx
  char v9; // al
  const data::AirFlowMixin *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AirFlowMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->gadget_id);
  }
  gadget_id = a2->gadget_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->gadget_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->gadget_id, a2);
  }
  this->gadget_id = gadget_id;
  v5 = (((_BYTE)v10 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v10->camp_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v10 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->camp_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v10->camp_id);
  }
  camp_id = v10->camp_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->camp_id, v5);
  }
  this->camp_id = camp_id;
  if ( *(_BYTE *)(((unsigned __int64)&v10->camp_target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v10->camp_target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v10->camp_target_type);
  }
  camp_target_type = v10->camp_target_type;
  v9 = *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->camp_target_type, v5);
  }
  this->camp_target_type = camp_target_type;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v10->born);
};

// Line 1923: range 000000001130233E-000000001130239B
void __cdecl data::AirFlowMixin::~AirFlowMixin(data::AirFlowMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AirFlowMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 1923: range 000000001130239C-00000000113023C6
void __cdecl data::AirFlowMixin::~AirFlowMixin(data::AirFlowMixin *const this)
{
  data::AirFlowMixin::~AirFlowMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 1928: range 00000000100C282C-00000000100C283C
const char *__cdecl data::AirFlowMixin::getTypeName(const data::AirFlowMixin *const this)
{
  return "AirFlowMixin";
};

// Line 1929: range 00000000100C283E-00000000100C29DA
int32_t __cdecl data::AirFlowMixin::getHashNum(const data::AirFlowMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AirFlowMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AirFlowMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1945: range 0000000011233E8E-0000000011233ECF
void __cdecl data::AirFlowMixinFactory::AirFlowMixinFactory(data::AirFlowMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AirFlowMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AirFlowMixinFactory = v2;
};

// Line 1953: range 00000000112341D8-0000000011234CDC
void __cdecl data::WindSeedSpawnerMixin::WindSeedSpawnerMixin(data::WindSeedSpawnerMixin *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // r12
  __int64 v3; // rax
  _DWORD *v4; // r13
  int (**v5)(...); // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rsi
  __int64 v10; // rsi
  __int64 v11; // rsi
  __int64 v12; // rsi
  __int64 v13; // rsi
  __int64 v14; // rsi
  __int64 v15; // rsi
  __int64 v16; // rsi
  __int64 v17; // rsi
  char v18[176]; // [rsp+10h] [rbp-B0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "4 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::WindSeedSpawnerMixin::WindSeedSpawnerMixin;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -202116351;
  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v5 = (int (**)(...))(&`vtable for'data::WindSeedSpawnerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v5;
  v6 = ((_BYTE)this + 30) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->refresh_enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->refresh_enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->refresh_enable, v6, v7);
  this->refresh_enable = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->spawner_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->spawner_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->spawner_radius, v6);
  }
  this->spawner_radius = 5.0;
  v8 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->spawner_height_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->spawner_height_angle >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->spawner_height_angle, v8);
  }
  this->spawner_height_angle = 30.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->spawner_area_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->spawner_area_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->spawner_area_angle, v8);
  }
  this->spawner_area_angle = 30.0;
  v9 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_distance_to_avatar >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_distance_to_avatar >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_distance_to_avatar, v9);
  }
  this->min_distance_to_avatar = 5.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_suppress_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_suppress_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->move_suppress_speed, v9);
  }
  this->move_suppress_speed = 0.5;
  v10 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_freeze >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_freeze >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->move_refresh_angle_freeze, v10);
  }
  this->move_refresh_angle_freeze = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_slow >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_slow >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->move_refresh_angle_slow, v10);
  }
  this->move_refresh_angle_slow = 30.0;
  v11 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_num_per_spawn >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_num_per_spawn >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_num_per_spawn, v11);
  }
  this->min_num_per_spawn = 2;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_num_per_spawn >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_num_per_spawn >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_num_per_spawn, v11);
  }
  this->max_num_per_spawn = 3;
  v12 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_swap_num_per_spawn >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_swap_num_per_spawn >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_swap_num_per_spawn, v12);
  }
  this->max_swap_num_per_spawn = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_separate_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_separate_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_separate_range, v12);
  }
  this->min_separate_range = 2.0;
  v13 = (((_BYTE)this + 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_separate_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_separate_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_separate_range, v13);
  }
  this->max_separate_range = 4.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->remove_seed_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->remove_seed_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->remove_seed_distance, v13);
  }
  this->remove_seed_distance = 15.0;
  v14 = (((_BYTE)this + 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_meter >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_meter >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->refresh_meter_per_meter, v14);
  }
  this->refresh_meter_per_meter = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_second >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_second >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->refresh_meter_per_second, v14);
  }
  this->refresh_meter_per_second = 10.0;
  v15 = (((_BYTE)this + 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_dist_remove >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_dist_remove >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->refresh_meter_per_dist_remove, v15);
  }
  this->refresh_meter_per_dist_remove = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_max >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->refresh_meter_max >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->refresh_meter_max, v15);
  }
  this->refresh_meter_max = 100.0;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    &this->wind_force_modifier,
    "WindForce_Handle",
    (const std::allocator<char> *)(v2 + 48));
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 64);
  std::string::basic_string<std::allocator<char>>(
    &this->wind_explode_modifier,
    "WindSeed_Explode",
    (const std::allocator<char> *)(v2 + 64));
  std::allocator<char>::~allocator(v2 + 64);
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 80);
  std::string::basic_string<std::allocator<char>>(
    &this->wind_bullet_ability,
    "WindSeed_Bullet_Manager",
    (const std::allocator<char> *)(v2 + 80));
  std::allocator<char>::~allocator(v2 + 80);
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 96);
  std::string::basic_string<std::allocator<char>>(
    &this->global_value_key,
    "_HAS_ELEMFORCE_WIND",
    (const std::allocator<char> *)(v2 + 96));
  std::allocator<char>::~allocator(v2 + 96);
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  std::vector<unsigned int>::vector(&this->spawn_num_array);
  if ( *(_BYTE *)(((unsigned __int64)&this->seed_gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->seed_gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->seed_gadget_id, "_HAS_ELEMFORCE_WIND");
  }
  this->seed_gadget_id = 70900332;
  v16 = (((_BYTE)this + 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->init_signal_strength >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->init_signal_strength >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store4(&this->init_signal_strength, v16);
  }
  this->init_signal_strength = 100.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_signal_strength >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trigger_signal_strength >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trigger_signal_strength, v16);
  }
  this->trigger_signal_strength = 300.0;
  v17 = (((_BYTE)this + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->signal_decay_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->signal_decay_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->signal_decay_speed, v17);
  }
  this->signal_decay_speed = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->mutiple_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->mutiple_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->mutiple_range, v17);
  }
  this->mutiple_range = 50.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->catch_seed_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->catch_seed_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->catch_seed_range, (((_BYTE)this + 20) & 7u) + 3);
  }
  this->catch_seed_range = 10.0;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 1953: range 000000001123512E-0000000011235EC6
void __cdecl data::WindSeedSpawnerMixin::WindSeedSpawnerMixin(
        data::WindSeedSpawnerMixin *const this,
        const data::WindSeedSpawnerMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool refresh_enable; // cl
  char v6; // dl
  __int64 v7; // rdx
  float spawner_radius; // xmm0_4
  float spawner_height_angle; // xmm0_4
  __int64 v10; // rsi
  float spawner_area_angle; // xmm0_4
  float min_distance_to_avatar; // xmm0_4
  __int64 v13; // rsi
  float move_suppress_speed; // xmm0_4
  float move_refresh_angle_freeze; // xmm0_4
  __int64 v16; // rsi
  float move_refresh_angle_slow; // xmm0_4
  __int64 v18; // rsi
  uint32_t min_num_per_spawn; // ecx
  char v20; // dl
  uint32_t max_num_per_spawn; // ecx
  char v22; // al
  __int64 v23; // rsi
  uint32_t max_swap_num_per_spawn; // ecx
  char v25; // dl
  float min_separate_range; // xmm0_4
  float max_separate_range; // xmm0_4
  __int64 v28; // rsi
  float remove_seed_distance; // xmm0_4
  float refresh_meter_per_meter; // xmm0_4
  __int64 v31; // rsi
  float refresh_meter_per_second; // xmm0_4
  float refresh_meter_per_dist_remove; // xmm0_4
  __int64 v34; // rsi
  float refresh_meter_max; // xmm0_4
  data::UInt32List *p_spawn_num_array; // rsi
  uint32_t seed_gadget_id; // ecx
  char v38; // al
  float init_signal_strength; // xmm0_4
  __int64 v40; // rsi
  float trigger_signal_strength; // xmm0_4
  float signal_decay_speed; // xmm0_4
  __int64 v43; // rsi
  float mutiple_range; // xmm0_4
  float catch_seed_range; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::WindSeedSpawnerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->refresh_enable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->refresh_enable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->refresh_enable, v3, v4);
  refresh_enable = a2->refresh_enable;
  v6 = *(_BYTE *)(((unsigned __int64)&this->refresh_enable >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->refresh_enable, v3, v7);
  this->refresh_enable = refresh_enable;
  if ( *(_BYTE *)(((unsigned __int64)&a2->spawner_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->spawner_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->spawner_radius);
  }
  spawner_radius = a2->spawner_radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->spawner_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->spawner_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->spawner_radius, v3);
  }
  this->spawner_radius = spawner_radius;
  if ( *(_BYTE *)(((unsigned __int64)&a2->spawner_height_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->spawner_height_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->spawner_height_angle);
  }
  spawner_height_angle = a2->spawner_height_angle;
  v10 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->spawner_height_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->spawner_height_angle >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->spawner_height_angle, v10);
  }
  this->spawner_height_angle = spawner_height_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->spawner_area_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->spawner_area_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->spawner_area_angle);
  }
  spawner_area_angle = a2->spawner_area_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->spawner_area_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->spawner_area_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->spawner_area_angle, v10);
  }
  this->spawner_area_angle = spawner_area_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_distance_to_avatar >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_distance_to_avatar >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_distance_to_avatar);
  }
  min_distance_to_avatar = a2->min_distance_to_avatar;
  v13 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_distance_to_avatar >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_distance_to_avatar >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_distance_to_avatar, v13);
  }
  this->min_distance_to_avatar = min_distance_to_avatar;
  if ( *(_BYTE *)(((unsigned __int64)&a2->move_suppress_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->move_suppress_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->move_suppress_speed);
  }
  move_suppress_speed = a2->move_suppress_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_suppress_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_suppress_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->move_suppress_speed, v13);
  }
  this->move_suppress_speed = move_suppress_speed;
  if ( *(_BYTE *)(((unsigned __int64)&a2->move_refresh_angle_freeze >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->move_refresh_angle_freeze >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->move_refresh_angle_freeze);
  }
  move_refresh_angle_freeze = a2->move_refresh_angle_freeze;
  v16 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_freeze >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_freeze >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->move_refresh_angle_freeze, v16);
  }
  this->move_refresh_angle_freeze = move_refresh_angle_freeze;
  if ( *(_BYTE *)(((unsigned __int64)&a2->move_refresh_angle_slow >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->move_refresh_angle_slow >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->move_refresh_angle_slow);
  }
  move_refresh_angle_slow = a2->move_refresh_angle_slow;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_slow >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_refresh_angle_slow >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->move_refresh_angle_slow, v16);
  }
  this->move_refresh_angle_slow = move_refresh_angle_slow;
  v18 = (((_BYTE)a2 + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_num_per_spawn >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_num_per_spawn >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_num_per_spawn);
  }
  min_num_per_spawn = a2->min_num_per_spawn;
  v20 = *(_BYTE *)(((unsigned __int64)&this->min_num_per_spawn >> 3) + 0x7FFF8000);
  if ( v20 != 0 && (char)((((_BYTE)this + 60) & 7) + 3) >= v20 )
  {
    LOBYTE(v18) = v20 != 0;
    __asan_report_store4(&this->min_num_per_spawn, v18);
  }
  this->min_num_per_spawn = min_num_per_spawn;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_num_per_spawn >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_num_per_spawn >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_num_per_spawn);
  }
  max_num_per_spawn = a2->max_num_per_spawn;
  v22 = *(_BYTE *)(((unsigned __int64)&this->max_num_per_spawn >> 3) + 0x7FFF8000);
  if ( v22 != 0 && v22 <= 3 )
  {
    LOBYTE(v18) = v22 != 0;
    __asan_report_store4(&this->max_num_per_spawn, v18);
  }
  this->max_num_per_spawn = max_num_per_spawn;
  v23 = (((_BYTE)a2 + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_swap_num_per_spawn >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_swap_num_per_spawn >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_swap_num_per_spawn);
  }
  max_swap_num_per_spawn = a2->max_swap_num_per_spawn;
  v25 = *(_BYTE *)(((unsigned __int64)&this->max_swap_num_per_spawn >> 3) + 0x7FFF8000);
  LOBYTE(v23) = v25 != 0;
  if ( v25 != 0 && (char)((((_BYTE)this + 68) & 7) + 3) >= v25 )
    __asan_report_store4(&this->max_swap_num_per_spawn, v23);
  this->max_swap_num_per_spawn = max_swap_num_per_spawn;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_separate_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_separate_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_separate_range);
  }
  min_separate_range = a2->min_separate_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_separate_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_separate_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_separate_range, v23);
  }
  this->min_separate_range = min_separate_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_separate_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_separate_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_separate_range);
  }
  max_separate_range = a2->max_separate_range;
  v28 = (((_BYTE)this + 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_separate_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_separate_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_separate_range, v28);
  }
  this->max_separate_range = max_separate_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->remove_seed_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->remove_seed_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->remove_seed_distance);
  }
  remove_seed_distance = a2->remove_seed_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->remove_seed_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->remove_seed_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->remove_seed_distance, v28);
  }
  this->remove_seed_distance = remove_seed_distance;
  if ( *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_per_meter >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_per_meter >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->refresh_meter_per_meter);
  }
  refresh_meter_per_meter = a2->refresh_meter_per_meter;
  v31 = (((_BYTE)this + 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_meter >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_meter >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->refresh_meter_per_meter, v31);
  }
  this->refresh_meter_per_meter = refresh_meter_per_meter;
  if ( *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_per_second >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_per_second >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->refresh_meter_per_second);
  }
  refresh_meter_per_second = a2->refresh_meter_per_second;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_second >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_second >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->refresh_meter_per_second, v31);
  }
  this->refresh_meter_per_second = refresh_meter_per_second;
  if ( *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_per_dist_remove >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_per_dist_remove >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->refresh_meter_per_dist_remove);
  }
  refresh_meter_per_dist_remove = a2->refresh_meter_per_dist_remove;
  v34 = (((_BYTE)this + 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_dist_remove >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->refresh_meter_per_dist_remove >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->refresh_meter_per_dist_remove, v34);
  }
  this->refresh_meter_per_dist_remove = refresh_meter_per_dist_remove;
  if ( *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_max >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->refresh_meter_max >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->refresh_meter_max);
  }
  refresh_meter_max = a2->refresh_meter_max;
  if ( *(_BYTE *)(((unsigned __int64)&this->refresh_meter_max >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->refresh_meter_max >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->refresh_meter_max, v34);
  }
  this->refresh_meter_max = refresh_meter_max;
  std::string::basic_string(&this->wind_force_modifier, &a2->wind_force_modifier);
  std::string::basic_string(&this->wind_explode_modifier, &a2->wind_explode_modifier);
  std::string::basic_string(&this->wind_bullet_ability, &a2->wind_bullet_ability);
  std::string::basic_string(&this->global_value_key, &a2->global_value_key);
  p_spawn_num_array = &a2->spawn_num_array;
  std::vector<unsigned int>::vector(&this->spawn_num_array, &a2->spawn_num_array);
  if ( *(_BYTE *)(((unsigned __int64)&a2->seed_gadget_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->seed_gadget_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->seed_gadget_id);
  }
  seed_gadget_id = a2->seed_gadget_id;
  v38 = *(_BYTE *)(((unsigned __int64)&this->seed_gadget_id >> 3) + 0x7FFF8000);
  if ( v38 != 0 && v38 <= 3 )
  {
    LOBYTE(p_spawn_num_array) = v38 != 0;
    __asan_report_store4(&this->seed_gadget_id, p_spawn_num_array);
  }
  this->seed_gadget_id = seed_gadget_id;
  if ( *(_BYTE *)(((unsigned __int64)&a2->init_signal_strength >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->init_signal_strength >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->init_signal_strength);
  }
  init_signal_strength = a2->init_signal_strength;
  v40 = (((_BYTE)this + 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->init_signal_strength >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->init_signal_strength >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store4(&this->init_signal_strength, v40);
  }
  this->init_signal_strength = init_signal_strength;
  if ( *(_BYTE *)(((unsigned __int64)&a2->trigger_signal_strength >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->trigger_signal_strength >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->trigger_signal_strength);
  }
  trigger_signal_strength = a2->trigger_signal_strength;
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_signal_strength >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trigger_signal_strength >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trigger_signal_strength, v40);
  }
  this->trigger_signal_strength = trigger_signal_strength;
  if ( *(_BYTE *)(((unsigned __int64)&a2->signal_decay_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->signal_decay_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->signal_decay_speed);
  }
  signal_decay_speed = a2->signal_decay_speed;
  v43 = (((_BYTE)this + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->signal_decay_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->signal_decay_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->signal_decay_speed, v43);
  }
  this->signal_decay_speed = signal_decay_speed;
  if ( *(_BYTE *)(((unsigned __int64)&a2->mutiple_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->mutiple_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->mutiple_range);
  }
  mutiple_range = a2->mutiple_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->mutiple_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->mutiple_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->mutiple_range, v43);
  }
  this->mutiple_range = mutiple_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->catch_seed_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->catch_seed_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->catch_seed_range);
  }
  catch_seed_range = a2->catch_seed_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->catch_seed_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->catch_seed_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->catch_seed_range, (((_BYTE)this + 20) & 7u) + 3);
  }
  this->catch_seed_range = catch_seed_range;
};

// Line 1988: range 000000001130226C-0000000011302311
void __cdecl data::WindSeedSpawnerMixin::~WindSeedSpawnerMixin(data::WindSeedSpawnerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WindSeedSpawnerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->spawn_num_array);
  std::string::~string(&this->global_value_key);
  std::string::~string(&this->wind_bullet_ability);
  std::string::~string(&this->wind_explode_modifier);
  std::string::~string(&this->wind_force_modifier);
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 1988: range 0000000011302312-000000001130233C
void __cdecl data::WindSeedSpawnerMixin::~WindSeedSpawnerMixin(data::WindSeedSpawnerMixin *const this)
{
  data::WindSeedSpawnerMixin::~WindSeedSpawnerMixin(this);
  operator delete(this, 0x118uLL);
};

// Line 1993: range 00000000100C29DC-00000000100C29EC
const char *__cdecl data::WindSeedSpawnerMixin::getTypeName(const data::WindSeedSpawnerMixin *const this)
{
  return "WindSeedSpawnerMixin";
};

// Line 1994: range 00000000100C29EE-00000000100C2B8A
int32_t __cdecl data::WindSeedSpawnerMixin::getHashNum(const data::WindSeedSpawnerMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WindSeedSpawnerMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WindSeedSpawnerMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2010: range 00000000112361B0-00000000112361F1
void __cdecl data::WindSeedSpawnerMixinFactory::WindSeedSpawnerMixinFactory(
        data::WindSeedSpawnerMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WindSeedSpawnerMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WindSeedSpawnerMixinFactory = v2;
};

// Line 2018: range 00000000112364FA-00000000112365F7
void __cdecl data::CollisionMixin::CollisionMixin(data::CollisionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CollisionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigCollision::ConfigCollision(&this->collision);
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_shock_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_shock_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_shock_speed, v3);
  }
  this->min_shock_speed = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cd, v3);
  }
  this->cd = 2.0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_collision);
};

// Line 2018: range 00000000112369AC-0000000011236C38
void __cdecl data::CollisionMixin::CollisionMixin(data::CollisionMixin *const this, const data::CollisionMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rbx
  float min_shock_speed; // xmm0_4
  __int64 v5; // rsi
  float cd; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CollisionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(char *)(((unsigned __int64)&this->collision >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)&this->collision.is_json_loaded >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 59) & 7) >= *(_BYTE *)(((unsigned __int64)&this->collision.is_json_loaded >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->collision, 28LL);
  }
  if ( *(char *)(((unsigned __int64)&a2->collision >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((unsigned __int64)&a2->collision.is_json_loaded >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 + 59) & 7) >= *(_BYTE *)(((unsigned __int64)&a2->collision.is_json_loaded >> 3) + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->collision, 28LL);
  }
  v3 = *(_QWORD *)&a2->collision.ccd.sorted_hit_result;
  *(_QWORD *)&this->collision.ccd.type = *(_QWORD *)&a2->collision.ccd.type;
  *(_QWORD *)&this->collision.ccd.sorted_hit_result = v3;
  *(_QWORD *)&this->collision.trigger_cd = *(_QWORD *)&a2->collision.trigger_cd;
  *(_DWORD *)&this->collision.ignore_scene = *(_DWORD *)&a2->collision.ignore_scene;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_shock_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_shock_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_shock_speed);
  }
  min_shock_speed = a2->min_shock_speed;
  v5 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_shock_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_shock_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_shock_speed, v5);
  }
  this->min_shock_speed = min_shock_speed;
  if ( *(_BYTE *)(((unsigned __int64)&a2->cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->cd);
  }
  cd = a2->cd;
  if ( *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cd, v5);
  }
  this->cd = cd;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_collision, &a2->on_collision);
};

// Line 2028: range 0000000011302240-000000001130226A
void __cdecl data::CollisionMixin::~CollisionMixin(data::CollisionMixin *const this)
{
  data::CollisionMixin::~CollisionMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 2028: range 00000000113021E2-000000001130223F
void __cdecl data::CollisionMixin::~CollisionMixin(data::CollisionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CollisionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_collision);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2033: range 00000000100C2B8C-00000000100C2B9C
const char *__cdecl data::CollisionMixin::getTypeName(const data::CollisionMixin *const this)
{
  return "CollisionMixin";
};

// Line 2034: range 00000000100C2B9E-00000000100C2D3A
int32_t __cdecl data::CollisionMixin::getHashNum(const data::CollisionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CollisionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CollisionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2050: range 0000000011236F22-0000000011236F63
void __cdecl data::CollisionMixinFactory::CollisionMixinFactory(data::CollisionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CollisionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CollisionMixinFactory = v2;
};

// Line 2058: range 000000001123726C-000000001123739C
void __cdecl data::VelocityDetectMixin::VelocityDetectMixin(data::VelocityDetectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::VelocityDetectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_speed, v1);
  }
  this->min_speed = 0.0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_speed, v3);
  }
  this->max_speed = 0.0;
  if ( *(char *)(((unsigned __int64)&this->detect_on_start >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->detect_on_start, v3, &this->detect_on_start);
  this->detect_on_start = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_poseedge);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_negedge);
};

// Line 2058: range 0000000011237752-000000001123798E
void __cdecl data::VelocityDetectMixin::VelocityDetectMixin(
        data::VelocityDetectMixin *const this,
        const data::VelocityDetectMixin *a2)
{
  int (**v2)(...); // rdx
  float min_speed; // xmm0_4
  float max_speed; // xmm0_4
  __int64 v5; // rsi
  bool detect_on_start; // cl
  char v7; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::VelocityDetectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_speed);
  }
  min_speed = a2->min_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_speed, a2);
  }
  this->min_speed = min_speed;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_speed);
  }
  max_speed = a2->max_speed;
  v5 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_speed, v5);
  }
  this->max_speed = max_speed;
  if ( *(char *)(((unsigned __int64)&a2->detect_on_start >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->detect_on_start, v5, &a2->detect_on_start);
  detect_on_start = a2->detect_on_start;
  v7 = *(_BYTE *)(((unsigned __int64)&this->detect_on_start >> 3) + 0x7FFF8000);
  if ( v7 < 0 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store1(&this->detect_on_start, v5, &this->detect_on_start);
  }
  this->detect_on_start = detect_on_start;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_poseedge, &a2->on_poseedge);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_negedge, &a2->on_negedge);
};

// Line 2069: range 0000000011302148-00000000113021B5
void __cdecl data::VelocityDetectMixin::~VelocityDetectMixin(data::VelocityDetectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::VelocityDetectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_negedge);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_poseedge);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2069: range 00000000113021B6-00000000113021E0
void __cdecl data::VelocityDetectMixin::~VelocityDetectMixin(data::VelocityDetectMixin *const this)
{
  data::VelocityDetectMixin::~VelocityDetectMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 2074: range 00000000100C2D3C-00000000100C2D4C
const char *__cdecl data::VelocityDetectMixin::getTypeName(const data::VelocityDetectMixin *const this)
{
  return "VelocityDetectMixin";
};

// Line 2075: range 00000000100C2D4E-00000000100C2EEA
int32_t __cdecl data::VelocityDetectMixin::getHashNum(const data::VelocityDetectMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::VelocityDetectMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "VelocityDetectMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2091: range 0000000011237C78-0000000011237CB9
void __cdecl data::VelocityDetectMixinFactory::VelocityDetectMixinFactory(data::VelocityDetectMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::VelocityDetectMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_VelocityDetectMixinFactory = v2;
};

// Line 2099: range 0000000011237FC2-000000001123802F
void __cdecl data::WeightDetectRegionMixin::WeightDetectRegionMixin(data::WeightDetectRegionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::WeightDetectRegionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_value_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_weight_changed);
};

// Line 2099: range 00000000112383EA-00000000112384B0
void __cdecl data::WeightDetectRegionMixin::WeightDetectRegionMixin(
        data::WeightDetectRegionMixin *const this,
        const data::WeightDetectRegionMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::WeightDetectRegionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_value_key, &a2->global_value_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_weight_changed, &a2->on_weight_changed);
};

// Line 2107: range 00000000113020AE-000000001130211B
void __cdecl data::WeightDetectRegionMixin::~WeightDetectRegionMixin(data::WeightDetectRegionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WeightDetectRegionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_weight_changed);
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2107: range 000000001130211C-0000000011302146
void __cdecl data::WeightDetectRegionMixin::~WeightDetectRegionMixin(data::WeightDetectRegionMixin *const this)
{
  data::WeightDetectRegionMixin::~WeightDetectRegionMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 2112: range 00000000100C2EEC-00000000100C2EFC
const char *__cdecl data::WeightDetectRegionMixin::getTypeName(const data::WeightDetectRegionMixin *const this)
{
  return "WeightDetectRegionMixin";
};

// Line 2113: range 00000000100C2EFE-00000000100C309A
int32_t __cdecl data::WeightDetectRegionMixin::getHashNum(const data::WeightDetectRegionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WeightDetectRegionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WeightDetectRegionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2129: range 000000001123879A-00000000112387DB
void __cdecl data::WeightDetectRegionMixinFactory::WeightDetectRegionMixinFactory(
        data::WeightDetectRegionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WeightDetectRegionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WeightDetectRegionMixinFactory = v2;
};

// Line 2151: range 0000000011238C44-0000000011238D57
void __cdecl data::ChangeFieldMixin::ChangeFieldMixin(data::ChangeFieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeFieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = FollowOwnner;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->target_radius, v3);
  }
  this->target_radius = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->time, v3);
  }
  this->time = 0.0;
};

// Line 2151: range 0000000011239132-00000000112392FF
void __cdecl data::ChangeFieldMixin::ChangeFieldMixin(
        data::ChangeFieldMixin *const this,
        const data::ChangeFieldMixin *a2)
{
  int (**v2)(...); // rdx
  data::ChangeFieldType type; // ecx
  char v4; // al
  float target_radius; // xmm0_4
  __int64 v6; // rsi
  float time; // xmm0_4
  const data::ChangeFieldMixin *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeFieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  if ( *(_BYTE *)(((unsigned __int64)&v8->target_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->target_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->target_radius);
  }
  target_radius = v8->target_radius;
  v6 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->target_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->target_radius, v6);
  }
  this->target_radius = target_radius;
  if ( *(_BYTE *)(((unsigned __int64)&v8->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v8->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v8->time);
  }
  time = v8->time;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->time, v6);
  }
  this->time = time;
};

// Line 2160: range 0000000011302082-00000000113020AC
void __cdecl data::ChangeFieldMixin::~ChangeFieldMixin(data::ChangeFieldMixin *const this)
{
  data::ChangeFieldMixin::~ChangeFieldMixin(this);
  operator delete(this, 0x30uLL);
};

// Line 2160: range 0000000011302034-0000000011302081
void __cdecl data::ChangeFieldMixin::~ChangeFieldMixin(data::ChangeFieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeFieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2165: range 00000000100C309C-00000000100C30AC
const char *__cdecl data::ChangeFieldMixin::getTypeName(const data::ChangeFieldMixin *const this)
{
  return "ChangeFieldMixin";
};

// Line 2166: range 00000000100C30AE-00000000100C324A
int32_t __cdecl data::ChangeFieldMixin::getHashNum(const data::ChangeFieldMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeFieldMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeFieldMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2182: range 0000000011239548-0000000011239589
void __cdecl data::ChangeFieldMixinFactory::ChangeFieldMixinFactory(data::ChangeFieldMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeFieldMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeFieldMixinFactory = v2;
};

// Line 2190: range 0000000011239892-00000000112398DF
void __cdecl data::CloseForceFieldMixin::CloseForceFieldMixin(data::CloseForceFieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CloseForceFieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 2190: range 0000000011239DE0-0000000011239E38
void __cdecl data::CloseForceFieldMixin::CloseForceFieldMixin(
        data::CloseForceFieldMixin *const this,
        const data::CloseForceFieldMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CloseForceFieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 2196: range 0000000011301FBA-0000000011302007
void __cdecl data::CloseForceFieldMixin::~CloseForceFieldMixin(data::CloseForceFieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CloseForceFieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2196: range 0000000011302008-0000000011302032
void __cdecl data::CloseForceFieldMixin::~CloseForceFieldMixin(data::CloseForceFieldMixin *const this)
{
  data::CloseForceFieldMixin::~CloseForceFieldMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 2201: range 00000000100C324C-00000000100C325C
const char *__cdecl data::CloseForceFieldMixin::getTypeName(const data::CloseForceFieldMixin *const this)
{
  return "CloseForceFieldMixin";
};

// Line 2202: range 00000000100C325E-00000000100C33FA
int32_t __cdecl data::CloseForceFieldMixin::getHashNum(const data::CloseForceFieldMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CloseForceFieldMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CloseForceFieldMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2218: range 000000001123A082-000000001123A0C3
void __cdecl data::CloseForceFieldMixinFactory::CloseForceFieldMixinFactory(
        data::CloseForceFieldMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CloseForceFieldMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CloseForceFieldMixinFactory = v2;
};

// Line 2226: range 000000001123A3CC-000000001123A59F
void __cdecl data::SwitchSkillIDMixin::SwitchSkillIDMixin(data::SwitchSkillIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->priority, v1);
  }
  this->priority = AvatarCommon;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->skill_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->skill_index, v3);
  }
  this->skill_index = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v3);
  }
  this->skill_id = 0;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->from_skill_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->from_skill_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->from_skill_id, v4);
  }
  this->from_skill_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->to_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->to_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->to_skill_id, v4);
  }
  this->to_skill_id = 0;
  v5 = ((_BYTE)this + 52) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->use_in_air >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->use_in_air >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->use_in_air, v5, v6);
  this->use_in_air = 0;
};

// Line 2226: range 000000001123A994-000000001123ACD5
void __cdecl data::SwitchSkillIDMixin::SwitchSkillIDMixin(
        data::SwitchSkillIDMixin *const this,
        const data::SwitchSkillIDMixin *a2)
{
  int (**v2)(...); // rdx
  data::SwitchSkillPriority priority; // ecx
  char v4; // al
  __int64 v5; // rsi
  int32_t skill_index; // ecx
  char v7; // dl
  uint32_t skill_id; // ecx
  char v9; // al
  __int64 v10; // rsi
  uint32_t from_skill_id; // ecx
  char v12; // dl
  uint32_t to_skill_id; // ecx
  char v14; // al
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool use_in_air; // cl
  char v18; // dl
  __int64 v19; // rdx
  const data::SwitchSkillIDMixin *v20; // [rsp+0h] [rbp-10h]

  v20 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->priority >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->priority >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->priority);
  }
  priority = a2->priority;
  v4 = *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->priority, a2);
  }
  this->priority = priority;
  v5 = (((_BYTE)v20 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v20->skill_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->skill_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->skill_index);
  }
  skill_index = v20->skill_index;
  v7 = *(_BYTE *)(((unsigned __int64)&this->skill_index >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->skill_index, v5);
  }
  this->skill_index = skill_index;
  if ( *(_BYTE *)(((unsigned __int64)&v20->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v20->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v20->skill_id);
  }
  skill_id = v20->skill_id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->skill_id, v5);
  }
  this->skill_id = skill_id;
  v10 = (((_BYTE)v20 + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v20->from_skill_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->from_skill_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->from_skill_id);
  }
  from_skill_id = v20->from_skill_id;
  v12 = *(_BYTE *)(((unsigned __int64)&this->from_skill_id >> 3) + 0x7FFF8000);
  if ( v12 != 0 && (char)((((_BYTE)this + 44) & 7) + 3) >= v12 )
  {
    LOBYTE(v10) = v12 != 0;
    __asan_report_store4(&this->from_skill_id, v10);
  }
  this->from_skill_id = from_skill_id;
  if ( *(_BYTE *)(((unsigned __int64)&v20->to_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v20->to_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v20->to_skill_id);
  }
  to_skill_id = v20->to_skill_id;
  v14 = *(_BYTE *)(((unsigned __int64)&this->to_skill_id >> 3) + 0x7FFF8000);
  if ( v14 != 0 && v14 <= 3 )
  {
    LOBYTE(v10) = v14 != 0;
    __asan_report_store4(&this->to_skill_id, v10);
  }
  this->to_skill_id = to_skill_id;
  v15 = ((_BYTE)v20 + 52) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&v20->use_in_air >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&v20->use_in_air >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&v20->use_in_air, v15, v16);
  use_in_air = v20->use_in_air;
  v18 = *(_BYTE *)(((unsigned __int64)&this->use_in_air >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this + 52) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->use_in_air, v15, v19);
  this->use_in_air = use_in_air;
};

// Line 2238: range 0000000011301F40-0000000011301F8D
void __cdecl data::SwitchSkillIDMixin::~SwitchSkillIDMixin(data::SwitchSkillIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2238: range 0000000011301F8E-0000000011301FB8
void __cdecl data::SwitchSkillIDMixin::~SwitchSkillIDMixin(data::SwitchSkillIDMixin *const this)
{
  data::SwitchSkillIDMixin::~SwitchSkillIDMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 2243: range 00000000100C33FC-00000000100C340C
const char *__cdecl data::SwitchSkillIDMixin::getTypeName(const data::SwitchSkillIDMixin *const this)
{
  return "SwitchSkillIDMixin";
};

// Line 2244: range 00000000100C340E-00000000100C35AA
int32_t __cdecl data::SwitchSkillIDMixin::getHashNum(const data::SwitchSkillIDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SwitchSkillIDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SwitchSkillIDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2260: range 000000001123AF1E-000000001123AF5F
void __cdecl data::SwitchSkillIDMixinFactory::SwitchSkillIDMixinFactory(data::SwitchSkillIDMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIDMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SwitchSkillIDMixinFactory = v2;
};

// Line 2268: range 000000001123B268-000000001123B43B
void __cdecl data::AvatarChangeSkillMixin::AvatarChangeSkillMixin(data::AvatarChangeSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarChangeSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->index, v1);
  }
  this->index = 0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->priority, v3);
  }
  this->priority = AvatarCommon;
  if ( *(_BYTE *)(((unsigned __int64)&this->aim_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->aim_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->aim_skill_id, v3);
  }
  this->aim_skill_id = 0;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->jump_skill_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->jump_skill_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->jump_skill_id, v4);
  }
  this->jump_skill_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->fly_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->fly_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->fly_skill_id, v4);
  }
  this->fly_skill_id = 0;
  v5 = ((_BYTE)this + 52) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->change_on_add >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->change_on_add >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->change_on_add, v5, v6);
  this->change_on_add = 0;
};

// Line 2268: range 000000001123B830-000000001123BB71
void __cdecl data::AvatarChangeSkillMixin::AvatarChangeSkillMixin(
        data::AvatarChangeSkillMixin *const this,
        const data::AvatarChangeSkillMixin *a2)
{
  int (**v2)(...); // rdx
  int32_t index; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::SwitchSkillPriority priority; // ecx
  char v7; // dl
  uint32_t aim_skill_id; // ecx
  char v9; // al
  __int64 v10; // rsi
  uint32_t jump_skill_id; // ecx
  char v12; // dl
  uint32_t fly_skill_id; // ecx
  char v14; // al
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool change_on_add; // cl
  char v18; // dl
  __int64 v19; // rdx
  const data::AvatarChangeSkillMixin *v20; // [rsp+0h] [rbp-10h]

  v20 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarChangeSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->index >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->index >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->index);
  }
  index = a2->index;
  v4 = *(_BYTE *)(((unsigned __int64)&this->index >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->index, a2);
  }
  this->index = index;
  v5 = (((_BYTE)v20 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v20->priority >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->priority >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->priority);
  }
  priority = v20->priority;
  v7 = *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->priority, v5);
  }
  this->priority = priority;
  if ( *(_BYTE *)(((unsigned __int64)&v20->aim_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v20->aim_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v20->aim_skill_id);
  }
  aim_skill_id = v20->aim_skill_id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->aim_skill_id >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->aim_skill_id, v5);
  }
  this->aim_skill_id = aim_skill_id;
  v10 = (((_BYTE)v20 + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v20->jump_skill_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->jump_skill_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->jump_skill_id);
  }
  jump_skill_id = v20->jump_skill_id;
  v12 = *(_BYTE *)(((unsigned __int64)&this->jump_skill_id >> 3) + 0x7FFF8000);
  if ( v12 != 0 && (char)((((_BYTE)this + 44) & 7) + 3) >= v12 )
  {
    LOBYTE(v10) = v12 != 0;
    __asan_report_store4(&this->jump_skill_id, v10);
  }
  this->jump_skill_id = jump_skill_id;
  if ( *(_BYTE *)(((unsigned __int64)&v20->fly_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v20->fly_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v20->fly_skill_id);
  }
  fly_skill_id = v20->fly_skill_id;
  v14 = *(_BYTE *)(((unsigned __int64)&this->fly_skill_id >> 3) + 0x7FFF8000);
  if ( v14 != 0 && v14 <= 3 )
  {
    LOBYTE(v10) = v14 != 0;
    __asan_report_store4(&this->fly_skill_id, v10);
  }
  this->fly_skill_id = fly_skill_id;
  v15 = ((_BYTE)v20 + 52) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&v20->change_on_add >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&v20->change_on_add >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&v20->change_on_add, v15, v16);
  change_on_add = v20->change_on_add;
  v18 = *(_BYTE *)(((unsigned __int64)&this->change_on_add >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this + 52) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->change_on_add, v15, v19);
  this->change_on_add = change_on_add;
};

// Line 2280: range 0000000011301F14-0000000011301F3E
void __cdecl data::AvatarChangeSkillMixin::~AvatarChangeSkillMixin(data::AvatarChangeSkillMixin *const this)
{
  data::AvatarChangeSkillMixin::~AvatarChangeSkillMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 2280: range 0000000011301EC6-0000000011301F13
void __cdecl data::AvatarChangeSkillMixin::~AvatarChangeSkillMixin(data::AvatarChangeSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarChangeSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2285: range 00000000100C35AC-00000000100C35BC
const char *__cdecl data::AvatarChangeSkillMixin::getTypeName(const data::AvatarChangeSkillMixin *const this)
{
  return "AvatarChangeSkillMixin";
};

// Line 2286: range 00000000100C35BE-00000000100C375A
int32_t __cdecl data::AvatarChangeSkillMixin::getHashNum(const data::AvatarChangeSkillMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarChangeSkillMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarChangeSkillMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2302: range 000000001123BDBA-000000001123BDFB
void __cdecl data::AvatarChangeSkillMixinFactory::AvatarChangeSkillMixinFactory(
        data::AvatarChangeSkillMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarChangeSkillMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarChangeSkillMixinFactory = v2;
};

// Line 2310: range 000000001123C104-000000001123C1D5
void __cdecl data::AvatarLevelSkillMixin::AvatarLevelSkillMixin(data::AvatarLevelSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarLevelSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->skill_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->skill_index, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->skill_index = 0;
};

// Line 2310: range 000000001123C5AA-000000001123C6FC
void __cdecl data::AvatarLevelSkillMixin::AvatarLevelSkillMixin(
        data::AvatarLevelSkillMixin *const this,
        const data::AvatarLevelSkillMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  int32_t skill_index; // ecx
  char v7; // dl
  const data::AvatarLevelSkillMixin *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarLevelSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  v5 = (((_BYTE)v8 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->skill_index >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->skill_index >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->skill_index);
  }
  skill_index = v8->skill_index;
  v7 = *(_BYTE *)(((unsigned __int64)&this->skill_index >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->skill_index, v5);
  }
  this->skill_index = skill_index;
};

// Line 2318: range 0000000011301E9A-0000000011301EC4
void __cdecl data::AvatarLevelSkillMixin::~AvatarLevelSkillMixin(data::AvatarLevelSkillMixin *const this)
{
  data::AvatarLevelSkillMixin::~AvatarLevelSkillMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 2318: range 0000000011301E4C-0000000011301E99
void __cdecl data::AvatarLevelSkillMixin::~AvatarLevelSkillMixin(data::AvatarLevelSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarLevelSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2323: range 00000000100C375C-00000000100C376C
const char *__cdecl data::AvatarLevelSkillMixin::getTypeName(const data::AvatarLevelSkillMixin *const this)
{
  return "AvatarLevelSkillMixin";
};

// Line 2324: range 00000000100C376E-00000000100C390A
int32_t __cdecl data::AvatarLevelSkillMixin::getHashNum(const data::AvatarLevelSkillMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarLevelSkillMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarLevelSkillMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2340: range 000000001123C946-000000001123C987
void __cdecl data::AvatarLevelSkillMixinFactory::AvatarLevelSkillMixinFactory(
        data::AvatarLevelSkillMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarLevelSkillMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarLevelSkillMixinFactory = v2;
};

// Line 2348: range 000000001123CC90-000000001123CD90
void __cdecl data::OnAvatarUseSkillMixin::OnAvatarUseSkillMixin(data::OnAvatarUseSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OnAvatarUseSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_trigger_normal_attack);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_trigger_skill);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_trigger_ultimate_skill);
  if ( *(char *)(((unsigned __int64)&this->use_skill_start >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_skill_start, v1, &this->use_skill_start);
  this->use_skill_start = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->clear_skill_id_delay >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->clear_skill_id_delay >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->clear_skill_id_delay, (((_BYTE)this + 108) & 7u) + 3);
  }
  this->clear_skill_id_delay = 0.0;
};

// Line 2348: range 000000001123D13C-000000001123D330
void __cdecl data::OnAvatarUseSkillMixin::OnAvatarUseSkillMixin(
        data::OnAvatarUseSkillMixin *const this,
        const data::OnAvatarUseSkillMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityActionArray *p_on_trigger_ultimate_skill; // rsi
  bool use_skill_start; // cl
  char v5; // al
  float clear_skill_id_delay; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OnAvatarUseSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_trigger_normal_attack,
    &a2->on_trigger_normal_attack);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_trigger_skill, &a2->on_trigger_skill);
  p_on_trigger_ultimate_skill = &a2->on_trigger_ultimate_skill;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_trigger_ultimate_skill,
    &a2->on_trigger_ultimate_skill);
  if ( *(char *)(((unsigned __int64)&a2->use_skill_start >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_skill_start, p_on_trigger_ultimate_skill, &a2->use_skill_start);
  use_skill_start = a2->use_skill_start;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_skill_start >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_on_trigger_ultimate_skill) = v5 != 0;
    __asan_report_store1(&this->use_skill_start, p_on_trigger_ultimate_skill, &this->use_skill_start);
  }
  this->use_skill_start = use_skill_start;
  if ( *(_BYTE *)(((unsigned __int64)&a2->clear_skill_id_delay >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->clear_skill_id_delay >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->clear_skill_id_delay);
  }
  clear_skill_id_delay = a2->clear_skill_id_delay;
  if ( *(_BYTE *)(((unsigned __int64)&this->clear_skill_id_delay >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->clear_skill_id_delay >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->clear_skill_id_delay, (((_BYTE)this + 108) & 7u) + 3);
  }
  this->clear_skill_id_delay = clear_skill_id_delay;
};

// Line 2359: range 0000000011301DA2-0000000011301E1F
void __cdecl data::OnAvatarUseSkillMixin::~OnAvatarUseSkillMixin(data::OnAvatarUseSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnAvatarUseSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_trigger_ultimate_skill);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_trigger_skill);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_trigger_normal_attack);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2359: range 0000000011301E20-0000000011301E4A
void __cdecl data::OnAvatarUseSkillMixin::~OnAvatarUseSkillMixin(data::OnAvatarUseSkillMixin *const this)
{
  data::OnAvatarUseSkillMixin::~OnAvatarUseSkillMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 2364: range 00000000100C390C-00000000100C391C
const char *__cdecl data::OnAvatarUseSkillMixin::getTypeName(const data::OnAvatarUseSkillMixin *const this)
{
  return "OnAvatarUseSkillMixin";
};

// Line 2365: range 00000000100C391E-00000000100C3ABA
int32_t __cdecl data::OnAvatarUseSkillMixin::getHashNum(const data::OnAvatarUseSkillMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OnAvatarUseSkillMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OnAvatarUseSkillMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2381: range 000000001123D61A-000000001123D65B
void __cdecl data::OnAvatarUseSkillMixinFactory::OnAvatarUseSkillMixinFactory(
        data::OnAvatarUseSkillMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnAvatarUseSkillMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OnAvatarUseSkillMixinFactory = v2;
};

// Line 2394: range 000000001123D99C-000000001123DA09
void __cdecl data::OnLocalAvatarAddedShieldMixin::OnLocalAvatarAddedShieldMixin(
        data::OnLocalAvatarAddedShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OnLocalAvatarAddedShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::HasShieldType>::vector(&this->shield_type_list);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 2394: range 000000001123DF56-000000001123E01C
void __cdecl data::OnLocalAvatarAddedShieldMixin::OnLocalAvatarAddedShieldMixin(
        data::OnLocalAvatarAddedShieldMixin *const this,
        const data::OnLocalAvatarAddedShieldMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OnLocalAvatarAddedShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::HasShieldType>::vector(&this->shield_type_list, &a2->shield_type_list);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 2402: range 0000000011301D76-0000000011301DA0
void __cdecl data::OnLocalAvatarAddedShieldMixin::~OnLocalAvatarAddedShieldMixin(
        data::OnLocalAvatarAddedShieldMixin *const this)
{
  data::OnLocalAvatarAddedShieldMixin::~OnLocalAvatarAddedShieldMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 2402: range 0000000011301D08-0000000011301D75
void __cdecl data::OnLocalAvatarAddedShieldMixin::~OnLocalAvatarAddedShieldMixin(
        data::OnLocalAvatarAddedShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnLocalAvatarAddedShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::vector<data::HasShieldType>::~vector(&this->shield_type_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2407: range 00000000100C3ABC-00000000100C3ACC
const char *__cdecl data::OnLocalAvatarAddedShieldMixin::getTypeName(
        const data::OnLocalAvatarAddedShieldMixin *const this)
{
  return "OnLocalAvatarAddedShieldMixin";
};

// Line 2408: range 00000000100C3ACE-00000000100C3C6A
int32_t __cdecl data::OnLocalAvatarAddedShieldMixin::getHashNum(const data::OnLocalAvatarAddedShieldMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OnLocalAvatarAddedShieldMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OnLocalAvatarAddedShieldMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2424: range 000000001123E306-000000001123E347
void __cdecl data::OnLocalAvatarAddedShieldMixinFactory::OnLocalAvatarAddedShieldMixinFactory(
        data::OnLocalAvatarAddedShieldMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnLocalAvatarAddedShieldMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OnLocalAvatarAddedShieldMixinFactory = v2;
};

// Line 2432: range 000000001123E650-000000001123E6CD
void __cdecl data::CostStaminaMixin::CostStaminaMixin(data::CostStaminaMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CostStaminaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->cost_stamina_delta);
  data::DynamicFloat::DynamicFloat(&this->cost_stamina_ratio);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stamina_empty);
};

// Line 2432: range 000000001123EA82-000000001123EB78
void __cdecl data::CostStaminaMixin::CostStaminaMixin(
        data::CostStaminaMixin *const this,
        const data::CostStaminaMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CostStaminaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->cost_stamina_delta, &a2->cost_stamina_delta);
  data::DynamicFloat::DynamicFloat(&this->cost_stamina_ratio, &a2->cost_stamina_ratio);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stamina_empty, &a2->on_stamina_empty);
};

// Line 2441: range 0000000011301C5E-0000000011301CDB
void __cdecl data::CostStaminaMixin::~CostStaminaMixin(data::CostStaminaMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CostStaminaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_stamina_empty);
  data::DynamicFloat::~DynamicFloat(&this->cost_stamina_ratio);
  data::DynamicFloat::~DynamicFloat(&this->cost_stamina_delta);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2441: range 0000000011301CDC-0000000011301D06
void __cdecl data::CostStaminaMixin::~CostStaminaMixin(data::CostStaminaMixin *const this)
{
  data::CostStaminaMixin::~CostStaminaMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 2446: range 00000000100C3C6C-00000000100C3C7C
const char *__cdecl data::CostStaminaMixin::getTypeName(const data::CostStaminaMixin *const this)
{
  return "CostStaminaMixin";
};

// Line 2447: range 00000000100C3C7E-00000000100C3E1A
int32_t __cdecl data::CostStaminaMixin::getHashNum(const data::CostStaminaMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CostStaminaMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CostStaminaMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2463: range 000000001123EE62-000000001123EEA3
void __cdecl data::CostStaminaMixinFactory::CostStaminaMixinFactory(data::CostStaminaMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CostStaminaMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CostStaminaMixinFactory = v2;
};

// Line 2471: range 000000001123F1AC-000000001123F3BA
void __cdecl data::EntityDefenceMixin::EntityDefenceMixin(data::EntityDefenceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EntityDefenceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids);
  std::string::basic_string(&this->defend_trigger_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->defend_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->defend_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->defend_angle, v1);
  }
  this->defend_angle = 360.0;
  data::DynamicFloat::DynamicFloat(&this->defend_probability, 1.0);
  data::DynamicFloat::DynamicFloat(&this->defend_probability_delta, 0.0);
  data::DynamicFloat::DynamicFloat(&this->defend_time_interval, 0.0);
  if ( *(char *)(((unsigned __int64)&this->always_recover >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->always_recover, v1, &this->always_recover);
  this->always_recover = 1;
  data::DynamicInt::DynamicInt(&this->defend_count_interval, 0);
  if ( *(char *)(((unsigned __int64)&this->can_defence_while_endure_full >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->can_defence_while_endure_full, 0LL, &this->can_defence_while_endure_full);
  this->can_defence_while_endure_full = 0;
};

// Line 2471: range 000000001123F804-000000001123FB11
void __cdecl data::EntityDefenceMixin::EntityDefenceMixin(
        data::EntityDefenceMixin *const this,
        const data::EntityDefenceMixin *a2)
{
  int (**v2)(...); // rdx
  float defend_angle; // xmm0_4
  data::DynamicFloat *p_defend_time_interval; // rsi
  bool always_recover; // cl
  char v6; // al
  data::DynamicInt *p_defend_count_interval; // rsi
  bool can_defence_while_endure_full; // cl
  char v9; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EntityDefenceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids, &a2->state_ids);
  std::string::basic_string(&this->defend_trigger_id, &a2->defend_trigger_id);
  if ( *(_BYTE *)(((unsigned __int64)&a2->defend_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->defend_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->defend_angle);
  }
  defend_angle = a2->defend_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->defend_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->defend_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->defend_angle, &a2->defend_trigger_id);
  }
  this->defend_angle = defend_angle;
  data::DynamicFloat::DynamicFloat(&this->defend_probability, &a2->defend_probability);
  data::DynamicFloat::DynamicFloat(&this->defend_probability_delta, &a2->defend_probability_delta);
  p_defend_time_interval = &a2->defend_time_interval;
  data::DynamicFloat::DynamicFloat(&this->defend_time_interval, &a2->defend_time_interval);
  if ( *(char *)(((unsigned __int64)&a2->always_recover >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->always_recover, p_defend_time_interval, &a2->always_recover);
  always_recover = a2->always_recover;
  v6 = *(_BYTE *)(((unsigned __int64)&this->always_recover >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_defend_time_interval) = v6 != 0;
    __asan_report_store1(&this->always_recover, p_defend_time_interval, &this->always_recover);
  }
  this->always_recover = always_recover;
  p_defend_count_interval = &a2->defend_count_interval;
  data::DynamicInt::DynamicInt(&this->defend_count_interval, &a2->defend_count_interval);
  if ( *(char *)(((unsigned __int64)&a2->can_defence_while_endure_full >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->can_defence_while_endure_full, p_defend_count_interval, &a2->can_defence_while_endure_full);
  can_defence_while_endure_full = a2->can_defence_while_endure_full;
  v9 = *(_BYTE *)(((unsigned __int64)&this->can_defence_while_endure_full >> 3) + 0x7FFF8000);
  if ( v9 < 0 )
  {
    LOBYTE(p_defend_count_interval) = v9 != 0;
    __asan_report_store1(
      &this->can_defence_while_endure_full,
      p_defend_count_interval,
      &this->can_defence_while_endure_full);
  }
  this->can_defence_while_endure_full = can_defence_while_endure_full;
};

// Line 2486: range 000000001123FDFA-000000001123FEAB
void __cdecl data::EntityDefenceMixin::~EntityDefenceMixin(data::EntityDefenceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityDefenceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicInt::~DynamicInt(&this->defend_count_interval);
  data::DynamicFloat::~DynamicFloat(&this->defend_time_interval);
  data::DynamicFloat::~DynamicFloat(&this->defend_probability_delta);
  data::DynamicFloat::~DynamicFloat(&this->defend_probability);
  std::string::~string(&this->defend_trigger_id);
  std::vector<std::string>::~vector(&this->state_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2486: range 000000001123FEAC-000000001123FED6
void __cdecl data::EntityDefenceMixin::~EntityDefenceMixin(data::EntityDefenceMixin *const this)
{
  data::EntityDefenceMixin::~EntityDefenceMixin(this);
  operator delete(this, 0x100uLL);
};

// Line 2491: range 00000000100C3E1C-00000000100C3E2C
const char *__cdecl data::EntityDefenceMixin::getTypeName(const data::EntityDefenceMixin *const this)
{
  return "EntityDefenceMixin";
};

// Line 2492: range 00000000100C3E2E-00000000100C3FCA
int32_t __cdecl data::EntityDefenceMixin::getHashNum(const data::EntityDefenceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EntityDefenceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EntityDefenceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2511: range 000000001123FED8-000000001123FF2D
void __cdecl data::MonsterDefendAudio::MonsterDefendAudio(data::MonsterDefendAudio *const this)
{
  __int64 v1; // rsi

  data::ConfigWwiseString::ConfigWwiseString(&this->on_defend_succeded);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 2511: range 000000001042034C-00000000104203E7
void __cdecl data::MonsterDefendAudio::MonsterDefendAudio(
        data::MonsterDefendAudio *const this,
        const data::MonsterDefendAudio *a2)
{
  bool is_json_loaded; // cl
  char v3; // al

  data::ConfigWwiseString::ConfigWwiseString(&this->on_defend_succeded, &a2->on_defend_succeded);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, a2, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v3 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v3 < 0 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store1(&this->is_json_loaded, a2, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 2511: range 00000000104203E8-0000000010420402
void __cdecl data::MonsterDefendAudio::~MonsterDefendAudio(data::MonsterDefendAudio *const this)
{
  data::ConfigWwiseString::~ConfigWwiseString(&this->on_defend_succeded);
};

// Line 2534: range 000000001123FF2E-000000001124006F
void __cdecl data::MonsterDefendMixin::MonsterDefendMixin(data::MonsterDefendMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx

  data::EntityDefenceMixin::EntityDefenceMixin((data::EntityDefenceMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::MonsterDefendMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = (((_BYTE)this - 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->attack_type, v3);
  }
  this->attack_type = None_2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_defend_succeded);
  data::MonsterDefendAudio::MonsterDefendAudio(&this->defend_audio_config);
  if ( *(char *)(((unsigned __int64)&this->random_direction >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->random_direction, v3, &this->random_direction);
  this->random_direction = 0;
  v4 = ((_BYTE)this + 73) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->do_not_turn_direction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->do_not_turn_direction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->do_not_turn_direction, v4, v5);
  this->do_not_turn_direction = 0;
};

// Line 2534: range 00000000112404BE-0000000011240729
void __cdecl data::MonsterDefendMixin::MonsterDefendMixin(
        data::MonsterDefendMixin *const this,
        const data::MonsterDefendMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  data::AttackType attack_type; // ecx
  char v5; // dl
  data::MonsterDefendAudio *p_defend_audio_config; // rsi
  bool random_direction; // cl
  char v8; // al
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool do_not_turn_direction; // cl
  char v12; // dl
  __int64 v13; // rdx

  data::EntityDefenceMixin::EntityDefenceMixin(
    (data::EntityDefenceMixin *const)this,
    (const data::EntityDefenceMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::MonsterDefendMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = (((_BYTE)a2 - 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->attack_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->attack_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->attack_type);
  }
  attack_type = a2->attack_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && (char)((((_BYTE)this - 4) & 7) + 3) >= v5 )
  {
    LOBYTE(v3) = v5 != 0;
    __asan_report_store4(&this->attack_type, v3);
  }
  this->attack_type = attack_type;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_defend_succeded, &a2->on_defend_succeded);
  p_defend_audio_config = &a2->defend_audio_config;
  data::MonsterDefendAudio::MonsterDefendAudio(&this->defend_audio_config, &a2->defend_audio_config);
  if ( *(char *)(((unsigned __int64)&a2->random_direction >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->random_direction, p_defend_audio_config, &a2->random_direction);
  random_direction = a2->random_direction;
  v8 = *(_BYTE *)(((unsigned __int64)&this->random_direction >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(p_defend_audio_config) = v8 != 0;
    __asan_report_store1(&this->random_direction, p_defend_audio_config, &this->random_direction);
  }
  this->random_direction = random_direction;
  v9 = ((_BYTE)a2 + 73) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->do_not_turn_direction >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->do_not_turn_direction >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->do_not_turn_direction, v9, v10);
  do_not_turn_direction = a2->do_not_turn_direction;
  v12 = *(_BYTE *)(((unsigned __int64)&this->do_not_turn_direction >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 73) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->do_not_turn_direction, v9, v13);
  this->do_not_turn_direction = do_not_turn_direction;
};

// Line 2545: range 0000000011301C32-0000000011301C5C
void __cdecl data::MonsterDefendMixin::~MonsterDefendMixin(data::MonsterDefendMixin *const this)
{
  data::MonsterDefendMixin::~MonsterDefendMixin(this);
  operator delete(this, 0x150uLL);
};

// Line 2545: range 0000000011301BC0-0000000011301C31
void __cdecl data::MonsterDefendMixin::~MonsterDefendMixin(data::MonsterDefendMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterDefendMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::MonsterDefendAudio::~MonsterDefendAudio(&this->defend_audio_config);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_defend_succeded);
  data::EntityDefenceMixin::~EntityDefenceMixin((data::EntityDefenceMixin *const)this);
};

// Line 2550: range 00000000100C3FCC-00000000100C3FDC
const char *__cdecl data::MonsterDefendMixin::getTypeName(const data::MonsterDefendMixin *const this)
{
  return "MonsterDefendMixin";
};

// Line 2551: range 00000000100C3FDE-00000000100C417A
int32_t __cdecl data::MonsterDefendMixin::getHashNum(const data::MonsterDefendMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MonsterDefendMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MonsterDefendMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2567: range 0000000011240A12-0000000011240A53
void __cdecl data::MonsterDefendMixinFactory::MonsterDefendMixinFactory(data::MonsterDefendMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterDefendMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MonsterDefendMixinFactory = v2;
};

// Line 2575: range 0000000011240D5C-0000000011240DD9
void __cdecl data::BeingHitMixin::BeingHitMixin(data::BeingHitMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BeingHitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->to_attacker);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->to_attacker_owner);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->to_attacker_origin_owner);
};

// Line 2575: range 000000001124118E-0000000011241284
void __cdecl data::BeingHitMixin::BeingHitMixin(data::BeingHitMixin *const this, const data::BeingHitMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BeingHitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->to_attacker, &a2->to_attacker);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->to_attacker_owner, &a2->to_attacker_owner);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->to_attacker_origin_owner,
    &a2->to_attacker_origin_owner);
};

// Line 2584: range 0000000011301B94-0000000011301BBE
void __cdecl data::BeingHitMixin::~BeingHitMixin(data::BeingHitMixin *const this)
{
  data::BeingHitMixin::~BeingHitMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 2584: range 0000000011301B16-0000000011301B93
void __cdecl data::BeingHitMixin::~BeingHitMixin(data::BeingHitMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BeingHitMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->to_attacker_origin_owner);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->to_attacker_owner);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->to_attacker);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2589: range 00000000100C417C-00000000100C418C
const char *__cdecl data::BeingHitMixin::getTypeName(const data::BeingHitMixin *const this)
{
  return "BeingHitMixin";
};

// Line 2590: range 00000000100C418E-00000000100C432A
int32_t __cdecl data::BeingHitMixin::getHashNum(const data::BeingHitMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BeingHitMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BeingHitMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2606: range 000000001124156E-00000000112415AF
void __cdecl data::BeingHitMixinFactory::BeingHitMixinFactory(data::BeingHitMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BeingHitMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BeingHitMixinFactory = v2;
};

// Line 2614: range 00000000112418B8-0000000011241952
void __cdecl data::AutoDefenceMixin::AutoDefenceMixin(data::AutoDefenceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::EntityDefenceMixin::EntityDefenceMixin((data::EntityDefenceMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::AutoDefenceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->cost_stamina_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cost_stamina_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->cost_stamina_ratio, (((_BYTE)this - 4) & 7u) + 3);
  }
  this->cost_stamina_ratio = 0.0;
};

// Line 2614: range 0000000011241D9C-0000000011241E86
void __cdecl data::AutoDefenceMixin::AutoDefenceMixin(
        data::AutoDefenceMixin *const this,
        const data::AutoDefenceMixin *a2)
{
  int (**v2)(...); // rdx
  float cost_stamina_ratio; // xmm0_4

  data::EntityDefenceMixin::EntityDefenceMixin(
    (data::EntityDefenceMixin *const)this,
    (const data::EntityDefenceMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::AutoDefenceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->cost_stamina_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->cost_stamina_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->cost_stamina_ratio);
  }
  cost_stamina_ratio = a2->cost_stamina_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->cost_stamina_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cost_stamina_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->cost_stamina_ratio, (((_BYTE)this - 4) & 7u) + 3);
  }
  this->cost_stamina_ratio = cost_stamina_ratio;
};

// Line 2621: range 0000000011301AEA-0000000011301B14
void __cdecl data::AutoDefenceMixin::~AutoDefenceMixin(data::AutoDefenceMixin *const this)
{
  data::AutoDefenceMixin::~AutoDefenceMixin(this);
  operator delete(this, 0x100uLL);
};

// Line 2621: range 0000000011301A9C-0000000011301AE9
void __cdecl data::AutoDefenceMixin::~AutoDefenceMixin(data::AutoDefenceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AutoDefenceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::EntityDefenceMixin::~EntityDefenceMixin((data::EntityDefenceMixin *const)this);
};

// Line 2626: range 00000000100C432C-00000000100C433C
const char *__cdecl data::AutoDefenceMixin::getTypeName(const data::AutoDefenceMixin *const this)
{
  return "AutoDefenceMixin";
};

// Line 2627: range 00000000100C433E-00000000100C44DA
int32_t __cdecl data::AutoDefenceMixin::getHashNum(const data::AutoDefenceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AutoDefenceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AutoDefenceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2643: range 0000000011242170-00000000112421B1
void __cdecl data::AutoDefenceMixinFactory::AutoDefenceMixinFactory(data::AutoDefenceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AutoDefenceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AutoDefenceMixinFactory = v2;
};

// Line 2651: range 00000000112424BA-0000000011242527
void __cdecl data::AttackHittingSceneMixin::AttackHittingSceneMixin(data::AttackHittingSceneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttackHittingSceneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hitting_scene);
  std::vector<std::string>::vector(&this->anim_event_ids);
};

// Line 2651: range 000000001124294C-0000000011242A12
void __cdecl data::AttackHittingSceneMixin::AttackHittingSceneMixin(
        data::AttackHittingSceneMixin *const this,
        const data::AttackHittingSceneMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttackHittingSceneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hitting_scene, &a2->on_hitting_scene);
  std::vector<std::string>::vector(&this->anim_event_ids, &a2->anim_event_ids);
};

// Line 2659: range 0000000011301A70-0000000011301A9A
void __cdecl data::AttackHittingSceneMixin::~AttackHittingSceneMixin(data::AttackHittingSceneMixin *const this)
{
  data::AttackHittingSceneMixin::~AttackHittingSceneMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 2659: range 0000000011301A02-0000000011301A6F
void __cdecl data::AttackHittingSceneMixin::~AttackHittingSceneMixin(data::AttackHittingSceneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackHittingSceneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->anim_event_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_hitting_scene);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2664: range 00000000100C44DC-00000000100C44EC
const char *__cdecl data::AttackHittingSceneMixin::getTypeName(const data::AttackHittingSceneMixin *const this)
{
  return "AttackHittingSceneMixin";
};

// Line 2665: range 00000000100C44EE-00000000100C468A
int32_t __cdecl data::AttackHittingSceneMixin::getHashNum(const data::AttackHittingSceneMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttackHittingSceneMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttackHittingSceneMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2681: range 0000000011242CFC-0000000011242D3D
void __cdecl data::AttackHittingSceneMixinFactory::AttackHittingSceneMixinFactory(
        data::AttackHittingSceneMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackHittingSceneMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttackHittingSceneMixinFactory = v2;
};

// Line 2689: range 0000000011243046-00000000112432E1
void __cdecl data::TriggerWitchTimeMixin::TriggerWitchTimeMixin(data::TriggerWitchTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerWitchTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->ignore_target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->ignore_target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->ignore_target_type, v1);
  }
  this->ignore_target_type = None_22;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->timescale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->timescale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->timescale, v3);
  }
  this->timescale = 0.1;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v3);
  }
  this->duration = 2.0;
  v4 = ((_BYTE)this + 44) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->use_max >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->use_max >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->use_max, v4, v5);
  this->use_max = 1;
  v6 = ((_BYTE)this + 45) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->enable_effect >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->enable_effect >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->enable_effect, v6, v7);
  this->enable_effect = 1;
  v8 = ((_BYTE)this + 46) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&this->enable_delay >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&this->enable_delay >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->enable_delay, v8, v9);
  this->enable_delay = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_time_scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->delay_time_scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->delay_time_scale, v8);
  }
  this->delay_time_scale = 0.050000001;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->delay_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->delay_duration, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->delay_duration = 0.5;
  std::string::basic_string(&this->open_effect_pattern);
  std::string::basic_string(&this->close_effect_pattern);
  std::string::basic_string(&this->weather_pattern);
};

// Line 2689: range 000000001124369E-0000000011243B89
void __cdecl data::TriggerWitchTimeMixin::TriggerWitchTimeMixin(
        data::TriggerWitchTimeMixin *const this,
        const data::TriggerWitchTimeMixin *a2)
{
  int (**v2)(...); // rdx
  data::TargetType ignore_target_type; // ecx
  char v4; // al
  float timescale; // xmm0_4
  __int64 v6; // rsi
  float duration; // xmm0_4
  __int64 v8; // rsi
  __int64 v9; // rdx
  bool use_max; // cl
  char v11; // dl
  __int64 v12; // rdx
  __int64 v13; // rsi
  __int64 v14; // rdx
  bool enable_effect; // cl
  char v16; // dl
  __int64 v17; // rdx
  __int64 v18; // rsi
  __int64 v19; // rdx
  bool enable_delay; // cl
  char v21; // dl
  __int64 v22; // rdx
  float delay_time_scale; // xmm0_4
  float delay_duration; // xmm0_4
  const data::TriggerWitchTimeMixin *v25; // [rsp+0h] [rbp-20h]

  v25 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerWitchTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->ignore_target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->ignore_target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->ignore_target_type);
  }
  ignore_target_type = a2->ignore_target_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->ignore_target_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->ignore_target_type, a2);
  }
  this->ignore_target_type = ignore_target_type;
  if ( *(_BYTE *)(((unsigned __int64)&v25->timescale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v25 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v25->timescale >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v25->timescale);
  }
  timescale = v25->timescale;
  v6 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->timescale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->timescale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->timescale, v6);
  }
  this->timescale = timescale;
  if ( *(_BYTE *)(((unsigned __int64)&v25->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v25->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v25->duration);
  }
  duration = v25->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v6);
  }
  this->duration = duration;
  v8 = ((_BYTE)v25 + 44) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&v25->use_max >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&v25->use_max >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&v25->use_max, v8, v9);
  use_max = v25->use_max;
  v11 = *(_BYTE *)(((unsigned __int64)&this->use_max >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v11 != 0;
  v12 = (v11 != 0) & (unsigned __int8)((((unsigned __int8)this + 44) & 7) >= v11);
  if ( (_BYTE)v12 )
    __asan_report_store1(&this->use_max, v8, v12);
  this->use_max = use_max;
  v13 = ((_BYTE)v25 + 45) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&v25->enable_effect >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&v25->enable_effect >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_load1(&v25->enable_effect, v13, v14);
  enable_effect = v25->enable_effect;
  v16 = *(_BYTE *)(((unsigned __int64)&this->enable_effect >> 3) + 0x7FFF8000);
  LOBYTE(v13) = v16 != 0;
  v17 = (v16 != 0) & (unsigned __int8)((((unsigned __int8)this + 45) & 7) >= v16);
  if ( (_BYTE)v17 )
    __asan_report_store1(&this->enable_effect, v13, v17);
  this->enable_effect = enable_effect;
  v18 = ((_BYTE)v25 + 46) & 7;
  v19 = (*(_BYTE *)(((unsigned __int64)&v25->enable_delay >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v18 >= *(_BYTE *)(((unsigned __int64)&v25->enable_delay >> 3) + 0x7FFF8000));
  if ( (_BYTE)v19 )
    __asan_report_load1(&v25->enable_delay, v18, v19);
  enable_delay = v25->enable_delay;
  v21 = *(_BYTE *)(((unsigned __int64)&this->enable_delay >> 3) + 0x7FFF8000);
  LOBYTE(v18) = v21 != 0;
  v22 = (v21 != 0) & (unsigned __int8)((((unsigned __int8)this + 46) & 7) >= v21);
  if ( (_BYTE)v22 )
    __asan_report_store1(&this->enable_delay, v18, v22);
  this->enable_delay = enable_delay;
  if ( *(_BYTE *)(((unsigned __int64)&v25->delay_time_scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v25->delay_time_scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v25->delay_time_scale);
  }
  delay_time_scale = v25->delay_time_scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_time_scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->delay_time_scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->delay_time_scale, v18);
  }
  this->delay_time_scale = delay_time_scale;
  if ( *(_BYTE *)(((unsigned __int64)&v25->delay_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v25 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v25->delay_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v25->delay_duration);
  }
  delay_duration = v25->delay_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->delay_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->delay_duration, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->delay_duration = delay_duration;
  std::string::basic_string(&this->open_effect_pattern, &v25->open_effect_pattern);
  std::string::basic_string(&this->close_effect_pattern, &v25->close_effect_pattern);
  std::string::basic_string(&this->weather_pattern, &v25->weather_pattern);
};

// Line 2706: range 0000000011301958-00000000113019D5
void __cdecl data::TriggerWitchTimeMixin::~TriggerWitchTimeMixin(data::TriggerWitchTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerWitchTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->weather_pattern);
  std::string::~string(&this->close_effect_pattern);
  std::string::~string(&this->open_effect_pattern);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2706: range 00000000113019D6-0000000011301A00
void __cdecl data::TriggerWitchTimeMixin::~TriggerWitchTimeMixin(data::TriggerWitchTimeMixin *const this)
{
  data::TriggerWitchTimeMixin::~TriggerWitchTimeMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 2711: range 00000000100C468C-00000000100C469C
const char *__cdecl data::TriggerWitchTimeMixin::getTypeName(const data::TriggerWitchTimeMixin *const this)
{
  return "TriggerWitchTimeMixin";
};

// Line 2712: range 00000000100C469E-00000000100C483A
int32_t __cdecl data::TriggerWitchTimeMixin::getHashNum(const data::TriggerWitchTimeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerWitchTimeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerWitchTimeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2728: range 0000000011243E72-0000000011243EB3
void __cdecl data::TriggerWitchTimeMixinFactory::TriggerWitchTimeMixinFactory(
        data::TriggerWitchTimeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerWitchTimeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerWitchTimeMixinFactory = v2;
};

// Line 2751: range 000000001124431C-0000000011244489
void __cdecl data::TriggerWeatherMixin::TriggerWeatherMixin(data::TriggerWeatherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerWeatherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Area;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->area_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->area_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->area_id, v3);
  }
  this->area_id = 0;
  std::string::basic_string(&this->weather_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trans_duration, v3);
  }
  this->trans_duration = 0.5;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, (((_BYTE)this + 76) & 7u) + 3);
  }
  this->duration = 0.0;
};

// Line 2751: range 00000000112448AE-0000000011244B3E
void __cdecl data::TriggerWeatherMixin::TriggerWeatherMixin(
        data::TriggerWeatherMixin *const this,
        const data::TriggerWeatherMixin *a2)
{
  int (**v2)(...); // rdx
  data::TriggerWeatherType type; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t area_id; // ecx
  char v7; // dl
  float trans_duration; // xmm0_4
  float duration; // xmm0_4
  const data::TriggerWeatherMixin *v10; // [rsp+0h] [rbp-20h]

  v10 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerWeatherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  v5 = (((_BYTE)v10 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v10->area_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v10 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->area_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v10->area_id);
  }
  area_id = v10->area_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->area_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->area_id, v5);
  }
  this->area_id = area_id;
  std::string::basic_string(&this->weather_pattern, &v10->weather_pattern);
  if ( *(_BYTE *)(((unsigned __int64)&v10->trans_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v10->trans_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v10->trans_duration);
  }
  trans_duration = v10->trans_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trans_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trans_duration, &v10->weather_pattern);
  }
  this->trans_duration = trans_duration;
  if ( *(_BYTE *)(((unsigned __int64)&v10->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v10 + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v10->duration);
  }
  duration = v10->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->duration, (((_BYTE)this + 76) & 7u) + 3);
  }
  this->duration = duration;
};

// Line 2762: range 000000001130192C-0000000011301956
void __cdecl data::TriggerWeatherMixin::~TriggerWeatherMixin(data::TriggerWeatherMixin *const this)
{
  data::TriggerWeatherMixin::~TriggerWeatherMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 2762: range 00000000113018CE-000000001130192B
void __cdecl data::TriggerWeatherMixin::~TriggerWeatherMixin(data::TriggerWeatherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerWeatherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->weather_pattern);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2767: range 00000000100C483C-00000000100C484C
const char *__cdecl data::TriggerWeatherMixin::getTypeName(const data::TriggerWeatherMixin *const this)
{
  return "TriggerWeatherMixin";
};

// Line 2768: range 00000000100C484E-00000000100C49EA
int32_t __cdecl data::TriggerWeatherMixin::getHashNum(const data::TriggerWeatherMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerWeatherMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerWeatherMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2784: range 0000000011244E28-0000000011244E69
void __cdecl data::TriggerWeatherMixinFactory::TriggerWeatherMixinFactory(data::TriggerWeatherMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerWeatherMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerWeatherMixinFactory = v2;
};

// Line 2792: range 0000000011245172-0000000011245293
void __cdecl data::TriggerPostProcessEffectMixin::TriggerPostProcessEffectMixin(
        data::TriggerPostProcessEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerPostProcessEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->post_effect_asset_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v1);
  }
  this->duration = 4.0;
  v3 = ((_BYTE)this + 68) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_stage_effect >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_stage_effect >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_stage_effect, v3, v4);
  this->is_stage_effect = 0;
  v5 = ((_BYTE)this + 69) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->force_fade_out >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->force_fade_out >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->force_fade_out, v5, v6);
  this->force_fade_out = 0;
};

// Line 2792: range 00000000112456AE-00000000112458BC
void __cdecl data::TriggerPostProcessEffectMixin::TriggerPostProcessEffectMixin(
        data::TriggerPostProcessEffectMixin *const this,
        const data::TriggerPostProcessEffectMixin *a2)
{
  int (**v2)(...); // rdx
  float duration; // xmm0_4
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool is_stage_effect; // cl
  char v7; // dl
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool force_fade_out; // cl
  char v12; // dl
  __int64 v13; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerPostProcessEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->post_effect_asset_name, &a2->post_effect_asset_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, &a2->post_effect_asset_name);
  }
  this->duration = duration;
  v4 = ((_BYTE)a2 + 68) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&a2->is_stage_effect >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&a2->is_stage_effect >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&a2->is_stage_effect, v4, v5);
  is_stage_effect = a2->is_stage_effect;
  v7 = *(_BYTE *)(((unsigned __int64)&this->is_stage_effect >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 68) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->is_stage_effect, v4, v8);
  this->is_stage_effect = is_stage_effect;
  v9 = ((_BYTE)a2 + 69) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->force_fade_out >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->force_fade_out >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->force_fade_out, v9, v10);
  force_fade_out = a2->force_fade_out;
  v12 = *(_BYTE *)(((unsigned __int64)&this->force_fade_out >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 69) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->force_fade_out, v9, v13);
  this->force_fade_out = force_fade_out;
};

// Line 2802: range 0000000011301844-00000000113018A1
void __cdecl data::TriggerPostProcessEffectMixin::~TriggerPostProcessEffectMixin(
        data::TriggerPostProcessEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerPostProcessEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->post_effect_asset_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2802: range 00000000113018A2-00000000113018CC
void __cdecl data::TriggerPostProcessEffectMixin::~TriggerPostProcessEffectMixin(
        data::TriggerPostProcessEffectMixin *const this)
{
  data::TriggerPostProcessEffectMixin::~TriggerPostProcessEffectMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 2807: range 00000000100C49EC-00000000100C49FC
const char *__cdecl data::TriggerPostProcessEffectMixin::getTypeName(
        const data::TriggerPostProcessEffectMixin *const this)
{
  return "TriggerPostProcessEffectMixin";
};

// Line 2808: range 00000000100C49FE-00000000100C4B9A
int32_t __cdecl data::TriggerPostProcessEffectMixin::getHashNum(const data::TriggerPostProcessEffectMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerPostProcessEffectMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerPostProcessEffectMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2824: range 0000000011245BA6-0000000011245BE7
void __cdecl data::TriggerPostProcessEffectMixinFactory::TriggerPostProcessEffectMixinFactory(
        data::TriggerPostProcessEffectMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerPostProcessEffectMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerPostProcessEffectMixinFactory = v2;
};

// Line 2832: range 0000000011245EF0-0000000011245F3D
void __cdecl data::TriggerSkillRadialBlurMixin::TriggerSkillRadialBlurMixin(
        data::TriggerSkillRadialBlurMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSkillRadialBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 2832: range 000000001124643E-0000000011246496
void __cdecl data::TriggerSkillRadialBlurMixin::TriggerSkillRadialBlurMixin(
        data::TriggerSkillRadialBlurMixin *const this,
        const data::TriggerSkillRadialBlurMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerSkillRadialBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 2838: range 0000000011301818-0000000011301842
void __cdecl data::TriggerSkillRadialBlurMixin::~TriggerSkillRadialBlurMixin(
        data::TriggerSkillRadialBlurMixin *const this)
{
  data::TriggerSkillRadialBlurMixin::~TriggerSkillRadialBlurMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 2838: range 00000000113017CA-0000000011301817
void __cdecl data::TriggerSkillRadialBlurMixin::~TriggerSkillRadialBlurMixin(
        data::TriggerSkillRadialBlurMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSkillRadialBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2843: range 00000000100C4B9C-00000000100C4BAC
const char *__cdecl data::TriggerSkillRadialBlurMixin::getTypeName(const data::TriggerSkillRadialBlurMixin *const this)
{
  return "TriggerSkillRadialBlurMixin";
};

// Line 2844: range 00000000100C4BAE-00000000100C4D4A
int32_t __cdecl data::TriggerSkillRadialBlurMixin::getHashNum(const data::TriggerSkillRadialBlurMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerSkillRadialBlurMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerSkillRadialBlurMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2860: range 00000000112466E0-0000000011246721
void __cdecl data::TriggerSkillRadialBlurMixinFactory::TriggerSkillRadialBlurMixinFactory(
        data::TriggerSkillRadialBlurMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerSkillRadialBlurMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerSkillRadialBlurMixinFactory = v2;
};

// Line 2868: range 0000000011246A2A-0000000011246AB9
void __cdecl data::ElementTypeModifier::ElementTypeModifier(data::ElementTypeModifier *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rdx

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && (char)(((unsigned __int8)this & 7) + 3) >= *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(this, ((unsigned __int8)this & 7u) + 3);
  }
  this->element_type = None_0;
  v1 = ((_BYTE)this + 4) & 7;
  v2 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v1 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v2 )
    __asan_report_store1(&this->is_json_loaded, v1, v2);
  this->is_json_loaded = 0;
};

// Line 2891: range 0000000011246ABA-0000000011246CDA
void __cdecl data::ModifyDamageMixin::ModifyDamageMixin(data::ModifyDamageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyDamageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->anim_event_names);
  std::vector<std::string>::vector(&this->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attack_type, v1);
  }
  this->attack_type = None_2;
  v3 = ((_BYTE)this + 84) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->ignore_event_info >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->ignore_event_info >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->ignore_event_info, v3, v4);
  this->ignore_event_info = 0;
  data::DynamicFloat::DynamicFloat(&this->damage_percentage);
  data::DynamicFloat::DynamicFloat(&this->damage_percentage_ratio, 0.0);
  data::DynamicFloat::DynamicFloat(&this->damage_extra);
  data::DynamicFloat::DynamicFloat(&this->bonus_critical);
  data::DynamicFloat::DynamicFloat(&this->bonus_critical_hurt);
  data::ElementTypeModifier::ElementTypeModifier(&this->element_type_modifier);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(char *)(((unsigned __int64)&this->true_damage >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->true_damage, v3, &this->true_damage);
  this->true_damage = 0;
  data::DynamicFloat::DynamicFloat(&this->defense_ignore_ratio);
  data::DynamicFloat::DynamicFloat(&this->defense_ignore_delta);
};

// Line 2891: range 000000001124711E-0000000011247568
void __cdecl data::ModifyDamageMixin::ModifyDamageMixin(
        data::ModifyDamageMixin *const this,
        const data::ModifyDamageMixin *a2)
{
  int (**v2)(...); // rdx
  data::StringArray *p_attack_tags; // rsi
  data::AttackType attack_type; // ecx
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool ignore_event_info; // cl
  char v9; // dl
  __int64 v10; // rdx
  data::ConfigAbilityPredicateArray *p_predicates; // rsi
  bool true_damage; // cl
  char v13; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyDamageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->anim_event_names, &a2->anim_event_names);
  p_attack_tags = &a2->attack_tags;
  std::vector<std::string>::vector(&this->attack_tags, &a2->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&a2->attack_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->attack_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->attack_type);
  }
  attack_type = a2->attack_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_attack_tags) = v5 != 0;
    __asan_report_store4(&this->attack_type, p_attack_tags);
  }
  this->attack_type = attack_type;
  v6 = ((_BYTE)a2 + 84) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->ignore_event_info >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->ignore_event_info >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->ignore_event_info, v6, v7);
  ignore_event_info = a2->ignore_event_info;
  v9 = *(_BYTE *)(((unsigned __int64)&this->ignore_event_info >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 84) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->ignore_event_info, v6, v10);
  this->ignore_event_info = ignore_event_info;
  data::DynamicFloat::DynamicFloat(&this->damage_percentage, &a2->damage_percentage);
  data::DynamicFloat::DynamicFloat(&this->damage_percentage_ratio, &a2->damage_percentage_ratio);
  data::DynamicFloat::DynamicFloat(&this->damage_extra, &a2->damage_extra);
  data::DynamicFloat::DynamicFloat(&this->bonus_critical, &a2->bonus_critical);
  data::DynamicFloat::DynamicFloat(&this->bonus_critical_hurt, &a2->bonus_critical_hurt);
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type_modifier >> 3) + 0x7FFF8000) )
    __asan_report_store8(&this->element_type_modifier, &a2->bonus_critical_hurt);
  if ( *(_BYTE *)(((unsigned __int64)&a2->element_type_modifier >> 3) + 0x7FFF8000) )
    __asan_report_load8(&a2->element_type_modifier);
  this->element_type_modifier = a2->element_type_modifier;
  p_predicates = &a2->predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(char *)(((unsigned __int64)&a2->true_damage >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->true_damage, p_predicates, &a2->true_damage);
  true_damage = a2->true_damage;
  v13 = *(_BYTE *)(((unsigned __int64)&this->true_damage >> 3) + 0x7FFF8000);
  if ( v13 < 0 )
  {
    LOBYTE(p_predicates) = v13 != 0;
    __asan_report_store1(&this->true_damage, p_predicates, &this->true_damage);
  }
  this->true_damage = true_damage;
  data::DynamicFloat::DynamicFloat(&this->defense_ignore_ratio, &a2->defense_ignore_ratio);
  data::DynamicFloat::DynamicFloat(&this->defense_ignore_delta, &a2->defense_ignore_delta);
};

// Line 2911: range 0000000011247852-000000001124794B
void __cdecl data::ModifyDamageMixin::~ModifyDamageMixin(data::ModifyDamageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyDamageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->defense_ignore_delta);
  data::DynamicFloat::~DynamicFloat(&this->defense_ignore_ratio);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  data::DynamicFloat::~DynamicFloat(&this->bonus_critical_hurt);
  data::DynamicFloat::~DynamicFloat(&this->bonus_critical);
  data::DynamicFloat::~DynamicFloat(&this->damage_extra);
  data::DynamicFloat::~DynamicFloat(&this->damage_percentage_ratio);
  data::DynamicFloat::~DynamicFloat(&this->damage_percentage);
  std::vector<std::string>::~vector(&this->attack_tags);
  std::vector<std::string>::~vector(&this->anim_event_names);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 2911: range 000000001124794C-0000000011247976
void __cdecl data::ModifyDamageMixin::~ModifyDamageMixin(data::ModifyDamageMixin *const this)
{
  data::ModifyDamageMixin::~ModifyDamageMixin(this);
  operator delete(this, 0x160uLL);
};

// Line 2916: range 00000000100C4D4C-00000000100C4D5C
const char *__cdecl data::ModifyDamageMixin::getTypeName(const data::ModifyDamageMixin *const this)
{
  return "ModifyDamageMixin";
};

// Line 2917: range 00000000100C4D5E-00000000100C4EFA
int32_t __cdecl data::ModifyDamageMixin::getHashNum(const data::ModifyDamageMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyDamageMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyDamageMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2936: range 0000000011247978-0000000011247A4D
void __cdecl data::ModifyDamageCountMixin::ModifyDamageCountMixin(data::ModifyDamageCountMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ModifyDamageMixin::ModifyDamageMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyDamageCountMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->max_modify_count);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->count_predicates);
  if ( *(char *)(((unsigned __int64)&this->is_ignore_attenuation >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_ignore_attenuation, v1, &this->is_ignore_attenuation);
  this->is_ignore_attenuation = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->max_count_actions);
};

// Line 2936: range 0000000011247E96-0000000011248056
void __cdecl data::ModifyDamageCountMixin::ModifyDamageCountMixin(
        data::ModifyDamageCountMixin *const this,
        const data::ModifyDamageCountMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityPredicateArray *p_count_predicates; // rsi
  bool is_ignore_attenuation; // cl
  char v5; // al

  data::ModifyDamageMixin::ModifyDamageMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyDamageCountMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->max_modify_count, &a2->max_modify_count);
  p_count_predicates = &a2->count_predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->count_predicates, &a2->count_predicates);
  if ( *(char *)(((unsigned __int64)&a2->is_ignore_attenuation >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_ignore_attenuation, p_count_predicates, &a2->is_ignore_attenuation);
  is_ignore_attenuation = a2->is_ignore_attenuation;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_ignore_attenuation >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_count_predicates) = v5 != 0;
    __asan_report_store1(&this->is_ignore_attenuation, p_count_predicates, &this->is_ignore_attenuation);
  }
  this->is_ignore_attenuation = is_ignore_attenuation;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions, &a2->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->max_count_actions, &a2->max_count_actions);
};

// Line 2947: range 0000000011301708-000000001130179D
void __cdecl data::ModifyDamageCountMixin::~ModifyDamageCountMixin(data::ModifyDamageCountMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyDamageCountMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->max_count_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->count_predicates);
  data::DynamicFloat::~DynamicFloat(&this->max_modify_count);
  data::ModifyDamageMixin::~ModifyDamageMixin(this);
};

// Line 2947: range 000000001130179E-00000000113017C8
void __cdecl data::ModifyDamageCountMixin::~ModifyDamageCountMixin(data::ModifyDamageCountMixin *const this)
{
  data::ModifyDamageCountMixin::~ModifyDamageCountMixin(this);
  operator delete(this, 0x1D0uLL);
};

// Line 2952: range 00000000100C4EFC-00000000100C4F0C
const char *__cdecl data::ModifyDamageCountMixin::getTypeName(const data::ModifyDamageCountMixin *const this)
{
  return "ModifyDamageCountMixin";
};

// Line 2953: range 00000000100C4F0E-00000000100C50AA
int32_t __cdecl data::ModifyDamageCountMixin::getHashNum(const data::ModifyDamageCountMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyDamageCountMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyDamageCountMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2969: range 0000000011248340-0000000011248381
void __cdecl data::ModifyDamageCountMixinFactory::ModifyDamageCountMixinFactory(
        data::ModifyDamageCountMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyDamageCountMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifyDamageCountMixinFactory = v2;
};

// Line 2977: range 000000001124868A-000000001124878B
void __cdecl data::ModifyBeHitDamageMixin::ModifyBeHitDamageMixin(data::ModifyBeHitDamageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ModifyDamageMixin::ModifyDamageMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyBeHitDamageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->actor__physical_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__fire_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__elec_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__water_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__grass_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__wind_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__ice_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__rock_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__element_reaction_critical_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__element_reaction_critical_hurt_delta);
};

// Line 2977: range 0000000011248BCE-0000000011248E5B
void __cdecl data::ModifyBeHitDamageMixin::ModifyBeHitDamageMixin(
        data::ModifyBeHitDamageMixin *const this,
        const data::ModifyBeHitDamageMixin *a2)
{
  int (**v2)(...); // rdx

  data::ModifyDamageMixin::ModifyDamageMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyBeHitDamageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->actor__physical_sub_hurt_delta, &a2->actor__physical_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__fire_sub_hurt_delta, &a2->actor__fire_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__elec_sub_hurt_delta, &a2->actor__elec_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__water_sub_hurt_delta, &a2->actor__water_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__grass_sub_hurt_delta, &a2->actor__grass_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__wind_sub_hurt_delta, &a2->actor__wind_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__ice_sub_hurt_delta, &a2->actor__ice_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(&this->actor__rock_sub_hurt_delta, &a2->actor__rock_sub_hurt_delta);
  data::DynamicFloat::DynamicFloat(
    &this->actor__element_reaction_critical_delta,
    &a2->actor__element_reaction_critical_delta);
  data::DynamicFloat::DynamicFloat(
    &this->actor__element_reaction_critical_hurt_delta,
    &a2->actor__element_reaction_critical_hurt_delta);
};

// Line 2993: range 00000000113016DC-0000000011301706
void __cdecl data::ModifyBeHitDamageMixin::~ModifyBeHitDamageMixin(data::ModifyBeHitDamageMixin *const this)
{
  data::ModifyBeHitDamageMixin::~ModifyBeHitDamageMixin(this);
  operator delete(this, 0x2A0uLL);
};

// Line 2993: range 00000000113015DA-00000000113016DB
void __cdecl data::ModifyBeHitDamageMixin::~ModifyBeHitDamageMixin(data::ModifyBeHitDamageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyBeHitDamageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->actor__element_reaction_critical_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__element_reaction_critical_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__rock_sub_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__ice_sub_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__wind_sub_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__grass_sub_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__water_sub_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__elec_sub_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__fire_sub_hurt_delta);
  data::DynamicFloat::~DynamicFloat(&this->actor__physical_sub_hurt_delta);
  data::ModifyDamageMixin::~ModifyDamageMixin(this);
};

// Line 2998: range 00000000100C50AC-00000000100C50BC
const char *__cdecl data::ModifyBeHitDamageMixin::getTypeName(const data::ModifyBeHitDamageMixin *const this)
{
  return "ModifyBeHitDamageMixin";
};

// Line 2999: range 00000000100C50BE-00000000100C525A
int32_t __cdecl data::ModifyBeHitDamageMixin::getHashNum(const data::ModifyBeHitDamageMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyBeHitDamageMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyBeHitDamageMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3015: range 0000000011249144-0000000011249185
void __cdecl data::ModifyBeHitDamageMixinFactory::ModifyBeHitDamageMixinFactory(
        data::ModifyBeHitDamageMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyBeHitDamageMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifyBeHitDamageMixinFactory = v2;
};

// Line 3023: range 000000001124948E-000000001124961A
void __cdecl data::ClusterTriggerMixin::ClusterTriggerMixin(data::ClusterTriggerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ClusterTriggerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->config_id, v1);
  }
  this->config_id = 0;
  v3 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->radius, v3);
  }
  this->radius = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v3);
  }
  this->duration = 0.0;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
};

// Line 3023: range 0000000011249A5A-0000000011249CC0
void __cdecl data::ClusterTriggerMixin::ClusterTriggerMixin(
        data::ClusterTriggerMixin *const this,
        const data::ClusterTriggerMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigBornTypePtr *p_born; // rsi
  uint32_t config_id; // ecx
  char v5; // al
  float radius; // xmm0_4
  __int64 v7; // rsi
  float duration; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClusterTriggerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_born = &a2->born;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->config_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->config_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->config_id);
  }
  config_id = a2->config_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->config_id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_born) = v5 != 0;
    __asan_report_store4(&this->config_id, p_born);
  }
  this->config_id = config_id;
  if ( *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->radius);
  }
  radius = a2->radius;
  v7 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->radius, v7);
  }
  this->radius = radius;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v7);
  }
  this->duration = duration;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
};

// Line 3035: range 0000000011301530-00000000113015AD
void __cdecl data::ClusterTriggerMixin::~ClusterTriggerMixin(data::ClusterTriggerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClusterTriggerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3035: range 00000000113015AE-00000000113015D8
void __cdecl data::ClusterTriggerMixin::~ClusterTriggerMixin(data::ClusterTriggerMixin *const this)
{
  data::ClusterTriggerMixin::~ClusterTriggerMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 3040: range 00000000100C525C-00000000100C526C
const char *__cdecl data::ClusterTriggerMixin::getTypeName(const data::ClusterTriggerMixin *const this)
{
  return "ClusterTriggerMixin";
};

// Line 3041: range 00000000100C526E-00000000100C540A
int32_t __cdecl data::ClusterTriggerMixin::getHashNum(const data::ClusterTriggerMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClusterTriggerMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClusterTriggerMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3057: range 0000000011249FAA-0000000011249FEB
void __cdecl data::ClusterTriggerMixinFactory::ClusterTriggerMixinFactory(data::ClusterTriggerMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClusterTriggerMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClusterTriggerMixinFactory = v2;
};

// Line 3065: range 000000001124A2F4-000000001124A3DD
void __cdecl data::ModifySkillCDByModifierCountMixin::ModifySkillCDByModifierCountMixin(
        data::ModifySkillCDByModifierCountMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifySkillCDByModifierCountMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_type, v1);
  }
  this->target_type = None_22;
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  data::DynamicFloat::DynamicFloat(&this->cd_delta);
};

// Line 3065: range 000000001124A788-000000001124A938
void __cdecl data::ModifySkillCDByModifierCountMixin::ModifySkillCDByModifierCountMixin(
        data::ModifySkillCDByModifierCountMixin *const this,
        const data::ModifySkillCDByModifierCountMixin *a2)
{
  int (**v2)(...); // rdx
  data::TargetType target_type; // ecx
  char v4; // al
  std::string *p_modifier_name; // rsi
  uint32_t skill_id; // ecx
  char v7; // al
  const data::ModifySkillCDByModifierCountMixin *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifySkillCDByModifierCountMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_type);
  }
  target_type = a2->target_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->target_type, a2);
  }
  this->target_type = target_type;
  p_modifier_name = &v8->modifier_name;
  std::string::basic_string(&this->modifier_name, &v8->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&v8->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v8->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v8->skill_id);
  }
  skill_id = v8->skill_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(p_modifier_name) = v7 != 0;
    __asan_report_store4(&this->skill_id, p_modifier_name);
  }
  this->skill_id = skill_id;
  data::DynamicFloat::DynamicFloat(&this->cd_delta, &v8->cd_delta);
};

// Line 3075: range 0000000011301496-0000000011301503
void __cdecl data::ModifySkillCDByModifierCountMixin::~ModifySkillCDByModifierCountMixin(
        data::ModifySkillCDByModifierCountMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifySkillCDByModifierCountMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->cd_delta);
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3075: range 0000000011301504-000000001130152E
void __cdecl data::ModifySkillCDByModifierCountMixin::~ModifySkillCDByModifierCountMixin(
        data::ModifySkillCDByModifierCountMixin *const this)
{
  data::ModifySkillCDByModifierCountMixin::~ModifySkillCDByModifierCountMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 3080: range 00000000100C540C-00000000100C541C
const char *__cdecl data::ModifySkillCDByModifierCountMixin::getTypeName(
        const data::ModifySkillCDByModifierCountMixin *const this)
{
  return "ModifySkillCDByModifierCountMixin";
};

// Line 3081: range 00000000100C541E-00000000100C55BA
int32_t __cdecl data::ModifySkillCDByModifierCountMixin::getHashNum(
        const data::ModifySkillCDByModifierCountMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifySkillCDByModifierCountMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifySkillCDByModifierCountMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3097: range 000000001124AC22-000000001124AC63
void __cdecl data::ModifySkillCDByModifierCountMixinFactory::ModifySkillCDByModifierCountMixinFactory(
        data::ModifySkillCDByModifierCountMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifySkillCDByModifierCountMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifySkillCDByModifierCountMixinFactory = v2;
};

// Line 3105: range 000000001124AF6C-000000001124B072
void __cdecl data::ReviveElemEnergyMixin::ReviveElemEnergyMixin(data::ReviveElemEnergyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Both_0;
  data::DynamicFloat::DynamicFloat(&this->period);
  data::DynamicFloat::DynamicFloat(&this->base_energy);
  data::DynamicFloat::DynamicFloat(&this->ratio, 1.0);
};

// Line 3105: range 000000001124B4C2-000000001124B62D
void __cdecl data::ReviveElemEnergyMixin::ReviveElemEnergyMixin(
        data::ReviveElemEnergyMixin *const this,
        const data::ReviveElemEnergyMixin *a2)
{
  int (**v2)(...); // rdx
  data::AvatarStageType type; // ecx
  char v4; // al
  const data::ReviveElemEnergyMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  data::DynamicFloat::DynamicFloat(&this->period, &v5->period);
  data::DynamicFloat::DynamicFloat(&this->base_energy, &v5->base_energy);
  data::DynamicFloat::DynamicFloat(&this->ratio, &v5->ratio);
};

// Line 3115: range 00000000113013EC-0000000011301469
void __cdecl data::ReviveElemEnergyMixin::~ReviveElemEnergyMixin(data::ReviveElemEnergyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->ratio);
  data::DynamicFloat::~DynamicFloat(&this->base_energy);
  data::DynamicFloat::~DynamicFloat(&this->period);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3115: range 000000001130146A-0000000011301494
void __cdecl data::ReviveElemEnergyMixin::~ReviveElemEnergyMixin(data::ReviveElemEnergyMixin *const this)
{
  data::ReviveElemEnergyMixin::~ReviveElemEnergyMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 3120: range 00000000100C55BC-00000000100C55CC
const char *__cdecl data::ReviveElemEnergyMixin::getTypeName(const data::ReviveElemEnergyMixin *const this)
{
  return "ReviveElemEnergyMixin";
};

// Line 3121: range 00000000100C55CE-00000000100C576A
int32_t __cdecl data::ReviveElemEnergyMixin::getHashNum(const data::ReviveElemEnergyMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReviveElemEnergyMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReviveElemEnergyMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3137: range 000000001124B916-000000001124B957
void __cdecl data::ReviveElemEnergyMixinFactory::ReviveElemEnergyMixinFactory(
        data::ReviveElemEnergyMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReviveElemEnergyMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReviveElemEnergyMixinFactory = v2;
};

// Line 3160: range 000000001124BDC0-000000001124BEA3
void __cdecl data::RejectAttackMixin::RejectAttackMixin(data::RejectAttackMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_tag);
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->limit_time, v1);
  }
  this->limit_time = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->type, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->type = RejectAll;
};

// Line 3160: range 000000001124C2BE-000000001124C451
void __cdecl data::RejectAttackMixin::RejectAttackMixin(
        data::RejectAttackMixin *const this,
        const data::RejectAttackMixin *a2)
{
  int (**v2)(...); // rdx
  float limit_time; // xmm0_4
  __int64 v4; // rsi
  data::RejectEventType type; // ecx
  char v6; // dl

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_tag, &a2->attack_tag);
  if ( *(_BYTE *)(((unsigned __int64)&a2->limit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->limit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->limit_time);
  }
  limit_time = a2->limit_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->limit_time, &a2->attack_tag);
  }
  this->limit_time = limit_time;
  v4 = (((_BYTE)a2 + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v6 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v6 != 0 && (char)((((_BYTE)this + 68) & 7) + 3) >= v6 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store4(&this->type, v4);
  }
  this->type = type;
};

// Line 3169: range 0000000011301362-00000000113013BF
void __cdecl data::RejectAttackMixin::~RejectAttackMixin(data::RejectAttackMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attack_tag);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3169: range 00000000113013C0-00000000113013EA
void __cdecl data::RejectAttackMixin::~RejectAttackMixin(data::RejectAttackMixin *const this)
{
  data::RejectAttackMixin::~RejectAttackMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 3174: range 00000000100C576C-00000000100C577C
const char *__cdecl data::RejectAttackMixin::getTypeName(const data::RejectAttackMixin *const this)
{
  return "RejectAttackMixin";
};

// Line 3175: range 00000000100C577E-00000000100C591A
int32_t __cdecl data::RejectAttackMixin::getHashNum(const data::RejectAttackMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RejectAttackMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RejectAttackMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3191: range 000000001124C73A-000000001124C77B
void __cdecl data::RejectAttackMixinFactory::RejectAttackMixinFactory(data::RejectAttackMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RejectAttackMixinFactory = v2;
};

// Line 3199: range 000000001124CA84-000000001124CBA2
void __cdecl data::RejectAttackMixinV2::RejectAttackMixinV2(data::RejectAttackMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->limit_time, v1);
  }
  this->limit_time = 0.0;
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->type, v3);
  }
  this->type = RejectAll;
  if ( *(char *)(((unsigned __int64)&this->is_white_list >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_white_list, v3, &this->is_white_list);
  this->is_white_list = 0;
};

// Line 3199: range 000000001124CFBE-000000001124D1C7
void __cdecl data::RejectAttackMixinV2::RejectAttackMixinV2(
        data::RejectAttackMixinV2 *const this,
        const data::RejectAttackMixinV2 *a2)
{
  int (**v2)(...); // rdx
  float limit_time; // xmm0_4
  __int64 v4; // rsi
  data::RejectEventType type; // ecx
  char v6; // dl
  bool is_white_list; // cl
  char v8; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->attack_tags, &a2->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&a2->limit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->limit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->limit_time);
  }
  limit_time = a2->limit_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->limit_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->limit_time, &a2->attack_tags);
  }
  this->limit_time = limit_time;
  v4 = (((_BYTE)a2 + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v6 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v6 != 0;
  if ( v6 != 0 && (char)((((_BYTE)this + 60) & 7) + 3) >= v6 )
    __asan_report_store4(&this->type, v4);
  this->type = type;
  if ( *(char *)(((unsigned __int64)&a2->is_white_list >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_white_list, v4, &a2->is_white_list);
  is_white_list = a2->is_white_list;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_white_list >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(v4) = v8 != 0;
    __asan_report_store1(&this->is_white_list, v4, &this->is_white_list);
  }
  this->is_white_list = is_white_list;
};

// Line 3209: range 0000000011301336-0000000011301360
void __cdecl data::RejectAttackMixinV2::~RejectAttackMixinV2(data::RejectAttackMixinV2 *const this)
{
  data::RejectAttackMixinV2::~RejectAttackMixinV2(this);
  operator delete(this, 0x48uLL);
};

// Line 3209: range 00000000113012D8-0000000011301335
void __cdecl data::RejectAttackMixinV2::~RejectAttackMixinV2(data::RejectAttackMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->attack_tags);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3214: range 00000000100C591C-00000000100C592C
const char *__cdecl data::RejectAttackMixinV2::getTypeName(const data::RejectAttackMixinV2 *const this)
{
  return "RejectAttackMixinV2";
};

// Line 3215: range 00000000100C592E-00000000100C5ACA
int32_t __cdecl data::RejectAttackMixinV2::getHashNum(const data::RejectAttackMixinV2 *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RejectAttackMixinV2::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RejectAttackMixinV2",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3231: range 000000001124D4B0-000000001124D4F1
void __cdecl data::RejectAttackMixinV2Factory::RejectAttackMixinV2Factory(data::RejectAttackMixinV2Factory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RejectAttackMixinV2Factory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RejectAttackMixinV2Factory = v2;
};

// Line 3254: range 000000001124D95A-000000001124DBBD
void __cdecl data::AttackCostElementMixin::AttackCostElementMixin(data::AttackCostElementMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttackCostElementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->strike_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->strike_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->strike_type, v1);
  }
  this->strike_type = Default_0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->element_type, v3);
  }
  this->element_type = None_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attack_type, v3);
  }
  this->attack_type = None_2;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->strike_cost_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->strike_cost_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->strike_cost_ratio, v4);
  }
  this->strike_cost_ratio = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_cost_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attack_cost_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attack_cost_ratio, v4);
  }
  this->attack_cost_ratio = 0.0;
  v5 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_cost_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->element_cost_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->element_cost_ratio, v5);
  }
  this->element_cost_ratio = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->cost_element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cost_element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cost_element_type, v5);
  }
  this->cost_element_type = None_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->cost_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cost_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->cost_type, (((_BYTE)this + 60) & 7u) + 3);
  }
  this->cost_type = Max_2;
};

// Line 3254: range 000000001124DFC2-000000001124E40B
void __cdecl data::AttackCostElementMixin::AttackCostElementMixin(
        data::AttackCostElementMixin *const this,
        const data::AttackCostElementMixin *a2)
{
  int (**v2)(...); // rdx
  data::StrikeType strike_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::ElementType element_type; // ecx
  char v7; // dl
  data::AttackType attack_type; // ecx
  char v9; // al
  float strike_cost_ratio; // xmm0_4
  __int64 v11; // rsi
  float attack_cost_ratio; // xmm0_4
  float element_cost_ratio; // xmm0_4
  __int64 v14; // rsi
  data::ElementType cost_element_type; // ecx
  char v16; // al
  __int64 v17; // rsi
  data::AttackCostType cost_type; // ecx
  char v19; // dl
  const data::AttackCostElementMixin *v20; // [rsp+0h] [rbp-10h]

  v20 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttackCostElementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->strike_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->strike_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->strike_type);
  }
  strike_type = a2->strike_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->strike_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->strike_type, a2);
  }
  this->strike_type = strike_type;
  v5 = (((_BYTE)v20 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v20->element_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->element_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->element_type);
  }
  element_type = v20->element_type;
  v7 = *(_BYTE *)(((unsigned __int64)&this->element_type >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->element_type, v5);
  }
  this->element_type = element_type;
  if ( *(_BYTE *)(((unsigned __int64)&v20->attack_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v20->attack_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v20->attack_type);
  }
  attack_type = v20->attack_type;
  v9 = *(_BYTE *)(((unsigned __int64)&this->attack_type >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->attack_type, v5);
  }
  this->attack_type = attack_type;
  if ( *(_BYTE *)(((unsigned __int64)&v20->strike_cost_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->strike_cost_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->strike_cost_ratio);
  }
  strike_cost_ratio = v20->strike_cost_ratio;
  v11 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->strike_cost_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->strike_cost_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->strike_cost_ratio, v11);
  }
  this->strike_cost_ratio = strike_cost_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&v20->attack_cost_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v20->attack_cost_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v20->attack_cost_ratio);
  }
  attack_cost_ratio = v20->attack_cost_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->attack_cost_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attack_cost_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attack_cost_ratio, v11);
  }
  this->attack_cost_ratio = attack_cost_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&v20->element_cost_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->element_cost_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->element_cost_ratio);
  }
  element_cost_ratio = v20->element_cost_ratio;
  v14 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->element_cost_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->element_cost_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->element_cost_ratio, v14);
  }
  this->element_cost_ratio = element_cost_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&v20->cost_element_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v20->cost_element_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v20->cost_element_type);
  }
  cost_element_type = v20->cost_element_type;
  v16 = *(_BYTE *)(((unsigned __int64)&this->cost_element_type >> 3) + 0x7FFF8000);
  if ( v16 != 0 && v16 <= 3 )
  {
    LOBYTE(v14) = v16 != 0;
    __asan_report_store4(&this->cost_element_type, v14);
  }
  this->cost_element_type = cost_element_type;
  v17 = (((_BYTE)v20 + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v20->cost_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v20 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v20->cost_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v20->cost_type);
  }
  cost_type = v20->cost_type;
  v19 = *(_BYTE *)(((unsigned __int64)&this->cost_type >> 3) + 0x7FFF8000);
  if ( v19 != 0 && (char)((((_BYTE)this + 60) & 7) + 3) >= v19 )
  {
    LOBYTE(v17) = v19 != 0;
    __asan_report_store4(&this->cost_type, v17);
  }
  this->cost_type = cost_type;
};

// Line 3268: range 000000001130125E-00000000113012AB
void __cdecl data::AttackCostElementMixin::~AttackCostElementMixin(data::AttackCostElementMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackCostElementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3268: range 00000000113012AC-00000000113012D6
void __cdecl data::AttackCostElementMixin::~AttackCostElementMixin(data::AttackCostElementMixin *const this)
{
  data::AttackCostElementMixin::~AttackCostElementMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 3273: range 00000000100C5ACC-00000000100C5ADC
const char *__cdecl data::AttackCostElementMixin::getTypeName(const data::AttackCostElementMixin *const this)
{
  return "AttackCostElementMixin";
};

// Line 3274: range 00000000100C5ADE-00000000100C5C7A
int32_t __cdecl data::AttackCostElementMixin::getHashNum(const data::AttackCostElementMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttackCostElementMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttackCostElementMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3290: range 000000001124E654-000000001124E695
void __cdecl data::AttackCostElementMixinFactory::AttackCostElementMixinFactory(
        data::AttackCostElementMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackCostElementMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttackCostElementMixinFactory = v2;
};

// Line 3298: range 000000001124E99E-000000001124EAAB
void __cdecl data::ApplyInertiaVelocityMixin::ApplyInertiaVelocityMixin(data::ApplyInertiaVelocityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ApplyInertiaVelocityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->damping >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->damping >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->damping, v1);
  }
  this->damping = 0.0;
  v3 = ((_BYTE)this + 36) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->use_xz >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->use_xz >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->use_xz, v3, v4);
  this->use_xz = 1;
  v5 = ((_BYTE)this + 37) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->use_y >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->use_y >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->use_y, v5, v6);
  this->use_y = 1;
};

// Line 3298: range 000000001124EE80-000000001124F050
void __cdecl data::ApplyInertiaVelocityMixin::ApplyInertiaVelocityMixin(
        data::ApplyInertiaVelocityMixin *const this,
        const data::ApplyInertiaVelocityMixin *a2)
{
  int (**v2)(...); // rdx
  float damping; // xmm0_4
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool use_xz; // cl
  char v7; // dl
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool use_y; // cl
  char v12; // dl
  __int64 v13; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ApplyInertiaVelocityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->damping >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->damping >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->damping);
  }
  damping = a2->damping;
  if ( *(_BYTE *)(((unsigned __int64)&this->damping >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->damping >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->damping, a2);
  }
  this->damping = damping;
  v4 = ((_BYTE)a2 + 36) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&a2->use_xz >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&a2->use_xz >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&a2->use_xz, v4, v5);
  use_xz = a2->use_xz;
  v7 = *(_BYTE *)(((unsigned __int64)&this->use_xz >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->use_xz, v4, v8);
  this->use_xz = use_xz;
  v9 = ((_BYTE)a2 + 37) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->use_y >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->use_y >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->use_y, v9, v10);
  use_y = a2->use_y;
  v12 = *(_BYTE *)(((unsigned __int64)&this->use_y >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 37) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->use_y, v9, v13);
  this->use_y = use_y;
};

// Line 3307: range 0000000011301232-000000001130125C
void __cdecl data::ApplyInertiaVelocityMixin::~ApplyInertiaVelocityMixin(data::ApplyInertiaVelocityMixin *const this)
{
  data::ApplyInertiaVelocityMixin::~ApplyInertiaVelocityMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 3307: range 00000000113011E4-0000000011301231
void __cdecl data::ApplyInertiaVelocityMixin::~ApplyInertiaVelocityMixin(data::ApplyInertiaVelocityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyInertiaVelocityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3312: range 00000000100C5C7C-00000000100C5C8C
const char *__cdecl data::ApplyInertiaVelocityMixin::getTypeName(const data::ApplyInertiaVelocityMixin *const this)
{
  return "ApplyInertiaVelocityMixin";
};

// Line 3313: range 00000000100C5C8E-00000000100C5E2A
int32_t __cdecl data::ApplyInertiaVelocityMixin::getHashNum(const data::ApplyInertiaVelocityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ApplyInertiaVelocityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ApplyInertiaVelocityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3329: range 000000001124F29A-000000001124F2DB
void __cdecl data::ApplyInertiaVelocityMixinFactory::ApplyInertiaVelocityMixinFactory(
        data::ApplyInertiaVelocityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyInertiaVelocityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ApplyInertiaVelocityMixinFactory = v2;
};

// Line 3337: range 000000001124F5E4-000000001124F651
void __cdecl data::ChangePropTypeValueMixin::ChangePropTypeValueMixin(data::ChangePropTypeValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangePropTypeValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->prop_type);
  data::DynamicFloat::DynamicFloat(&this->energy_cost_delta);
};

// Line 3337: range 000000001124FA06-000000001124FACC
void __cdecl data::ChangePropTypeValueMixin::ChangePropTypeValueMixin(
        data::ChangePropTypeValueMixin *const this,
        const data::ChangePropTypeValueMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangePropTypeValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->prop_type, &a2->prop_type);
  data::DynamicFloat::DynamicFloat(&this->energy_cost_delta, &a2->energy_cost_delta);
};

// Line 3345: range 00000000113011B8-00000000113011E2
void __cdecl data::ChangePropTypeValueMixin::~ChangePropTypeValueMixin(data::ChangePropTypeValueMixin *const this)
{
  data::ChangePropTypeValueMixin::~ChangePropTypeValueMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 3345: range 000000001130114A-00000000113011B7
void __cdecl data::ChangePropTypeValueMixin::~ChangePropTypeValueMixin(data::ChangePropTypeValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangePropTypeValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->energy_cost_delta);
  std::string::~string(&this->prop_type);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3350: range 00000000100C5E2C-00000000100C5E3C
const char *__cdecl data::ChangePropTypeValueMixin::getTypeName(const data::ChangePropTypeValueMixin *const this)
{
  return "ChangePropTypeValueMixin";
};

// Line 3351: range 00000000100C5E3E-00000000100C5FDA
int32_t __cdecl data::ChangePropTypeValueMixin::getHashNum(const data::ChangePropTypeValueMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangePropTypeValueMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangePropTypeValueMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3367: range 000000001124FDB6-000000001124FDF7
void __cdecl data::ChangePropTypeValueMixinFactory::ChangePropTypeValueMixinFactory(
        data::ChangePropTypeValueMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangePropTypeValueMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangePropTypeValueMixinFactory = v2;
};

// Line 3375: range 0000000011250100-000000001125017D
void __cdecl data::ExtendLifetimeByPickedGadgetMixin::ExtendLifetimeByPickedGadgetMixin(
        data::ExtendLifetimeByPickedGadgetMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ExtendLifetimeByPickedGadgetMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->picked_config_ids);
  data::DynamicFloat::DynamicFloat(&this->extend_life_time);
  data::DynamicFloat::DynamicFloat(&this->max_extend_life_time);
};

// Line 3375: range 0000000011250532-0000000011250628
void __cdecl data::ExtendLifetimeByPickedGadgetMixin::ExtendLifetimeByPickedGadgetMixin(
        data::ExtendLifetimeByPickedGadgetMixin *const this,
        const data::ExtendLifetimeByPickedGadgetMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ExtendLifetimeByPickedGadgetMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->picked_config_ids, &a2->picked_config_ids);
  data::DynamicFloat::DynamicFloat(&this->extend_life_time, &a2->extend_life_time);
  data::DynamicFloat::DynamicFloat(&this->max_extend_life_time, &a2->max_extend_life_time);
};

// Line 3384: range 00000000113010A0-000000001130111D
void __cdecl data::ExtendLifetimeByPickedGadgetMixin::~ExtendLifetimeByPickedGadgetMixin(
        data::ExtendLifetimeByPickedGadgetMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExtendLifetimeByPickedGadgetMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->max_extend_life_time);
  data::DynamicFloat::~DynamicFloat(&this->extend_life_time);
  std::vector<unsigned int>::~vector(&this->picked_config_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3384: range 000000001130111E-0000000011301148
void __cdecl data::ExtendLifetimeByPickedGadgetMixin::~ExtendLifetimeByPickedGadgetMixin(
        data::ExtendLifetimeByPickedGadgetMixin *const this)
{
  data::ExtendLifetimeByPickedGadgetMixin::~ExtendLifetimeByPickedGadgetMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 3389: range 00000000100C5FDC-00000000100C5FEC
const char *__cdecl data::ExtendLifetimeByPickedGadgetMixin::getTypeName(
        const data::ExtendLifetimeByPickedGadgetMixin *const this)
{
  return "ExtendLifetimeByPickedGadgetMixin";
};

// Line 3390: range 00000000100C5FEE-00000000100C618A
int32_t __cdecl data::ExtendLifetimeByPickedGadgetMixin::getHashNum(
        const data::ExtendLifetimeByPickedGadgetMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ExtendLifetimeByPickedGadgetMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ExtendLifetimeByPickedGadgetMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3406: range 0000000011250912-0000000011250953
void __cdecl data::ExtendLifetimeByPickedGadgetMixinFactory::ExtendLifetimeByPickedGadgetMixinFactory(
        data::ExtendLifetimeByPickedGadgetMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExtendLifetimeByPickedGadgetMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ExtendLifetimeByPickedGadgetMixinFactory = v2;
};

// Line 3419: range 0000000011250C5C-0000000011250D74
void __cdecl data::DoActionByEnergyChangeMixin::DoActionByEnergyChangeMixin(
        data::DoActionByEnergyChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByEnergyChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Both_0;
  std::vector<data::ElementType>::vector(&this->element_types);
  if ( *(char *)(((unsigned __int64)&this->do_when_energy_max >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->do_when_energy_max, v1, &this->do_when_energy_max);
  this->do_when_energy_max = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_gain_energy_by_ball);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_gain_energy_by_other);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_gain_energy_by_all);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_gain_energy_max);
};

// Line 3432: range 0000000011300FD4-0000000011301073
void __cdecl data::DoActionByEnergyChangeMixin::~DoActionByEnergyChangeMixin(
        data::DoActionByEnergyChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByEnergyChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_gain_energy_max);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_gain_energy_by_all);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_gain_energy_by_other);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_gain_energy_by_ball);
  std::vector<data::ElementType>::~vector(&this->element_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3432: range 0000000011301074-000000001130109E
void __cdecl data::DoActionByEnergyChangeMixin::~DoActionByEnergyChangeMixin(
        data::DoActionByEnergyChangeMixin *const this)
{
  data::DoActionByEnergyChangeMixin::~DoActionByEnergyChangeMixin(this);
  operator delete(this, 0xA8uLL);
};

// Line 3437: range 00000000100C618C-00000000100C619C
const char *__cdecl data::DoActionByEnergyChangeMixin::getTypeName(const data::DoActionByEnergyChangeMixin *const this)
{
  return "DoActionByEnergyChangeMixin";
};

// Line 3438: range 00000000100C619E-00000000100C633A
int32_t __cdecl data::DoActionByEnergyChangeMixin::getHashNum(const data::DoActionByEnergyChangeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByEnergyChangeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByEnergyChangeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3454: range 000000001125177A-00000000112517BB
void __cdecl data::DoActionByEnergyChangeMixinFactory::DoActionByEnergyChangeMixinFactory(
        data::DoActionByEnergyChangeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByEnergyChangeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByEnergyChangeMixinFactory = v2;
};

// Line 3462: range 0000000011251AC4-0000000011251BEF
void __cdecl data::DoReviveMixin::DoReviveMixin(data::DoReviveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoReviveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Both_0;
  v3 = ((_BYTE)this + 36) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->ignore_die_abyss >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->ignore_die_abyss >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->ignore_die_abyss, v3, v4);
  this->ignore_die_abyss = 1;
  v5 = ((_BYTE)this + 37) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->ignore_die_drawn >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->ignore_die_drawn >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->ignore_die_drawn, v5, v6);
  this->ignore_die_drawn = 1;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_kill_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_revive_actions);
};

// Line 3462: range 0000000011251FAA-00000000112521E5
void __cdecl data::DoReviveMixin::DoReviveMixin(data::DoReviveMixin *const this, const data::DoReviveMixin *a2)
{
  int (**v2)(...); // rdx
  data::AvatarStageType type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool ignore_die_abyss; // cl
  char v8; // dl
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool ignore_die_drawn; // cl
  char v13; // dl
  __int64 v14; // rdx
  const data::DoReviveMixin *v15; // [rsp+0h] [rbp-20h]

  v15 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoReviveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  v5 = ((_BYTE)v15 + 36) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v15->ignore_die_abyss >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v15->ignore_die_abyss >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v15->ignore_die_abyss, v5, v6);
  ignore_die_abyss = v15->ignore_die_abyss;
  v8 = *(_BYTE *)(((unsigned __int64)&this->ignore_die_abyss >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->ignore_die_abyss, v5, v9);
  this->ignore_die_abyss = ignore_die_abyss;
  v10 = ((_BYTE)v15 + 37) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v15->ignore_die_drawn >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v15->ignore_die_drawn >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v15->ignore_die_drawn, v10, v11);
  ignore_die_drawn = v15->ignore_die_drawn;
  v13 = *(_BYTE *)(((unsigned __int64)&this->ignore_die_drawn >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this + 37) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->ignore_die_drawn, v10, v14);
  this->ignore_die_drawn = ignore_die_drawn;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_kill_actions, &v15->on_kill_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_revive_actions, &v15->on_revive_actions);
};

// Line 3473: range 0000000011300FA8-0000000011300FD2
void __cdecl data::DoReviveMixin::~DoReviveMixin(data::DoReviveMixin *const this)
{
  data::DoReviveMixin::~DoReviveMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 3473: range 0000000011300F3A-0000000011300FA7
void __cdecl data::DoReviveMixin::~DoReviveMixin(data::DoReviveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoReviveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_revive_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_kill_actions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3478: range 00000000100C633C-00000000100C634C
const char *__cdecl data::DoReviveMixin::getTypeName(const data::DoReviveMixin *const this)
{
  return "DoReviveMixin";
};

// Line 3479: range 00000000100C634E-00000000100C64EA
int32_t __cdecl data::DoReviveMixin::getHashNum(const data::DoReviveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoReviveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoReviveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3495: range 00000000112524CE-000000001125250F
void __cdecl data::DoReviveMixinFactory::DoReviveMixinFactory(data::DoReviveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoReviveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoReviveMixinFactory = v2;
};

// Line 3503: range 0000000011252818-00000000112529D6
void __cdecl data::IceFloorMixin::IceFloorMixin(data::IceFloorMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::IceFloorMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->width >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->width >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->width, v1);
  }
  this->width = 0.0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->height, v3);
  }
  this->height = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->move_distance, v3);
  }
  this->move_distance = 2.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_interval, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->min_interval = 2.0;
  if ( *(_WORD *)(((unsigned __int64)&this->do_action >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigAbilityAction>();
};

// Line 3503: range 0000000011252E72-00000000112530E5
void __cdecl data::IceFloorMixin::IceFloorMixin(data::IceFloorMixin *const this, const data::IceFloorMixin *a2)
{
  int (**v2)(...); // rdx
  float width; // xmm0_4
  float height; // xmm0_4
  __int64 v5; // rsi
  float move_distance; // xmm0_4
  float min_interval; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::IceFloorMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->width >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->width >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->width);
  }
  width = a2->width;
  if ( *(_BYTE *)(((unsigned __int64)&this->width >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->width >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->width, a2);
  }
  this->width = width;
  if ( *(_BYTE *)(((unsigned __int64)&a2->height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->height >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->height);
  }
  height = a2->height;
  v5 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->height >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->height, v5);
  }
  this->height = height;
  if ( *(_BYTE *)(((unsigned __int64)&a2->move_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->move_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->move_distance);
  }
  move_distance = a2->move_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->move_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->move_distance, v5);
  }
  this->move_distance = move_distance;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_interval);
  }
  min_interval = a2->min_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_interval, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->min_interval = min_interval;
  std::shared_ptr<data::ConfigAbilityAction>::shared_ptr(&this->do_action, &a2->do_action);
};

// Line 3514: range 0000000011300F0E-0000000011300F38
void __cdecl data::IceFloorMixin::~IceFloorMixin(data::IceFloorMixin *const this)
{
  data::IceFloorMixin::~IceFloorMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 3514: range 0000000011300EB0-0000000011300F0D
void __cdecl data::IceFloorMixin::~IceFloorMixin(data::IceFloorMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IceFloorMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr(&this->do_action);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3519: range 00000000100C64EC-00000000100C64FC
const char *__cdecl data::IceFloorMixin::getTypeName(const data::IceFloorMixin *const this)
{
  return "IceFloorMixin";
};

// Line 3520: range 00000000100C64FE-00000000100C669A
int32_t __cdecl data::IceFloorMixin::getHashNum(const data::IceFloorMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::IceFloorMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "IceFloorMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3536: range 000000001125332E-000000001125336F
void __cdecl data::IceFloorMixinFactory::IceFloorMixinFactory(data::IceFloorMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IceFloorMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_IceFloorMixinFactory = v2;
};

// Line 3544: range 0000000011253678-0000000011253869
void __cdecl data::HitLevelGaugeMixin::HitLevelGaugeMixin(data::HitLevelGaugeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::HitLevelGaugeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->from_hit_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->from_hit_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->from_hit_level, v1);
  }
  this->from_hit_level = Shake;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->to_hit_level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->to_hit_level >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->to_hit_level, v3);
  }
  this->to_hit_level = Light;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_charge >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_charge >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_charge, v3);
  }
  this->max_charge = 100.0;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_charge_delta >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_charge_delta >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_charge_delta, v4);
  }
  this->min_charge_delta = 25.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_charge_delta >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_charge_delta >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_charge_delta, v4);
  }
  this->max_charge_delta = 25.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->fade_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->fade_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->fade_time, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->fade_time = 10.0;
};

// Line 3544: range 0000000011253C5E-0000000011253FB0
void __cdecl data::HitLevelGaugeMixin::HitLevelGaugeMixin(
        data::HitLevelGaugeMixin *const this,
        const data::HitLevelGaugeMixin *a2)
{
  int (**v2)(...); // rdx
  data::HitLevel from_hit_level; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::HitLevel to_hit_level; // ecx
  char v7; // dl
  float max_charge; // xmm0_4
  float min_charge_delta; // xmm0_4
  __int64 v10; // rsi
  float max_charge_delta; // xmm0_4
  float fade_time; // xmm0_4
  const data::HitLevelGaugeMixin *v13; // [rsp+0h] [rbp-10h]

  v13 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HitLevelGaugeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->from_hit_level >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->from_hit_level >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->from_hit_level);
  }
  from_hit_level = a2->from_hit_level;
  v4 = *(_BYTE *)(((unsigned __int64)&this->from_hit_level >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->from_hit_level, a2);
  }
  this->from_hit_level = from_hit_level;
  v5 = (((_BYTE)v13 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v13->to_hit_level >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v13 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v13->to_hit_level >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v13->to_hit_level);
  }
  to_hit_level = v13->to_hit_level;
  v7 = *(_BYTE *)(((unsigned __int64)&this->to_hit_level >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v7 != 0;
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
    __asan_report_store4(&this->to_hit_level, v5);
  this->to_hit_level = to_hit_level;
  if ( *(_BYTE *)(((unsigned __int64)&v13->max_charge >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v13->max_charge >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v13->max_charge);
  }
  max_charge = v13->max_charge;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_charge >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_charge >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_charge, v5);
  }
  this->max_charge = max_charge;
  if ( *(_BYTE *)(((unsigned __int64)&v13->min_charge_delta >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v13 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v13->min_charge_delta >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v13->min_charge_delta);
  }
  min_charge_delta = v13->min_charge_delta;
  v10 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_charge_delta >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_charge_delta >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_charge_delta, v10);
  }
  this->min_charge_delta = min_charge_delta;
  if ( *(_BYTE *)(((unsigned __int64)&v13->max_charge_delta >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v13->max_charge_delta >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v13->max_charge_delta);
  }
  max_charge_delta = v13->max_charge_delta;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_charge_delta >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_charge_delta >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_charge_delta, v10);
  }
  this->max_charge_delta = max_charge_delta;
  if ( *(_BYTE *)(((unsigned __int64)&v13->fade_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v13 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v13->fade_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v13->fade_time);
  }
  fade_time = v13->fade_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->fade_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->fade_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->fade_time, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->fade_time = fade_time;
};

// Line 3556: range 0000000011300E36-0000000011300E83
void __cdecl data::HitLevelGaugeMixin::~HitLevelGaugeMixin(data::HitLevelGaugeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HitLevelGaugeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3556: range 0000000011300E84-0000000011300EAE
void __cdecl data::HitLevelGaugeMixin::~HitLevelGaugeMixin(data::HitLevelGaugeMixin *const this)
{
  data::HitLevelGaugeMixin::~HitLevelGaugeMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 3561: range 00000000100C669C-00000000100C66AC
const char *__cdecl data::HitLevelGaugeMixin::getTypeName(const data::HitLevelGaugeMixin *const this)
{
  return "HitLevelGaugeMixin";
};

// Line 3562: range 00000000100C66AE-00000000100C684A
int32_t __cdecl data::HitLevelGaugeMixin::getHashNum(const data::HitLevelGaugeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HitLevelGaugeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HitLevelGaugeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3578: range 00000000112541FA-000000001125423B
void __cdecl data::HitLevelGaugeMixinFactory::HitLevelGaugeMixinFactory(data::HitLevelGaugeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HitLevelGaugeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HitLevelGaugeMixinFactory = v2;
};

// Line 3586: range 0000000011254544-000000001125462D
void __cdecl data::RecycleModifierMixin::RecycleModifierMixin(data::RecycleModifierMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::RecycleModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cd, v1);
  }
  this->cd = 10.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->initial_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->initial_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->initial_cd, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->initial_cd = 0.0;
};

// Line 3586: range 0000000011254A48-0000000011254BDE
void __cdecl data::RecycleModifierMixin::RecycleModifierMixin(
        data::RecycleModifierMixin *const this,
        const data::RecycleModifierMixin *a2)
{
  int (**v2)(...); // rdx
  float cd; // xmm0_4
  float initial_cd; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RecycleModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->cd);
  }
  cd = a2->cd;
  if ( *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cd, &a2->modifier_name);
  }
  this->cd = cd;
  if ( *(_BYTE *)(((unsigned __int64)&a2->initial_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->initial_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->initial_cd);
  }
  initial_cd = a2->initial_cd;
  if ( *(_BYTE *)(((unsigned __int64)&this->initial_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->initial_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->initial_cd, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->initial_cd = initial_cd;
};

// Line 3595: range 0000000011300DAC-0000000011300E09
void __cdecl data::RecycleModifierMixin::~RecycleModifierMixin(data::RecycleModifierMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RecycleModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3595: range 0000000011300E0A-0000000011300E34
void __cdecl data::RecycleModifierMixin::~RecycleModifierMixin(data::RecycleModifierMixin *const this)
{
  data::RecycleModifierMixin::~RecycleModifierMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 3600: range 00000000100C684C-00000000100C685C
const char *__cdecl data::RecycleModifierMixin::getTypeName(const data::RecycleModifierMixin *const this)
{
  return "RecycleModifierMixin";
};

// Line 3601: range 00000000100C685E-00000000100C69FA
int32_t __cdecl data::RecycleModifierMixin::getHashNum(const data::RecycleModifierMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RecycleModifierMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RecycleModifierMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3617: range 0000000011254EC8-0000000011254F09
void __cdecl data::RecycleModifierMixinFactory::RecycleModifierMixinFactory(
        data::RecycleModifierMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RecycleModifierMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RecycleModifierMixinFactory = v2;
};

// Line 3625: range 0000000011255212-000000001125526F
void __cdecl data::CurLocalAvatarMixin::CurLocalAvatarMixin(data::CurLocalAvatarMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 3625: range 0000000011255674-000000001125570A
void __cdecl data::CurLocalAvatarMixin::CurLocalAvatarMixin(
        data::CurLocalAvatarMixin *const this,
        const data::CurLocalAvatarMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 3632: range 0000000011300D80-0000000011300DAA
void __cdecl data::CurLocalAvatarMixin::~CurLocalAvatarMixin(data::CurLocalAvatarMixin *const this)
{
  data::CurLocalAvatarMixin::~CurLocalAvatarMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 3632: range 0000000011300D22-0000000011300D7F
void __cdecl data::CurLocalAvatarMixin::~CurLocalAvatarMixin(data::CurLocalAvatarMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3637: range 00000000100C69FC-00000000100C6A0C
const char *__cdecl data::CurLocalAvatarMixin::getTypeName(const data::CurLocalAvatarMixin *const this)
{
  return "CurLocalAvatarMixin";
};

// Line 3638: range 00000000100C6A0E-00000000100C6BAA
int32_t __cdecl data::CurLocalAvatarMixin::getHashNum(const data::CurLocalAvatarMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CurLocalAvatarMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CurLocalAvatarMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3654: range 00000000112559F4-0000000011255A35
void __cdecl data::CurLocalAvatarMixinFactory::CurLocalAvatarMixinFactory(data::CurLocalAvatarMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CurLocalAvatarMixinFactory = v2;
};

// Line 3662: range 0000000011255D3E-0000000011255DD6
void __cdecl data::LocalAvatarsMixin::LocalAvatarsMixin(data::LocalAvatarsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::LocalAvatarsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
  if ( *(char *)(((unsigned __int64)&this->avatar_appear_attach_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->avatar_appear_attach_modifier, v1, &this->avatar_appear_attach_modifier);
  this->avatar_appear_attach_modifier = 0;
};

// Line 3662: range 00000000112561F2-00000000112562FE
void __cdecl data::LocalAvatarsMixin::LocalAvatarsMixin(
        data::LocalAvatarsMixin *const this,
        const data::LocalAvatarsMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  bool avatar_appear_attach_modifier; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::LocalAvatarsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(char *)(((unsigned __int64)&a2->avatar_appear_attach_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->avatar_appear_attach_modifier, p_modifier_name, &a2->avatar_appear_attach_modifier);
  avatar_appear_attach_modifier = a2->avatar_appear_attach_modifier;
  v5 = *(_BYTE *)(((unsigned __int64)&this->avatar_appear_attach_modifier >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store1(&this->avatar_appear_attach_modifier, p_modifier_name, &this->avatar_appear_attach_modifier);
  }
  this->avatar_appear_attach_modifier = avatar_appear_attach_modifier;
};

// Line 3670: range 0000000011300C98-0000000011300CF5
void __cdecl data::LocalAvatarsMixin::~LocalAvatarsMixin(data::LocalAvatarsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LocalAvatarsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3670: range 0000000011300CF6-0000000011300D20
void __cdecl data::LocalAvatarsMixin::~LocalAvatarsMixin(data::LocalAvatarsMixin *const this)
{
  data::LocalAvatarsMixin::~LocalAvatarsMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 3675: range 00000000100C6BAC-00000000100C6BBC
const char *__cdecl data::LocalAvatarsMixin::getTypeName(const data::LocalAvatarsMixin *const this)
{
  return "LocalAvatarsMixin";
};

// Line 3676: range 00000000100C6BBE-00000000100C6D5A
int32_t __cdecl data::LocalAvatarsMixin::getHashNum(const data::LocalAvatarsMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::LocalAvatarsMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "LocalAvatarsMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3692: range 00000000112565E8-0000000011256629
void __cdecl data::LocalAvatarsMixinFactory::LocalAvatarsMixinFactory(data::LocalAvatarsMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LocalAvatarsMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_LocalAvatarsMixinFactory = v2;
};

// Line 3700: range 0000000011256932-000000001125698F
void __cdecl data::CurLocalAvatarMixinV2::CurLocalAvatarMixinV2(data::CurLocalAvatarMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 3700: range 0000000011256D94-0000000011256E2A
void __cdecl data::CurLocalAvatarMixinV2::CurLocalAvatarMixinV2(
        data::CurLocalAvatarMixinV2 *const this,
        const data::CurLocalAvatarMixinV2 *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 3707: range 0000000011300C6C-0000000011300C96
void __cdecl data::CurLocalAvatarMixinV2::~CurLocalAvatarMixinV2(data::CurLocalAvatarMixinV2 *const this)
{
  data::CurLocalAvatarMixinV2::~CurLocalAvatarMixinV2(this);
  operator delete(this, 0x40uLL);
};

// Line 3707: range 0000000011300C0E-0000000011300C6B
void __cdecl data::CurLocalAvatarMixinV2::~CurLocalAvatarMixinV2(data::CurLocalAvatarMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3712: range 00000000100C6D5C-00000000100C6D6C
const char *__cdecl data::CurLocalAvatarMixinV2::getTypeName(const data::CurLocalAvatarMixinV2 *const this)
{
  return "CurLocalAvatarMixinV2";
};

// Line 3713: range 00000000100C6D6E-00000000100C6F0A
int32_t __cdecl data::CurLocalAvatarMixinV2::getHashNum(const data::CurLocalAvatarMixinV2 *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CurLocalAvatarMixinV2::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CurLocalAvatarMixinV2",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3729: range 0000000011257114-0000000011257155
void __cdecl data::CurLocalAvatarMixinV2Factory::CurLocalAvatarMixinV2Factory(
        data::CurLocalAvatarMixinV2Factory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CurLocalAvatarMixinV2Factory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CurLocalAvatarMixinV2Factory = v2;
};

// Line 3737: range 000000001125745E-00000000112574F9
void __cdecl data::AttachToDayNightMixin::AttachToDayNightMixin(data::AttachToDayNightMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToDayNightMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->time, v1);
  }
  this->time = Day;
  std::string::basic_string(&this->modifier_name);
};

// Line 3737: range 0000000011257914-0000000011257A1F
void __cdecl data::AttachToDayNightMixin::AttachToDayNightMixin(
        data::AttachToDayNightMixin *const this,
        const data::AttachToDayNightMixin *a2)
{
  int (**v2)(...); // rdx
  data::LevelDayTimeType time; // ecx
  char v4; // al
  const data::AttachToDayNightMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToDayNightMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->time);
  }
  time = a2->time;
  v4 = *(_BYTE *)(((unsigned __int64)&this->time >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->time, a2);
  }
  this->time = time;
  std::string::basic_string(&this->modifier_name, &v5->modifier_name);
};

// Line 3745: range 0000000011300BE2-0000000011300C0C
void __cdecl data::AttachToDayNightMixin::~AttachToDayNightMixin(data::AttachToDayNightMixin *const this)
{
  data::AttachToDayNightMixin::~AttachToDayNightMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 3745: range 0000000011300B84-0000000011300BE1
void __cdecl data::AttachToDayNightMixin::~AttachToDayNightMixin(data::AttachToDayNightMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToDayNightMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3750: range 00000000100C6F0C-00000000100C6F1C
const char *__cdecl data::AttachToDayNightMixin::getTypeName(const data::AttachToDayNightMixin *const this)
{
  return "AttachToDayNightMixin";
};

// Line 3751: range 00000000100C6F1E-00000000100C70BA
int32_t __cdecl data::AttachToDayNightMixin::getHashNum(const data::AttachToDayNightMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToDayNightMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToDayNightMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3767: range 0000000011257D08-0000000011257D49
void __cdecl data::AttachToDayNightMixinFactory::AttachToDayNightMixinFactory(
        data::AttachToDayNightMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToDayNightMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToDayNightMixinFactory = v2;
};

// Line 3790: range 00000000112581B2-000000001125824D
void __cdecl data::DoActionByCreateGadgetMixin::DoActionByCreateGadgetMixin(
        data::DoActionByCreateGadgetMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByCreateGadgetMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = OnlyOriginOwner;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
};

// Line 3790: range 0000000011258652-000000001125875D
void __cdecl data::DoActionByCreateGadgetMixin::DoActionByCreateGadgetMixin(
        data::DoActionByCreateGadgetMixin *const this,
        const data::DoActionByCreateGadgetMixin *a2)
{
  int (**v2)(...); // rdx
  data::CreateGadgetMixinType type; // ecx
  char v4; // al
  const data::DoActionByCreateGadgetMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByCreateGadgetMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &v5->action_queue);
};

// Line 3798: range 0000000011300AFA-0000000011300B57
void __cdecl data::DoActionByCreateGadgetMixin::~DoActionByCreateGadgetMixin(
        data::DoActionByCreateGadgetMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByCreateGadgetMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3798: range 0000000011300B58-0000000011300B82
void __cdecl data::DoActionByCreateGadgetMixin::~DoActionByCreateGadgetMixin(
        data::DoActionByCreateGadgetMixin *const this)
{
  data::DoActionByCreateGadgetMixin::~DoActionByCreateGadgetMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 3803: range 00000000100C70BC-00000000100C70CC
const char *__cdecl data::DoActionByCreateGadgetMixin::getTypeName(const data::DoActionByCreateGadgetMixin *const this)
{
  return "DoActionByCreateGadgetMixin";
};

// Line 3804: range 00000000100C70CE-00000000100C726A
int32_t __cdecl data::DoActionByCreateGadgetMixin::getHashNum(const data::DoActionByCreateGadgetMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByCreateGadgetMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByCreateGadgetMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3820: range 0000000011258A46-0000000011258A87
void __cdecl data::DoActionByCreateGadgetMixinFactory::DoActionByCreateGadgetMixinFactory(
        data::DoActionByCreateGadgetMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByCreateGadgetMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByCreateGadgetMixinFactory = v2;
};

// Line 3828: range 0000000011258D90-0000000011258E89
void __cdecl data::FireworksLauncherMixin::FireworksLauncherMixin(data::FireworksLauncherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::FireworksLauncherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->start_count_down_modifier);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_evt_start_count_down);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_all_bullets_fired);
  std::string::basic_string(&this->gv__fw__bullet_item_id);
  std::string::basic_string(&this->gv__fw__color_h);
  std::string::basic_string(&this->gv__fw__scale);
  std::string::basic_string(&this->gv__fw__angle);
  std::string::basic_string(&this->gv__fw__max_particle_count);
  std::string::basic_string(&this->gv__fw__face_to_camera);
  std::string::basic_string(&this->gv__fw__bullet_life_time);
};

// Line 3828: range 0000000011259244-00000000112594B5
void __cdecl data::FireworksLauncherMixin::FireworksLauncherMixin(
        data::FireworksLauncherMixin *const this,
        const data::FireworksLauncherMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FireworksLauncherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->start_count_down_modifier, &a2->start_count_down_modifier);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_evt_start_count_down,
    &a2->on_evt_start_count_down);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_all_bullets_fired,
    &a2->on_all_bullets_fired);
  std::string::basic_string(&this->gv__fw__bullet_item_id, &a2->gv__fw__bullet_item_id);
  std::string::basic_string(&this->gv__fw__color_h, &a2->gv__fw__color_h);
  std::string::basic_string(&this->gv__fw__scale, &a2->gv__fw__scale);
  std::string::basic_string(&this->gv__fw__angle, &a2->gv__fw__angle);
  std::string::basic_string(&this->gv__fw__max_particle_count, &a2->gv__fw__max_particle_count);
  std::string::basic_string(&this->gv__fw__face_to_camera, &a2->gv__fw__face_to_camera);
  std::string::basic_string(&this->gv__fw__bullet_life_time, &a2->gv__fw__bullet_life_time);
};

// Line 3844: range 0000000011300ACE-0000000011300AF8
void __cdecl data::FireworksLauncherMixin::~FireworksLauncherMixin(data::FireworksLauncherMixin *const this)
{
  data::FireworksLauncherMixin::~FireworksLauncherMixin(this);
  operator delete(this, 0x150uLL);
};

// Line 3844: range 00000000113009D4-0000000011300ACD
void __cdecl data::FireworksLauncherMixin::~FireworksLauncherMixin(data::FireworksLauncherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireworksLauncherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->gv__fw__bullet_life_time);
  std::string::~string(&this->gv__fw__face_to_camera);
  std::string::~string(&this->gv__fw__max_particle_count);
  std::string::~string(&this->gv__fw__angle);
  std::string::~string(&this->gv__fw__scale);
  std::string::~string(&this->gv__fw__color_h);
  std::string::~string(&this->gv__fw__bullet_item_id);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_all_bullets_fired);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_evt_start_count_down);
  std::string::~string(&this->start_count_down_modifier);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3849: range 00000000100C726C-00000000100C727C
const char *__cdecl data::FireworksLauncherMixin::getTypeName(const data::FireworksLauncherMixin *const this)
{
  return "FireworksLauncherMixin";
};

// Line 3850: range 00000000100C727E-00000000100C741A
int32_t __cdecl data::FireworksLauncherMixin::getHashNum(const data::FireworksLauncherMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FireworksLauncherMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FireworksLauncherMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3866: range 000000001125979E-00000000112597DF
void __cdecl data::FireworksLauncherMixinFactory::FireworksLauncherMixinFactory(
        data::FireworksLauncherMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FireworksLauncherMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FireworksLauncherMixinFactory = v2;
};

// Line 3874: range 0000000011259AE8-0000000011259B55
void __cdecl data::EnviroFollowRotateMixin::EnviroFollowRotateMixin(data::EnviroFollowRotateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EnviroFollowRotateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::Vector::Vector(&this->self_rotate_off_set);
  std::string::basic_string(&this->deactive_on_cutsecne_name);
};

// Line 3874: range 0000000011259F7A-000000001125A074
void __cdecl data::EnviroFollowRotateMixin::EnviroFollowRotateMixin(
        data::EnviroFollowRotateMixin *const this,
        const data::EnviroFollowRotateMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnviroFollowRotateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->self_rotate_off_set >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->self_rotate_off_set >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->self_rotate_off_set);
  v3 = *(_QWORD *)&a2->self_rotate_off_set.z;
  *(_QWORD *)&this->self_rotate_off_set.x = *(_QWORD *)&a2->self_rotate_off_set.x;
  *(_QWORD *)&this->self_rotate_off_set.z = v3;
  std::string::basic_string(&this->deactive_on_cutsecne_name, &a2->deactive_on_cutsecne_name);
};

// Line 3882: range 000000001130094A-00000000113009A7
void __cdecl data::EnviroFollowRotateMixin::~EnviroFollowRotateMixin(data::EnviroFollowRotateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnviroFollowRotateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->deactive_on_cutsecne_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3882: range 00000000113009A8-00000000113009D2
void __cdecl data::EnviroFollowRotateMixin::~EnviroFollowRotateMixin(data::EnviroFollowRotateMixin *const this)
{
  data::EnviroFollowRotateMixin::~EnviroFollowRotateMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 3887: range 00000000100C741C-00000000100C742C
const char *__cdecl data::EnviroFollowRotateMixin::getTypeName(const data::EnviroFollowRotateMixin *const this)
{
  return "EnviroFollowRotateMixin";
};

// Line 3888: range 00000000100C742E-00000000100C75CA
int32_t __cdecl data::EnviroFollowRotateMixin::getHashNum(const data::EnviroFollowRotateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnviroFollowRotateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnviroFollowRotateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3904: range 000000001125A35E-000000001125A39F
void __cdecl data::EnviroFollowRotateMixinFactory::EnviroFollowRotateMixinFactory(
        data::EnviroFollowRotateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnviroFollowRotateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnviroFollowRotateMixinFactory = v2;
};

// Line 3912: range 000000001125A6A8-000000001125A7E6
void __cdecl data::BoxClampWindZoneMixin::BoxClampWindZoneMixin(data::BoxClampWindZoneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BoxClampWindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::Vector::Vector(&this->size);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  if ( *(_BYTE *)(((unsigned __int64)&this->attrac_force_strength >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attrac_force_strength >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attrac_force_strength, v1);
  }
  this->attrac_force_strength = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_strength_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_strength_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_strength_range, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->max_strength_range = 0.0;
};

// Line 3912: range 000000001125AC98-000000001125AE6F
void __cdecl data::BoxClampWindZoneMixin::BoxClampWindZoneMixin(
        data::BoxClampWindZoneMixin *const this,
        const data::BoxClampWindZoneMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx
  float attrac_force_strength; // xmm0_4
  float max_strength_range; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BoxClampWindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->size >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->size >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->size);
  v3 = *(_QWORD *)&a2->size.z;
  *(_QWORD *)&this->size.x = *(_QWORD *)&a2->size.x;
  *(_QWORD *)&this->size.z = v3;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
  if ( *(_BYTE *)(((unsigned __int64)&a2->attrac_force_strength >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->attrac_force_strength >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->attrac_force_strength);
  }
  attrac_force_strength = a2->attrac_force_strength;
  if ( *(_BYTE *)(((unsigned __int64)&this->attrac_force_strength >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attrac_force_strength >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attrac_force_strength, &a2->born);
  }
  this->attrac_force_strength = attrac_force_strength;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_strength_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_strength_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_strength_range);
  }
  max_strength_range = a2->max_strength_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_strength_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_strength_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_strength_range, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->max_strength_range = max_strength_range;
};

// Line 3922: range 00000000113008C0-000000001130091D
void __cdecl data::BoxClampWindZoneMixin::~BoxClampWindZoneMixin(data::BoxClampWindZoneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BoxClampWindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3922: range 000000001130091E-0000000011300948
void __cdecl data::BoxClampWindZoneMixin::~BoxClampWindZoneMixin(data::BoxClampWindZoneMixin *const this)
{
  data::BoxClampWindZoneMixin::~BoxClampWindZoneMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 3927: range 00000000100C75CC-00000000100C75DC
const char *__cdecl data::BoxClampWindZoneMixin::getTypeName(const data::BoxClampWindZoneMixin *const this)
{
  return "BoxClampWindZoneMixin";
};

// Line 3928: range 00000000100C75DE-00000000100C777A
int32_t __cdecl data::BoxClampWindZoneMixin::getHashNum(const data::BoxClampWindZoneMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BoxClampWindZoneMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BoxClampWindZoneMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3944: range 000000001125B0B8-000000001125B0F9
void __cdecl data::BoxClampWindZoneMixinFactory::BoxClampWindZoneMixinFactory(
        data::BoxClampWindZoneMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BoxClampWindZoneMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BoxClampWindZoneMixinFactory = v2;
};

// Line 3952: range 000000001125B402-000000001125B44F
void __cdecl data::DvalinS01BoxMoxeMixin::DvalinS01BoxMoxeMixin(data::DvalinS01BoxMoxeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DvalinS01BoxMoxeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3952: range 000000001125B950-000000001125B9A8
void __cdecl data::DvalinS01BoxMoxeMixin::DvalinS01BoxMoxeMixin(
        data::DvalinS01BoxMoxeMixin *const this,
        const data::DvalinS01BoxMoxeMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DvalinS01BoxMoxeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3958: range 0000000011300846-0000000011300893
void __cdecl data::DvalinS01BoxMoxeMixin::~DvalinS01BoxMoxeMixin(data::DvalinS01BoxMoxeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DvalinS01BoxMoxeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3958: range 0000000011300894-00000000113008BE
void __cdecl data::DvalinS01BoxMoxeMixin::~DvalinS01BoxMoxeMixin(data::DvalinS01BoxMoxeMixin *const this)
{
  data::DvalinS01BoxMoxeMixin::~DvalinS01BoxMoxeMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 3963: range 00000000100C777C-00000000100C778C
const char *__cdecl data::DvalinS01BoxMoxeMixin::getTypeName(const data::DvalinS01BoxMoxeMixin *const this)
{
  return "DvalinS01BoxMoxeMixin";
};

// Line 3964: range 00000000100C778E-00000000100C792A
int32_t __cdecl data::DvalinS01BoxMoxeMixin::getHashNum(const data::DvalinS01BoxMoxeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DvalinS01BoxMoxeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DvalinS01BoxMoxeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3980: range 000000001125BBF2-000000001125BC33
void __cdecl data::DvalinS01BoxMoxeMixinFactory::DvalinS01BoxMoxeMixinFactory(
        data::DvalinS01BoxMoxeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DvalinS01BoxMoxeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DvalinS01BoxMoxeMixinFactory = v2;
};

// Line 3988: range 000000001125BF3C-000000001125BF89
void __cdecl data::FixDvalinS04MoveMixin::FixDvalinS04MoveMixin(data::FixDvalinS04MoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::FixDvalinS04MoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3988: range 000000001125C48A-000000001125C4E2
void __cdecl data::FixDvalinS04MoveMixin::FixDvalinS04MoveMixin(
        data::FixDvalinS04MoveMixin *const this,
        const data::FixDvalinS04MoveMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FixDvalinS04MoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 3994: range 00000000113007CC-0000000011300819
void __cdecl data::FixDvalinS04MoveMixin::~FixDvalinS04MoveMixin(data::FixDvalinS04MoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixDvalinS04MoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 3994: range 000000001130081A-0000000011300844
void __cdecl data::FixDvalinS04MoveMixin::~FixDvalinS04MoveMixin(data::FixDvalinS04MoveMixin *const this)
{
  data::FixDvalinS04MoveMixin::~FixDvalinS04MoveMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 3999: range 00000000100C792C-00000000100C793C
const char *__cdecl data::FixDvalinS04MoveMixin::getTypeName(const data::FixDvalinS04MoveMixin *const this)
{
  return "FixDvalinS04MoveMixin";
};

// Line 4000: range 00000000100C793E-00000000100C7ADA
int32_t __cdecl data::FixDvalinS04MoveMixin::getHashNum(const data::FixDvalinS04MoveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FixDvalinS04MoveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FixDvalinS04MoveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4016: range 000000001125C72C-000000001125C76D
void __cdecl data::FixDvalinS04MoveMixinFactory::FixDvalinS04MoveMixinFactory(
        data::FixDvalinS04MoveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FixDvalinS04MoveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FixDvalinS04MoveMixinFactory = v2;
};

// Line 4024: range 000000001017012E-000000001017046B
void __cdecl data::DvalinS01PathEffsInfo::DvalinS01PathEffsInfo(data::DvalinS01PathEffsInfo *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rsi

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, v1);
  }
  this->fly_state = 0;
  std::string::basic_string(&this->effect_name);
  if ( *(char *)(((unsigned __int64)&this->path_center >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->path_center, v1, &this->path_center);
  this->path_center = 0;
  v2 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->interval_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->interval_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->interval_max, v2);
  }
  this->interval_max = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->interval_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval_min, v2);
  }
  this->interval_min = 0;
  v3 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->num_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->num_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->num_max, v3);
  }
  this->num_max = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->num_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->num_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->num_min, v3);
  }
  this->num_min = 1;
  v4 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->range_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->range_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->range_max, v4);
  }
  this->range_max = 2.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->range_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range_min, v4);
  }
  this->range_min = 1.0;
  v5 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->eular_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->eular_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->eular_max, v5);
  }
  this->eular_max = 360.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->eular_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->eular_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->eular_min, v5);
  }
  this->eular_min = 0.0;
  v6 = (((_BYTE)this + 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->yscale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->yscale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->yscale, v6);
  }
  this->yscale = 0.5;
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v6, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 4024: range 0000000010E32274-0000000010E32874
void __cdecl data::DvalinS01PathEffsInfo::DvalinS01PathEffsInfo(
        data::DvalinS01PathEffsInfo *const this,
        const data::DvalinS01PathEffsInfo *a2)
{
  int32_t fly_state; // ecx
  char v3; // al
  std::string *p_effect_name; // rsi
  bool path_center; // cl
  char v6; // al
  __int64 v7; // rsi
  int32_t interval_max; // ecx
  char v9; // dl
  int32_t interval_min; // ecx
  char v11; // al
  __int64 v12; // rsi
  int32_t num_max; // ecx
  char v14; // dl
  int32_t num_min; // ecx
  char v16; // al
  float range_max; // xmm0_4
  __int64 v18; // rsi
  float range_min; // xmm0_4
  float eular_max; // xmm0_4
  __int64 v21; // rsi
  float eular_min; // xmm0_4
  float yscale; // xmm0_4
  __int64 v24; // rsi
  bool is_json_loaded; // cl
  char v26; // al
  const data::DvalinS01PathEffsInfo *v27; // [rsp+0h] [rbp-10h]

  v27 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  fly_state = a2->fly_state;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->fly_state = fly_state;
  p_effect_name = &v27->effect_name;
  std::string::basic_string(&this->effect_name, &v27->effect_name);
  if ( *(char *)(((unsigned __int64)&v27->path_center >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v27->path_center, p_effect_name, &v27->path_center);
  path_center = v27->path_center;
  v6 = *(_BYTE *)(((unsigned __int64)&this->path_center >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_effect_name) = v6 != 0;
    __asan_report_store1(&this->path_center, p_effect_name, &this->path_center);
  }
  this->path_center = path_center;
  v7 = (((_BYTE)v27 + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v27->interval_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->interval_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->interval_max);
  }
  interval_max = v27->interval_max;
  v9 = *(_BYTE *)(((unsigned __int64)&this->interval_max >> 3) + 0x7FFF8000);
  if ( v9 != 0 && (char)((((_BYTE)this + 44) & 7) + 3) >= v9 )
  {
    LOBYTE(v7) = v9 != 0;
    __asan_report_store4(&this->interval_max, v7);
  }
  this->interval_max = interval_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->interval_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->interval_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->interval_min);
  }
  interval_min = v27->interval_min;
  v11 = *(_BYTE *)(((unsigned __int64)&this->interval_min >> 3) + 0x7FFF8000);
  if ( v11 != 0 && v11 <= 3 )
  {
    LOBYTE(v7) = v11 != 0;
    __asan_report_store4(&this->interval_min, v7);
  }
  this->interval_min = interval_min;
  v12 = (((_BYTE)v27 + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v27->num_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->num_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->num_max);
  }
  num_max = v27->num_max;
  v14 = *(_BYTE *)(((unsigned __int64)&this->num_max >> 3) + 0x7FFF8000);
  if ( v14 != 0 && (char)((((_BYTE)this + 52) & 7) + 3) >= v14 )
  {
    LOBYTE(v12) = v14 != 0;
    __asan_report_store4(&this->num_max, v12);
  }
  this->num_max = num_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->num_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->num_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->num_min);
  }
  num_min = v27->num_min;
  v16 = *(_BYTE *)(((unsigned __int64)&this->num_min >> 3) + 0x7FFF8000);
  if ( v16 != 0 && v16 <= 3 )
  {
    LOBYTE(v12) = v16 != 0;
    __asan_report_store4(&this->num_min, v12);
  }
  this->num_min = num_min;
  if ( *(_BYTE *)(((unsigned __int64)&v27->range_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->range_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->range_max);
  }
  range_max = v27->range_max;
  v18 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->range_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->range_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->range_max, v18);
  }
  this->range_max = range_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->range_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->range_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->range_min);
  }
  range_min = v27->range_min;
  if ( *(_BYTE *)(((unsigned __int64)&this->range_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range_min, v18);
  }
  this->range_min = range_min;
  if ( *(_BYTE *)(((unsigned __int64)&v27->eular_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->eular_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->eular_max);
  }
  eular_max = v27->eular_max;
  v21 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->eular_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->eular_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->eular_max, v21);
  }
  this->eular_max = eular_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->eular_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->eular_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->eular_min);
  }
  eular_min = v27->eular_min;
  if ( *(_BYTE *)(((unsigned __int64)&this->eular_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->eular_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->eular_min, v21);
  }
  this->eular_min = eular_min;
  if ( *(_BYTE *)(((unsigned __int64)&v27->yscale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->yscale >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->yscale);
  }
  yscale = v27->yscale;
  v24 = (((_BYTE)this + 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->yscale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->yscale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->yscale, v24);
  }
  this->yscale = yscale;
  if ( *(char *)(((unsigned __int64)&v27->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v27->is_json_loaded, v24, &v27->is_json_loaded);
  is_json_loaded = v27->is_json_loaded;
  v26 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v26 < 0 )
  {
    LOBYTE(v24) = v26 != 0;
    __asan_report_store1(&this->is_json_loaded, v24, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 4024: range 000000001058142E-0000000010581A2E
void __cdecl data::DvalinS01PathEffsInfo::DvalinS01PathEffsInfo(
        data::DvalinS01PathEffsInfo *const this,
        data::DvalinS01PathEffsInfo *a2)
{
  int32_t fly_state; // ecx
  char v3; // al
  std::string *p_effect_name; // rsi
  bool path_center; // cl
  char v6; // al
  __int64 v7; // rsi
  int32_t interval_max; // ecx
  char v9; // dl
  int32_t interval_min; // ecx
  char v11; // al
  __int64 v12; // rsi
  int32_t num_max; // ecx
  char v14; // dl
  int32_t num_min; // ecx
  char v16; // al
  float range_max; // xmm0_4
  __int64 v18; // rsi
  float range_min; // xmm0_4
  float eular_max; // xmm0_4
  __int64 v21; // rsi
  float eular_min; // xmm0_4
  float yscale; // xmm0_4
  __int64 v24; // rsi
  bool is_json_loaded; // cl
  char v26; // al
  data::DvalinS01PathEffsInfo *v27; // [rsp+0h] [rbp-10h]

  v27 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  fly_state = a2->fly_state;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->fly_state = fly_state;
  p_effect_name = &v27->effect_name;
  std::string::basic_string(&this->effect_name, &v27->effect_name);
  if ( *(char *)(((unsigned __int64)&v27->path_center >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v27->path_center, p_effect_name, &v27->path_center);
  path_center = v27->path_center;
  v6 = *(_BYTE *)(((unsigned __int64)&this->path_center >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_effect_name) = v6 != 0;
    __asan_report_store1(&this->path_center, p_effect_name, &this->path_center);
  }
  this->path_center = path_center;
  v7 = (((_BYTE)v27 + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v27->interval_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->interval_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->interval_max);
  }
  interval_max = v27->interval_max;
  v9 = *(_BYTE *)(((unsigned __int64)&this->interval_max >> 3) + 0x7FFF8000);
  if ( v9 != 0 && (char)((((_BYTE)this + 44) & 7) + 3) >= v9 )
  {
    LOBYTE(v7) = v9 != 0;
    __asan_report_store4(&this->interval_max, v7);
  }
  this->interval_max = interval_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->interval_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->interval_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->interval_min);
  }
  interval_min = v27->interval_min;
  v11 = *(_BYTE *)(((unsigned __int64)&this->interval_min >> 3) + 0x7FFF8000);
  if ( v11 != 0 && v11 <= 3 )
  {
    LOBYTE(v7) = v11 != 0;
    __asan_report_store4(&this->interval_min, v7);
  }
  this->interval_min = interval_min;
  v12 = (((_BYTE)v27 + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v27->num_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->num_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->num_max);
  }
  num_max = v27->num_max;
  v14 = *(_BYTE *)(((unsigned __int64)&this->num_max >> 3) + 0x7FFF8000);
  if ( v14 != 0 && (char)((((_BYTE)this + 52) & 7) + 3) >= v14 )
  {
    LOBYTE(v12) = v14 != 0;
    __asan_report_store4(&this->num_max, v12);
  }
  this->num_max = num_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->num_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->num_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->num_min);
  }
  num_min = v27->num_min;
  v16 = *(_BYTE *)(((unsigned __int64)&this->num_min >> 3) + 0x7FFF8000);
  if ( v16 != 0 && v16 <= 3 )
  {
    LOBYTE(v12) = v16 != 0;
    __asan_report_store4(&this->num_min, v12);
  }
  this->num_min = num_min;
  if ( *(_BYTE *)(((unsigned __int64)&v27->range_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->range_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->range_max);
  }
  range_max = v27->range_max;
  v18 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->range_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->range_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->range_max, v18);
  }
  this->range_max = range_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->range_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->range_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->range_min);
  }
  range_min = v27->range_min;
  if ( *(_BYTE *)(((unsigned __int64)&this->range_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range_min, v18);
  }
  this->range_min = range_min;
  if ( *(_BYTE *)(((unsigned __int64)&v27->eular_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->eular_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->eular_max);
  }
  eular_max = v27->eular_max;
  v21 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->eular_max >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->eular_max >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->eular_max, v21);
  }
  this->eular_max = eular_max;
  if ( *(_BYTE *)(((unsigned __int64)&v27->eular_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v27->eular_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v27->eular_min);
  }
  eular_min = v27->eular_min;
  if ( *(_BYTE *)(((unsigned __int64)&this->eular_min >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->eular_min >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->eular_min, v21);
  }
  this->eular_min = eular_min;
  if ( *(_BYTE *)(((unsigned __int64)&v27->yscale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v27 + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v27->yscale >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v27->yscale);
  }
  yscale = v27->yscale;
  v24 = (((_BYTE)this + 76) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->yscale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 76) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->yscale >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->yscale, v24);
  }
  this->yscale = yscale;
  if ( *(char *)(((unsigned __int64)&v27->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v27->is_json_loaded, v24, &v27->is_json_loaded);
  is_json_loaded = v27->is_json_loaded;
  v26 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v26 < 0 )
  {
    LOBYTE(v24) = v26 != 0;
    __asan_report_store1(&this->is_json_loaded, v24, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 4024: range 000000001017046C-000000001017048A
void __cdecl data::DvalinS01PathEffsInfo::~DvalinS01PathEffsInfo(data::DvalinS01PathEffsInfo *const this)
{
  std::string::~string(&this->effect_name);
};

// Line 4063: range 000000001125CAAE-000000001125CB8F
void __cdecl data::DvalinS01PathEffsMixin::DvalinS01PathEffsMixin(data::DvalinS01PathEffsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DvalinS01PathEffsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->effect_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->effect_start, v1);
  }
  this->effect_start = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->effect_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->effect_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->effect_end, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->effect_end = 0;
  std::vector<data::DvalinS01PathEffsInfo>::vector(&this->eff_infos);
};

// Line 4063: range 000000001125CF94-000000001125D124
void __cdecl data::DvalinS01PathEffsMixin::DvalinS01PathEffsMixin(
        data::DvalinS01PathEffsMixin *const this,
        const data::DvalinS01PathEffsMixin *a2)
{
  int (**v2)(...); // rdx
  int32_t effect_start; // ecx
  char v4; // al
  __int64 v5; // rsi
  int32_t effect_end; // ecx
  char v7; // dl
  const data::DvalinS01PathEffsMixin *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DvalinS01PathEffsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->effect_start >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->effect_start >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->effect_start);
  }
  effect_start = a2->effect_start;
  v4 = *(_BYTE *)(((unsigned __int64)&this->effect_start >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->effect_start, a2);
  }
  this->effect_start = effect_start;
  v5 = (((_BYTE)v8 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v8->effect_end >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->effect_end >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->effect_end);
  }
  effect_end = v8->effect_end;
  v7 = *(_BYTE *)(((unsigned __int64)&this->effect_end >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->effect_end, v5);
  }
  this->effect_end = effect_end;
  std::vector<data::DvalinS01PathEffsInfo>::vector(&this->eff_infos, &v8->eff_infos);
};

// Line 4072: range 0000000011300742-000000001130079F
void __cdecl data::DvalinS01PathEffsMixin::~DvalinS01PathEffsMixin(data::DvalinS01PathEffsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DvalinS01PathEffsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DvalinS01PathEffsInfo>::~vector(&this->eff_infos);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4072: range 00000000113007A0-00000000113007CA
void __cdecl data::DvalinS01PathEffsMixin::~DvalinS01PathEffsMixin(data::DvalinS01PathEffsMixin *const this)
{
  data::DvalinS01PathEffsMixin::~DvalinS01PathEffsMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 4077: range 00000000100C7ADC-00000000100C7AEC
const char *__cdecl data::DvalinS01PathEffsMixin::getTypeName(const data::DvalinS01PathEffsMixin *const this)
{
  return "DvalinS01PathEffsMixin";
};

// Line 4078: range 00000000100C7AEE-00000000100C7C8A
int32_t __cdecl data::DvalinS01PathEffsMixin::getHashNum(const data::DvalinS01PathEffsMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DvalinS01PathEffsMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DvalinS01PathEffsMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4094: range 000000001125D40E-000000001125D44F
void __cdecl data::DvalinS01PathEffsMixinFactory::DvalinS01PathEffsMixinFactory(
        data::DvalinS01PathEffsMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DvalinS01PathEffsMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DvalinS01PathEffsMixinFactory = v2;
};

// Line 4102: range 000000001125D758-000000001125D7C5
void __cdecl data::CameraLockMixin::CameraLockMixin(data::CameraLockMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CameraLockMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->trans_name);
  std::string::basic_string(&this->cfg_path);
};

// Line 4102: range 000000001125DB7A-000000001125DC40
void __cdecl data::CameraLockMixin::CameraLockMixin(data::CameraLockMixin *const this, const data::CameraLockMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CameraLockMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->trans_name, &a2->trans_name);
  std::string::basic_string(&this->cfg_path, &a2->cfg_path);
};

// Line 4110: range 00000000113006A8-0000000011300715
void __cdecl data::CameraLockMixin::~CameraLockMixin(data::CameraLockMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CameraLockMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->cfg_path);
  std::string::~string(&this->trans_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4110: range 0000000011300716-0000000011300740
void __cdecl data::CameraLockMixin::~CameraLockMixin(data::CameraLockMixin *const this)
{
  data::CameraLockMixin::~CameraLockMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 4115: range 00000000100C7C8C-00000000100C7C9C
const char *__cdecl data::CameraLockMixin::getTypeName(const data::CameraLockMixin *const this)
{
  return "CameraLockMixin";
};

// Line 4116: range 00000000100C7C9E-00000000100C7E3A
int32_t __cdecl data::CameraLockMixin::getHashNum(const data::CameraLockMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CameraLockMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CameraLockMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4132: range 000000001125DF2A-000000001125DF6B
void __cdecl data::CameraLockMixinFactory::CameraLockMixinFactory(data::CameraLockMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CameraLockMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CameraLockMixinFactory = v2;
};

// Line 4140: range 000000001125E274-000000001125E371
void __cdecl data::AvatarLockForwardFlyMixin::AvatarLockForwardFlyMixin(data::AvatarLockForwardFlyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarLockForwardFlyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::Vector::Vector(&this->world_forward);
  if ( *(_BYTE *)(((unsigned __int64)&this->fly_speed_scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->fly_speed_scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->fly_speed_scale, v1);
  }
  this->fly_speed_scale = 1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->fly_back_speed_scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->fly_back_speed_scale >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->fly_back_speed_scale, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->fly_back_speed_scale = 1.0;
  data::Vector::Vector(&this->eular_raw_input);
};

// Line 4140: range 000000001125E78C-000000001125E9AC
void __cdecl data::AvatarLockForwardFlyMixin::AvatarLockForwardFlyMixin(
        data::AvatarLockForwardFlyMixin *const this,
        const data::AvatarLockForwardFlyMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx
  float fly_speed_scale; // xmm0_4
  float fly_back_speed_scale; // xmm0_4
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarLockForwardFlyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->world_forward >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->world_forward >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->world_forward);
  v3 = *(_QWORD *)&a2->world_forward.z;
  *(_QWORD *)&this->world_forward.x = *(_QWORD *)&a2->world_forward.x;
  *(_QWORD *)&this->world_forward.z = v3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->fly_speed_scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->fly_speed_scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->fly_speed_scale);
  }
  fly_speed_scale = a2->fly_speed_scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->fly_speed_scale >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->fly_speed_scale >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->fly_speed_scale, a2);
  }
  this->fly_speed_scale = fly_speed_scale;
  if ( *(_BYTE *)(((unsigned __int64)&a2->fly_back_speed_scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->fly_back_speed_scale >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->fly_back_speed_scale);
  }
  fly_back_speed_scale = a2->fly_back_speed_scale;
  if ( *(_BYTE *)(((unsigned __int64)&this->fly_back_speed_scale >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->fly_back_speed_scale >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->fly_back_speed_scale, (((_BYTE)this + 52) & 7u) + 3);
  }
  this->fly_back_speed_scale = fly_back_speed_scale;
  if ( *(_WORD *)(((unsigned __int64)&this->eular_raw_input >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->eular_raw_input >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->eular_raw_input);
  v6 = *(_QWORD *)&a2->eular_raw_input.z;
  *(_QWORD *)&this->eular_raw_input.x = *(_QWORD *)&a2->eular_raw_input.x;
  *(_QWORD *)&this->eular_raw_input.z = v6;
};

// Line 4150: range 000000001130067C-00000000113006A6
void __cdecl data::AvatarLockForwardFlyMixin::~AvatarLockForwardFlyMixin(data::AvatarLockForwardFlyMixin *const this)
{
  data::AvatarLockForwardFlyMixin::~AvatarLockForwardFlyMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 4150: range 000000001130062E-000000001130067B
void __cdecl data::AvatarLockForwardFlyMixin::~AvatarLockForwardFlyMixin(data::AvatarLockForwardFlyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarLockForwardFlyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4155: range 00000000100C7E3C-00000000100C7E4C
const char *__cdecl data::AvatarLockForwardFlyMixin::getTypeName(const data::AvatarLockForwardFlyMixin *const this)
{
  return "AvatarLockForwardFlyMixin";
};

// Line 4156: range 00000000100C7E4E-00000000100C7FEA
int32_t __cdecl data::AvatarLockForwardFlyMixin::getHashNum(const data::AvatarLockForwardFlyMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarLockForwardFlyMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarLockForwardFlyMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4172: range 000000001125EBF6-000000001125EC37
void __cdecl data::AvatarLockForwardFlyMixinFactory::AvatarLockForwardFlyMixinFactory(
        data::AvatarLockForwardFlyMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarLockForwardFlyMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarLockForwardFlyMixinFactory = v2;
};

// Line 4180: range 000000001125EF40-000000001125EF9D
void __cdecl data::TriggerResistDamageTextMixin::TriggerResistDamageTextMixin(
        data::TriggerResistDamageTextMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerResistDamageTextMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementType>::vector(&this->element_types);
};

// Line 4180: range 000000001125F392-000000001125F428
void __cdecl data::TriggerResistDamageTextMixin::TriggerResistDamageTextMixin(
        data::TriggerResistDamageTextMixin *const this,
        const data::TriggerResistDamageTextMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerResistDamageTextMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementType>::vector(&this->element_types, &a2->element_types);
};

// Line 4187: range 0000000011300602-000000001130062C
void __cdecl data::TriggerResistDamageTextMixin::~TriggerResistDamageTextMixin(
        data::TriggerResistDamageTextMixin *const this)
{
  data::TriggerResistDamageTextMixin::~TriggerResistDamageTextMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 4187: range 00000000113005A4-0000000011300601
void __cdecl data::TriggerResistDamageTextMixin::~TriggerResistDamageTextMixin(
        data::TriggerResistDamageTextMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerResistDamageTextMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementType>::~vector(&this->element_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4192: range 00000000100C7FEC-00000000100C7FFC
const char *__cdecl data::TriggerResistDamageTextMixin::getTypeName(
        const data::TriggerResistDamageTextMixin *const this)
{
  return "TriggerResistDamageTextMixin";
};

// Line 4193: range 00000000100C7FFE-00000000100C819A
int32_t __cdecl data::TriggerResistDamageTextMixin::getHashNum(const data::TriggerResistDamageTextMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerResistDamageTextMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerResistDamageTextMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4209: range 000000001125F712-000000001125F753
void __cdecl data::TriggerResistDamageTextMixinFactory::TriggerResistDamageTextMixinFactory(
        data::TriggerResistDamageTextMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerResistDamageTextMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerResistDamageTextMixinFactory = v2;
};

// Line 4217: range 000000001125FA5C-000000001125FAB9
void __cdecl data::StageReadyMixin::StageReadyMixin(data::StageReadyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::StageReadyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stage_ready);
};

// Line 4217: range 000000001125FEAE-000000001125FF44
void __cdecl data::StageReadyMixin::StageReadyMixin(data::StageReadyMixin *const this, const data::StageReadyMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::StageReadyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stage_ready, &a2->on_stage_ready);
};

// Line 4224: range 0000000011300578-00000000113005A2
void __cdecl data::StageReadyMixin::~StageReadyMixin(data::StageReadyMixin *const this)
{
  data::StageReadyMixin::~StageReadyMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 4224: range 000000001130051A-0000000011300577
void __cdecl data::StageReadyMixin::~StageReadyMixin(data::StageReadyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StageReadyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_stage_ready);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4229: range 00000000100C819C-00000000100C81AC
const char *__cdecl data::StageReadyMixin::getTypeName(const data::StageReadyMixin *const this)
{
  return "StageReadyMixin";
};

// Line 4230: range 00000000100C81AE-00000000100C834A
int32_t __cdecl data::StageReadyMixin::getHashNum(const data::StageReadyMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::StageReadyMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "StageReadyMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4246: range 000000001126022E-000000001126026F
void __cdecl data::StageReadyMixinFactory::StageReadyMixinFactory(data::StageReadyMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StageReadyMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_StageReadyMixinFactory = v2;
};

// Line 4254: range 0000000011260578-00000000112605E5
void __cdecl data::AttachModifierToElementDurabilityMixin::AttachModifierToElementDurabilityMixin(
        data::AttachModifierToElementDurabilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToElementDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
};

// Line 4254: range 0000000011260A0A-0000000011260AD0
void __cdecl data::AttachModifierToElementDurabilityMixin::AttachModifierToElementDurabilityMixin(
        data::AttachModifierToElementDurabilityMixin *const this,
        const data::AttachModifierToElementDurabilityMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToElementDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps, &a2->modifier_name_steps);
};

// Line 4262: range 0000000011300480-00000000113004ED
void __cdecl data::AttachModifierToElementDurabilityMixin::~AttachModifierToElementDurabilityMixin(
        data::AttachModifierToElementDurabilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToElementDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4262: range 00000000113004EE-0000000011300518
void __cdecl data::AttachModifierToElementDurabilityMixin::~AttachModifierToElementDurabilityMixin(
        data::AttachModifierToElementDurabilityMixin *const this)
{
  data::AttachModifierToElementDurabilityMixin::~AttachModifierToElementDurabilityMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 4267: range 00000000100C834C-00000000100C835C
const char *__cdecl data::AttachModifierToElementDurabilityMixin::getTypeName(
        const data::AttachModifierToElementDurabilityMixin *const this)
{
  return "AttachModifierToElementDurabilityMixin";
};

// Line 4268: range 00000000100C835E-00000000100C84FA
int32_t __cdecl data::AttachModifierToElementDurabilityMixin::getHashNum(
        const data::AttachModifierToElementDurabilityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToElementDurabilityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToElementDurabilityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4284: range 0000000011260DBA-0000000011260DFB
void __cdecl data::AttachModifierToElementDurabilityMixinFactory::AttachModifierToElementDurabilityMixinFactory(
        data::AttachModifierToElementDurabilityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToElementDurabilityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToElementDurabilityMixinFactory = v2;
};

// Line 4292: range 00000000101714E8-000000001017158D
void __cdecl data::ModifierWithPredicates::ModifierWithPredicates(data::ModifierWithPredicates *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rdx

  std::string::basic_string(this);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(char *)(((unsigned __int64)&this->attach_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->attach_modifier, v1, &this->attach_modifier);
  this->attach_modifier = 1;
  v2 = ((_BYTE)this + 57) & 7;
  v3 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store1(&this->is_json_loaded, v2, v3);
  this->is_json_loaded = 0;
};

// Line 4292: range 0000000010E373EA-0000000010E37543
void __cdecl data::ModifierWithPredicates::ModifierWithPredicates(
        data::ModifierWithPredicates *const this,
        const data::ModifierWithPredicates *a2)
{
  data::ConfigAbilityPredicateArray *p_predicates; // rsi
  bool attach_modifier; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool is_json_loaded; // cl
  char v8; // dl
  __int64 v9; // rdx

  std::string::basic_string(this, a2);
  p_predicates = &a2->predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, p_predicates);
  if ( *(char *)(((unsigned __int64)&a2->attach_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->attach_modifier, p_predicates, &a2->attach_modifier);
  attach_modifier = a2->attach_modifier;
  v4 = *(_BYTE *)(((unsigned __int64)&this->attach_modifier >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_predicates) = v4 != 0;
    __asan_report_store1(&this->attach_modifier, p_predicates, &this->attach_modifier);
  }
  this->attach_modifier = attach_modifier;
  v5 = ((_BYTE)a2 + 57) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&a2->is_json_loaded, v5, v6);
  is_json_loaded = a2->is_json_loaded;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 57) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_json_loaded, v5, v9);
  this->is_json_loaded = is_json_loaded;
};

// Line 4292: range 0000000010583DBA-0000000010583EF0
void __cdecl data::ModifierWithPredicates::ModifierWithPredicates(
        data::ModifierWithPredicates *const this,
        data::ModifierWithPredicates *a2)
{
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>> *p_predicates; // rsi
  bool attach_modifier; // cl
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool is_json_loaded; // cl
  char v8; // dl
  __int64 v9; // rdx

  std::string::basic_string(this, a2);
  p_predicates = &a2->predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, p_predicates);
  if ( *(char *)(((unsigned __int64)&a2->attach_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->attach_modifier, p_predicates, &a2->attach_modifier);
  attach_modifier = a2->attach_modifier;
  v4 = *(_BYTE *)(((unsigned __int64)&this->attach_modifier >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_predicates) = v4 != 0;
    __asan_report_store1(&this->attach_modifier, p_predicates, &this->attach_modifier);
  }
  this->attach_modifier = attach_modifier;
  v5 = ((_BYTE)a2 + 57) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&a2->is_json_loaded, v5, v6);
  is_json_loaded = a2->is_json_loaded;
  v8 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 57) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->is_json_loaded, v5, v9);
  this->is_json_loaded = is_json_loaded;
};

// Line 4292: range 000000001017158E-00000000101715B8
void __cdecl data::ModifierWithPredicates::~ModifierWithPredicates(data::ModifierWithPredicates *const this)
{
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::string::~string(this);
};

// Line 4322: range 000000001126113C-0000000011261207
void __cdecl data::AttachModifierToSurfaceTypeMixin::AttachModifierToSurfaceTypeMixin(
        data::AttachModifierToSurfaceTypeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSurfaceTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->surface_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->surface_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->surface_type, v1);
  }
  this->surface_type = Invalid;
  std::vector<data::ModifierWithPredicates>::vector(&this->modifiers_with_predicates);
  std::string::basic_string(&this->extra_enter_trigger_level_ability);
  std::string::basic_string(&this->extra_exit_trigger_level_ability);
  std::string::basic_string(&this->extra_reset_trigger_level_ability);
};

// Line 4322: range 00000000112615C2-000000001126175D
void __cdecl data::AttachModifierToSurfaceTypeMixin::AttachModifierToSurfaceTypeMixin(
        data::AttachModifierToSurfaceTypeMixin *const this,
        const data::AttachModifierToSurfaceTypeMixin *a2)
{
  int (**v2)(...); // rdx
  data::SceneSurfaceType surface_type; // ecx
  char v4; // al
  const data::AttachModifierToSurfaceTypeMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSurfaceTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->surface_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->surface_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->surface_type);
  }
  surface_type = a2->surface_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->surface_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->surface_type, a2);
  }
  this->surface_type = surface_type;
  std::vector<data::ModifierWithPredicates>::vector(&this->modifiers_with_predicates, &v5->modifiers_with_predicates);
  std::string::basic_string(&this->extra_enter_trigger_level_ability, &v5->extra_enter_trigger_level_ability);
  std::string::basic_string(&this->extra_exit_trigger_level_ability, &v5->extra_exit_trigger_level_ability);
  std::string::basic_string(&this->extra_reset_trigger_level_ability, &v5->extra_reset_trigger_level_ability);
};

// Line 4333: range 0000000011300454-000000001130047E
void __cdecl data::AttachModifierToSurfaceTypeMixin::~AttachModifierToSurfaceTypeMixin(
        data::AttachModifierToSurfaceTypeMixin *const this)
{
  data::AttachModifierToSurfaceTypeMixin::~AttachModifierToSurfaceTypeMixin(this);
  operator delete(this, 0xA0uLL);
};

// Line 4333: range 00000000113003C6-0000000011300453
void __cdecl data::AttachModifierToSurfaceTypeMixin::~AttachModifierToSurfaceTypeMixin(
        data::AttachModifierToSurfaceTypeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSurfaceTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->extra_reset_trigger_level_ability);
  std::string::~string(&this->extra_exit_trigger_level_ability);
  std::string::~string(&this->extra_enter_trigger_level_ability);
  std::vector<data::ModifierWithPredicates>::~vector(&this->modifiers_with_predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4338: range 00000000100C84FC-00000000100C850C
const char *__cdecl data::AttachModifierToSurfaceTypeMixin::getTypeName(
        const data::AttachModifierToSurfaceTypeMixin *const this)
{
  return "AttachModifierToSurfaceTypeMixin";
};

// Line 4339: range 00000000100C850E-00000000100C86AA
int32_t __cdecl data::AttachModifierToSurfaceTypeMixin::getHashNum(
        const data::AttachModifierToSurfaceTypeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToSurfaceTypeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToSurfaceTypeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4355: range 0000000011261A46-0000000011261A87
void __cdecl data::AttachModifierToSurfaceTypeMixinFactory::AttachModifierToSurfaceTypeMixinFactory(
        data::AttachModifierToSurfaceTypeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToSurfaceTypeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToSurfaceTypeMixinFactory = v2;
};

// Line 4363: range 0000000011261D90-0000000011261E2D
void __cdecl data::DoActionByStateIDMixin::DoActionByStateIDMixin(data::DoActionByStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->enter_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->exit_actions);
};

// Line 4363: range 00000000112621EA-0000000011262340
void __cdecl data::DoActionByStateIDMixin::DoActionByStateIDMixin(
        data::DoActionByStateIDMixin *const this,
        const data::DoActionByStateIDMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids, &a2->state_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->enter_predicates, &a2->enter_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->exit_predicates, &a2->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->enter_actions, &a2->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->exit_actions, &a2->exit_actions);
};

// Line 4374: range 00000000113002FC-0000000011300399
void __cdecl data::DoActionByStateIDMixin::~DoActionByStateIDMixin(data::DoActionByStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->exit_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->enter_predicates);
  std::vector<std::string>::~vector(&this->state_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4374: range 000000001130039A-00000000113003C4
void __cdecl data::DoActionByStateIDMixin::~DoActionByStateIDMixin(data::DoActionByStateIDMixin *const this)
{
  data::DoActionByStateIDMixin::~DoActionByStateIDMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 4379: range 00000000100C86AC-00000000100C86BC
const char *__cdecl data::DoActionByStateIDMixin::getTypeName(const data::DoActionByStateIDMixin *const this)
{
  return "DoActionByStateIDMixin";
};

// Line 4380: range 00000000100C86BE-00000000100C885A
int32_t __cdecl data::DoActionByStateIDMixin::getHashNum(const data::DoActionByStateIDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByStateIDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByStateIDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4396: range 000000001126262A-000000001126266B
void __cdecl data::DoActionByStateIDMixinFactory::DoActionByStateIDMixinFactory(
        data::DoActionByStateIDMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByStateIDMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByStateIDMixinFactory = v2;
};

// Line 4404: range 0000000011262974-0000000011262A11
void __cdecl data::DoActionByAnimatorStateIDMixin::DoActionByAnimatorStateIDMixin(
        data::DoActionByAnimatorStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByAnimatorStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->enter_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->exit_actions);
};

// Line 4404: range 0000000011262DCE-0000000011262F24
void __cdecl data::DoActionByAnimatorStateIDMixin::DoActionByAnimatorStateIDMixin(
        data::DoActionByAnimatorStateIDMixin *const this,
        const data::DoActionByAnimatorStateIDMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByAnimatorStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->state_ids, &a2->state_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->enter_predicates, &a2->enter_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->exit_predicates, &a2->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->enter_actions, &a2->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->exit_actions, &a2->exit_actions);
};

// Line 4415: range 00000000113002D0-00000000113002FA
void __cdecl data::DoActionByAnimatorStateIDMixin::~DoActionByAnimatorStateIDMixin(
        data::DoActionByAnimatorStateIDMixin *const this)
{
  data::DoActionByAnimatorStateIDMixin::~DoActionByAnimatorStateIDMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 4415: range 0000000011300232-00000000113002CF
void __cdecl data::DoActionByAnimatorStateIDMixin::~DoActionByAnimatorStateIDMixin(
        data::DoActionByAnimatorStateIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByAnimatorStateIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->exit_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->enter_predicates);
  std::vector<std::string>::~vector(&this->state_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4420: range 00000000100C885C-00000000100C886C
const char *__cdecl data::DoActionByAnimatorStateIDMixin::getTypeName(
        const data::DoActionByAnimatorStateIDMixin *const this)
{
  return "DoActionByAnimatorStateIDMixin";
};

// Line 4421: range 00000000100C886E-00000000100C8A0A
int32_t __cdecl data::DoActionByAnimatorStateIDMixin::getHashNum(
        const data::DoActionByAnimatorStateIDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByAnimatorStateIDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByAnimatorStateIDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4437: range 000000001126320E-000000001126324F
void __cdecl data::DoActionByAnimatorStateIDMixinFactory::DoActionByAnimatorStateIDMixinFactory(
        data::DoActionByAnimatorStateIDMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByAnimatorStateIDMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByAnimatorStateIDMixinFactory = v2;
};

// Line 4445: range 0000000011263558-00000000112635F5
void __cdecl data::DoActionByPoseIDMixin::DoActionByPoseIDMixin(data::DoActionByPoseIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByPoseIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->pose_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->enter_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->exit_actions);
};

// Line 4445: range 00000000112639B2-0000000011263B08
void __cdecl data::DoActionByPoseIDMixin::DoActionByPoseIDMixin(
        data::DoActionByPoseIDMixin *const this,
        const data::DoActionByPoseIDMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByPoseIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<int>::vector(&this->pose_ids, &a2->pose_ids);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->enter_predicates, &a2->enter_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->exit_predicates, &a2->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->enter_actions, &a2->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->exit_actions, &a2->exit_actions);
};

// Line 4456: range 0000000011300206-0000000011300230
void __cdecl data::DoActionByPoseIDMixin::~DoActionByPoseIDMixin(data::DoActionByPoseIDMixin *const this)
{
  data::DoActionByPoseIDMixin::~DoActionByPoseIDMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 4456: range 0000000011300168-0000000011300205
void __cdecl data::DoActionByPoseIDMixin::~DoActionByPoseIDMixin(data::DoActionByPoseIDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByPoseIDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->exit_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->enter_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->exit_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->enter_predicates);
  std::vector<int>::~vector(&this->pose_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4461: range 00000000100C8A0C-00000000100C8A1C
const char *__cdecl data::DoActionByPoseIDMixin::getTypeName(const data::DoActionByPoseIDMixin *const this)
{
  return "DoActionByPoseIDMixin";
};

// Line 4462: range 00000000100C8A1E-00000000100C8BBA
int32_t __cdecl data::DoActionByPoseIDMixin::getHashNum(const data::DoActionByPoseIDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByPoseIDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByPoseIDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4478: range 0000000011263DF2-0000000011263E33
void __cdecl data::DoActionByPoseIDMixinFactory::DoActionByPoseIDMixinFactory(
        data::DoActionByPoseIDMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByPoseIDMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByPoseIDMixinFactory = v2;
};

// Line 4486: range 000000001126413C-0000000011264199
void __cdecl data::OverrideStickElemUIMixin::OverrideStickElemUIMixin(data::OverrideStickElemUIMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OverrideStickElemUIMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->eff_name);
};

// Line 4486: range 000000001126459E-0000000011264634
void __cdecl data::OverrideStickElemUIMixin::OverrideStickElemUIMixin(
        data::OverrideStickElemUIMixin *const this,
        const data::OverrideStickElemUIMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OverrideStickElemUIMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->eff_name, &a2->eff_name);
};

// Line 4493: range 000000001130013C-0000000011300166
void __cdecl data::OverrideStickElemUIMixin::~OverrideStickElemUIMixin(data::OverrideStickElemUIMixin *const this)
{
  data::OverrideStickElemUIMixin::~OverrideStickElemUIMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 4493: range 00000000113000DE-000000001130013B
void __cdecl data::OverrideStickElemUIMixin::~OverrideStickElemUIMixin(data::OverrideStickElemUIMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideStickElemUIMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->eff_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4498: range 00000000100C8BBC-00000000100C8BCC
const char *__cdecl data::OverrideStickElemUIMixin::getTypeName(const data::OverrideStickElemUIMixin *const this)
{
  return "OverrideStickElemUIMixin";
};

// Line 4499: range 00000000100C8BCE-00000000100C8D6A
int32_t __cdecl data::OverrideStickElemUIMixin::getHashNum(const data::OverrideStickElemUIMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OverrideStickElemUIMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OverrideStickElemUIMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4515: range 000000001126491E-000000001126495F
void __cdecl data::OverrideStickElemUIMixinFactory::OverrideStickElemUIMixinFactory(
        data::OverrideStickElemUIMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideStickElemUIMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OverrideStickElemUIMixinFactory = v2;
};

// Line 4523: range 0000000011264C68-0000000011264E45
void __cdecl data::GlobalMainShieldMixin::GlobalMainShieldMixin(data::GlobalMainShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::GlobalMainShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->shield_type);
  data::DynamicFloat::DynamicFloat(&this->shield_angle, 360.0);
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio);
  data::DynamicFloat::DynamicFloat(&this->shield_hp);
  std::string::basic_string(&this->cost_shield_ratio_name);
  std::string::basic_string(&this->show_damage_text);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken);
  data::DynamicFloat::DynamicFloat(&this->amount_by_get_damage);
  std::string::basic_string(&this->effect_pattern);
  std::string::basic_string(&this->child_shield_modifier_name);
  if ( *(char *)(((unsigned __int64)&this->target_mute_hit_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->target_mute_hit_effect, v1, &this->target_mute_hit_effect);
  this->target_mute_hit_effect = 1;
  v3 = ((_BYTE)this + 89) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->infinite_shield >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->infinite_shield >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->infinite_shield, v3, v4);
  this->infinite_shield = 0;
  data::DynamicFloat::DynamicFloat(&this->heal_limited_by_caster_max_hpratio);
  data::DynamicFloat::DynamicFloat(&this->heal_limited_by_local_creature_max_hpratio);
};

// Line 4523: range 0000000011265298-0000000011265681
void __cdecl data::GlobalMainShieldMixin::GlobalMainShieldMixin(
        data::GlobalMainShieldMixin *const this,
        const data::GlobalMainShieldMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_child_shield_modifier_name; // rsi
  bool target_mute_hit_effect; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool infinite_shield; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GlobalMainShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->shield_type, &a2->shield_type);
  data::DynamicFloat::DynamicFloat(&this->shield_angle, &a2->shield_angle);
  data::DynamicFloat::DynamicFloat(&this->shield_hpratio, &a2->shield_hpratio);
  data::DynamicFloat::DynamicFloat(&this->shield_hp, &a2->shield_hp);
  std::string::basic_string(&this->cost_shield_ratio_name, &a2->cost_shield_ratio_name);
  std::string::basic_string(&this->show_damage_text, &a2->show_damage_text);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_shield_broken, &a2->on_shield_broken);
  data::DynamicFloat::DynamicFloat(&this->amount_by_get_damage, &a2->amount_by_get_damage);
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
  p_child_shield_modifier_name = &a2->child_shield_modifier_name;
  std::string::basic_string(&this->child_shield_modifier_name, &a2->child_shield_modifier_name);
  if ( *(char *)(((unsigned __int64)&a2->target_mute_hit_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->target_mute_hit_effect, p_child_shield_modifier_name, &a2->target_mute_hit_effect);
  target_mute_hit_effect = a2->target_mute_hit_effect;
  v5 = *(_BYTE *)(((unsigned __int64)&this->target_mute_hit_effect >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_child_shield_modifier_name) = v5 != 0;
    __asan_report_store1(&this->target_mute_hit_effect, p_child_shield_modifier_name, &this->target_mute_hit_effect);
  }
  this->target_mute_hit_effect = target_mute_hit_effect;
  v6 = ((_BYTE)a2 + 89) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->infinite_shield >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->infinite_shield >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->infinite_shield, v6, v7);
  infinite_shield = a2->infinite_shield;
  v9 = *(_BYTE *)(((unsigned __int64)&this->infinite_shield >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 89) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->infinite_shield, v6, v10);
  this->infinite_shield = infinite_shield;
  data::DynamicFloat::DynamicFloat(&this->heal_limited_by_caster_max_hpratio, &a2->heal_limited_by_caster_max_hpratio);
  data::DynamicFloat::DynamicFloat(
    &this->heal_limited_by_local_creature_max_hpratio,
    &a2->heal_limited_by_local_creature_max_hpratio);
};

// Line 4543: range 00000000113000B2-00000000113000DC
void __cdecl data::GlobalMainShieldMixin::~GlobalMainShieldMixin(data::GlobalMainShieldMixin *const this)
{
  data::GlobalMainShieldMixin::~GlobalMainShieldMixin(this);
  operator delete(this, 0x1A0uLL);
};

// Line 4543: range 00000000112FFF94-00000000113000B1
void __cdecl data::GlobalMainShieldMixin::~GlobalMainShieldMixin(data::GlobalMainShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GlobalMainShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->heal_limited_by_local_creature_max_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->heal_limited_by_caster_max_hpratio);
  std::string::~string(&this->child_shield_modifier_name);
  std::string::~string(&this->effect_pattern);
  data::DynamicFloat::~DynamicFloat(&this->amount_by_get_damage);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_shield_broken);
  std::string::~string(&this->show_damage_text);
  std::string::~string(&this->cost_shield_ratio_name);
  data::DynamicFloat::~DynamicFloat(&this->shield_hp);
  data::DynamicFloat::~DynamicFloat(&this->shield_hpratio);
  data::DynamicFloat::~DynamicFloat(&this->shield_angle);
  std::string::~string(&this->shield_type);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4548: range 00000000100C8D6C-00000000100C8D7C
const char *__cdecl data::GlobalMainShieldMixin::getTypeName(const data::GlobalMainShieldMixin *const this)
{
  return "GlobalMainShieldMixin";
};

// Line 4549: range 00000000100C8D7E-00000000100C8F1A
int32_t __cdecl data::GlobalMainShieldMixin::getHashNum(const data::GlobalMainShieldMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GlobalMainShieldMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GlobalMainShieldMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4565: range 000000001126596A-00000000112659AB
void __cdecl data::GlobalMainShieldMixinFactory::GlobalMainShieldMixinFactory(
        data::GlobalMainShieldMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GlobalMainShieldMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GlobalMainShieldMixinFactory = v2;
};

// Line 4573: range 0000000011265CB4-0000000011265D4C
void __cdecl data::GlobalSubShieldMixin::GlobalSubShieldMixin(data::GlobalSubShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::GlobalSubShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->main_shield_modifier_name);
  if ( *(char *)(((unsigned __int64)&this->notify_mainshield_when_hit >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->notify_mainshield_when_hit, v1, &this->notify_mainshield_when_hit);
  this->notify_mainshield_when_hit = 1;
};

// Line 4573: range 0000000011266168-0000000011266274
void __cdecl data::GlobalSubShieldMixin::GlobalSubShieldMixin(
        data::GlobalSubShieldMixin *const this,
        const data::GlobalSubShieldMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_main_shield_modifier_name; // rsi
  bool notify_mainshield_when_hit; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GlobalSubShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_main_shield_modifier_name = &a2->main_shield_modifier_name;
  std::string::basic_string(&this->main_shield_modifier_name, &a2->main_shield_modifier_name);
  if ( *(char *)(((unsigned __int64)&a2->notify_mainshield_when_hit >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->notify_mainshield_when_hit, p_main_shield_modifier_name, &a2->notify_mainshield_when_hit);
  notify_mainshield_when_hit = a2->notify_mainshield_when_hit;
  v5 = *(_BYTE *)(((unsigned __int64)&this->notify_mainshield_when_hit >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_main_shield_modifier_name) = v5 != 0;
    __asan_report_store1(
      &this->notify_mainshield_when_hit,
      p_main_shield_modifier_name,
      &this->notify_mainshield_when_hit);
  }
  this->notify_mainshield_when_hit = notify_mainshield_when_hit;
};

// Line 4581: range 00000000112FFF68-00000000112FFF92
void __cdecl data::GlobalSubShieldMixin::~GlobalSubShieldMixin(data::GlobalSubShieldMixin *const this)
{
  data::GlobalSubShieldMixin::~GlobalSubShieldMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 4581: range 00000000112FFF0A-00000000112FFF67
void __cdecl data::GlobalSubShieldMixin::~GlobalSubShieldMixin(data::GlobalSubShieldMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GlobalSubShieldMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->main_shield_modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4586: range 00000000100C8F1C-00000000100C8F2C
const char *__cdecl data::GlobalSubShieldMixin::getTypeName(const data::GlobalSubShieldMixin *const this)
{
  return "GlobalSubShieldMixin";
};

// Line 4587: range 00000000100C8F2E-00000000100C90CA
int32_t __cdecl data::GlobalSubShieldMixin::getHashNum(const data::GlobalSubShieldMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GlobalSubShieldMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GlobalSubShieldMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4603: range 000000001126655E-000000001126659F
void __cdecl data::GlobalSubShieldMixinFactory::GlobalSubShieldMixinFactory(
        data::GlobalSubShieldMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GlobalSubShieldMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GlobalSubShieldMixinFactory = v2;
};

// Line 4611: range 00000000112668A8-0000000011266915
void __cdecl data::AttachModifierToHPPercentMixin::AttachModifierToHPPercentMixin(
        data::AttachModifierToHPPercentMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
};

// Line 4611: range 0000000011266D3A-0000000011266E00
void __cdecl data::AttachModifierToHPPercentMixin::AttachModifierToHPPercentMixin(
        data::AttachModifierToHPPercentMixin *const this,
        const data::AttachModifierToHPPercentMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps, &a2->modifier_name_steps);
};

// Line 4619: range 00000000112FFE70-00000000112FFEDD
void __cdecl data::AttachModifierToHPPercentMixin::~AttachModifierToHPPercentMixin(
        data::AttachModifierToHPPercentMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4619: range 00000000112FFEDE-00000000112FFF08
void __cdecl data::AttachModifierToHPPercentMixin::~AttachModifierToHPPercentMixin(
        data::AttachModifierToHPPercentMixin *const this)
{
  data::AttachModifierToHPPercentMixin::~AttachModifierToHPPercentMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 4624: range 00000000100C90CC-00000000100C90DC
const char *__cdecl data::AttachModifierToHPPercentMixin::getTypeName(
        const data::AttachModifierToHPPercentMixin *const this)
{
  return "AttachModifierToHPPercentMixin";
};

// Line 4625: range 00000000100C90DE-00000000100C927A
int32_t __cdecl data::AttachModifierToHPPercentMixin::getHashNum(
        const data::AttachModifierToHPPercentMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToHPPercentMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToHPPercentMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4641: range 00000000112670EA-000000001126712B
void __cdecl data::AttachModifierToHPPercentMixinFactory::AttachModifierToHPPercentMixinFactory(
        data::AttachModifierToHPPercentMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToHPPercentMixinFactory = v2;
};

// Line 4649: range 0000000011267434-000000001126751F
void __cdecl data::AttachModifierToHPPercentMixinV2::AttachModifierToHPPercentMixinV2(
        data::AttachModifierToHPPercentMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_frame_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->delay_frame_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->delay_frame_count, v1);
  }
  this->delay_frame_count = 1;
  v3 = ((_BYTE)this + 84) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_need_flush_on_removed >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_need_flush_on_removed >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_need_flush_on_removed, v3, v4);
  this->is_need_flush_on_removed = 1;
};

// Line 4649: range 00000000112678DA-0000000011267A95
void __cdecl data::AttachModifierToHPPercentMixinV2::AttachModifierToHPPercentMixinV2(
        data::AttachModifierToHPPercentMixinV2 *const this,
        const data::AttachModifierToHPPercentMixinV2 *a2)
{
  int (**v2)(...); // rdx
  data::StringArray *p_modifier_name_steps; // rsi
  uint32_t delay_frame_count; // ecx
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool is_need_flush_on_removed; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  p_modifier_name_steps = &a2->modifier_name_steps;
  std::vector<std::string>::vector(&this->modifier_name_steps, &a2->modifier_name_steps);
  if ( *(_BYTE *)(((unsigned __int64)&a2->delay_frame_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->delay_frame_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->delay_frame_count);
  }
  delay_frame_count = a2->delay_frame_count;
  v5 = *(_BYTE *)(((unsigned __int64)&this->delay_frame_count >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_modifier_name_steps) = v5 != 0;
    __asan_report_store4(&this->delay_frame_count, p_modifier_name_steps);
  }
  this->delay_frame_count = delay_frame_count;
  v6 = ((_BYTE)a2 + 84) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->is_need_flush_on_removed >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->is_need_flush_on_removed >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->is_need_flush_on_removed, v6, v7);
  is_need_flush_on_removed = a2->is_need_flush_on_removed;
  v9 = *(_BYTE *)(((unsigned __int64)&this->is_need_flush_on_removed >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 84) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->is_need_flush_on_removed, v6, v10);
  this->is_need_flush_on_removed = is_need_flush_on_removed;
};

// Line 4659: range 00000000112FFDD6-00000000112FFE43
void __cdecl data::AttachModifierToHPPercentMixinV2::~AttachModifierToHPPercentMixinV2(
        data::AttachModifierToHPPercentMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4659: range 00000000112FFE44-00000000112FFE6E
void __cdecl data::AttachModifierToHPPercentMixinV2::~AttachModifierToHPPercentMixinV2(
        data::AttachModifierToHPPercentMixinV2 *const this)
{
  data::AttachModifierToHPPercentMixinV2::~AttachModifierToHPPercentMixinV2(this);
  operator delete(this, 0x58uLL);
};

// Line 4664: range 00000000100C927C-00000000100C928C
const char *__cdecl data::AttachModifierToHPPercentMixinV2::getTypeName(
        const data::AttachModifierToHPPercentMixinV2 *const this)
{
  return "AttachModifierToHPPercentMixinV2";
};

// Line 4665: range 00000000100C928E-00000000100C942A
int32_t __cdecl data::AttachModifierToHPPercentMixinV2::getHashNum(
        const data::AttachModifierToHPPercentMixinV2 *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToHPPercentMixinV2::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToHPPercentMixinV2",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4681: range 0000000011267D7E-0000000011267DBF
void __cdecl data::AttachModifierToHPPercentMixinV2Factory::AttachModifierToHPPercentMixinV2Factory(
        data::AttachModifierToHPPercentMixinV2Factory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToHPPercentMixinV2Factory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToHPPercentMixinV2Factory = v2;
};

// Line 4689: range 00000000112680C8-00000000112681F9
void __cdecl data::DoActionByTeamStatusMixin::DoActionByTeamStatusMixin(data::DoActionByTeamStatusMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByTeamStatusMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->wait_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->wait_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->wait_time, v1);
  }
  this->wait_time = 5.0;
  v3 = ((_BYTE)this + 84) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->wait_for_bigteam >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->wait_for_bigteam >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->wait_for_bigteam, v3, v4);
  this->wait_for_bigteam = 0;
  v5 = ((_BYTE)this + 85) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->run_post_recover >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->run_post_recover >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->run_post_recover, v5, v6);
  this->run_post_recover = 0;
};

// Line 4689: range 00000000112685B4-00000000112687F2
void __cdecl data::DoActionByTeamStatusMixin::DoActionByTeamStatusMixin(
        data::DoActionByTeamStatusMixin *const this,
        const data::DoActionByTeamStatusMixin *a2)
{
  int (**v2)(...); // rdx
  float wait_time; // xmm0_4
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool wait_for_bigteam; // cl
  char v7; // dl
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool run_post_recover; // cl
  char v12; // dl
  __int64 v13; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByTeamStatusMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->wait_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->wait_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->wait_time);
  }
  wait_time = a2->wait_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->wait_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->wait_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->wait_time, &a2->predicates);
  }
  this->wait_time = wait_time;
  v4 = ((_BYTE)a2 + 84) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&a2->wait_for_bigteam >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&a2->wait_for_bigteam >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&a2->wait_for_bigteam, v4, v5);
  wait_for_bigteam = a2->wait_for_bigteam;
  v7 = *(_BYTE *)(((unsigned __int64)&this->wait_for_bigteam >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 84) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->wait_for_bigteam, v4, v8);
  this->wait_for_bigteam = wait_for_bigteam;
  v9 = ((_BYTE)a2 + 85) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->run_post_recover >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->run_post_recover >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->run_post_recover, v9, v10);
  run_post_recover = a2->run_post_recover;
  v12 = *(_BYTE *)(((unsigned __int64)&this->run_post_recover >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 85) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->run_post_recover, v9, v13);
  this->run_post_recover = run_post_recover;
};

// Line 4700: range 00000000112FFDAA-00000000112FFDD4
void __cdecl data::DoActionByTeamStatusMixin::~DoActionByTeamStatusMixin(data::DoActionByTeamStatusMixin *const this)
{
  data::DoActionByTeamStatusMixin::~DoActionByTeamStatusMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 4700: range 00000000112FFD3C-00000000112FFDA9
void __cdecl data::DoActionByTeamStatusMixin::~DoActionByTeamStatusMixin(data::DoActionByTeamStatusMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByTeamStatusMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4705: range 00000000100C942C-00000000100C943C
const char *__cdecl data::DoActionByTeamStatusMixin::getTypeName(const data::DoActionByTeamStatusMixin *const this)
{
  return "DoActionByTeamStatusMixin";
};

// Line 4706: range 00000000100C943E-00000000100C95DA
int32_t __cdecl data::DoActionByTeamStatusMixin::getHashNum(const data::DoActionByTeamStatusMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByTeamStatusMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByTeamStatusMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4722: range 0000000011268ADC-0000000011268B1D
void __cdecl data::DoActionByTeamStatusMixinFactory::DoActionByTeamStatusMixinFactory(
        data::DoActionByTeamStatusMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByTeamStatusMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByTeamStatusMixinFactory = v2;
};

// Line 4730: range 0000000011268E26-0000000011268EE7
void __cdecl data::DoActionByElementReactionMixin::DoActionByElementReactionMixin(
        data::DoActionByElementReactionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByElementReactionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, v1);
  }
  this->range = 20.0;
  std::vector<data::EntityType>::vector(&this->entity_types);
  std::vector<data::ElementReactionType>::vector(&this->reaction_types);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 4730: range 0000000011269292-0000000011269400
void __cdecl data::DoActionByElementReactionMixin::DoActionByElementReactionMixin(
        data::DoActionByElementReactionMixin *const this,
        const data::DoActionByElementReactionMixin *a2)
{
  int (**v2)(...); // rdx
  float range; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByElementReactionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->range);
  }
  range = a2->range;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->range, a2);
  }
  this->range = range;
  std::vector<data::EntityType>::vector(&this->entity_types, &a2->entity_types);
  std::vector<data::ElementReactionType>::vector(&this->reaction_types, &a2->reaction_types);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 4740: range 00000000112FFD10-00000000112FFD3A
void __cdecl data::DoActionByElementReactionMixin::~DoActionByElementReactionMixin(
        data::DoActionByElementReactionMixin *const this)
{
  data::DoActionByElementReactionMixin::~DoActionByElementReactionMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 4740: range 00000000112FFC92-00000000112FFD0F
void __cdecl data::DoActionByElementReactionMixin::~DoActionByElementReactionMixin(
        data::DoActionByElementReactionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByElementReactionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::vector<data::ElementReactionType>::~vector(&this->reaction_types);
  std::vector<data::EntityType>::~vector(&this->entity_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4745: range 00000000100C95DC-00000000100C95EC
const char *__cdecl data::DoActionByElementReactionMixin::getTypeName(
        const data::DoActionByElementReactionMixin *const this)
{
  return "DoActionByElementReactionMixin";
};

// Line 4746: range 00000000100C95EE-00000000100C978A
int32_t __cdecl data::DoActionByElementReactionMixin::getHashNum(
        const data::DoActionByElementReactionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByElementReactionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByElementReactionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4762: range 00000000112696EA-000000001126972B
void __cdecl data::DoActionByElementReactionMixinFactory::DoActionByElementReactionMixinFactory(
        data::DoActionByElementReactionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByElementReactionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByElementReactionMixinFactory = v2;
};

// Line 4770: range 0000000011269A34-0000000011269B1D
void __cdecl data::AnimatorRotationCompensateMixin::AnimatorRotationCompensateMixin(
        data::AnimatorRotationCompensateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AnimatorRotationCompensateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->animator_state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&this->animation_rotate >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->animation_rotate >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->animation_rotate, v1);
  }
  this->animation_rotate = 90.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->angle_limit >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->angle_limit >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->angle_limit, (((_BYTE)this + 60) & 7u) + 3);
  }
  this->angle_limit = 0.0;
};

// Line 4770: range 0000000011269F22-000000001126A0B8
void __cdecl data::AnimatorRotationCompensateMixin::AnimatorRotationCompensateMixin(
        data::AnimatorRotationCompensateMixin *const this,
        const data::AnimatorRotationCompensateMixin *a2)
{
  int (**v2)(...); // rdx
  float animation_rotate; // xmm0_4
  float angle_limit; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AnimatorRotationCompensateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->animator_state_ids, &a2->animator_state_ids);
  if ( *(_BYTE *)(((unsigned __int64)&a2->animation_rotate >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->animation_rotate >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->animation_rotate);
  }
  animation_rotate = a2->animation_rotate;
  if ( *(_BYTE *)(((unsigned __int64)&this->animation_rotate >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->animation_rotate >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->animation_rotate, &a2->animator_state_ids);
  }
  this->animation_rotate = animation_rotate;
  if ( *(_BYTE *)(((unsigned __int64)&a2->angle_limit >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->angle_limit >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->angle_limit);
  }
  angle_limit = a2->angle_limit;
  if ( *(_BYTE *)(((unsigned __int64)&this->angle_limit >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->angle_limit >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->angle_limit, (((_BYTE)this + 60) & 7u) + 3);
  }
  this->angle_limit = angle_limit;
};

// Line 4779: range 00000000112FFC08-00000000112FFC65
void __cdecl data::AnimatorRotationCompensateMixin::~AnimatorRotationCompensateMixin(
        data::AnimatorRotationCompensateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AnimatorRotationCompensateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->animator_state_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4779: range 00000000112FFC66-00000000112FFC90
void __cdecl data::AnimatorRotationCompensateMixin::~AnimatorRotationCompensateMixin(
        data::AnimatorRotationCompensateMixin *const this)
{
  data::AnimatorRotationCompensateMixin::~AnimatorRotationCompensateMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 4784: range 00000000100C978C-00000000100C979C
const char *__cdecl data::AnimatorRotationCompensateMixin::getTypeName(
        const data::AnimatorRotationCompensateMixin *const this)
{
  return "AnimatorRotationCompensateMixin";
};

// Line 4785: range 00000000100C979E-00000000100C993A
int32_t __cdecl data::AnimatorRotationCompensateMixin::getHashNum(
        const data::AnimatorRotationCompensateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AnimatorRotationCompensateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AnimatorRotationCompensateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4801: range 000000001126A3A2-000000001126A3E3
void __cdecl data::AnimatorRotationCompensateMixinFactory::AnimatorRotationCompensateMixinFactory(
        data::AnimatorRotationCompensateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AnimatorRotationCompensateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AnimatorRotationCompensateMixinFactory = v2;
};

// Line 4809: range 000000001126A6EC-000000001126A749
void __cdecl data::TileAttackMixin::TileAttackMixin(data::TileAttackMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TileAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id);
};

// Line 4809: range 000000001126AB4E-000000001126ABE4
void __cdecl data::TileAttackMixin::TileAttackMixin(data::TileAttackMixin *const this, const data::TileAttackMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TileAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id, &a2->attack_id);
};

// Line 4816: range 00000000112FFB7E-00000000112FFBDB
void __cdecl data::TileAttackMixin::~TileAttackMixin(data::TileAttackMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileAttackMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attack_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4816: range 00000000112FFBDC-00000000112FFC06
void __cdecl data::TileAttackMixin::~TileAttackMixin(data::TileAttackMixin *const this)
{
  data::TileAttackMixin::~TileAttackMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 4821: range 00000000100C993C-00000000100C994C
const char *__cdecl data::TileAttackMixin::getTypeName(const data::TileAttackMixin *const this)
{
  return "TileAttackMixin";
};

// Line 4822: range 00000000100C994E-00000000100C9AEA
int32_t __cdecl data::TileAttackMixin::getHashNum(const data::TileAttackMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TileAttackMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TileAttackMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4838: range 000000001126AECE-000000001126AF0F
void __cdecl data::TileAttackMixinFactory::TileAttackMixinFactory(data::TileAttackMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileAttackMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileAttackMixinFactory = v2;
};

// Line 4846: range 00000000110E2212-00000000110E229E
void __cdecl data::TileShapeInfo::TileShapeInfo(data::TileShapeInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  std::enable_shared_from_this<data::TileShapeInfo>::enable_shared_from_this(&this->std::enable_shared_from_this<data::TileShapeInfo>);
  v2 = (int (**)(...))(&`vtable for'data::TileShapeInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileShapeInfo = v2;
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 4846: range 000000001126B2CC-000000001126B3A2
void __cdecl data::TileShapeInfo::TileShapeInfo(data::TileShapeInfo *const this, const data::TileShapeInfo *a2)
{
  std::enable_shared_from_this<data::TileShapeInfo> *v2; // rsi
  int (**v3)(...); // rdx
  bool is_json_loaded; // cl
  char v5; // al

  v2 = &a2->std::enable_shared_from_this<data::TileShapeInfo>;
  std::enable_shared_from_this<data::TileShapeInfo>::enable_shared_from_this(
    &this->std::enable_shared_from_this<data::TileShapeInfo>,
    v2);
  v3 = (int (**)(...))(&`vtable for'data::TileShapeInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v2);
  this->_vptr_TileShapeInfo = v3;
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, v2, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(v2) = v5 != 0;
    __asan_report_store1(&this->is_json_loaded, v2, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 4853: range 000000001126B63E-000000001126B668
void __cdecl data::TileShapeInfo::~TileShapeInfo(data::TileShapeInfo *const this)
{
  data::TileShapeInfo::~TileShapeInfo(this);
  operator delete(this, 0x20uLL);
};

// Line 4853: range 000000001126B5EC-000000001126B63D
void __cdecl data::TileShapeInfo::~TileShapeInfo(data::TileShapeInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileShapeInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileShapeInfo = v2;
  std::enable_shared_from_this<data::TileShapeInfo>::~enable_shared_from_this(&this->std::enable_shared_from_this<data::TileShapeInfo>);
};

// Line 4858: range 00000000100C9AEC-00000000100C9AFC
const char *__cdecl data::TileShapeInfo::getTypeName(const data::TileShapeInfo *const this)
{
  return "TileShapeInfo";
};

// Line 4859: range 00000000100C9AFE-00000000100C9C9A
int32_t __cdecl data::TileShapeInfo::getHashNum(const data::TileShapeInfo *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TileShapeInfo::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TileShapeInfo",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4878: range 000000001126B66A-000000001126B6FF
void __cdecl data::SphereTileShapeInfo::SphereTileShapeInfo(data::SphereTileShapeInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::TileShapeInfo::TileShapeInfo((data::TileShapeInfo *const)this);
  v2 = (int (**)(...))(&`vtable for'data::SphereTileShapeInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileShapeInfo = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->radius, (((_BYTE)this + 28) & 7u) + 3);
  }
  this->radius = 0.0;
};

// Line 4878: range 000000001126BB98-000000001126BC78
void __cdecl data::SphereTileShapeInfo::SphereTileShapeInfo(
        data::SphereTileShapeInfo *const this,
        const data::SphereTileShapeInfo *a2)
{
  int (**v2)(...); // rdx
  float radius; // xmm0_4

  data::TileShapeInfo::TileShapeInfo((data::TileShapeInfo *const)this, (const data::TileShapeInfo *)a2);
  v2 = (int (**)(...))(&`vtable for'data::SphereTileShapeInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_TileShapeInfo = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->radius);
  }
  radius = a2->radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->radius, (((_BYTE)this + 28) & 7u) + 3);
  }
  this->radius = radius;
};

// Line 4885: range 00000000112FFB52-00000000112FFB7C
void __cdecl data::SphereTileShapeInfo::~SphereTileShapeInfo(data::SphereTileShapeInfo *const this)
{
  data::SphereTileShapeInfo::~SphereTileShapeInfo(this);
  operator delete(this, 0x20uLL);
};

// Line 4885: range 00000000112FFB04-00000000112FFB51
void __cdecl data::SphereTileShapeInfo::~SphereTileShapeInfo(data::SphereTileShapeInfo *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SphereTileShapeInfo + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileShapeInfo = v2;
  data::TileShapeInfo::~TileShapeInfo((data::TileShapeInfo *const)this);
};

// Line 4890: range 00000000100C9C9C-00000000100C9CAC
const char *__cdecl data::SphereTileShapeInfo::getTypeName(const data::SphereTileShapeInfo *const this)
{
  return "SphereTileShapeInfo";
};

// Line 4891: range 00000000100C9CAE-00000000100C9E4A
int32_t __cdecl data::SphereTileShapeInfo::getHashNum(const data::SphereTileShapeInfo *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SphereTileShapeInfo::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SphereTileShapeInfo",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4907: range 000000001126BEC2-000000001126BF03
void __cdecl data::SphereTileShapeInfoFactory::SphereTileShapeInfoFactory(data::SphereTileShapeInfoFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SphereTileShapeInfoFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SphereTileShapeInfoFactory = v2;
};

// Line 4915: range 000000001126C20C-000000001126C302
void __cdecl data::TileComplexMixin::TileComplexMixin(data::TileComplexMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TileComplexMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id);
  std::string::basic_string(&this->attach_point_name);
  data::Vector::Vector(&this->offset);
  if ( *(_WORD *)(((unsigned __int64)&this->shape >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::TileShapeInfo>();
};

// Line 4915: range 000000001126C74C-000000001126C891
void __cdecl data::TileComplexMixin::TileComplexMixin(
        data::TileComplexMixin *const this,
        const data::TileComplexMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TileComplexMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id, &a2->attack_id);
  std::string::basic_string(&this->attach_point_name, &a2->attach_point_name);
  if ( *(_WORD *)(((unsigned __int64)&this->offset >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->offset >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->offset);
  v3 = *(_QWORD *)&a2->offset.z;
  *(_QWORD *)&this->offset.x = *(_QWORD *)&a2->offset.x;
  *(_QWORD *)&this->offset.z = v3;
  std::shared_ptr<data::TileShapeInfo>::shared_ptr(&this->shape, &a2->shape);
};

// Line 4925: range 00000000112FFAD8-00000000112FFB02
void __cdecl data::TileComplexMixin::~TileComplexMixin(data::TileComplexMixin *const this)
{
  data::TileComplexMixin::~TileComplexMixin(this);
  operator delete(this, 0x80uLL);
};

// Line 4925: range 00000000112FFA5A-00000000112FFAD7
void __cdecl data::TileComplexMixin::~TileComplexMixin(data::TileComplexMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileComplexMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::TileShapeInfo>::~shared_ptr(&this->shape);
  std::string::~string(&this->attach_point_name);
  std::string::~string(&this->attack_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4930: range 00000000100C9E88-00000000100C9E98
const char *__cdecl data::TileComplexMixin::getTypeName(const data::TileComplexMixin *const this)
{
  return "TileComplexMixin";
};

// Line 4931: range 00000000100C9E9A-00000000100CA036
int32_t __cdecl data::TileComplexMixin::getHashNum(const data::TileComplexMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TileComplexMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TileComplexMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4947: range 000000001126CB7A-000000001126CBBB
void __cdecl data::TileComplexMixinFactory::TileComplexMixinFactory(data::TileComplexMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileComplexMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileComplexMixinFactory = v2;
};

// Line 4970: range 000000001126D024-000000001126D1C8
void __cdecl data::TileAttackManagerMixin::TileAttackManagerMixin(data::TileAttackManagerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TileAttackManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, v1);
  }
  this->interval = 0.0;
  v3 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->camp_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->camp_type, v3);
  }
  this->camp_type = Enviro;
  if ( *(_BYTE *)(((unsigned __int64)&this->fix_camp >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->fix_camp >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->fix_camp, v3);
  }
  this->fix_camp = 0;
  v4 = ((_BYTE)this + 76) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->authority_handle >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->authority_handle >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->authority_handle, v4, v5);
  this->authority_handle = 0;
  data::ConfigAttackInfo::ConfigAttackInfo(&this->attack_info);
};

// Line 4970: range 000000001126D612-000000001126D8CA
void __cdecl data::TileAttackManagerMixin::TileAttackManagerMixin(
        data::TileAttackManagerMixin *const this,
        const data::TileAttackManagerMixin *a2)
{
  int (**v2)(...); // rdx
  float interval; // xmm0_4
  __int64 v4; // rsi
  data::TileCampType camp_type; // ecx
  char v6; // dl
  uint32_t fix_camp; // ecx
  char v8; // al
  __int64 v9; // rsi
  __int64 v10; // rdx
  bool authority_handle; // cl
  char v12; // dl
  __int64 v13; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TileAttackManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id, &a2->attack_id);
  if ( *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->interval);
  }
  interval = a2->interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, &a2->attack_id);
  }
  this->interval = interval;
  v4 = (((_BYTE)a2 + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camp_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->camp_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->camp_type);
  }
  camp_type = a2->camp_type;
  v6 = *(_BYTE *)(((unsigned __int64)&this->camp_type >> 3) + 0x7FFF8000);
  if ( v6 != 0 && (char)((((_BYTE)this + 68) & 7) + 3) >= v6 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store4(&this->camp_type, v4);
  }
  this->camp_type = camp_type;
  if ( *(_BYTE *)(((unsigned __int64)&a2->fix_camp >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->fix_camp >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->fix_camp);
  }
  fix_camp = a2->fix_camp;
  v8 = *(_BYTE *)(((unsigned __int64)&this->fix_camp >> 3) + 0x7FFF8000);
  if ( v8 != 0 && v8 <= 3 )
  {
    LOBYTE(v4) = v8 != 0;
    __asan_report_store4(&this->fix_camp, v4);
  }
  this->fix_camp = fix_camp;
  v9 = ((_BYTE)a2 + 76) & 7;
  v10 = (*(_BYTE *)(((unsigned __int64)&a2->authority_handle >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v9 >= *(_BYTE *)(((unsigned __int64)&a2->authority_handle >> 3) + 0x7FFF8000));
  if ( (_BYTE)v10 )
    __asan_report_load1(&a2->authority_handle, v9, v10);
  authority_handle = a2->authority_handle;
  v12 = *(_BYTE *)(((unsigned __int64)&this->authority_handle >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v12 != 0;
  v13 = (v12 != 0) & (unsigned __int8)((((unsigned __int8)this + 76) & 7) >= v12);
  if ( (_BYTE)v13 )
    __asan_report_store1(&this->authority_handle, v9, v13);
  this->authority_handle = authority_handle;
  data::ConfigAttackInfo::ConfigAttackInfo(&this->attack_info, &a2->attack_info);
};

// Line 4982: range 00000000112FF9C0-00000000112FFA2D
void __cdecl data::TileAttackManagerMixin::~TileAttackManagerMixin(data::TileAttackManagerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileAttackManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAttackInfo::~ConfigAttackInfo(&this->attack_info);
  std::string::~string(&this->attack_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 4982: range 00000000112FFA2E-00000000112FFA58
void __cdecl data::TileAttackManagerMixin::~TileAttackManagerMixin(data::TileAttackManagerMixin *const this)
{
  data::TileAttackManagerMixin::~TileAttackManagerMixin(this);
  operator delete(this, 0x400uLL);
};

// Line 4987: range 00000000100CA038-00000000100CA048
const char *__cdecl data::TileAttackManagerMixin::getTypeName(const data::TileAttackManagerMixin *const this)
{
  return "TileAttackManagerMixin";
};

// Line 4988: range 00000000100CA04A-00000000100CA1E6
int32_t __cdecl data::TileAttackManagerMixin::getHashNum(const data::TileAttackManagerMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TileAttackManagerMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TileAttackManagerMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5004: range 000000001126DBB4-000000001126DBF5
void __cdecl data::TileAttackManagerMixinFactory::TileAttackManagerMixinFactory(
        data::TileAttackManagerMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileAttackManagerMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileAttackManagerMixinFactory = v2;
};

// Line 5012: range 000000001126DEFE-000000001126E00D
void __cdecl data::DoTileActionManagerMixin::DoTileActionManagerMixin(data::DoTileActionManagerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoTileActionManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, v1);
  }
  this->duration = 0.0;
  std::string::basic_string(&this->action_id);
  std::string::basic_string(&this->action_pos_key);
  std::string::basic_string(&this->action_radius_key);
  if ( *(char *)(((unsigned __int64)&this->reaction_force_use_owner_prop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->reaction_force_use_owner_prop, v1, &this->reaction_force_use_owner_prop);
  this->reaction_force_use_owner_prop = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 5012: range 000000001126E3BC-000000001126E5DF
void __cdecl data::DoTileActionManagerMixin::DoTileActionManagerMixin(
        data::DoTileActionManagerMixin *const this,
        const data::DoTileActionManagerMixin *a2)
{
  int (**v2)(...); // rdx
  float duration; // xmm0_4
  std::string *p_action_radius_key; // rsi
  bool reaction_force_use_owner_prop; // cl
  char v6; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoTileActionManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->duration);
  }
  duration = a2->duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->duration, a2);
  }
  this->duration = duration;
  std::string::basic_string(&this->action_id, &a2->action_id);
  std::string::basic_string(&this->action_pos_key, &a2->action_pos_key);
  p_action_radius_key = &a2->action_radius_key;
  std::string::basic_string(&this->action_radius_key, &a2->action_radius_key);
  if ( *(char *)(((unsigned __int64)&a2->reaction_force_use_owner_prop >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->reaction_force_use_owner_prop, p_action_radius_key, &a2->reaction_force_use_owner_prop);
  reaction_force_use_owner_prop = a2->reaction_force_use_owner_prop;
  v6 = *(_BYTE *)(((unsigned __int64)&this->reaction_force_use_owner_prop >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_action_radius_key) = v6 != 0;
    __asan_report_store1(
      &this->reaction_force_use_owner_prop,
      p_action_radius_key,
      &this->reaction_force_use_owner_prop);
  }
  this->reaction_force_use_owner_prop = reaction_force_use_owner_prop;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 5024: range 00000000112FF994-00000000112FF9BE
void __cdecl data::DoTileActionManagerMixin::~DoTileActionManagerMixin(data::DoTileActionManagerMixin *const this)
{
  data::DoTileActionManagerMixin::~DoTileActionManagerMixin(this);
  operator delete(this, 0xA8uLL);
};

// Line 5024: range 00000000112FF904-00000000112FF993
void __cdecl data::DoTileActionManagerMixin::~DoTileActionManagerMixin(data::DoTileActionManagerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoTileActionManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::string::~string(&this->action_radius_key);
  std::string::~string(&this->action_pos_key);
  std::string::~string(&this->action_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5029: range 00000000100CA1E8-00000000100CA1F8
const char *__cdecl data::DoTileActionManagerMixin::getTypeName(const data::DoTileActionManagerMixin *const this)
{
  return "DoTileActionManagerMixin";
};

// Line 5030: range 00000000100CA1FA-00000000100CA396
int32_t __cdecl data::DoTileActionManagerMixin::getHashNum(const data::DoTileActionManagerMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoTileActionManagerMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoTileActionManagerMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5046: range 000000001126E8C8-000000001126E909
void __cdecl data::DoTileActionManagerMixinFactory::DoTileActionManagerMixinFactory(
        data::DoTileActionManagerMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoTileActionManagerMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoTileActionManagerMixinFactory = v2;
};

// Line 5054: range 000000001126EC12-000000001126ED38
void __cdecl data::TileComplexManagerMixin::TileComplexManagerMixin(data::TileComplexManagerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TileComplexManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id);
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, v1);
  }
  this->interval = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->src_camp >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->src_camp >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->src_camp, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->src_camp = 5001;
  data::ConfigAttackInfo::ConfigAttackInfo(&this->attack_info);
};

// Line 5054: range 000000001126F182-000000001126F345
void __cdecl data::TileComplexManagerMixin::TileComplexManagerMixin(
        data::TileComplexManagerMixin *const this,
        const data::TileComplexManagerMixin *a2)
{
  int (**v2)(...); // rdx
  float interval; // xmm0_4
  __int64 v4; // rsi
  uint32_t src_camp; // ecx
  char v6; // dl

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TileComplexManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attack_id, &a2->attack_id);
  if ( *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->interval);
  }
  interval = a2->interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, &a2->attack_id);
  }
  this->interval = interval;
  v4 = (((_BYTE)a2 + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->src_camp >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->src_camp >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->src_camp);
  }
  src_camp = a2->src_camp;
  v6 = *(_BYTE *)(((unsigned __int64)&this->src_camp >> 3) + 0x7FFF8000);
  if ( v6 != 0 && (char)((((_BYTE)this + 68) & 7) + 3) >= v6 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store4(&this->src_camp, v4);
  }
  this->src_camp = src_camp;
  data::ConfigAttackInfo::ConfigAttackInfo(&this->attack_info, &a2->attack_info);
};

// Line 5064: range 00000000112FF86A-00000000112FF8D7
void __cdecl data::TileComplexManagerMixin::~TileComplexManagerMixin(data::TileComplexManagerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileComplexManagerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAttackInfo::~ConfigAttackInfo(&this->attack_info);
  std::string::~string(&this->attack_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5064: range 00000000112FF8D8-00000000112FF902
void __cdecl data::TileComplexManagerMixin::~TileComplexManagerMixin(data::TileComplexManagerMixin *const this)
{
  data::TileComplexManagerMixin::~TileComplexManagerMixin(this);
  operator delete(this, 0x3F8uLL);
};

// Line 5069: range 00000000100CA398-00000000100CA3A8
const char *__cdecl data::TileComplexManagerMixin::getTypeName(const data::TileComplexManagerMixin *const this)
{
  return "TileComplexManagerMixin";
};

// Line 5070: range 00000000100CA3AA-00000000100CA546
int32_t __cdecl data::TileComplexManagerMixin::getHashNum(const data::TileComplexManagerMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TileComplexManagerMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TileComplexManagerMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5086: range 000000001126F62E-000000001126F66F
void __cdecl data::TileComplexManagerMixinFactory::TileComplexManagerMixinFactory(
        data::TileComplexManagerMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TileComplexManagerMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TileComplexManagerMixinFactory = v2;
};

// Line 5094: range 000000001126F978-000000001126F9D5
void __cdecl data::MonsterReadyMixin::MonsterReadyMixin(data::MonsterReadyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MonsterReadyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_monster_ready);
};

// Line 5094: range 000000001126FDCA-000000001126FE60
void __cdecl data::MonsterReadyMixin::MonsterReadyMixin(
        data::MonsterReadyMixin *const this,
        const data::MonsterReadyMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MonsterReadyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_monster_ready, &a2->on_monster_ready);
};

// Line 5101: range 00000000112FF7E0-00000000112FF83D
void __cdecl data::MonsterReadyMixin::~MonsterReadyMixin(data::MonsterReadyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterReadyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_monster_ready);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5101: range 00000000112FF83E-00000000112FF868
void __cdecl data::MonsterReadyMixin::~MonsterReadyMixin(data::MonsterReadyMixin *const this)
{
  data::MonsterReadyMixin::~MonsterReadyMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 5106: range 00000000100CA548-00000000100CA558
const char *__cdecl data::MonsterReadyMixin::getTypeName(const data::MonsterReadyMixin *const this)
{
  return "MonsterReadyMixin";
};

// Line 5107: range 00000000100CA55A-00000000100CA6F6
int32_t __cdecl data::MonsterReadyMixin::getHashNum(const data::MonsterReadyMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MonsterReadyMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MonsterReadyMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5123: range 000000001127014A-000000001127018B
void __cdecl data::MonsterReadyMixinFactory::MonsterReadyMixinFactory(data::MonsterReadyMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterReadyMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MonsterReadyMixinFactory = v2;
};

// Line 5131: range 0000000011270494-0000000011270541
void __cdecl data::DoActionByKillingMixin::DoActionByKillingMixin(data::DoActionByKillingMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByKillingMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_window >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->detect_window >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->detect_window, v1);
  }
  this->detect_window = 0.0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_kill);
};

// Line 5131: range 00000000112708FC-0000000011270A3A
void __cdecl data::DoActionByKillingMixin::DoActionByKillingMixin(
        data::DoActionByKillingMixin *const this,
        const data::DoActionByKillingMixin *a2)
{
  int (**v2)(...); // rdx
  float detect_window; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByKillingMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->attack_tags, &a2->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&a2->detect_window >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->detect_window >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->detect_window);
  }
  detect_window = a2->detect_window;
  if ( *(_BYTE *)(((unsigned __int64)&this->detect_window >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->detect_window >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->detect_window, &a2->attack_tags);
  }
  this->detect_window = detect_window;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_kill, &a2->on_kill);
};

// Line 5140: range 00000000112FF7B4-00000000112FF7DE
void __cdecl data::DoActionByKillingMixin::~DoActionByKillingMixin(data::DoActionByKillingMixin *const this)
{
  data::DoActionByKillingMixin::~DoActionByKillingMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 5140: range 00000000112FF746-00000000112FF7B3
void __cdecl data::DoActionByKillingMixin::~DoActionByKillingMixin(data::DoActionByKillingMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByKillingMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_kill);
  std::vector<std::string>::~vector(&this->attack_tags);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5145: range 00000000100CA6F8-00000000100CA708
const char *__cdecl data::DoActionByKillingMixin::getTypeName(const data::DoActionByKillingMixin *const this)
{
  return "DoActionByKillingMixin";
};

// Line 5146: range 00000000100CA70A-00000000100CA8A6
int32_t __cdecl data::DoActionByKillingMixin::getHashNum(const data::DoActionByKillingMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByKillingMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByKillingMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5162: range 0000000011270D24-0000000011270D65
void __cdecl data::DoActionByKillingMixinFactory::DoActionByKillingMixinFactory(
        data::DoActionByKillingMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByKillingMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByKillingMixinFactory = v2;
};

// Line 5170: range 000000001127106E-0000000011271139
void __cdecl data::ShaderLerpMixin::ShaderLerpMixin(data::ShaderLerpMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ShaderLerpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = None_9;
  v3 = ((_BYTE)this + 36) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->force_stop_when_removed >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->force_stop_when_removed >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->force_stop_when_removed, v3, v4);
  this->force_stop_when_removed = 0;
};

// Line 5170: range 000000001127150E-000000001127165B
void __cdecl data::ShaderLerpMixin::ShaderLerpMixin(data::ShaderLerpMixin *const this, const data::ShaderLerpMixin *a2)
{
  int (**v2)(...); // rdx
  data::E_ShaderData type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool force_stop_when_removed; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::ShaderLerpMixin *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShaderLerpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  v5 = ((_BYTE)v10 + 36) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->force_stop_when_removed >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->force_stop_when_removed >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->force_stop_when_removed, v5, v6);
  force_stop_when_removed = v10->force_stop_when_removed;
  v8 = *(_BYTE *)(((unsigned __int64)&this->force_stop_when_removed >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->force_stop_when_removed, v5, v9);
  this->force_stop_when_removed = force_stop_when_removed;
};

// Line 5178: range 00000000112FF6CC-00000000112FF719
void __cdecl data::ShaderLerpMixin::~ShaderLerpMixin(data::ShaderLerpMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShaderLerpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5178: range 00000000112FF71A-00000000112FF744
void __cdecl data::ShaderLerpMixin::~ShaderLerpMixin(data::ShaderLerpMixin *const this)
{
  data::ShaderLerpMixin::~ShaderLerpMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 5183: range 00000000100CA8A8-00000000100CA8B8
const char *__cdecl data::ShaderLerpMixin::getTypeName(const data::ShaderLerpMixin *const this)
{
  return "ShaderLerpMixin";
};

// Line 5184: range 00000000100CA8BA-00000000100CAA56
int32_t __cdecl data::ShaderLerpMixin::getHashNum(const data::ShaderLerpMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShaderLerpMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShaderLerpMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5200: range 00000000112718A4-00000000112718E5
void __cdecl data::ShaderLerpMixinFactory::ShaderLerpMixinFactory(data::ShaderLerpMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShaderLerpMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShaderLerpMixinFactory = v2;
};

// Line 5215: range 0000000011271D48-0000000011271DE5
void __cdecl data::ElementAdjustMixin::ElementAdjustMixin(data::ElementAdjustMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ElementAdjustMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->change_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->change_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->change_interval, v1);
  }
  this->change_interval = 0.0;
  std::unordered_map<data::ElementType,std::string>::unordered_map(&this->element_modifies);
};

// Line 5215: range 000000001127219A-00000000112722A8
void __cdecl data::ElementAdjustMixin::ElementAdjustMixin(
        data::ElementAdjustMixin *const this,
        const data::ElementAdjustMixin *a2)
{
  int (**v2)(...); // rdx
  float change_interval; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElementAdjustMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->change_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->change_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->change_interval);
  }
  change_interval = a2->change_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->change_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->change_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->change_interval, a2);
  }
  this->change_interval = change_interval;
  std::unordered_map<data::ElementType,std::string>::unordered_map(&this->element_modifies, &a2->element_modifies);
};

// Line 5223: range 00000000112FF642-00000000112FF69F
void __cdecl data::ElementAdjustMixin::~ElementAdjustMixin(data::ElementAdjustMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementAdjustMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<data::ElementType,std::string>::~unordered_map(&this->element_modifies);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5223: range 00000000112FF6A0-00000000112FF6CA
void __cdecl data::ElementAdjustMixin::~ElementAdjustMixin(data::ElementAdjustMixin *const this)
{
  data::ElementAdjustMixin::~ElementAdjustMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 5228: range 00000000100CAA58-00000000100CAA68
const char *__cdecl data::ElementAdjustMixin::getTypeName(const data::ElementAdjustMixin *const this)
{
  return "ElementAdjustMixin";
};

// Line 5229: range 00000000100CAA6A-00000000100CAC06
int32_t __cdecl data::ElementAdjustMixin::getHashNum(const data::ElementAdjustMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElementAdjustMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElementAdjustMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5245: range 0000000011272592-00000000112725D3
void __cdecl data::ElementAdjustMixinFactory::ElementAdjustMixinFactory(data::ElementAdjustMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementAdjustMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElementAdjustMixinFactory = v2;
};

// Line 5253: range 00000000112728DC-0000000011272984
void __cdecl data::AttachToElementTypeMixin::AttachToElementTypeMixin(data::AttachToElementTypeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToElementTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementType>::vector(&this->element_types);
  if ( *(char *)(((unsigned __int64)&this->reject >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->reject, v1, &this->reject);
  this->reject = 0;
  std::string::basic_string(&this->modifier_name);
};

// Line 5253: range 0000000011272D3A-0000000011272E76
void __cdecl data::AttachToElementTypeMixin::AttachToElementTypeMixin(
        data::AttachToElementTypeMixin *const this,
        const data::AttachToElementTypeMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigElementTypeArray *p_element_types; // rsi
  bool reject; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToElementTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_element_types = &a2->element_types;
  std::vector<data::ElementType>::vector(&this->element_types, &a2->element_types);
  if ( *(char *)(((unsigned __int64)&a2->reject >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->reject, p_element_types, &a2->reject);
  reject = a2->reject;
  v5 = *(_BYTE *)(((unsigned __int64)&this->reject >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_element_types) = v5 != 0;
    __asan_report_store1(&this->reject, p_element_types, &this->reject);
  }
  this->reject = reject;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 5262: range 00000000112FF5A8-00000000112FF615
void __cdecl data::AttachToElementTypeMixin::~AttachToElementTypeMixin(data::AttachToElementTypeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToElementTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  std::vector<data::ElementType>::~vector(&this->element_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5262: range 00000000112FF616-00000000112FF640
void __cdecl data::AttachToElementTypeMixin::~AttachToElementTypeMixin(data::AttachToElementTypeMixin *const this)
{
  data::AttachToElementTypeMixin::~AttachToElementTypeMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 5267: range 00000000100CAC08-00000000100CAC18
const char *__cdecl data::AttachToElementTypeMixin::getTypeName(const data::AttachToElementTypeMixin *const this)
{
  return "AttachToElementTypeMixin";
};

// Line 5268: range 00000000100CAC1A-00000000100CADB6
int32_t __cdecl data::AttachToElementTypeMixin::getHashNum(const data::AttachToElementTypeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToElementTypeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToElementTypeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5284: range 0000000011273160-00000000112731A1
void __cdecl data::AttachToElementTypeMixinFactory::AttachToElementTypeMixinFactory(
        data::AttachToElementTypeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToElementTypeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToElementTypeMixinFactory = v2;
};

// Line 5292: range 00000000112734AA-0000000011273552
void __cdecl data::AttachToAbilityStateMixin::AttachToAbilityStateMixin(data::AttachToAbilityStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToAbilityStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::AbilityState>::vector(&this->ability_states);
  if ( *(char *)(((unsigned __int64)&this->reject >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->reject, v1, &this->reject);
  this->reject = 0;
  std::string::basic_string(&this->modifier_name);
};

// Line 5292: range 0000000011273908-0000000011273A44
void __cdecl data::AttachToAbilityStateMixin::AttachToAbilityStateMixin(
        data::AttachToAbilityStateMixin *const this,
        const data::AttachToAbilityStateMixin *a2)
{
  int (**v2)(...); // rdx
  data::AbilityStateArray *p_ability_states; // rsi
  bool reject; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToAbilityStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_ability_states = &a2->ability_states;
  std::vector<data::AbilityState>::vector(&this->ability_states, &a2->ability_states);
  if ( *(char *)(((unsigned __int64)&a2->reject >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->reject, p_ability_states, &a2->reject);
  reject = a2->reject;
  v5 = *(_BYTE *)(((unsigned __int64)&this->reject >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_ability_states) = v5 != 0;
    __asan_report_store1(&this->reject, p_ability_states, &this->reject);
  }
  this->reject = reject;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 5301: range 00000000112FF57C-00000000112FF5A6
void __cdecl data::AttachToAbilityStateMixin::~AttachToAbilityStateMixin(data::AttachToAbilityStateMixin *const this)
{
  data::AttachToAbilityStateMixin::~AttachToAbilityStateMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 5301: range 00000000112FF50E-00000000112FF57B
void __cdecl data::AttachToAbilityStateMixin::~AttachToAbilityStateMixin(data::AttachToAbilityStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToAbilityStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  std::vector<data::AbilityState>::~vector(&this->ability_states);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5306: range 00000000100CADB8-00000000100CADC8
const char *__cdecl data::AttachToAbilityStateMixin::getTypeName(const data::AttachToAbilityStateMixin *const this)
{
  return "AttachToAbilityStateMixin";
};

// Line 5307: range 00000000100CADCA-00000000100CAF66
int32_t __cdecl data::AttachToAbilityStateMixin::getHashNum(const data::AttachToAbilityStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToAbilityStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToAbilityStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5323: range 0000000011273D2E-0000000011273D6F
void __cdecl data::AttachToAbilityStateMixinFactory::AttachToAbilityStateMixinFactory(
        data::AttachToAbilityStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToAbilityStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToAbilityStateMixinFactory = v2;
};

// Line 5376: range 0000000011274338-0000000011274467
void __cdecl data::WatcherSystemMixin::WatcherSystemMixin(data::WatcherSystemMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::WatcherSystemMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->watcher_id, v1);
  }
  this->watcher_id = 0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->mixin_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->mixin_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->mixin_type, v3);
  }
  this->mixin_type = ElementReaction;
  if ( *(_BYTE *)(((unsigned __int64)&this->listen_entity_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->listen_entity_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->listen_entity_type, v3);
  }
  this->listen_entity_type = None_49;
  std::string::basic_string(&this->listen_state_id);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
};

// Line 5376: range 000000000F7CD6CA-000000000F7CD8FF
void __cdecl data::WatcherSystemMixin::WatcherSystemMixin(
        data::WatcherSystemMixin *const this,
        const data::WatcherSystemMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t watcher_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  data::WatcherSystemMixinType mixin_type; // ecx
  char v7; // dl
  data::WatcherSystemListenType listen_entity_type; // ecx
  char v9; // al
  const data::WatcherSystemMixin *v10; // [rsp+0h] [rbp-20h]

  v10 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::WatcherSystemMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->watcher_id);
  }
  watcher_id = a2->watcher_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->watcher_id, a2);
  }
  this->watcher_id = watcher_id;
  v5 = (((_BYTE)v10 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v10->mixin_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v10 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v10->mixin_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v10->mixin_type);
  }
  mixin_type = v10->mixin_type;
  v7 = *(_BYTE *)(((unsigned __int64)&this->mixin_type >> 3) + 0x7FFF8000);
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
  {
    LOBYTE(v5) = v7 != 0;
    __asan_report_store4(&this->mixin_type, v5);
  }
  this->mixin_type = mixin_type;
  if ( *(_BYTE *)(((unsigned __int64)&v10->listen_entity_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v10->listen_entity_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v10->listen_entity_type);
  }
  listen_entity_type = v10->listen_entity_type;
  v9 = *(_BYTE *)(((unsigned __int64)&this->listen_entity_type >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(v5) = v9 != 0;
    __asan_report_store4(&this->listen_entity_type, v5);
  }
  this->listen_entity_type = listen_entity_type;
  std::string::basic_string(&this->listen_state_id, &v10->listen_state_id);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &v10->predicates);
};

// Line 5387: range 000000000F8FCB4A-000000000F8FCB74
void __cdecl data::WatcherSystemMixin::~WatcherSystemMixin(data::WatcherSystemMixin *const this)
{
  data::WatcherSystemMixin::~WatcherSystemMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 5387: range 000000000F8FCADC-000000000F8FCB49
void __cdecl data::WatcherSystemMixin::~WatcherSystemMixin(data::WatcherSystemMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WatcherSystemMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::string::~string(&this->listen_state_id);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5392: range 00000000100CAF68-00000000100CAF78
const char *__cdecl data::WatcherSystemMixin::getTypeName(const data::WatcherSystemMixin *const this)
{
  return "WatcherSystemMixin";
};

// Line 5393: range 00000000100CAF7A-00000000100CB116
int32_t __cdecl data::WatcherSystemMixin::getHashNum(const data::WatcherSystemMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WatcherSystemMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WatcherSystemMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5409: range 0000000011274B04-0000000011274B45
void __cdecl data::WatcherSystemMixinFactory::WatcherSystemMixinFactory(data::WatcherSystemMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WatcherSystemMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WatcherSystemMixinFactory = v2;
};

// Line 5417: range 0000000011274E4E-0000000011274E9B
void __cdecl data::ElementOuterGlowEffectMixin::ElementOuterGlowEffectMixin(
        data::ElementOuterGlowEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ElementOuterGlowEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 5417: range 000000001127539C-00000000112753F4
void __cdecl data::ElementOuterGlowEffectMixin::ElementOuterGlowEffectMixin(
        data::ElementOuterGlowEffectMixin *const this,
        const data::ElementOuterGlowEffectMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElementOuterGlowEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 5423: range 00000000112FF494-00000000112FF4E1
void __cdecl data::ElementOuterGlowEffectMixin::~ElementOuterGlowEffectMixin(
        data::ElementOuterGlowEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementOuterGlowEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5423: range 00000000112FF4E2-00000000112FF50C
void __cdecl data::ElementOuterGlowEffectMixin::~ElementOuterGlowEffectMixin(
        data::ElementOuterGlowEffectMixin *const this)
{
  data::ElementOuterGlowEffectMixin::~ElementOuterGlowEffectMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 5428: range 00000000100CB118-00000000100CB128
const char *__cdecl data::ElementOuterGlowEffectMixin::getTypeName(const data::ElementOuterGlowEffectMixin *const this)
{
  return "ElementOuterGlowEffectMixin";
};

// Line 5429: range 00000000100CB12A-00000000100CB2C6
int32_t __cdecl data::ElementOuterGlowEffectMixin::getHashNum(const data::ElementOuterGlowEffectMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElementOuterGlowEffectMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElementOuterGlowEffectMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5445: range 000000001127563E-000000001127567F
void __cdecl data::ElementOuterGlowEffectMixinFactory::ElementOuterGlowEffectMixinFactory(
        data::ElementOuterGlowEffectMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementOuterGlowEffectMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElementOuterGlowEffectMixinFactory = v2;
};

// Line 5453: range 0000000011275988-00000000112759E5
void __cdecl data::ApplyModifierWithSharedDurabilityMixin::ApplyModifierWithSharedDurabilityMixin(
        data::ApplyModifierWithSharedDurabilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ApplyModifierWithSharedDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
};

// Line 5453: range 0000000011275DEA-0000000011275E80
void __cdecl data::ApplyModifierWithSharedDurabilityMixin::ApplyModifierWithSharedDurabilityMixin(
        data::ApplyModifierWithSharedDurabilityMixin *const this,
        const data::ApplyModifierWithSharedDurabilityMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ApplyModifierWithSharedDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
};

// Line 5460: range 00000000112FF468-00000000112FF492
void __cdecl data::ApplyModifierWithSharedDurabilityMixin::~ApplyModifierWithSharedDurabilityMixin(
        data::ApplyModifierWithSharedDurabilityMixin *const this)
{
  data::ApplyModifierWithSharedDurabilityMixin::~ApplyModifierWithSharedDurabilityMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 5460: range 00000000112FF40A-00000000112FF467
void __cdecl data::ApplyModifierWithSharedDurabilityMixin::~ApplyModifierWithSharedDurabilityMixin(
        data::ApplyModifierWithSharedDurabilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyModifierWithSharedDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5465: range 00000000100CB2C8-00000000100CB2D8
const char *__cdecl data::ApplyModifierWithSharedDurabilityMixin::getTypeName(
        const data::ApplyModifierWithSharedDurabilityMixin *const this)
{
  return "ApplyModifierWithSharedDurabilityMixin";
};

// Line 5466: range 00000000100CB2DA-00000000100CB476
int32_t __cdecl data::ApplyModifierWithSharedDurabilityMixin::getHashNum(
        const data::ApplyModifierWithSharedDurabilityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ApplyModifierWithSharedDurabilityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ApplyModifierWithSharedDurabilityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5482: range 000000001127616A-00000000112761AB
void __cdecl data::ApplyModifierWithSharedDurabilityMixinFactory::ApplyModifierWithSharedDurabilityMixinFactory(
        data::ApplyModifierWithSharedDurabilityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ApplyModifierWithSharedDurabilityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ApplyModifierWithSharedDurabilityMixinFactory = v2;
};

// Line 5490: range 00000000112764B4-00000000112765A5
void __cdecl data::PlayerUidNotifyMixin::PlayerUidNotifyMixin(data::PlayerUidNotifyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::PlayerUidNotifyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->op_param);
  if ( *(_BYTE *)(((unsigned __int64)&this->op_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->op_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->op_type, v1);
  }
  this->op_type = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->logic >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->logic >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->logic, (((_BYTE)this + 68) & 7u) + 3);
  }
  this->logic = Greater_1;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 5490: range 000000001127695A-0000000011276B1A
void __cdecl data::PlayerUidNotifyMixin::PlayerUidNotifyMixin(
        data::PlayerUidNotifyMixin *const this,
        const data::PlayerUidNotifyMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_op_param; // rsi
  uint32_t op_type; // ecx
  char v5; // al
  __int64 v6; // rsi
  data::RelationalOperator logic; // ecx
  char v8; // dl

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PlayerUidNotifyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_op_param = &a2->op_param;
  std::string::basic_string(&this->op_param, &a2->op_param);
  if ( *(_BYTE *)(((unsigned __int64)&a2->op_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->op_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->op_type);
  }
  op_type = a2->op_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->op_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_op_param) = v5 != 0;
    __asan_report_store4(&this->op_type, p_op_param);
  }
  this->op_type = op_type;
  v6 = (((_BYTE)a2 + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->logic >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->logic >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->logic);
  }
  logic = a2->logic;
  v8 = *(_BYTE *)(((unsigned __int64)&this->logic >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this + 68) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->logic, v6);
  }
  this->logic = logic;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 5500: range 00000000112FF370-00000000112FF3DD
void __cdecl data::PlayerUidNotifyMixin::~PlayerUidNotifyMixin(data::PlayerUidNotifyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlayerUidNotifyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::string::~string(&this->op_param);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5500: range 00000000112FF3DE-00000000112FF408
void __cdecl data::PlayerUidNotifyMixin::~PlayerUidNotifyMixin(data::PlayerUidNotifyMixin *const this)
{
  data::PlayerUidNotifyMixin::~PlayerUidNotifyMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 5505: range 00000000100CB478-00000000100CB488
const char *__cdecl data::PlayerUidNotifyMixin::getTypeName(const data::PlayerUidNotifyMixin *const this)
{
  return "PlayerUidNotifyMixin";
};

// Line 5506: range 00000000100CB48A-00000000100CB626
int32_t __cdecl data::PlayerUidNotifyMixin::getHashNum(const data::PlayerUidNotifyMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PlayerUidNotifyMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PlayerUidNotifyMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5522: range 0000000011276E04-0000000011276E45
void __cdecl data::PlayerUidNotifyMixinFactory::PlayerUidNotifyMixinFactory(
        data::PlayerUidNotifyMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlayerUidNotifyMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PlayerUidNotifyMixinFactory = v2;
};

// Line 5530: range 000000001127714E-00000000112771E9
void __cdecl data::AttachToPlayStageMixin::AttachToPlayStageMixin(data::AttachToPlayStageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToPlayStageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->stage >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->stage, v1);
  }
  this->stage = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 5530: range 00000000112775EE-00000000112776F9
void __cdecl data::AttachToPlayStageMixin::AttachToPlayStageMixin(
        data::AttachToPlayStageMixin *const this,
        const data::AttachToPlayStageMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t stage; // ecx
  char v4; // al
  const data::AttachToPlayStageMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToPlayStageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->stage >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->stage >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->stage);
  }
  stage = a2->stage;
  v4 = *(_BYTE *)(((unsigned __int64)&this->stage >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->stage, a2);
  }
  this->stage = stage;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &v5->actions);
};

// Line 5538: range 00000000112FF344-00000000112FF36E
void __cdecl data::AttachToPlayStageMixin::~AttachToPlayStageMixin(data::AttachToPlayStageMixin *const this)
{
  data::AttachToPlayStageMixin::~AttachToPlayStageMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 5538: range 00000000112FF2E6-00000000112FF343
void __cdecl data::AttachToPlayStageMixin::~AttachToPlayStageMixin(data::AttachToPlayStageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToPlayStageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5543: range 00000000100CB628-00000000100CB638
const char *__cdecl data::AttachToPlayStageMixin::getTypeName(const data::AttachToPlayStageMixin *const this)
{
  return "AttachToPlayStageMixin";
};

// Line 5544: range 00000000100CB63A-00000000100CB7D6
int32_t __cdecl data::AttachToPlayStageMixin::getHashNum(const data::AttachToPlayStageMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToPlayStageMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToPlayStageMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5560: range 00000000112779E2-0000000011277A23
void __cdecl data::AttachToPlayStageMixinFactory::AttachToPlayStageMixinFactory(
        data::AttachToPlayStageMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToPlayStageMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToPlayStageMixinFactory = v2;
};

// Line 5568: range 0000000011277D2C-0000000011277EC8
void __cdecl data::ServerCreateGadgetOnKillMixin::ServerCreateGadgetOnKillMixin(
        data::ServerCreateGadgetOnKillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx
  __int64 v6; // rsi
  __int64 v7; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ServerCreateGadgetOnKillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->gadget_idlist);
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->camp_id, v1);
  }
  this->camp_id = 0;
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->camp_target_type, v3);
  }
  this->camp_target_type = None_22;
  if ( *(char *)(((unsigned __int64)&this->random_create >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->random_create, v3, &this->random_create);
  this->random_create = 0;
  v4 = ((_BYTE)this + 65) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->use_origin_owner_as_gadget_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->use_origin_owner_as_gadget_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->use_origin_owner_as_gadget_owner, v4, v5);
  this->use_origin_owner_as_gadget_owner = 0;
  v6 = ((_BYTE)this + 66) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->life_by_owner_is_alive, v6, v7);
  this->life_by_owner_is_alive = 0;
};

// Line 5568: range 00000000112782E4-00000000112785EA
void __cdecl data::ServerCreateGadgetOnKillMixin::ServerCreateGadgetOnKillMixin(
        data::ServerCreateGadgetOnKillMixin *const this,
        const data::ServerCreateGadgetOnKillMixin *a2)
{
  int (**v2)(...); // rdx
  data::UInt32List *p_gadget_idlist; // rsi
  uint32_t camp_id; // ecx
  char v5; // al
  __int64 v6; // rsi
  data::TargetType camp_target_type; // ecx
  char v8; // dl
  bool random_create; // cl
  char v10; // al
  __int64 v11; // rsi
  __int64 v12; // rdx
  bool use_origin_owner_as_gadget_owner; // cl
  char v14; // dl
  __int64 v15; // rdx
  __int64 v16; // rsi
  __int64 v17; // rdx
  bool life_by_owner_is_alive; // cl
  char v19; // dl
  __int64 v20; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ServerCreateGadgetOnKillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_gadget_idlist = &a2->gadget_idlist;
  std::vector<unsigned int>::vector(&this->gadget_idlist, &a2->gadget_idlist);
  if ( *(_BYTE *)(((unsigned __int64)&a2->camp_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->camp_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->camp_id);
  }
  camp_id = a2->camp_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->camp_id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_gadget_idlist) = v5 != 0;
    __asan_report_store4(&this->camp_id, p_gadget_idlist);
  }
  this->camp_id = camp_id;
  v6 = (((_BYTE)a2 + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camp_target_type >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->camp_target_type >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->camp_target_type);
  }
  camp_target_type = a2->camp_target_type;
  v8 = *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v8 != 0;
  if ( v8 != 0 && (char)((((_BYTE)this + 60) & 7) + 3) >= v8 )
    __asan_report_store4(&this->camp_target_type, v6);
  this->camp_target_type = camp_target_type;
  if ( *(char *)(((unsigned __int64)&a2->random_create >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->random_create, v6, &a2->random_create);
  random_create = a2->random_create;
  v10 = *(_BYTE *)(((unsigned __int64)&this->random_create >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(v6) = v10 != 0;
    __asan_report_store1(&this->random_create, v6, &this->random_create);
  }
  this->random_create = random_create;
  v11 = ((_BYTE)a2 + 65) & 7;
  v12 = (*(_BYTE *)(((unsigned __int64)&a2->use_origin_owner_as_gadget_owner >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v11 >= *(_BYTE *)(((unsigned __int64)&a2->use_origin_owner_as_gadget_owner >> 3) + 0x7FFF8000));
  if ( (_BYTE)v12 )
    __asan_report_load1(&a2->use_origin_owner_as_gadget_owner, v11, v12);
  use_origin_owner_as_gadget_owner = a2->use_origin_owner_as_gadget_owner;
  v14 = *(_BYTE *)(((unsigned __int64)&this->use_origin_owner_as_gadget_owner >> 3) + 0x7FFF8000);
  LOBYTE(v11) = v14 != 0;
  v15 = (v14 != 0) & (unsigned __int8)((((unsigned __int8)this + 65) & 7) >= v14);
  if ( (_BYTE)v15 )
    __asan_report_store1(&this->use_origin_owner_as_gadget_owner, v11, v15);
  this->use_origin_owner_as_gadget_owner = use_origin_owner_as_gadget_owner;
  v16 = ((_BYTE)a2 + 66) & 7;
  v17 = (*(_BYTE *)(((unsigned __int64)&a2->life_by_owner_is_alive >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((unsigned __int64)&a2->life_by_owner_is_alive >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_load1(&a2->life_by_owner_is_alive, v16, v17);
  life_by_owner_is_alive = a2->life_by_owner_is_alive;
  v19 = *(_BYTE *)(((unsigned __int64)&this->life_by_owner_is_alive >> 3) + 0x7FFF8000);
  LOBYTE(v16) = v19 != 0;
  v20 = (v19 != 0) & (unsigned __int8)((((unsigned __int8)this + 66) & 7) >= v19);
  if ( (_BYTE)v20 )
    __asan_report_store1(&this->life_by_owner_is_alive, v16, v20);
  this->life_by_owner_is_alive = life_by_owner_is_alive;
};

// Line 5580: range 00000000112FF25C-00000000112FF2B9
void __cdecl data::ServerCreateGadgetOnKillMixin::~ServerCreateGadgetOnKillMixin(
        data::ServerCreateGadgetOnKillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerCreateGadgetOnKillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->gadget_idlist);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5580: range 00000000112FF2BA-00000000112FF2E4
void __cdecl data::ServerCreateGadgetOnKillMixin::~ServerCreateGadgetOnKillMixin(
        data::ServerCreateGadgetOnKillMixin *const this)
{
  data::ServerCreateGadgetOnKillMixin::~ServerCreateGadgetOnKillMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 5585: range 00000000100CB7D8-00000000100CB7E8
const char *__cdecl data::ServerCreateGadgetOnKillMixin::getTypeName(
        const data::ServerCreateGadgetOnKillMixin *const this)
{
  return "ServerCreateGadgetOnKillMixin";
};

// Line 5586: range 00000000100CB7EA-00000000100CB986
int32_t __cdecl data::ServerCreateGadgetOnKillMixin::getHashNum(const data::ServerCreateGadgetOnKillMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ServerCreateGadgetOnKillMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ServerCreateGadgetOnKillMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5602: range 00000000112788D4-0000000011278915
void __cdecl data::ServerCreateGadgetOnKillMixinFactory::ServerCreateGadgetOnKillMixinFactory(
        data::ServerCreateGadgetOnKillMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerCreateGadgetOnKillMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ServerCreateGadgetOnKillMixinFactory = v2;
};

// Line 5610: range 0000000011278C1E-0000000011278C7B
void __cdecl data::CameraBlurMixin::CameraBlurMixin(data::CameraBlurMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CameraBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigCameraRadialBlur::ConfigCameraRadialBlur(&this->camera_radial_blur);
};

// Line 5610: range 0000000011279056-0000000011279112
void __cdecl data::CameraBlurMixin::CameraBlurMixin(data::CameraBlurMixin *const this, const data::CameraBlurMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CameraBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->camera_radial_blur >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->camera_radial_blur >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->camera_radial_blur);
  v3 = *(_QWORD *)&a2->camera_radial_blur.fade_time;
  *(_QWORD *)&this->camera_radial_blur.power = *(_QWORD *)&a2->camera_radial_blur.power;
  *(_QWORD *)&this->camera_radial_blur.fade_time = v3;
};

// Line 5617: range 00000000112FF1E2-00000000112FF22F
void __cdecl data::CameraBlurMixin::~CameraBlurMixin(data::CameraBlurMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CameraBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5617: range 00000000112FF230-00000000112FF25A
void __cdecl data::CameraBlurMixin::~CameraBlurMixin(data::CameraBlurMixin *const this)
{
  data::CameraBlurMixin::~CameraBlurMixin(this);
  operator delete(this, 0x30uLL);
};

// Line 5622: range 00000000100CB988-00000000100CB998
const char *__cdecl data::CameraBlurMixin::getTypeName(const data::CameraBlurMixin *const this)
{
  return "CameraBlurMixin";
};

// Line 5623: range 00000000100CB99A-00000000100CBB36
int32_t __cdecl data::CameraBlurMixin::getHashNum(const data::CameraBlurMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CameraBlurMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CameraBlurMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5639: range 000000001127935C-000000001127939D
void __cdecl data::CameraBlurMixinFactory::CameraBlurMixinFactory(data::CameraBlurMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CameraBlurMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CameraBlurMixinFactory = v2;
};

// Line 5647: range 00000000112796A6-0000000011279713
void __cdecl data::DoActionByGainCrystalSeedMixin::DoActionByGainCrystalSeedMixin(
        data::DoActionByGainCrystalSeedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByGainCrystalSeedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementType>::vector(&this->element_types);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 5647: range 0000000011279B38-0000000011279BFE
void __cdecl data::DoActionByGainCrystalSeedMixin::DoActionByGainCrystalSeedMixin(
        data::DoActionByGainCrystalSeedMixin *const this,
        const data::DoActionByGainCrystalSeedMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByGainCrystalSeedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementType>::vector(&this->element_types, &a2->element_types);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 5655: range 00000000112FF148-00000000112FF1B5
void __cdecl data::DoActionByGainCrystalSeedMixin::~DoActionByGainCrystalSeedMixin(
        data::DoActionByGainCrystalSeedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByGainCrystalSeedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::vector<data::ElementType>::~vector(&this->element_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5655: range 00000000112FF1B6-00000000112FF1E0
void __cdecl data::DoActionByGainCrystalSeedMixin::~DoActionByGainCrystalSeedMixin(
        data::DoActionByGainCrystalSeedMixin *const this)
{
  data::DoActionByGainCrystalSeedMixin::~DoActionByGainCrystalSeedMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 5660: range 00000000100CBB38-00000000100CBB48
const char *__cdecl data::DoActionByGainCrystalSeedMixin::getTypeName(
        const data::DoActionByGainCrystalSeedMixin *const this)
{
  return "DoActionByGainCrystalSeedMixin";
};

// Line 5661: range 00000000100CBB4A-00000000100CBCE6
int32_t __cdecl data::DoActionByGainCrystalSeedMixin::getHashNum(
        const data::DoActionByGainCrystalSeedMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByGainCrystalSeedMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByGainCrystalSeedMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5677: range 0000000011279EE8-0000000011279F29
void __cdecl data::DoActionByGainCrystalSeedMixinFactory::DoActionByGainCrystalSeedMixinFactory(
        data::DoActionByGainCrystalSeedMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByGainCrystalSeedMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByGainCrystalSeedMixinFactory = v2;
};

// Line 5685: range 000000001127A232-000000001127A28F
void __cdecl data::ModifyElementDecrateMixin::ModifyElementDecrateMixin(data::ModifyElementDecrateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyElementDecrateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->group);
};

// Line 5685: range 000000001127A694-000000001127A72A
void __cdecl data::ModifyElementDecrateMixin::ModifyElementDecrateMixin(
        data::ModifyElementDecrateMixin *const this,
        const data::ModifyElementDecrateMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyElementDecrateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->group, &a2->group);
};

// Line 5692: range 00000000112FF11C-00000000112FF146
void __cdecl data::ModifyElementDecrateMixin::~ModifyElementDecrateMixin(data::ModifyElementDecrateMixin *const this)
{
  data::ModifyElementDecrateMixin::~ModifyElementDecrateMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 5692: range 00000000112FF0BE-00000000112FF11B
void __cdecl data::ModifyElementDecrateMixin::~ModifyElementDecrateMixin(data::ModifyElementDecrateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyElementDecrateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->group);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5697: range 00000000100CBCE8-00000000100CBCF8
const char *__cdecl data::ModifyElementDecrateMixin::getTypeName(const data::ModifyElementDecrateMixin *const this)
{
  return "ModifyElementDecrateMixin";
};

// Line 5698: range 00000000100CBCFA-00000000100CBE96
int32_t __cdecl data::ModifyElementDecrateMixin::getHashNum(const data::ModifyElementDecrateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyElementDecrateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyElementDecrateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5714: range 000000001127AA14-000000001127AA55
void __cdecl data::ModifyElementDecrateMixinFactory::ModifyElementDecrateMixinFactory(
        data::ModifyElementDecrateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyElementDecrateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifyElementDecrateMixinFactory = v2;
};

// Line 5722: range 0000000010178BD8-0000000010178C4D
void __cdecl data::ElementBatchPredicated::ElementBatchPredicated(data::ElementBatchPredicated *const this)
{
  __int64 v1; // rsi

  std::vector<data::ElementType>::vector(&this->element_type_arr);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 5722: range 0000000010E51968-0000000010E51A71
void __cdecl data::ElementBatchPredicated::ElementBatchPredicated(
        data::ElementBatchPredicated *const this,
        const data::ElementBatchPredicated *a2)
{
  data::ConfigAbilityActionArray *p_fail_actions; // rsi
  bool is_json_loaded; // cl
  char v4; // al

  std::vector<data::ElementType>::vector(&this->element_type_arr, &a2->element_type_arr);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions, &a2->success_actions);
  p_fail_actions = &a2->fail_actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, p_fail_actions);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_fail_actions, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_fail_actions) = v4 != 0;
    __asan_report_store1(&this->is_json_loaded, p_fail_actions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 5722: range 0000000010590694-0000000010590765
void __cdecl data::ElementBatchPredicated::ElementBatchPredicated(
        data::ElementBatchPredicated *const this,
        data::ElementBatchPredicated *a2)
{
  std::vector<std::shared_ptr<data::ConfigAbilityAction>> *p_fail_actions; // rsi
  bool is_json_loaded; // cl
  char v4; // al

  std::vector<data::ElementType>::vector(&this->element_type_arr, &a2->element_type_arr);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->success_actions, &a2->success_actions);
  p_fail_actions = &a2->fail_actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, p_fail_actions);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_fail_actions, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_fail_actions) = v4 != 0;
    __asan_report_store1(&this->is_json_loaded, p_fail_actions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 5722: range 0000000010178C4E-0000000010178C88
void __cdecl data::ElementBatchPredicated::~ElementBatchPredicated(data::ElementBatchPredicated *const this)
{
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->success_actions);
  std::vector<data::ElementType>::~vector(&this->element_type_arr);
};

// Line 5752: range 000000001127AD96-000000001127AE51
void __cdecl data::ElementHittingOtherPredicatedMixin::ElementHittingOtherPredicatedMixin(
        data::ElementHittingOtherPredicatedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ElementHittingOtherPredicatedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->pre_predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->batch_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->batch_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->batch_count, v1);
  }
  this->batch_count = 1;
  std::vector<data::ElementBatchPredicated>::vector(&this->element_batch_predicateds);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->batch_success_actions);
};

// Line 5752: range 000000001127B1FC-000000001127B367
void __cdecl data::ElementHittingOtherPredicatedMixin::ElementHittingOtherPredicatedMixin(
        data::ElementHittingOtherPredicatedMixin *const this,
        const data::ElementHittingOtherPredicatedMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityPredicateArray *p_pre_predicates; // rsi
  uint32_t batch_count; // ecx
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElementHittingOtherPredicatedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_pre_predicates = &a2->pre_predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->pre_predicates, &a2->pre_predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->batch_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->batch_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->batch_count);
  }
  batch_count = a2->batch_count;
  v5 = *(_BYTE *)(((unsigned __int64)&this->batch_count >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_pre_predicates) = v5 != 0;
    __asan_report_store4(&this->batch_count, p_pre_predicates);
  }
  this->batch_count = batch_count;
  std::vector<data::ElementBatchPredicated>::vector(&this->element_batch_predicateds, &a2->element_batch_predicateds);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->batch_success_actions,
    &a2->batch_success_actions);
};

// Line 5762: range 00000000112FF014-00000000112FF091
void __cdecl data::ElementHittingOtherPredicatedMixin::~ElementHittingOtherPredicatedMixin(
        data::ElementHittingOtherPredicatedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementHittingOtherPredicatedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->batch_success_actions);
  std::vector<data::ElementBatchPredicated>::~vector(&this->element_batch_predicateds);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->pre_predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5762: range 00000000112FF092-00000000112FF0BC
void __cdecl data::ElementHittingOtherPredicatedMixin::~ElementHittingOtherPredicatedMixin(
        data::ElementHittingOtherPredicatedMixin *const this)
{
  data::ElementHittingOtherPredicatedMixin::~ElementHittingOtherPredicatedMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 5767: range 00000000100CBE98-00000000100CBEA8
const char *__cdecl data::ElementHittingOtherPredicatedMixin::getTypeName(
        const data::ElementHittingOtherPredicatedMixin *const this)
{
  return "ElementHittingOtherPredicatedMixin";
};

// Line 5768: range 00000000100CBEAA-00000000100CC046
int32_t __cdecl data::ElementHittingOtherPredicatedMixin::getHashNum(
        const data::ElementHittingOtherPredicatedMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElementHittingOtherPredicatedMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElementHittingOtherPredicatedMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5784: range 000000001127B650-000000001127B691
void __cdecl data::ElementHittingOtherPredicatedMixinFactory::ElementHittingOtherPredicatedMixinFactory(
        data::ElementHittingOtherPredicatedMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementHittingOtherPredicatedMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElementHittingOtherPredicatedMixinFactory = v2;
};

// Line 5824: range 000000001127BC92-000000001127BDC1
void __cdecl data::ResistClimateMixin::ResistClimateMixin(data::ResistClimateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ResistClimateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::JsonClimateType>::vector(&this->climate_types);
  if ( *(_BYTE *)(((unsigned __int64)&this->source >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->source >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->source, v1);
  }
  this->source = All_9;
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->trend >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trend >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->trend, v3);
  }
  this->trend = All_10;
  data::DynamicFloat::DynamicFloat(&this->ratio);
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v3);
  }
  this->type = Both_0;
};

// Line 5824: range 000000001127C2C0-000000001127C4F5
void __cdecl data::ResistClimateMixin::ResistClimateMixin(
        data::ResistClimateMixin *const this,
        const data::ResistClimateMixin *a2)
{
  int (**v2)(...); // rdx
  data::JsonClimateTypeList *p_climate_types; // rsi
  data::ClimateSourceType source; // ecx
  char v5; // al
  __int64 v6; // rsi
  data::ClimateTrendType trend; // ecx
  char v8; // dl
  data::DynamicFloat *p_ratio; // rsi
  data::AvatarStageType type; // ecx
  char v11; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ResistClimateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_climate_types = &a2->climate_types;
  std::vector<data::JsonClimateType>::vector(&this->climate_types, &a2->climate_types);
  if ( *(_BYTE *)(((unsigned __int64)&a2->source >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->source >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->source);
  }
  source = a2->source;
  v5 = *(_BYTE *)(((unsigned __int64)&this->source >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_climate_types) = v5 != 0;
    __asan_report_store4(&this->source, p_climate_types);
  }
  this->source = source;
  v6 = (((_BYTE)a2 + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->trend >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->trend >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->trend);
  }
  trend = a2->trend;
  v8 = *(_BYTE *)(((unsigned __int64)&this->trend >> 3) + 0x7FFF8000);
  if ( v8 != 0 && (char)((((_BYTE)this + 60) & 7) + 3) >= v8 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->trend, v6);
  }
  this->trend = trend;
  p_ratio = &a2->ratio;
  data::DynamicFloat::DynamicFloat(&this->ratio, &a2->ratio);
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v11 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v11 != 0 && v11 <= 3 )
  {
    LOBYTE(p_ratio) = v11 != 0;
    __asan_report_store4(&this->type, p_ratio);
  }
  this->type = type;
};

// Line 5835: range 00000000112FEFE8-00000000112FF012
void __cdecl data::ResistClimateMixin::~ResistClimateMixin(data::ResistClimateMixin *const this)
{
  data::ResistClimateMixin::~ResistClimateMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 5835: range 00000000112FEF7A-00000000112FEFE7
void __cdecl data::ResistClimateMixin::~ResistClimateMixin(data::ResistClimateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResistClimateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->ratio);
  std::vector<data::JsonClimateType>::~vector(&this->climate_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5840: range 00000000100CC048-00000000100CC058
const char *__cdecl data::ResistClimateMixin::getTypeName(const data::ResistClimateMixin *const this)
{
  return "ResistClimateMixin";
};

// Line 5841: range 00000000100CC05A-00000000100CC1F6
int32_t __cdecl data::ResistClimateMixin::getHashNum(const data::ResistClimateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ResistClimateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ResistClimateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5857: range 000000001127C7DE-000000001127C81F
void __cdecl data::ResistClimateMixinFactory::ResistClimateMixinFactory(data::ResistClimateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ResistClimateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ResistClimateMixinFactory = v2;
};

// Line 5865: range 000000001127CB28-000000001127CC30
void __cdecl data::ServerUpdateGlobalValueMixin::ServerUpdateGlobalValueMixin(
        data::ServerUpdateGlobalValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ServerUpdateGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->key);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 5865: range 000000001127D080-000000001127D1EC
void __cdecl data::ServerUpdateGlobalValueMixin::ServerUpdateGlobalValueMixin(
        data::ServerUpdateGlobalValueMixin *const this,
        const data::ServerUpdateGlobalValueMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_key; // rsi
  bool use_limit_range; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ServerUpdateGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_key = &a2->key;
  std::string::basic_string(&this->key, &a2->key);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_key, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_key) = v5 != 0;
    __asan_report_store1(&this->use_limit_range, p_key, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
};

// Line 5875: range 00000000112FEED0-00000000112FEF4D
void __cdecl data::ServerUpdateGlobalValueMixin::~ServerUpdateGlobalValueMixin(
        data::ServerUpdateGlobalValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerUpdateGlobalValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  std::string::~string(&this->key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5875: range 00000000112FEF4E-00000000112FEF78
void __cdecl data::ServerUpdateGlobalValueMixin::~ServerUpdateGlobalValueMixin(
        data::ServerUpdateGlobalValueMixin *const this)
{
  data::ServerUpdateGlobalValueMixin::~ServerUpdateGlobalValueMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 5880: range 00000000100CC1F8-00000000100CC208
const char *__cdecl data::ServerUpdateGlobalValueMixin::getTypeName(
        const data::ServerUpdateGlobalValueMixin *const this)
{
  return "ServerUpdateGlobalValueMixin";
};

// Line 5881: range 00000000100CC20A-00000000100CC3A6
int32_t __cdecl data::ServerUpdateGlobalValueMixin::getHashNum(const data::ServerUpdateGlobalValueMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ServerUpdateGlobalValueMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ServerUpdateGlobalValueMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5897: range 000000001127D4D6-000000001127D517
void __cdecl data::ServerUpdateGlobalValueMixinFactory::ServerUpdateGlobalValueMixinFactory(
        data::ServerUpdateGlobalValueMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerUpdateGlobalValueMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ServerUpdateGlobalValueMixinFactory = v2;
};

// Line 5905: range 000000001127D820-000000001127DA76
void __cdecl data::ElementReactionShockMixin::ElementReactionShockMixin(data::ElementReactionShockMixin *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int (**v5)(...); // rdx
  char v6[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ElementReactionShockMixin::ElementReactionShockMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v5 = (int (**)(...))(&`vtable for'data::ElementReactionShockMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v5;
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->think_interval, v1);
  }
  this->think_interval = 0.0;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    &this->camp_global_key,
    "ElementReaction_Shock_Camp",
    (const std::allocator<char> *)(v2 + 32));
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_WORD *)(((unsigned __int64)&this->attack_action >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigAbilityAction>();
  if ( *(_WORD *)(((unsigned __int64)&this->conduct_action >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigAbilityAction>();
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 5905: range 000000001127DEC0-000000001127E004
void __cdecl data::ElementReactionShockMixin::ElementReactionShockMixin(
        data::ElementReactionShockMixin *const this,
        const data::ElementReactionShockMixin *a2)
{
  int (**v2)(...); // rdx
  float think_interval; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElementReactionShockMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->think_interval);
  }
  think_interval = a2->think_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->think_interval, a2);
  }
  this->think_interval = think_interval;
  std::string::basic_string(&this->camp_global_key, &a2->camp_global_key);
  std::shared_ptr<data::ConfigAbilityAction>::shared_ptr(&this->attack_action, &a2->attack_action);
  std::shared_ptr<data::ConfigAbilityAction>::shared_ptr(&this->conduct_action, &a2->conduct_action);
};

// Line 5915: range 00000000112FEEA4-00000000112FEECE
void __cdecl data::ElementReactionShockMixin::~ElementReactionShockMixin(data::ElementReactionShockMixin *const this)
{
  data::ElementReactionShockMixin::~ElementReactionShockMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 5915: range 00000000112FEE26-00000000112FEEA3
void __cdecl data::ElementReactionShockMixin::~ElementReactionShockMixin(data::ElementReactionShockMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementReactionShockMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr(&this->conduct_action);
  std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr(&this->attack_action);
  std::string::~string(&this->camp_global_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5920: range 00000000100CC3A8-00000000100CC3B8
const char *__cdecl data::ElementReactionShockMixin::getTypeName(const data::ElementReactionShockMixin *const this)
{
  return "ElementReactionShockMixin";
};

// Line 5921: range 00000000100CC3BA-00000000100CC556
int32_t __cdecl data::ElementReactionShockMixin::getHashNum(const data::ElementReactionShockMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElementReactionShockMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElementReactionShockMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5937: range 000000001127E2EE-000000001127E32F
void __cdecl data::ElementReactionShockMixinFactory::ElementReactionShockMixinFactory(
        data::ElementReactionShockMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementReactionShockMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElementReactionShockMixinFactory = v2;
};

// Line 5945: range 000000001127E638-000000001127E6D9
void __cdecl data::BillboardMarkMixin::BillboardMarkMixin(data::BillboardMarkMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BillboardMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->icon_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->show_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->show_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->show_distance, v1);
  }
  this->show_distance = 60.0;
};

// Line 5945: range 000000001127EAF4-000000001127EC02
void __cdecl data::BillboardMarkMixin::BillboardMarkMixin(
        data::BillboardMarkMixin *const this,
        const data::BillboardMarkMixin *a2)
{
  int (**v2)(...); // rdx
  float show_distance; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BillboardMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->icon_name, &a2->icon_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->show_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->show_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->show_distance);
  }
  show_distance = a2->show_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->show_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->show_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->show_distance, &a2->icon_name);
  }
  this->show_distance = show_distance;
};

// Line 5953: range 00000000112FED9C-00000000112FEDF9
void __cdecl data::BillboardMarkMixin::~BillboardMarkMixin(data::BillboardMarkMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BillboardMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->icon_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5953: range 00000000112FEDFA-00000000112FEE24
void __cdecl data::BillboardMarkMixin::~BillboardMarkMixin(data::BillboardMarkMixin *const this)
{
  data::BillboardMarkMixin::~BillboardMarkMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 5958: range 00000000100CC558-00000000100CC568
const char *__cdecl data::BillboardMarkMixin::getTypeName(const data::BillboardMarkMixin *const this)
{
  return "BillboardMarkMixin";
};

// Line 5959: range 00000000100CC56A-00000000100CC706
int32_t __cdecl data::BillboardMarkMixin::getHashNum(const data::BillboardMarkMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BillboardMarkMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BillboardMarkMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5975: range 000000001127EEEC-000000001127EF2D
void __cdecl data::BillboardMarkMixinFactory::BillboardMarkMixinFactory(data::BillboardMarkMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BillboardMarkMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BillboardMarkMixinFactory = v2;
};

// Line 5983: range 000000001127F236-000000001127F2CE
void __cdecl data::BillboardFixedMarkMixin::BillboardFixedMarkMixin(data::BillboardFixedMarkMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BillboardFixedMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->prefab_name);
  if ( *(char *)(((unsigned __int64)&this->only_show_in_element_view >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->only_show_in_element_view, v1, &this->only_show_in_element_view);
  this->only_show_in_element_view = 0;
};

// Line 5983: range 000000001127F6EA-000000001127F7F6
void __cdecl data::BillboardFixedMarkMixin::BillboardFixedMarkMixin(
        data::BillboardFixedMarkMixin *const this,
        const data::BillboardFixedMarkMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_prefab_name; // rsi
  bool only_show_in_element_view; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BillboardFixedMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_prefab_name = &a2->prefab_name;
  std::string::basic_string(&this->prefab_name, &a2->prefab_name);
  if ( *(char *)(((unsigned __int64)&a2->only_show_in_element_view >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->only_show_in_element_view, p_prefab_name, &a2->only_show_in_element_view);
  only_show_in_element_view = a2->only_show_in_element_view;
  v5 = *(_BYTE *)(((unsigned __int64)&this->only_show_in_element_view >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_prefab_name) = v5 != 0;
    __asan_report_store1(&this->only_show_in_element_view, p_prefab_name, &this->only_show_in_element_view);
  }
  this->only_show_in_element_view = only_show_in_element_view;
};

// Line 5991: range 00000000112FED12-00000000112FED6F
void __cdecl data::BillboardFixedMarkMixin::~BillboardFixedMarkMixin(data::BillboardFixedMarkMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BillboardFixedMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->prefab_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 5991: range 00000000112FED70-00000000112FED9A
void __cdecl data::BillboardFixedMarkMixin::~BillboardFixedMarkMixin(data::BillboardFixedMarkMixin *const this)
{
  data::BillboardFixedMarkMixin::~BillboardFixedMarkMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 5996: range 00000000100CC708-00000000100CC718
const char *__cdecl data::BillboardFixedMarkMixin::getTypeName(const data::BillboardFixedMarkMixin *const this)
{
  return "BillboardFixedMarkMixin";
};

// Line 5997: range 00000000100CC71A-00000000100CC8B6
int32_t __cdecl data::BillboardFixedMarkMixin::getHashNum(const data::BillboardFixedMarkMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BillboardFixedMarkMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BillboardFixedMarkMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6013: range 000000001127FAE0-000000001127FB21
void __cdecl data::BillboardFixedMarkMixinFactory::BillboardFixedMarkMixinFactory(
        data::BillboardFixedMarkMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BillboardFixedMarkMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BillboardFixedMarkMixinFactory = v2;
};

// Line 6021: range 000000001127FE2A-000000001127FED0
void __cdecl data::ChangeBillboardMixin::ChangeBillboardMixin(data::ChangeBillboardMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeBillboardMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->billboard >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBillboard>();
};

// Line 6021: range 0000000011280342-00000000112803B5
void __cdecl data::ChangeBillboardMixin::ChangeBillboardMixin(
        data::ChangeBillboardMixin *const this,
        const data::ChangeBillboardMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeBillboardMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBillboard>::shared_ptr(&this->billboard, &a2->billboard);
};

// Line 6028: range 00000000112FEC88-00000000112FECE5
void __cdecl data::ChangeBillboardMixin::~ChangeBillboardMixin(data::ChangeBillboardMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeBillboardMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBillboard>::~shared_ptr(&this->billboard);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6028: range 00000000112FECE6-00000000112FED10
void __cdecl data::ChangeBillboardMixin::~ChangeBillboardMixin(data::ChangeBillboardMixin *const this)
{
  data::ChangeBillboardMixin::~ChangeBillboardMixin(this);
  operator delete(this, 0x30uLL);
};

// Line 6033: range 00000000100CC8B8-00000000100CC8C8
const char *__cdecl data::ChangeBillboardMixin::getTypeName(const data::ChangeBillboardMixin *const this)
{
  return "ChangeBillboardMixin";
};

// Line 6034: range 00000000100CC8CA-00000000100CCA66
int32_t __cdecl data::ChangeBillboardMixin::getHashNum(const data::ChangeBillboardMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeBillboardMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeBillboardMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6050: range 00000000112805FE-000000001128063F
void __cdecl data::ChangeBillboardMixinFactory::ChangeBillboardMixinFactory(
        data::ChangeBillboardMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeBillboardMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeBillboardMixinFactory = v2;
};

// Line 6058: range 0000000011280948-0000000011280A13
void __cdecl data::DisableRadarHintMixin::DisableRadarHintMixin(data::DisableRadarHintMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DisableRadarHintMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->radar_hint_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->radar_hint_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->radar_hint_id, v1);
  }
  this->radar_hint_id = 0;
  v3 = ((_BYTE)this + 36) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->disable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->disable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->disable, v3, v4);
  this->disable = 0;
};

// Line 6058: range 0000000011280DE8-0000000011280F35
void __cdecl data::DisableRadarHintMixin::DisableRadarHintMixin(
        data::DisableRadarHintMixin *const this,
        const data::DisableRadarHintMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t radar_hint_id; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool disable; // cl
  char v8; // dl
  __int64 v9; // rdx
  const data::DisableRadarHintMixin *v10; // [rsp+0h] [rbp-10h]

  v10 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DisableRadarHintMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->radar_hint_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->radar_hint_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->radar_hint_id);
  }
  radar_hint_id = a2->radar_hint_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->radar_hint_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->radar_hint_id, a2);
  }
  this->radar_hint_id = radar_hint_id;
  v5 = ((_BYTE)v10 + 36) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v10->disable >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v10->disable >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v10->disable, v5, v6);
  disable = v10->disable;
  v8 = *(_BYTE *)(((unsigned __int64)&this->disable >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->disable, v5, v9);
  this->disable = disable;
};

// Line 6066: range 00000000112FEC0E-00000000112FEC5B
void __cdecl data::DisableRadarHintMixin::~DisableRadarHintMixin(data::DisableRadarHintMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableRadarHintMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6066: range 00000000112FEC5C-00000000112FEC86
void __cdecl data::DisableRadarHintMixin::~DisableRadarHintMixin(data::DisableRadarHintMixin *const this)
{
  data::DisableRadarHintMixin::~DisableRadarHintMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 6071: range 00000000100CCA68-00000000100CCA78
const char *__cdecl data::DisableRadarHintMixin::getTypeName(const data::DisableRadarHintMixin *const this)
{
  return "DisableRadarHintMixin";
};

// Line 6072: range 00000000100CCA7A-00000000100CCC16
int32_t __cdecl data::DisableRadarHintMixin::getHashNum(const data::DisableRadarHintMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DisableRadarHintMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DisableRadarHintMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6088: range 000000001128117E-00000000112811BF
void __cdecl data::DisableRadarHintMixinFactory::DisableRadarHintMixinFactory(
        data::DisableRadarHintMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableRadarHintMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DisableRadarHintMixinFactory = v2;
};

// Line 6096: range 00000000112814C8-00000000112815EF
void __cdecl data::AttachModifierToTargetDistanceMixin::AttachModifierToTargetDistanceMixin(
        data::AttachModifierToTargetDistanceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToTargetDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->target_ids);
  if ( *(char *)(((unsigned __int64)&this->byserver >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->byserver, v1, &this->byserver);
  this->byserver = 0;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
  if ( *(char *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->remove_applied_modifier, v1, &this->remove_applied_modifier);
  this->remove_applied_modifier = 1;
  std::string::basic_string(&this->blend_param);
  std::vector<data::DynamicFloat>::vector(&this->blend_distance);
  std::string::basic_string(&this->effect_pattern);
};

// Line 6096: range 00000000112819A4-0000000011281C25
void __cdecl data::AttachModifierToTargetDistanceMixin::AttachModifierToTargetDistanceMixin(
        data::AttachModifierToTargetDistanceMixin *const this,
        const data::AttachModifierToTargetDistanceMixin *a2)
{
  int (**v2)(...); // rdx
  data::UInt32Array *p_target_ids; // rsi
  bool byserver; // cl
  char v5; // al
  data::StringArray *p_modifier_name_steps; // rsi
  bool remove_applied_modifier; // cl
  char v8; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToTargetDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_target_ids = &a2->target_ids;
  std::vector<unsigned int>::vector(&this->target_ids, &a2->target_ids);
  if ( *(char *)(((unsigned __int64)&a2->byserver >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->byserver, p_target_ids, &a2->byserver);
  byserver = a2->byserver;
  v5 = *(_BYTE *)(((unsigned __int64)&this->byserver >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_target_ids) = v5 != 0;
    __asan_report_store1(&this->byserver, p_target_ids, &this->byserver);
  }
  this->byserver = byserver;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  p_modifier_name_steps = &a2->modifier_name_steps;
  std::vector<std::string>::vector(&this->modifier_name_steps, &a2->modifier_name_steps);
  if ( *(char *)(((unsigned __int64)&a2->remove_applied_modifier >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->remove_applied_modifier, p_modifier_name_steps, &a2->remove_applied_modifier);
  remove_applied_modifier = a2->remove_applied_modifier;
  v8 = *(_BYTE *)(((unsigned __int64)&this->remove_applied_modifier >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(p_modifier_name_steps) = v8 != 0;
    __asan_report_store1(&this->remove_applied_modifier, p_modifier_name_steps, &this->remove_applied_modifier);
  }
  this->remove_applied_modifier = remove_applied_modifier;
  std::string::basic_string(&this->blend_param, &a2->blend_param);
  std::vector<data::DynamicFloat>::vector(&this->blend_distance, &a2->blend_distance);
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
};

// Line 6110: range 00000000112FEBE2-00000000112FEC0C
void __cdecl data::AttachModifierToTargetDistanceMixin::~AttachModifierToTargetDistanceMixin(
        data::AttachModifierToTargetDistanceMixin *const this)
{
  data::AttachModifierToTargetDistanceMixin::~AttachModifierToTargetDistanceMixin(this);
  operator delete(this, 0xD0uLL);
};

// Line 6110: range 00000000112FEB30-00000000112FEBE1
void __cdecl data::AttachModifierToTargetDistanceMixin::~AttachModifierToTargetDistanceMixin(
        data::AttachModifierToTargetDistanceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToTargetDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->effect_pattern);
  std::vector<data::DynamicFloat>::~vector(&this->blend_distance);
  std::string::~string(&this->blend_param);
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  std::vector<unsigned int>::~vector(&this->target_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6115: range 00000000100CCC18-00000000100CCC28
const char *__cdecl data::AttachModifierToTargetDistanceMixin::getTypeName(
        const data::AttachModifierToTargetDistanceMixin *const this)
{
  return "AttachModifierToTargetDistanceMixin";
};

// Line 6116: range 00000000100CCC2A-00000000100CCDC6
int32_t __cdecl data::AttachModifierToTargetDistanceMixin::getHashNum(
        const data::AttachModifierToTargetDistanceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToTargetDistanceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToTargetDistanceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6132: range 0000000011281F0E-0000000011281F4F
void __cdecl data::AttachModifierToTargetDistanceMixinFactory::AttachModifierToTargetDistanceMixinFactory(
        data::AttachModifierToTargetDistanceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToTargetDistanceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToTargetDistanceMixinFactory = v2;
};

// Line 6153: range 00000000112823B8-0000000011282443
void __cdecl data::MoveStateMixin::MoveStateMixin(data::MoveStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MoveStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = Dash;
};

// Line 6153: range 0000000011282818-00000000112828E5
void __cdecl data::MoveStateMixin::MoveStateMixin(data::MoveStateMixin *const this, const data::MoveStateMixin *a2)
{
  int (**v2)(...); // rdx
  data::MoveStateMixinType type; // ecx
  char v4; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MoveStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
};

// Line 6160: range 00000000112FEAB6-00000000112FEB03
void __cdecl data::MoveStateMixin::~MoveStateMixin(data::MoveStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MoveStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6160: range 00000000112FEB04-00000000112FEB2E
void __cdecl data::MoveStateMixin::~MoveStateMixin(data::MoveStateMixin *const this)
{
  data::MoveStateMixin::~MoveStateMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 6165: range 00000000100CCDC8-00000000100CCDD8
const char *__cdecl data::MoveStateMixin::getTypeName(const data::MoveStateMixin *const this)
{
  return "MoveStateMixin";
};

// Line 6166: range 00000000100CCDDA-00000000100CCF76
int32_t __cdecl data::MoveStateMixin::getHashNum(const data::MoveStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MoveStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MoveStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6182: range 0000000011282B2E-0000000011282B6F
void __cdecl data::MoveStateMixinFactory::MoveStateMixinFactory(data::MoveStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MoveStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MoveStateMixinFactory = v2;
};

// Line 6190: range 0000000011282E78-0000000011282F13
void __cdecl data::ServerFinishWatcherMixin::ServerFinishWatcherMixin(data::ServerFinishWatcherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ServerFinishWatcherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->watcher_id, v1);
  }
  this->watcher_id = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
};

// Line 6190: range 000000000F7CD94C-000000000F7CDA57
void __cdecl data::ServerFinishWatcherMixin::ServerFinishWatcherMixin(
        data::ServerFinishWatcherMixin *const this,
        const data::ServerFinishWatcherMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t watcher_id; // ecx
  char v4; // al
  const data::ServerFinishWatcherMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ServerFinishWatcherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->watcher_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->watcher_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->watcher_id);
  }
  watcher_id = a2->watcher_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->watcher_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->watcher_id, a2);
  }
  this->watcher_id = watcher_id;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &v5->predicates);
};

// Line 6198: range 000000000F8FCE7C-000000000F8FCED9
void __cdecl data::ServerFinishWatcherMixin::~ServerFinishWatcherMixin(data::ServerFinishWatcherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerFinishWatcherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6198: range 000000000F8FCEDA-000000000F8FCF04
void __cdecl data::ServerFinishWatcherMixin::~ServerFinishWatcherMixin(data::ServerFinishWatcherMixin *const this)
{
  data::ServerFinishWatcherMixin::~ServerFinishWatcherMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 6203: range 00000000100CCF78-00000000100CCF88
const char *__cdecl data::ServerFinishWatcherMixin::getTypeName(const data::ServerFinishWatcherMixin *const this)
{
  return "ServerFinishWatcherMixin";
};

// Line 6204: range 00000000100CCF8A-00000000100CD126
int32_t __cdecl data::ServerFinishWatcherMixin::getHashNum(const data::ServerFinishWatcherMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ServerFinishWatcherMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ServerFinishWatcherMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6220: range 0000000011283600-0000000011283641
void __cdecl data::ServerFinishWatcherMixinFactory::ServerFinishWatcherMixinFactory(
        data::ServerFinishWatcherMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ServerFinishWatcherMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ServerFinishWatcherMixinFactory = v2;
};

// Line 6228: range 000000001128394A-00000000112839A7
void __cdecl data::DummyMixin::DummyMixin(data::DummyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DummyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_list);
};

// Line 6228: range 0000000011283D9C-0000000011283E32
void __cdecl data::DummyMixin::DummyMixin(data::DummyMixin *const this, const data::DummyMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DummyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_list, &a2->action_list);
};

// Line 6235: range 00000000112FEA2C-00000000112FEA89
void __cdecl data::DummyMixin::~DummyMixin(data::DummyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DummyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::~vector(&this->action_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6235: range 00000000112FEA8A-00000000112FEAB4
void __cdecl data::DummyMixin::~DummyMixin(data::DummyMixin *const this)
{
  data::DummyMixin::~DummyMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 6240: range 00000000100CD128-00000000100CD138
const char *__cdecl data::DummyMixin::getTypeName(const data::DummyMixin *const this)
{
  return "DummyMixin";
};

// Line 6241: range 00000000100CD13A-00000000100CD2D6
int32_t __cdecl data::DummyMixin::getHashNum(const data::DummyMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DummyMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DummyMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6257: range 000000001128411C-000000001128415D
void __cdecl data::DummyMixinFactory::DummyMixinFactory(data::DummyMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DummyMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DummyMixinFactory = v2;
};

// Line 6265: range 0000000011284466-0000000011284549
void __cdecl data::UrgentHotFixMixin::UrgentHotFixMixin(data::UrgentHotFixMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::UrgentHotFixMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->logic_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->logic_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->logic_id, v1);
  }
  this->logic_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->think_interval, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->think_interval = 0.0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 6265: range 000000001128494E-0000000011284AE1
void __cdecl data::UrgentHotFixMixin::UrgentHotFixMixin(
        data::UrgentHotFixMixin *const this,
        const data::UrgentHotFixMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t logic_id; // ecx
  char v4; // al
  float think_interval; // xmm0_4
  const data::UrgentHotFixMixin *v6; // [rsp+0h] [rbp-20h]

  v6 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UrgentHotFixMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->logic_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->logic_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->logic_id);
  }
  logic_id = a2->logic_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->logic_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->logic_id, a2);
  }
  this->logic_id = logic_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->think_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->think_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->think_interval);
  }
  think_interval = v6->think_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->think_interval, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->think_interval = think_interval;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &v6->action_list);
};

// Line 6274: range 00000000112FEA00-00000000112FEA2A
void __cdecl data::UrgentHotFixMixin::~UrgentHotFixMixin(data::UrgentHotFixMixin *const this)
{
  data::UrgentHotFixMixin::~UrgentHotFixMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 6274: range 00000000112FE9A2-00000000112FE9FF
void __cdecl data::UrgentHotFixMixin::~UrgentHotFixMixin(data::UrgentHotFixMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UrgentHotFixMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6279: range 00000000100CD2D8-00000000100CD2E8
const char *__cdecl data::UrgentHotFixMixin::getTypeName(const data::UrgentHotFixMixin *const this)
{
  return "UrgentHotFixMixin";
};

// Line 6280: range 00000000100CD2EA-00000000100CD486
int32_t __cdecl data::UrgentHotFixMixin::getHashNum(const data::UrgentHotFixMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UrgentHotFixMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UrgentHotFixMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6296: range 0000000011284DCA-0000000011284E0B
void __cdecl data::UrgentHotFixMixinFactory::UrgentHotFixMixinFactory(data::UrgentHotFixMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UrgentHotFixMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UrgentHotFixMixinFactory = v2;
};

// Line 6304: range 0000000011285114-0000000011285380
void __cdecl data::FieldEntityCountChangeMixin::FieldEntityCountChangeMixin(
        data::FieldEntityCountChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::FieldEntityCountChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->camp_target_type, v1);
  }
  this->camp_target_type = None_22;
  v3 = ((_BYTE)this + 36) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->ignore_camp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->ignore_camp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->ignore_camp, v3, v4);
  this->ignore_camp = 0;
  v5 = ((_BYTE)this + 37) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->force_trigger_when_change_authority >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->force_trigger_when_change_authority >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->force_trigger_when_change_authority, v5, v6);
  this->force_trigger_when_change_authority = 1;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->target_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_field_enter);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_field_exit);
  if ( *(char *)(((unsigned __int64)&this->replace_on_added_in_tick >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->replace_on_added_in_tick, v5, &this->replace_on_added_in_tick);
  this->replace_on_added_in_tick = 0;
  std::string::basic_string(&this->simple_count_globa_value_key);
  if ( *(char *)(((unsigned __int64)&this->simple_count_use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->simple_count_use_limit_range, v5, &this->simple_count_use_limit_range);
  this->simple_count_use_limit_range = 0;
  data::DynamicFloat::DynamicFloat(&this->simple_count_max_value, 0.0);
  data::DynamicFloat::DynamicFloat(&this->simple_count_min_value, 0.0);
};

// Line 6304: range 00000000112857CA-0000000011285BCA
void __cdecl data::FieldEntityCountChangeMixin::FieldEntityCountChangeMixin(
        data::FieldEntityCountChangeMixin *const this,
        const data::FieldEntityCountChangeMixin *a2)
{
  int (**v2)(...); // rdx
  data::TargetType camp_target_type; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool ignore_camp; // cl
  char v8; // dl
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool force_trigger_when_change_authority; // cl
  char v13; // dl
  __int64 v14; // rdx
  data::ConfigAbilityActionArray *p_on_field_exit; // rsi
  bool replace_on_added_in_tick; // cl
  char v17; // al
  std::string *p_simple_count_globa_value_key; // rsi
  bool simple_count_use_limit_range; // cl
  char v20; // al
  const data::FieldEntityCountChangeMixin *v21; // [rsp+0h] [rbp-20h]

  v21 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FieldEntityCountChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->camp_target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->camp_target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->camp_target_type);
  }
  camp_target_type = a2->camp_target_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->camp_target_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->camp_target_type, a2);
  }
  this->camp_target_type = camp_target_type;
  v5 = ((_BYTE)v21 + 36) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v21->ignore_camp >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v21->ignore_camp >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v21->ignore_camp, v5, v6);
  ignore_camp = v21->ignore_camp;
  v8 = *(_BYTE *)(((unsigned __int64)&this->ignore_camp >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->ignore_camp, v5, v9);
  this->ignore_camp = ignore_camp;
  v10 = ((_BYTE)v21 + 37) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v21->force_trigger_when_change_authority >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v21->force_trigger_when_change_authority >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v21->force_trigger_when_change_authority, v10, v11);
  force_trigger_when_change_authority = v21->force_trigger_when_change_authority;
  v13 = *(_BYTE *)(((unsigned __int64)&this->force_trigger_when_change_authority >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this + 37) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->force_trigger_when_change_authority, v10, v14);
  this->force_trigger_when_change_authority = force_trigger_when_change_authority;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->target_predicates, &v21->target_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_field_enter, &v21->on_field_enter);
  p_on_field_exit = &v21->on_field_exit;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_field_exit, &v21->on_field_exit);
  if ( *(char *)(((unsigned __int64)&v21->replace_on_added_in_tick >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v21->replace_on_added_in_tick, p_on_field_exit, &v21->replace_on_added_in_tick);
  replace_on_added_in_tick = v21->replace_on_added_in_tick;
  v17 = *(_BYTE *)(((unsigned __int64)&this->replace_on_added_in_tick >> 3) + 0x7FFF8000);
  if ( v17 < 0 )
  {
    LOBYTE(p_on_field_exit) = v17 != 0;
    __asan_report_store1(&this->replace_on_added_in_tick, p_on_field_exit, &this->replace_on_added_in_tick);
  }
  this->replace_on_added_in_tick = replace_on_added_in_tick;
  p_simple_count_globa_value_key = &v21->simple_count_globa_value_key;
  std::string::basic_string(&this->simple_count_globa_value_key, &v21->simple_count_globa_value_key);
  if ( *(char *)(((unsigned __int64)&v21->simple_count_use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(
      &v21->simple_count_use_limit_range,
      p_simple_count_globa_value_key,
      &v21->simple_count_use_limit_range);
  simple_count_use_limit_range = v21->simple_count_use_limit_range;
  v20 = *(_BYTE *)(((unsigned __int64)&this->simple_count_use_limit_range >> 3) + 0x7FFF8000);
  if ( v20 < 0 )
  {
    LOBYTE(p_simple_count_globa_value_key) = v20 != 0;
    __asan_report_store1(
      &this->simple_count_use_limit_range,
      p_simple_count_globa_value_key,
      &this->simple_count_use_limit_range);
  }
  this->simple_count_use_limit_range = simple_count_use_limit_range;
  data::DynamicFloat::DynamicFloat(&this->simple_count_max_value, &v21->simple_count_max_value);
  data::DynamicFloat::DynamicFloat(&this->simple_count_min_value, &v21->simple_count_min_value);
};

// Line 6321: range 00000000112FE8C4-00000000112FE975
void __cdecl data::FieldEntityCountChangeMixin::~FieldEntityCountChangeMixin(
        data::FieldEntityCountChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FieldEntityCountChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->simple_count_min_value);
  data::DynamicFloat::~DynamicFloat(&this->simple_count_max_value);
  std::string::~string(&this->simple_count_globa_value_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_field_exit);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_field_enter);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->target_predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6321: range 00000000112FE976-00000000112FE9A0
void __cdecl data::FieldEntityCountChangeMixin::~FieldEntityCountChangeMixin(
        data::FieldEntityCountChangeMixin *const this)
{
  data::FieldEntityCountChangeMixin::~FieldEntityCountChangeMixin(this);
  operator delete(this, 0xE0uLL);
};

// Line 6326: range 00000000100CD488-00000000100CD498
const char *__cdecl data::FieldEntityCountChangeMixin::getTypeName(const data::FieldEntityCountChangeMixin *const this)
{
  return "FieldEntityCountChangeMixin";
};

// Line 6327: range 00000000100CD49A-00000000100CD636
int32_t __cdecl data::FieldEntityCountChangeMixin::getHashNum(const data::FieldEntityCountChangeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FieldEntityCountChangeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FieldEntityCountChangeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6343: range 0000000011285EB4-0000000011285EF5
void __cdecl data::FieldEntityCountChangeMixinFactory::FieldEntityCountChangeMixinFactory(
        data::FieldEntityCountChangeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FieldEntityCountChangeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FieldEntityCountChangeMixinFactory = v2;
};

// Line 6351: range 00000000112861FE-000000001128641F
void __cdecl data::TDPlayMixin::TDPlayMixin(data::TDPlayMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->tower_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->tower_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->tower_type, v1);
  }
  this->tower_type = Default_2;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->base_cd, v3);
  }
  this->base_cd = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->base_attack_range, v3);
  }
  this->base_attack_range = 0.0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_fire_actions);
  std::string::basic_string(&this->tower_modifier_name);
  std::vector<unsigned int>::vector(&this->bullet_ids);
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  std::vector<std::string>::vector(&this->part_root_names);
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_type, v3);
  }
  this->target_type = ActionSetTarget;
};

// Line 6351: range 0000000011286868-0000000011286BB2
void __cdecl data::TDPlayMixin::TDPlayMixin(data::TDPlayMixin *const this, const data::TDPlayMixin *a2)
{
  int (**v2)(...); // rdx
  data::TDPlayTowerType tower_type; // ecx
  char v4; // al
  float base_cd; // xmm0_4
  __int64 v6; // rsi
  float base_attack_range; // xmm0_4
  data::StringList *p_part_root_names; // rsi
  data::ControlPartTargetType target_type; // ecx
  char v10; // al
  const data::TDPlayMixin *v11; // [rsp+0h] [rbp-20h]

  v11 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->tower_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->tower_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->tower_type);
  }
  tower_type = a2->tower_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->tower_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->tower_type, a2);
  }
  this->tower_type = tower_type;
  if ( *(_BYTE *)(((unsigned __int64)&v11->base_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v11 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v11->base_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v11->base_cd);
  }
  base_cd = v11->base_cd;
  v6 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->base_cd, v6);
  }
  this->base_cd = base_cd;
  if ( *(_BYTE *)(((unsigned __int64)&v11->base_attack_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v11->base_attack_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v11->base_attack_range);
  }
  base_attack_range = v11->base_attack_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->base_attack_range, v6);
  }
  this->base_attack_range = base_attack_range;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_fire_actions, &v11->on_fire_actions);
  std::string::basic_string(&this->tower_modifier_name, &v11->tower_modifier_name);
  std::vector<unsigned int>::vector(&this->bullet_ids, &v11->bullet_ids);
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v11->born);
  p_part_root_names = &v11->part_root_names;
  std::vector<std::string>::vector(&this->part_root_names, &v11->part_root_names);
  if ( *(_BYTE *)(((unsigned __int64)&v11->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v11->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v11->target_type);
  }
  target_type = v11->target_type;
  v10 = *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(p_part_root_names) = v10 != 0;
    __asan_report_store4(&this->target_type, p_part_root_names);
  }
  this->target_type = target_type;
};

// Line 6366: range 00000000112FE898-00000000112FE8C2
void __cdecl data::TDPlayMixin::~TDPlayMixin(data::TDPlayMixin *const this)
{
  data::TDPlayMixin::~TDPlayMixin(this);
  operator delete(this, 0xB0uLL);
};

// Line 6366: range 00000000112FE7F8-00000000112FE897
void __cdecl data::TDPlayMixin::~TDPlayMixin(data::TDPlayMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->part_root_names);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::vector<unsigned int>::~vector(&this->bullet_ids);
  std::string::~string(&this->tower_modifier_name);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_fire_actions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6371: range 00000000100CD638-00000000100CD648
const char *__cdecl data::TDPlayMixin::getTypeName(const data::TDPlayMixin *const this)
{
  return "TDPlayMixin";
};

// Line 6372: range 00000000100CD64A-00000000100CD7E6
int32_t __cdecl data::TDPlayMixin::getHashNum(const data::TDPlayMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TDPlayMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TDPlayMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6388: range 0000000011286E9C-0000000011286EDD
void __cdecl data::TDPlayMixinFactory::TDPlayMixinFactory(data::TDPlayMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TDPlayMixinFactory = v2;
};

// Line 6396: range 00000000112871E6-00000000112873FE
void __cdecl data::TDPlayMixinV2::TDPlayMixinV2(data::TDPlayMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->tower_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->tower_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->tower_type, v1);
  }
  this->tower_type = Default_2;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->base_cd, v3);
  }
  this->base_cd = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->base_attack_range, v3);
  }
  this->base_attack_range = 0.0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_fire_actions);
  if ( *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->bullet_id, v3);
  }
  this->bullet_id = 0;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  std::vector<std::string>::vector(&this->part_root_names);
  if ( *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_type, v3);
  }
  this->target_type = ActionSetTarget;
};

// Line 6396: range 0000000011287848-0000000011287B98
void __cdecl data::TDPlayMixinV2::TDPlayMixinV2(data::TDPlayMixinV2 *const this, const data::TDPlayMixinV2 *a2)
{
  int (**v2)(...); // rdx
  data::TDPlayTowerType tower_type; // ecx
  char v4; // al
  float base_cd; // xmm0_4
  __int64 v6; // rsi
  float base_attack_range; // xmm0_4
  data::ConfigAbilityActionArray *p_on_fire_actions; // rsi
  uint32_t bullet_id; // ecx
  char v10; // al
  data::StringList *p_part_root_names; // rsi
  data::ControlPartTargetType target_type; // ecx
  char v13; // al
  const data::TDPlayMixinV2 *v14; // [rsp+0h] [rbp-20h]

  v14 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->tower_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->tower_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->tower_type);
  }
  tower_type = a2->tower_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->tower_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->tower_type, a2);
  }
  this->tower_type = tower_type;
  if ( *(_BYTE *)(((unsigned __int64)&v14->base_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v14 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v14->base_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v14->base_cd);
  }
  base_cd = v14->base_cd;
  v6 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->base_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->base_cd, v6);
  }
  this->base_cd = base_cd;
  if ( *(_BYTE *)(((unsigned __int64)&v14->base_attack_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v14->base_attack_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v14->base_attack_range);
  }
  base_attack_range = v14->base_attack_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->base_attack_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->base_attack_range, v6);
  }
  this->base_attack_range = base_attack_range;
  p_on_fire_actions = &v14->on_fire_actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_fire_actions, &v14->on_fire_actions);
  if ( *(_BYTE *)(((unsigned __int64)&v14->bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v14->bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v14->bullet_id);
  }
  bullet_id = v14->bullet_id;
  v10 = *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(p_on_fire_actions) = v10 != 0;
    __asan_report_store4(&this->bullet_id, p_on_fire_actions);
  }
  this->bullet_id = bullet_id;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &v14->born);
  p_part_root_names = &v14->part_root_names;
  std::vector<std::string>::vector(&this->part_root_names, &v14->part_root_names);
  if ( *(_BYTE *)(((unsigned __int64)&v14->target_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v14->target_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v14->target_type);
  }
  target_type = v14->target_type;
  v13 = *(_BYTE *)(((unsigned __int64)&this->target_type >> 3) + 0x7FFF8000);
  if ( v13 != 0 && v13 <= 3 )
  {
    LOBYTE(p_part_root_names) = v13 != 0;
    __asan_report_store4(&this->target_type, p_part_root_names);
  }
  this->target_type = target_type;
};

// Line 6410: range 00000000112FE74E-00000000112FE7CB
void __cdecl data::TDPlayMixinV2::~TDPlayMixinV2(data::TDPlayMixinV2 *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixinV2 + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->part_root_names);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_fire_actions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6410: range 00000000112FE7CC-00000000112FE7F6
void __cdecl data::TDPlayMixinV2::~TDPlayMixinV2(data::TDPlayMixinV2 *const this)
{
  data::TDPlayMixinV2::~TDPlayMixinV2(this);
  operator delete(this, 0x80uLL);
};

// Line 6415: range 00000000100CD7E8-00000000100CD7F8
const char *__cdecl data::TDPlayMixinV2::getTypeName(const data::TDPlayMixinV2 *const this)
{
  return "TDPlayMixinV2";
};

// Line 6416: range 00000000100CD7FA-00000000100CD996
int32_t __cdecl data::TDPlayMixinV2::getHashNum(const data::TDPlayMixinV2 *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TDPlayMixinV2::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TDPlayMixinV2",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6432: range 0000000011287E82-0000000011287EC3
void __cdecl data::TDPlayMixinV2Factory::TDPlayMixinV2Factory(data::TDPlayMixinV2Factory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TDPlayMixinV2Factory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TDPlayMixinV2Factory = v2;
};

// Line 6440: range 00000000112881CC-000000001128832D
void __cdecl data::ModifyCameraMaxDistanceMixin::ModifyCameraMaxDistanceMixin(
        data::ModifyCameraMaxDistanceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ModifyCameraMaxDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_distance, v1);
  }
  this->max_distance = 16.0;
  v3 = ((_BYTE)this + 36) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->reset_to_max_on_start >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->reset_to_max_on_start >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->reset_to_max_on_start, v3, v4);
  this->reset_to_max_on_start = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_in_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lerp_in_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lerp_in_duration, v3);
  }
  this->lerp_in_duration = 1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_out_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lerp_out_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->lerp_out_duration, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->lerp_out_duration = 1.0;
};

// Line 6440: range 0000000011288708-0000000011288958
void __cdecl data::ModifyCameraMaxDistanceMixin::ModifyCameraMaxDistanceMixin(
        data::ModifyCameraMaxDistanceMixin *const this,
        const data::ModifyCameraMaxDistanceMixin *a2)
{
  int (**v2)(...); // rdx
  float max_distance; // xmm0_4
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool reset_to_max_on_start; // cl
  char v7; // dl
  __int64 v8; // rdx
  float lerp_in_duration; // xmm0_4
  float lerp_out_duration; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ModifyCameraMaxDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_distance);
  }
  max_distance = a2->max_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_distance, a2);
  }
  this->max_distance = max_distance;
  v4 = ((_BYTE)a2 + 36) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&a2->reset_to_max_on_start >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&a2->reset_to_max_on_start >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&a2->reset_to_max_on_start, v4, v5);
  reset_to_max_on_start = a2->reset_to_max_on_start;
  v7 = *(_BYTE *)(((unsigned __int64)&this->reset_to_max_on_start >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->reset_to_max_on_start, v4, v8);
  this->reset_to_max_on_start = reset_to_max_on_start;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lerp_in_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->lerp_in_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->lerp_in_duration);
  }
  lerp_in_duration = a2->lerp_in_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_in_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lerp_in_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lerp_in_duration, v4);
  }
  this->lerp_in_duration = lerp_in_duration;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lerp_out_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->lerp_out_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->lerp_out_duration);
  }
  lerp_out_duration = a2->lerp_out_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->lerp_out_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lerp_out_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->lerp_out_duration, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->lerp_out_duration = lerp_out_duration;
};

// Line 6450: range 00000000112FE722-00000000112FE74C
void __cdecl data::ModifyCameraMaxDistanceMixin::~ModifyCameraMaxDistanceMixin(
        data::ModifyCameraMaxDistanceMixin *const this)
{
  data::ModifyCameraMaxDistanceMixin::~ModifyCameraMaxDistanceMixin(this);
  operator delete(this, 0x30uLL);
};

// Line 6450: range 00000000112FE6D4-00000000112FE721
void __cdecl data::ModifyCameraMaxDistanceMixin::~ModifyCameraMaxDistanceMixin(
        data::ModifyCameraMaxDistanceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyCameraMaxDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6455: range 00000000100CD998-00000000100CD9A8
const char *__cdecl data::ModifyCameraMaxDistanceMixin::getTypeName(
        const data::ModifyCameraMaxDistanceMixin *const this)
{
  return "ModifyCameraMaxDistanceMixin";
};

// Line 6456: range 00000000100CD9AA-00000000100CDB46
int32_t __cdecl data::ModifyCameraMaxDistanceMixin::getHashNum(const data::ModifyCameraMaxDistanceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ModifyCameraMaxDistanceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ModifyCameraMaxDistanceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6472: range 0000000011288BA2-0000000011288BE3
void __cdecl data::ModifyCameraMaxDistanceMixinFactory::ModifyCameraMaxDistanceMixinFactory(
        data::ModifyCameraMaxDistanceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ModifyCameraMaxDistanceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ModifyCameraMaxDistanceMixinFactory = v2;
};

// Line 6480: range 0000000011288EEC-000000001128916D
void __cdecl data::CircleBarrageMixin::CircleBarrageMixin(data::CircleBarrageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CircleBarrageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->bullet_id, v1);
  }
  this->bullet_id = 0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->inner_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->inner_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->inner_radius, v3);
  }
  this->inner_radius = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->cut_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cut_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cut_num, v3);
  }
  this->cut_num = 1;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->wave_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->wave_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->wave_num, v4);
  }
  this->wave_num = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->wave_cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->wave_cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->wave_cd, v4);
  }
  this->wave_cd = 0.2;
  v5 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->wavebullet_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->wavebullet_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->wavebullet_num, v5);
  }
  this->wavebullet_num = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->waveangle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->waveangle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->waveangle, v5);
  }
  this->waveangle = 5.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->trigger_cd, (((_BYTE)this + 60) & 7u) + 3);
  }
  this->trigger_cd = 5.0;
  std::string::basic_string(&this->shoot_point);
};

// Line 6480: range 0000000011289522-00000000112899AC
void __cdecl data::CircleBarrageMixin::CircleBarrageMixin(
        data::CircleBarrageMixin *const this,
        const data::CircleBarrageMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t bullet_id; // ecx
  char v4; // al
  float inner_radius; // xmm0_4
  __int64 v6; // rsi
  int32_t cut_num; // ecx
  char v8; // al
  __int64 v9; // rsi
  int32_t wave_num; // ecx
  char v11; // dl
  float wave_cd; // xmm0_4
  __int64 v13; // rsi
  int32_t wavebullet_num; // ecx
  char v15; // dl
  float waveangle; // xmm0_4
  float trigger_cd; // xmm0_4
  const data::CircleBarrageMixin *v18; // [rsp+0h] [rbp-20h]

  v18 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CircleBarrageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->bullet_id);
  }
  bullet_id = a2->bullet_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->bullet_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->bullet_id, a2);
  }
  this->bullet_id = bullet_id;
  if ( *(_BYTE *)(((unsigned __int64)&v18->inner_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v18 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v18->inner_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v18->inner_radius);
  }
  inner_radius = v18->inner_radius;
  v6 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->inner_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->inner_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->inner_radius, v6);
  }
  this->inner_radius = inner_radius;
  if ( *(_BYTE *)(((unsigned __int64)&v18->cut_num >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v18->cut_num >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v18->cut_num);
  }
  cut_num = v18->cut_num;
  v8 = *(_BYTE *)(((unsigned __int64)&this->cut_num >> 3) + 0x7FFF8000);
  if ( v8 != 0 && v8 <= 3 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store4(&this->cut_num, v6);
  }
  this->cut_num = cut_num;
  v9 = (((_BYTE)v18 + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v18->wave_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v18 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v18->wave_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v18->wave_num);
  }
  wave_num = v18->wave_num;
  v11 = *(_BYTE *)(((unsigned __int64)&this->wave_num >> 3) + 0x7FFF8000);
  LOBYTE(v9) = v11 != 0;
  if ( v11 != 0 && (char)((((_BYTE)this + 44) & 7) + 3) >= v11 )
    __asan_report_store4(&this->wave_num, v9);
  this->wave_num = wave_num;
  if ( *(_BYTE *)(((unsigned __int64)&v18->wave_cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v18->wave_cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v18->wave_cd);
  }
  wave_cd = v18->wave_cd;
  if ( *(_BYTE *)(((unsigned __int64)&this->wave_cd >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->wave_cd >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->wave_cd, v9);
  }
  this->wave_cd = wave_cd;
  v13 = (((_BYTE)v18 + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v18->wavebullet_num >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v18 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v18->wavebullet_num >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v18->wavebullet_num);
  }
  wavebullet_num = v18->wavebullet_num;
  v15 = *(_BYTE *)(((unsigned __int64)&this->wavebullet_num >> 3) + 0x7FFF8000);
  LOBYTE(v13) = v15 != 0;
  if ( v15 != 0 && (char)((((_BYTE)this + 52) & 7) + 3) >= v15 )
    __asan_report_store4(&this->wavebullet_num, v13);
  this->wavebullet_num = wavebullet_num;
  if ( *(_BYTE *)(((unsigned __int64)&v18->waveangle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v18->waveangle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v18->waveangle);
  }
  waveangle = v18->waveangle;
  if ( *(_BYTE *)(((unsigned __int64)&this->waveangle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->waveangle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->waveangle, v13);
  }
  this->waveangle = waveangle;
  if ( *(_BYTE *)(((unsigned __int64)&v18->trigger_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v18 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v18->trigger_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v18->trigger_cd);
  }
  trigger_cd = v18->trigger_cd;
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_cd >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->trigger_cd >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->trigger_cd, (((_BYTE)this + 60) & 7u) + 3);
  }
  this->trigger_cd = trigger_cd;
  std::string::basic_string(&this->shoot_point, &v18->shoot_point);
};

// Line 6495: range 00000000112FE6A8-00000000112FE6D2
void __cdecl data::CircleBarrageMixin::~CircleBarrageMixin(data::CircleBarrageMixin *const this)
{
  data::CircleBarrageMixin::~CircleBarrageMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 6495: range 00000000112FE64A-00000000112FE6A7
void __cdecl data::CircleBarrageMixin::~CircleBarrageMixin(data::CircleBarrageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CircleBarrageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->shoot_point);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6500: range 00000000100CDB48-00000000100CDB58
const char *__cdecl data::CircleBarrageMixin::getTypeName(const data::CircleBarrageMixin *const this)
{
  return "CircleBarrageMixin";
};

// Line 6501: range 00000000100CDB5A-00000000100CDCF6
int32_t __cdecl data::CircleBarrageMixin::getHashNum(const data::CircleBarrageMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CircleBarrageMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CircleBarrageMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6517: range 0000000011289C96-0000000011289CD7
void __cdecl data::CircleBarrageMixinFactory::CircleBarrageMixinFactory(data::CircleBarrageMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CircleBarrageMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CircleBarrageMixinFactory = v2;
};

// Line 6525: range 0000000011289FE0-000000001128A0CD
void __cdecl data::VelocityForceMixin::VelocityForceMixin(data::VelocityForceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::VelocityForceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->mute_all >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->mute_all >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->mute_all, v3, v4);
  this->mute_all = 0;
  v5 = ((_BYTE)this + 31) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->use_all >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->use_all >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->use_all, v5, v6);
  this->use_all = 0;
  std::vector<data::VelocityForceType>::vector(&this->include_forces);
  std::vector<data::VelocityForceType>::vector(&this->exclude_forces);
};

// Line 6525: range 000000001128A4F2-000000001128A6B8
void __cdecl data::VelocityForceMixin::VelocityForceMixin(
        data::VelocityForceMixin *const this,
        const data::VelocityForceMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool mute_all; // cl
  char v6; // dl
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx
  bool use_all; // cl
  char v11; // dl
  __int64 v12; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::VelocityForceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->mute_all >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->mute_all >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->mute_all, v3, v4);
  mute_all = a2->mute_all;
  v6 = *(_BYTE *)(((unsigned __int64)&this->mute_all >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->mute_all, v3, v7);
  this->mute_all = mute_all;
  v8 = ((_BYTE)a2 + 31) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&a2->use_all >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&a2->use_all >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&a2->use_all, v8, v9);
  use_all = a2->use_all;
  v11 = *(_BYTE *)(((unsigned __int64)&this->use_all >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v11 != 0;
  v12 = (v11 != 0) & (unsigned __int8)((((unsigned __int8)this + 31) & 7) >= v11);
  if ( (_BYTE)v12 )
    __asan_report_store1(&this->use_all, v8, v12);
  this->use_all = use_all;
  std::vector<data::VelocityForceType>::vector(&this->include_forces, &a2->include_forces);
  std::vector<data::VelocityForceType>::vector(&this->exclude_forces, &a2->exclude_forces);
};

// Line 6535: range 00000000112FE5B0-00000000112FE61D
void __cdecl data::VelocityForceMixin::~VelocityForceMixin(data::VelocityForceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::VelocityForceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::VelocityForceType>::~vector(&this->exclude_forces);
  std::vector<data::VelocityForceType>::~vector(&this->include_forces);
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 6535: range 00000000112FE61E-00000000112FE648
void __cdecl data::VelocityForceMixin::~VelocityForceMixin(data::VelocityForceMixin *const this)
{
  data::VelocityForceMixin::~VelocityForceMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 6540: range 00000000100CDCF8-00000000100CDD08
const char *__cdecl data::VelocityForceMixin::getTypeName(const data::VelocityForceMixin *const this)
{
  return "VelocityForceMixin";
};

// Line 6541: range 00000000100CDD0A-00000000100CDEA6
int32_t __cdecl data::VelocityForceMixin::getHashNum(const data::VelocityForceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::VelocityForceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "VelocityForceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6557: range 000000001128A9A2-000000001128A9E3
void __cdecl data::VelocityForceMixinFactory::VelocityForceMixinFactory(data::VelocityForceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::VelocityForceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_VelocityForceMixinFactory = v2;
};

// Line 6565: range 000000001128ACEC-000000001128AD84
void __cdecl data::ScenePropSyncMixin::ScenePropSyncMixin(data::ScenePropSyncMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ScenePropSyncMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->tile_name);
  if ( *(char *)(((unsigned __int64)&this->is_world_type >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_world_type, v1, &this->is_world_type);
  this->is_world_type = 0;
};

// Line 6565: range 000000001128B1A0-000000001128B2AC
void __cdecl data::ScenePropSyncMixin::ScenePropSyncMixin(
        data::ScenePropSyncMixin *const this,
        const data::ScenePropSyncMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_tile_name; // rsi
  bool is_world_type; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ScenePropSyncMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_tile_name = &a2->tile_name;
  std::string::basic_string(&this->tile_name, &a2->tile_name);
  if ( *(char *)(((unsigned __int64)&a2->is_world_type >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_world_type, p_tile_name, &a2->is_world_type);
  is_world_type = a2->is_world_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_world_type >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_tile_name) = v5 != 0;
    __asan_report_store1(&this->is_world_type, p_tile_name, &this->is_world_type);
  }
  this->is_world_type = is_world_type;
};

// Line 6573: range 00000000112FE584-00000000112FE5AE
void __cdecl data::ScenePropSyncMixin::~ScenePropSyncMixin(data::ScenePropSyncMixin *const this)
{
  data::ScenePropSyncMixin::~ScenePropSyncMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 6573: range 00000000112FE526-00000000112FE583
void __cdecl data::ScenePropSyncMixin::~ScenePropSyncMixin(data::ScenePropSyncMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ScenePropSyncMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->tile_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6578: range 00000000100CDEA8-00000000100CDEB8
const char *__cdecl data::ScenePropSyncMixin::getTypeName(const data::ScenePropSyncMixin *const this)
{
  return "ScenePropSyncMixin";
};

// Line 6579: range 00000000100CDEBA-00000000100CE056
int32_t __cdecl data::ScenePropSyncMixin::getHashNum(const data::ScenePropSyncMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ScenePropSyncMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ScenePropSyncMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6595: range 000000001128B596-000000001128B5D7
void __cdecl data::ScenePropSyncMixinFactory::ScenePropSyncMixinFactory(data::ScenePropSyncMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ScenePropSyncMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ScenePropSyncMixinFactory = v2;
};

// Line 6603: range 000000001128B8E0-000000001128B92D
void __cdecl data::BanEntityMarkMixin::BanEntityMarkMixin(data::BanEntityMarkMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BanEntityMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 6603: range 000000001128BE2E-000000001128BE86
void __cdecl data::BanEntityMarkMixin::BanEntityMarkMixin(
        data::BanEntityMarkMixin *const this,
        const data::BanEntityMarkMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BanEntityMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 6609: range 00000000112FE4FA-00000000112FE524
void __cdecl data::BanEntityMarkMixin::~BanEntityMarkMixin(data::BanEntityMarkMixin *const this)
{
  data::BanEntityMarkMixin::~BanEntityMarkMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 6609: range 00000000112FE4AC-00000000112FE4F9
void __cdecl data::BanEntityMarkMixin::~BanEntityMarkMixin(data::BanEntityMarkMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BanEntityMarkMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6614: range 00000000100CE058-00000000100CE068
const char *__cdecl data::BanEntityMarkMixin::getTypeName(const data::BanEntityMarkMixin *const this)
{
  return "BanEntityMarkMixin";
};

// Line 6615: range 00000000100CE06A-00000000100CE206
int32_t __cdecl data::BanEntityMarkMixin::getHashNum(const data::BanEntityMarkMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BanEntityMarkMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BanEntityMarkMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6631: range 000000001128C0D0-000000001128C111
void __cdecl data::BanEntityMarkMixinFactory::BanEntityMarkMixinFactory(data::BanEntityMarkMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BanEntityMarkMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BanEntityMarkMixinFactory = v2;
};

// Line 6653: range 000000001128C57A-000000001128C605
void __cdecl data::EntityMarkShowTypeMixin::EntityMarkShowTypeMixin(data::EntityMarkShowTypeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EntityMarkShowTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->mark_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->mark_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->mark_type, v1);
  }
  this->mark_type = Default_11;
};

// Line 6653: range 000000001128C9DA-000000001128CAA7
void __cdecl data::EntityMarkShowTypeMixin::EntityMarkShowTypeMixin(
        data::EntityMarkShowTypeMixin *const this,
        const data::EntityMarkShowTypeMixin *a2)
{
  int (**v2)(...); // rdx
  data::EntityMarkType mark_type; // ecx
  char v4; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EntityMarkShowTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->mark_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->mark_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->mark_type);
  }
  mark_type = a2->mark_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->mark_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->mark_type, a2);
  }
  this->mark_type = mark_type;
};

// Line 6660: range 00000000112FE480-00000000112FE4AA
void __cdecl data::EntityMarkShowTypeMixin::~EntityMarkShowTypeMixin(data::EntityMarkShowTypeMixin *const this)
{
  data::EntityMarkShowTypeMixin::~EntityMarkShowTypeMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 6660: range 00000000112FE432-00000000112FE47F
void __cdecl data::EntityMarkShowTypeMixin::~EntityMarkShowTypeMixin(data::EntityMarkShowTypeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityMarkShowTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6665: range 00000000100CE208-00000000100CE218
const char *__cdecl data::EntityMarkShowTypeMixin::getTypeName(const data::EntityMarkShowTypeMixin *const this)
{
  return "EntityMarkShowTypeMixin";
};

// Line 6666: range 00000000100CE21A-00000000100CE3B6
int32_t __cdecl data::EntityMarkShowTypeMixin::getHashNum(const data::EntityMarkShowTypeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EntityMarkShowTypeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EntityMarkShowTypeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6682: range 000000001128CCF0-000000001128CD31
void __cdecl data::EntityMarkShowTypeMixinFactory::EntityMarkShowTypeMixinFactory(
        data::EntityMarkShowTypeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityMarkShowTypeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EntityMarkShowTypeMixinFactory = v2;
};

// Line 6690: range 000000001128D03A-000000001128D19F
void __cdecl data::EntityDitherMixin::EntityDitherMixin(data::EntityDitherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EntityDitherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->dither_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dither_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dither_value, v1);
  }
  this->dither_value = 0.0;
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->cut_in_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cut_in_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->cut_in_time, v3);
  }
  this->cut_in_time = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->cut_out_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cut_out_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cut_out_time, v3);
  }
  this->cut_out_time = 0.0;
  v4 = ((_BYTE)this + 68) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&this->force_update_at_start >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&this->force_update_at_start >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_store1(&this->force_update_at_start, v4, v5);
  this->force_update_at_start = 0;
};

// Line 6690: range 000000001128D5BA-000000001128D848
void __cdecl data::EntityDitherMixin::EntityDitherMixin(
        data::EntityDitherMixin *const this,
        const data::EntityDitherMixin *a2)
{
  int (**v2)(...); // rdx
  float dither_value; // xmm0_4
  float cut_in_time; // xmm0_4
  __int64 v5; // rsi
  float cut_out_time; // xmm0_4
  __int64 v7; // rsi
  __int64 v8; // rdx
  bool force_update_at_start; // cl
  char v10; // dl
  __int64 v11; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EntityDitherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->dither_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->dither_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->dither_value);
  }
  dither_value = a2->dither_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->dither_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dither_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dither_value, &a2->predicates);
  }
  this->dither_value = dither_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->cut_in_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->cut_in_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->cut_in_time);
  }
  cut_in_time = a2->cut_in_time;
  v5 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->cut_in_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->cut_in_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->cut_in_time, v5);
  }
  this->cut_in_time = cut_in_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->cut_out_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->cut_out_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->cut_out_time);
  }
  cut_out_time = a2->cut_out_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->cut_out_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->cut_out_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->cut_out_time, v5);
  }
  this->cut_out_time = cut_out_time;
  v7 = ((_BYTE)a2 + 68) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&a2->force_update_at_start >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&a2->force_update_at_start >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_load1(&a2->force_update_at_start, v7, v8);
  force_update_at_start = a2->force_update_at_start;
  v10 = *(_BYTE *)(((unsigned __int64)&this->force_update_at_start >> 3) + 0x7FFF8000);
  LOBYTE(v7) = v10 != 0;
  v11 = (v10 != 0) & (unsigned __int8)((((unsigned __int8)this + 68) & 7) >= v10);
  if ( (_BYTE)v11 )
    __asan_report_store1(&this->force_update_at_start, v7, v11);
  this->force_update_at_start = force_update_at_start;
};

// Line 6701: range 00000000112FE406-00000000112FE430
void __cdecl data::EntityDitherMixin::~EntityDitherMixin(data::EntityDitherMixin *const this)
{
  data::EntityDitherMixin::~EntityDitherMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 6701: range 00000000112FE3A8-00000000112FE405
void __cdecl data::EntityDitherMixin::~EntityDitherMixin(data::EntityDitherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityDitherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6706: range 00000000100CE3B8-00000000100CE3C8
const char *__cdecl data::EntityDitherMixin::getTypeName(const data::EntityDitherMixin *const this)
{
  return "EntityDitherMixin";
};

// Line 6707: range 00000000100CE3CA-00000000100CE566
int32_t __cdecl data::EntityDitherMixin::getHashNum(const data::EntityDitherMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EntityDitherMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EntityDitherMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6723: range 000000001128DB32-000000001128DB73
void __cdecl data::EntityDitherMixinFactory::EntityDitherMixinFactory(data::EntityDitherMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityDitherMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EntityDitherMixinFactory = v2;
};

// Line 6746: range 000000001128DFDC-000000001128E0B7
void __cdecl data::EntityInVisibleMixin::EntityInVisibleMixin(data::EntityInVisibleMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EntityInVisibleMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->reason >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->reason >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->reason, v1);
  }
  this->reason = Default_12;
  v3 = ((_BYTE)this + 60) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->disable_audio >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->disable_audio >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->disable_audio, v3, v4);
  this->disable_audio = 0;
};

// Line 6746: range 000000001128E4BC-000000001128E647
void __cdecl data::EntityInVisibleMixin::EntityInVisibleMixin(
        data::EntityInVisibleMixin *const this,
        const data::EntityInVisibleMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityPredicateArray *p_predicates; // rsi
  data::AbilityEntityVisibleReason reason; // ecx
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool disable_audio; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EntityInVisibleMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_predicates = &a2->predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->reason >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->reason >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->reason);
  }
  reason = a2->reason;
  v5 = *(_BYTE *)(((unsigned __int64)&this->reason >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_predicates) = v5 != 0;
    __asan_report_store4(&this->reason, p_predicates);
  }
  this->reason = reason;
  v6 = ((_BYTE)a2 + 60) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->disable_audio >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->disable_audio >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->disable_audio, v6, v7);
  disable_audio = a2->disable_audio;
  v9 = *(_BYTE *)(((unsigned __int64)&this->disable_audio >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 60) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->disable_audio, v6, v10);
  this->disable_audio = disable_audio;
};

// Line 6755: range 00000000112FE37C-00000000112FE3A6
void __cdecl data::EntityInVisibleMixin::~EntityInVisibleMixin(data::EntityInVisibleMixin *const this)
{
  data::EntityInVisibleMixin::~EntityInVisibleMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 6755: range 00000000112FE31E-00000000112FE37B
void __cdecl data::EntityInVisibleMixin::~EntityInVisibleMixin(data::EntityInVisibleMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityInVisibleMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6760: range 00000000100CE568-00000000100CE578
const char *__cdecl data::EntityInVisibleMixin::getTypeName(const data::EntityInVisibleMixin *const this)
{
  return "EntityInVisibleMixin";
};

// Line 6761: range 00000000100CE57A-00000000100CE716
int32_t __cdecl data::EntityInVisibleMixin::getHashNum(const data::EntityInVisibleMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EntityInVisibleMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EntityInVisibleMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6777: range 000000001128E930-000000001128E971
void __cdecl data::EntityInVisibleMixinFactory::EntityInVisibleMixinFactory(
        data::EntityInVisibleMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityInVisibleMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EntityInVisibleMixinFactory = v2;
};

// Line 6785: range 000000001128EC7A-000000001128ECE7
void __cdecl data::SetSkillCanUseInStateMixin::SetSkillCanUseInStateMixin(data::SetSkillCanUseInStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SetSkillCanUseInStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->skill_list);
  std::vector<std::string>::vector(&this->state_list);
};

// Line 6785: range 000000001128F10C-000000001128F1D2
void __cdecl data::SetSkillCanUseInStateMixin::SetSkillCanUseInStateMixin(
        data::SetSkillCanUseInStateMixin *const this,
        const data::SetSkillCanUseInStateMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetSkillCanUseInStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->skill_list, &a2->skill_list);
  std::vector<std::string>::vector(&this->state_list, &a2->state_list);
};

// Line 6793: range 00000000112FE2F2-00000000112FE31C
void __cdecl data::SetSkillCanUseInStateMixin::~SetSkillCanUseInStateMixin(
        data::SetSkillCanUseInStateMixin *const this)
{
  data::SetSkillCanUseInStateMixin::~SetSkillCanUseInStateMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 6793: range 00000000112FE284-00000000112FE2F1
void __cdecl data::SetSkillCanUseInStateMixin::~SetSkillCanUseInStateMixin(
        data::SetSkillCanUseInStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSkillCanUseInStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->state_list);
  std::vector<unsigned int>::~vector(&this->skill_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6798: range 00000000100CE718-00000000100CE728
const char *__cdecl data::SetSkillCanUseInStateMixin::getTypeName(const data::SetSkillCanUseInStateMixin *const this)
{
  return "SetSkillCanUseInStateMixin";
};

// Line 6799: range 00000000100CE72A-00000000100CE8C6
int32_t __cdecl data::SetSkillCanUseInStateMixin::getHashNum(const data::SetSkillCanUseInStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetSkillCanUseInStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetSkillCanUseInStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6815: range 000000001128F4BC-000000001128F4FD
void __cdecl data::SetSkillCanUseInStateMixinFactory::SetSkillCanUseInStateMixinFactory(
        data::SetSkillCanUseInStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetSkillCanUseInStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetSkillCanUseInStateMixinFactory = v2;
};

// Line 6823: range 000000001128F806-000000001128F9A9
void __cdecl data::GadgetChargeMixin::GadgetChargeMixin(data::GadgetChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::GadgetChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->charge_type, v1);
  }
  this->charge_type = None_0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->charge_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->charge_ratio, v3);
  }
  this->charge_ratio = 0.5;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->charge_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->charge_value, v3);
  }
  this->charge_value = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_charge_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_charge_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_charge_value, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->max_charge_value = 300.0;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
  std::string::basic_string(&this->global_value_key);
  std::string::basic_string(&this->ratio_global_value_key);
};

// Line 6823: range 000000001128FD64-0000000011290087
void __cdecl data::GadgetChargeMixin::GadgetChargeMixin(
        data::GadgetChargeMixin *const this,
        const data::GadgetChargeMixin *a2)
{
  int (**v2)(...); // rdx
  data::ElementType charge_type; // ecx
  char v4; // al
  float charge_ratio; // xmm0_4
  __int64 v6; // rsi
  float charge_value; // xmm0_4
  float max_charge_value; // xmm0_4
  const data::GadgetChargeMixin *v9; // [rsp+0h] [rbp-20h]

  v9 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GadgetChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->charge_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->charge_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->charge_type);
  }
  charge_type = a2->charge_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->charge_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->charge_type, a2);
  }
  this->charge_type = charge_type;
  if ( *(_BYTE *)(((unsigned __int64)&v9->charge_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v9 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->charge_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v9->charge_ratio);
  }
  charge_ratio = v9->charge_ratio;
  v6 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_ratio >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->charge_ratio >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->charge_ratio, v6);
  }
  this->charge_ratio = charge_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&v9->charge_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v9->charge_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v9->charge_value);
  }
  charge_value = v9->charge_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->charge_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->charge_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->charge_value, v6);
  }
  this->charge_value = charge_value;
  if ( *(_BYTE *)(((unsigned __int64)&v9->max_charge_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v9 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v9->max_charge_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v9->max_charge_value);
  }
  max_charge_value = v9->max_charge_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_charge_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_charge_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_charge_value, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->max_charge_value = max_charge_value;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &v9->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps, &v9->modifier_name_steps);
  std::string::basic_string(&this->global_value_key, &v9->global_value_key);
  std::string::basic_string(&this->ratio_global_value_key, &v9->ratio_global_value_key);
};

// Line 6837: range 00000000112FE258-00000000112FE282
void __cdecl data::GadgetChargeMixin::~GadgetChargeMixin(data::GadgetChargeMixin *const this)
{
  data::GadgetChargeMixin::~GadgetChargeMixin(this);
  operator delete(this, 0xA0uLL);
};

// Line 6837: range 00000000112FE1CA-00000000112FE257
void __cdecl data::GadgetChargeMixin::~GadgetChargeMixin(data::GadgetChargeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GadgetChargeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->ratio_global_value_key);
  std::string::~string(&this->global_value_key);
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6842: range 00000000100CE8C8-00000000100CE8D8
const char *__cdecl data::GadgetChargeMixin::getTypeName(const data::GadgetChargeMixin *const this)
{
  return "GadgetChargeMixin";
};

// Line 6843: range 00000000100CE8DA-00000000100CEA76
int32_t __cdecl data::GadgetChargeMixin::getHashNum(const data::GadgetChargeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GadgetChargeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GadgetChargeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6859: range 0000000011290370-00000000112903B1
void __cdecl data::GadgetChargeMixinFactory::GadgetChargeMixinFactory(data::GadgetChargeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GadgetChargeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GadgetChargeMixinFactory = v2;
};

// Line 6867: range 00000000112906BA-0000000011290727
void __cdecl data::HomeworldEnterEditorMixin::HomeworldEnterEditorMixin(data::HomeworldEnterEditorMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::HomeworldEnterEditorMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->editor_modifier_names);
  std::vector<std::string>::vector(&this->world_modifier_names);
};

// Line 6867: range 0000000011290B4C-0000000011290C12
void __cdecl data::HomeworldEnterEditorMixin::HomeworldEnterEditorMixin(
        data::HomeworldEnterEditorMixin *const this,
        const data::HomeworldEnterEditorMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HomeworldEnterEditorMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->editor_modifier_names, &a2->editor_modifier_names);
  std::vector<std::string>::vector(&this->world_modifier_names, &a2->world_modifier_names);
};

// Line 6875: range 00000000112FE19E-00000000112FE1C8
void __cdecl data::HomeworldEnterEditorMixin::~HomeworldEnterEditorMixin(data::HomeworldEnterEditorMixin *const this)
{
  data::HomeworldEnterEditorMixin::~HomeworldEnterEditorMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 6875: range 00000000112FE130-00000000112FE19D
void __cdecl data::HomeworldEnterEditorMixin::~HomeworldEnterEditorMixin(data::HomeworldEnterEditorMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HomeworldEnterEditorMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->world_modifier_names);
  std::vector<std::string>::~vector(&this->editor_modifier_names);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6880: range 00000000100CEA78-00000000100CEA88
const char *__cdecl data::HomeworldEnterEditorMixin::getTypeName(const data::HomeworldEnterEditorMixin *const this)
{
  return "HomeworldEnterEditorMixin";
};

// Line 6881: range 00000000100CEA8A-00000000100CEC26
int32_t __cdecl data::HomeworldEnterEditorMixin::getHashNum(const data::HomeworldEnterEditorMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HomeworldEnterEditorMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HomeworldEnterEditorMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6897: range 0000000011290EFC-0000000011290F3D
void __cdecl data::HomeworldEnterEditorMixinFactory::HomeworldEnterEditorMixinFactory(
        data::HomeworldEnterEditorMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HomeworldEnterEditorMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HomeworldEnterEditorMixinFactory = v2;
};

// Line 6905: range 0000000011291246-00000000112912B3
void __cdecl data::HomeworldServerEventMixin::HomeworldServerEventMixin(data::HomeworldServerEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::HomeworldServerEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->editor_modifier_names);
  std::vector<std::string>::vector(&this->world_modifier_names);
};

// Line 6905: range 00000000112916D8-000000001129179E
void __cdecl data::HomeworldServerEventMixin::HomeworldServerEventMixin(
        data::HomeworldServerEventMixin *const this,
        const data::HomeworldServerEventMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HomeworldServerEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->editor_modifier_names, &a2->editor_modifier_names);
  std::vector<std::string>::vector(&this->world_modifier_names, &a2->world_modifier_names);
};

// Line 6913: range 00000000112FE104-00000000112FE12E
void __cdecl data::HomeworldServerEventMixin::~HomeworldServerEventMixin(data::HomeworldServerEventMixin *const this)
{
  data::HomeworldServerEventMixin::~HomeworldServerEventMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 6913: range 00000000112FE096-00000000112FE103
void __cdecl data::HomeworldServerEventMixin::~HomeworldServerEventMixin(data::HomeworldServerEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HomeworldServerEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->world_modifier_names);
  std::vector<std::string>::~vector(&this->editor_modifier_names);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6918: range 00000000100CEC28-00000000100CEC38
const char *__cdecl data::HomeworldServerEventMixin::getTypeName(const data::HomeworldServerEventMixin *const this)
{
  return "HomeworldServerEventMixin";
};

// Line 6919: range 00000000100CEC3A-00000000100CEDD6
int32_t __cdecl data::HomeworldServerEventMixin::getHashNum(const data::HomeworldServerEventMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HomeworldServerEventMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HomeworldServerEventMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6935: range 0000000011291A88-0000000011291AC9
void __cdecl data::HomeworldServerEventMixinFactory::HomeworldServerEventMixinFactory(
        data::HomeworldServerEventMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HomeworldServerEventMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HomeworldServerEventMixinFactory = v2;
};

// Line 6943: range 0000000011291DD2-0000000011291E2F
void __cdecl data::GadgetUpgradeChainMixin::GadgetUpgradeChainMixin(data::GadgetUpgradeChainMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::GadgetUpgradeChainMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_value_key);
};

// Line 6943: range 0000000011292234-00000000112922CA
void __cdecl data::GadgetUpgradeChainMixin::GadgetUpgradeChainMixin(
        data::GadgetUpgradeChainMixin *const this,
        const data::GadgetUpgradeChainMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GadgetUpgradeChainMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_value_key, &a2->global_value_key);
};

// Line 6950: range 00000000112FE00C-00000000112FE069
void __cdecl data::GadgetUpgradeChainMixin::~GadgetUpgradeChainMixin(data::GadgetUpgradeChainMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GadgetUpgradeChainMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6950: range 00000000112FE06A-00000000112FE094
void __cdecl data::GadgetUpgradeChainMixin::~GadgetUpgradeChainMixin(data::GadgetUpgradeChainMixin *const this)
{
  data::GadgetUpgradeChainMixin::~GadgetUpgradeChainMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 6955: range 00000000100CEDD8-00000000100CEDE8
const char *__cdecl data::GadgetUpgradeChainMixin::getTypeName(const data::GadgetUpgradeChainMixin *const this)
{
  return "GadgetUpgradeChainMixin";
};

// Line 6956: range 00000000100CEDEA-00000000100CEF86
int32_t __cdecl data::GadgetUpgradeChainMixin::getHashNum(const data::GadgetUpgradeChainMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GadgetUpgradeChainMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GadgetUpgradeChainMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6972: range 00000000112925B4-00000000112925F5
void __cdecl data::GadgetUpgradeChainMixinFactory::GadgetUpgradeChainMixinFactory(
        data::GadgetUpgradeChainMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GadgetUpgradeChainMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GadgetUpgradeChainMixinFactory = v2;
};

// Line 6980: range 00000000112928FE-000000001129295B
void __cdecl data::InteractTriggerAbility::InteractTriggerAbility(data::InteractTriggerAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ability_name);
};

// Line 6980: range 0000000011292D60-0000000011292DF6
void __cdecl data::InteractTriggerAbility::InteractTriggerAbility(
        data::InteractTriggerAbility *const this,
        const data::InteractTriggerAbility *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ability_name, &a2->ability_name);
};

// Line 6987: range 00000000112FDFE0-00000000112FE00A
void __cdecl data::InteractTriggerAbility::~InteractTriggerAbility(data::InteractTriggerAbility *const this)
{
  data::InteractTriggerAbility::~InteractTriggerAbility(this);
  operator delete(this, 0x40uLL);
};

// Line 6987: range 00000000112FDF82-00000000112FDFDF
void __cdecl data::InteractTriggerAbility::~InteractTriggerAbility(data::InteractTriggerAbility *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbility + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->ability_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 6992: range 00000000100CEF88-00000000100CEF98
const char *__cdecl data::InteractTriggerAbility::getTypeName(const data::InteractTriggerAbility *const this)
{
  return "InteractTriggerAbility";
};

// Line 6993: range 00000000100CEF9A-00000000100CF136
int32_t __cdecl data::InteractTriggerAbility::getHashNum(const data::InteractTriggerAbility *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::InteractTriggerAbility::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "InteractTriggerAbility",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7009: range 00000000112930E0-0000000011293121
void __cdecl data::InteractTriggerAbilityFactory::InteractTriggerAbilityFactory(
        data::InteractTriggerAbilityFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbilityFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_InteractTriggerAbilityFactory = v2;
};

// Line 7017: range 000000001129342A-0000000011293487
void __cdecl data::InteractTriggerAbilityMixin::InteractTriggerAbilityMixin(
        data::InteractTriggerAbilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ability_name);
};

// Line 7017: range 000000001129388C-0000000011293922
void __cdecl data::InteractTriggerAbilityMixin::InteractTriggerAbilityMixin(
        data::InteractTriggerAbilityMixin *const this,
        const data::InteractTriggerAbilityMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ability_name, &a2->ability_name);
};

// Line 7024: range 00000000112FDF56-00000000112FDF80
void __cdecl data::InteractTriggerAbilityMixin::~InteractTriggerAbilityMixin(
        data::InteractTriggerAbilityMixin *const this)
{
  data::InteractTriggerAbilityMixin::~InteractTriggerAbilityMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 7024: range 00000000112FDEF8-00000000112FDF55
void __cdecl data::InteractTriggerAbilityMixin::~InteractTriggerAbilityMixin(
        data::InteractTriggerAbilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->ability_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7029: range 00000000100CF138-00000000100CF148
const char *__cdecl data::InteractTriggerAbilityMixin::getTypeName(const data::InteractTriggerAbilityMixin *const this)
{
  return "InteractTriggerAbilityMixin";
};

// Line 7030: range 00000000100CF14A-00000000100CF2E6
int32_t __cdecl data::InteractTriggerAbilityMixin::getHashNum(const data::InteractTriggerAbilityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::InteractTriggerAbilityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "InteractTriggerAbilityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7046: range 0000000011293C0C-0000000011293C4D
void __cdecl data::InteractTriggerAbilityMixinFactory::InteractTriggerAbilityMixinFactory(
        data::InteractTriggerAbilityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InteractTriggerAbilityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_InteractTriggerAbilityMixinFactory = v2;
};

// Line 7054: range 0000000011293F56-0000000011294011
void __cdecl data::AttachToWidgetStateMixin::AttachToWidgetStateMixin(data::AttachToWidgetStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachToWidgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_widget_material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_widget_material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_widget_material_id, v1);
  }
  this->target_widget_material_id = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_active);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_disable);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_removed);
};

// Line 7054: range 00000000112943BC-0000000011294527
void __cdecl data::AttachToWidgetStateMixin::AttachToWidgetStateMixin(
        data::AttachToWidgetStateMixin *const this,
        const data::AttachToWidgetStateMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t target_widget_material_id; // ecx
  char v4; // al
  const data::AttachToWidgetStateMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachToWidgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_widget_material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_widget_material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_widget_material_id);
  }
  target_widget_material_id = a2->target_widget_material_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->target_widget_material_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->target_widget_material_id, a2);
  }
  this->target_widget_material_id = target_widget_material_id;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_active, &v5->on_active);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_disable, &v5->on_disable);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_removed, &v5->on_removed);
};

// Line 7064: range 00000000112FDE4E-00000000112FDECB
void __cdecl data::AttachToWidgetStateMixin::~AttachToWidgetStateMixin(data::AttachToWidgetStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToWidgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_removed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_disable);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_active);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7064: range 00000000112FDECC-00000000112FDEF6
void __cdecl data::AttachToWidgetStateMixin::~AttachToWidgetStateMixin(data::AttachToWidgetStateMixin *const this)
{
  data::AttachToWidgetStateMixin::~AttachToWidgetStateMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 7069: range 00000000100CF2E8-00000000100CF2F8
const char *__cdecl data::AttachToWidgetStateMixin::getTypeName(const data::AttachToWidgetStateMixin *const this)
{
  return "AttachToWidgetStateMixin";
};

// Line 7070: range 00000000100CF2FA-00000000100CF496
int32_t __cdecl data::AttachToWidgetStateMixin::getHashNum(const data::AttachToWidgetStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachToWidgetStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachToWidgetStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7086: range 0000000011294810-0000000011294851
void __cdecl data::AttachToWidgetStateMixinFactory::AttachToWidgetStateMixinFactory(
        data::AttachToWidgetStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachToWidgetStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachToWidgetStateMixinFactory = v2;
};

// Line 7094: range 0000000011294B5A-0000000011294BE5
void __cdecl data::WidgetLightUpControlMixin::WidgetLightUpControlMixin(data::WidgetLightUpControlMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::WidgetLightUpControlMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_widget_material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_widget_material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_widget_material_id, v1);
  }
  this->target_widget_material_id = 0;
};

// Line 7094: range 0000000011294FBA-0000000011295087
void __cdecl data::WidgetLightUpControlMixin::WidgetLightUpControlMixin(
        data::WidgetLightUpControlMixin *const this,
        const data::WidgetLightUpControlMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t target_widget_material_id; // ecx
  char v4; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::WidgetLightUpControlMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_widget_material_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_widget_material_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_widget_material_id);
  }
  target_widget_material_id = a2->target_widget_material_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->target_widget_material_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->target_widget_material_id, a2);
  }
  this->target_widget_material_id = target_widget_material_id;
};

// Line 7101: range 00000000112FDDD4-00000000112FDE21
void __cdecl data::WidgetLightUpControlMixin::~WidgetLightUpControlMixin(data::WidgetLightUpControlMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetLightUpControlMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7101: range 00000000112FDE22-00000000112FDE4C
void __cdecl data::WidgetLightUpControlMixin::~WidgetLightUpControlMixin(data::WidgetLightUpControlMixin *const this)
{
  data::WidgetLightUpControlMixin::~WidgetLightUpControlMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 7106: range 00000000100CF498-00000000100CF4A8
const char *__cdecl data::WidgetLightUpControlMixin::getTypeName(const data::WidgetLightUpControlMixin *const this)
{
  return "WidgetLightUpControlMixin";
};

// Line 7107: range 00000000100CF4AA-00000000100CF646
int32_t __cdecl data::WidgetLightUpControlMixin::getHashNum(const data::WidgetLightUpControlMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WidgetLightUpControlMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WidgetLightUpControlMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7123: range 00000000112952D0-0000000011295311
void __cdecl data::WidgetLightUpControlMixinFactory::WidgetLightUpControlMixinFactory(
        data::WidgetLightUpControlMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetLightUpControlMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WidgetLightUpControlMixinFactory = v2;
};

// Line 7131: range 000000001129561A-0000000011295697
void __cdecl data::WidgetMpSupportMixin::WidgetMpSupportMixin(data::WidgetMpSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::WidgetMpSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->succ_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
};

// Line 7131: range 0000000011295A4C-0000000011295B42
void __cdecl data::WidgetMpSupportMixin::WidgetMpSupportMixin(
        data::WidgetMpSupportMixin *const this,
        const data::WidgetMpSupportMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::WidgetMpSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->succ_actions, &a2->succ_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->fail_actions, &a2->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
};

// Line 7140: range 00000000112FDD2A-00000000112FDDA7
void __cdecl data::WidgetMpSupportMixin::~WidgetMpSupportMixin(data::WidgetMpSupportMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetMpSupportMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->fail_actions);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->succ_actions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7140: range 00000000112FDDA8-00000000112FDDD2
void __cdecl data::WidgetMpSupportMixin::~WidgetMpSupportMixin(data::WidgetMpSupportMixin *const this)
{
  data::WidgetMpSupportMixin::~WidgetMpSupportMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 7145: range 00000000100CF648-00000000100CF658
const char *__cdecl data::WidgetMpSupportMixin::getTypeName(const data::WidgetMpSupportMixin *const this)
{
  return "WidgetMpSupportMixin";
};

// Line 7146: range 00000000100CF65A-00000000100CF7F6
int32_t __cdecl data::WidgetMpSupportMixin::getHashNum(const data::WidgetMpSupportMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WidgetMpSupportMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WidgetMpSupportMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7162: range 0000000011295E2C-0000000011295E6D
void __cdecl data::WidgetMpSupportMixinFactory::WidgetMpSupportMixinFactory(
        data::WidgetMpSupportMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetMpSupportMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WidgetMpSupportMixinFactory = v2;
};

// Line 7187: range 00000000112962D6-00000000112963B1
void __cdecl data::FollowAttachPointEffectMixin::FollowAttachPointEffectMixin(
        data::FollowAttachPointEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::FollowAttachPointEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->attach_priority >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->attach_priority >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->attach_priority, v1);
  }
  this->attach_priority = 0;
  v3 = ((_BYTE)this + 68) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->refresh_on_avatar_in >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->refresh_on_avatar_in >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->refresh_on_avatar_in, v3, v4);
  this->refresh_on_avatar_in = 0;
};

// Line 7187: range 00000000112967CC-0000000011296957
void __cdecl data::FollowAttachPointEffectMixin::FollowAttachPointEffectMixin(
        data::FollowAttachPointEffectMixin *const this,
        const data::FollowAttachPointEffectMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_modifier_name; // rsi
  data::FollowAttachOccupyPriority attach_priority; // ecx
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool refresh_on_avatar_in; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FollowAttachPointEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->attach_priority >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->attach_priority >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->attach_priority);
  }
  attach_priority = a2->attach_priority;
  v5 = *(_BYTE *)(((unsigned __int64)&this->attach_priority >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_modifier_name) = v5 != 0;
    __asan_report_store4(&this->attach_priority, p_modifier_name);
  }
  this->attach_priority = attach_priority;
  v6 = ((_BYTE)a2 + 68) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->refresh_on_avatar_in >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->refresh_on_avatar_in >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->refresh_on_avatar_in, v6, v7);
  refresh_on_avatar_in = a2->refresh_on_avatar_in;
  v9 = *(_BYTE *)(((unsigned __int64)&this->refresh_on_avatar_in >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 68) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->refresh_on_avatar_in, v6, v10);
  this->refresh_on_avatar_in = refresh_on_avatar_in;
};

// Line 7196: range 00000000112FDCA0-00000000112FDCFD
void __cdecl data::FollowAttachPointEffectMixin::~FollowAttachPointEffectMixin(
        data::FollowAttachPointEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FollowAttachPointEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7196: range 00000000112FDCFE-00000000112FDD28
void __cdecl data::FollowAttachPointEffectMixin::~FollowAttachPointEffectMixin(
        data::FollowAttachPointEffectMixin *const this)
{
  data::FollowAttachPointEffectMixin::~FollowAttachPointEffectMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 7201: range 00000000100CF7F8-00000000100CF808
const char *__cdecl data::FollowAttachPointEffectMixin::getTypeName(
        const data::FollowAttachPointEffectMixin *const this)
{
  return "FollowAttachPointEffectMixin";
};

// Line 7202: range 00000000100CF80A-00000000100CF9A6
int32_t __cdecl data::FollowAttachPointEffectMixin::getHashNum(const data::FollowAttachPointEffectMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FollowAttachPointEffectMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FollowAttachPointEffectMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7218: range 0000000011296C40-0000000011296C81
void __cdecl data::FollowAttachPointEffectMixinFactory::FollowAttachPointEffectMixinFactory(
        data::FollowAttachPointEffectMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FollowAttachPointEffectMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FollowAttachPointEffectMixinFactory = v2;
};

// Line 7256: range 0000000011296FC2-0000000011297299
void __cdecl data::MultiBadmintonShootMixin::MultiBadmintonShootMixin(data::MultiBadmintonShootMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MultiBadmintonShootMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_interval, v1);
  }
  this->min_interval = 0.0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_interval, v3);
  }
  this->max_interval = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->extra_shoot_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->extra_shoot_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->extra_shoot_interval, v3);
  }
  this->extra_shoot_interval = 0.0;
  std::vector<std::string>::vector(&this->extra_shoot_tag);
  std::vector<data::MultiBadmintonBullet>::vector(&this->bullets);
  if ( *(_BYTE *)(((unsigned __int64)&this->tres_bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->tres_bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->tres_bullet_id, v3);
  }
  this->tres_bullet_id = 0;
  v4 = (((_BYTE)this + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->normal_bullet_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->normal_bullet_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->normal_bullet_id, v4);
  }
  this->normal_bullet_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->trace_bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trace_bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trace_bullet_id, v4);
  }
  this->trace_bullet_id = 0;
  std::vector<std::string>::vector(&this->trace_target);
  if ( *(_BYTE *)(((unsigned __int64)&this->per_change_weight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->per_change_weight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->per_change_weight, v4);
  }
  this->per_change_weight = 0;
  if ( *(_WORD *)(((unsigned __int64)&this->born >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
};

// Line 7256: range 00000000112976E8-0000000011297B64
void __cdecl data::MultiBadmintonShootMixin::MultiBadmintonShootMixin(
        data::MultiBadmintonShootMixin *const this,
        const data::MultiBadmintonShootMixin *a2)
{
  int (**v2)(...); // rdx
  float min_interval; // xmm0_4
  float max_interval; // xmm0_4
  __int64 v5; // rsi
  float extra_shoot_interval; // xmm0_4
  data::MultiBadmintonBulletArray *p_bullets; // rsi
  int32_t tres_bullet_id; // ecx
  char v9; // al
  __int64 v10; // rsi
  int32_t normal_bullet_id; // ecx
  char v12; // dl
  int32_t trace_bullet_id; // ecx
  char v14; // al
  data::StringArray *p_trace_target; // rsi
  int32_t per_change_weight; // ecx
  char v17; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MultiBadmintonShootMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_interval);
  }
  min_interval = a2->min_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_interval, a2);
  }
  this->min_interval = min_interval;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_interval);
  }
  max_interval = a2->max_interval;
  v5 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_interval, v5);
  }
  this->max_interval = max_interval;
  if ( *(_BYTE *)(((unsigned __int64)&a2->extra_shoot_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->extra_shoot_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->extra_shoot_interval);
  }
  extra_shoot_interval = a2->extra_shoot_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->extra_shoot_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->extra_shoot_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->extra_shoot_interval, v5);
  }
  this->extra_shoot_interval = extra_shoot_interval;
  std::vector<std::string>::vector(&this->extra_shoot_tag, &a2->extra_shoot_tag);
  p_bullets = &a2->bullets;
  std::vector<data::MultiBadmintonBullet>::vector(&this->bullets, &a2->bullets);
  if ( *(_BYTE *)(((unsigned __int64)&a2->tres_bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->tres_bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->tres_bullet_id);
  }
  tres_bullet_id = a2->tres_bullet_id;
  v9 = *(_BYTE *)(((unsigned __int64)&this->tres_bullet_id >> 3) + 0x7FFF8000);
  if ( v9 != 0 && v9 <= 3 )
  {
    LOBYTE(p_bullets) = v9 != 0;
    __asan_report_store4(&this->tres_bullet_id, p_bullets);
  }
  this->tres_bullet_id = tres_bullet_id;
  v10 = (((_BYTE)a2 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->normal_bullet_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->normal_bullet_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->normal_bullet_id);
  }
  normal_bullet_id = a2->normal_bullet_id;
  v12 = *(_BYTE *)(((unsigned __int64)&this->normal_bullet_id >> 3) + 0x7FFF8000);
  if ( v12 != 0 && (char)((((_BYTE)this + 100) & 7) + 3) >= v12 )
  {
    LOBYTE(v10) = v12 != 0;
    __asan_report_store4(&this->normal_bullet_id, v10);
  }
  this->normal_bullet_id = normal_bullet_id;
  if ( *(_BYTE *)(((unsigned __int64)&a2->trace_bullet_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->trace_bullet_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->trace_bullet_id);
  }
  trace_bullet_id = a2->trace_bullet_id;
  v14 = *(_BYTE *)(((unsigned __int64)&this->trace_bullet_id >> 3) + 0x7FFF8000);
  if ( v14 != 0 && v14 <= 3 )
  {
    LOBYTE(v10) = v14 != 0;
    __asan_report_store4(&this->trace_bullet_id, v10);
  }
  this->trace_bullet_id = trace_bullet_id;
  p_trace_target = &a2->trace_target;
  std::vector<std::string>::vector(&this->trace_target, &a2->trace_target);
  if ( *(_BYTE *)(((unsigned __int64)&a2->per_change_weight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->per_change_weight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->per_change_weight);
  }
  per_change_weight = a2->per_change_weight;
  v17 = *(_BYTE *)(((unsigned __int64)&this->per_change_weight >> 3) + 0x7FFF8000);
  if ( v17 != 0 && v17 <= 3 )
  {
    LOBYTE(p_trace_target) = v17 != 0;
    __asan_report_store4(&this->per_change_weight, p_trace_target);
  }
  this->per_change_weight = per_change_weight;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->born, &a2->born);
};

// Line 7273: range 00000000112FDBE4-00000000112FDC73
void __cdecl data::MultiBadmintonShootMixin::~MultiBadmintonShootMixin(data::MultiBadmintonShootMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MultiBadmintonShootMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->born);
  std::vector<std::string>::~vector(&this->trace_target);
  std::vector<data::MultiBadmintonBullet>::~vector(&this->bullets);
  std::vector<std::string>::~vector(&this->extra_shoot_tag);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7273: range 00000000112FDC74-00000000112FDC9E
void __cdecl data::MultiBadmintonShootMixin::~MultiBadmintonShootMixin(data::MultiBadmintonShootMixin *const this)
{
  data::MultiBadmintonShootMixin::~MultiBadmintonShootMixin(this);
  operator delete(this, 0xA0uLL);
};

// Line 7278: range 00000000100CF9A8-00000000100CF9B8
const char *__cdecl data::MultiBadmintonShootMixin::getTypeName(const data::MultiBadmintonShootMixin *const this)
{
  return "MultiBadmintonShootMixin";
};

// Line 7279: range 00000000100CF9BA-00000000100CFB56
int32_t __cdecl data::MultiBadmintonShootMixin::getHashNum(const data::MultiBadmintonShootMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MultiBadmintonShootMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MultiBadmintonShootMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7295: range 0000000011297E4E-0000000011297E8F
void __cdecl data::MultiBadmintonShootMixinFactory::MultiBadmintonShootMixinFactory(
        data::MultiBadmintonShootMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MultiBadmintonShootMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MultiBadmintonShootMixinFactory = v2;
};

// Line 7303: range 0000000011298198-00000000112981F5
void __cdecl data::ElementConvertToChargeBarValueMixin::ElementConvertToChargeBarValueMixin(
        data::ElementConvertToChargeBarValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ElementConvertToChargeBarValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->group);
};

// Line 7303: range 00000000112985FA-0000000011298690
void __cdecl data::ElementConvertToChargeBarValueMixin::ElementConvertToChargeBarValueMixin(
        data::ElementConvertToChargeBarValueMixin *const this,
        const data::ElementConvertToChargeBarValueMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElementConvertToChargeBarValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->group, &a2->group);
};

// Line 7310: range 00000000112FDB5A-00000000112FDBB7
void __cdecl data::ElementConvertToChargeBarValueMixin::~ElementConvertToChargeBarValueMixin(
        data::ElementConvertToChargeBarValueMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementConvertToChargeBarValueMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->group);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7310: range 00000000112FDBB8-00000000112FDBE2
void __cdecl data::ElementConvertToChargeBarValueMixin::~ElementConvertToChargeBarValueMixin(
        data::ElementConvertToChargeBarValueMixin *const this)
{
  data::ElementConvertToChargeBarValueMixin::~ElementConvertToChargeBarValueMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 7315: range 00000000100CFB58-00000000100CFB68
const char *__cdecl data::ElementConvertToChargeBarValueMixin::getTypeName(
        const data::ElementConvertToChargeBarValueMixin *const this)
{
  return "ElementConvertToChargeBarValueMixin";
};

// Line 7316: range 00000000100CFB6A-00000000100CFD06
int32_t __cdecl data::ElementConvertToChargeBarValueMixin::getHashNum(
        const data::ElementConvertToChargeBarValueMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElementConvertToChargeBarValueMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElementConvertToChargeBarValueMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7332: range 000000001129897A-00000000112989BB
void __cdecl data::ElementConvertToChargeBarValueMixinFactory::ElementConvertToChargeBarValueMixinFactory(
        data::ElementConvertToChargeBarValueMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElementConvertToChargeBarValueMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElementConvertToChargeBarValueMixinFactory = v2;
};

// Line 7340: range 0000000011298CC4-0000000011298D5C
void __cdecl data::DynamicCollisionMixin::DynamicCollisionMixin(data::DynamicCollisionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DynamicCollisionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->tags);
  if ( *(char *)(((unsigned __int64)&this->is_checker >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_checker, v1, &this->is_checker);
  this->is_checker = 0;
};

// Line 7340: range 0000000011299162-000000001129926E
void __cdecl data::DynamicCollisionMixin::DynamicCollisionMixin(
        data::DynamicCollisionMixin *const this,
        const data::DynamicCollisionMixin *a2)
{
  int (**v2)(...); // rdx
  data::StringArray *p_tags; // rsi
  bool is_checker; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DynamicCollisionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_tags = &a2->tags;
  std::vector<std::string>::vector(&this->tags, &a2->tags);
  if ( *(char *)(((unsigned __int64)&a2->is_checker >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_checker, p_tags, &a2->is_checker);
  is_checker = a2->is_checker;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_checker >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_tags) = v5 != 0;
    __asan_report_store1(&this->is_checker, p_tags, &this->is_checker);
  }
  this->is_checker = is_checker;
};

// Line 7348: range 00000000112FDB2E-00000000112FDB58
void __cdecl data::DynamicCollisionMixin::~DynamicCollisionMixin(data::DynamicCollisionMixin *const this)
{
  data::DynamicCollisionMixin::~DynamicCollisionMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 7348: range 00000000112FDAD0-00000000112FDB2D
void __cdecl data::DynamicCollisionMixin::~DynamicCollisionMixin(data::DynamicCollisionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DynamicCollisionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->tags);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7353: range 00000000100CFD08-00000000100CFD18
const char *__cdecl data::DynamicCollisionMixin::getTypeName(const data::DynamicCollisionMixin *const this)
{
  return "DynamicCollisionMixin";
};

// Line 7354: range 00000000100CFD1A-00000000100CFEB6
int32_t __cdecl data::DynamicCollisionMixin::getHashNum(const data::DynamicCollisionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DynamicCollisionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DynamicCollisionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7370: range 0000000011299558-0000000011299599
void __cdecl data::DynamicCollisionMixinFactory::DynamicCollisionMixinFactory(
        data::DynamicCollisionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DynamicCollisionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DynamicCollisionMixinFactory = v2;
};

// Line 7378: range 00000000112998A2-000000001129993D
void __cdecl data::AIPerceptionMixin::AIPerceptionMixin(data::AIPerceptionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AIPerceptionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->feature_tag_ids);
  if ( *(_BYTE *)(((unsigned __int64)&this->perception_template_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->perception_template_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->perception_template_id, v1);
  }
  this->perception_template_id = 0;
};

// Line 7378: range 0000000011299D42-0000000011299E4D
void __cdecl data::AIPerceptionMixin::AIPerceptionMixin(
        data::AIPerceptionMixin *const this,
        const data::AIPerceptionMixin *a2)
{
  int (**v2)(...); // rdx
  data::UInt32Array *p_feature_tag_ids; // rsi
  uint32_t perception_template_id; // ecx
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AIPerceptionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_feature_tag_ids = &a2->feature_tag_ids;
  std::vector<unsigned int>::vector(&this->feature_tag_ids, &a2->feature_tag_ids);
  if ( *(_BYTE *)(((unsigned __int64)&a2->perception_template_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->perception_template_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->perception_template_id);
  }
  perception_template_id = a2->perception_template_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->perception_template_id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_feature_tag_ids) = v5 != 0;
    __asan_report_store4(&this->perception_template_id, p_feature_tag_ids);
  }
  this->perception_template_id = perception_template_id;
};

// Line 7386: range 00000000112FDAA4-00000000112FDACE
void __cdecl data::AIPerceptionMixin::~AIPerceptionMixin(data::AIPerceptionMixin *const this)
{
  data::AIPerceptionMixin::~AIPerceptionMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 7386: range 00000000112FDA46-00000000112FDAA3
void __cdecl data::AIPerceptionMixin::~AIPerceptionMixin(data::AIPerceptionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AIPerceptionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->feature_tag_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7391: range 00000000100CFEB8-00000000100CFEC8
const char *__cdecl data::AIPerceptionMixin::getTypeName(const data::AIPerceptionMixin *const this)
{
  return "AIPerceptionMixin";
};

// Line 7392: range 00000000100CFECA-00000000100D0066
int32_t __cdecl data::AIPerceptionMixin::getHashNum(const data::AIPerceptionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AIPerceptionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AIPerceptionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7408: range 000000001129A136-000000001129A177
void __cdecl data::AIPerceptionMixinFactory::AIPerceptionMixinFactory(data::AIPerceptionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AIPerceptionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AIPerceptionMixinFactory = v2;
};

// Line 7431: range 000000001129A5E0-000000001129A6C6
void __cdecl data::AttachModifierByNeuronMixin::AttachModifierByNeuronMixin(
        data::AttachModifierByNeuronMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByNeuronMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::NeuronName>::vector(&this->neuron_name_list);
  if ( *(_BYTE *)(((unsigned __int64)&this->remove_operator >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->remove_operator >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->remove_operator, v1);
  }
  this->remove_operator = OneByOne;
  std::string::basic_string(&this->modifier_name);
  if ( *(char *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->authority_only, v1, &this->authority_only);
  this->authority_only = 1;
};

// Line 7431: range 000000001129AA7C-000000001129AC2D
void __cdecl data::AttachModifierByNeuronMixin::AttachModifierByNeuronMixin(
        data::AttachModifierByNeuronMixin *const this,
        const data::AttachModifierByNeuronMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigNeuronNameList *p_neuron_name_list; // rsi
  data::NeuronMixinRemoveOperatorType remove_operator; // ecx
  char v5; // al
  std::string *p_modifier_name; // rsi
  bool authority_only; // cl
  char v8; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByNeuronMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_neuron_name_list = &a2->neuron_name_list;
  std::vector<data::NeuronName>::vector(&this->neuron_name_list, &a2->neuron_name_list);
  if ( *(_BYTE *)(((unsigned __int64)&a2->remove_operator >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->remove_operator >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->remove_operator);
  }
  remove_operator = a2->remove_operator;
  v5 = *(_BYTE *)(((unsigned __int64)&this->remove_operator >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_neuron_name_list) = v5 != 0;
    __asan_report_store4(&this->remove_operator, p_neuron_name_list);
  }
  this->remove_operator = remove_operator;
  p_modifier_name = &a2->modifier_name;
  std::string::basic_string(&this->modifier_name, &a2->modifier_name);
  if ( *(char *)(((unsigned __int64)&a2->authority_only >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->authority_only, p_modifier_name, &a2->authority_only);
  authority_only = a2->authority_only;
  v8 = *(_BYTE *)(((unsigned __int64)&this->authority_only >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(p_modifier_name) = v8 != 0;
    __asan_report_store1(&this->authority_only, p_modifier_name, &this->authority_only);
  }
  this->authority_only = authority_only;
};

// Line 7441: range 00000000112FD9AC-00000000112FDA19
void __cdecl data::AttachModifierByNeuronMixin::~AttachModifierByNeuronMixin(
        data::AttachModifierByNeuronMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByNeuronMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->modifier_name);
  std::vector<data::NeuronName>::~vector(&this->neuron_name_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7441: range 00000000112FDA1A-00000000112FDA44
void __cdecl data::AttachModifierByNeuronMixin::~AttachModifierByNeuronMixin(
        data::AttachModifierByNeuronMixin *const this)
{
  data::AttachModifierByNeuronMixin::~AttachModifierByNeuronMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 7446: range 00000000100D0068-00000000100D0078
const char *__cdecl data::AttachModifierByNeuronMixin::getTypeName(const data::AttachModifierByNeuronMixin *const this)
{
  return "AttachModifierByNeuronMixin";
};

// Line 7447: range 00000000100D007A-00000000100D0216
int32_t __cdecl data::AttachModifierByNeuronMixin::getHashNum(const data::AttachModifierByNeuronMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierByNeuronMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierByNeuronMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7463: range 000000001129AF16-000000001129AF57
void __cdecl data::AttachModifierByNeuronMixinFactory::AttachModifierByNeuronMixinFactory(
        data::AttachModifierByNeuronMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByNeuronMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierByNeuronMixinFactory = v2;
};

// Line 7471: range 000000001129B260-000000001129B33D
void __cdecl data::OverrideMonsterMoveSpeedRatioMixin::OverrideMonsterMoveSpeedRatioMixin(
        data::OverrideMonsterMoveSpeedRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OverrideMonsterMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_value, v1);
  }
  this->min_value = -1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_value, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->max_value = -1.0;
};

// Line 7471: range 000000001129B712-000000001129B86A
void __cdecl data::OverrideMonsterMoveSpeedRatioMixin::OverrideMonsterMoveSpeedRatioMixin(
        data::OverrideMonsterMoveSpeedRatioMixin *const this,
        const data::OverrideMonsterMoveSpeedRatioMixin *a2)
{
  int (**v2)(...); // rdx
  float min_value; // xmm0_4
  float max_value; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OverrideMonsterMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_value);
  }
  min_value = a2->min_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_value, a2);
  }
  this->min_value = min_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_value);
  }
  max_value = a2->max_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_value, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->max_value = max_value;
};

// Line 7479: range 00000000112FD980-00000000112FD9AA
void __cdecl data::OverrideMonsterMoveSpeedRatioMixin::~OverrideMonsterMoveSpeedRatioMixin(
        data::OverrideMonsterMoveSpeedRatioMixin *const this)
{
  data::OverrideMonsterMoveSpeedRatioMixin::~OverrideMonsterMoveSpeedRatioMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 7479: range 00000000112FD932-00000000112FD97F
void __cdecl data::OverrideMonsterMoveSpeedRatioMixin::~OverrideMonsterMoveSpeedRatioMixin(
        data::OverrideMonsterMoveSpeedRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideMonsterMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7484: range 00000000100D0218-00000000100D0228
const char *__cdecl data::OverrideMonsterMoveSpeedRatioMixin::getTypeName(
        const data::OverrideMonsterMoveSpeedRatioMixin *const this)
{
  return "OverrideMonsterMoveSpeedRatioMixin";
};

// Line 7485: range 00000000100D022A-00000000100D03C6
int32_t __cdecl data::OverrideMonsterMoveSpeedRatioMixin::getHashNum(
        const data::OverrideMonsterMoveSpeedRatioMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OverrideMonsterMoveSpeedRatioMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OverrideMonsterMoveSpeedRatioMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7501: range 000000001129BAB4-000000001129BAF5
void __cdecl data::OverrideMonsterMoveSpeedRatioMixinFactory::OverrideMonsterMoveSpeedRatioMixinFactory(
        data::OverrideMonsterMoveSpeedRatioMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideMonsterMoveSpeedRatioMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OverrideMonsterMoveSpeedRatioMixinFactory = v2;
};

// Line 7509: range 000000001129BDFE-000000001129BEDB
void __cdecl data::OverrideAvatarMoveSpeedRatioMixin::OverrideAvatarMoveSpeedRatioMixin(
        data::OverrideAvatarMoveSpeedRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OverrideAvatarMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_value, v1);
  }
  this->min_value = -1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_value, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->max_value = -1.0;
};

// Line 7509: range 000000001129C2B0-000000001129C408
void __cdecl data::OverrideAvatarMoveSpeedRatioMixin::OverrideAvatarMoveSpeedRatioMixin(
        data::OverrideAvatarMoveSpeedRatioMixin *const this,
        const data::OverrideAvatarMoveSpeedRatioMixin *a2)
{
  int (**v2)(...); // rdx
  float min_value; // xmm0_4
  float max_value; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OverrideAvatarMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_value);
  }
  min_value = a2->min_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_value, a2);
  }
  this->min_value = min_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_value);
  }
  max_value = a2->max_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_value, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->max_value = max_value;
};

// Line 7517: range 00000000112FD8B8-00000000112FD905
void __cdecl data::OverrideAvatarMoveSpeedRatioMixin::~OverrideAvatarMoveSpeedRatioMixin(
        data::OverrideAvatarMoveSpeedRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideAvatarMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7517: range 00000000112FD906-00000000112FD930
void __cdecl data::OverrideAvatarMoveSpeedRatioMixin::~OverrideAvatarMoveSpeedRatioMixin(
        data::OverrideAvatarMoveSpeedRatioMixin *const this)
{
  data::OverrideAvatarMoveSpeedRatioMixin::~OverrideAvatarMoveSpeedRatioMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 7522: range 00000000100D03C8-00000000100D03D8
const char *__cdecl data::OverrideAvatarMoveSpeedRatioMixin::getTypeName(
        const data::OverrideAvatarMoveSpeedRatioMixin *const this)
{
  return "OverrideAvatarMoveSpeedRatioMixin";
};

// Line 7523: range 00000000100D03DA-00000000100D0576
int32_t __cdecl data::OverrideAvatarMoveSpeedRatioMixin::getHashNum(
        const data::OverrideAvatarMoveSpeedRatioMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OverrideAvatarMoveSpeedRatioMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OverrideAvatarMoveSpeedRatioMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7539: range 000000001129C652-000000001129C693
void __cdecl data::OverrideAvatarMoveSpeedRatioMixinFactory::OverrideAvatarMoveSpeedRatioMixinFactory(
        data::OverrideAvatarMoveSpeedRatioMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideAvatarMoveSpeedRatioMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OverrideAvatarMoveSpeedRatioMixinFactory = v2;
};

// Line 7547: range 000000001129C99C-000000001129CA79
void __cdecl data::OverrideGadgetMoveSpeedRatioMixin::OverrideGadgetMoveSpeedRatioMixin(
        data::OverrideGadgetMoveSpeedRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OverrideGadgetMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_value, v1);
  }
  this->min_value = -1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_value, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->max_value = -1.0;
};

// Line 7547: range 000000001129CE4E-000000001129CFA6
void __cdecl data::OverrideGadgetMoveSpeedRatioMixin::OverrideGadgetMoveSpeedRatioMixin(
        data::OverrideGadgetMoveSpeedRatioMixin *const this,
        const data::OverrideGadgetMoveSpeedRatioMixin *a2)
{
  int (**v2)(...); // rdx
  float min_value; // xmm0_4
  float max_value; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OverrideGadgetMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_value);
  }
  min_value = a2->min_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_value, a2);
  }
  this->min_value = min_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_value);
  }
  max_value = a2->max_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_value, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->max_value = max_value;
};

// Line 7555: range 00000000112FD83E-00000000112FD88B
void __cdecl data::OverrideGadgetMoveSpeedRatioMixin::~OverrideGadgetMoveSpeedRatioMixin(
        data::OverrideGadgetMoveSpeedRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideGadgetMoveSpeedRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7555: range 00000000112FD88C-00000000112FD8B6
void __cdecl data::OverrideGadgetMoveSpeedRatioMixin::~OverrideGadgetMoveSpeedRatioMixin(
        data::OverrideGadgetMoveSpeedRatioMixin *const this)
{
  data::OverrideGadgetMoveSpeedRatioMixin::~OverrideGadgetMoveSpeedRatioMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 7560: range 00000000100D0578-00000000100D0588
const char *__cdecl data::OverrideGadgetMoveSpeedRatioMixin::getTypeName(
        const data::OverrideGadgetMoveSpeedRatioMixin *const this)
{
  return "OverrideGadgetMoveSpeedRatioMixin";
};

// Line 7561: range 00000000100D058A-00000000100D0726
int32_t __cdecl data::OverrideGadgetMoveSpeedRatioMixin::getHashNum(
        const data::OverrideGadgetMoveSpeedRatioMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OverrideGadgetMoveSpeedRatioMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OverrideGadgetMoveSpeedRatioMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7577: range 000000001129D1F0-000000001129D231
void __cdecl data::OverrideGadgetMoveSpeedRatioMixinFactory::OverrideGadgetMoveSpeedRatioMixinFactory(
        data::OverrideGadgetMoveSpeedRatioMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideGadgetMoveSpeedRatioMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OverrideGadgetMoveSpeedRatioMixinFactory = v2;
};

// Line 7585: range 000000001129D53A-000000001129D664
void __cdecl data::ConnectLineMixin::ConnectLineMixin(data::ConnectLineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ConnectLineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->repeater_modifier);
  std::string::basic_string(&this->collector_modifier);
  std::string::basic_string(&this->collector_globalvalue_key);
  if ( *(_WORD *)(((unsigned __int64)&this->other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates_foreach);
};

// Line 7585: range 000000001129DAB4-000000001129DC44
void __cdecl data::ConnectLineMixin::ConnectLineMixin(
        data::ConnectLineMixin *const this,
        const data::ConnectLineMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ConnectLineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->repeater_modifier, &a2->repeater_modifier);
  std::string::basic_string(&this->collector_modifier, &a2->collector_modifier);
  std::string::basic_string(&this->collector_globalvalue_key, &a2->collector_globalvalue_key);
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &a2->other_targets);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates_foreach, &a2->predicates_foreach);
};

// Line 7597: range 00000000112FD760-00000000112FD811
void __cdecl data::ConnectLineMixin::~ConnectLineMixin(data::ConnectLineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ConnectLineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates_foreach);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->other_targets);
  std::string::~string(&this->collector_globalvalue_key);
  std::string::~string(&this->collector_modifier);
  std::string::~string(&this->repeater_modifier);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7597: range 00000000112FD812-00000000112FD83C
void __cdecl data::ConnectLineMixin::~ConnectLineMixin(data::ConnectLineMixin *const this)
{
  data::ConnectLineMixin::~ConnectLineMixin(this);
  operator delete(this, 0xC0uLL);
};

// Line 7602: range 00000000100D0728-00000000100D0738
const char *__cdecl data::ConnectLineMixin::getTypeName(const data::ConnectLineMixin *const this)
{
  return "ConnectLineMixin";
};

// Line 7603: range 00000000100D073A-00000000100D08D6
int32_t __cdecl data::ConnectLineMixin::getHashNum(const data::ConnectLineMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ConnectLineMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ConnectLineMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7619: range 000000001129DF2E-000000001129DF6F
void __cdecl data::ConnectLineMixinFactory::ConnectLineMixinFactory(data::ConnectLineMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ConnectLineMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ConnectLineMixinFactory = v2;
};

// Line 7627: range 000000001129E278-000000001129E4B0
void __cdecl data::ElectricCoreMoveMixin::ElectricCoreMoveMixin(data::ElectricCoreMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_once_velocity >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->stage_once_velocity >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->stage_once_velocity, v1);
  }
  this->stage_once_velocity = 0.0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_one_accelerate >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->stage_one_accelerate >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->stage_one_accelerate, v3);
  }
  this->stage_one_accelerate = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_two_velocity >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->stage_two_velocity >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->stage_two_velocity, v3);
  }
  this->stage_two_velocity = 0.0;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_two_attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->stage_two_attenuation >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->stage_two_attenuation, v4);
  }
  this->stage_two_attenuation = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_absorb_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_absorb_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_absorb_time, v4);
  }
  this->max_absorb_time = 0.0;
  if ( *(_WORD *)(((unsigned __int64)&this->to_pos >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigBornType>();
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_core_enter);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_interrupted);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_start_success);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_start_failed);
};

// Line 7627: range 000000001129E8F4-000000001129ECC2
void __cdecl data::ElectricCoreMoveMixin::ElectricCoreMoveMixin(
        data::ElectricCoreMoveMixin *const this,
        const data::ElectricCoreMoveMixin *a2)
{
  int (**v2)(...); // rdx
  float stage_once_velocity; // xmm0_4
  float stage_one_accelerate; // xmm0_4
  __int64 v5; // rsi
  float stage_two_velocity; // xmm0_4
  float stage_two_attenuation; // xmm0_4
  __int64 v8; // rsi
  float max_absorb_time; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->stage_once_velocity >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->stage_once_velocity >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->stage_once_velocity);
  }
  stage_once_velocity = a2->stage_once_velocity;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_once_velocity >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->stage_once_velocity >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->stage_once_velocity, a2);
  }
  this->stage_once_velocity = stage_once_velocity;
  if ( *(_BYTE *)(((unsigned __int64)&a2->stage_one_accelerate >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->stage_one_accelerate >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->stage_one_accelerate);
  }
  stage_one_accelerate = a2->stage_one_accelerate;
  v5 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_one_accelerate >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->stage_one_accelerate >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->stage_one_accelerate, v5);
  }
  this->stage_one_accelerate = stage_one_accelerate;
  if ( *(_BYTE *)(((unsigned __int64)&a2->stage_two_velocity >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->stage_two_velocity >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->stage_two_velocity);
  }
  stage_two_velocity = a2->stage_two_velocity;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_two_velocity >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->stage_two_velocity >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->stage_two_velocity, v5);
  }
  this->stage_two_velocity = stage_two_velocity;
  if ( *(_BYTE *)(((unsigned __int64)&a2->stage_two_attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->stage_two_attenuation >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->stage_two_attenuation);
  }
  stage_two_attenuation = a2->stage_two_attenuation;
  v8 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->stage_two_attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->stage_two_attenuation >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->stage_two_attenuation, v8);
  }
  this->stage_two_attenuation = stage_two_attenuation;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_absorb_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_absorb_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_absorb_time);
  }
  max_absorb_time = a2->max_absorb_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_absorb_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_absorb_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_absorb_time, v8);
  }
  this->max_absorb_time = max_absorb_time;
  std::shared_ptr<data::ConfigBornType>::shared_ptr(&this->to_pos, &a2->to_pos);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_core_enter, &a2->on_core_enter);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_interrupted, &a2->on_interrupted);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_start_success, &a2->on_start_success);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_start_failed, &a2->on_start_failed);
};

// Line 7643: range 00000000112FD734-00000000112FD75E
void __cdecl data::ElectricCoreMoveMixin::~ElectricCoreMoveMixin(data::ElectricCoreMoveMixin *const this)
{
  data::ElectricCoreMoveMixin::~ElectricCoreMoveMixin(this);
  operator delete(this, 0xA8uLL);
};

// Line 7643: range 00000000112FD694-00000000112FD733
void __cdecl data::ElectricCoreMoveMixin::~ElectricCoreMoveMixin(data::ElectricCoreMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_start_failed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_start_success);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_interrupted);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_core_enter);
  std::shared_ptr<data::ConfigBornType>::~shared_ptr(&this->to_pos);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7648: range 00000000100D08D8-00000000100D08E8
const char *__cdecl data::ElectricCoreMoveMixin::getTypeName(const data::ElectricCoreMoveMixin *const this)
{
  return "ElectricCoreMoveMixin";
};

// Line 7649: range 00000000100D08EA-00000000100D0A86
int32_t __cdecl data::ElectricCoreMoveMixin::getHashNum(const data::ElectricCoreMoveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElectricCoreMoveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElectricCoreMoveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7665: range 000000001129EFAC-000000001129EFED
void __cdecl data::ElectricCoreMoveMixinFactory::ElectricCoreMoveMixinFactory(
        data::ElectricCoreMoveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreMoveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElectricCoreMoveMixinFactory = v2;
};

// Line 7673: range 000000001129F2F6-000000001129F3E9
void __cdecl data::SendPostionToShaderCutMixin::SendPostionToShaderCutMixin(
        data::SendPostionToShaderCutMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SendPostionToShaderCutMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->send_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->send_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->send_target, v1);
  }
  this->send_target = Self_0;
  if ( *(_BYTE *)(((unsigned __int64)&this->send_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->send_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->send_radius, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->send_radius = 0.0;
  data::Vector::Vector(&this->scale);
  data::Vector::Vector(&this->offset);
};

// Line 7673: range 000000001129F804-000000001129FA21
void __cdecl data::SendPostionToShaderCutMixin::SendPostionToShaderCutMixin(
        data::SendPostionToShaderCutMixin *const this,
        const data::SendPostionToShaderCutMixin *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting send_target; // ecx
  char v4; // al
  float send_radius; // xmm0_4
  __int64 v6; // rdx
  __int64 v7; // rdx
  const data::SendPostionToShaderCutMixin *v8; // [rsp+0h] [rbp-10h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SendPostionToShaderCutMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->send_target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->send_target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->send_target);
  }
  send_target = a2->send_target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->send_target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->send_target, a2);
  }
  this->send_target = send_target;
  if ( *(_BYTE *)(((unsigned __int64)&v8->send_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->send_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->send_radius);
  }
  send_radius = v8->send_radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->send_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->send_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->send_radius, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->send_radius = send_radius;
  if ( *(_WORD *)(((unsigned __int64)&this->scale >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&v8->scale >> 3) + 0x7FFF8000) )
    __asan_report_load16(&v8->scale);
  v6 = *(_QWORD *)&v8->scale.z;
  *(_QWORD *)&this->scale.x = *(_QWORD *)&v8->scale.x;
  *(_QWORD *)&this->scale.z = v6;
  if ( *(_WORD *)(((unsigned __int64)&this->offset >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&v8->offset >> 3) + 0x7FFF8000) )
    __asan_report_load16(&v8->offset);
  v7 = *(_QWORD *)&v8->offset.z;
  *(_QWORD *)&this->offset.x = *(_QWORD *)&v8->offset.x;
  *(_QWORD *)&this->offset.z = v7;
};

// Line 7683: range 00000000112FD61A-00000000112FD667
void __cdecl data::SendPostionToShaderCutMixin::~SendPostionToShaderCutMixin(
        data::SendPostionToShaderCutMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendPostionToShaderCutMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7683: range 00000000112FD668-00000000112FD692
void __cdecl data::SendPostionToShaderCutMixin::~SendPostionToShaderCutMixin(
        data::SendPostionToShaderCutMixin *const this)
{
  data::SendPostionToShaderCutMixin::~SendPostionToShaderCutMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 7688: range 00000000100D0A88-00000000100D0A98
const char *__cdecl data::SendPostionToShaderCutMixin::getTypeName(const data::SendPostionToShaderCutMixin *const this)
{
  return "SendPostionToShaderCutMixin";
};

// Line 7689: range 00000000100D0A9A-00000000100D0C36
int32_t __cdecl data::SendPostionToShaderCutMixin::getHashNum(const data::SendPostionToShaderCutMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SendPostionToShaderCutMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SendPostionToShaderCutMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7705: range 000000001129FC6A-000000001129FCAB
void __cdecl data::SendPostionToShaderCutMixinFactory::SendPostionToShaderCutMixinFactory(
        data::SendPostionToShaderCutMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SendPostionToShaderCutMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SendPostionToShaderCutMixinFactory = v2;
};

// Line 7713: range 000000001129FFB4-00000000112A01C8
void __cdecl data::FishingAimParabolaMixin::FishingAimParabolaMixin(data::FishingAimParabolaMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::FishingAimParabolaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_angle, v1);
  }
  this->min_angle = 0.0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_angle, v3);
  }
  this->max_angle = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_range, v3);
  }
  this->min_range = 0.0;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_range, v4);
  }
  this->max_range = 0.0;
  std::string::basic_string(&this->global_value_key);
  if ( *(_WORD *)(((unsigned __int64)&this->other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  if ( *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target, v4);
  }
  this->target = Self_0;
};

// Line 7713: range 00000000112A0612-00000000112A0938
void __cdecl data::FishingAimParabolaMixin::FishingAimParabolaMixin(
        data::FishingAimParabolaMixin *const this,
        const data::FishingAimParabolaMixin *a2)
{
  int (**v2)(...); // rdx
  float min_angle; // xmm0_4
  float max_angle; // xmm0_4
  __int64 v5; // rsi
  float min_range; // xmm0_4
  float max_range; // xmm0_4
  data::SelectTargetsPtr *p_other_targets; // rsi
  data::AbilityTargetting target; // ecx
  char v10; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::FishingAimParabolaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_angle);
  }
  min_angle = a2->min_angle;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_angle >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_angle, a2);
  }
  this->min_angle = min_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_angle);
  }
  max_angle = a2->max_angle;
  v5 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_angle >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_angle, v5);
  }
  this->max_angle = max_angle;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->min_range);
  }
  min_range = a2->min_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_range, v5);
  }
  this->min_range = min_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_range);
  }
  max_range = a2->max_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_range, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->max_range = max_range;
  std::string::basic_string(&this->global_value_key, &a2->global_value_key);
  p_other_targets = &a2->other_targets;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &a2->other_targets);
  if ( *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target);
  }
  target = a2->target;
  v10 = *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000);
  if ( v10 != 0 && v10 <= 3 )
  {
    LOBYTE(p_other_targets) = v10 != 0;
    __asan_report_store4(&this->target, p_other_targets);
  }
  this->target = target;
};

// Line 7726: range 00000000112FD580-00000000112FD5ED
void __cdecl data::FishingAimParabolaMixin::~FishingAimParabolaMixin(data::FishingAimParabolaMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FishingAimParabolaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->other_targets);
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7726: range 00000000112FD5EE-00000000112FD618
void __cdecl data::FishingAimParabolaMixin::~FishingAimParabolaMixin(data::FishingAimParabolaMixin *const this)
{
  data::FishingAimParabolaMixin::~FishingAimParabolaMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 7731: range 00000000100D0C38-00000000100D0C48
const char *__cdecl data::FishingAimParabolaMixin::getTypeName(const data::FishingAimParabolaMixin *const this)
{
  return "FishingAimParabolaMixin";
};

// Line 7732: range 00000000100D0C4A-00000000100D0DE6
int32_t __cdecl data::FishingAimParabolaMixin::getHashNum(const data::FishingAimParabolaMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::FishingAimParabolaMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "FishingAimParabolaMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7748: range 00000000112A0C22-00000000112A0C63
void __cdecl data::FishingAimParabolaMixinFactory::FishingAimParabolaMixinFactory(
        data::FishingAimParabolaMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::FishingAimParabolaMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_FishingAimParabolaMixinFactory = v2;
};

// Line 7756: range 00000000112A0F6C-00000000112A1032
void __cdecl data::ElectricCoreLineMixin::ElectricCoreLineMixin(data::ElectricCoreLineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreLineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_WORD *)(((unsigned __int64)&this->other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  std::string::basic_string(&this->activate_skill_key);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
};

// Line 7756: range 00000000112A147C-00000000112A156D
void __cdecl data::ElectricCoreLineMixin::ElectricCoreLineMixin(
        data::ElectricCoreLineMixin *const this,
        const data::ElectricCoreLineMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreLineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &a2->other_targets);
  std::string::basic_string(&this->activate_skill_key, &a2->activate_skill_key);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
};

// Line 7765: range 00000000112FD554-00000000112FD57E
void __cdecl data::ElectricCoreLineMixin::~ElectricCoreLineMixin(data::ElectricCoreLineMixin *const this)
{
  data::ElectricCoreLineMixin::~ElectricCoreLineMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 7765: range 00000000112FD4D6-00000000112FD553
void __cdecl data::ElectricCoreLineMixin::~ElectricCoreLineMixin(data::ElectricCoreLineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreLineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::string::~string(&this->activate_skill_key);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->other_targets);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7770: range 00000000100D0DE8-00000000100D0DF8
const char *__cdecl data::ElectricCoreLineMixin::getTypeName(const data::ElectricCoreLineMixin *const this)
{
  return "ElectricCoreLineMixin";
};

// Line 7771: range 00000000100D0DFA-00000000100D0F96
int32_t __cdecl data::ElectricCoreLineMixin::getHashNum(const data::ElectricCoreLineMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ElectricCoreLineMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ElectricCoreLineMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7787: range 00000000112A1856-00000000112A1897
void __cdecl data::ElectricCoreLineMixinFactory::ElectricCoreLineMixinFactory(
        data::ElectricCoreLineMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ElectricCoreLineMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ElectricCoreLineMixinFactory = v2;
};

// Line 7795: range 00000000112A1BA0-00000000112A1C2D
void __cdecl data::StreamingModifierMixin::StreamingModifierMixin(data::StreamingModifierMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::StreamingModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->apply_modifier >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->apply_modifier >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->apply_modifier, v3, v4);
  this->apply_modifier = 1;
};

// Line 7795: range 00000000112A1FF2-00000000112A20CA
void __cdecl data::StreamingModifierMixin::StreamingModifierMixin(
        data::StreamingModifierMixin *const this,
        const data::StreamingModifierMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool apply_modifier; // cl
  char v6; // dl
  __int64 v7; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::StreamingModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->apply_modifier >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->apply_modifier >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->apply_modifier, v3, v4);
  apply_modifier = a2->apply_modifier;
  v6 = *(_BYTE *)(((unsigned __int64)&this->apply_modifier >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->apply_modifier, v3, v7);
  this->apply_modifier = apply_modifier;
};

// Line 7802: range 00000000112FD45C-00000000112FD4A9
void __cdecl data::StreamingModifierMixin::~StreamingModifierMixin(data::StreamingModifierMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StreamingModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 7802: range 00000000112FD4AA-00000000112FD4D4
void __cdecl data::StreamingModifierMixin::~StreamingModifierMixin(data::StreamingModifierMixin *const this)
{
  data::StreamingModifierMixin::~StreamingModifierMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 7807: range 00000000100D0F98-00000000100D0FA8
const char *__cdecl data::StreamingModifierMixin::getTypeName(const data::StreamingModifierMixin *const this)
{
  return "StreamingModifierMixin";
};

// Line 7808: range 00000000100D0FAA-00000000100D1146
int32_t __cdecl data::StreamingModifierMixin::getHashNum(const data::StreamingModifierMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::StreamingModifierMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "StreamingModifierMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7824: range 00000000112A2314-00000000112A2355
void __cdecl data::StreamingModifierMixinFactory::StreamingModifierMixinFactory(
        data::StreamingModifierMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StreamingModifierMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_StreamingModifierMixinFactory = v2;
};

// Line 7832: range 00000000112A265E-00000000112A279F
void __cdecl data::SelfAddDurabilityMixin::SelfAddDurabilityMixin(data::SelfAddDurabilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SelfAddDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->value, 0.0);
  if ( *(char *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_limit_range, v1, &this->use_limit_range);
  this->use_limit_range = 0;
  data::DynamicFloat::DynamicFloat(&this->max_value, 3.4028235e38);
  data::DynamicFloat::DynamicFloat(&this->min_value);
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->think_interval, v1);
  }
  this->think_interval = 0.0;
};

// Line 7832: range 00000000112A2BE8-00000000112A2DD6
void __cdecl data::SelfAddDurabilityMixin::SelfAddDurabilityMixin(
        data::SelfAddDurabilityMixin *const this,
        const data::SelfAddDurabilityMixin *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_value; // rsi
  bool use_limit_range; // cl
  char v5; // al
  float think_interval; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SelfAddDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_value = &a2->value;
  data::DynamicFloat::DynamicFloat(&this->value, &a2->value);
  if ( *(char *)(((unsigned __int64)&a2->use_limit_range >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_limit_range, p_value, &a2->use_limit_range);
  use_limit_range = a2->use_limit_range;
  v5 = *(_BYTE *)(((unsigned __int64)&this->use_limit_range >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_value) = v5 != 0;
    __asan_report_store1(&this->use_limit_range, p_value, &this->use_limit_range);
  }
  this->use_limit_range = use_limit_range;
  data::DynamicFloat::DynamicFloat(&this->max_value, &a2->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &a2->min_value);
  if ( *(_BYTE *)(((unsigned __int64)&a2->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->think_interval);
  }
  think_interval = a2->think_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->think_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->think_interval, &a2->min_value);
  }
  this->think_interval = think_interval;
};

// Line 7843: range 00000000112FD3B2-00000000112FD42F
void __cdecl data::SelfAddDurabilityMixin::~SelfAddDurabilityMixin(data::SelfAddDurabilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SelfAddDurabilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  data::DynamicFloat::~DynamicFloat(&this->value);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7843: range 00000000112FD430-00000000112FD45A
void __cdecl data::SelfAddDurabilityMixin::~SelfAddDurabilityMixin(data::SelfAddDurabilityMixin *const this)
{
  data::SelfAddDurabilityMixin::~SelfAddDurabilityMixin(this);
  operator delete(this, 0x90uLL);
};

// Line 7848: range 00000000100D1148-00000000100D1158
const char *__cdecl data::SelfAddDurabilityMixin::getTypeName(const data::SelfAddDurabilityMixin *const this)
{
  return "SelfAddDurabilityMixin";
};

// Line 7849: range 00000000100D115A-00000000100D12F6
int32_t __cdecl data::SelfAddDurabilityMixin::getHashNum(const data::SelfAddDurabilityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SelfAddDurabilityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SelfAddDurabilityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7865: range 00000000112A30C0-00000000112A3101
void __cdecl data::SelfAddDurabilityMixinFactory::SelfAddDurabilityMixinFactory(
        data::SelfAddDurabilityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SelfAddDurabilityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SelfAddDurabilityMixinFactory = v2;
};

// Line 7888: range 00000000112A356A-00000000112A3659
void __cdecl data::ClampDamageReceivedMixin::ClampDamageReceivedMixin(data::ClampDamageReceivedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ClampDamageReceivedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->clamp_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->clamp_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->clamp_type, v1);
  }
  this->clamp_type = HPMaxPercent;
  data::DynamicFloat::DynamicFloat(&this->max_value, 3.4028235e38);
  data::DynamicFloat::DynamicFloat(&this->min_value, 0.0);
};

// Line 7888: range 00000000112A3AA2-00000000112A3BDD
void __cdecl data::ClampDamageReceivedMixin::ClampDamageReceivedMixin(
        data::ClampDamageReceivedMixin *const this,
        const data::ClampDamageReceivedMixin *a2)
{
  int (**v2)(...); // rdx
  data::DamageClampType clamp_type; // ecx
  char v4; // al
  const data::ClampDamageReceivedMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ClampDamageReceivedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->clamp_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->clamp_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->clamp_type);
  }
  clamp_type = a2->clamp_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->clamp_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->clamp_type, a2);
  }
  this->clamp_type = clamp_type;
  data::DynamicFloat::DynamicFloat(&this->max_value, &v5->max_value);
  data::DynamicFloat::DynamicFloat(&this->min_value, &v5->min_value);
};

// Line 7897: range 00000000112FD318-00000000112FD385
void __cdecl data::ClampDamageReceivedMixin::~ClampDamageReceivedMixin(data::ClampDamageReceivedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClampDamageReceivedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->min_value);
  data::DynamicFloat::~DynamicFloat(&this->max_value);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7897: range 00000000112FD386-00000000112FD3B0
void __cdecl data::ClampDamageReceivedMixin::~ClampDamageReceivedMixin(data::ClampDamageReceivedMixin *const this)
{
  data::ClampDamageReceivedMixin::~ClampDamageReceivedMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 7902: range 00000000100D12F8-00000000100D1308
const char *__cdecl data::ClampDamageReceivedMixin::getTypeName(const data::ClampDamageReceivedMixin *const this)
{
  return "ClampDamageReceivedMixin";
};

// Line 7903: range 00000000100D130A-00000000100D14A6
int32_t __cdecl data::ClampDamageReceivedMixin::getHashNum(const data::ClampDamageReceivedMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ClampDamageReceivedMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ClampDamageReceivedMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7919: range 00000000112A3EC6-00000000112A3F07
void __cdecl data::ClampDamageReceivedMixinFactory::ClampDamageReceivedMixinFactory(
        data::ClampDamageReceivedMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ClampDamageReceivedMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ClampDamageReceivedMixinFactory = v2;
};

// Line 7940: range 00000000112A4370-00000000112A4466
void __cdecl data::DoActionByDamageReceivedMixin::DoActionByDamageReceivedMixin(
        data::DoActionByDamageReceivedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByDamageReceivedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->param_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->param_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->param_type, v1);
  }
  this->param_type = HPMaxPercent_0;
  data::DynamicFloat::DynamicFloat(&this->value_min);
  data::DynamicFloat::DynamicFloat(&this->value_max, 3.4028235e38);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
};

// Line 7940: range 00000000112A48B0-00000000112A4A1B
void __cdecl data::DoActionByDamageReceivedMixin::DoActionByDamageReceivedMixin(
        data::DoActionByDamageReceivedMixin *const this,
        const data::DoActionByDamageReceivedMixin *a2)
{
  int (**v2)(...); // rdx
  data::DoActionByDamageReceivedParamType param_type; // ecx
  char v4; // al
  const data::DoActionByDamageReceivedMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByDamageReceivedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->param_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->param_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->param_type);
  }
  param_type = a2->param_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->param_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->param_type, a2);
  }
  this->param_type = param_type;
  data::DynamicFloat::DynamicFloat(&this->value_min, &v5->value_min);
  data::DynamicFloat::DynamicFloat(&this->value_max, &v5->value_max);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &v5->action_queue);
};

// Line 7950: range 00000000112FD2EC-00000000112FD316
void __cdecl data::DoActionByDamageReceivedMixin::~DoActionByDamageReceivedMixin(
        data::DoActionByDamageReceivedMixin *const this)
{
  data::DoActionByDamageReceivedMixin::~DoActionByDamageReceivedMixin(this);
  operator delete(this, 0x80uLL);
};

// Line 7950: range 00000000112FD26E-00000000112FD2EB
void __cdecl data::DoActionByDamageReceivedMixin::~DoActionByDamageReceivedMixin(
        data::DoActionByDamageReceivedMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByDamageReceivedMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  data::DynamicFloat::~DynamicFloat(&this->value_max);
  data::DynamicFloat::~DynamicFloat(&this->value_min);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7955: range 00000000100D14A8-00000000100D14B8
const char *__cdecl data::DoActionByDamageReceivedMixin::getTypeName(
        const data::DoActionByDamageReceivedMixin *const this)
{
  return "DoActionByDamageReceivedMixin";
};

// Line 7956: range 00000000100D14BA-00000000100D1656
int32_t __cdecl data::DoActionByDamageReceivedMixin::getHashNum(const data::DoActionByDamageReceivedMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByDamageReceivedMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByDamageReceivedMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 7972: range 00000000112A4D04-00000000112A4D45
void __cdecl data::DoActionByDamageReceivedMixinFactory::DoActionByDamageReceivedMixinFactory(
        data::DoActionByDamageReceivedMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByDamageReceivedMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByDamageReceivedMixinFactory = v2;
};

// Line 7980: range 00000000112A504E-00000000112A50BB
void __cdecl data::AttachModifierToClimateMeterMixin::AttachModifierToClimateMeterMixin(
        data::AttachModifierToClimateMeterMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToClimateMeterMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps);
};

// Line 7980: range 00000000112A54E0-00000000112A55A6
void __cdecl data::AttachModifierToClimateMeterMixin::AttachModifierToClimateMeterMixin(
        data::AttachModifierToClimateMeterMixin *const this,
        const data::AttachModifierToClimateMeterMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToClimateMeterMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  std::vector<std::string>::vector(&this->modifier_name_steps, &a2->modifier_name_steps);
};

// Line 7988: range 00000000112FD1D4-00000000112FD241
void __cdecl data::AttachModifierToClimateMeterMixin::~AttachModifierToClimateMeterMixin(
        data::AttachModifierToClimateMeterMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToClimateMeterMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 7988: range 00000000112FD242-00000000112FD26C
void __cdecl data::AttachModifierToClimateMeterMixin::~AttachModifierToClimateMeterMixin(
        data::AttachModifierToClimateMeterMixin *const this)
{
  data::AttachModifierToClimateMeterMixin::~AttachModifierToClimateMeterMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 7993: range 00000000100D1658-00000000100D1668
const char *__cdecl data::AttachModifierToClimateMeterMixin::getTypeName(
        const data::AttachModifierToClimateMeterMixin *const this)
{
  return "AttachModifierToClimateMeterMixin";
};

// Line 7994: range 00000000100D166A-00000000100D1806
int32_t __cdecl data::AttachModifierToClimateMeterMixin::getHashNum(
        const data::AttachModifierToClimateMeterMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierToClimateMeterMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierToClimateMeterMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8010: range 00000000112A5890-00000000112A58D1
void __cdecl data::AttachModifierToClimateMeterMixinFactory::AttachModifierToClimateMeterMixinFactory(
        data::AttachModifierToClimateMeterMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierToClimateMeterMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierToClimateMeterMixinFactory = v2;
};

// Line 8018: range 00000000112A5BDA-00000000112A5E2F
void __cdecl data::ChangeLockTypeMixin::ChangeLockTypeMixin(data::ChangeLockTypeMixin *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int (**v5)(...); // rdx
  __int64 v6; // rsi
  char v7[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ChangeLockTypeMixin::ChangeLockTypeMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v5 = (int (**)(...))(&`vtable for'data::ChangeLockTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v5;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(&this->lock_type, "Default", (const std::allocator<char> *)(v2 + 32));
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( *(_BYTE *)(((unsigned __int64)&this->override_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->override_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->override_range, "Default");
  }
  this->override_range = -1.0;
  v6 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->override_normal_pri >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->override_normal_pri >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->override_normal_pri, v6);
  }
  this->override_normal_pri = -1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->override_combat_pri >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->override_combat_pri >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->override_combat_pri, v6);
  }
  this->override_combat_pri = -1.0;
  if ( v7 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 8018: range 00000000112A62EA-00000000112A64F8
void __cdecl data::ChangeLockTypeMixin::ChangeLockTypeMixin(
        data::ChangeLockTypeMixin *const this,
        const data::ChangeLockTypeMixin *a2)
{
  int (**v2)(...); // rdx
  float override_range; // xmm0_4
  float override_normal_pri; // xmm0_4
  __int64 v5; // rsi
  float override_combat_pri; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeLockTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->lock_type, &a2->lock_type);
  if ( *(_BYTE *)(((unsigned __int64)&a2->override_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->override_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->override_range);
  }
  override_range = a2->override_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->override_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->override_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->override_range, &a2->lock_type);
  }
  this->override_range = override_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->override_normal_pri >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->override_normal_pri >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->override_normal_pri);
  }
  override_normal_pri = a2->override_normal_pri;
  v5 = (((_BYTE)this + 68) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->override_normal_pri >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 68) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->override_normal_pri >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->override_normal_pri, v5);
  }
  this->override_normal_pri = override_normal_pri;
  if ( *(_BYTE *)(((unsigned __int64)&a2->override_combat_pri >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->override_combat_pri >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->override_combat_pri);
  }
  override_combat_pri = a2->override_combat_pri;
  if ( *(_BYTE *)(((unsigned __int64)&this->override_combat_pri >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->override_combat_pri >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->override_combat_pri, v5);
  }
  this->override_combat_pri = override_combat_pri;
};

// Line 8028: range 00000000112FD14A-00000000112FD1A7
void __cdecl data::ChangeLockTypeMixin::~ChangeLockTypeMixin(data::ChangeLockTypeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeLockTypeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->lock_type);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8028: range 00000000112FD1A8-00000000112FD1D2
void __cdecl data::ChangeLockTypeMixin::~ChangeLockTypeMixin(data::ChangeLockTypeMixin *const this)
{
  data::ChangeLockTypeMixin::~ChangeLockTypeMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 8033: range 00000000100D1808-00000000100D1818
const char *__cdecl data::ChangeLockTypeMixin::getTypeName(const data::ChangeLockTypeMixin *const this)
{
  return "ChangeLockTypeMixin";
};

// Line 8034: range 00000000100D181A-00000000100D19B6
int32_t __cdecl data::ChangeLockTypeMixin::getHashNum(const data::ChangeLockTypeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeLockTypeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeLockTypeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8050: range 00000000112A67E2-00000000112A6823
void __cdecl data::ChangeLockTypeMixinFactory::ChangeLockTypeMixinFactory(data::ChangeLockTypeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeLockTypeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeLockTypeMixinFactory = v2;
};

// Line 8058: range 00000000112A6B2C-00000000112A6CA8
void __cdecl data::EffectChangeAlphaMixin::EffectChangeAlphaMixin(data::EffectChangeAlphaMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EffectChangeAlphaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target, v1);
  }
  this->target = Self_0;
  if ( *(_WORD *)(((unsigned __int64)&this->other_targets >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::SelectTargets>();
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->start_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->start_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->start_duration, v1);
  }
  this->start_duration = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->end_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->end_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->end_duration, (((_BYTE)this + 84) & 7u) + 3);
  }
  this->end_duration = 0.0;
};

// Line 8058: range 00000000112A70F8-00000000112A732E
void __cdecl data::EffectChangeAlphaMixin::EffectChangeAlphaMixin(
        data::EffectChangeAlphaMixin *const this,
        const data::EffectChangeAlphaMixin *a2)
{
  int (**v2)(...); // rdx
  data::AbilityTargetting target; // ecx
  char v4; // al
  float start_duration; // xmm0_4
  float end_duration; // xmm0_4
  const data::EffectChangeAlphaMixin *v7; // [rsp+0h] [rbp-20h]

  v7 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EffectChangeAlphaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target);
  }
  target = a2->target;
  v4 = *(_BYTE *)(((unsigned __int64)&this->target >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->target, a2);
  }
  this->target = target;
  std::shared_ptr<data::SelectTargets>::shared_ptr(&this->other_targets, &v7->other_targets);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &v7->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&v7->start_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v7->start_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v7->start_duration);
  }
  start_duration = v7->start_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->start_duration >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->start_duration >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->start_duration, &v7->predicates);
  }
  this->start_duration = start_duration;
  if ( *(_BYTE *)(((unsigned __int64)&v7->end_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v7 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v7->end_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v7->end_duration);
  }
  end_duration = v7->end_duration;
  if ( *(_BYTE *)(((unsigned __int64)&this->end_duration >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->end_duration >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->end_duration, (((_BYTE)this + 84) & 7u) + 3);
  }
  this->end_duration = end_duration;
};

// Line 8069: range 00000000112FD11E-00000000112FD148
void __cdecl data::EffectChangeAlphaMixin::~EffectChangeAlphaMixin(data::EffectChangeAlphaMixin *const this)
{
  data::EffectChangeAlphaMixin::~EffectChangeAlphaMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 8069: range 00000000112FD0B0-00000000112FD11D
void __cdecl data::EffectChangeAlphaMixin::~EffectChangeAlphaMixin(data::EffectChangeAlphaMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EffectChangeAlphaMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::shared_ptr<data::SelectTargets>::~shared_ptr(&this->other_targets);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8074: range 00000000100D19B8-00000000100D19C8
const char *__cdecl data::EffectChangeAlphaMixin::getTypeName(const data::EffectChangeAlphaMixin *const this)
{
  return "EffectChangeAlphaMixin";
};

// Line 8075: range 00000000100D19CA-00000000100D1B66
int32_t __cdecl data::EffectChangeAlphaMixin::getHashNum(const data::EffectChangeAlphaMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EffectChangeAlphaMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EffectChangeAlphaMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8091: range 00000000112A7618-00000000112A7659
void __cdecl data::EffectChangeAlphaMixinFactory::EffectChangeAlphaMixinFactory(
        data::EffectChangeAlphaMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EffectChangeAlphaMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EffectChangeAlphaMixinFactory = v2;
};

// Line 8099: range 00000000112A7962-00000000112A79CF
void __cdecl data::ReplaceFaceAnimationMixin::ReplaceFaceAnimationMixin(data::ReplaceFaceAnimationMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ReplaceFaceAnimationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->old_face_animations);
  std::vector<std::string>::vector(&this->new_face_animations);
};

// Line 8099: range 00000000112A7DF4-00000000112A7EBA
void __cdecl data::ReplaceFaceAnimationMixin::ReplaceFaceAnimationMixin(
        data::ReplaceFaceAnimationMixin *const this,
        const data::ReplaceFaceAnimationMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReplaceFaceAnimationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->old_face_animations, &a2->old_face_animations);
  std::vector<std::string>::vector(&this->new_face_animations, &a2->new_face_animations);
};

// Line 8107: range 00000000112FD016-00000000112FD083
void __cdecl data::ReplaceFaceAnimationMixin::~ReplaceFaceAnimationMixin(data::ReplaceFaceAnimationMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReplaceFaceAnimationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->new_face_animations);
  std::vector<std::string>::~vector(&this->old_face_animations);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8107: range 00000000112FD084-00000000112FD0AE
void __cdecl data::ReplaceFaceAnimationMixin::~ReplaceFaceAnimationMixin(data::ReplaceFaceAnimationMixin *const this)
{
  data::ReplaceFaceAnimationMixin::~ReplaceFaceAnimationMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 8112: range 00000000100D1B68-00000000100D1B78
const char *__cdecl data::ReplaceFaceAnimationMixin::getTypeName(const data::ReplaceFaceAnimationMixin *const this)
{
  return "ReplaceFaceAnimationMixin";
};

// Line 8113: range 00000000100D1B7A-00000000100D1D16
int32_t __cdecl data::ReplaceFaceAnimationMixin::getHashNum(const data::ReplaceFaceAnimationMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReplaceFaceAnimationMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReplaceFaceAnimationMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8129: range 00000000112A81A4-00000000112A81E5
void __cdecl data::ReplaceFaceAnimationMixinFactory::ReplaceFaceAnimationMixinFactory(
        data::ReplaceFaceAnimationMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReplaceFaceAnimationMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReplaceFaceAnimationMixinFactory = v2;
};

// Line 8137: range 00000000112A84EE-00000000112A8601
void __cdecl data::DigAttachModifierToTargetDistanceMixin::DigAttachModifierToTargetDistanceMixin(
        data::DigAttachModifierToTargetDistanceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DigAttachModifierToTargetDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->target_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->target_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->target_id, v1);
  }
  this->target_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->distance, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->distance = 0.0;
  std::string::basic_string(&this->unfound_effect_pattern);
  std::string::basic_string(&this->found_effect_pattern);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->unfound_action_array);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->found_action_array);
};

// Line 8137: range 00000000112A89BE-00000000112A8BE1
void __cdecl data::DigAttachModifierToTargetDistanceMixin::DigAttachModifierToTargetDistanceMixin(
        data::DigAttachModifierToTargetDistanceMixin *const this,
        const data::DigAttachModifierToTargetDistanceMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t target_id; // ecx
  char v4; // al
  float distance; // xmm0_4
  const data::DigAttachModifierToTargetDistanceMixin *v6; // [rsp+0h] [rbp-20h]

  v6 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DigAttachModifierToTargetDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->target_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->target_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->target_id);
  }
  target_id = a2->target_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->target_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->target_id, a2);
  }
  this->target_id = target_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->distance);
  }
  distance = v6->distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->distance, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->distance = distance;
  std::string::basic_string(&this->unfound_effect_pattern, &v6->unfound_effect_pattern);
  std::string::basic_string(&this->found_effect_pattern, &v6->found_effect_pattern);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->unfound_action_array,
    &v6->unfound_action_array);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->found_action_array, &v6->found_action_array);
};

// Line 8149: range 00000000112FCF5C-00000000112FCFE9
void __cdecl data::DigAttachModifierToTargetDistanceMixin::~DigAttachModifierToTargetDistanceMixin(
        data::DigAttachModifierToTargetDistanceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DigAttachModifierToTargetDistanceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->found_action_array);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->unfound_action_array);
  std::string::~string(&this->found_effect_pattern);
  std::string::~string(&this->unfound_effect_pattern);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8149: range 00000000112FCFEA-00000000112FD014
void __cdecl data::DigAttachModifierToTargetDistanceMixin::~DigAttachModifierToTargetDistanceMixin(
        data::DigAttachModifierToTargetDistanceMixin *const this)
{
  data::DigAttachModifierToTargetDistanceMixin::~DigAttachModifierToTargetDistanceMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 8154: range 00000000100D1D18-00000000100D1D28
const char *__cdecl data::DigAttachModifierToTargetDistanceMixin::getTypeName(
        const data::DigAttachModifierToTargetDistanceMixin *const this)
{
  return "DigAttachModifierToTargetDistanceMixin";
};

// Line 8155: range 00000000100D1D2A-00000000100D1EC6
int32_t __cdecl data::DigAttachModifierToTargetDistanceMixin::getHashNum(
        const data::DigAttachModifierToTargetDistanceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DigAttachModifierToTargetDistanceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DigAttachModifierToTargetDistanceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8171: range 00000000112A8ECA-00000000112A8F0B
void __cdecl data::DigAttachModifierToTargetDistanceMixinFactory::DigAttachModifierToTargetDistanceMixinFactory(
        data::DigAttachModifierToTargetDistanceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DigAttachModifierToTargetDistanceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DigAttachModifierToTargetDistanceMixinFactory = v2;
};

// Line 8179: range 00000000112A9214-00000000112A9261
void __cdecl data::RigidBodyFreezeMixin::RigidBodyFreezeMixin(data::RigidBodyFreezeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::RigidBodyFreezeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8179: range 00000000112A9762-00000000112A97BA
void __cdecl data::RigidBodyFreezeMixin::RigidBodyFreezeMixin(
        data::RigidBodyFreezeMixin *const this,
        const data::RigidBodyFreezeMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RigidBodyFreezeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8185: range 00000000112FCEE2-00000000112FCF2F
void __cdecl data::RigidBodyFreezeMixin::~RigidBodyFreezeMixin(data::RigidBodyFreezeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RigidBodyFreezeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8185: range 00000000112FCF30-00000000112FCF5A
void __cdecl data::RigidBodyFreezeMixin::~RigidBodyFreezeMixin(data::RigidBodyFreezeMixin *const this)
{
  data::RigidBodyFreezeMixin::~RigidBodyFreezeMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 8190: range 00000000100D1EC8-00000000100D1ED8
const char *__cdecl data::RigidBodyFreezeMixin::getTypeName(const data::RigidBodyFreezeMixin *const this)
{
  return "RigidBodyFreezeMixin";
};

// Line 8191: range 00000000100D1EDA-00000000100D2076
int32_t __cdecl data::RigidBodyFreezeMixin::getHashNum(const data::RigidBodyFreezeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RigidBodyFreezeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RigidBodyFreezeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8207: range 00000000112A9A04-00000000112A9A45
void __cdecl data::RigidBodyFreezeMixinFactory::RigidBodyFreezeMixinFactory(
        data::RigidBodyFreezeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RigidBodyFreezeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RigidBodyFreezeMixinFactory = v2;
};

// Line 8215: range 00000000112A9D4E-00000000112A9E3E
void __cdecl data::DoActionOnGlobalValueChangeMixin::DoActionOnGlobalValueChangeMixin(
        data::DoActionOnGlobalValueChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionOnGlobalValueChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_value_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
  if ( *(char *)(((unsigned __int64)&this->is_delay >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_delay, v1, &this->is_delay);
  this->is_delay = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->delay_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->delay_time, (((_BYTE)this + 92) & 7u) + 3);
  }
  this->delay_time = 0.0;
};

// Line 8215: range 00000000112AA1F4-00000000112AA3B8
void __cdecl data::DoActionOnGlobalValueChangeMixin::DoActionOnGlobalValueChangeMixin(
        data::DoActionOnGlobalValueChangeMixin *const this,
        const data::DoActionOnGlobalValueChangeMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityActionArray *p_actions; // rsi
  bool is_delay; // cl
  char v5; // al
  float delay_time; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionOnGlobalValueChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->global_value_key, &a2->global_value_key);
  p_actions = &a2->actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
  if ( *(char *)(((unsigned __int64)&a2->is_delay >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_delay, p_actions, &a2->is_delay);
  is_delay = a2->is_delay;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_delay >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_actions) = v5 != 0;
    __asan_report_store1(&this->is_delay, p_actions, &this->is_delay);
  }
  this->is_delay = is_delay;
  if ( *(_BYTE *)(((unsigned __int64)&a2->delay_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->delay_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->delay_time);
  }
  delay_time = a2->delay_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->delay_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->delay_time, (((_BYTE)this + 92) & 7u) + 3);
  }
  this->delay_time = delay_time;
};

// Line 8225: range 00000000112FCEB6-00000000112FCEE0
void __cdecl data::DoActionOnGlobalValueChangeMixin::~DoActionOnGlobalValueChangeMixin(
        data::DoActionOnGlobalValueChangeMixin *const this)
{
  data::DoActionOnGlobalValueChangeMixin::~DoActionOnGlobalValueChangeMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 8225: range 00000000112FCE48-00000000112FCEB5
void __cdecl data::DoActionOnGlobalValueChangeMixin::~DoActionOnGlobalValueChangeMixin(
        data::DoActionOnGlobalValueChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionOnGlobalValueChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::string::~string(&this->global_value_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8230: range 00000000100D2078-00000000100D2088
const char *__cdecl data::DoActionOnGlobalValueChangeMixin::getTypeName(
        const data::DoActionOnGlobalValueChangeMixin *const this)
{
  return "DoActionOnGlobalValueChangeMixin";
};

// Line 8231: range 00000000100D208A-00000000100D2226
int32_t __cdecl data::DoActionOnGlobalValueChangeMixin::getHashNum(
        const data::DoActionOnGlobalValueChangeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionOnGlobalValueChangeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionOnGlobalValueChangeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8247: range 00000000112AA6A2-00000000112AA6E3
void __cdecl data::DoActionOnGlobalValueChangeMixinFactory::DoActionOnGlobalValueChangeMixinFactory(
        data::DoActionOnGlobalValueChangeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionOnGlobalValueChangeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionOnGlobalValueChangeMixinFactory = v2;
};

// Line 8270: range 00000000112AAB4C-00000000112AB147
void __cdecl data::DiePatternSwitchMixin::DiePatternSwitchMixin(data::DiePatternSwitchMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi
  __int64 v10; // rsi
  __int64 v11; // rsi
  __int64 v12; // rsi
  __int64 v13; // rsi
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 v16; // rdx
  __int64 v17; // rsi
  __int64 v18; // rdx
  __int64 v19; // rsi
  __int64 v20; // rdx
  __int64 v21; // rsi
  __int64 v22; // rdx
  __int64 v23; // rsi
  __int64 v24; // rdx
  __int64 v25; // rsi
  __int64 v26; // rdx
  __int64 v27; // rsi
  __int64 v28; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DiePatternSwitchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->priority, v1);
  }
  this->priority = Entity_0;
  v3 = ((_BYTE)this + 36) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->has_animator_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->has_animator_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->has_animator_die, v3, v4);
  this->has_animator_die = 0;
  v5 = ((_BYTE)this + 37) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->mute_all_shader_die_eff >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->mute_all_shader_die_eff >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->mute_all_shader_die_eff, v5, v6);
  this->mute_all_shader_die_eff = 0;
  v7 = ((_BYTE)this + 38) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->fall_when_air_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->fall_when_air_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->fall_when_air_die, v7, v8);
  this->fall_when_air_die = 1;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_end_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_end_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_end_time, v7);
  }
  this->die_end_time = 0.0;
  v9 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_force_disappear_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_force_disappear_time >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->die_force_disappear_time, v9);
  }
  this->die_force_disappear_time = 0.0099999998;
  std::string::basic_string(&this->die_disappear_effect);
  if ( *(_BYTE *)(((unsigned __int64)&this->die_disappear_effect_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_disappear_effect_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_disappear_effect_delay, v9);
  }
  this->die_disappear_effect_delay = 0.0;
  v10 = (((_BYTE)this + 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_shader_data >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_shader_data >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->die_shader_data, v10);
  }
  this->die_shader_data = None_9;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_shader_enable_duration_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_shader_enable_duration_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_shader_enable_duration_time, v10);
  }
  this->die_shader_enable_duration_time = -1.0;
  v11 = (((_BYTE)this + 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_shader_disable_duration_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_shader_disable_duration_time >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->die_shader_disable_duration_time, v11);
  }
  this->die_shader_disable_duration_time = -1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_model_fade_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_model_fade_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_model_fade_delay, v11);
  }
  this->die_model_fade_delay = 0.0;
  v12 = (((_BYTE)this + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->rag_doll_die_end_time_delay >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->rag_doll_die_end_time_delay >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->rag_doll_die_end_time_delay, v12);
  }
  this->rag_doll_die_end_time_delay = 0.0;
  if ( *(char *)(((unsigned __int64)&this->start_die_end_at_once >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->start_die_end_at_once, v12, &this->start_die_end_at_once);
  this->start_die_end_at_once = 0;
  v13 = ((_BYTE)this + 105) & 7;
  v14 = (*(_BYTE *)(((unsigned __int64)&this->not_send_die_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v13 >= *(_BYTE *)(((unsigned __int64)&this->not_send_die_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->not_send_die_trigger, v13, v14);
  this->not_send_die_trigger = 0;
  v15 = ((_BYTE)this + 106) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&this->ignore_element_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&this->ignore_element_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_store1(&this->ignore_element_die, v15, v16);
  this->ignore_element_die = 0;
  v17 = ((_BYTE)this + 107) & 7;
  v18 = (*(_BYTE *)(((unsigned __int64)&this->mute_hit_box >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v17 >= *(_BYTE *)(((unsigned __int64)&this->mute_hit_box >> 3) + 0x7FFF8000));
  if ( (_BYTE)v18 )
    __asan_report_store1(&this->mute_hit_box, v17, v18);
  this->mute_hit_box = 0;
  v19 = ((_BYTE)this + 108) & 7;
  v20 = (*(_BYTE *)(((unsigned __int64)&this->die_deny_lock_on >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v19 >= *(_BYTE *)(((unsigned __int64)&this->die_deny_lock_on >> 3) + 0x7FFF8000));
  if ( (_BYTE)v20 )
    __asan_report_store1(&this->die_deny_lock_on, v19, v20);
  this->die_deny_lock_on = 0;
  v21 = ((_BYTE)this + 109) & 7;
  v22 = (*(_BYTE *)(((unsigned __int64)&this->die_is_ghost_to_enemy >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v21 >= *(_BYTE *)(((unsigned __int64)&this->die_is_ghost_to_enemy >> 3) + 0x7FFF8000));
  if ( (_BYTE)v22 )
    __asan_report_store1(&this->die_is_ghost_to_enemy, v21, v22);
  this->die_is_ghost_to_enemy = 0;
  v23 = ((_BYTE)this + 110) & 7;
  v24 = (*(_BYTE *)(((unsigned __int64)&this->die_ignore_trigger_bullet >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v23 >= *(_BYTE *)(((unsigned __int64)&this->die_ignore_trigger_bullet >> 3) + 0x7FFF8000));
  if ( (_BYTE)v24 )
    __asan_report_store1(&this->die_ignore_trigger_bullet, v23, v24);
  this->die_ignore_trigger_bullet = 0;
  v25 = ((_BYTE)this + 111) & 7;
  v26 = (*(_BYTE *)(((unsigned __int64)&this->mute_billboard >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v25 >= *(_BYTE *)(((unsigned __int64)&this->mute_billboard >> 3) + 0x7FFF8000));
  if ( (_BYTE)v26 )
    __asan_report_store1(&this->mute_billboard, v25, v26);
  this->mute_billboard = 0;
  if ( *(char *)(((unsigned __int64)&this->mute_push_collider >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->mute_push_collider, v25, &this->mute_push_collider);
  this->mute_push_collider = 0;
  v27 = ((_BYTE)this + 113) & 7;
  v28 = (*(_BYTE *)(((unsigned __int64)&this->mute_hdmesh >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v27 >= *(_BYTE *)(((unsigned __int64)&this->mute_hdmesh >> 3) + 0x7FFF8000));
  if ( (_BYTE)v28 )
    __asan_report_store1(&this->mute_hdmesh, v27, v28);
  this->mute_hdmesh = 1;
};

// Line 8270: range 00000000112AB4FC-00000000112AC070
void __cdecl data::DiePatternSwitchMixin::DiePatternSwitchMixin(
        data::DiePatternSwitchMixin *const this,
        const data::DiePatternSwitchMixin *a2)
{
  int (**v2)(...); // rdx
  data::DiePatternSwitchMixinPriority priority; // ecx
  char v4; // al
  __int64 v5; // rsi
  __int64 v6; // rdx
  bool has_animator_die; // cl
  char v8; // dl
  __int64 v9; // rdx
  __int64 v10; // rsi
  __int64 v11; // rdx
  bool mute_all_shader_die_eff; // cl
  char v13; // dl
  __int64 v14; // rdx
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool fall_when_air_die; // cl
  char v18; // dl
  __int64 v19; // rdx
  float die_end_time; // xmm0_4
  float die_force_disappear_time; // xmm0_4
  float die_disappear_effect_delay; // xmm0_4
  __int64 v23; // rsi
  data::E_ShaderData die_shader_data; // ecx
  char v25; // dl
  float die_shader_enable_duration_time; // xmm0_4
  float die_shader_disable_duration_time; // xmm0_4
  __int64 v28; // rsi
  float die_model_fade_delay; // xmm0_4
  float rag_doll_die_end_time_delay; // xmm0_4
  __int64 v31; // rsi
  bool start_die_end_at_once; // cl
  char v33; // al
  __int64 v34; // rsi
  __int64 v35; // rdx
  bool not_send_die_trigger; // cl
  char v37; // dl
  __int64 v38; // rdx
  __int64 v39; // rsi
  __int64 v40; // rdx
  bool ignore_element_die; // cl
  char v42; // dl
  __int64 v43; // rdx
  __int64 v44; // rsi
  __int64 v45; // rdx
  bool mute_hit_box; // cl
  char v47; // dl
  __int64 v48; // rdx
  __int64 v49; // rsi
  __int64 v50; // rdx
  bool die_deny_lock_on; // cl
  char v52; // dl
  __int64 v53; // rdx
  __int64 v54; // rsi
  __int64 v55; // rdx
  bool die_is_ghost_to_enemy; // cl
  char v57; // dl
  __int64 v58; // rdx
  __int64 v59; // rsi
  __int64 v60; // rdx
  bool die_ignore_trigger_bullet; // cl
  char v62; // dl
  __int64 v63; // rdx
  __int64 v64; // rsi
  __int64 v65; // rdx
  bool mute_billboard; // cl
  char v67; // dl
  __int64 v68; // rdx
  bool mute_push_collider; // cl
  char v70; // al
  __int64 v71; // rsi
  __int64 v72; // rdx
  bool mute_hdmesh; // cl
  char v74; // dl
  __int64 v75; // rdx
  const data::DiePatternSwitchMixin *v76; // [rsp+0h] [rbp-20h]

  v76 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DiePatternSwitchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->priority >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->priority >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->priority);
  }
  priority = a2->priority;
  v4 = *(_BYTE *)(((unsigned __int64)&this->priority >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->priority, a2);
  }
  this->priority = priority;
  v5 = ((_BYTE)v76 + 36) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&v76->has_animator_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&v76->has_animator_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_load1(&v76->has_animator_die, v5, v6);
  has_animator_die = v76->has_animator_die;
  v8 = *(_BYTE *)(((unsigned __int64)&this->has_animator_die >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v8 != 0;
  v9 = (v8 != 0) & (unsigned __int8)((((unsigned __int8)this + 36) & 7) >= v8);
  if ( (_BYTE)v9 )
    __asan_report_store1(&this->has_animator_die, v5, v9);
  this->has_animator_die = has_animator_die;
  v10 = ((_BYTE)v76 + 37) & 7;
  v11 = (*(_BYTE *)(((unsigned __int64)&v76->mute_all_shader_die_eff >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v10 >= *(_BYTE *)(((unsigned __int64)&v76->mute_all_shader_die_eff >> 3) + 0x7FFF8000));
  if ( (_BYTE)v11 )
    __asan_report_load1(&v76->mute_all_shader_die_eff, v10, v11);
  mute_all_shader_die_eff = v76->mute_all_shader_die_eff;
  v13 = *(_BYTE *)(((unsigned __int64)&this->mute_all_shader_die_eff >> 3) + 0x7FFF8000);
  LOBYTE(v10) = v13 != 0;
  v14 = (v13 != 0) & (unsigned __int8)((((unsigned __int8)this + 37) & 7) >= v13);
  if ( (_BYTE)v14 )
    __asan_report_store1(&this->mute_all_shader_die_eff, v10, v14);
  this->mute_all_shader_die_eff = mute_all_shader_die_eff;
  v15 = ((_BYTE)v76 + 38) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&v76->fall_when_air_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&v76->fall_when_air_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&v76->fall_when_air_die, v15, v16);
  fall_when_air_die = v76->fall_when_air_die;
  v18 = *(_BYTE *)(((unsigned __int64)&this->fall_when_air_die >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this + 38) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->fall_when_air_die, v15, v19);
  this->fall_when_air_die = fall_when_air_die;
  if ( *(_BYTE *)(((unsigned __int64)&v76->die_end_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v76->die_end_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v76->die_end_time);
  }
  die_end_time = v76->die_end_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_end_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_end_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_end_time, v15);
  }
  this->die_end_time = die_end_time;
  if ( *(_BYTE *)(((unsigned __int64)&v76->die_force_disappear_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v76 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v76->die_force_disappear_time >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&v76->die_force_disappear_time);
  }
  die_force_disappear_time = v76->die_force_disappear_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_force_disappear_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_force_disappear_time >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->die_force_disappear_time, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->die_force_disappear_time = die_force_disappear_time;
  std::string::basic_string(&this->die_disappear_effect, &v76->die_disappear_effect);
  if ( *(_BYTE *)(((unsigned __int64)&v76->die_disappear_effect_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v76->die_disappear_effect_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v76->die_disappear_effect_delay);
  }
  die_disappear_effect_delay = v76->die_disappear_effect_delay;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_disappear_effect_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_disappear_effect_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_disappear_effect_delay, &v76->die_disappear_effect);
  }
  this->die_disappear_effect_delay = die_disappear_effect_delay;
  v23 = (((_BYTE)v76 + 84) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v76->die_shader_data >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v76 + 84) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v76->die_shader_data >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v76->die_shader_data);
  }
  die_shader_data = v76->die_shader_data;
  v25 = *(_BYTE *)(((unsigned __int64)&this->die_shader_data >> 3) + 0x7FFF8000);
  LOBYTE(v23) = v25 != 0;
  if ( v25 != 0 && (char)((((_BYTE)this + 84) & 7) + 3) >= v25 )
    __asan_report_store4(&this->die_shader_data, v23);
  this->die_shader_data = die_shader_data;
  if ( *(_BYTE *)(((unsigned __int64)&v76->die_shader_enable_duration_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v76->die_shader_enable_duration_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v76->die_shader_enable_duration_time);
  }
  die_shader_enable_duration_time = v76->die_shader_enable_duration_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_shader_enable_duration_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_shader_enable_duration_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_shader_enable_duration_time, v23);
  }
  this->die_shader_enable_duration_time = die_shader_enable_duration_time;
  if ( *(_BYTE *)(((unsigned __int64)&v76->die_shader_disable_duration_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v76 + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v76->die_shader_disable_duration_time >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&v76->die_shader_disable_duration_time);
  }
  die_shader_disable_duration_time = v76->die_shader_disable_duration_time;
  v28 = (((_BYTE)this + 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_shader_disable_duration_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->die_shader_disable_duration_time >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->die_shader_disable_duration_time, v28);
  }
  this->die_shader_disable_duration_time = die_shader_disable_duration_time;
  if ( *(_BYTE *)(((unsigned __int64)&v76->die_model_fade_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v76->die_model_fade_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v76->die_model_fade_delay);
  }
  die_model_fade_delay = v76->die_model_fade_delay;
  if ( *(_BYTE *)(((unsigned __int64)&this->die_model_fade_delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->die_model_fade_delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->die_model_fade_delay, v28);
  }
  this->die_model_fade_delay = die_model_fade_delay;
  if ( *(_BYTE *)(((unsigned __int64)&v76->rag_doll_die_end_time_delay >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v76 + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v76->rag_doll_die_end_time_delay >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_load4(&v76->rag_doll_die_end_time_delay);
  }
  rag_doll_die_end_time_delay = v76->rag_doll_die_end_time_delay;
  v31 = (((_BYTE)this + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->rag_doll_die_end_time_delay >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->rag_doll_die_end_time_delay >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->rag_doll_die_end_time_delay, v31);
  }
  this->rag_doll_die_end_time_delay = rag_doll_die_end_time_delay;
  if ( *(char *)(((unsigned __int64)&v76->start_die_end_at_once >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v76->start_die_end_at_once, v31, &v76->start_die_end_at_once);
  start_die_end_at_once = v76->start_die_end_at_once;
  v33 = *(_BYTE *)(((unsigned __int64)&this->start_die_end_at_once >> 3) + 0x7FFF8000);
  if ( v33 < 0 )
  {
    LOBYTE(v31) = v33 != 0;
    __asan_report_store1(&this->start_die_end_at_once, v31, &this->start_die_end_at_once);
  }
  this->start_die_end_at_once = start_die_end_at_once;
  v34 = ((_BYTE)v76 + 105) & 7;
  v35 = (*(_BYTE *)(((unsigned __int64)&v76->not_send_die_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v34 >= *(_BYTE *)(((unsigned __int64)&v76->not_send_die_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v35 )
    __asan_report_load1(&v76->not_send_die_trigger, v34, v35);
  not_send_die_trigger = v76->not_send_die_trigger;
  v37 = *(_BYTE *)(((unsigned __int64)&this->not_send_die_trigger >> 3) + 0x7FFF8000);
  LOBYTE(v34) = v37 != 0;
  v38 = (v37 != 0) & (unsigned __int8)((((unsigned __int8)this + 105) & 7) >= v37);
  if ( (_BYTE)v38 )
    __asan_report_store1(&this->not_send_die_trigger, v34, v38);
  this->not_send_die_trigger = not_send_die_trigger;
  v39 = ((_BYTE)v76 + 106) & 7;
  v40 = (*(_BYTE *)(((unsigned __int64)&v76->ignore_element_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v39 >= *(_BYTE *)(((unsigned __int64)&v76->ignore_element_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v40 )
    __asan_report_load1(&v76->ignore_element_die, v39, v40);
  ignore_element_die = v76->ignore_element_die;
  v42 = *(_BYTE *)(((unsigned __int64)&this->ignore_element_die >> 3) + 0x7FFF8000);
  LOBYTE(v39) = v42 != 0;
  v43 = (v42 != 0) & (unsigned __int8)((((unsigned __int8)this + 106) & 7) >= v42);
  if ( (_BYTE)v43 )
    __asan_report_store1(&this->ignore_element_die, v39, v43);
  this->ignore_element_die = ignore_element_die;
  v44 = ((_BYTE)v76 + 107) & 7;
  v45 = (*(_BYTE *)(((unsigned __int64)&v76->mute_hit_box >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v44 >= *(_BYTE *)(((unsigned __int64)&v76->mute_hit_box >> 3) + 0x7FFF8000));
  if ( (_BYTE)v45 )
    __asan_report_load1(&v76->mute_hit_box, v44, v45);
  mute_hit_box = v76->mute_hit_box;
  v47 = *(_BYTE *)(((unsigned __int64)&this->mute_hit_box >> 3) + 0x7FFF8000);
  LOBYTE(v44) = v47 != 0;
  v48 = (v47 != 0) & (unsigned __int8)((((unsigned __int8)this + 107) & 7) >= v47);
  if ( (_BYTE)v48 )
    __asan_report_store1(&this->mute_hit_box, v44, v48);
  this->mute_hit_box = mute_hit_box;
  v49 = ((_BYTE)v76 + 108) & 7;
  v50 = (*(_BYTE *)(((unsigned __int64)&v76->die_deny_lock_on >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v49 >= *(_BYTE *)(((unsigned __int64)&v76->die_deny_lock_on >> 3) + 0x7FFF8000));
  if ( (_BYTE)v50 )
    __asan_report_load1(&v76->die_deny_lock_on, v49, v50);
  die_deny_lock_on = v76->die_deny_lock_on;
  v52 = *(_BYTE *)(((unsigned __int64)&this->die_deny_lock_on >> 3) + 0x7FFF8000);
  LOBYTE(v49) = v52 != 0;
  v53 = (v52 != 0) & (unsigned __int8)((((unsigned __int8)this + 108) & 7) >= v52);
  if ( (_BYTE)v53 )
    __asan_report_store1(&this->die_deny_lock_on, v49, v53);
  this->die_deny_lock_on = die_deny_lock_on;
  v54 = ((_BYTE)v76 + 109) & 7;
  v55 = (*(_BYTE *)(((unsigned __int64)&v76->die_is_ghost_to_enemy >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v54 >= *(_BYTE *)(((unsigned __int64)&v76->die_is_ghost_to_enemy >> 3) + 0x7FFF8000));
  if ( (_BYTE)v55 )
    __asan_report_load1(&v76->die_is_ghost_to_enemy, v54, v55);
  die_is_ghost_to_enemy = v76->die_is_ghost_to_enemy;
  v57 = *(_BYTE *)(((unsigned __int64)&this->die_is_ghost_to_enemy >> 3) + 0x7FFF8000);
  LOBYTE(v54) = v57 != 0;
  v58 = (v57 != 0) & (unsigned __int8)((((unsigned __int8)this + 109) & 7) >= v57);
  if ( (_BYTE)v58 )
    __asan_report_store1(&this->die_is_ghost_to_enemy, v54, v58);
  this->die_is_ghost_to_enemy = die_is_ghost_to_enemy;
  v59 = ((_BYTE)v76 + 110) & 7;
  v60 = (*(_BYTE *)(((unsigned __int64)&v76->die_ignore_trigger_bullet >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v59 >= *(_BYTE *)(((unsigned __int64)&v76->die_ignore_trigger_bullet >> 3) + 0x7FFF8000));
  if ( (_BYTE)v60 )
    __asan_report_load1(&v76->die_ignore_trigger_bullet, v59, v60);
  die_ignore_trigger_bullet = v76->die_ignore_trigger_bullet;
  v62 = *(_BYTE *)(((unsigned __int64)&this->die_ignore_trigger_bullet >> 3) + 0x7FFF8000);
  LOBYTE(v59) = v62 != 0;
  v63 = (v62 != 0) & (unsigned __int8)((((unsigned __int8)this + 110) & 7) >= v62);
  if ( (_BYTE)v63 )
    __asan_report_store1(&this->die_ignore_trigger_bullet, v59, v63);
  this->die_ignore_trigger_bullet = die_ignore_trigger_bullet;
  v64 = ((_BYTE)v76 + 111) & 7;
  v65 = (*(_BYTE *)(((unsigned __int64)&v76->mute_billboard >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v64 >= *(_BYTE *)(((unsigned __int64)&v76->mute_billboard >> 3) + 0x7FFF8000));
  if ( (_BYTE)v65 )
    __asan_report_load1(&v76->mute_billboard, v64, v65);
  mute_billboard = v76->mute_billboard;
  v67 = *(_BYTE *)(((unsigned __int64)&this->mute_billboard >> 3) + 0x7FFF8000);
  LOBYTE(v64) = v67 != 0;
  v68 = (v67 != 0) & (unsigned __int8)((((unsigned __int8)this + 111) & 7) >= v67);
  if ( (_BYTE)v68 )
    __asan_report_store1(&this->mute_billboard, v64, v68);
  this->mute_billboard = mute_billboard;
  if ( *(char *)(((unsigned __int64)&v76->mute_push_collider >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v76->mute_push_collider, v64, &v76->mute_push_collider);
  mute_push_collider = v76->mute_push_collider;
  v70 = *(_BYTE *)(((unsigned __int64)&this->mute_push_collider >> 3) + 0x7FFF8000);
  if ( v70 < 0 )
  {
    LOBYTE(v64) = v70 != 0;
    __asan_report_store1(&this->mute_push_collider, v64, &this->mute_push_collider);
  }
  this->mute_push_collider = mute_push_collider;
  v71 = ((_BYTE)v76 + 113) & 7;
  v72 = (*(_BYTE *)(((unsigned __int64)&v76->mute_hdmesh >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v71 >= *(_BYTE *)(((unsigned __int64)&v76->mute_hdmesh >> 3) + 0x7FFF8000));
  if ( (_BYTE)v72 )
    __asan_report_load1(&v76->mute_hdmesh, v71, v72);
  mute_hdmesh = v76->mute_hdmesh;
  v74 = *(_BYTE *)(((unsigned __int64)&this->mute_hdmesh >> 3) + 0x7FFF8000);
  LOBYTE(v71) = v74 != 0;
  v75 = (v74 != 0) & (unsigned __int8)((((unsigned __int8)this + 113) & 7) >= v74);
  if ( (_BYTE)v75 )
    __asan_report_store1(&this->mute_hdmesh, v71, v75);
  this->mute_hdmesh = mute_hdmesh;
};

// Line 8299: range 00000000112FCDBE-00000000112FCE1B
void __cdecl data::DiePatternSwitchMixin::~DiePatternSwitchMixin(data::DiePatternSwitchMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DiePatternSwitchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->die_disappear_effect);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8299: range 00000000112FCE1C-00000000112FCE46
void __cdecl data::DiePatternSwitchMixin::~DiePatternSwitchMixin(data::DiePatternSwitchMixin *const this)
{
  data::DiePatternSwitchMixin::~DiePatternSwitchMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 8304: range 00000000100D2228-00000000100D2238
const char *__cdecl data::DiePatternSwitchMixin::getTypeName(const data::DiePatternSwitchMixin *const this)
{
  return "DiePatternSwitchMixin";
};

// Line 8305: range 00000000100D223A-00000000100D23D6
int32_t __cdecl data::DiePatternSwitchMixin::getHashNum(const data::DiePatternSwitchMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DiePatternSwitchMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DiePatternSwitchMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8321: range 00000000112AC35A-00000000112AC39B
void __cdecl data::DiePatternSwitchMixinFactory::DiePatternSwitchMixinFactory(
        data::DiePatternSwitchMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DiePatternSwitchMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DiePatternSwitchMixinFactory = v2;
};

// Line 8336: range 00000000112AC7FE-00000000112AC99C
void __cdecl data::AttackReviveEnergyMixin::AttackReviveEnergyMixin(data::AttackReviveEnergyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttackReviveEnergyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_value, v1);
  }
  this->max_value = 0.0;
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_value, v3);
  }
  this->min_value = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->add_value, v3);
  }
  this->add_value = 0.0;
  if ( *(_WORD *)(((unsigned __int64)&this->revive_action >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  common::tools::perf::make_shared<data::ConfigAbilityAction>();
  std::unordered_map<data::ElementType,std::shared_ptr<data::ConfigAbilityAction>>::unordered_map(&this->fire_effect_actions);
};

// Line 8336: range 00000000112ACDE6-00000000112AD04F
void __cdecl data::AttackReviveEnergyMixin::AttackReviveEnergyMixin(
        data::AttackReviveEnergyMixin *const this,
        const data::AttackReviveEnergyMixin *a2)
{
  int (**v2)(...); // rdx
  float max_value; // xmm0_4
  float min_value; // xmm0_4
  __int64 v5; // rsi
  float add_value; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttackReviveEnergyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->attack_tags, &a2->attack_tags);
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_value);
  }
  max_value = a2->max_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_value, &a2->attack_tags);
  }
  this->max_value = max_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_value);
  }
  min_value = a2->min_value;
  v5 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_value >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_value, v5);
  }
  this->min_value = min_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->add_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->add_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->add_value);
  }
  add_value = a2->add_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->add_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->add_value, v5);
  }
  this->add_value = add_value;
  std::shared_ptr<data::ConfigAbilityAction>::shared_ptr(&this->revive_action, &a2->revive_action);
  std::unordered_map<data::ElementType,std::shared_ptr<data::ConfigAbilityAction>>::unordered_map(
    &this->fire_effect_actions,
    &a2->fire_effect_actions);
};

// Line 8348: range 00000000112FCD92-00000000112FCDBC
void __cdecl data::AttackReviveEnergyMixin::~AttackReviveEnergyMixin(data::AttackReviveEnergyMixin *const this)
{
  data::AttackReviveEnergyMixin::~AttackReviveEnergyMixin(this);
  operator delete(this, 0x90uLL);
};

// Line 8348: range 00000000112FCD14-00000000112FCD91
void __cdecl data::AttackReviveEnergyMixin::~AttackReviveEnergyMixin(data::AttackReviveEnergyMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackReviveEnergyMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<data::ElementType,std::shared_ptr<data::ConfigAbilityAction>>::~unordered_map(&this->fire_effect_actions);
  std::shared_ptr<data::ConfigAbilityAction>::~shared_ptr(&this->revive_action);
  std::vector<std::string>::~vector(&this->attack_tags);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8353: range 00000000100D23D8-00000000100D23E8
const char *__cdecl data::AttackReviveEnergyMixin::getTypeName(const data::AttackReviveEnergyMixin *const this)
{
  return "AttackReviveEnergyMixin";
};

// Line 8354: range 00000000100D23EA-00000000100D2586
int32_t __cdecl data::AttackReviveEnergyMixin::getHashNum(const data::AttackReviveEnergyMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttackReviveEnergyMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttackReviveEnergyMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8370: range 00000000112AD338-00000000112AD379
void __cdecl data::AttackReviveEnergyMixinFactory::AttackReviveEnergyMixinFactory(
        data::AttackReviveEnergyMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackReviveEnergyMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttackReviveEnergyMixinFactory = v2;
};

// Line 8378: range 00000000112AD682-00000000112AD6FF
void __cdecl data::DoActionBySelfModifierElementDurabilityRatioMixin::DoActionBySelfModifierElementDurabilityRatioMixin(
        data::DoActionBySelfModifierElementDurabilityRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfModifierElementDurabilityRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->unique_modifier_name);
  std::vector<data::DynamicFloat>::vector(&this->value_steps);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_queues);
};

// Line 8378: range 00000000112ADAAA-00000000112ADBA0
void __cdecl data::DoActionBySelfModifierElementDurabilityRatioMixin::DoActionBySelfModifierElementDurabilityRatioMixin(
        data::DoActionBySelfModifierElementDurabilityRatioMixin *const this,
        const data::DoActionBySelfModifierElementDurabilityRatioMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfModifierElementDurabilityRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->unique_modifier_name, &a2->unique_modifier_name);
  std::vector<data::DynamicFloat>::vector(&this->value_steps, &a2->value_steps);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->action_queues, &a2->action_queues);
};

// Line 8387: range 00000000112FCCE8-00000000112FCD12
void __cdecl data::DoActionBySelfModifierElementDurabilityRatioMixin::~DoActionBySelfModifierElementDurabilityRatioMixin(
        data::DoActionBySelfModifierElementDurabilityRatioMixin *const this)
{
  data::DoActionBySelfModifierElementDurabilityRatioMixin::~DoActionBySelfModifierElementDurabilityRatioMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 8387: range 00000000112FCC6A-00000000112FCCE7
void __cdecl data::DoActionBySelfModifierElementDurabilityRatioMixin::~DoActionBySelfModifierElementDurabilityRatioMixin(
        data::DoActionBySelfModifierElementDurabilityRatioMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfModifierElementDurabilityRatioMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::~vector(&this->action_queues);
  std::vector<data::DynamicFloat>::~vector(&this->value_steps);
  std::string::~string(&this->unique_modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8392: range 00000000100D2588-00000000100D2598
const char *__cdecl data::DoActionBySelfModifierElementDurabilityRatioMixin::getTypeName(
        const data::DoActionBySelfModifierElementDurabilityRatioMixin *const this)
{
  return "DoActionBySelfModifierElementDurabilityRatioMixin";
};

// Line 8393: range 00000000100D259A-00000000100D2736
int32_t __cdecl data::DoActionBySelfModifierElementDurabilityRatioMixin::getHashNum(
        const data::DoActionBySelfModifierElementDurabilityRatioMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionBySelfModifierElementDurabilityRatioMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionBySelfModifierElementDurabilityRatioMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8409: range 00000000112ADE8A-00000000112ADECB
void __cdecl data::DoActionBySelfModifierElementDurabilityRatioMixinFactory::DoActionBySelfModifierElementDurabilityRatioMixinFactory(
        data::DoActionBySelfModifierElementDurabilityRatioMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfModifierElementDurabilityRatioMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionBySelfModifierElementDurabilityRatioMixinFactory = v2;
};

// Line 8417: range 00000000112AE1D4-00000000112AE3E8
void __cdecl data::WidgetCDSyncMixin::WidgetCDSyncMixin(data::WidgetCDSyncMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  __int64 v5; // rsi
  __int64 v6; // rdx
  __int64 v7; // rsi
  __int64 v8; // rdx
  __int64 v9; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::WidgetCDSyncMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->sync_on_tick >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->sync_on_tick >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->sync_on_tick, v3, v4);
  this->sync_on_tick = 0;
  v5 = ((_BYTE)this + 31) & 7;
  v6 = (*(_BYTE *)(((unsigned __int64)&this->sync_on_change_avatar >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v5 >= *(_BYTE *)(((unsigned __int64)&this->sync_on_change_avatar >> 3) + 0x7FFF8000));
  if ( (_BYTE)v6 )
    __asan_report_store1(&this->sync_on_change_avatar, v5, v6);
  this->sync_on_change_avatar = 0;
  if ( *(char *)(((unsigned __int64)&this->sync_on_cdchange >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->sync_on_cdchange, v5, &this->sync_on_cdchange);
  this->sync_on_cdchange = 0;
  v7 = ((_BYTE)this + 33) & 7;
  v8 = (*(_BYTE *)(((unsigned __int64)&this->sync_only_greater >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v7 >= *(_BYTE *)(((unsigned __int64)&this->sync_only_greater >> 3) + 0x7FFF8000));
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->sync_only_greater, v7, v8);
  this->sync_only_greater = 0;
  v9 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->item_id, v9);
  }
  this->item_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v9);
  }
  this->skill_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_cdoffset >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->skill_cdoffset >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->skill_cdoffset, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->skill_cdoffset = 0.0;
};

// Line 8417: range 00000000112AE7C4-00000000112AEB94
void __cdecl data::WidgetCDSyncMixin::WidgetCDSyncMixin(
        data::WidgetCDSyncMixin *const this,
        const data::WidgetCDSyncMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool sync_on_tick; // cl
  char v6; // dl
  __int64 v7; // rdx
  __int64 v8; // rsi
  __int64 v9; // rdx
  bool sync_on_change_avatar; // cl
  char v11; // dl
  __int64 v12; // rdx
  bool sync_on_cdchange; // cl
  char v14; // al
  __int64 v15; // rsi
  __int64 v16; // rdx
  bool sync_only_greater; // cl
  char v18; // dl
  __int64 v19; // rdx
  __int64 v20; // rsi
  uint32_t item_id; // ecx
  char v22; // dl
  uint32_t skill_id; // ecx
  char v24; // al
  float skill_cdoffset; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::WidgetCDSyncMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->sync_on_tick >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->sync_on_tick >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->sync_on_tick, v3, v4);
  sync_on_tick = a2->sync_on_tick;
  v6 = *(_BYTE *)(((unsigned __int64)&this->sync_on_tick >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->sync_on_tick, v3, v7);
  this->sync_on_tick = sync_on_tick;
  v8 = ((_BYTE)a2 + 31) & 7;
  v9 = (*(_BYTE *)(((unsigned __int64)&a2->sync_on_change_avatar >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v8 >= *(_BYTE *)(((unsigned __int64)&a2->sync_on_change_avatar >> 3) + 0x7FFF8000));
  if ( (_BYTE)v9 )
    __asan_report_load1(&a2->sync_on_change_avatar, v8, v9);
  sync_on_change_avatar = a2->sync_on_change_avatar;
  v11 = *(_BYTE *)(((unsigned __int64)&this->sync_on_change_avatar >> 3) + 0x7FFF8000);
  LOBYTE(v8) = v11 != 0;
  v12 = (v11 != 0) & (unsigned __int8)((((unsigned __int8)this + 31) & 7) >= v11);
  if ( (_BYTE)v12 )
    __asan_report_store1(&this->sync_on_change_avatar, v8, v12);
  this->sync_on_change_avatar = sync_on_change_avatar;
  if ( *(char *)(((unsigned __int64)&a2->sync_on_cdchange >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->sync_on_cdchange, v8, &a2->sync_on_cdchange);
  sync_on_cdchange = a2->sync_on_cdchange;
  v14 = *(_BYTE *)(((unsigned __int64)&this->sync_on_cdchange >> 3) + 0x7FFF8000);
  if ( v14 < 0 )
  {
    LOBYTE(v8) = v14 != 0;
    __asan_report_store1(&this->sync_on_cdchange, v8, &this->sync_on_cdchange);
  }
  this->sync_on_cdchange = sync_on_cdchange;
  v15 = ((_BYTE)a2 + 33) & 7;
  v16 = (*(_BYTE *)(((unsigned __int64)&a2->sync_only_greater >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v15 >= *(_BYTE *)(((unsigned __int64)&a2->sync_only_greater >> 3) + 0x7FFF8000));
  if ( (_BYTE)v16 )
    __asan_report_load1(&a2->sync_only_greater, v15, v16);
  sync_only_greater = a2->sync_only_greater;
  v18 = *(_BYTE *)(((unsigned __int64)&this->sync_only_greater >> 3) + 0x7FFF8000);
  LOBYTE(v15) = v18 != 0;
  v19 = (v18 != 0) & (unsigned __int8)((((unsigned __int8)this + 33) & 7) >= v18);
  if ( (_BYTE)v19 )
    __asan_report_store1(&this->sync_only_greater, v15, v19);
  this->sync_only_greater = sync_only_greater;
  v20 = (((_BYTE)a2 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->item_id >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->item_id >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->item_id);
  }
  item_id = a2->item_id;
  v22 = *(_BYTE *)(((unsigned __int64)&this->item_id >> 3) + 0x7FFF8000);
  if ( v22 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v22 )
  {
    LOBYTE(v20) = v22 != 0;
    __asan_report_store4(&this->item_id, v20);
  }
  this->item_id = item_id;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v24 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v24 != 0 && v24 <= 3 )
  {
    LOBYTE(v20) = v24 != 0;
    __asan_report_store4(&this->skill_id, v20);
  }
  this->skill_id = skill_id;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_cdoffset >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->skill_cdoffset >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->skill_cdoffset);
  }
  skill_cdoffset = a2->skill_cdoffset;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_cdoffset >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->skill_cdoffset >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->skill_cdoffset, (((_BYTE)this + 44) & 7u) + 3);
  }
  this->skill_cdoffset = skill_cdoffset;
};

// Line 8430: range 00000000112FCBF0-00000000112FCC3D
void __cdecl data::WidgetCDSyncMixin::~WidgetCDSyncMixin(data::WidgetCDSyncMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetCDSyncMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 8430: range 00000000112FCC3E-00000000112FCC68
void __cdecl data::WidgetCDSyncMixin::~WidgetCDSyncMixin(data::WidgetCDSyncMixin *const this)
{
  data::WidgetCDSyncMixin::~WidgetCDSyncMixin(this);
  operator delete(this, 0x30uLL);
};

// Line 8435: range 00000000100D2738-00000000100D2748
const char *__cdecl data::WidgetCDSyncMixin::getTypeName(const data::WidgetCDSyncMixin *const this)
{
  return "WidgetCDSyncMixin";
};

// Line 8436: range 00000000100D274A-00000000100D28E6
int32_t __cdecl data::WidgetCDSyncMixin::getHashNum(const data::WidgetCDSyncMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::WidgetCDSyncMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "WidgetCDSyncMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8452: range 00000000112AEDDE-00000000112AEE1F
void __cdecl data::WidgetCDSyncMixinFactory::WidgetCDSyncMixinFactory(data::WidgetCDSyncMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::WidgetCDSyncMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_WidgetCDSyncMixinFactory = v2;
};

// Line 8460: range 00000000112AF128-00000000112AF195
void __cdecl data::DoActionByEntityKillMixin::DoActionByEntityKillMixin(data::DoActionByEntityKillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByEntityKillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
};

// Line 8460: range 00000000112AF5BA-00000000112AF680
void __cdecl data::DoActionByEntityKillMixin::DoActionByEntityKillMixin(
        data::DoActionByEntityKillMixin *const this,
        const data::DoActionByEntityKillMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByEntityKillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
};

// Line 8468: range 00000000112FCB56-00000000112FCBC3
void __cdecl data::DoActionByEntityKillMixin::~DoActionByEntityKillMixin(data::DoActionByEntityKillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByEntityKillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8468: range 00000000112FCBC4-00000000112FCBEE
void __cdecl data::DoActionByEntityKillMixin::~DoActionByEntityKillMixin(data::DoActionByEntityKillMixin *const this)
{
  data::DoActionByEntityKillMixin::~DoActionByEntityKillMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 8473: range 00000000100D28E8-00000000100D28F8
const char *__cdecl data::DoActionByEntityKillMixin::getTypeName(const data::DoActionByEntityKillMixin *const this)
{
  return "DoActionByEntityKillMixin";
};

// Line 8474: range 00000000100D28FA-00000000100D2A96
int32_t __cdecl data::DoActionByEntityKillMixin::getHashNum(const data::DoActionByEntityKillMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByEntityKillMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByEntityKillMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8490: range 00000000112AF96A-00000000112AF9AB
void __cdecl data::DoActionByEntityKillMixinFactory::DoActionByEntityKillMixinFactory(
        data::DoActionByEntityKillMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByEntityKillMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByEntityKillMixinFactory = v2;
};

// Line 8498: range 00000000112AFCB4-00000000112AFD01
void __cdecl data::EnableCharacterMoveOnWaterMixin::EnableCharacterMoveOnWaterMixin(
        data::EnableCharacterMoveOnWaterMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableCharacterMoveOnWaterMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8498: range 00000000112B0202-00000000112B025A
void __cdecl data::EnableCharacterMoveOnWaterMixin::EnableCharacterMoveOnWaterMixin(
        data::EnableCharacterMoveOnWaterMixin *const this,
        const data::EnableCharacterMoveOnWaterMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableCharacterMoveOnWaterMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8504: range 00000000112FCB2A-00000000112FCB54
void __cdecl data::EnableCharacterMoveOnWaterMixin::~EnableCharacterMoveOnWaterMixin(
        data::EnableCharacterMoveOnWaterMixin *const this)
{
  data::EnableCharacterMoveOnWaterMixin::~EnableCharacterMoveOnWaterMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 8504: range 00000000112FCADC-00000000112FCB29
void __cdecl data::EnableCharacterMoveOnWaterMixin::~EnableCharacterMoveOnWaterMixin(
        data::EnableCharacterMoveOnWaterMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableCharacterMoveOnWaterMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8509: range 00000000100D2A98-00000000100D2AA8
const char *__cdecl data::EnableCharacterMoveOnWaterMixin::getTypeName(
        const data::EnableCharacterMoveOnWaterMixin *const this)
{
  return "EnableCharacterMoveOnWaterMixin";
};

// Line 8510: range 00000000100D2AAA-00000000100D2C46
int32_t __cdecl data::EnableCharacterMoveOnWaterMixin::getHashNum(
        const data::EnableCharacterMoveOnWaterMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableCharacterMoveOnWaterMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableCharacterMoveOnWaterMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8526: range 00000000112B04A4-00000000112B04E5
void __cdecl data::EnableCharacterMoveOnWaterMixinFactory::EnableCharacterMoveOnWaterMixinFactory(
        data::EnableCharacterMoveOnWaterMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableCharacterMoveOnWaterMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableCharacterMoveOnWaterMixinFactory = v2;
};

// Line 8534: range 00000000112B07EE-00000000112B083B
void __cdecl data::ExcludeGravityMixin::ExcludeGravityMixin(data::ExcludeGravityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ExcludeGravityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8534: range 00000000112B0D3C-00000000112B0D94
void __cdecl data::ExcludeGravityMixin::ExcludeGravityMixin(
        data::ExcludeGravityMixin *const this,
        const data::ExcludeGravityMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ExcludeGravityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8540: range 00000000112FCA62-00000000112FCAAF
void __cdecl data::ExcludeGravityMixin::~ExcludeGravityMixin(data::ExcludeGravityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExcludeGravityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8540: range 00000000112FCAB0-00000000112FCADA
void __cdecl data::ExcludeGravityMixin::~ExcludeGravityMixin(data::ExcludeGravityMixin *const this)
{
  data::ExcludeGravityMixin::~ExcludeGravityMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 8545: range 00000000100D2C48-00000000100D2C58
const char *__cdecl data::ExcludeGravityMixin::getTypeName(const data::ExcludeGravityMixin *const this)
{
  return "ExcludeGravityMixin";
};

// Line 8546: range 00000000100D2C5A-00000000100D2DF6
int32_t __cdecl data::ExcludeGravityMixin::getHashNum(const data::ExcludeGravityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ExcludeGravityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ExcludeGravityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8562: range 00000000112B0FDE-00000000112B101F
void __cdecl data::ExcludeGravityMixinFactory::ExcludeGravityMixinFactory(data::ExcludeGravityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ExcludeGravityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ExcludeGravityMixinFactory = v2;
};

// Line 8570: range 00000000112B1328-00000000112B1385
void __cdecl data::HideAvatarSkillMixin::HideAvatarSkillMixin(data::HideAvatarSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::HideAvatarSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->skill_ids);
};

// Line 8570: range 00000000112B177A-00000000112B1810
void __cdecl data::HideAvatarSkillMixin::HideAvatarSkillMixin(
        data::HideAvatarSkillMixin *const this,
        const data::HideAvatarSkillMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HideAvatarSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->skill_ids, &a2->skill_ids);
};

// Line 8577: range 00000000112FC9D8-00000000112FCA35
void __cdecl data::HideAvatarSkillMixin::~HideAvatarSkillMixin(data::HideAvatarSkillMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideAvatarSkillMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->skill_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8577: range 00000000112FCA36-00000000112FCA60
void __cdecl data::HideAvatarSkillMixin::~HideAvatarSkillMixin(data::HideAvatarSkillMixin *const this)
{
  data::HideAvatarSkillMixin::~HideAvatarSkillMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 8582: range 00000000100D2DF8-00000000100D2E08
const char *__cdecl data::HideAvatarSkillMixin::getTypeName(const data::HideAvatarSkillMixin *const this)
{
  return "HideAvatarSkillMixin";
};

// Line 8583: range 00000000100D2E0A-00000000100D2FA6
int32_t __cdecl data::HideAvatarSkillMixin::getHashNum(const data::HideAvatarSkillMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HideAvatarSkillMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HideAvatarSkillMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8599: range 00000000112B1AFA-00000000112B1B3B
void __cdecl data::HideAvatarSkillMixinFactory::HideAvatarSkillMixinFactory(
        data::HideAvatarSkillMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideAvatarSkillMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HideAvatarSkillMixinFactory = v2;
};

// Line 8607: range 00000000112B1E44-00000000112B1ECF
void __cdecl data::HideActionSlotMixin::HideActionSlotMixin(data::HideActionSlotMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::HideActionSlotMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->slot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->slot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->slot_type, v1);
  }
  this->slot_type = SlotAM;
};

// Line 8607: range 00000000112B22A4-00000000112B2371
void __cdecl data::HideActionSlotMixin::HideActionSlotMixin(
        data::HideActionSlotMixin *const this,
        const data::HideActionSlotMixin *a2)
{
  int (**v2)(...); // rdx
  data::ActionSlotType slot_type; // ecx
  char v4; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HideActionSlotMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->slot_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->slot_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->slot_type);
  }
  slot_type = a2->slot_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->slot_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->slot_type, a2);
  }
  this->slot_type = slot_type;
};

// Line 8614: range 00000000112FC9AC-00000000112FC9D6
void __cdecl data::HideActionSlotMixin::~HideActionSlotMixin(data::HideActionSlotMixin *const this)
{
  data::HideActionSlotMixin::~HideActionSlotMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 8614: range 00000000112FC95E-00000000112FC9AB
void __cdecl data::HideActionSlotMixin::~HideActionSlotMixin(data::HideActionSlotMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideActionSlotMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8619: range 00000000100D2FA8-00000000100D2FB8
const char *__cdecl data::HideActionSlotMixin::getTypeName(const data::HideActionSlotMixin *const this)
{
  return "HideActionSlotMixin";
};

// Line 8620: range 00000000100D2FBA-00000000100D3156
int32_t __cdecl data::HideActionSlotMixin::getHashNum(const data::HideActionSlotMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HideActionSlotMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HideActionSlotMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8636: range 00000000112B25BA-00000000112B25FB
void __cdecl data::HideActionSlotMixinFactory::HideActionSlotMixinFactory(data::HideActionSlotMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HideActionSlotMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HideActionSlotMixinFactory = v2;
};

// Line 8644: range 00000000112B2904-00000000112B2971
void __cdecl data::AvatarCombatMixin::AvatarCombatMixin(data::AvatarCombatMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarCombatMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_enter_combat);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_exit_combat);
};

// Line 8644: range 00000000112B2D96-00000000112B2E5C
void __cdecl data::AvatarCombatMixin::AvatarCombatMixin(
        data::AvatarCombatMixin *const this,
        const data::AvatarCombatMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarCombatMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_enter_combat, &a2->on_enter_combat);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_exit_combat, &a2->on_exit_combat);
};

// Line 8652: range 00000000112FC932-00000000112FC95C
void __cdecl data::AvatarCombatMixin::~AvatarCombatMixin(data::AvatarCombatMixin *const this)
{
  data::AvatarCombatMixin::~AvatarCombatMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 8652: range 00000000112FC8C4-00000000112FC931
void __cdecl data::AvatarCombatMixin::~AvatarCombatMixin(data::AvatarCombatMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarCombatMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_exit_combat);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_enter_combat);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8657: range 00000000100D3158-00000000100D3168
const char *__cdecl data::AvatarCombatMixin::getTypeName(const data::AvatarCombatMixin *const this)
{
  return "AvatarCombatMixin";
};

// Line 8658: range 00000000100D316A-00000000100D3306
int32_t __cdecl data::AvatarCombatMixin::getHashNum(const data::AvatarCombatMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarCombatMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarCombatMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8674: range 00000000112B3146-00000000112B3187
void __cdecl data::AvatarCombatMixinFactory::AvatarCombatMixinFactory(data::AvatarCombatMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarCombatMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarCombatMixinFactory = v2;
};

// Line 8705: range 00000000112B3628-00000000112B36E9
void __cdecl data::DoActionByRayTagMixin::DoActionByRayTagMixin(data::DoActionByRayTagMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByRayTagMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::UGCRayTriggerDirectionType>::vector(&this->ugcray_trigger_directions);
  std::vector<unsigned int>::vector(&this->ray_tags);
  std::vector<std::string>::vector(&this->modifier_to_tags);
  if ( *(_BYTE *)(((unsigned __int64)&this->raycast_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->raycast_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->raycast_interval, v1);
  }
  this->raycast_interval = 0.5;
};

// Line 8705: range 00000000112B3BBA-00000000112B3D28
void __cdecl data::DoActionByRayTagMixin::DoActionByRayTagMixin(
        data::DoActionByRayTagMixin *const this,
        const data::DoActionByRayTagMixin *a2)
{
  int (**v2)(...); // rdx
  float raycast_interval; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByRayTagMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::UGCRayTriggerDirectionType>::vector(
    &this->ugcray_trigger_directions,
    &a2->ugcray_trigger_directions);
  std::vector<unsigned int>::vector(&this->ray_tags, &a2->ray_tags);
  std::vector<std::string>::vector(&this->modifier_to_tags, &a2->modifier_to_tags);
  if ( *(_BYTE *)(((unsigned __int64)&a2->raycast_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->raycast_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->raycast_interval);
  }
  raycast_interval = a2->raycast_interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->raycast_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->raycast_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->raycast_interval, &a2->modifier_to_tags);
  }
  this->raycast_interval = raycast_interval;
};

// Line 8715: range 00000000112FC81A-00000000112FC897
void __cdecl data::DoActionByRayTagMixin::~DoActionByRayTagMixin(data::DoActionByRayTagMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByRayTagMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->modifier_to_tags);
  std::vector<unsigned int>::~vector(&this->ray_tags);
  std::vector<data::UGCRayTriggerDirectionType>::~vector(&this->ugcray_trigger_directions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8715: range 00000000112FC898-00000000112FC8C2
void __cdecl data::DoActionByRayTagMixin::~DoActionByRayTagMixin(data::DoActionByRayTagMixin *const this)
{
  data::DoActionByRayTagMixin::~DoActionByRayTagMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 8720: range 00000000100D3308-00000000100D3318
const char *__cdecl data::DoActionByRayTagMixin::getTypeName(const data::DoActionByRayTagMixin *const this)
{
  return "DoActionByRayTagMixin";
};

// Line 8721: range 00000000100D331A-00000000100D34B6
int32_t __cdecl data::DoActionByRayTagMixin::getHashNum(const data::DoActionByRayTagMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByRayTagMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByRayTagMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8737: range 00000000112B4012-00000000112B4053
void __cdecl data::DoActionByRayTagMixinFactory::DoActionByRayTagMixinFactory(
        data::DoActionByRayTagMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByRayTagMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByRayTagMixinFactory = v2;
};

// Line 8745: range 00000000112B435C-00000000112B4409
void __cdecl data::UnitDurationMixin::UnitDurationMixin(data::UnitDurationMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::UnitDurationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_trigger, v3, v4);
  this->is_trigger = 0;
  std::vector<std::string>::vector(&this->modifier_name);
  std::vector<data::DynamicFloat>::vector(&this->steps);
};

// Line 8745: range 00000000112B482E-00000000112B4974
void __cdecl data::UnitDurationMixin::UnitDurationMixin(
        data::UnitDurationMixin *const this,
        const data::UnitDurationMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool is_trigger; // cl
  char v6; // dl
  __int64 v7; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::UnitDurationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->is_trigger >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->is_trigger >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->is_trigger, v3, v4);
  is_trigger = a2->is_trigger;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_trigger >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_trigger, v3, v7);
  this->is_trigger = is_trigger;
  std::vector<std::string>::vector(&this->modifier_name, &a2->modifier_name);
  std::vector<data::DynamicFloat>::vector(&this->steps, &a2->steps);
};

// Line 8754: range 00000000112FC7EE-00000000112FC818
void __cdecl data::UnitDurationMixin::~UnitDurationMixin(data::UnitDurationMixin *const this)
{
  data::UnitDurationMixin::~UnitDurationMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 8754: range 00000000112FC780-00000000112FC7ED
void __cdecl data::UnitDurationMixin::~UnitDurationMixin(data::UnitDurationMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UnitDurationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::DynamicFloat>::~vector(&this->steps);
  std::vector<std::string>::~vector(&this->modifier_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 8759: range 00000000100D34B8-00000000100D34C8
const char *__cdecl data::UnitDurationMixin::getTypeName(const data::UnitDurationMixin *const this)
{
  return "UnitDurationMixin";
};

// Line 8760: range 00000000100D34CA-00000000100D3666
int32_t __cdecl data::UnitDurationMixin::getHashNum(const data::UnitDurationMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UnitDurationMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UnitDurationMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8776: range 00000000112B4C5E-00000000112B4C9F
void __cdecl data::UnitDurationMixinFactory::UnitDurationMixinFactory(data::UnitDurationMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UnitDurationMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UnitDurationMixinFactory = v2;
};

// Line 8784: range 00000000112B4FA8-00000000112B4FF5
void __cdecl data::UGCTimeControlMixin::UGCTimeControlMixin(data::UGCTimeControlMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::UGCTimeControlMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8784: range 00000000112B54F6-00000000112B554E
void __cdecl data::UGCTimeControlMixin::UGCTimeControlMixin(
        data::UGCTimeControlMixin *const this,
        const data::UGCTimeControlMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UGCTimeControlMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8790: range 00000000112FC706-00000000112FC753
void __cdecl data::UGCTimeControlMixin::~UGCTimeControlMixin(data::UGCTimeControlMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UGCTimeControlMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8790: range 00000000112FC754-00000000112FC77E
void __cdecl data::UGCTimeControlMixin::~UGCTimeControlMixin(data::UGCTimeControlMixin *const this)
{
  data::UGCTimeControlMixin::~UGCTimeControlMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 8795: range 00000000100D3668-00000000100D3678
const char *__cdecl data::UGCTimeControlMixin::getTypeName(const data::UGCTimeControlMixin *const this)
{
  return "UGCTimeControlMixin";
};

// Line 8796: range 00000000100D367A-00000000100D3816
int32_t __cdecl data::UGCTimeControlMixin::getHashNum(const data::UGCTimeControlMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UGCTimeControlMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UGCTimeControlMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8812: range 00000000112B5798-00000000112B57D9
void __cdecl data::UGCTimeControlMixinFactory::UGCTimeControlMixinFactory(data::UGCTimeControlMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UGCTimeControlMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UGCTimeControlMixinFactory = v2;
};

// Line 8820: range 00000000112B5AE2-00000000112B5B83
void __cdecl data::EntityDisplacementMixin::EntityDisplacementMixin(data::EntityDisplacementMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EntityDisplacementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trigger_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trigger_distance, v1);
  }
  this->trigger_distance = 0.050000001;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 8820: range 00000000112B5F88-00000000112B6096
void __cdecl data::EntityDisplacementMixin::EntityDisplacementMixin(
        data::EntityDisplacementMixin *const this,
        const data::EntityDisplacementMixin *a2)
{
  int (**v2)(...); // rdx
  float trigger_distance; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EntityDisplacementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->trigger_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->trigger_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->trigger_distance);
  }
  trigger_distance = a2->trigger_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trigger_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trigger_distance, a2);
  }
  this->trigger_distance = trigger_distance;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &a2->action_list);
};

// Line 8828: range 00000000112FC6DA-00000000112FC704
void __cdecl data::EntityDisplacementMixin::~EntityDisplacementMixin(data::EntityDisplacementMixin *const this)
{
  data::EntityDisplacementMixin::~EntityDisplacementMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 8828: range 00000000112FC67C-00000000112FC6D9
void __cdecl data::EntityDisplacementMixin::~EntityDisplacementMixin(data::EntityDisplacementMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityDisplacementMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8833: range 00000000100D3818-00000000100D3828
const char *__cdecl data::EntityDisplacementMixin::getTypeName(const data::EntityDisplacementMixin *const this)
{
  return "EntityDisplacementMixin";
};

// Line 8834: range 00000000100D382A-00000000100D39C6
int32_t __cdecl data::EntityDisplacementMixin::getHashNum(const data::EntityDisplacementMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EntityDisplacementMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EntityDisplacementMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8850: range 00000000112B6380-00000000112B63C1
void __cdecl data::EntityDisplacementMixinFactory::EntityDisplacementMixinFactory(
        data::EntityDisplacementMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EntityDisplacementMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EntityDisplacementMixinFactory = v2;
};

// Line 8858: range 00000000112B66CA-00000000112B6727
void __cdecl data::OnLevelTagChangeMixin::OnLevelTagChangeMixin(data::OnLevelTagChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OnLevelTagChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 8858: range 00000000112B6B1C-00000000112B6BB2
void __cdecl data::OnLevelTagChangeMixin::OnLevelTagChangeMixin(
        data::OnLevelTagChangeMixin *const this,
        const data::OnLevelTagChangeMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OnLevelTagChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 8865: range 00000000112FC5F2-00000000112FC64F
void __cdecl data::OnLevelTagChangeMixin::~OnLevelTagChangeMixin(data::OnLevelTagChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnLevelTagChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8865: range 00000000112FC650-00000000112FC67A
void __cdecl data::OnLevelTagChangeMixin::~OnLevelTagChangeMixin(data::OnLevelTagChangeMixin *const this)
{
  data::OnLevelTagChangeMixin::~OnLevelTagChangeMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 8870: range 00000000100D39C8-00000000100D39D8
const char *__cdecl data::OnLevelTagChangeMixin::getTypeName(const data::OnLevelTagChangeMixin *const this)
{
  return "OnLevelTagChangeMixin";
};

// Line 8871: range 00000000100D39DA-00000000100D3B76
int32_t __cdecl data::OnLevelTagChangeMixin::getHashNum(const data::OnLevelTagChangeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OnLevelTagChangeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OnLevelTagChangeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8887: range 00000000112B6E9C-00000000112B6EDD
void __cdecl data::OnLevelTagChangeMixinFactory::OnLevelTagChangeMixinFactory(
        data::OnLevelTagChangeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnLevelTagChangeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OnLevelTagChangeMixinFactory = v2;
};

// Line 8895: range 00000000112B71E6-00000000112B7233
void __cdecl data::RoomRotateGadgetStateMixin::RoomRotateGadgetStateMixin(data::RoomRotateGadgetStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::RoomRotateGadgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8895: range 00000000112B7734-00000000112B778C
void __cdecl data::RoomRotateGadgetStateMixin::RoomRotateGadgetStateMixin(
        data::RoomRotateGadgetStateMixin *const this,
        const data::RoomRotateGadgetStateMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RoomRotateGadgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 8901: range 00000000112FC578-00000000112FC5C5
void __cdecl data::RoomRotateGadgetStateMixin::~RoomRotateGadgetStateMixin(
        data::RoomRotateGadgetStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RoomRotateGadgetStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8901: range 00000000112FC5C6-00000000112FC5F0
void __cdecl data::RoomRotateGadgetStateMixin::~RoomRotateGadgetStateMixin(
        data::RoomRotateGadgetStateMixin *const this)
{
  data::RoomRotateGadgetStateMixin::~RoomRotateGadgetStateMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 8906: range 00000000100D3B78-00000000100D3B88
const char *__cdecl data::RoomRotateGadgetStateMixin::getTypeName(const data::RoomRotateGadgetStateMixin *const this)
{
  return "RoomRotateGadgetStateMixin";
};

// Line 8907: range 00000000100D3B8A-00000000100D3D26
int32_t __cdecl data::RoomRotateGadgetStateMixin::getHashNum(const data::RoomRotateGadgetStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RoomRotateGadgetStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RoomRotateGadgetStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8923: range 00000000112B79D6-00000000112B7A17
void __cdecl data::RoomRotateGadgetStateMixinFactory::RoomRotateGadgetStateMixinFactory(
        data::RoomRotateGadgetStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RoomRotateGadgetStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RoomRotateGadgetStateMixinFactory = v2;
};

// Line 8931: range 00000000112B7D20-00000000112B7EB1
void __cdecl data::CameraSetReflectionMixin::CameraSetReflectionMixin(data::CameraSetReflectionMixin *const this)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  unsigned __int64 v4; // r13
  int (**v5)(...); // rdx
  char v6[112]; // [rsp+10h] [rbp-70h] BYREF

  v2 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_0(64LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "1 32 1 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::CameraSetReflectionMixin::CameraSetReflectionMixin;
  v4 = v2 >> 3;
  *(_DWORD *)(v4 + 2147450880) = -235802127;
  *(_DWORD *)(v4 + 2147450884) = -202116351;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v5 = (int (**)(...))(&`vtable for'data::CameraSetReflectionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v5;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    &this->reflection_layer,
    "InterTarget",
    (const std::allocator<char> *)(v2 + 32));
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  std::string::basic_string(&this->reflection_plane_trans_name);
  if ( v6 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
  }
};

// Line 8931: range 00000000112B82FA-00000000112B83C0
void __cdecl data::CameraSetReflectionMixin::CameraSetReflectionMixin(
        data::CameraSetReflectionMixin *const this,
        const data::CameraSetReflectionMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CameraSetReflectionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->reflection_layer, &a2->reflection_layer);
  std::string::basic_string(&this->reflection_plane_trans_name, &a2->reflection_plane_trans_name);
};

// Line 8939: range 00000000112FC54C-00000000112FC576
void __cdecl data::CameraSetReflectionMixin::~CameraSetReflectionMixin(data::CameraSetReflectionMixin *const this)
{
  data::CameraSetReflectionMixin::~CameraSetReflectionMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 8939: range 00000000112FC4DE-00000000112FC54B
void __cdecl data::CameraSetReflectionMixin::~CameraSetReflectionMixin(data::CameraSetReflectionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CameraSetReflectionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->reflection_plane_trans_name);
  std::string::~string(&this->reflection_layer);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8944: range 00000000100D3D28-00000000100D3D38
const char *__cdecl data::CameraSetReflectionMixin::getTypeName(const data::CameraSetReflectionMixin *const this)
{
  return "CameraSetReflectionMixin";
};

// Line 8945: range 00000000100D3D3A-00000000100D3ED6
int32_t __cdecl data::CameraSetReflectionMixin::getHashNum(const data::CameraSetReflectionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CameraSetReflectionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CameraSetReflectionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 8961: range 00000000112B86AA-00000000112B86EB
void __cdecl data::CameraSetReflectionMixinFactory::CameraSetReflectionMixinFactory(
        data::CameraSetReflectionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CameraSetReflectionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CameraSetReflectionMixinFactory = v2;
};

// Line 8969: range 00000000112B89F4-00000000112B8B83
void __cdecl data::MonsterLaunchMixin::MonsterLaunchMixin(data::MonsterLaunchMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MonsterLaunchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_motion_change);
  std::string::basic_string(&this->run_up_to_pos);
  std::string::basic_string(&this->launch_to_pos);
  if ( *(_BYTE *)(((unsigned __int64)&this->launch_speed_bezier_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->launch_speed_bezier_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->launch_speed_bezier_type, v1);
  }
  this->launch_speed_bezier_type = -1;
  v3 = ((_BYTE)this + 124) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->has_launch_pos >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->has_launch_pos >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->has_launch_pos, v3, v4);
  this->has_launch_pos = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->launch_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->launch_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->launch_time, v3);
  }
  this->launch_time = 2.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->launch_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->launch_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->launch_speed, (((_BYTE)this - 124) & 7u) + 3);
  }
  this->launch_speed = 0.0;
};

// Line 8969: range 00000000112B8F3E-00000000112B9239
void __cdecl data::MonsterLaunchMixin::MonsterLaunchMixin(
        data::MonsterLaunchMixin *const this,
        const data::MonsterLaunchMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_launch_to_pos; // rsi
  int32_t launch_speed_bezier_type; // ecx
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool has_launch_pos; // cl
  char v9; // dl
  __int64 v10; // rdx
  float launch_time; // xmm0_4
  float launch_speed; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MonsterLaunchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_motion_change, &a2->on_motion_change);
  std::string::basic_string(&this->run_up_to_pos, &a2->run_up_to_pos);
  p_launch_to_pos = &a2->launch_to_pos;
  std::string::basic_string(&this->launch_to_pos, &a2->launch_to_pos);
  if ( *(_BYTE *)(((unsigned __int64)&a2->launch_speed_bezier_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->launch_speed_bezier_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->launch_speed_bezier_type);
  }
  launch_speed_bezier_type = a2->launch_speed_bezier_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->launch_speed_bezier_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_launch_to_pos) = v5 != 0;
    __asan_report_store4(&this->launch_speed_bezier_type, p_launch_to_pos);
  }
  this->launch_speed_bezier_type = launch_speed_bezier_type;
  v6 = ((_BYTE)a2 + 124) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->has_launch_pos >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->has_launch_pos >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->has_launch_pos, v6, v7);
  has_launch_pos = a2->has_launch_pos;
  v9 = *(_BYTE *)(((unsigned __int64)&this->has_launch_pos >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 124) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->has_launch_pos, v6, v10);
  this->has_launch_pos = has_launch_pos;
  if ( *(_BYTE *)(((unsigned __int64)&a2->launch_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->launch_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->launch_time);
  }
  launch_time = a2->launch_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->launch_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->launch_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->launch_time, v6);
  }
  this->launch_time = launch_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->launch_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->launch_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->launch_speed);
  }
  launch_speed = a2->launch_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->launch_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->launch_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->launch_speed, (((_BYTE)this - 124) & 7u) + 3);
  }
  this->launch_speed = launch_speed;
};

// Line 8982: range 00000000112FC434-00000000112FC4B1
void __cdecl data::MonsterLaunchMixin::~MonsterLaunchMixin(data::MonsterLaunchMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterLaunchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->launch_to_pos);
  std::string::~string(&this->run_up_to_pos);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_motion_change);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 8982: range 00000000112FC4B2-00000000112FC4DC
void __cdecl data::MonsterLaunchMixin::~MonsterLaunchMixin(data::MonsterLaunchMixin *const this)
{
  data::MonsterLaunchMixin::~MonsterLaunchMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 8987: range 00000000100D3ED8-00000000100D3EE8
const char *__cdecl data::MonsterLaunchMixin::getTypeName(const data::MonsterLaunchMixin *const this)
{
  return "MonsterLaunchMixin";
};

// Line 8988: range 00000000100D3EEA-00000000100D4086
int32_t __cdecl data::MonsterLaunchMixin::getHashNum(const data::MonsterLaunchMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MonsterLaunchMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MonsterLaunchMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9004: range 00000000112B9522-00000000112B9563
void __cdecl data::MonsterLaunchMixinFactory::MonsterLaunchMixinFactory(data::MonsterLaunchMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterLaunchMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MonsterLaunchMixinFactory = v2;
};

// Line 9012: range 00000000112B986C-00000000112B99E3
void __cdecl data::MonsterLandMixin::MonsterLandMixin(data::MonsterLandMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MonsterLandMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_motion_change);
  std::string::basic_string(&this->drop_to_pos);
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_speed_bezier_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->drop_speed_bezier_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->drop_speed_bezier_type, v1);
  }
  this->drop_speed_bezier_type = -1;
  v3 = ((_BYTE)this + 92) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->has_drop_pos >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->has_drop_pos >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->has_drop_pos, v3, v4);
  this->has_drop_pos = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->drop_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->drop_time, v3);
  }
  this->drop_time = 2.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->drop_speed, (((_BYTE)this + 100) & 7u) + 3);
  }
  this->drop_speed = 0.0;
};

// Line 9012: range 00000000112B9D98-00000000112BA053
void __cdecl data::MonsterLandMixin::MonsterLandMixin(
        data::MonsterLandMixin *const this,
        const data::MonsterLandMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_drop_to_pos; // rsi
  int32_t drop_speed_bezier_type; // ecx
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool has_drop_pos; // cl
  char v9; // dl
  __int64 v10; // rdx
  float drop_time; // xmm0_4
  float drop_speed; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MonsterLandMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_motion_change, &a2->on_motion_change);
  p_drop_to_pos = &a2->drop_to_pos;
  std::string::basic_string(&this->drop_to_pos, &a2->drop_to_pos);
  if ( *(_BYTE *)(((unsigned __int64)&a2->drop_speed_bezier_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->drop_speed_bezier_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->drop_speed_bezier_type);
  }
  drop_speed_bezier_type = a2->drop_speed_bezier_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->drop_speed_bezier_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_drop_to_pos) = v5 != 0;
    __asan_report_store4(&this->drop_speed_bezier_type, p_drop_to_pos);
  }
  this->drop_speed_bezier_type = drop_speed_bezier_type;
  v6 = ((_BYTE)a2 + 92) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->has_drop_pos >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->has_drop_pos >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->has_drop_pos, v6, v7);
  has_drop_pos = a2->has_drop_pos;
  v9 = *(_BYTE *)(((unsigned __int64)&this->has_drop_pos >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 92) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->has_drop_pos, v6, v10);
  this->has_drop_pos = has_drop_pos;
  if ( *(_BYTE *)(((unsigned __int64)&a2->drop_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->drop_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->drop_time);
  }
  drop_time = a2->drop_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->drop_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->drop_time, v6);
  }
  this->drop_time = drop_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->drop_speed);
  }
  drop_speed = a2->drop_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->drop_speed, (((_BYTE)this + 100) & 7u) + 3);
  }
  this->drop_speed = drop_speed;
};

// Line 9024: range 00000000112FC408-00000000112FC432
void __cdecl data::MonsterLandMixin::~MonsterLandMixin(data::MonsterLandMixin *const this)
{
  data::MonsterLandMixin::~MonsterLandMixin(this);
  operator delete(this, 0x68uLL);
};

// Line 9024: range 00000000112FC39A-00000000112FC407
void __cdecl data::MonsterLandMixin::~MonsterLandMixin(data::MonsterLandMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterLandMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->drop_to_pos);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_motion_change);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9029: range 00000000100D4088-00000000100D4098
const char *__cdecl data::MonsterLandMixin::getTypeName(const data::MonsterLandMixin *const this)
{
  return "MonsterLandMixin";
};

// Line 9030: range 00000000100D409A-00000000100D4236
int32_t __cdecl data::MonsterLandMixin::getHashNum(const data::MonsterLandMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MonsterLandMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MonsterLandMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9046: range 00000000112BA33C-00000000112BA37D
void __cdecl data::MonsterLandMixinFactory::MonsterLandMixinFactory(data::MonsterLandMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MonsterLandMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MonsterLandMixinFactory = v2;
};

// Line 9054: range 00000000112BA686-00000000112BA6D3
void __cdecl data::GrapplingHookMoveStayInPlaceMixin::GrapplingHookMoveStayInPlaceMixin(
        data::GrapplingHookMoveStayInPlaceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveStayInPlaceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9054: range 00000000112BABD4-00000000112BAC2C
void __cdecl data::GrapplingHookMoveStayInPlaceMixin::GrapplingHookMoveStayInPlaceMixin(
        data::GrapplingHookMoveStayInPlaceMixin *const this,
        const data::GrapplingHookMoveStayInPlaceMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveStayInPlaceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9060: range 00000000112FC36E-00000000112FC398
void __cdecl data::GrapplingHookMoveStayInPlaceMixin::~GrapplingHookMoveStayInPlaceMixin(
        data::GrapplingHookMoveStayInPlaceMixin *const this)
{
  data::GrapplingHookMoveStayInPlaceMixin::~GrapplingHookMoveStayInPlaceMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 9060: range 00000000112FC320-00000000112FC36D
void __cdecl data::GrapplingHookMoveStayInPlaceMixin::~GrapplingHookMoveStayInPlaceMixin(
        data::GrapplingHookMoveStayInPlaceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveStayInPlaceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9065: range 00000000100D4238-00000000100D4248
const char *__cdecl data::GrapplingHookMoveStayInPlaceMixin::getTypeName(
        const data::GrapplingHookMoveStayInPlaceMixin *const this)
{
  return "GrapplingHookMoveStayInPlaceMixin";
};

// Line 9066: range 00000000100D424A-00000000100D43E6
int32_t __cdecl data::GrapplingHookMoveStayInPlaceMixin::getHashNum(
        const data::GrapplingHookMoveStayInPlaceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GrapplingHookMoveStayInPlaceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GrapplingHookMoveStayInPlaceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9082: range 00000000112BAE76-00000000112BAEB7
void __cdecl data::GrapplingHookMoveStayInPlaceMixinFactory::GrapplingHookMoveStayInPlaceMixinFactory(
        data::GrapplingHookMoveStayInPlaceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveStayInPlaceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GrapplingHookMoveStayInPlaceMixinFactory = v2;
};

// Line 9090: range 00000000112BB1C0-00000000112BB2F1
void __cdecl data::GrapplingHookMoveMixin::GrapplingHookMoveMixin(data::GrapplingHookMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_arrived);
  if ( *(_BYTE *)(((unsigned __int64)&this->up_force_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->up_force_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->up_force_value, v1);
  }
  this->up_force_value = 6.0;
  v3 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->up_force_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->up_force_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->up_force_time, v3);
  }
  this->up_force_time = 1.5;
  if ( *(_BYTE *)(((unsigned __int64)&this->arrive_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->arrive_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->arrive_distance, v3);
  }
  this->arrive_distance = 2.0;
};

// Line 9090: range 00000000112BB70C-00000000112BB91A
void __cdecl data::GrapplingHookMoveMixin::GrapplingHookMoveMixin(
        data::GrapplingHookMoveMixin *const this,
        const data::GrapplingHookMoveMixin *a2)
{
  int (**v2)(...); // rdx
  float up_force_value; // xmm0_4
  float up_force_time; // xmm0_4
  __int64 v5; // rsi
  float arrive_distance; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_arrived, &a2->on_arrived);
  if ( *(_BYTE *)(((unsigned __int64)&a2->up_force_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->up_force_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->up_force_value);
  }
  up_force_value = a2->up_force_value;
  if ( *(_BYTE *)(((unsigned __int64)&this->up_force_value >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->up_force_value >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->up_force_value, &a2->on_arrived);
  }
  this->up_force_value = up_force_value;
  if ( *(_BYTE *)(((unsigned __int64)&a2->up_force_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->up_force_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->up_force_time);
  }
  up_force_time = a2->up_force_time;
  v5 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->up_force_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->up_force_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->up_force_time, v5);
  }
  this->up_force_time = up_force_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->arrive_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->arrive_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->arrive_distance);
  }
  arrive_distance = a2->arrive_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->arrive_distance >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->arrive_distance >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->arrive_distance, v5);
  }
  this->arrive_distance = arrive_distance;
};

// Line 9100: range 00000000112FC296-00000000112FC2F3
void __cdecl data::GrapplingHookMoveMixin::~GrapplingHookMoveMixin(data::GrapplingHookMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_arrived);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9100: range 00000000112FC2F4-00000000112FC31E
void __cdecl data::GrapplingHookMoveMixin::~GrapplingHookMoveMixin(data::GrapplingHookMoveMixin *const this)
{
  data::GrapplingHookMoveMixin::~GrapplingHookMoveMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 9105: range 00000000100D43E8-00000000100D43F8
const char *__cdecl data::GrapplingHookMoveMixin::getTypeName(const data::GrapplingHookMoveMixin *const this)
{
  return "GrapplingHookMoveMixin";
};

// Line 9106: range 00000000100D43FA-00000000100D4596
int32_t __cdecl data::GrapplingHookMoveMixin::getHashNum(const data::GrapplingHookMoveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GrapplingHookMoveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GrapplingHookMoveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9122: range 00000000112BBC04-00000000112BBC45
void __cdecl data::GrapplingHookMoveMixinFactory::GrapplingHookMoveMixinFactory(
        data::GrapplingHookMoveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookMoveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GrapplingHookMoveMixinFactory = v2;
};

// Line 9130: range 00000000112BBF4E-00000000112BBF9B
void __cdecl data::EnableManualOcclusionMixin::EnableManualOcclusionMixin(data::EnableManualOcclusionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableManualOcclusionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9130: range 00000000112BC49C-00000000112BC4F4
void __cdecl data::EnableManualOcclusionMixin::EnableManualOcclusionMixin(
        data::EnableManualOcclusionMixin *const this,
        const data::EnableManualOcclusionMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableManualOcclusionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9136: range 00000000112FC26A-00000000112FC294
void __cdecl data::EnableManualOcclusionMixin::~EnableManualOcclusionMixin(
        data::EnableManualOcclusionMixin *const this)
{
  data::EnableManualOcclusionMixin::~EnableManualOcclusionMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 9136: range 00000000112FC21C-00000000112FC269
void __cdecl data::EnableManualOcclusionMixin::~EnableManualOcclusionMixin(
        data::EnableManualOcclusionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableManualOcclusionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9141: range 00000000100D4598-00000000100D45A8
const char *__cdecl data::EnableManualOcclusionMixin::getTypeName(const data::EnableManualOcclusionMixin *const this)
{
  return "EnableManualOcclusionMixin";
};

// Line 9142: range 00000000100D45AA-00000000100D4746
int32_t __cdecl data::EnableManualOcclusionMixin::getHashNum(const data::EnableManualOcclusionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableManualOcclusionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableManualOcclusionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9158: range 00000000112BC73E-00000000112BC77F
void __cdecl data::EnableManualOcclusionMixinFactory::EnableManualOcclusionMixinFactory(
        data::EnableManualOcclusionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableManualOcclusionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableManualOcclusionMixinFactory = v2;
};

// Line 9166: range 00000000112BCA88-00000000112BCB05
void __cdecl data::AvatarStrafeFuelMixin::AvatarStrafeFuelMixin(data::AvatarStrafeFuelMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeFuelMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->init_fuel);
  data::DynamicFloat::DynamicFloat(&this->cost_speed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_emptied);
};

// Line 9166: range 00000000112BCEBA-00000000112BCFB0
void __cdecl data::AvatarStrafeFuelMixin::AvatarStrafeFuelMixin(
        data::AvatarStrafeFuelMixin *const this,
        const data::AvatarStrafeFuelMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeFuelMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->init_fuel, &a2->init_fuel);
  data::DynamicFloat::DynamicFloat(&this->cost_speed, &a2->cost_speed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_emptied, &a2->on_emptied);
};

// Line 9175: range 00000000112FC1F0-00000000112FC21A
void __cdecl data::AvatarStrafeFuelMixin::~AvatarStrafeFuelMixin(data::AvatarStrafeFuelMixin *const this)
{
  data::AvatarStrafeFuelMixin::~AvatarStrafeFuelMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 9175: range 00000000112FC172-00000000112FC1EF
void __cdecl data::AvatarStrafeFuelMixin::~AvatarStrafeFuelMixin(data::AvatarStrafeFuelMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeFuelMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_emptied);
  data::DynamicFloat::~DynamicFloat(&this->cost_speed);
  data::DynamicFloat::~DynamicFloat(&this->init_fuel);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9180: range 00000000100D4748-00000000100D4758
const char *__cdecl data::AvatarStrafeFuelMixin::getTypeName(const data::AvatarStrafeFuelMixin *const this)
{
  return "AvatarStrafeFuelMixin";
};

// Line 9181: range 00000000100D475A-00000000100D48F6
int32_t __cdecl data::AvatarStrafeFuelMixin::getHashNum(const data::AvatarStrafeFuelMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarStrafeFuelMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarStrafeFuelMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9197: range 00000000112BD29A-00000000112BD2DB
void __cdecl data::AvatarStrafeFuelMixinFactory::AvatarStrafeFuelMixinFactory(
        data::AvatarStrafeFuelMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeFuelMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarStrafeFuelMixinFactory = v2;
};

// Line 9212: range 00000000112BD73E-00000000112BD79B
void __cdecl data::OverrideHitImpulseMixin::OverrideHitImpulseMixin(data::OverrideHitImpulseMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OverrideHitImpulseMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<data::HitLevel,data::ConfigHitImpulse>::unordered_map(&this->override_hit_impulse_map);
};

// Line 9212: range 00000000112BDB56-00000000112BDBEC
void __cdecl data::OverrideHitImpulseMixin::OverrideHitImpulseMixin(
        data::OverrideHitImpulseMixin *const this,
        const data::OverrideHitImpulseMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OverrideHitImpulseMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<data::HitLevel,data::ConfigHitImpulse>::unordered_map(
    &this->override_hit_impulse_map,
    &a2->override_hit_impulse_map);
};

// Line 9219: range 00000000112FC146-00000000112FC170
void __cdecl data::OverrideHitImpulseMixin::~OverrideHitImpulseMixin(data::OverrideHitImpulseMixin *const this)
{
  data::OverrideHitImpulseMixin::~OverrideHitImpulseMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 9219: range 00000000112FC0E8-00000000112FC145
void __cdecl data::OverrideHitImpulseMixin::~OverrideHitImpulseMixin(data::OverrideHitImpulseMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideHitImpulseMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<data::HitLevel,data::ConfigHitImpulse>::~unordered_map(&this->override_hit_impulse_map);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9224: range 00000000100D48F8-00000000100D4908
const char *__cdecl data::OverrideHitImpulseMixin::getTypeName(const data::OverrideHitImpulseMixin *const this)
{
  return "OverrideHitImpulseMixin";
};

// Line 9225: range 00000000100D490A-00000000100D4AA6
int32_t __cdecl data::OverrideHitImpulseMixin::getHashNum(const data::OverrideHitImpulseMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OverrideHitImpulseMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OverrideHitImpulseMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9241: range 00000000112BDED6-00000000112BDF17
void __cdecl data::OverrideHitImpulseMixinFactory::OverrideHitImpulseMixinFactory(
        data::OverrideHitImpulseMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideHitImpulseMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OverrideHitImpulseMixinFactory = v2;
};

// Line 9249: range 0000000010189C80-0000000010189E68
void __cdecl data::StrafeStateConfig::StrafeStateConfig(data::StrafeStateConfig *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rdx
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rsi
  __int64 v7; // rdx

  std::vector<std::string>::vector(&this->state_ids);
  if ( *(char *)(((unsigned __int64)&this->use_root_motion >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->use_root_motion, v1, &this->use_root_motion);
  this->use_root_motion = 0;
  v2 = ((_BYTE)this + 25) & 7;
  v3 = (*(_BYTE *)(((unsigned __int64)&this->use_gravity >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)&this->use_gravity >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store1(&this->use_gravity, v2, v3);
  this->use_gravity = 0;
  v4 = (((_BYTE)this + 28) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->strafe_move_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->strafe_move_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->strafe_move_speed, v4);
  }
  this->strafe_move_speed = 1.0;
  if ( *(char *)(((unsigned __int64)&this->rotate_to_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->rotate_to_target, v4, &this->rotate_to_target);
  this->rotate_to_target = 0;
  v5 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->drop_speed, v5);
  }
  this->drop_speed = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_speed, v5);
  }
  this->angular_speed = -1.0;
  v6 = ((_BYTE)this + 44) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_json_loaded, v6, v7);
  this->is_json_loaded = 0;
};

// Line 9249: range 0000000010E937B2-0000000010E93B4B
void __cdecl data::StrafeStateConfig::StrafeStateConfig(
        data::StrafeStateConfig *const this,
        const data::StrafeStateConfig *a2)
{
  bool use_root_motion; // cl
  char v3; // al
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool use_gravity; // cl
  char v7; // dl
  __int64 v8; // rdx
  float strafe_move_speed; // xmm0_4
  __int64 v10; // rsi
  bool rotate_to_target; // cl
  char v12; // al
  float drop_speed; // xmm0_4
  __int64 v14; // rsi
  float angular_speed; // xmm0_4
  __int64 v16; // rsi
  __int64 v17; // rdx
  bool is_json_loaded; // cl
  char v19; // dl
  __int64 v20; // rdx
  const data::StrafeStateConfig *v21; // [rsp+0h] [rbp-10h]

  v21 = a2;
  std::vector<std::string>::vector(&this->state_ids, &a2->state_ids);
  if ( *(char *)(((unsigned __int64)&a2->use_root_motion >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_root_motion, a2, &a2->use_root_motion);
  use_root_motion = a2->use_root_motion;
  v3 = *(_BYTE *)(((unsigned __int64)&this->use_root_motion >> 3) + 0x7FFF8000);
  if ( v3 < 0 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store1(&this->use_root_motion, a2, &this->use_root_motion);
  }
  this->use_root_motion = use_root_motion;
  v4 = ((_BYTE)v21 + 25) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&v21->use_gravity >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&v21->use_gravity >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&v21->use_gravity, v4, v5);
  use_gravity = v21->use_gravity;
  v7 = *(_BYTE *)(((unsigned __int64)&this->use_gravity >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 25) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->use_gravity, v4, v8);
  this->use_gravity = use_gravity;
  if ( *(_BYTE *)(((unsigned __int64)&v21->strafe_move_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v21 + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v21->strafe_move_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v21->strafe_move_speed);
  }
  strafe_move_speed = v21->strafe_move_speed;
  v10 = (((_BYTE)this + 28) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->strafe_move_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->strafe_move_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->strafe_move_speed, v10);
  }
  this->strafe_move_speed = strafe_move_speed;
  if ( *(char *)(((unsigned __int64)&v21->rotate_to_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v21->rotate_to_target, v10, &v21->rotate_to_target);
  rotate_to_target = v21->rotate_to_target;
  v12 = *(_BYTE *)(((unsigned __int64)&this->rotate_to_target >> 3) + 0x7FFF8000);
  if ( v12 < 0 )
  {
    LOBYTE(v10) = v12 != 0;
    __asan_report_store1(&this->rotate_to_target, v10, &this->rotate_to_target);
  }
  this->rotate_to_target = rotate_to_target;
  if ( *(_BYTE *)(((unsigned __int64)&v21->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v21 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v21->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v21->drop_speed);
  }
  drop_speed = v21->drop_speed;
  v14 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->drop_speed, v14);
  }
  this->drop_speed = drop_speed;
  if ( *(_BYTE *)(((unsigned __int64)&v21->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v21->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v21->angular_speed);
  }
  angular_speed = v21->angular_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_speed, v14);
  }
  this->angular_speed = angular_speed;
  v16 = ((_BYTE)v21 + 44) & 7;
  v17 = (*(_BYTE *)(((unsigned __int64)&v21->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((unsigned __int64)&v21->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_load1(&v21->is_json_loaded, v16, v17);
  is_json_loaded = v21->is_json_loaded;
  v19 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v16) = v19 != 0;
  v20 = (v19 != 0) & (unsigned __int8)((((unsigned __int8)this + 44) & 7) >= v19);
  if ( (_BYTE)v20 )
    __asan_report_store1(&this->is_json_loaded, v16, v20);
  this->is_json_loaded = is_json_loaded;
};

// Line 9249: range 00000000105ADF62-00000000105AE2FB
void __cdecl data::StrafeStateConfig::StrafeStateConfig(
        data::StrafeStateConfig *const this,
        data::StrafeStateConfig *a2)
{
  bool use_root_motion; // cl
  char v3; // al
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool use_gravity; // cl
  char v7; // dl
  __int64 v8; // rdx
  float strafe_move_speed; // xmm0_4
  __int64 v10; // rsi
  bool rotate_to_target; // cl
  char v12; // al
  float drop_speed; // xmm0_4
  __int64 v14; // rsi
  float angular_speed; // xmm0_4
  __int64 v16; // rsi
  __int64 v17; // rdx
  bool is_json_loaded; // cl
  char v19; // dl
  __int64 v20; // rdx
  data::StrafeStateConfig *v21; // [rsp+0h] [rbp-10h]

  v21 = a2;
  std::vector<std::string>::vector(&this->state_ids, &a2->state_ids);
  if ( *(char *)(((unsigned __int64)&a2->use_root_motion >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->use_root_motion, a2, &a2->use_root_motion);
  use_root_motion = a2->use_root_motion;
  v3 = *(_BYTE *)(((unsigned __int64)&this->use_root_motion >> 3) + 0x7FFF8000);
  if ( v3 < 0 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store1(&this->use_root_motion, a2, &this->use_root_motion);
  }
  this->use_root_motion = use_root_motion;
  v4 = ((_BYTE)v21 + 25) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&v21->use_gravity >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&v21->use_gravity >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&v21->use_gravity, v4, v5);
  use_gravity = v21->use_gravity;
  v7 = *(_BYTE *)(((unsigned __int64)&this->use_gravity >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 25) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->use_gravity, v4, v8);
  this->use_gravity = use_gravity;
  if ( *(_BYTE *)(((unsigned __int64)&v21->strafe_move_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v21 + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v21->strafe_move_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v21->strafe_move_speed);
  }
  strafe_move_speed = v21->strafe_move_speed;
  v10 = (((_BYTE)this + 28) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->strafe_move_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->strafe_move_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->strafe_move_speed, v10);
  }
  this->strafe_move_speed = strafe_move_speed;
  if ( *(char *)(((unsigned __int64)&v21->rotate_to_target >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v21->rotate_to_target, v10, &v21->rotate_to_target);
  rotate_to_target = v21->rotate_to_target;
  v12 = *(_BYTE *)(((unsigned __int64)&this->rotate_to_target >> 3) + 0x7FFF8000);
  if ( v12 < 0 )
  {
    LOBYTE(v10) = v12 != 0;
    __asan_report_store1(&this->rotate_to_target, v10, &this->rotate_to_target);
  }
  this->rotate_to_target = rotate_to_target;
  if ( *(_BYTE *)(((unsigned __int64)&v21->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v21 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v21->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v21->drop_speed);
  }
  drop_speed = v21->drop_speed;
  v14 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->drop_speed >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->drop_speed, v14);
  }
  this->drop_speed = drop_speed;
  if ( *(_BYTE *)(((unsigned __int64)&v21->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v21->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v21->angular_speed);
  }
  angular_speed = v21->angular_speed;
  if ( *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->angular_speed >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->angular_speed, v14);
  }
  this->angular_speed = angular_speed;
  v16 = ((_BYTE)v21 + 44) & 7;
  v17 = (*(_BYTE *)(((unsigned __int64)&v21->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v16 >= *(_BYTE *)(((unsigned __int64)&v21->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v17 )
    __asan_report_load1(&v21->is_json_loaded, v16, v17);
  is_json_loaded = v21->is_json_loaded;
  v19 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v16) = v19 != 0;
  v20 = (v19 != 0) & (unsigned __int8)((((unsigned __int8)this + 44) & 7) >= v19);
  if ( (_BYTE)v20 )
    __asan_report_store1(&this->is_json_loaded, v16, v20);
  this->is_json_loaded = is_json_loaded;
};

// Line 9249: range 0000000010189E6A-0000000010189E84
void __cdecl data::StrafeStateConfig::~StrafeStateConfig(data::StrafeStateConfig *const this)
{
  std::vector<std::string>::~vector(&this->state_ids);
};

// Line 9283: range 00000000112BE258-00000000112BE300
void __cdecl data::AvatarStrafeMixin::AvatarStrafeMixin(data::AvatarStrafeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::StrafeStateConfig>::vector(&this->config_list);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_exit_strafe_states);
  if ( *(char *)(((unsigned __int64)&this->is_check_on_attach >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_check_on_attach, v1, &this->is_check_on_attach);
  this->is_check_on_attach = 0;
};

// Line 9283: range 00000000112BE6BC-00000000112BE7F8
void __cdecl data::AvatarStrafeMixin::AvatarStrafeMixin(
        data::AvatarStrafeMixin *const this,
        const data::AvatarStrafeMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityActionArray *p_on_exit_strafe_states; // rsi
  bool is_check_on_attach; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::StrafeStateConfig>::vector(&this->config_list, &a2->config_list);
  p_on_exit_strafe_states = &a2->on_exit_strafe_states;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_exit_strafe_states,
    &a2->on_exit_strafe_states);
  if ( *(char *)(((unsigned __int64)&a2->is_check_on_attach >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_check_on_attach, p_on_exit_strafe_states, &a2->is_check_on_attach);
  is_check_on_attach = a2->is_check_on_attach;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_check_on_attach >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_on_exit_strafe_states) = v5 != 0;
    __asan_report_store1(&this->is_check_on_attach, p_on_exit_strafe_states, &this->is_check_on_attach);
  }
  this->is_check_on_attach = is_check_on_attach;
};

// Line 9292: range 00000000112FC0BC-00000000112FC0E6
void __cdecl data::AvatarStrafeMixin::~AvatarStrafeMixin(data::AvatarStrafeMixin *const this)
{
  data::AvatarStrafeMixin::~AvatarStrafeMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 9292: range 00000000112FC04E-00000000112FC0BB
void __cdecl data::AvatarStrafeMixin::~AvatarStrafeMixin(data::AvatarStrafeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_exit_strafe_states);
  std::vector<data::StrafeStateConfig>::~vector(&this->config_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9297: range 00000000100D4AA8-00000000100D4AB8
const char *__cdecl data::AvatarStrafeMixin::getTypeName(const data::AvatarStrafeMixin *const this)
{
  return "AvatarStrafeMixin";
};

// Line 9298: range 00000000100D4ABA-00000000100D4C56
int32_t __cdecl data::AvatarStrafeMixin::getHashNum(const data::AvatarStrafeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarStrafeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarStrafeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9314: range 00000000112BEAE2-00000000112BEB23
void __cdecl data::AvatarStrafeMixinFactory::AvatarStrafeMixinFactory(data::AvatarStrafeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarStrafeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarStrafeMixinFactory = v2;
};

// Line 9322: range 00000000112BEE2C-00000000112BEE99
void __cdecl data::DoActionBySelfElementReactionMixin::DoActionBySelfElementReactionMixin(
        data::DoActionBySelfElementReactionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfElementReactionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementReactionType>::vector(&this->reaction_types);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
};

// Line 9322: range 00000000112BF2BE-00000000112BF384
void __cdecl data::DoActionBySelfElementReactionMixin::DoActionBySelfElementReactionMixin(
        data::DoActionBySelfElementReactionMixin *const this,
        const data::DoActionBySelfElementReactionMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfElementReactionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::ElementReactionType>::vector(&this->reaction_types, &a2->reaction_types);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
};

// Line 9330: range 00000000112FC022-00000000112FC04C
void __cdecl data::DoActionBySelfElementReactionMixin::~DoActionBySelfElementReactionMixin(
        data::DoActionBySelfElementReactionMixin *const this)
{
  data::DoActionBySelfElementReactionMixin::~DoActionBySelfElementReactionMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 9330: range 00000000112FBFB4-00000000112FC021
void __cdecl data::DoActionBySelfElementReactionMixin::~DoActionBySelfElementReactionMixin(
        data::DoActionBySelfElementReactionMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfElementReactionMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  std::vector<data::ElementReactionType>::~vector(&this->reaction_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9335: range 00000000100D4C58-00000000100D4C68
const char *__cdecl data::DoActionBySelfElementReactionMixin::getTypeName(
        const data::DoActionBySelfElementReactionMixin *const this)
{
  return "DoActionBySelfElementReactionMixin";
};

// Line 9336: range 00000000100D4C6A-00000000100D4E06
int32_t __cdecl data::DoActionBySelfElementReactionMixin::getHashNum(
        const data::DoActionBySelfElementReactionMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionBySelfElementReactionMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionBySelfElementReactionMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9352: range 00000000112BF66E-00000000112BF6AF
void __cdecl data::DoActionBySelfElementReactionMixinFactory::DoActionBySelfElementReactionMixinFactory(
        data::DoActionBySelfElementReactionMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionBySelfElementReactionMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionBySelfElementReactionMixinFactory = v2;
};

// Line 9360: range 00000000112BF9B8-00000000112BFA15
void __cdecl data::SetAnimationPauseByAbilityStateMixin::SetAnimationPauseByAbilityStateMixin(
        data::SetAnimationPauseByAbilityStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimationPauseByAbilityStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::AbilityState>::vector(&this->ability_states);
};

// Line 9360: range 00000000112BFE0A-00000000112BFEA0
void __cdecl data::SetAnimationPauseByAbilityStateMixin::SetAnimationPauseByAbilityStateMixin(
        data::SetAnimationPauseByAbilityStateMixin *const this,
        const data::SetAnimationPauseByAbilityStateMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetAnimationPauseByAbilityStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::AbilityState>::vector(&this->ability_states, &a2->ability_states);
};

// Line 9367: range 00000000112FBF2A-00000000112FBF87
void __cdecl data::SetAnimationPauseByAbilityStateMixin::~SetAnimationPauseByAbilityStateMixin(
        data::SetAnimationPauseByAbilityStateMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimationPauseByAbilityStateMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::AbilityState>::~vector(&this->ability_states);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9367: range 00000000112FBF88-00000000112FBFB2
void __cdecl data::SetAnimationPauseByAbilityStateMixin::~SetAnimationPauseByAbilityStateMixin(
        data::SetAnimationPauseByAbilityStateMixin *const this)
{
  data::SetAnimationPauseByAbilityStateMixin::~SetAnimationPauseByAbilityStateMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 9372: range 00000000100D4E08-00000000100D4E18
const char *__cdecl data::SetAnimationPauseByAbilityStateMixin::getTypeName(
        const data::SetAnimationPauseByAbilityStateMixin *const this)
{
  return "SetAnimationPauseByAbilityStateMixin";
};

// Line 9373: range 00000000100D4E1A-00000000100D4FB6
int32_t __cdecl data::SetAnimationPauseByAbilityStateMixin::getHashNum(
        const data::SetAnimationPauseByAbilityStateMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetAnimationPauseByAbilityStateMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetAnimationPauseByAbilityStateMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9389: range 00000000112C018A-00000000112C01CB
void __cdecl data::SetAnimationPauseByAbilityStateMixinFactory::SetAnimationPauseByAbilityStateMixinFactory(
        data::SetAnimationPauseByAbilityStateMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetAnimationPauseByAbilityStateMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetAnimationPauseByAbilityStateMixinFactory = v2;
};

// Line 9397: range 00000000112C04D4-00000000112C0521
void __cdecl data::BaseSwitchMixin::BaseSwitchMixin(data::BaseSwitchMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BaseSwitchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9397: range 00000000112C0A22-00000000112C0A7A
void __cdecl data::BaseSwitchMixin::BaseSwitchMixin(data::BaseSwitchMixin *const this, const data::BaseSwitchMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BaseSwitchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9403: range 00000000112C0CC4-00000000112C0D11
void __cdecl data::BaseSwitchMixin::~BaseSwitchMixin(data::BaseSwitchMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BaseSwitchMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9403: range 00000000112C0D12-00000000112C0D3C
void __cdecl data::BaseSwitchMixin::~BaseSwitchMixin(data::BaseSwitchMixin *const this)
{
  data::BaseSwitchMixin::~BaseSwitchMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 9408: range 00000000100D4FB8-00000000100D4FC8
const char *__cdecl data::BaseSwitchMixin::getTypeName(const data::BaseSwitchMixin *const this)
{
  return "BaseSwitchMixin";
};

// Line 9409: range 00000000100D4FCA-00000000100D5166
int32_t __cdecl data::BaseSwitchMixin::getHashNum(const data::BaseSwitchMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BaseSwitchMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BaseSwitchMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9428: range 00000000112C0D3E-00000000112C0E14
void __cdecl data::RocketJumpMixin::RocketJumpMixin(data::RocketJumpMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::BaseSwitchMixin::BaseSwitchMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::RocketJumpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->type, v1);
  }
  this->type = XiaoUlt;
  data::RocketJumpExt::RocketJumpExt(&this->extention);
  if ( *(char *)(((unsigned __int64)&this->ui_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ui_effect, v1, &this->ui_effect);
  this->ui_effect = 0;
};

// Line 9428: range 00000000112C120A-00000000112C1441
void __cdecl data::RocketJumpMixin::RocketJumpMixin(data::RocketJumpMixin *const this, const data::RocketJumpMixin *a2)
{
  int (**v2)(...); // rdx
  data::RocketJumpType type; // ecx
  char v4; // al
  char v5; // dl
  __int64 v6; // rsi
  bool ui_effect; // cl
  char v8; // al
  const data::RocketJumpMixin *v9; // [rsp+0h] [rbp-10h]

  v9 = a2;
  data::BaseSwitchMixin::BaseSwitchMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::RocketJumpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->type);
  }
  type = a2->type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->type, a2);
  }
  this->type = type;
  if ( (((unsigned __int8)this + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&this->extention >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->extention >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->extention.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 47) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->extention.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->extention, 12LL);
  }
  v5 = *(_BYTE *)(((unsigned __int64)(&v9->extention.is_json_loaded + 3) >> 3) + 0x7FFF8000);
  v6 = v5 != 0;
  if ( ((((unsigned __int8)v9 + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&v9->extention >> 3) + 0x7FFF8000)
     && *(_BYTE *)(((unsigned __int64)&v9->extention >> 3) + 0x7FFF8000) != 0) | (unsigned __int8)v6 & ((((unsigned __int8)v9 + 47) & 7) >= v5) )
  {
    v6 = 12LL;
    __asan_report_load_n(&v9->extention, 12LL);
  }
  this->extention = v9->extention;
  if ( *(char *)(((unsigned __int64)&v9->ui_effect >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v9->ui_effect, v6, &v9->ui_effect);
  ui_effect = v9->ui_effect;
  v8 = *(_BYTE *)(((unsigned __int64)&this->ui_effect >> 3) + 0x7FFF8000);
  if ( v8 < 0 )
  {
    LOBYTE(v6) = v8 != 0;
    __asan_report_store1(&this->ui_effect, v6, &this->ui_effect);
  }
  this->ui_effect = ui_effect;
};

// Line 9437: range 00000000112FBEFE-00000000112FBF28
void __cdecl data::RocketJumpMixin::~RocketJumpMixin(data::RocketJumpMixin *const this)
{
  data::RocketJumpMixin::~RocketJumpMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 9437: range 00000000112FBEB0-00000000112FBEFD
void __cdecl data::RocketJumpMixin::~RocketJumpMixin(data::RocketJumpMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RocketJumpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::BaseSwitchMixin::~BaseSwitchMixin(this);
};

// Line 9442: range 00000000100D5168-00000000100D5178
const char *__cdecl data::RocketJumpMixin::getTypeName(const data::RocketJumpMixin *const this)
{
  return "RocketJumpMixin";
};

// Line 9443: range 00000000100D517A-00000000100D5316
int32_t __cdecl data::RocketJumpMixin::getHashNum(const data::RocketJumpMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::RocketJumpMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "RocketJumpMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9459: range 00000000112C168A-00000000112C16CB
void __cdecl data::RocketJumpMixinFactory::RocketJumpMixinFactory(data::RocketJumpMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::RocketJumpMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_RocketJumpMixinFactory = v2;
};

// Line 9467: range 00000000112C19D4-00000000112C1AD7
void __cdecl data::CountCheckEventMixin::CountCheckEventMixin(data::CountCheckEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CountCheckEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->event_key);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->check_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->check_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->check_time, v1);
  }
  this->check_time = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->check_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->check_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->check_count, (((_BYTE)this + 92) & 7u) + 3);
  }
  this->check_count = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
};

// Line 9467: range 00000000112C1E8C-00000000112C207F
void __cdecl data::CountCheckEventMixin::CountCheckEventMixin(
        data::CountCheckEventMixin *const this,
        const data::CountCheckEventMixin *a2)
{
  int (**v2)(...); // rdx
  float check_time; // xmm0_4
  __int64 v4; // rsi
  uint32_t check_count; // ecx
  char v6; // dl

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CountCheckEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->event_key, &a2->event_key);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->check_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->check_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->check_time);
  }
  check_time = a2->check_time;
  if ( *(_BYTE *)(((unsigned __int64)&this->check_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->check_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->check_time, &a2->predicates);
  }
  this->check_time = check_time;
  v4 = (((_BYTE)a2 + 92) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->check_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 92) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->check_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->check_count);
  }
  check_count = a2->check_count;
  v6 = *(_BYTE *)(((unsigned __int64)&this->check_count >> 3) + 0x7FFF8000);
  if ( v6 != 0 && (char)((((_BYTE)this + 92) & 7) + 3) >= v6 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store4(&this->check_count, v4);
  }
  this->check_count = check_count;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
};

// Line 9478: range 00000000112FBE06-00000000112FBE83
void __cdecl data::CountCheckEventMixin::~CountCheckEventMixin(data::CountCheckEventMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CountCheckEventMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::string::~string(&this->event_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9478: range 00000000112FBE84-00000000112FBEAE
void __cdecl data::CountCheckEventMixin::~CountCheckEventMixin(data::CountCheckEventMixin *const this)
{
  data::CountCheckEventMixin::~CountCheckEventMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 9483: range 00000000100D5318-00000000100D5328
const char *__cdecl data::CountCheckEventMixin::getTypeName(const data::CountCheckEventMixin *const this)
{
  return "CountCheckEventMixin";
};

// Line 9484: range 00000000100D532A-00000000100D54C6
int32_t __cdecl data::CountCheckEventMixin::getHashNum(const data::CountCheckEventMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CountCheckEventMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CountCheckEventMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9500: range 00000000112C2368-00000000112C23A9
void __cdecl data::CountCheckEventMixinFactory::CountCheckEventMixinFactory(
        data::CountCheckEventMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CountCheckEventMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CountCheckEventMixinFactory = v2;
};

// Line 9524: range 00000000112C2812-00000000112C28AD
void __cdecl data::ChangeColliderTagMixin::ChangeColliderTagMixin(data::ChangeColliderTagMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::BaseSwitchMixin::BaseSwitchMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderTagMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->trans_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->tag >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->tag >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->tag, v1);
  }
  this->tag = Climable;
};

// Line 9524: range 00000000112C2CC8-00000000112C2DD3
void __cdecl data::ChangeColliderTagMixin::ChangeColliderTagMixin(
        data::ChangeColliderTagMixin *const this,
        const data::ChangeColliderTagMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_trans_name; // rsi
  data::TagType tag; // ecx
  char v5; // al

  data::BaseSwitchMixin::BaseSwitchMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderTagMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_trans_name = &a2->trans_name;
  std::string::basic_string(&this->trans_name, &a2->trans_name);
  if ( *(_BYTE *)(((unsigned __int64)&a2->tag >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->tag >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->tag);
  }
  tag = a2->tag;
  v5 = *(_BYTE *)(((unsigned __int64)&this->tag >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_trans_name) = v5 != 0;
    __asan_report_store4(&this->tag, p_trans_name);
  }
  this->tag = tag;
};

// Line 9532: range 00000000112FBDDA-00000000112FBE04
void __cdecl data::ChangeColliderTagMixin::~ChangeColliderTagMixin(data::ChangeColliderTagMixin *const this)
{
  data::ChangeColliderTagMixin::~ChangeColliderTagMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 9532: range 00000000112FBD7C-00000000112FBDD9
void __cdecl data::ChangeColliderTagMixin::~ChangeColliderTagMixin(data::ChangeColliderTagMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderTagMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->trans_name);
  data::BaseSwitchMixin::~BaseSwitchMixin(this);
};

// Line 9537: range 00000000100D54C8-00000000100D54D8
const char *__cdecl data::ChangeColliderTagMixin::getTypeName(const data::ChangeColliderTagMixin *const this)
{
  return "ChangeColliderTagMixin";
};

// Line 9538: range 00000000100D54DA-00000000100D5676
int32_t __cdecl data::ChangeColliderTagMixin::getHashNum(const data::ChangeColliderTagMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeColliderTagMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeColliderTagMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9554: range 00000000112C30BC-00000000112C30FD
void __cdecl data::ChangeColliderTagMixinFactory::ChangeColliderTagMixinFactory(
        data::ChangeColliderTagMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeColliderTagMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeColliderTagMixinFactory = v2;
};

// Line 9562: range 00000000112C3406-00000000112C3473
void __cdecl data::AttachActionToModifierMixin::AttachActionToModifierMixin(
        data::AttachActionToModifierMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachActionToModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_added);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_removed);
};

// Line 9562: range 00000000112C3898-00000000112C395E
void __cdecl data::AttachActionToModifierMixin::AttachActionToModifierMixin(
        data::AttachActionToModifierMixin *const this,
        const data::AttachActionToModifierMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachActionToModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_added, &a2->on_added);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_removed, &a2->on_removed);
};

// Line 9570: range 00000000112FBCE2-00000000112FBD4F
void __cdecl data::AttachActionToModifierMixin::~AttachActionToModifierMixin(
        data::AttachActionToModifierMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachActionToModifierMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_removed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_added);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9570: range 00000000112FBD50-00000000112FBD7A
void __cdecl data::AttachActionToModifierMixin::~AttachActionToModifierMixin(
        data::AttachActionToModifierMixin *const this)
{
  data::AttachActionToModifierMixin::~AttachActionToModifierMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 9575: range 00000000100D5678-00000000100D5688
const char *__cdecl data::AttachActionToModifierMixin::getTypeName(const data::AttachActionToModifierMixin *const this)
{
  return "AttachActionToModifierMixin";
};

// Line 9576: range 00000000100D568A-00000000100D5826
int32_t __cdecl data::AttachActionToModifierMixin::getHashNum(const data::AttachActionToModifierMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachActionToModifierMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachActionToModifierMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9592: range 00000000112C3C48-00000000112C3C89
void __cdecl data::AttachActionToModifierMixinFactory::AttachActionToModifierMixinFactory(
        data::AttachActionToModifierMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachActionToModifierMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachActionToModifierMixinFactory = v2;
};

// Line 9600: range 00000000112C3F92-00000000112C3FEF
void __cdecl data::OnParentAbilityStartMixin::OnParentAbilityStartMixin(data::OnParentAbilityStartMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OnParentAbilityStartMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 9600: range 00000000112C43E4-00000000112C447A
void __cdecl data::OnParentAbilityStartMixin::OnParentAbilityStartMixin(
        data::OnParentAbilityStartMixin *const this,
        const data::OnParentAbilityStartMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OnParentAbilityStartMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &a2->action_list);
};

// Line 9607: range 00000000112FBC58-00000000112FBCB5
void __cdecl data::OnParentAbilityStartMixin::~OnParentAbilityStartMixin(data::OnParentAbilityStartMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnParentAbilityStartMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9607: range 00000000112FBCB6-00000000112FBCE0
void __cdecl data::OnParentAbilityStartMixin::~OnParentAbilityStartMixin(data::OnParentAbilityStartMixin *const this)
{
  data::OnParentAbilityStartMixin::~OnParentAbilityStartMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 9612: range 00000000100D5828-00000000100D5838
const char *__cdecl data::OnParentAbilityStartMixin::getTypeName(const data::OnParentAbilityStartMixin *const this)
{
  return "OnParentAbilityStartMixin";
};

// Line 9613: range 00000000100D583A-00000000100D59D6
int32_t __cdecl data::OnParentAbilityStartMixin::getHashNum(const data::OnParentAbilityStartMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OnParentAbilityStartMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OnParentAbilityStartMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9629: range 00000000112C4764-00000000112C47A5
void __cdecl data::OnParentAbilityStartMixinFactory::OnParentAbilityStartMixinFactory(
        data::OnParentAbilityStartMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnParentAbilityStartMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OnParentAbilityStartMixinFactory = v2;
};

// Line 9637: range 00000000112C4AAE-00000000112C4B5B
void __cdecl data::PlatformMoveMixin::PlatformMoveMixin(data::PlatformMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::PlatformMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_logic_move >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_logic_move >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_logic_move, v3, v4);
  this->is_logic_move = 0;
  std::vector<std::string>::vector(&this->move_modifiers);
  std::vector<std::string>::vector(&this->stop_modifiers);
};

// Line 9637: range 00000000112C4F80-00000000112C50C6
void __cdecl data::PlatformMoveMixin::PlatformMoveMixin(
        data::PlatformMoveMixin *const this,
        const data::PlatformMoveMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool is_logic_move; // cl
  char v6; // dl
  __int64 v7; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::PlatformMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->is_logic_move >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->is_logic_move >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->is_logic_move, v3, v4);
  is_logic_move = a2->is_logic_move;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_logic_move >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_logic_move, v3, v7);
  this->is_logic_move = is_logic_move;
  std::vector<std::string>::vector(&this->move_modifiers, &a2->move_modifiers);
  std::vector<std::string>::vector(&this->stop_modifiers, &a2->stop_modifiers);
};

// Line 9646: range 00000000112FBBBE-00000000112FBC2B
void __cdecl data::PlatformMoveMixin::~PlatformMoveMixin(data::PlatformMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlatformMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->stop_modifiers);
  std::vector<std::string>::~vector(&this->move_modifiers);
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 9646: range 00000000112FBC2C-00000000112FBC56
void __cdecl data::PlatformMoveMixin::~PlatformMoveMixin(data::PlatformMoveMixin *const this)
{
  data::PlatformMoveMixin::~PlatformMoveMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 9651: range 00000000100D59D8-00000000100D59E8
const char *__cdecl data::PlatformMoveMixin::getTypeName(const data::PlatformMoveMixin *const this)
{
  return "PlatformMoveMixin";
};

// Line 9652: range 00000000100D59EA-00000000100D5B86
int32_t __cdecl data::PlatformMoveMixin::getHashNum(const data::PlatformMoveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PlatformMoveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PlatformMoveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9668: range 00000000112C53B0-00000000112C53F1
void __cdecl data::PlatformMoveMixinFactory::PlatformMoveMixinFactory(data::PlatformMoveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PlatformMoveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PlatformMoveMixinFactory = v2;
};

// Line 9676: range 00000000112C56FA-00000000112C5747
void __cdecl data::DisableTrampolineMixin::DisableTrampolineMixin(data::DisableTrampolineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DisableTrampolineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9676: range 00000000112C5C48-00000000112C5CA0
void __cdecl data::DisableTrampolineMixin::DisableTrampolineMixin(
        data::DisableTrampolineMixin *const this,
        const data::DisableTrampolineMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DisableTrampolineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9682: range 00000000112FBB92-00000000112FBBBC
void __cdecl data::DisableTrampolineMixin::~DisableTrampolineMixin(data::DisableTrampolineMixin *const this)
{
  data::DisableTrampolineMixin::~DisableTrampolineMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 9682: range 00000000112FBB44-00000000112FBB91
void __cdecl data::DisableTrampolineMixin::~DisableTrampolineMixin(data::DisableTrampolineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableTrampolineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9687: range 00000000100D5B88-00000000100D5B98
const char *__cdecl data::DisableTrampolineMixin::getTypeName(const data::DisableTrampolineMixin *const this)
{
  return "DisableTrampolineMixin";
};

// Line 9688: range 00000000100D5B9A-00000000100D5D36
int32_t __cdecl data::DisableTrampolineMixin::getHashNum(const data::DisableTrampolineMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DisableTrampolineMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DisableTrampolineMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9704: range 00000000112C5EEA-00000000112C5F2B
void __cdecl data::DisableTrampolineMixinFactory::DisableTrampolineMixinFactory(
        data::DisableTrampolineMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableTrampolineMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DisableTrampolineMixinFactory = v2;
};

// Line 9729: range 00000000112C6394-00000000112C642F
void __cdecl data::UIInteractMixin::UIInteractMixin(data::UIInteractMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::UIInteractMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->ui_message_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->ui_message_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->ui_message_id, v1);
  }
  this->ui_message_id = None_52;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 9729: range 00000000112C6834-00000000112C693F
void __cdecl data::UIInteractMixin::UIInteractMixin(data::UIInteractMixin *const this, const data::UIInteractMixin *a2)
{
  int (**v2)(...); // rdx
  data::UIInteractMesaage ui_message_id; // ecx
  char v4; // al
  const data::UIInteractMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::UIInteractMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->ui_message_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->ui_message_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->ui_message_id);
  }
  ui_message_id = a2->ui_message_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->ui_message_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->ui_message_id, a2);
  }
  this->ui_message_id = ui_message_id;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &v5->action_list);
};

// Line 9737: range 00000000112FBABA-00000000112FBB17
void __cdecl data::UIInteractMixin::~UIInteractMixin(data::UIInteractMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UIInteractMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9737: range 00000000112FBB18-00000000112FBB42
void __cdecl data::UIInteractMixin::~UIInteractMixin(data::UIInteractMixin *const this)
{
  data::UIInteractMixin::~UIInteractMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 9742: range 00000000100D5D38-00000000100D5D48
const char *__cdecl data::UIInteractMixin::getTypeName(const data::UIInteractMixin *const this)
{
  return "UIInteractMixin";
};

// Line 9743: range 00000000100D5D4A-00000000100D5EE6
int32_t __cdecl data::UIInteractMixin::getHashNum(const data::UIInteractMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::UIInteractMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "UIInteractMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9759: range 00000000112C6C28-00000000112C6C69
void __cdecl data::UIInteractMixinFactory::UIInteractMixinFactory(data::UIInteractMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::UIInteractMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_UIInteractMixinFactory = v2;
};

// Line 9767: range 00000000112C6F72-00000000112C70D7
void __cdecl data::ShootFromCameraMixin::ShootFromCameraMixin(data::ShootFromCameraMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ShootFromCameraMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->ui_message_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->ui_message_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->ui_message_id, v1);
  }
  this->ui_message_id = None_52;
  data::Vector::Vector(&this->offset_from_camera);
  std::string::basic_string(&this->gv_bullet_init_pos);
  std::string::basic_string(&this->gv_bullet_forward);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
  if ( *(_BYTE *)(((unsigned __int64)&this->aim_angel_threshoold >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->aim_angel_threshoold >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->aim_angel_threshoold, v1);
  }
  this->aim_angel_threshoold = 90.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->ray_max_distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ray_max_distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->ray_max_distance, (((_BYTE)this - 108) & 7u) + 3);
  }
  this->ray_max_distance = 1000.0;
};

// Line 9767: range 00000000112C7494-00000000112C7809
void __cdecl data::ShootFromCameraMixin::ShootFromCameraMixin(
        data::ShootFromCameraMixin *const this,
        const data::ShootFromCameraMixin *a2)
{
  int (**v2)(...); // rdx
  data::UIInteractMesaage ui_message_id; // ecx
  char v4; // al
  __int64 v5; // rdx
  float aim_angel_threshoold; // xmm0_4
  float ray_max_distance; // xmm0_4
  const data::ShootFromCameraMixin *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ShootFromCameraMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->ui_message_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->ui_message_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->ui_message_id);
  }
  ui_message_id = a2->ui_message_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->ui_message_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->ui_message_id, a2);
  }
  this->ui_message_id = ui_message_id;
  if ( (((unsigned __int8)this + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&this->offset_from_camera >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->offset_from_camera >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->offset_from_camera.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 51) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->offset_from_camera.is_json_loaded + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->offset_from_camera, 16LL);
  }
  if ( (((unsigned __int8)v8 + 36) & 7) >= *(_BYTE *)(((unsigned __int64)&v8->offset_from_camera >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&v8->offset_from_camera >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&v8->offset_from_camera.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)v8 + 51) & 7) >= *(_BYTE *)(((unsigned __int64)(&v8->offset_from_camera.is_json_loaded + 3) >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load_n(&v8->offset_from_camera, 16LL);
  }
  v5 = *(_QWORD *)&v8->offset_from_camera.z;
  *(_QWORD *)&this->offset_from_camera.x = *(_QWORD *)&v8->offset_from_camera.x;
  *(_QWORD *)&this->offset_from_camera.z = v5;
  std::string::basic_string(&this->gv_bullet_init_pos, &v8->gv_bullet_init_pos);
  std::string::basic_string(&this->gv_bullet_forward, &v8->gv_bullet_forward);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &v8->action_list);
  if ( *(_BYTE *)(((unsigned __int64)&v8->aim_angel_threshoold >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v8->aim_angel_threshoold >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v8->aim_angel_threshoold);
  }
  aim_angel_threshoold = v8->aim_angel_threshoold;
  if ( *(_BYTE *)(((unsigned __int64)&this->aim_angel_threshoold >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->aim_angel_threshoold >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->aim_angel_threshoold, &v8->action_list);
  }
  this->aim_angel_threshoold = aim_angel_threshoold;
  if ( *(_BYTE *)(((unsigned __int64)&v8->ray_max_distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v8 - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v8->ray_max_distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v8->ray_max_distance);
  }
  ray_max_distance = v8->ray_max_distance;
  if ( *(_BYTE *)(((unsigned __int64)&this->ray_max_distance >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ray_max_distance >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->ray_max_distance, (((_BYTE)this - 108) & 7u) + 3);
  }
  this->ray_max_distance = ray_max_distance;
};

// Line 9780: range 00000000112FBA8E-00000000112FBAB8
void __cdecl data::ShootFromCameraMixin::~ShootFromCameraMixin(data::ShootFromCameraMixin *const this)
{
  data::ShootFromCameraMixin::~ShootFromCameraMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 9780: range 00000000112FBA10-00000000112FBA8D
void __cdecl data::ShootFromCameraMixin::~ShootFromCameraMixin(data::ShootFromCameraMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShootFromCameraMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  std::string::~string(&this->gv_bullet_forward);
  std::string::~string(&this->gv_bullet_init_pos);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9785: range 00000000100D5EE8-00000000100D5EF8
const char *__cdecl data::ShootFromCameraMixin::getTypeName(const data::ShootFromCameraMixin *const this)
{
  return "ShootFromCameraMixin";
};

// Line 9786: range 00000000100D5EFA-00000000100D6096
int32_t __cdecl data::ShootFromCameraMixin::getHashNum(const data::ShootFromCameraMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ShootFromCameraMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ShootFromCameraMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9802: range 00000000112C7AF2-00000000112C7B33
void __cdecl data::ShootFromCameraMixinFactory::ShootFromCameraMixinFactory(
        data::ShootFromCameraMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ShootFromCameraMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ShootFromCameraMixinFactory = v2;
};

// Line 9810: range 00000000112C7E3C-00000000112C7ED4
void __cdecl data::SetTrampolineAbilityMixin::SetTrampolineAbilityMixin(data::SetTrampolineAbilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SetTrampolineAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->ability_name);
  if ( *(char *)(((unsigned __int64)&this->is_excited_state >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_excited_state, v1, &this->is_excited_state);
  this->is_excited_state = 1;
};

// Line 9810: range 00000000112C82F0-00000000112C83FC
void __cdecl data::SetTrampolineAbilityMixin::SetTrampolineAbilityMixin(
        data::SetTrampolineAbilityMixin *const this,
        const data::SetTrampolineAbilityMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_ability_name; // rsi
  bool is_excited_state; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetTrampolineAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_ability_name = &a2->ability_name;
  std::string::basic_string(&this->ability_name, &a2->ability_name);
  if ( *(char *)(((unsigned __int64)&a2->is_excited_state >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_excited_state, p_ability_name, &a2->is_excited_state);
  is_excited_state = a2->is_excited_state;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_excited_state >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_ability_name) = v5 != 0;
    __asan_report_store1(&this->is_excited_state, p_ability_name, &this->is_excited_state);
  }
  this->is_excited_state = is_excited_state;
};

// Line 9818: range 00000000112FB9E4-00000000112FBA0E
void __cdecl data::SetTrampolineAbilityMixin::~SetTrampolineAbilityMixin(data::SetTrampolineAbilityMixin *const this)
{
  data::SetTrampolineAbilityMixin::~SetTrampolineAbilityMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 9818: range 00000000112FB986-00000000112FB9E3
void __cdecl data::SetTrampolineAbilityMixin::~SetTrampolineAbilityMixin(data::SetTrampolineAbilityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetTrampolineAbilityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->ability_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9823: range 00000000100D6098-00000000100D60A8
const char *__cdecl data::SetTrampolineAbilityMixin::getTypeName(const data::SetTrampolineAbilityMixin *const this)
{
  return "SetTrampolineAbilityMixin";
};

// Line 9824: range 00000000100D60AA-00000000100D6246
int32_t __cdecl data::SetTrampolineAbilityMixin::getHashNum(const data::SetTrampolineAbilityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetTrampolineAbilityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetTrampolineAbilityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9840: range 00000000112C86E6-00000000112C8727
void __cdecl data::SetTrampolineAbilityMixinFactory::SetTrampolineAbilityMixinFactory(
        data::SetTrampolineAbilityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetTrampolineAbilityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetTrampolineAbilityMixinFactory = v2;
};

// Line 9848: range 00000000112C8A30-00000000112C8A7D
void __cdecl data::EnableSprintInBlackMudMixin::EnableSprintInBlackMudMixin(
        data::EnableSprintInBlackMudMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EnableSprintInBlackMudMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9848: range 00000000112C8F7E-00000000112C8FD6
void __cdecl data::EnableSprintInBlackMudMixin::EnableSprintInBlackMudMixin(
        data::EnableSprintInBlackMudMixin *const this,
        const data::EnableSprintInBlackMudMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnableSprintInBlackMudMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9854: range 00000000112FB90C-00000000112FB959
void __cdecl data::EnableSprintInBlackMudMixin::~EnableSprintInBlackMudMixin(
        data::EnableSprintInBlackMudMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableSprintInBlackMudMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9854: range 00000000112FB95A-00000000112FB984
void __cdecl data::EnableSprintInBlackMudMixin::~EnableSprintInBlackMudMixin(
        data::EnableSprintInBlackMudMixin *const this)
{
  data::EnableSprintInBlackMudMixin::~EnableSprintInBlackMudMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 9859: range 00000000100D6248-00000000100D6258
const char *__cdecl data::EnableSprintInBlackMudMixin::getTypeName(const data::EnableSprintInBlackMudMixin *const this)
{
  return "EnableSprintInBlackMudMixin";
};

// Line 9860: range 00000000100D625A-00000000100D63F6
int32_t __cdecl data::EnableSprintInBlackMudMixin::getHashNum(const data::EnableSprintInBlackMudMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnableSprintInBlackMudMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnableSprintInBlackMudMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9876: range 00000000112C9220-00000000112C9261
void __cdecl data::EnableSprintInBlackMudMixinFactory::EnableSprintInBlackMudMixinFactory(
        data::EnableSprintInBlackMudMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnableSprintInBlackMudMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnableSprintInBlackMudMixinFactory = v2;
};

// Line 9884: range 00000000112C956A-00000000112C95D7
void __cdecl data::OnNotifyAttachEffectMixin::OnNotifyAttachEffectMixin(data::OnNotifyAttachEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OnNotifyAttachEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_name);
  std::string::basic_string(&this->ui_context_name);
};

// Line 9884: range 00000000112C998C-00000000112C9A52
void __cdecl data::OnNotifyAttachEffectMixin::OnNotifyAttachEffectMixin(
        data::OnNotifyAttachEffectMixin *const this,
        const data::OnNotifyAttachEffectMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OnNotifyAttachEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_name, &a2->effect_name);
  std::string::basic_string(&this->ui_context_name, &a2->ui_context_name);
};

// Line 9892: range 00000000112FB8E0-00000000112FB90A
void __cdecl data::OnNotifyAttachEffectMixin::~OnNotifyAttachEffectMixin(data::OnNotifyAttachEffectMixin *const this)
{
  data::OnNotifyAttachEffectMixin::~OnNotifyAttachEffectMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 9892: range 00000000112FB872-00000000112FB8DF
void __cdecl data::OnNotifyAttachEffectMixin::~OnNotifyAttachEffectMixin(data::OnNotifyAttachEffectMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnNotifyAttachEffectMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->ui_context_name);
  std::string::~string(&this->effect_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9897: range 00000000100D63F8-00000000100D6408
const char *__cdecl data::OnNotifyAttachEffectMixin::getTypeName(const data::OnNotifyAttachEffectMixin *const this)
{
  return "OnNotifyAttachEffectMixin";
};

// Line 9898: range 00000000100D640A-00000000100D65A6
int32_t __cdecl data::OnNotifyAttachEffectMixin::getHashNum(const data::OnNotifyAttachEffectMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OnNotifyAttachEffectMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OnNotifyAttachEffectMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9914: range 00000000112C9D3C-00000000112C9D7D
void __cdecl data::OnNotifyAttachEffectMixinFactory::OnNotifyAttachEffectMixinFactory(
        data::OnNotifyAttachEffectMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OnNotifyAttachEffectMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OnNotifyAttachEffectMixinFactory = v2;
};

// Line 9922: range 00000000112CA086-00000000112CA0F3
void __cdecl data::AttachModifierByActivityGachaStageMixin::AttachModifierByActivityGachaStageMixin(
        data::AttachModifierByActivityGachaStageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByActivityGachaStageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->stage_ids);
  std::vector<std::string>::vector(&this->modifier_name_steps);
};

// Line 9922: range 00000000112CA518-00000000112CA5DE
void __cdecl data::AttachModifierByActivityGachaStageMixin::AttachModifierByActivityGachaStageMixin(
        data::AttachModifierByActivityGachaStageMixin *const this,
        const data::AttachModifierByActivityGachaStageMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByActivityGachaStageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->stage_ids, &a2->stage_ids);
  std::vector<std::string>::vector(&this->modifier_name_steps, &a2->modifier_name_steps);
};

// Line 9930: range 00000000112FB846-00000000112FB870
void __cdecl data::AttachModifierByActivityGachaStageMixin::~AttachModifierByActivityGachaStageMixin(
        data::AttachModifierByActivityGachaStageMixin *const this)
{
  data::AttachModifierByActivityGachaStageMixin::~AttachModifierByActivityGachaStageMixin(this);
  operator delete(this, 0x50uLL);
};

// Line 9930: range 00000000112FB7D8-00000000112FB845
void __cdecl data::AttachModifierByActivityGachaStageMixin::~AttachModifierByActivityGachaStageMixin(
        data::AttachModifierByActivityGachaStageMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByActivityGachaStageMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->modifier_name_steps);
  std::vector<unsigned int>::~vector(&this->stage_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9935: range 00000000100D65A8-00000000100D65B8
const char *__cdecl data::AttachModifierByActivityGachaStageMixin::getTypeName(
        const data::AttachModifierByActivityGachaStageMixin *const this)
{
  return "AttachModifierByActivityGachaStageMixin";
};

// Line 9936: range 00000000100D65BA-00000000100D6756
int32_t __cdecl data::AttachModifierByActivityGachaStageMixin::getHashNum(
        const data::AttachModifierByActivityGachaStageMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttachModifierByActivityGachaStageMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttachModifierByActivityGachaStageMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9952: range 00000000112CA8C8-00000000112CA909
void __cdecl data::AttachModifierByActivityGachaStageMixinFactory::AttachModifierByActivityGachaStageMixinFactory(
        data::AttachModifierByActivityGachaStageMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttachModifierByActivityGachaStageMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttachModifierByActivityGachaStageMixinFactory = v2;
};

// Line 9960: range 00000000112CAC12-00000000112CAC6F
void __cdecl data::AddAvatarInCDMixin::AddAvatarInCDMixin(data::AddAvatarInCDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AddAvatarInCDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->increased_duration);
};

// Line 9960: range 00000000112CB074-00000000112CB10A
void __cdecl data::AddAvatarInCDMixin::AddAvatarInCDMixin(
        data::AddAvatarInCDMixin *const this,
        const data::AddAvatarInCDMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AddAvatarInCDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->increased_duration, &a2->increased_duration);
};

// Line 9967: range 00000000112FB7AC-00000000112FB7D6
void __cdecl data::AddAvatarInCDMixin::~AddAvatarInCDMixin(data::AddAvatarInCDMixin *const this)
{
  data::AddAvatarInCDMixin::~AddAvatarInCDMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 9967: range 00000000112FB74E-00000000112FB7AB
void __cdecl data::AddAvatarInCDMixin::~AddAvatarInCDMixin(data::AddAvatarInCDMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddAvatarInCDMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::~DynamicFloat(&this->increased_duration);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 9972: range 00000000100D6758-00000000100D6768
const char *__cdecl data::AddAvatarInCDMixin::getTypeName(const data::AddAvatarInCDMixin *const this)
{
  return "AddAvatarInCDMixin";
};

// Line 9973: range 00000000100D676A-00000000100D6906
int32_t __cdecl data::AddAvatarInCDMixin::getHashNum(const data::AddAvatarInCDMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AddAvatarInCDMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AddAvatarInCDMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 9989: range 00000000112CB3F4-00000000112CB435
void __cdecl data::AddAvatarInCDMixinFactory::AddAvatarInCDMixinFactory(data::AddAvatarInCDMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AddAvatarInCDMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AddAvatarInCDMixinFactory = v2;
};

// Line 9997: range 00000000112CB73E-00000000112CB78B
void __cdecl data::GrapplingHookPointMixin::GrapplingHookPointMixin(data::GrapplingHookPointMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookPointMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 9997: range 00000000112CBC8C-00000000112CBCE4
void __cdecl data::GrapplingHookPointMixin::GrapplingHookPointMixin(
        data::GrapplingHookPointMixin *const this,
        const data::GrapplingHookPointMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookPointMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10003: range 00000000112FB722-00000000112FB74C
void __cdecl data::GrapplingHookPointMixin::~GrapplingHookPointMixin(data::GrapplingHookPointMixin *const this)
{
  data::GrapplingHookPointMixin::~GrapplingHookPointMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 10003: range 00000000112FB6D4-00000000112FB721
void __cdecl data::GrapplingHookPointMixin::~GrapplingHookPointMixin(data::GrapplingHookPointMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookPointMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10008: range 00000000100D6908-00000000100D6918
const char *__cdecl data::GrapplingHookPointMixin::getTypeName(const data::GrapplingHookPointMixin *const this)
{
  return "GrapplingHookPointMixin";
};

// Line 10009: range 00000000100D691A-00000000100D6AB6
int32_t __cdecl data::GrapplingHookPointMixin::getHashNum(const data::GrapplingHookPointMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::GrapplingHookPointMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "GrapplingHookPointMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10025: range 00000000112CBF2E-00000000112CBF6F
void __cdecl data::GrapplingHookPointMixinFactory::GrapplingHookPointMixinFactory(
        data::GrapplingHookPointMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::GrapplingHookPointMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_GrapplingHookPointMixinFactory = v2;
};

// Line 10033: range 00000000112CC278-00000000112CC2ED
void __cdecl data::GrapplingHookUIConfig::GrapplingHookUIConfig(data::GrapplingHookUIConfig *const this)
{
  __int64 v1; // rsi

  std::string::basic_string(this);
  std::string::basic_string(&this->selected_icon);
  std::string::basic_string(&this->unselectable_icon);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 10033: range 0000000010489214-000000001048931D
void __cdecl data::GrapplingHookUIConfig::GrapplingHookUIConfig(
        data::GrapplingHookUIConfig *const this,
        const data::GrapplingHookUIConfig *a2)
{
  std::string *p_unselectable_icon; // rsi
  bool is_json_loaded; // cl
  char v4; // al

  std::string::basic_string(this, a2);
  std::string::basic_string(&this->selected_icon, &a2->selected_icon);
  p_unselectable_icon = &a2->unselectable_icon;
  std::string::basic_string(&this->unselectable_icon, p_unselectable_icon);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_unselectable_icon, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_unselectable_icon) = v4 != 0;
    __asan_report_store1(&this->is_json_loaded, p_unselectable_icon, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 10033: range 000000001048931E-0000000010489358
void __cdecl data::GrapplingHookUIConfig::~GrapplingHookUIConfig(data::GrapplingHookUIConfig *const this)
{
  std::string::~string(&this->unselectable_icon);
  std::string::~string(&this->selected_icon);
  std::string::~string(this);
};

// Line 10058: range 00000000112CC2EE-00000000112CC581
void __cdecl data::CheckGrapplingHookConfig::CheckGrapplingHookConfig(data::CheckGrapplingHookConfig *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, v1);
  }
  this->gadget_state = 0;
  v2 = (((_BYTE)this + 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->hook_area_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->hook_area_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->hook_area_radius, v2);
  }
  this->hook_area_radius = 45.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_dist_to_avatar >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_dist_to_avatar >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_dist_to_avatar, v2);
  }
  this->min_dist_to_avatar = 1.0;
  v3 = (((_BYTE)this + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_dist_to_avatar >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_dist_to_avatar >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_dist_to_avatar, v3);
  }
  this->max_dist_to_avatar = 40.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_x >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_x >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->screen_ellipse_ratio_x, v3);
  }
  this->screen_ellipse_ratio_x = 0.60000002;
  v4 = (((_BYTE)this + 20) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_y >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->screen_ellipse_ratio_y, v4);
  }
  this->screen_ellipse_ratio_y = 0.60000002;
  if ( *(_BYTE *)(((unsigned __int64)&this->xweight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->xweight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->xweight, v4);
  }
  this->xweight = 1.0;
  v5 = (((_BYTE)this + 28) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->yweight >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->yweight >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->yweight, v5);
  }
  this->yweight = 1.0;
  data::GrapplingHookUIConfig::GrapplingHookUIConfig(&this->ui);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v5, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 10058: range 000000001048935A-00000000104897FA
void __cdecl data::CheckGrapplingHookConfig::CheckGrapplingHookConfig(
        data::CheckGrapplingHookConfig *const this,
        const data::CheckGrapplingHookConfig *a2)
{
  uint32_t gadget_state; // ecx
  char v3; // al
  float hook_area_radius; // xmm0_4
  __int64 v5; // rsi
  float min_dist_to_avatar; // xmm0_4
  float max_dist_to_avatar; // xmm0_4
  __int64 v8; // rsi
  float screen_ellipse_ratio_x; // xmm0_4
  float screen_ellipse_ratio_y; // xmm0_4
  __int64 v11; // rsi
  float xweight; // xmm0_4
  float yweight; // xmm0_4
  data::GrapplingHookUIConfig *p_ui; // rsi
  bool is_json_loaded; // cl
  char v16; // al
  const data::CheckGrapplingHookConfig *v17; // [rsp+0h] [rbp-10h]

  v17 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  gadget_state = a2->gadget_state;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->gadget_state = gadget_state;
  if ( *(_BYTE *)(((unsigned __int64)&v17->hook_area_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v17 + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v17->hook_area_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v17->hook_area_radius);
  }
  hook_area_radius = v17->hook_area_radius;
  v5 = (((_BYTE)this + 4) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->hook_area_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 4) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->hook_area_radius >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->hook_area_radius, v5);
  }
  this->hook_area_radius = hook_area_radius;
  if ( *(_BYTE *)(((unsigned __int64)&v17->min_dist_to_avatar >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v17->min_dist_to_avatar >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v17->min_dist_to_avatar);
  }
  min_dist_to_avatar = v17->min_dist_to_avatar;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_dist_to_avatar >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->min_dist_to_avatar >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->min_dist_to_avatar, v5);
  }
  this->min_dist_to_avatar = min_dist_to_avatar;
  if ( *(_BYTE *)(((unsigned __int64)&v17->max_dist_to_avatar >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v17 + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v17->max_dist_to_avatar >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v17->max_dist_to_avatar);
  }
  max_dist_to_avatar = v17->max_dist_to_avatar;
  v8 = (((_BYTE)this + 12) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_dist_to_avatar >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 12) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_dist_to_avatar >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_dist_to_avatar, v8);
  }
  this->max_dist_to_avatar = max_dist_to_avatar;
  if ( *(_BYTE *)(((unsigned __int64)&v17->screen_ellipse_ratio_x >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v17->screen_ellipse_ratio_x >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v17->screen_ellipse_ratio_x);
  }
  screen_ellipse_ratio_x = v17->screen_ellipse_ratio_x;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_x >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_x >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->screen_ellipse_ratio_x, v8);
  }
  this->screen_ellipse_ratio_x = screen_ellipse_ratio_x;
  if ( *(_BYTE *)(((unsigned __int64)&v17->screen_ellipse_ratio_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v17 + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v17->screen_ellipse_ratio_y >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&v17->screen_ellipse_ratio_y);
  }
  screen_ellipse_ratio_y = v17->screen_ellipse_ratio_y;
  v11 = (((_BYTE)this + 20) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_y >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 20) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->screen_ellipse_ratio_y >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->screen_ellipse_ratio_y, v11);
  }
  this->screen_ellipse_ratio_y = screen_ellipse_ratio_y;
  if ( *(_BYTE *)(((unsigned __int64)&v17->xweight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v17->xweight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v17->xweight);
  }
  xweight = v17->xweight;
  if ( *(_BYTE *)(((unsigned __int64)&this->xweight >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->xweight >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->xweight, v11);
  }
  this->xweight = xweight;
  if ( *(_BYTE *)(((unsigned __int64)&v17->yweight >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v17 + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v17->yweight >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v17->yweight);
  }
  yweight = v17->yweight;
  if ( *(_BYTE *)(((unsigned __int64)&this->yweight >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 28) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->yweight >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->yweight, (((_BYTE)this + 28) & 7u) + 3);
  }
  this->yweight = yweight;
  p_ui = &v17->ui;
  data::GrapplingHookUIConfig::GrapplingHookUIConfig(&this->ui, &v17->ui);
  if ( *(char *)(((unsigned __int64)&v17->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v17->is_json_loaded, p_ui, &v17->is_json_loaded);
  is_json_loaded = v17->is_json_loaded;
  v16 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v16 < 0 )
  {
    LOBYTE(p_ui) = v16 != 0;
    __asan_report_store1(&this->is_json_loaded, p_ui, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 10058: range 00000000104897FC-000000001048981A
void __cdecl data::CheckGrapplingHookConfig::~CheckGrapplingHookConfig(data::CheckGrapplingHookConfig *const this)
{
  data::GrapplingHookUIConfig::~GrapplingHookUIConfig(&this->ui);
};

// Line 10089: range 00000000112CC582-00000000112CC60F
void __cdecl data::CheckGrapplingHookMixin::CheckGrapplingHookMixin(data::CheckGrapplingHookMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::CheckGrapplingHookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_enter_hook_area);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_exit_hook_area);
  std::string::basic_string(&this->activate_skill_key);
  data::CheckGrapplingHookConfig::CheckGrapplingHookConfig(&this->check_params);
};

// Line 10089: range 00000000112CC9C4-00000000112CCAEA
void __cdecl data::CheckGrapplingHookMixin::CheckGrapplingHookMixin(
        data::CheckGrapplingHookMixin *const this,
        const data::CheckGrapplingHookMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::CheckGrapplingHookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_enter_hook_area, &a2->on_enter_hook_area);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_exit_hook_area, &a2->on_exit_hook_area);
  std::string::basic_string(&this->activate_skill_key, &a2->activate_skill_key);
  data::CheckGrapplingHookConfig::CheckGrapplingHookConfig(&this->check_params, &a2->check_params);
};

// Line 10099: range 00000000112FB61A-00000000112FB6A7
void __cdecl data::CheckGrapplingHookMixin::~CheckGrapplingHookMixin(data::CheckGrapplingHookMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CheckGrapplingHookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::CheckGrapplingHookConfig::~CheckGrapplingHookConfig(&this->check_params);
  std::string::~string(&this->activate_skill_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_exit_hook_area);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_enter_hook_area);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10099: range 00000000112FB6A8-00000000112FB6D2
void __cdecl data::CheckGrapplingHookMixin::~CheckGrapplingHookMixin(data::CheckGrapplingHookMixin *const this)
{
  data::CheckGrapplingHookMixin::~CheckGrapplingHookMixin(this);
  operator delete(this, 0x100uLL);
};

// Line 10104: range 00000000100D6AB8-00000000100D6AC8
const char *__cdecl data::CheckGrapplingHookMixin::getTypeName(const data::CheckGrapplingHookMixin *const this)
{
  return "CheckGrapplingHookMixin";
};

// Line 10105: range 00000000100D6ACA-00000000100D6C66
int32_t __cdecl data::CheckGrapplingHookMixin::getHashNum(const data::CheckGrapplingHookMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::CheckGrapplingHookMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "CheckGrapplingHookMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10121: range 00000000112CCDD4-00000000112CCE15
void __cdecl data::CheckGrapplingHookMixinFactory::CheckGrapplingHookMixinFactory(
        data::CheckGrapplingHookMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::CheckGrapplingHookMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_CheckGrapplingHookMixinFactory = v2;
};

// Line 10129: range 00000000112CD11E-00000000112CD1B9
void __cdecl data::VehicleSkillDepotChangeMixin::VehicleSkillDepotChangeMixin(
        data::VehicleSkillDepotChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::VehicleSkillDepotChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::vector(&this->target_vehicle_ids);
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_depot_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_depot_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_depot_id, v1);
  }
  this->skill_depot_id = 0;
};

// Line 10129: range 00000000112CD5BE-00000000112CD6C9
void __cdecl data::VehicleSkillDepotChangeMixin::VehicleSkillDepotChangeMixin(
        data::VehicleSkillDepotChangeMixin *const this,
        const data::VehicleSkillDepotChangeMixin *a2)
{
  int (**v2)(...); // rdx
  data::UInt32Array *p_target_vehicle_ids; // rsi
  uint32_t skill_depot_id; // ecx
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::VehicleSkillDepotChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_target_vehicle_ids = &a2->target_vehicle_ids;
  std::vector<unsigned int>::vector(&this->target_vehicle_ids, &a2->target_vehicle_ids);
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_depot_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_depot_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_depot_id);
  }
  skill_depot_id = a2->skill_depot_id;
  v5 = *(_BYTE *)(((unsigned __int64)&this->skill_depot_id >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_target_vehicle_ids) = v5 != 0;
    __asan_report_store4(&this->skill_depot_id, p_target_vehicle_ids);
  }
  this->skill_depot_id = skill_depot_id;
};

// Line 10137: range 00000000112FB590-00000000112FB5ED
void __cdecl data::VehicleSkillDepotChangeMixin::~VehicleSkillDepotChangeMixin(
        data::VehicleSkillDepotChangeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::VehicleSkillDepotChangeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<unsigned int>::~vector(&this->target_vehicle_ids);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10137: range 00000000112FB5EE-00000000112FB618
void __cdecl data::VehicleSkillDepotChangeMixin::~VehicleSkillDepotChangeMixin(
        data::VehicleSkillDepotChangeMixin *const this)
{
  data::VehicleSkillDepotChangeMixin::~VehicleSkillDepotChangeMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 10142: range 00000000100D6C68-00000000100D6C78
const char *__cdecl data::VehicleSkillDepotChangeMixin::getTypeName(
        const data::VehicleSkillDepotChangeMixin *const this)
{
  return "VehicleSkillDepotChangeMixin";
};

// Line 10143: range 00000000100D6C7A-00000000100D6E16
int32_t __cdecl data::VehicleSkillDepotChangeMixin::getHashNum(const data::VehicleSkillDepotChangeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::VehicleSkillDepotChangeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "VehicleSkillDepotChangeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10159: range 00000000112CD9B2-00000000112CD9F3
void __cdecl data::VehicleSkillDepotChangeMixinFactory::VehicleSkillDepotChangeMixinFactory(
        data::VehicleSkillDepotChangeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::VehicleSkillDepotChangeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_VehicleSkillDepotChangeMixinFactory = v2;
};

// Line 10167: range 00000000112CDCFC-00000000112CDD79
void __cdecl data::ThrowGrapplingHookMixin::ThrowGrapplingHookMixin(data::ThrowGrapplingHookMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ThrowGrapplingHookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern);
  std::string::basic_string(&this->position_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hook_reached);
};

// Line 10167: range 00000000112CE12E-00000000112CE224
void __cdecl data::ThrowGrapplingHookMixin::ThrowGrapplingHookMixin(
        data::ThrowGrapplingHookMixin *const this,
        const data::ThrowGrapplingHookMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ThrowGrapplingHookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
  std::string::basic_string(&this->position_key, &a2->position_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hook_reached, &a2->on_hook_reached);
};

// Line 10176: range 00000000112FB564-00000000112FB58E
void __cdecl data::ThrowGrapplingHookMixin::~ThrowGrapplingHookMixin(data::ThrowGrapplingHookMixin *const this)
{
  data::ThrowGrapplingHookMixin::~ThrowGrapplingHookMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 10176: range 00000000112FB4E6-00000000112FB563
void __cdecl data::ThrowGrapplingHookMixin::~ThrowGrapplingHookMixin(data::ThrowGrapplingHookMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ThrowGrapplingHookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_hook_reached);
  std::string::~string(&this->position_key);
  std::string::~string(&this->effect_pattern);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10181: range 00000000100D6E18-00000000100D6E28
const char *__cdecl data::ThrowGrapplingHookMixin::getTypeName(const data::ThrowGrapplingHookMixin *const this)
{
  return "ThrowGrapplingHookMixin";
};

// Line 10182: range 00000000100D6E2A-00000000100D6FC6
int32_t __cdecl data::ThrowGrapplingHookMixin::getHashNum(const data::ThrowGrapplingHookMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ThrowGrapplingHookMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ThrowGrapplingHookMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10198: range 00000000112CE50E-00000000112CE54F
void __cdecl data::ThrowGrapplingHookMixinFactory::ThrowGrapplingHookMixinFactory(
        data::ThrowGrapplingHookMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ThrowGrapplingHookMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ThrowGrapplingHookMixinFactory = v2;
};

// Line 10206: range 00000000112CE858-00000000112CEC64
void __cdecl data::EnterSceneLookMixin::EnterSceneLookMixin(data::EnterSceneLookMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rsi
  __int64 v7; // rsi
  __int64 v8; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EnterSceneLookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->look_at_tag);
  data::Vector::Vector(&this->follow_offset);
  if ( *(_BYTE *)(((unsigned __int64)&this->fov >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->fov >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->fov, v1);
  }
  this->fov = 0.0;
  data::Vector::Vector(&this->tracked_object_offset);
  v3 = (((_BYTE)this + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->lookahead_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lookahead_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->lookahead_time, v3);
  }
  this->lookahead_time = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->lookahead_smoothing >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lookahead_smoothing >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lookahead_smoothing, v3);
  }
  this->lookahead_smoothing = 0.0;
  v4 = (((_BYTE)this + 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->horizontal_damping >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->horizontal_damping >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->horizontal_damping, v4);
  }
  this->horizontal_damping = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->vertical_damping >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->vertical_damping >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->vertical_damping, v4);
  }
  this->vertical_damping = 0.0;
  v5 = (((_BYTE)this + 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->screen_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->screen_x, v5);
  }
  this->screen_x = 0.5;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->screen_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->screen_y, v5);
  }
  this->screen_y = 0.5;
  v6 = (((_BYTE)this + 124) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->dead_zone_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dead_zone_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->dead_zone_width, v6);
  }
  this->dead_zone_width = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->dead_zone_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dead_zone_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dead_zone_height, v6);
  }
  this->dead_zone_height = 0.0;
  v7 = (((_BYTE)this - 124) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->soft_zone_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->soft_zone_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->soft_zone_width, v7);
  }
  this->soft_zone_width = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->soft_zone_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->soft_zone_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->soft_zone_height, v7);
  }
  this->soft_zone_height = 0.0;
  v8 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->bias_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->bias_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->bias_x, v8);
  }
  this->bias_x = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->bias_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->bias_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->bias_y, v8);
  }
  this->bias_y = 0.0;
};

// Line 10206: range 00000000112CF022-00000000112CF8B8
void __cdecl data::EnterSceneLookMixin::EnterSceneLookMixin(
        data::EnterSceneLookMixin *const this,
        const data::EnterSceneLookMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rdx
  float fov; // xmm0_4
  __int64 v5; // rdx
  float lookahead_time; // xmm0_4
  __int64 v7; // rsi
  float lookahead_smoothing; // xmm0_4
  float horizontal_damping; // xmm0_4
  __int64 v10; // rsi
  float vertical_damping; // xmm0_4
  float screen_x; // xmm0_4
  __int64 v13; // rsi
  float screen_y; // xmm0_4
  float dead_zone_width; // xmm0_4
  __int64 v16; // rsi
  float dead_zone_height; // xmm0_4
  float soft_zone_width; // xmm0_4
  __int64 v19; // rsi
  float soft_zone_height; // xmm0_4
  float bias_x; // xmm0_4
  __int64 v22; // rsi
  float bias_y; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EnterSceneLookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->look_at_tag, &a2->look_at_tag);
  if ( *(_WORD *)(((unsigned __int64)&this->follow_offset >> 3) + 0x7FFF8000) )
    __asan_report_store16();
  if ( *(_WORD *)(((unsigned __int64)&a2->follow_offset >> 3) + 0x7FFF8000) )
    __asan_report_load16(&a2->follow_offset);
  v3 = *(_QWORD *)&a2->follow_offset.z;
  *(_QWORD *)&this->follow_offset.x = *(_QWORD *)&a2->follow_offset.x;
  *(_QWORD *)&this->follow_offset.z = v3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->fov >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->fov >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->fov);
  }
  fov = a2->fov;
  if ( *(_BYTE *)(((unsigned __int64)&this->fov >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->fov >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->fov, &a2->look_at_tag);
  }
  this->fov = fov;
  if ( (((unsigned __int8)this + 84) & 7) >= *(_BYTE *)(((unsigned __int64)&this->tracked_object_offset >> 3)
                                                      + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->tracked_object_offset >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->tracked_object_offset.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 99) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->tracked_object_offset.is_json_loaded
                                                                          + 3) >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->tracked_object_offset, 16LL);
  }
  if ( (((unsigned __int8)a2 + 84) & 7) >= *(_BYTE *)(((unsigned __int64)&a2->tracked_object_offset >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&a2->tracked_object_offset >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&a2->tracked_object_offset.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 + 99) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->tracked_object_offset.is_json_loaded + 3) >> 3)
                                                    + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->tracked_object_offset, 16LL);
  }
  v5 = *(_QWORD *)&a2->tracked_object_offset.z;
  *(_QWORD *)&this->tracked_object_offset.x = *(_QWORD *)&a2->tracked_object_offset.x;
  *(_QWORD *)&this->tracked_object_offset.z = v5;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lookahead_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->lookahead_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->lookahead_time);
  }
  lookahead_time = a2->lookahead_time;
  v7 = (((_BYTE)this + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->lookahead_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->lookahead_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->lookahead_time, v7);
  }
  this->lookahead_time = lookahead_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->lookahead_smoothing >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->lookahead_smoothing >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->lookahead_smoothing);
  }
  lookahead_smoothing = a2->lookahead_smoothing;
  if ( *(_BYTE *)(((unsigned __int64)&this->lookahead_smoothing >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->lookahead_smoothing >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->lookahead_smoothing, v7);
  }
  this->lookahead_smoothing = lookahead_smoothing;
  if ( *(_BYTE *)(((unsigned __int64)&a2->horizontal_damping >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->horizontal_damping >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->horizontal_damping);
  }
  horizontal_damping = a2->horizontal_damping;
  v10 = (((_BYTE)this + 108) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->horizontal_damping >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 108) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->horizontal_damping >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->horizontal_damping, v10);
  }
  this->horizontal_damping = horizontal_damping;
  if ( *(_BYTE *)(((unsigned __int64)&a2->vertical_damping >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->vertical_damping >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->vertical_damping);
  }
  vertical_damping = a2->vertical_damping;
  if ( *(_BYTE *)(((unsigned __int64)&this->vertical_damping >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->vertical_damping >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->vertical_damping, v10);
  }
  this->vertical_damping = vertical_damping;
  if ( *(_BYTE *)(((unsigned __int64)&a2->screen_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->screen_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->screen_x);
  }
  screen_x = a2->screen_x;
  v13 = (((_BYTE)this + 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->screen_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->screen_x, v13);
  }
  this->screen_x = screen_x;
  if ( *(_BYTE *)(((unsigned __int64)&a2->screen_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->screen_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->screen_y);
  }
  screen_y = a2->screen_y;
  if ( *(_BYTE *)(((unsigned __int64)&this->screen_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->screen_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->screen_y, v13);
  }
  this->screen_y = screen_y;
  if ( *(_BYTE *)(((unsigned __int64)&a2->dead_zone_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->dead_zone_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->dead_zone_width);
  }
  dead_zone_width = a2->dead_zone_width;
  v16 = (((_BYTE)this + 124) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->dead_zone_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->dead_zone_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->dead_zone_width, v16);
  }
  this->dead_zone_width = dead_zone_width;
  if ( *(_BYTE *)(((unsigned __int64)&a2->dead_zone_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->dead_zone_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->dead_zone_height);
  }
  dead_zone_height = a2->dead_zone_height;
  if ( *(_BYTE *)(((unsigned __int64)&this->dead_zone_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->dead_zone_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->dead_zone_height, v16);
  }
  this->dead_zone_height = dead_zone_height;
  if ( *(_BYTE *)(((unsigned __int64)&a2->soft_zone_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->soft_zone_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->soft_zone_width);
  }
  soft_zone_width = a2->soft_zone_width;
  v19 = (((_BYTE)this - 124) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->soft_zone_width >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->soft_zone_width >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->soft_zone_width, v19);
  }
  this->soft_zone_width = soft_zone_width;
  if ( *(_BYTE *)(((unsigned __int64)&a2->soft_zone_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->soft_zone_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->soft_zone_height);
  }
  soft_zone_height = a2->soft_zone_height;
  if ( *(_BYTE *)(((unsigned __int64)&this->soft_zone_height >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->soft_zone_height >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->soft_zone_height, v19);
  }
  this->soft_zone_height = soft_zone_height;
  if ( *(_BYTE *)(((unsigned __int64)&a2->bias_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->bias_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->bias_x);
  }
  bias_x = a2->bias_x;
  v22 = (((_BYTE)this - 116) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->bias_x >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 116) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->bias_x >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->bias_x, v22);
  }
  this->bias_x = bias_x;
  if ( *(_BYTE *)(((unsigned __int64)&a2->bias_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->bias_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->bias_y);
  }
  bias_y = a2->bias_y;
  if ( *(_BYTE *)(((unsigned __int64)&this->bias_y >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->bias_y >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->bias_y, v22);
  }
  this->bias_y = bias_y;
};

// Line 10228: range 00000000112FB45C-00000000112FB4B9
void __cdecl data::EnterSceneLookMixin::~EnterSceneLookMixin(data::EnterSceneLookMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnterSceneLookMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->look_at_tag);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10228: range 00000000112FB4BA-00000000112FB4E4
void __cdecl data::EnterSceneLookMixin::~EnterSceneLookMixin(data::EnterSceneLookMixin *const this)
{
  data::EnterSceneLookMixin::~EnterSceneLookMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 10233: range 00000000100D6FC8-00000000100D6FD8
const char *__cdecl data::EnterSceneLookMixin::getTypeName(const data::EnterSceneLookMixin *const this)
{
  return "EnterSceneLookMixin";
};

// Line 10234: range 00000000100D6FDA-00000000100D7176
int32_t __cdecl data::EnterSceneLookMixin::getHashNum(const data::EnterSceneLookMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EnterSceneLookMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EnterSceneLookMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10250: range 00000000112CFBA2-00000000112CFBE3
void __cdecl data::EnterSceneLookMixinFactory::EnterSceneLookMixinFactory(data::EnterSceneLookMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EnterSceneLookMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EnterSceneLookMixinFactory = v2;
};

// Line 10258: range 00000000112CFEEC-00000000112CFF79
void __cdecl data::TransparentSourceMixin::TransparentSourceMixin(data::TransparentSourceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TransparentSourceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->radius, v1);
  }
  this->radius = 0.0;
};

// Line 10258: range 00000000112D034E-00000000112D041E
void __cdecl data::TransparentSourceMixin::TransparentSourceMixin(
        data::TransparentSourceMixin *const this,
        const data::TransparentSourceMixin *a2)
{
  int (**v2)(...); // rdx
  float radius; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TransparentSourceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->radius);
  }
  radius = a2->radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->radius, a2);
  }
  this->radius = radius;
};

// Line 10265: range 00000000112FB3E2-00000000112FB42F
void __cdecl data::TransparentSourceMixin::~TransparentSourceMixin(data::TransparentSourceMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TransparentSourceMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10265: range 00000000112FB430-00000000112FB45A
void __cdecl data::TransparentSourceMixin::~TransparentSourceMixin(data::TransparentSourceMixin *const this)
{
  data::TransparentSourceMixin::~TransparentSourceMixin(this);
  operator delete(this, 0x28uLL);
};

// Line 10270: range 00000000100D7178-00000000100D7188
const char *__cdecl data::TransparentSourceMixin::getTypeName(const data::TransparentSourceMixin *const this)
{
  return "TransparentSourceMixin";
};

// Line 10271: range 00000000100D718A-00000000100D7326
int32_t __cdecl data::TransparentSourceMixin::getHashNum(const data::TransparentSourceMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TransparentSourceMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TransparentSourceMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10287: range 00000000112D0668-00000000112D06A9
void __cdecl data::TransparentSourceMixinFactory::TransparentSourceMixinFactory(
        data::TransparentSourceMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TransparentSourceMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TransparentSourceMixinFactory = v2;
};

// Line 10295: range 00000000112D09B2-00000000112D0A0F
void __cdecl data::SectorCityManeuverMixin::SectorCityManeuverMixin(data::SectorCityManeuverMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuverMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attach_point_name);
};

// Line 10295: range 00000000112D0E14-00000000112D0EAA
void __cdecl data::SectorCityManeuverMixin::SectorCityManeuverMixin(
        data::SectorCityManeuverMixin *const this,
        const data::SectorCityManeuverMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuverMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->attach_point_name, &a2->attach_point_name);
};

// Line 10302: range 00000000112FB3B6-00000000112FB3E0
void __cdecl data::SectorCityManeuverMixin::~SectorCityManeuverMixin(data::SectorCityManeuverMixin *const this)
{
  data::SectorCityManeuverMixin::~SectorCityManeuverMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 10302: range 00000000112FB358-00000000112FB3B5
void __cdecl data::SectorCityManeuverMixin::~SectorCityManeuverMixin(data::SectorCityManeuverMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuverMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attach_point_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10307: range 00000000100D7328-00000000100D7338
const char *__cdecl data::SectorCityManeuverMixin::getTypeName(const data::SectorCityManeuverMixin *const this)
{
  return "SectorCityManeuverMixin";
};

// Line 10308: range 00000000100D733A-00000000100D74D6
int32_t __cdecl data::SectorCityManeuverMixin::getHashNum(const data::SectorCityManeuverMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SectorCityManeuverMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SectorCityManeuverMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10324: range 00000000112D1194-00000000112D11D5
void __cdecl data::SectorCityManeuverMixinFactory::SectorCityManeuverMixinFactory(
        data::SectorCityManeuverMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SectorCityManeuverMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SectorCityManeuverMixinFactory = v2;
};

// Line 10332: range 00000000112D14DE-00000000112D15C1
void __cdecl data::TriggerWidgetMusicGameMixin::TriggerWidgetMusicGameMixin(
        data::TriggerWidgetMusicGameMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TriggerWidgetMusicGameMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->music_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->music_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->music_id, v1);
  }
  this->music_id = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->range, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->range = 0.0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_success);
};

// Line 10332: range 00000000112D19C6-00000000112D1B59
void __cdecl data::TriggerWidgetMusicGameMixin::TriggerWidgetMusicGameMixin(
        data::TriggerWidgetMusicGameMixin *const this,
        const data::TriggerWidgetMusicGameMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t music_id; // ecx
  char v4; // al
  float range; // xmm0_4
  const data::TriggerWidgetMusicGameMixin *v6; // [rsp+0h] [rbp-20h]

  v6 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TriggerWidgetMusicGameMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->music_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->music_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->music_id);
  }
  music_id = a2->music_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->music_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->music_id, a2);
  }
  this->music_id = music_id;
  if ( *(_BYTE *)(((unsigned __int64)&v6->range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v6 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v6->range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v6->range);
  }
  range = v6->range;
  if ( *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->range, (((_BYTE)this + 36) & 7u) + 3);
  }
  this->range = range;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_success, &v6->on_success);
};

// Line 10341: range 00000000112FB32C-00000000112FB356
void __cdecl data::TriggerWidgetMusicGameMixin::~TriggerWidgetMusicGameMixin(
        data::TriggerWidgetMusicGameMixin *const this)
{
  data::TriggerWidgetMusicGameMixin::~TriggerWidgetMusicGameMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 10341: range 00000000112FB2CE-00000000112FB32B
void __cdecl data::TriggerWidgetMusicGameMixin::~TriggerWidgetMusicGameMixin(
        data::TriggerWidgetMusicGameMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerWidgetMusicGameMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_success);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10346: range 00000000100D74D8-00000000100D74E8
const char *__cdecl data::TriggerWidgetMusicGameMixin::getTypeName(const data::TriggerWidgetMusicGameMixin *const this)
{
  return "TriggerWidgetMusicGameMixin";
};

// Line 10347: range 00000000100D74EA-00000000100D7686
int32_t __cdecl data::TriggerWidgetMusicGameMixin::getHashNum(const data::TriggerWidgetMusicGameMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TriggerWidgetMusicGameMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TriggerWidgetMusicGameMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10363: range 00000000112D1E42-00000000112D1E83
void __cdecl data::TriggerWidgetMusicGameMixinFactory::TriggerWidgetMusicGameMixinFactory(
        data::TriggerWidgetMusicGameMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TriggerWidgetMusicGameMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TriggerWidgetMusicGameMixinFactory = v2;
};

// Line 10371: range 00000000112D218C-00000000112D2227
void __cdecl data::AvatarCountsMixin::AvatarCountsMixin(data::AvatarCountsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AvatarCountsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->alive_avatar_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->alive_avatar_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->alive_avatar_count, v1);
  }
  this->alive_avatar_count = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 10371: range 00000000112D262C-00000000112D2737
void __cdecl data::AvatarCountsMixin::AvatarCountsMixin(
        data::AvatarCountsMixin *const this,
        const data::AvatarCountsMixin *a2)
{
  int (**v2)(...); // rdx
  int32_t alive_avatar_count; // ecx
  char v4; // al
  const data::AvatarCountsMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AvatarCountsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->alive_avatar_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->alive_avatar_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->alive_avatar_count);
  }
  alive_avatar_count = a2->alive_avatar_count;
  v4 = *(_BYTE *)(((unsigned __int64)&this->alive_avatar_count >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->alive_avatar_count, a2);
  }
  this->alive_avatar_count = alive_avatar_count;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &v5->action_list);
};

// Line 10379: range 00000000112FB2A2-00000000112FB2CC
void __cdecl data::AvatarCountsMixin::~AvatarCountsMixin(data::AvatarCountsMixin *const this)
{
  data::AvatarCountsMixin::~AvatarCountsMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 10379: range 00000000112FB244-00000000112FB2A1
void __cdecl data::AvatarCountsMixin::~AvatarCountsMixin(data::AvatarCountsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarCountsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10384: range 00000000100D7688-00000000100D7698
const char *__cdecl data::AvatarCountsMixin::getTypeName(const data::AvatarCountsMixin *const this)
{
  return "AvatarCountsMixin";
};

// Line 10385: range 00000000100D769A-00000000100D7836
int32_t __cdecl data::AvatarCountsMixin::getHashNum(const data::AvatarCountsMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AvatarCountsMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AvatarCountsMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10401: range 00000000112D2A20-00000000112D2A61
void __cdecl data::AvatarCountsMixinFactory::AvatarCountsMixinFactory(data::AvatarCountsMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AvatarCountsMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AvatarCountsMixinFactory = v2;
};

// Line 10409: range 00000000112D2D6A-00000000112D2E05
void __cdecl data::MultiAvatarCountsMixin::MultiAvatarCountsMixin(data::MultiAvatarCountsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MultiAvatarCountsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->alive_avatar_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->alive_avatar_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->alive_avatar_count, v1);
  }
  this->alive_avatar_count = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list);
};

// Line 10409: range 00000000112D320A-00000000112D3315
void __cdecl data::MultiAvatarCountsMixin::MultiAvatarCountsMixin(
        data::MultiAvatarCountsMixin *const this,
        const data::MultiAvatarCountsMixin *a2)
{
  int (**v2)(...); // rdx
  int32_t alive_avatar_count; // ecx
  char v4; // al
  const data::MultiAvatarCountsMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MultiAvatarCountsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->alive_avatar_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->alive_avatar_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->alive_avatar_count);
  }
  alive_avatar_count = a2->alive_avatar_count;
  v4 = *(_BYTE *)(((unsigned __int64)&this->alive_avatar_count >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->alive_avatar_count, a2);
  }
  this->alive_avatar_count = alive_avatar_count;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_list, &v5->action_list);
};

// Line 10417: range 00000000112FB218-00000000112FB242
void __cdecl data::MultiAvatarCountsMixin::~MultiAvatarCountsMixin(data::MultiAvatarCountsMixin *const this)
{
  data::MultiAvatarCountsMixin::~MultiAvatarCountsMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 10417: range 00000000112FB1BA-00000000112FB217
void __cdecl data::MultiAvatarCountsMixin::~MultiAvatarCountsMixin(data::MultiAvatarCountsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MultiAvatarCountsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10422: range 00000000100D7838-00000000100D7848
const char *__cdecl data::MultiAvatarCountsMixin::getTypeName(const data::MultiAvatarCountsMixin *const this)
{
  return "MultiAvatarCountsMixin";
};

// Line 10423: range 00000000100D784A-00000000100D79E6
int32_t __cdecl data::MultiAvatarCountsMixin::getHashNum(const data::MultiAvatarCountsMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MultiAvatarCountsMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MultiAvatarCountsMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10439: range 00000000112D35FE-00000000112D363F
void __cdecl data::MultiAvatarCountsMixinFactory::MultiAvatarCountsMixinFactory(
        data::MultiAvatarCountsMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MultiAvatarCountsMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MultiAvatarCountsMixinFactory = v2;
};

// Line 10447: range 00000000112D3948-00000000112D3995
void __cdecl data::DeathZoneRegionalPlayMixin::DeathZoneRegionalPlayMixin(data::DeathZoneRegionalPlayMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DeathZoneRegionalPlayMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10447: range 00000000112D3E96-00000000112D3EEE
void __cdecl data::DeathZoneRegionalPlayMixin::DeathZoneRegionalPlayMixin(
        data::DeathZoneRegionalPlayMixin *const this,
        const data::DeathZoneRegionalPlayMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DeathZoneRegionalPlayMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10453: range 00000000112FB140-00000000112FB18D
void __cdecl data::DeathZoneRegionalPlayMixin::~DeathZoneRegionalPlayMixin(
        data::DeathZoneRegionalPlayMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeathZoneRegionalPlayMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10453: range 00000000112FB18E-00000000112FB1B8
void __cdecl data::DeathZoneRegionalPlayMixin::~DeathZoneRegionalPlayMixin(
        data::DeathZoneRegionalPlayMixin *const this)
{
  data::DeathZoneRegionalPlayMixin::~DeathZoneRegionalPlayMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 10458: range 00000000100D79E8-00000000100D79F8
const char *__cdecl data::DeathZoneRegionalPlayMixin::getTypeName(const data::DeathZoneRegionalPlayMixin *const this)
{
  return "DeathZoneRegionalPlayMixin";
};

// Line 10459: range 00000000100D79FA-00000000100D7B96
int32_t __cdecl data::DeathZoneRegionalPlayMixin::getHashNum(const data::DeathZoneRegionalPlayMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DeathZoneRegionalPlayMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DeathZoneRegionalPlayMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10475: range 00000000112D4138-00000000112D4179
void __cdecl data::DeathZoneRegionalPlayMixinFactory::DeathZoneRegionalPlayMixinFactory(
        data::DeathZoneRegionalPlayMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeathZoneRegionalPlayMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DeathZoneRegionalPlayMixinFactory = v2;
};

// Line 10483: range 00000000112D4482-00000000112D453F
void __cdecl data::DamageStatisticsMixin::DamageStatisticsMixin(data::DamageStatisticsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::DamageStatisticsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_min_damage >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_min_damage >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_min_damage, v3, v4);
  this->is_min_damage = 0;
  std::string::basic_string(&this->damage_element_type_key);
  std::string::basic_string(&this->damage_amount_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_exit_actions);
};

// Line 10483: range 00000000112D48F4-00000000112D4A6A
void __cdecl data::DamageStatisticsMixin::DamageStatisticsMixin(
        data::DamageStatisticsMixin *const this,
        const data::DamageStatisticsMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool is_min_damage; // cl
  char v6; // dl
  __int64 v7; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::DamageStatisticsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->is_min_damage >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->is_min_damage >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->is_min_damage, v3, v4);
  is_min_damage = a2->is_min_damage;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_min_damage >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->is_min_damage, v3, v7);
  this->is_min_damage = is_min_damage;
  std::string::basic_string(&this->damage_element_type_key, &a2->damage_element_type_key);
  std::string::basic_string(&this->damage_amount_key, &a2->damage_amount_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_exit_actions, &a2->on_exit_actions);
};

// Line 10493: range 00000000112FB096-00000000112FB113
void __cdecl data::DamageStatisticsMixin::~DamageStatisticsMixin(data::DamageStatisticsMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DamageStatisticsMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_exit_actions);
  std::string::~string(&this->damage_amount_key);
  std::string::~string(&this->damage_element_type_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 10493: range 00000000112FB114-00000000112FB13E
void __cdecl data::DamageStatisticsMixin::~DamageStatisticsMixin(data::DamageStatisticsMixin *const this)
{
  data::DamageStatisticsMixin::~DamageStatisticsMixin(this);
  operator delete(this, 0x78uLL);
};

// Line 10498: range 00000000100D7B98-00000000100D7BA8
const char *__cdecl data::DamageStatisticsMixin::getTypeName(const data::DamageStatisticsMixin *const this)
{
  return "DamageStatisticsMixin";
};

// Line 10499: range 00000000100D7BAA-00000000100D7D46
int32_t __cdecl data::DamageStatisticsMixin::getHashNum(const data::DamageStatisticsMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DamageStatisticsMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DamageStatisticsMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10515: range 00000000112D4D54-00000000112D4D95
void __cdecl data::DamageStatisticsMixinFactory::DamageStatisticsMixinFactory(
        data::DamageStatisticsMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DamageStatisticsMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DamageStatisticsMixinFactory = v2;
};

// Line 10523: range 00000000112D509E-00000000112D50FB
void __cdecl data::DeathZoneMixin::DeathZoneMixin(data::DeathZoneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DeathZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->disactive_halo_trigger);
};

// Line 10523: range 00000000112D54F0-00000000112D5586
void __cdecl data::DeathZoneMixin::DeathZoneMixin(data::DeathZoneMixin *const this, const data::DeathZoneMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DeathZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->disactive_halo_trigger,
    &a2->disactive_halo_trigger);
};

// Line 10530: range 00000000112FB06A-00000000112FB094
void __cdecl data::DeathZoneMixin::~DeathZoneMixin(data::DeathZoneMixin *const this)
{
  data::DeathZoneMixin::~DeathZoneMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 10530: range 00000000112FB00C-00000000112FB069
void __cdecl data::DeathZoneMixin::~DeathZoneMixin(data::DeathZoneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeathZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->disactive_halo_trigger);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10535: range 00000000100D7D48-00000000100D7D58
const char *__cdecl data::DeathZoneMixin::getTypeName(const data::DeathZoneMixin *const this)
{
  return "DeathZoneMixin";
};

// Line 10536: range 00000000100D7D5A-00000000100D7EF6
int32_t __cdecl data::DeathZoneMixin::getHashNum(const data::DeathZoneMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DeathZoneMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DeathZoneMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10552: range 00000000112D5870-00000000112D58B1
void __cdecl data::DeathZoneMixinFactory::DeathZoneMixinFactory(data::DeathZoneMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DeathZoneMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DeathZoneMixinFactory = v2;
};

// Line 10560: range 00000000112D5BBA-00000000112D5E0F
void __cdecl data::TumbleweedMoveMixin::TumbleweedMoveMixin(data::TumbleweedMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::TumbleweedMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, v1);
  }
  this->interval = 0.0;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->attenuation, v3);
  }
  this->attenuation = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->tend_to_born_pos_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->tend_to_born_pos_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->tend_to_born_pos_radius, v3);
  }
  this->tend_to_born_pos_radius = 0.0;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_to_born_pos_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->move_to_born_pos_radius >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->move_to_born_pos_radius, v4);
  }
  this->move_to_born_pos_radius = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->delay, v4);
  }
  this->delay = 0.0;
  v5 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->downward_acc_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->downward_acc_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->downward_acc_time, v5);
  }
  this->downward_acc_time = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->downward_acc >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->downward_acc >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->downward_acc, v5);
  }
  this->downward_acc = 0.0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_direction_changed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_start_move);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stop_move);
};

// Line 10560: range 00000000112D61CA-00000000112D6638
void __cdecl data::TumbleweedMoveMixin::TumbleweedMoveMixin(
        data::TumbleweedMoveMixin *const this,
        const data::TumbleweedMoveMixin *a2)
{
  int (**v2)(...); // rdx
  float interval; // xmm0_4
  float attenuation; // xmm0_4
  __int64 v5; // rsi
  float tend_to_born_pos_radius; // xmm0_4
  float move_to_born_pos_radius; // xmm0_4
  __int64 v8; // rsi
  float delay; // xmm0_4
  float downward_acc_time; // xmm0_4
  __int64 v11; // rsi
  float downward_acc; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::TumbleweedMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->interval);
  }
  interval = a2->interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, a2);
  }
  this->interval = interval;
  if ( *(_BYTE *)(((unsigned __int64)&a2->attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->attenuation >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->attenuation);
  }
  attenuation = a2->attenuation;
  v5 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->attenuation >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->attenuation, v5);
  }
  this->attenuation = attenuation;
  if ( *(_BYTE *)(((unsigned __int64)&a2->tend_to_born_pos_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->tend_to_born_pos_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->tend_to_born_pos_radius);
  }
  tend_to_born_pos_radius = a2->tend_to_born_pos_radius;
  if ( *(_BYTE *)(((unsigned __int64)&this->tend_to_born_pos_radius >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->tend_to_born_pos_radius >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->tend_to_born_pos_radius, v5);
  }
  this->tend_to_born_pos_radius = tend_to_born_pos_radius;
  if ( *(_BYTE *)(((unsigned __int64)&a2->move_to_born_pos_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->move_to_born_pos_radius >> 3)
                                                      + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->move_to_born_pos_radius);
  }
  move_to_born_pos_radius = a2->move_to_born_pos_radius;
  v8 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->move_to_born_pos_radius >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->move_to_born_pos_radius >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->move_to_born_pos_radius, v8);
  }
  this->move_to_born_pos_radius = move_to_born_pos_radius;
  if ( *(_BYTE *)(((unsigned __int64)&a2->delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->delay);
  }
  delay = a2->delay;
  if ( *(_BYTE *)(((unsigned __int64)&this->delay >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->delay >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->delay, v8);
  }
  this->delay = delay;
  if ( *(_BYTE *)(((unsigned __int64)&a2->downward_acc_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->downward_acc_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->downward_acc_time);
  }
  downward_acc_time = a2->downward_acc_time;
  v11 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->downward_acc_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->downward_acc_time >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->downward_acc_time, v11);
  }
  this->downward_acc_time = downward_acc_time;
  if ( *(_BYTE *)(((unsigned __int64)&a2->downward_acc >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->downward_acc >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->downward_acc);
  }
  downward_acc = a2->downward_acc;
  if ( *(_BYTE *)(((unsigned __int64)&this->downward_acc >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->downward_acc >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->downward_acc, v11);
  }
  this->downward_acc = downward_acc;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_direction_changed,
    &a2->on_direction_changed);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_start_move, &a2->on_start_move);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stop_move, &a2->on_stop_move);
};

// Line 10576: range 00000000112FAFE0-00000000112FB00A
void __cdecl data::TumbleweedMoveMixin::~TumbleweedMoveMixin(data::TumbleweedMoveMixin *const this)
{
  data::TumbleweedMoveMixin::~TumbleweedMoveMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 10576: range 00000000112FAF62-00000000112FAFDF
void __cdecl data::TumbleweedMoveMixin::~TumbleweedMoveMixin(data::TumbleweedMoveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TumbleweedMoveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_stop_move);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_start_move);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_direction_changed);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10581: range 00000000100D7EF8-00000000100D7F08
const char *__cdecl data::TumbleweedMoveMixin::getTypeName(const data::TumbleweedMoveMixin *const this)
{
  return "TumbleweedMoveMixin";
};

// Line 10582: range 00000000100D7F0A-00000000100D80A6
int32_t __cdecl data::TumbleweedMoveMixin::getHashNum(const data::TumbleweedMoveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::TumbleweedMoveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "TumbleweedMoveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10598: range 00000000112D6922-00000000112D6963
void __cdecl data::TumbleweedMoveMixinFactory::TumbleweedMoveMixinFactory(data::TumbleweedMoveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::TumbleweedMoveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_TumbleweedMoveMixinFactory = v2;
};

// Line 10606: range 00000000112D6C6C-00000000112D6CD9
void __cdecl data::BroadcastGVMixin::BroadcastGVMixin(data::BroadcastGVMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BroadcastGVMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->sgv_idkey);
  std::string::basic_string(&this->broadcast_gvkey);
};

// Line 10606: range 00000000112D708E-00000000112D7154
void __cdecl data::BroadcastGVMixin::BroadcastGVMixin(
        data::BroadcastGVMixin *const this,
        const data::BroadcastGVMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BroadcastGVMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->sgv_idkey, &a2->sgv_idkey);
  std::string::basic_string(&this->broadcast_gvkey, &a2->broadcast_gvkey);
};

// Line 10614: range 00000000112FAEC8-00000000112FAF35
void __cdecl data::BroadcastGVMixin::~BroadcastGVMixin(data::BroadcastGVMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BroadcastGVMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->broadcast_gvkey);
  std::string::~string(&this->sgv_idkey);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10614: range 00000000112FAF36-00000000112FAF60
void __cdecl data::BroadcastGVMixin::~BroadcastGVMixin(data::BroadcastGVMixin *const this)
{
  data::BroadcastGVMixin::~BroadcastGVMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 10619: range 00000000100D80A8-00000000100D80B8
const char *__cdecl data::BroadcastGVMixin::getTypeName(const data::BroadcastGVMixin *const this)
{
  return "BroadcastGVMixin";
};

// Line 10620: range 00000000100D80BA-00000000100D8256
int32_t __cdecl data::BroadcastGVMixin::getHashNum(const data::BroadcastGVMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BroadcastGVMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BroadcastGVMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10636: range 00000000112D743E-00000000112D747F
void __cdecl data::BroadcastGVMixinFactory::BroadcastGVMixinFactory(data::BroadcastGVMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BroadcastGVMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BroadcastGVMixinFactory = v2;
};

// Line 10644: range 00000000112D7788-00000000112D7805
void __cdecl data::ReceiveGVMixin::ReceiveGVMixin(data::ReceiveGVMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ReceiveGVMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->sgv_idkey);
  std::string::basic_string(&this->broadcast_gvkey);
  std::string::basic_string(&this->gv_key);
};

// Line 10644: range 00000000112D7BBA-00000000112D7CB0
void __cdecl data::ReceiveGVMixin::ReceiveGVMixin(data::ReceiveGVMixin *const this, const data::ReceiveGVMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ReceiveGVMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->sgv_idkey, &a2->sgv_idkey);
  std::string::basic_string(&this->broadcast_gvkey, &a2->broadcast_gvkey);
  std::string::basic_string(&this->gv_key, &a2->gv_key);
};

// Line 10653: range 00000000112FAE1E-00000000112FAE9B
void __cdecl data::ReceiveGVMixin::~ReceiveGVMixin(data::ReceiveGVMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReceiveGVMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->gv_key);
  std::string::~string(&this->broadcast_gvkey);
  std::string::~string(&this->sgv_idkey);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10653: range 00000000112FAE9C-00000000112FAEC6
void __cdecl data::ReceiveGVMixin::~ReceiveGVMixin(data::ReceiveGVMixin *const this)
{
  data::ReceiveGVMixin::~ReceiveGVMixin(this);
  operator delete(this, 0x80uLL);
};

// Line 10658: range 00000000100D8258-00000000100D8268
const char *__cdecl data::ReceiveGVMixin::getTypeName(const data::ReceiveGVMixin *const this)
{
  return "ReceiveGVMixin";
};

// Line 10659: range 00000000100D826A-00000000100D8406
int32_t __cdecl data::ReceiveGVMixin::getHashNum(const data::ReceiveGVMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ReceiveGVMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ReceiveGVMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10675: range 00000000112D7F9A-00000000112D7FDB
void __cdecl data::ReceiveGVMixinFactory::ReceiveGVMixinFactory(data::ReceiveGVMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ReceiveGVMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ReceiveGVMixinFactory = v2;
};

// Line 10683: range 00000000112D82E4-00000000112D841A
void __cdecl data::MapGVToAnimationClipTimeMixin::MapGVToAnimationClipTimeMixin(
        data::MapGVToAnimationClipTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MapGVToAnimationClipTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->gv_key);
  if ( *(char *)(((unsigned __int64)&this->is_normalized >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_normalized, v1, &this->is_normalized);
  this->is_normalized = 1;
  v3 = ((_BYTE)this + 65) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_revert, v3, v4);
  this->is_revert = 0;
  std::vector<data::DynamicFloat>::vector(&this->normalized_range);
  if ( *(_BYTE *)(((unsigned __int64)&this->layer >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->layer >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->layer, v3);
  }
  this->layer = 0;
  std::string::basic_string(&this->state_name);
};

// Line 10683: range 00000000112D87D6-00000000112D8A37
void __cdecl data::MapGVToAnimationClipTimeMixin::MapGVToAnimationClipTimeMixin(
        data::MapGVToAnimationClipTimeMixin *const this,
        const data::MapGVToAnimationClipTimeMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_gv_key; // rsi
  bool is_normalized; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool is_revert; // cl
  char v9; // dl
  __int64 v10; // rdx
  data::DynamicFloatArray *p_normalized_range; // rsi
  int32_t layer; // ecx
  char v13; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MapGVToAnimationClipTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_gv_key = &a2->gv_key;
  std::string::basic_string(&this->gv_key, &a2->gv_key);
  if ( *(char *)(((unsigned __int64)&a2->is_normalized >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_normalized, p_gv_key, &a2->is_normalized);
  is_normalized = a2->is_normalized;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_normalized >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_gv_key) = v5 != 0;
    __asan_report_store1(&this->is_normalized, p_gv_key, &this->is_normalized);
  }
  this->is_normalized = is_normalized;
  v6 = ((_BYTE)a2 + 65) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->is_revert >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->is_revert >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->is_revert, v6, v7);
  is_revert = a2->is_revert;
  v9 = *(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 65) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->is_revert, v6, v10);
  this->is_revert = is_revert;
  p_normalized_range = &a2->normalized_range;
  std::vector<data::DynamicFloat>::vector(&this->normalized_range, &a2->normalized_range);
  if ( *(_BYTE *)(((unsigned __int64)&a2->layer >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->layer >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->layer);
  }
  layer = a2->layer;
  v13 = *(_BYTE *)(((unsigned __int64)&this->layer >> 3) + 0x7FFF8000);
  if ( v13 != 0 && v13 <= 3 )
  {
    LOBYTE(p_normalized_range) = v13 != 0;
    __asan_report_store4(&this->layer, p_normalized_range);
  }
  this->layer = layer;
  std::string::basic_string(&this->state_name, &a2->state_name);
};

// Line 10695: range 00000000112FAD74-00000000112FADF1
void __cdecl data::MapGVToAnimationClipTimeMixin::~MapGVToAnimationClipTimeMixin(
        data::MapGVToAnimationClipTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MapGVToAnimationClipTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->state_name);
  std::vector<data::DynamicFloat>::~vector(&this->normalized_range);
  std::string::~string(&this->gv_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10695: range 00000000112FADF2-00000000112FAE1C
void __cdecl data::MapGVToAnimationClipTimeMixin::~MapGVToAnimationClipTimeMixin(
        data::MapGVToAnimationClipTimeMixin *const this)
{
  data::MapGVToAnimationClipTimeMixin::~MapGVToAnimationClipTimeMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 10700: range 00000000100D8408-00000000100D8418
const char *__cdecl data::MapGVToAnimationClipTimeMixin::getTypeName(
        const data::MapGVToAnimationClipTimeMixin *const this)
{
  return "MapGVToAnimationClipTimeMixin";
};

// Line 10701: range 00000000100D841A-00000000100D85B6
int32_t __cdecl data::MapGVToAnimationClipTimeMixin::getHashNum(const data::MapGVToAnimationClipTimeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MapGVToAnimationClipTimeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MapGVToAnimationClipTimeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10717: range 00000000112D8D20-00000000112D8D61
void __cdecl data::MapGVToAnimationClipTimeMixinFactory::MapGVToAnimationClipTimeMixinFactory(
        data::MapGVToAnimationClipTimeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MapGVToAnimationClipTimeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MapGVToAnimationClipTimeMixinFactory = v2;
};

// Line 10725: range 00000000112D906A-00000000112D91FD
void __cdecl data::MapGVToEffectParticleSystemTimeMixin::MapGVToEffectParticleSystemTimeMixin(
        data::MapGVToEffectParticleSystemTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::MapGVToEffectParticleSystemTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->gv_key);
  if ( *(char *)(((unsigned __int64)&this->is_normalized >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_normalized, v1, &this->is_normalized);
  this->is_normalized = 1;
  v3 = ((_BYTE)this + 65) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_revert, v3, v4);
  this->is_revert = 0;
  std::vector<data::DynamicFloat>::vector(&this->normalized_range);
  std::string::basic_string(&this->effect_pattern_name);
  if ( *(char *)(((unsigned __int64)&this->set_animator >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->set_animator, v3, &this->set_animator);
  this->set_animator = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->animator_state_layer >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->animator_state_layer >> 3)
                                                         + 0x7FFF8000) )
  {
    __asan_report_store4(&this->animator_state_layer, (((_BYTE)this - 124) & 7u) + 3);
  }
  this->animator_state_layer = 0;
  std::string::basic_string(&this->animator_state_name);
};

// Line 10725: range 00000000112D95AC-00000000112D98D8
void __cdecl data::MapGVToEffectParticleSystemTimeMixin::MapGVToEffectParticleSystemTimeMixin(
        data::MapGVToEffectParticleSystemTimeMixin *const this,
        const data::MapGVToEffectParticleSystemTimeMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_gv_key; // rsi
  bool is_normalized; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool is_revert; // cl
  char v9; // dl
  __int64 v10; // rdx
  std::string *p_effect_pattern_name; // rsi
  bool set_animator; // cl
  char v13; // al
  __int64 v14; // rsi
  int32_t animator_state_layer; // ecx
  char v16; // dl

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::MapGVToEffectParticleSystemTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_gv_key = &a2->gv_key;
  std::string::basic_string(&this->gv_key, &a2->gv_key);
  if ( *(char *)(((unsigned __int64)&a2->is_normalized >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_normalized, p_gv_key, &a2->is_normalized);
  is_normalized = a2->is_normalized;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_normalized >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_gv_key) = v5 != 0;
    __asan_report_store1(&this->is_normalized, p_gv_key, &this->is_normalized);
  }
  this->is_normalized = is_normalized;
  v6 = ((_BYTE)a2 + 65) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->is_revert >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->is_revert >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->is_revert, v6, v7);
  is_revert = a2->is_revert;
  v9 = *(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 65) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->is_revert, v6, v10);
  this->is_revert = is_revert;
  std::vector<data::DynamicFloat>::vector(&this->normalized_range, &a2->normalized_range);
  p_effect_pattern_name = &a2->effect_pattern_name;
  std::string::basic_string(&this->effect_pattern_name, &a2->effect_pattern_name);
  if ( *(char *)(((unsigned __int64)&a2->set_animator >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->set_animator, p_effect_pattern_name, &a2->set_animator);
  set_animator = a2->set_animator;
  v13 = *(_BYTE *)(((unsigned __int64)&this->set_animator >> 3) + 0x7FFF8000);
  if ( v13 < 0 )
  {
    LOBYTE(p_effect_pattern_name) = v13 != 0;
    __asan_report_store1(&this->set_animator, p_effect_pattern_name, &this->set_animator);
  }
  this->set_animator = set_animator;
  v14 = (((_BYTE)a2 - 124) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->animator_state_layer >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->animator_state_layer >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->animator_state_layer);
  }
  animator_state_layer = a2->animator_state_layer;
  v16 = *(_BYTE *)(((unsigned __int64)&this->animator_state_layer >> 3) + 0x7FFF8000);
  if ( v16 != 0 && (char)((((_BYTE)this - 124) & 7) + 3) >= v16 )
  {
    LOBYTE(v14) = v16 != 0;
    __asan_report_store4(&this->animator_state_layer, v14);
  }
  this->animator_state_layer = animator_state_layer;
  std::string::basic_string(&this->animator_state_name, &a2->animator_state_name);
};

// Line 10739: range 00000000112FACB8-00000000112FAD47
void __cdecl data::MapGVToEffectParticleSystemTimeMixin::~MapGVToEffectParticleSystemTimeMixin(
        data::MapGVToEffectParticleSystemTimeMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MapGVToEffectParticleSystemTimeMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->animator_state_name);
  std::string::~string(&this->effect_pattern_name);
  std::vector<data::DynamicFloat>::~vector(&this->normalized_range);
  std::string::~string(&this->gv_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10739: range 00000000112FAD48-00000000112FAD72
void __cdecl data::MapGVToEffectParticleSystemTimeMixin::~MapGVToEffectParticleSystemTimeMixin(
        data::MapGVToEffectParticleSystemTimeMixin *const this)
{
  data::MapGVToEffectParticleSystemTimeMixin::~MapGVToEffectParticleSystemTimeMixin(this);
  operator delete(this, 0xA8uLL);
};

// Line 10744: range 00000000100D85B8-00000000100D85C8
const char *__cdecl data::MapGVToEffectParticleSystemTimeMixin::getTypeName(
        const data::MapGVToEffectParticleSystemTimeMixin *const this)
{
  return "MapGVToEffectParticleSystemTimeMixin";
};

// Line 10745: range 00000000100D85CA-00000000100D8766
int32_t __cdecl data::MapGVToEffectParticleSystemTimeMixin::getHashNum(
        const data::MapGVToEffectParticleSystemTimeMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::MapGVToEffectParticleSystemTimeMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "MapGVToEffectParticleSystemTimeMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10761: range 00000000112D9BC2-00000000112D9C03
void __cdecl data::MapGVToEffectParticleSystemTimeMixinFactory::MapGVToEffectParticleSystemTimeMixinFactory(
        data::MapGVToEffectParticleSystemTimeMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::MapGVToEffectParticleSystemTimeMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_MapGVToEffectParticleSystemTimeMixinFactory = v2;
};

// Line 10769: range 00000000112D9F0C-00000000112DA08D
void __cdecl data::SetGVToShaderParamMixin::SetGVToShaderParamMixin(data::SetGVToShaderParamMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SetGVToShaderParamMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->gv_key);
  if ( *(char *)(((unsigned __int64)&this->is_normalized >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_normalized, v1, &this->is_normalized);
  this->is_normalized = 1;
  v3 = ((_BYTE)this + 65) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->is_revert, v3, v4);
  this->is_revert = 0;
  std::vector<data::DynamicFloat>::vector(&this->normalized_range);
  std::string::basic_string(&this->mat_name);
  std::string::basic_string(&this->target_key);
  std::vector<std::string>::vector(&this->other_param);
  std::vector<float>::vector(&this->on_add_param_value);
  std::vector<float>::vector(&this->on_remove_param_value);
  if ( *(_BYTE *)(((unsigned __int64)&this->max_normalize >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_normalize >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_normalize, v3);
  }
  this->max_normalize = 2;
};

// Line 10769: range 00000000112DA438-00000000112DA779
void __cdecl data::SetGVToShaderParamMixin::SetGVToShaderParamMixin(
        data::SetGVToShaderParamMixin *const this,
        const data::SetGVToShaderParamMixin *a2)
{
  int (**v2)(...); // rdx
  std::string *p_gv_key; // rsi
  bool is_normalized; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool is_revert; // cl
  char v9; // dl
  __int64 v10; // rdx
  data::FloatArray *p_on_remove_param_value; // rsi
  int32_t max_normalize; // ecx
  char v13; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SetGVToShaderParamMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_gv_key = &a2->gv_key;
  std::string::basic_string(&this->gv_key, &a2->gv_key);
  if ( *(char *)(((unsigned __int64)&a2->is_normalized >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_normalized, p_gv_key, &a2->is_normalized);
  is_normalized = a2->is_normalized;
  v5 = *(_BYTE *)(((unsigned __int64)&this->is_normalized >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_gv_key) = v5 != 0;
    __asan_report_store1(&this->is_normalized, p_gv_key, &this->is_normalized);
  }
  this->is_normalized = is_normalized;
  v6 = ((_BYTE)a2 + 65) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->is_revert >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->is_revert >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->is_revert, v6, v7);
  is_revert = a2->is_revert;
  v9 = *(_BYTE *)(((unsigned __int64)&this->is_revert >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 65) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->is_revert, v6, v10);
  this->is_revert = is_revert;
  std::vector<data::DynamicFloat>::vector(&this->normalized_range, &a2->normalized_range);
  std::string::basic_string(&this->mat_name, &a2->mat_name);
  std::string::basic_string(&this->target_key, &a2->target_key);
  std::vector<std::string>::vector(&this->other_param, &a2->other_param);
  std::vector<float>::vector(&this->on_add_param_value, &a2->on_add_param_value);
  p_on_remove_param_value = &a2->on_remove_param_value;
  std::vector<float>::vector(&this->on_remove_param_value, &a2->on_remove_param_value);
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_normalize >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_normalize >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_normalize);
  }
  max_normalize = a2->max_normalize;
  v13 = *(_BYTE *)(((unsigned __int64)&this->max_normalize >> 3) + 0x7FFF8000);
  if ( v13 != 0 && v13 <= 3 )
  {
    LOBYTE(p_on_remove_param_value) = v13 != 0;
    __asan_report_store4(&this->max_normalize, p_on_remove_param_value);
  }
  this->max_normalize = max_normalize;
};

// Line 10785: range 00000000112FABC8-00000000112FAC8B
void __cdecl data::SetGVToShaderParamMixin::~SetGVToShaderParamMixin(data::SetGVToShaderParamMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGVToShaderParamMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<float>::~vector(&this->on_remove_param_value);
  std::vector<float>::~vector(&this->on_add_param_value);
  std::vector<std::string>::~vector(&this->other_param);
  std::string::~string(&this->target_key);
  std::string::~string(&this->mat_name);
  std::vector<data::DynamicFloat>::~vector(&this->normalized_range);
  std::string::~string(&this->gv_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10785: range 00000000112FAC8C-00000000112FACB6
void __cdecl data::SetGVToShaderParamMixin::~SetGVToShaderParamMixin(data::SetGVToShaderParamMixin *const this)
{
  data::SetGVToShaderParamMixin::~SetGVToShaderParamMixin(this);
  operator delete(this, 0xF0uLL);
};

// Line 10790: range 00000000100D8768-00000000100D8778
const char *__cdecl data::SetGVToShaderParamMixin::getTypeName(const data::SetGVToShaderParamMixin *const this)
{
  return "SetGVToShaderParamMixin";
};

// Line 10791: range 00000000100D877A-00000000100D8916
int32_t __cdecl data::SetGVToShaderParamMixin::getHashNum(const data::SetGVToShaderParamMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SetGVToShaderParamMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SetGVToShaderParamMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10807: range 00000000112DAA62-00000000112DAAA3
void __cdecl data::SetGVToShaderParamMixinFactory::SetGVToShaderParamMixinFactory(
        data::SetGVToShaderParamMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SetGVToShaderParamMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SetGVToShaderParamMixinFactory = v2;
};

// Line 10815: range 00000000112DADAC-00000000112DAE09
void __cdecl data::ListenWindZoneMixin::ListenWindZoneMixin(data::ListenWindZoneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ListenWindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_wind_zone);
};

// Line 10815: range 00000000112DB1FE-00000000112DB294
void __cdecl data::ListenWindZoneMixin::ListenWindZoneMixin(
        data::ListenWindZoneMixin *const this,
        const data::ListenWindZoneMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ListenWindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_wind_zone, &a2->on_wind_zone);
};

// Line 10822: range 00000000112FAB3E-00000000112FAB9B
void __cdecl data::ListenWindZoneMixin::~ListenWindZoneMixin(data::ListenWindZoneMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ListenWindZoneMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_wind_zone);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10822: range 00000000112FAB9C-00000000112FABC6
void __cdecl data::ListenWindZoneMixin::~ListenWindZoneMixin(data::ListenWindZoneMixin *const this)
{
  data::ListenWindZoneMixin::~ListenWindZoneMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 10827: range 00000000100D8918-00000000100D8928
const char *__cdecl data::ListenWindZoneMixin::getTypeName(const data::ListenWindZoneMixin *const this)
{
  return "ListenWindZoneMixin";
};

// Line 10828: range 00000000100D892A-00000000100D8AC6
int32_t __cdecl data::ListenWindZoneMixin::getHashNum(const data::ListenWindZoneMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ListenWindZoneMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ListenWindZoneMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10844: range 00000000112DB57E-00000000112DB5BF
void __cdecl data::ListenWindZoneMixinFactory::ListenWindZoneMixinFactory(data::ListenWindZoneMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ListenWindZoneMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ListenWindZoneMixinFactory = v2;
};

// Line 10852: range 00000000112DB8C8-00000000112DB925
void __cdecl data::ListenFallOnGroundMixin::ListenFallOnGroundMixin(data::ListenFallOnGroundMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ListenFallOnGroundMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_ground);
};

// Line 10852: range 00000000112DBD1A-00000000112DBDB0
void __cdecl data::ListenFallOnGroundMixin::ListenFallOnGroundMixin(
        data::ListenFallOnGroundMixin *const this,
        const data::ListenFallOnGroundMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ListenFallOnGroundMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_ground, &a2->on_ground);
};

// Line 10859: range 00000000112FAAB4-00000000112FAB11
void __cdecl data::ListenFallOnGroundMixin::~ListenFallOnGroundMixin(data::ListenFallOnGroundMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ListenFallOnGroundMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_ground);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10859: range 00000000112FAB12-00000000112FAB3C
void __cdecl data::ListenFallOnGroundMixin::~ListenFallOnGroundMixin(data::ListenFallOnGroundMixin *const this)
{
  data::ListenFallOnGroundMixin::~ListenFallOnGroundMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 10864: range 00000000100D8AC8-00000000100D8AD8
const char *__cdecl data::ListenFallOnGroundMixin::getTypeName(const data::ListenFallOnGroundMixin *const this)
{
  return "ListenFallOnGroundMixin";
};

// Line 10865: range 00000000100D8ADA-00000000100D8C76
int32_t __cdecl data::ListenFallOnGroundMixin::getHashNum(const data::ListenFallOnGroundMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ListenFallOnGroundMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ListenFallOnGroundMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10881: range 00000000112DC09A-00000000112DC0DB
void __cdecl data::ListenFallOnGroundMixinFactory::ListenFallOnGroundMixinFactory(
        data::ListenFallOnGroundMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ListenFallOnGroundMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ListenFallOnGroundMixinFactory = v2;
};

// Line 10889: range 00000000112DC3E4-00000000112DC4CC
void __cdecl data::ThinkIntervalMixin::ThinkIntervalMixin(data::ThinkIntervalMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ThinkIntervalMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->think_interval);
  if ( *(char *)(((unsigned __int64)&this->think_interval_ignore_time_scale >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->think_interval_ignore_time_scale, v1, &this->think_interval_ignore_time_scale);
  this->think_interval_ignore_time_scale = 0;
  v3 = ((_BYTE)this + 65) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->tick_think_interval_after_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->tick_think_interval_after_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->tick_think_interval_after_die, v3, v4);
  this->tick_think_interval_after_die = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_think_interval);
};

// Line 10889: range 00000000112DC882-00000000112DCA3E
void __cdecl data::ThinkIntervalMixin::ThinkIntervalMixin(
        data::ThinkIntervalMixin *const this,
        const data::ThinkIntervalMixin *a2)
{
  int (**v2)(...); // rdx
  data::DynamicFloat *p_think_interval; // rsi
  bool think_interval_ignore_time_scale; // cl
  char v5; // al
  __int64 v6; // rsi
  __int64 v7; // rdx
  bool tick_think_interval_after_die; // cl
  char v9; // dl
  __int64 v10; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ThinkIntervalMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  p_think_interval = &a2->think_interval;
  data::DynamicFloat::DynamicFloat(&this->think_interval, &a2->think_interval);
  if ( *(char *)(((unsigned __int64)&a2->think_interval_ignore_time_scale >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->think_interval_ignore_time_scale, p_think_interval, &a2->think_interval_ignore_time_scale);
  think_interval_ignore_time_scale = a2->think_interval_ignore_time_scale;
  v5 = *(_BYTE *)(((unsigned __int64)&this->think_interval_ignore_time_scale >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_think_interval) = v5 != 0;
    __asan_report_store1(
      &this->think_interval_ignore_time_scale,
      p_think_interval,
      &this->think_interval_ignore_time_scale);
  }
  this->think_interval_ignore_time_scale = think_interval_ignore_time_scale;
  v6 = ((_BYTE)a2 + 65) & 7;
  v7 = (*(_BYTE *)(((unsigned __int64)&a2->tick_think_interval_after_die >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v6 >= *(_BYTE *)(((unsigned __int64)&a2->tick_think_interval_after_die >> 3) + 0x7FFF8000));
  if ( (_BYTE)v7 )
    __asan_report_load1(&a2->tick_think_interval_after_die, v6, v7);
  tick_think_interval_after_die = a2->tick_think_interval_after_die;
  v9 = *(_BYTE *)(((unsigned __int64)&this->tick_think_interval_after_die >> 3) + 0x7FFF8000);
  LOBYTE(v6) = v9 != 0;
  v10 = (v9 != 0) & (unsigned __int8)((((unsigned __int8)this + 65) & 7) >= v9);
  if ( (_BYTE)v10 )
    __asan_report_store1(&this->tick_think_interval_after_die, v6, v10);
  this->tick_think_interval_after_die = tick_think_interval_after_die;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_think_interval, &a2->on_think_interval);
};

// Line 10899: range 00000000112FAA88-00000000112FAAB2
void __cdecl data::ThinkIntervalMixin::~ThinkIntervalMixin(data::ThinkIntervalMixin *const this)
{
  data::ThinkIntervalMixin::~ThinkIntervalMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 10899: range 00000000112FAA1A-00000000112FAA87
void __cdecl data::ThinkIntervalMixin::~ThinkIntervalMixin(data::ThinkIntervalMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ThinkIntervalMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_think_interval);
  data::DynamicFloat::~DynamicFloat(&this->think_interval);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10904: range 00000000100D8C78-00000000100D8C88
const char *__cdecl data::ThinkIntervalMixin::getTypeName(const data::ThinkIntervalMixin *const this)
{
  return "ThinkIntervalMixin";
};

// Line 10905: range 00000000100D8C8A-00000000100D8E26
int32_t __cdecl data::ThinkIntervalMixin::getHashNum(const data::ThinkIntervalMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ThinkIntervalMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ThinkIntervalMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10921: range 00000000112DCD28-00000000112DCD69
void __cdecl data::ThinkIntervalMixinFactory::ThinkIntervalMixinFactory(data::ThinkIntervalMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ThinkIntervalMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ThinkIntervalMixinFactory = v2;
};

// Line 10929: range 00000000112DD072-00000000112DD0BF
void __cdecl data::DisableMonsterPickedUpMixin::DisableMonsterPickedUpMixin(
        data::DisableMonsterPickedUpMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DisableMonsterPickedUpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10929: range 00000000112DD5C0-00000000112DD618
void __cdecl data::DisableMonsterPickedUpMixin::DisableMonsterPickedUpMixin(
        data::DisableMonsterPickedUpMixin *const this,
        const data::DisableMonsterPickedUpMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DisableMonsterPickedUpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 10935: range 00000000112FA9A0-00000000112FA9ED
void __cdecl data::DisableMonsterPickedUpMixin::~DisableMonsterPickedUpMixin(
        data::DisableMonsterPickedUpMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableMonsterPickedUpMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10935: range 00000000112FA9EE-00000000112FAA18
void __cdecl data::DisableMonsterPickedUpMixin::~DisableMonsterPickedUpMixin(
        data::DisableMonsterPickedUpMixin *const this)
{
  data::DisableMonsterPickedUpMixin::~DisableMonsterPickedUpMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 10940: range 00000000100D8E28-00000000100D8E38
const char *__cdecl data::DisableMonsterPickedUpMixin::getTypeName(const data::DisableMonsterPickedUpMixin *const this)
{
  return "DisableMonsterPickedUpMixin";
};

// Line 10941: range 00000000100D8E3A-00000000100D8FD6
int32_t __cdecl data::DisableMonsterPickedUpMixin::getHashNum(const data::DisableMonsterPickedUpMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DisableMonsterPickedUpMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DisableMonsterPickedUpMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10957: range 00000000112DD862-00000000112DD8A3
void __cdecl data::DisableMonsterPickedUpMixinFactory::DisableMonsterPickedUpMixinFactory(
        data::DisableMonsterPickedUpMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableMonsterPickedUpMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DisableMonsterPickedUpMixinFactory = v2;
};

// Line 10965: range 00000000112DDBAC-00000000112DDC47
void __cdecl data::SwitchSkillIconMixin::SwitchSkillIconMixin(data::SwitchSkillIconMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIconMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->skill_id, v1);
  }
  this->skill_id = 0;
  std::string::basic_string(&this->skill_icon);
};

// Line 10965: range 00000000112DE062-00000000112DE16D
void __cdecl data::SwitchSkillIconMixin::SwitchSkillIconMixin(
        data::SwitchSkillIconMixin *const this,
        const data::SwitchSkillIconMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t skill_id; // ecx
  char v4; // al
  const data::SwitchSkillIconMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIconMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->skill_id);
  }
  skill_id = a2->skill_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->skill_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->skill_id, a2);
  }
  this->skill_id = skill_id;
  std::string::basic_string(&this->skill_icon, &v5->skill_icon);
};

// Line 10973: range 00000000112FA974-00000000112FA99E
void __cdecl data::SwitchSkillIconMixin::~SwitchSkillIconMixin(data::SwitchSkillIconMixin *const this)
{
  data::SwitchSkillIconMixin::~SwitchSkillIconMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 10973: range 00000000112FA916-00000000112FA973
void __cdecl data::SwitchSkillIconMixin::~SwitchSkillIconMixin(data::SwitchSkillIconMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIconMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->skill_icon);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 10978: range 00000000100D8FD8-00000000100D8FE8
const char *__cdecl data::SwitchSkillIconMixin::getTypeName(const data::SwitchSkillIconMixin *const this)
{
  return "SwitchSkillIconMixin";
};

// Line 10979: range 00000000100D8FEA-00000000100D9186
int32_t __cdecl data::SwitchSkillIconMixin::getHashNum(const data::SwitchSkillIconMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::SwitchSkillIconMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "SwitchSkillIconMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 10995: range 00000000112DE456-00000000112DE497
void __cdecl data::SwitchSkillIconMixinFactory::SwitchSkillIconMixinFactory(
        data::SwitchSkillIconMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::SwitchSkillIconMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_SwitchSkillIconMixinFactory = v2;
};

// Line 11003: range 00000000112DE7A0-00000000112DE81D
void __cdecl data::LaserMixin::LaserMixin(data::LaserMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::LaserMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_laser_hit);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_laser_leave);
};

// Line 11003: range 00000000112DEBC8-00000000112DECBE
void __cdecl data::LaserMixin::LaserMixin(data::LaserMixin *const this, const data::LaserMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::LaserMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_laser_hit, &a2->on_laser_hit);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_laser_leave, &a2->on_laser_leave);
};

// Line 11012: range 00000000112FA86C-00000000112FA8E9
void __cdecl data::LaserMixin::~LaserMixin(data::LaserMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LaserMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_laser_leave);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_laser_hit);
  std::string::~string(&this->effect_pattern);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11012: range 00000000112FA8EA-00000000112FA914
void __cdecl data::LaserMixin::~LaserMixin(data::LaserMixin *const this)
{
  data::LaserMixin::~LaserMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 11017: range 00000000100D9188-00000000100D9198
const char *__cdecl data::LaserMixin::getTypeName(const data::LaserMixin *const this)
{
  return "LaserMixin";
};

// Line 11018: range 00000000100D919A-00000000100D9336
int32_t __cdecl data::LaserMixin::getHashNum(const data::LaserMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::LaserMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "LaserMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11034: range 00000000112DEFA8-00000000112DEFE9
void __cdecl data::LaserMixinFactory::LaserMixinFactory(data::LaserMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LaserMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_LaserMixinFactory = v2;
};

// Line 11042: range 00000000112DF2F2-00000000112DF35F
void __cdecl data::LaserReceiveMixin::LaserReceiveMixin(data::LaserReceiveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::LaserReceiveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern);
  std::string::basic_string(&this->attach_effect);
};

// Line 11042: range 00000000112DF714-00000000112DF7DA
void __cdecl data::LaserReceiveMixin::LaserReceiveMixin(
        data::LaserReceiveMixin *const this,
        const data::LaserReceiveMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::LaserReceiveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
  std::string::basic_string(&this->attach_effect, &a2->attach_effect);
};

// Line 11050: range 00000000112FA7D2-00000000112FA83F
void __cdecl data::LaserReceiveMixin::~LaserReceiveMixin(data::LaserReceiveMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LaserReceiveMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attach_effect);
  std::string::~string(&this->effect_pattern);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11050: range 00000000112FA840-00000000112FA86A
void __cdecl data::LaserReceiveMixin::~LaserReceiveMixin(data::LaserReceiveMixin *const this)
{
  data::LaserReceiveMixin::~LaserReceiveMixin(this);
  operator delete(this, 0x60uLL);
};

// Line 11055: range 00000000100D9338-00000000100D9348
const char *__cdecl data::LaserReceiveMixin::getTypeName(const data::LaserReceiveMixin *const this)
{
  return "LaserReceiveMixin";
};

// Line 11056: range 00000000100D934A-00000000100D94E6
int32_t __cdecl data::LaserReceiveMixin::getHashNum(const data::LaserReceiveMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::LaserReceiveMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "LaserReceiveMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11072: range 00000000112DFAC4-00000000112DFB05
void __cdecl data::LaserReceiveMixinFactory::LaserReceiveMixinFactory(data::LaserReceiveMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::LaserReceiveMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_LaserReceiveMixinFactory = v2;
};

// Line 11080: range 00000000112DFE0E-00000000112DFEF7
void __cdecl data::ChangeAttackModeBtnMixin::ChangeAttackModeBtnMixin(data::ChangeAttackModeBtnMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ChangeAttackModeBtnMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->trigger_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->trigger_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->trigger_id, v1);
  }
  this->trigger_id = 0;
  std::string::basic_string(&this->start_trigger_name);
  std::string::basic_string(&this->end_trigger_name);
  if ( *(_BYTE *)(((unsigned __int64)&this->visible_by_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->visible_by_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->visible_by_skill_id, v1);
  }
  this->visible_by_skill_id = 0;
};

// Line 11080: range 00000000112E02A2-00000000112E0452
void __cdecl data::ChangeAttackModeBtnMixin::ChangeAttackModeBtnMixin(
        data::ChangeAttackModeBtnMixin *const this,
        const data::ChangeAttackModeBtnMixin *a2)
{
  int (**v2)(...); // rdx
  int32_t trigger_id; // ecx
  char v4; // al
  std::string *p_end_trigger_name; // rsi
  uint32_t visible_by_skill_id; // ecx
  char v7; // al
  const data::ChangeAttackModeBtnMixin *v8; // [rsp+0h] [rbp-20h]

  v8 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ChangeAttackModeBtnMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->trigger_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->trigger_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->trigger_id);
  }
  trigger_id = a2->trigger_id;
  v4 = *(_BYTE *)(((unsigned __int64)&this->trigger_id >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->trigger_id, a2);
  }
  this->trigger_id = trigger_id;
  std::string::basic_string(&this->start_trigger_name, &v8->start_trigger_name);
  p_end_trigger_name = &v8->end_trigger_name;
  std::string::basic_string(&this->end_trigger_name, &v8->end_trigger_name);
  if ( *(_BYTE *)(((unsigned __int64)&v8->visible_by_skill_id >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v8->visible_by_skill_id >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v8->visible_by_skill_id);
  }
  visible_by_skill_id = v8->visible_by_skill_id;
  v7 = *(_BYTE *)(((unsigned __int64)&this->visible_by_skill_id >> 3) + 0x7FFF8000);
  if ( v7 != 0 && v7 <= 3 )
  {
    LOBYTE(p_end_trigger_name) = v7 != 0;
    __asan_report_store4(&this->visible_by_skill_id, p_end_trigger_name);
  }
  this->visible_by_skill_id = visible_by_skill_id;
};

// Line 11090: range 00000000112FA738-00000000112FA7A5
void __cdecl data::ChangeAttackModeBtnMixin::~ChangeAttackModeBtnMixin(data::ChangeAttackModeBtnMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeAttackModeBtnMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->end_trigger_name);
  std::string::~string(&this->start_trigger_name);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11090: range 00000000112FA7A6-00000000112FA7D0
void __cdecl data::ChangeAttackModeBtnMixin::~ChangeAttackModeBtnMixin(data::ChangeAttackModeBtnMixin *const this)
{
  data::ChangeAttackModeBtnMixin::~ChangeAttackModeBtnMixin(this);
  operator delete(this, 0x70uLL);
};

// Line 11095: range 00000000100D94E8-00000000100D94F8
const char *__cdecl data::ChangeAttackModeBtnMixin::getTypeName(const data::ChangeAttackModeBtnMixin *const this)
{
  return "ChangeAttackModeBtnMixin";
};

// Line 11096: range 00000000100D94FA-00000000100D9696
int32_t __cdecl data::ChangeAttackModeBtnMixin::getHashNum(const data::ChangeAttackModeBtnMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ChangeAttackModeBtnMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ChangeAttackModeBtnMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11112: range 00000000112E073C-00000000112E077D
void __cdecl data::ChangeAttackModeBtnMixinFactory::ChangeAttackModeBtnMixinFactory(
        data::ChangeAttackModeBtnMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ChangeAttackModeBtnMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ChangeAttackModeBtnMixinFactory = v2;
};

// Line 11120: range 00000000112E0A86-00000000112E0D2D
void __cdecl data::BreakoutMixin::BreakoutMixin(data::BreakoutMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi
  __int64 v5; // rsi
  __int64 v6; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::BreakoutMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_brick_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_brick_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_brick_count, v1);
  }
  this->max_brick_count = 100;
  v3 = (((_BYTE)this + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_ball_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_ball_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_ball_count, v3);
  }
  this->max_ball_count = 4;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_client_chase_speed_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_client_chase_speed_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_client_chase_speed_ratio, v3);
  }
  this->max_client_chase_speed_ratio = 1.5;
  v4 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->client_chase_delta_time_for_max_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->client_chase_delta_time_for_max_speed >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->client_chase_delta_time_for_max_speed, v4);
  }
  this->client_chase_delta_time_for_max_speed = 1.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->maxclient_chase_delta_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->maxclient_chase_delta_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->maxclient_chase_delta_time, v4);
  }
  this->maxclient_chase_delta_time = 1000;
  v5 = (((_BYTE)this + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->ping_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->ping_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->ping_interval, v5);
  }
  this->ping_interval = 500;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_predict_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_predict_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_predict_time, v5);
  }
  this->max_predict_time = 500;
  v6 = (((_BYTE)this + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_client_server_delta_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_client_server_delta_time >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_client_server_delta_time, v6);
  }
  this->max_client_server_delta_time = 500;
  if ( *(_BYTE *)(((unsigned __int64)&this->adjust_client_server_delta_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->adjust_client_server_delta_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->adjust_client_server_delta_time, v6);
  }
  this->adjust_client_server_delta_time = 0;
};

// Line 11120: range 00000000112E1148-00000000112E1603
void __cdecl data::BreakoutMixin::BreakoutMixin(data::BreakoutMixin *const this, const data::BreakoutMixin *a2)
{
  int (**v2)(...); // rdx
  uint32_t max_brick_count; // ecx
  char v4; // al
  __int64 v5; // rsi
  uint32_t max_ball_count; // ecx
  char v7; // dl
  float max_client_chase_speed_ratio; // xmm0_4
  float client_chase_delta_time_for_max_speed; // xmm0_4
  __int64 v10; // rsi
  uint32_t maxclient_chase_delta_time; // ecx
  char v12; // al
  __int64 v13; // rsi
  uint32_t ping_interval; // ecx
  char v15; // dl
  uint32_t max_predict_time; // ecx
  char v17; // al
  __int64 v18; // rsi
  uint32_t max_client_server_delta_time; // ecx
  char v20; // dl
  uint32_t adjust_client_server_delta_time; // ecx
  char v22; // al
  const data::BreakoutMixin *v23; // [rsp+0h] [rbp-10h]

  v23 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::BreakoutMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_brick_count >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_brick_count >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_brick_count);
  }
  max_brick_count = a2->max_brick_count;
  v4 = *(_BYTE *)(((unsigned __int64)&this->max_brick_count >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->max_brick_count, a2);
  }
  this->max_brick_count = max_brick_count;
  v5 = (((_BYTE)v23 + 36) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v23->max_ball_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v23 + 36) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v23->max_ball_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v23->max_ball_count);
  }
  max_ball_count = v23->max_ball_count;
  v7 = *(_BYTE *)(((unsigned __int64)&this->max_ball_count >> 3) + 0x7FFF8000);
  LOBYTE(v5) = v7 != 0;
  if ( v7 != 0 && (char)((((_BYTE)this + 36) & 7) + 3) >= v7 )
    __asan_report_store4(&this->max_ball_count, v5);
  this->max_ball_count = max_ball_count;
  if ( *(_BYTE *)(((unsigned __int64)&v23->max_client_chase_speed_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v23->max_client_chase_speed_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v23->max_client_chase_speed_ratio);
  }
  max_client_chase_speed_ratio = v23->max_client_chase_speed_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_client_chase_speed_ratio >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_client_chase_speed_ratio >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_client_chase_speed_ratio, v5);
  }
  this->max_client_chase_speed_ratio = max_client_chase_speed_ratio;
  if ( *(_BYTE *)(((unsigned __int64)&v23->client_chase_delta_time_for_max_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v23 + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v23->client_chase_delta_time_for_max_speed >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&v23->client_chase_delta_time_for_max_speed);
  }
  client_chase_delta_time_for_max_speed = v23->client_chase_delta_time_for_max_speed;
  v10 = (((_BYTE)this + 44) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->client_chase_delta_time_for_max_speed >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 44) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->client_chase_delta_time_for_max_speed >> 3)
                                                        + 0x7FFF8000) )
  {
    __asan_report_store4(&this->client_chase_delta_time_for_max_speed, v10);
  }
  this->client_chase_delta_time_for_max_speed = client_chase_delta_time_for_max_speed;
  if ( *(_BYTE *)(((unsigned __int64)&v23->maxclient_chase_delta_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v23->maxclient_chase_delta_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v23->maxclient_chase_delta_time);
  }
  maxclient_chase_delta_time = v23->maxclient_chase_delta_time;
  v12 = *(_BYTE *)(((unsigned __int64)&this->maxclient_chase_delta_time >> 3) + 0x7FFF8000);
  if ( v12 != 0 && v12 <= 3 )
  {
    LOBYTE(v10) = v12 != 0;
    __asan_report_store4(&this->maxclient_chase_delta_time, v10);
  }
  this->maxclient_chase_delta_time = maxclient_chase_delta_time;
  v13 = (((_BYTE)v23 + 52) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v23->ping_interval >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v23 + 52) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v23->ping_interval >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&v23->ping_interval);
  }
  ping_interval = v23->ping_interval;
  v15 = *(_BYTE *)(((unsigned __int64)&this->ping_interval >> 3) + 0x7FFF8000);
  if ( v15 != 0 && (char)((((_BYTE)this + 52) & 7) + 3) >= v15 )
  {
    LOBYTE(v13) = v15 != 0;
    __asan_report_store4(&this->ping_interval, v13);
  }
  this->ping_interval = ping_interval;
  if ( *(_BYTE *)(((unsigned __int64)&v23->max_predict_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v23->max_predict_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v23->max_predict_time);
  }
  max_predict_time = v23->max_predict_time;
  v17 = *(_BYTE *)(((unsigned __int64)&this->max_predict_time >> 3) + 0x7FFF8000);
  if ( v17 != 0 && v17 <= 3 )
  {
    LOBYTE(v13) = v17 != 0;
    __asan_report_store4(&this->max_predict_time, v13);
  }
  this->max_predict_time = max_predict_time;
  v18 = (((_BYTE)v23 + 60) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&v23->max_client_server_delta_time >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)v23 + 60) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&v23->max_client_server_delta_time >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_load4(&v23->max_client_server_delta_time);
  }
  max_client_server_delta_time = v23->max_client_server_delta_time;
  v20 = *(_BYTE *)(((unsigned __int64)&this->max_client_server_delta_time >> 3) + 0x7FFF8000);
  if ( v20 != 0 && (char)((((_BYTE)this + 60) & 7) + 3) >= v20 )
  {
    LOBYTE(v18) = v20 != 0;
    __asan_report_store4(&this->max_client_server_delta_time, v18);
  }
  this->max_client_server_delta_time = max_client_server_delta_time;
  if ( *(_BYTE *)(((unsigned __int64)&v23->adjust_client_server_delta_time >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v23->adjust_client_server_delta_time >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&v23->adjust_client_server_delta_time);
  }
  adjust_client_server_delta_time = v23->adjust_client_server_delta_time;
  v22 = *(_BYTE *)(((unsigned __int64)&this->adjust_client_server_delta_time >> 3) + 0x7FFF8000);
  if ( v22 != 0 && v22 <= 3 )
  {
    LOBYTE(v18) = v22 != 0;
    __asan_report_store4(&this->adjust_client_server_delta_time, v18);
  }
  this->adjust_client_server_delta_time = adjust_client_server_delta_time;
};

// Line 11135: range 00000000112FA6BE-00000000112FA70B
void __cdecl data::BreakoutMixin::~BreakoutMixin(data::BreakoutMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BreakoutMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11135: range 00000000112FA70C-00000000112FA736
void __cdecl data::BreakoutMixin::~BreakoutMixin(data::BreakoutMixin *const this)
{
  data::BreakoutMixin::~BreakoutMixin(this);
  operator delete(this, 0x48uLL);
};

// Line 11140: range 00000000100D9698-00000000100D96A8
const char *__cdecl data::BreakoutMixin::getTypeName(const data::BreakoutMixin *const this)
{
  return "BreakoutMixin";
};

// Line 11141: range 00000000100D96AA-00000000100D9846
int32_t __cdecl data::BreakoutMixin::getHashNum(const data::BreakoutMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::BreakoutMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "BreakoutMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11157: range 00000000112E184C-00000000112E188D
void __cdecl data::BreakoutMixinFactory::BreakoutMixinFactory(data::BreakoutMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::BreakoutMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BreakoutMixinFactory = v2;
};

// Line 11165: range 00000000112E1B96-00000000112E1C23
void __cdecl data::ActivityBreakoutBossMixin::ActivityBreakoutBossMixin(data::ActivityBreakoutBossMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutBossMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->damage_key);
  std::string::basic_string(&this->state_key);
  std::string::basic_string(&this->hp_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hit);
};

// Line 11165: range 00000000112E1FE0-00000000112E2106
void __cdecl data::ActivityBreakoutBossMixin::ActivityBreakoutBossMixin(
        data::ActivityBreakoutBossMixin *const this,
        const data::ActivityBreakoutBossMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutBossMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->damage_key, &a2->damage_key);
  std::string::basic_string(&this->state_key, &a2->state_key);
  std::string::basic_string(&this->hp_key, &a2->hp_key);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hit, &a2->on_hit);
};

// Line 11175: range 00000000112FA604-00000000112FA691
void __cdecl data::ActivityBreakoutBossMixin::~ActivityBreakoutBossMixin(data::ActivityBreakoutBossMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutBossMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_hit);
  std::string::~string(&this->hp_key);
  std::string::~string(&this->state_key);
  std::string::~string(&this->damage_key);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11175: range 00000000112FA692-00000000112FA6BC
void __cdecl data::ActivityBreakoutBossMixin::~ActivityBreakoutBossMixin(data::ActivityBreakoutBossMixin *const this)
{
  data::ActivityBreakoutBossMixin::~ActivityBreakoutBossMixin(this);
  operator delete(this, 0x98uLL);
};

// Line 11180: range 00000000100D9848-00000000100D9858
const char *__cdecl data::ActivityBreakoutBossMixin::getTypeName(const data::ActivityBreakoutBossMixin *const this)
{
  return "ActivityBreakoutBossMixin";
};

// Line 11181: range 00000000100D985A-00000000100D99F6
int32_t __cdecl data::ActivityBreakoutBossMixin::getHashNum(const data::ActivityBreakoutBossMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::ActivityBreakoutBossMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "ActivityBreakoutBossMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11197: range 00000000112E23F0-00000000112E2431
void __cdecl data::ActivityBreakoutBossMixinFactory::ActivityBreakoutBossMixinFactory(
        data::ActivityBreakoutBossMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::ActivityBreakoutBossMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_ActivityBreakoutBossMixinFactory = v2;
};

// Line 11293: range 0000000010193A14-0000000010193AAC
void __cdecl data::EraseBrickActivity_CreateBrick::EraseBrickActivity_CreateBrick(
        data::EraseBrickActivity_CreateBrick *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rdx

  std::vector<data::EraseBrickActivity_Predicate>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->brick_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->brick_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->brick_type, v1);
  }
  this->brick_type = Normal_14;
  v2 = ((_BYTE)this + 28) & 7;
  v3 = (*(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store1(&this->is_json_loaded, v2, v3);
  this->is_json_loaded = 0;
};

// Line 11293: range 0000000010EB8C6E-0000000010EB8D88
void __cdecl data::EraseBrickActivity_CreateBrick::EraseBrickActivity_CreateBrick(
        data::EraseBrickActivity_CreateBrick *const this,
        const data::EraseBrickActivity_CreateBrick *a2)
{
  data::EraseBrickActivity_BrickType brick_type; // ecx
  char v3; // al
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool is_json_loaded; // cl
  char v7; // dl
  __int64 v8; // rdx
  const data::EraseBrickActivity_CreateBrick *v9; // [rsp+0h] [rbp-10h]

  v9 = a2;
  std::vector<data::EraseBrickActivity_Predicate>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&v9->brick_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v9->brick_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->brick_type);
  }
  brick_type = a2->brick_type;
  v3 = *(_BYTE *)(((unsigned __int64)&this->brick_type >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(&this->brick_type, a2);
  }
  this->brick_type = brick_type;
  v4 = ((_BYTE)v9 + 28) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&v9->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&v9->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&v9->is_json_loaded, v4, v5);
  is_json_loaded = v9->is_json_loaded;
  v7 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 28) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->is_json_loaded, v4, v8);
  this->is_json_loaded = is_json_loaded;
};

// Line 11293: range 00000000105BE5B6-00000000105BE6D0
void __cdecl data::EraseBrickActivity_CreateBrick::EraseBrickActivity_CreateBrick(
        data::EraseBrickActivity_CreateBrick *const this,
        data::EraseBrickActivity_CreateBrick *a2)
{
  data::EraseBrickActivity_BrickType brick_type; // ecx
  char v3; // al
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool is_json_loaded; // cl
  char v7; // dl
  __int64 v8; // rdx
  data::EraseBrickActivity_CreateBrick *v9; // [rsp+0h] [rbp-10h]

  v9 = a2;
  std::vector<data::EraseBrickActivity_Predicate>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&v9->brick_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&v9->brick_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->brick_type);
  }
  brick_type = a2->brick_type;
  v3 = *(_BYTE *)(((unsigned __int64)&this->brick_type >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(&this->brick_type, a2);
  }
  this->brick_type = brick_type;
  v4 = ((_BYTE)v9 + 28) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&v9->is_json_loaded >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&v9->is_json_loaded >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&v9->is_json_loaded, v4, v5);
  is_json_loaded = v9->is_json_loaded;
  v7 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 28) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->is_json_loaded, v4, v8);
  this->is_json_loaded = is_json_loaded;
};

// Line 11293: range 0000000010193AAE-0000000010193AC8
void __cdecl data::EraseBrickActivity_CreateBrick::~EraseBrickActivity_CreateBrick(
        data::EraseBrickActivity_CreateBrick *const this)
{
  std::vector<data::EraseBrickActivity_Predicate>::~vector(&this->predicates);
};

// Line 11322: range 0000000010193B1E-0000000010193BB0
void __cdecl data::EraseBrickActivity_CreateBrickRuleListItem::EraseBrickActivity_CreateBrickRuleListItem(
        data::EraseBrickActivity_CreateBrickRuleListItem *const this)
{
  __int64 v1; // rsi

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, v1);
  }
  this->index = 0;
  std::vector<data::EraseBrickActivity_CreateBrick>::vector(&this->rule);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 11322: range 0000000010EB8E08-0000000010EB8F16
void __cdecl data::EraseBrickActivity_CreateBrickRuleListItem::EraseBrickActivity_CreateBrickRuleListItem(
        data::EraseBrickActivity_CreateBrickRuleListItem *const this,
        const data::EraseBrickActivity_CreateBrickRuleListItem *a2)
{
  uint32_t index; // ecx
  char v3; // al
  data::EraseBrickActivity_CreateBrickRule *p_rule; // rsi
  bool is_json_loaded; // cl
  char v6; // al
  const data::EraseBrickActivity_CreateBrickRuleListItem *v7; // [rsp+0h] [rbp-10h]

  v7 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  index = a2->index;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->index = index;
  p_rule = &v7->rule;
  std::vector<data::EraseBrickActivity_CreateBrick>::vector(&this->rule, &v7->rule);
  if ( *(char *)(((unsigned __int64)&v7->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v7->is_json_loaded, p_rule, &v7->is_json_loaded);
  is_json_loaded = v7->is_json_loaded;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_rule) = v6 != 0;
    __asan_report_store1(&this->is_json_loaded, p_rule, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 11322: range 00000000105BEEAA-00000000105BEFB8
void __cdecl data::EraseBrickActivity_CreateBrickRuleListItem::EraseBrickActivity_CreateBrickRuleListItem(
        data::EraseBrickActivity_CreateBrickRuleListItem *const this,
        data::EraseBrickActivity_CreateBrickRuleListItem *a2)
{
  uint32_t index; // ecx
  char v3; // al
  data::EraseBrickActivity_CreateBrickRule *p_rule; // rsi
  bool is_json_loaded; // cl
  char v6; // al
  data::EraseBrickActivity_CreateBrickRuleListItem *v7; // [rsp+0h] [rbp-10h]

  v7 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  index = a2->index;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->index = index;
  p_rule = &v7->rule;
  std::vector<data::EraseBrickActivity_CreateBrick>::vector(&this->rule, &v7->rule);
  if ( *(char *)(((unsigned __int64)&v7->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v7->is_json_loaded, p_rule, &v7->is_json_loaded);
  is_json_loaded = v7->is_json_loaded;
  v6 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v6 < 0 )
  {
    LOBYTE(p_rule) = v6 != 0;
    __asan_report_store1(&this->is_json_loaded, p_rule, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 11322: range 0000000010193BB2-0000000010193BD0
void __cdecl data::EraseBrickActivity_CreateBrickRuleListItem::~EraseBrickActivity_CreateBrickRuleListItem(
        data::EraseBrickActivity_CreateBrickRuleListItem *const this)
{
  std::vector<data::EraseBrickActivity_CreateBrick>::~vector(&this->rule);
};

// Line 11400: range 00000000101947B6-0000000010194872
void __cdecl data::EraseBrickActivity_SwitchStateAction::EraseBrickActivity_SwitchStateAction(
        data::EraseBrickActivity_SwitchStateAction *const this)
{
  __int64 v1; // rsi

  std::vector<int>::vector(&this->index);
  std::vector<data::EraseBrickActivity_State>::vector(&this->from_states);
  std::vector<data::EraseBrickActivity_State>::vector(&this->to_states);
  std::vector<data::EraseBrickActivity_BrickType>::vector(&this->from_types);
  std::vector<data::EraseBrickActivity_BrickType>::vector(&this->to_types);
  std::vector<data::EraseBrickActivity_BrokenReason>::vector(&this->reasons);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v1, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 11400: range 0000000010EB8FFA-0000000010EB91D5
void __cdecl data::EraseBrickActivity_SwitchStateAction::EraseBrickActivity_SwitchStateAction(
        data::EraseBrickActivity_SwitchStateAction *const this,
        const data::EraseBrickActivity_SwitchStateAction *a2)
{
  data::ConfigAbilityActionArray *p_actions; // rsi
  bool is_json_loaded; // cl
  char v4; // al

  std::vector<int>::vector(&this->index, &a2->index);
  std::vector<data::EraseBrickActivity_State>::vector(&this->from_states, &a2->from_states);
  std::vector<data::EraseBrickActivity_State>::vector(&this->to_states, &a2->to_states);
  std::vector<data::EraseBrickActivity_BrickType>::vector(&this->from_types, &a2->from_types);
  std::vector<data::EraseBrickActivity_BrickType>::vector(&this->to_types, &a2->to_types);
  std::vector<data::EraseBrickActivity_BrokenReason>::vector(&this->reasons, &a2->reasons);
  p_actions = &a2->actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, p_actions);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_actions, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_actions) = v4 != 0;
    __asan_report_store1(&this->is_json_loaded, p_actions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 11400: range 00000000105C1648-00000000105C1794
void __cdecl data::EraseBrickActivity_SwitchStateAction::EraseBrickActivity_SwitchStateAction(
        data::EraseBrickActivity_SwitchStateAction *const this,
        data::EraseBrickActivity_SwitchStateAction *a2)
{
  std::vector<std::shared_ptr<data::ConfigAbilityAction>> *p_actions; // rsi
  bool is_json_loaded; // cl
  char v4; // al

  std::vector<int>::vector(&this->index, &a2->index);
  std::vector<data::EraseBrickActivity_State>::vector(&this->from_states, &a2->from_states);
  std::vector<data::EraseBrickActivity_State>::vector(&this->to_states, &a2->to_states);
  std::vector<data::EraseBrickActivity_BrickType>::vector(&this->from_types, &a2->from_types);
  std::vector<data::EraseBrickActivity_BrickType>::vector(&this->to_types, &a2->to_types);
  std::vector<data::EraseBrickActivity_BrokenReason>::vector(&this->reasons, &a2->reasons);
  p_actions = &a2->actions;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, p_actions);
  if ( *(char *)(((unsigned __int64)&a2->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->is_json_loaded, p_actions, &a2->is_json_loaded);
  is_json_loaded = a2->is_json_loaded;
  v4 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v4 < 0 )
  {
    LOBYTE(p_actions) = v4 != 0;
    __asan_report_store1(&this->is_json_loaded, p_actions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 11400: range 0000000010194874-00000000101948F0
void __cdecl data::EraseBrickActivity_SwitchStateAction::~EraseBrickActivity_SwitchStateAction(
        data::EraseBrickActivity_SwitchStateAction *const this)
{
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::vector<data::EraseBrickActivity_BrokenReason>::~vector(&this->reasons);
  std::vector<data::EraseBrickActivity_BrickType>::~vector(&this->to_types);
  std::vector<data::EraseBrickActivity_BrickType>::~vector(&this->from_types);
  std::vector<data::EraseBrickActivity_State>::~vector(&this->to_states);
  std::vector<data::EraseBrickActivity_State>::~vector(&this->from_states);
  std::vector<int>::~vector(&this->index);
};

// Line 11464: range 00000000112E3292-00000000112E346C
void __cdecl data::EraseBrickActivityMixin::EraseBrickActivityMixin(data::EraseBrickActivityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->explode_delay, 0.5);
  std::unordered_map<data::EraseBrickActivity_BrickType,data::DynamicFloat>::unordered_map(&this->hp_map);
  std::unordered_map<data::EraseBrickActivity_BrickType,data::DynamicFloat>::unordered_map(&this->score_map);
  std::vector<data::EraseBrickActivity_CreateBrick>::vector(&this->rule);
  std::vector<data::EraseBrickActivity_CreateBrickRuleListItem>::vector(&this->rule_steps);
  std::string::basic_string(&this->rule_step_gv_key);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_CreateBrickRuleListItem>>::unordered_map(&this->other_rule_steps);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stamina_broken);
  data::DynamicFloat::DynamicFloat(&this->stamina_buff_duration);
  data::DynamicFloat::DynamicFloat(&this->stamina_buff_ratio);
  std::vector<data::EraseBrickActivity_SwitchStateAction>::vector(&this->state_switch_actions);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(&this->state_switch_action_array);
  std::string::basic_string(&this->state_para_name);
  std::vector<data::EraseBrickActivity_StatePara>::vector(&this->state_para_values);
  std::string::basic_string(&this->hp_para_name);
  std::string::basic_string(&this->count_para_name);
  std::unordered_map<data::EraseBrickActivity_BrickType,std::string>::unordered_map(&this->type_count_para_name);
  std::vector<std::string>::vector(&this->durability_changed_gvlist);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_BrickType>>::unordered_map(&this->init_rule);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_BrickType>>::unordered_map(&this->clear_rule);
};

// Line 11464: range 00000000112E4080-00000000112E451E
void __cdecl data::EraseBrickActivityMixin::EraseBrickActivityMixin(
        data::EraseBrickActivityMixin *const this,
        const data::EraseBrickActivityMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->explode_delay, &a2->explode_delay);
  std::unordered_map<data::EraseBrickActivity_BrickType,data::DynamicFloat>::unordered_map(&this->hp_map, &a2->hp_map);
  std::unordered_map<data::EraseBrickActivity_BrickType,data::DynamicFloat>::unordered_map(
    &this->score_map,
    &a2->score_map);
  std::vector<data::EraseBrickActivity_CreateBrick>::vector(&this->rule, &a2->rule);
  std::vector<data::EraseBrickActivity_CreateBrickRuleListItem>::vector(&this->rule_steps, &a2->rule_steps);
  std::string::basic_string(&this->rule_step_gv_key, &a2->rule_step_gv_key);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_CreateBrickRuleListItem>>::unordered_map(
    &this->other_rule_steps,
    &a2->other_rule_steps);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_stamina_broken, &a2->on_stamina_broken);
  data::DynamicFloat::DynamicFloat(&this->stamina_buff_duration, &a2->stamina_buff_duration);
  data::DynamicFloat::DynamicFloat(&this->stamina_buff_ratio, &a2->stamina_buff_ratio);
  std::vector<data::EraseBrickActivity_SwitchStateAction>::vector(
    &this->state_switch_actions,
    &a2->state_switch_actions);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::vector(
    &this->state_switch_action_array,
    &a2->state_switch_action_array);
  std::string::basic_string(&this->state_para_name, &a2->state_para_name);
  std::vector<data::EraseBrickActivity_StatePara>::vector(&this->state_para_values, &a2->state_para_values);
  std::string::basic_string(&this->hp_para_name, &a2->hp_para_name);
  std::string::basic_string(&this->count_para_name, &a2->count_para_name);
  std::unordered_map<data::EraseBrickActivity_BrickType,std::string>::unordered_map(
    &this->type_count_para_name,
    &a2->type_count_para_name);
  std::vector<std::string>::vector(&this->durability_changed_gvlist, &a2->durability_changed_gvlist);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_BrickType>>::unordered_map(
    &this->init_rule,
    &a2->init_rule);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_BrickType>>::unordered_map(
    &this->clear_rule,
    &a2->clear_rule);
};

// Line 11490: range 00000000112FA5D8-00000000112FA602
void __cdecl data::EraseBrickActivityMixin::~EraseBrickActivityMixin(data::EraseBrickActivityMixin *const this)
{
  data::EraseBrickActivityMixin::~EraseBrickActivityMixin(this);
  operator delete(this, 0x2F8uLL);
};

// Line 11490: range 00000000112FA428-00000000112FA5D7
void __cdecl data::EraseBrickActivityMixin::~EraseBrickActivityMixin(data::EraseBrickActivityMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivityMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<int,std::vector<data::EraseBrickActivity_BrickType>>::~unordered_map(&this->clear_rule);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_BrickType>>::~unordered_map(&this->init_rule);
  std::vector<std::string>::~vector(&this->durability_changed_gvlist);
  std::unordered_map<data::EraseBrickActivity_BrickType,std::string>::~unordered_map(&this->type_count_para_name);
  std::string::~string(&this->count_para_name);
  std::string::~string(&this->hp_para_name);
  std::vector<data::EraseBrickActivity_StatePara>::~vector(&this->state_para_values);
  std::string::~string(&this->state_para_name);
  std::vector<std::vector<std::shared_ptr<data::ConfigAbilityAction>>>::~vector(&this->state_switch_action_array);
  std::vector<data::EraseBrickActivity_SwitchStateAction>::~vector(&this->state_switch_actions);
  data::DynamicFloat::~DynamicFloat(&this->stamina_buff_ratio);
  data::DynamicFloat::~DynamicFloat(&this->stamina_buff_duration);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_stamina_broken);
  std::unordered_map<int,std::vector<data::EraseBrickActivity_CreateBrickRuleListItem>>::~unordered_map(&this->other_rule_steps);
  std::string::~string(&this->rule_step_gv_key);
  std::vector<data::EraseBrickActivity_CreateBrickRuleListItem>::~vector(&this->rule_steps);
  std::vector<data::EraseBrickActivity_CreateBrick>::~vector(&this->rule);
  std::unordered_map<data::EraseBrickActivity_BrickType,data::DynamicFloat>::~unordered_map(&this->score_map);
  std::unordered_map<data::EraseBrickActivity_BrickType,data::DynamicFloat>::~unordered_map(&this->hp_map);
  data::DynamicFloat::~DynamicFloat(&this->explode_delay);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11495: range 00000000100D99F8-00000000100D9A08
const char *__cdecl data::EraseBrickActivityMixin::getTypeName(const data::EraseBrickActivityMixin *const this)
{
  return "EraseBrickActivityMixin";
};

// Line 11496: range 00000000100D9A0A-00000000100D9BA6
int32_t __cdecl data::EraseBrickActivityMixin::getHashNum(const data::EraseBrickActivityMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EraseBrickActivityMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EraseBrickActivityMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11512: range 00000000112E4808-00000000112E4849
void __cdecl data::EraseBrickActivityMixinFactory::EraseBrickActivityMixinFactory(
        data::EraseBrickActivityMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivityMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EraseBrickActivityMixinFactory = v2;
};

// Line 11520: range 00000000112E4B52-00000000112E4BBF
void __cdecl data::EraseBrickActivitySubMixin::EraseBrickActivitySubMixin(data::EraseBrickActivitySubMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivitySubMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->durability_changed_gv);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions);
};

// Line 11520: range 00000000112E4F7A-00000000112E5040
void __cdecl data::EraseBrickActivitySubMixin::EraseBrickActivitySubMixin(
        data::EraseBrickActivitySubMixin *const this,
        const data::EraseBrickActivitySubMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivitySubMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->durability_changed_gv, &a2->durability_changed_gv);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->actions, &a2->actions);
};

// Line 11528: range 00000000112FA3FC-00000000112FA426
void __cdecl data::EraseBrickActivitySubMixin::~EraseBrickActivitySubMixin(
        data::EraseBrickActivitySubMixin *const this)
{
  data::EraseBrickActivitySubMixin::~EraseBrickActivitySubMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 11528: range 00000000112FA38E-00000000112FA3FB
void __cdecl data::EraseBrickActivitySubMixin::~EraseBrickActivitySubMixin(
        data::EraseBrickActivitySubMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivitySubMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->actions);
  std::string::~string(&this->durability_changed_gv);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11533: range 00000000100D9BA8-00000000100D9BB8
const char *__cdecl data::EraseBrickActivitySubMixin::getTypeName(const data::EraseBrickActivitySubMixin *const this)
{
  return "EraseBrickActivitySubMixin";
};

// Line 11534: range 00000000100D9BBA-00000000100D9D56
int32_t __cdecl data::EraseBrickActivitySubMixin::getHashNum(const data::EraseBrickActivitySubMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::EraseBrickActivitySubMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "EraseBrickActivitySubMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11550: range 00000000112E532A-00000000112E536B
void __cdecl data::EraseBrickActivitySubMixinFactory::EraseBrickActivitySubMixinFactory(
        data::EraseBrickActivitySubMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::EraseBrickActivitySubMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_EraseBrickActivitySubMixinFactory = v2;
};

// Line 11558: range 00000000112E5674-00000000112E5701
void __cdecl data::DisableCineMachineMixin::DisableCineMachineMixin(data::DisableCineMachineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::DisableCineMachineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->disable_aiming >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->disable_aiming >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->disable_aiming, v3, v4);
  this->disable_aiming = 1;
};

// Line 11558: range 00000000112E5AC6-00000000112E5B9E
void __cdecl data::DisableCineMachineMixin::DisableCineMachineMixin(
        data::DisableCineMachineMixin *const this,
        const data::DisableCineMachineMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool disable_aiming; // cl
  char v6; // dl
  __int64 v7; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::DisableCineMachineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->disable_aiming >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->disable_aiming >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->disable_aiming, v3, v4);
  disable_aiming = a2->disable_aiming;
  v6 = *(_BYTE *)(((unsigned __int64)&this->disable_aiming >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->disable_aiming, v3, v7);
  this->disable_aiming = disable_aiming;
};

// Line 11565: range 00000000112FA314-00000000112FA361
void __cdecl data::DisableCineMachineMixin::~DisableCineMachineMixin(data::DisableCineMachineMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableCineMachineMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 11565: range 00000000112FA362-00000000112FA38C
void __cdecl data::DisableCineMachineMixin::~DisableCineMachineMixin(data::DisableCineMachineMixin *const this)
{
  data::DisableCineMachineMixin::~DisableCineMachineMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 11570: range 00000000100D9D58-00000000100D9D68
const char *__cdecl data::DisableCineMachineMixin::getTypeName(const data::DisableCineMachineMixin *const this)
{
  return "DisableCineMachineMixin";
};

// Line 11571: range 00000000100D9D6A-00000000100D9F06
int32_t __cdecl data::DisableCineMachineMixin::getHashNum(const data::DisableCineMachineMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DisableCineMachineMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DisableCineMachineMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11587: range 00000000112E5DE8-00000000112E5E29
void __cdecl data::DisableCineMachineMixinFactory::DisableCineMachineMixinFactory(
        data::DisableCineMachineMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableCineMachineMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DisableCineMachineMixinFactory = v2;
};

// Line 11595: range 00000000112E6132-00000000112E617F
void __cdecl data::DisableMotionBlurMixin::DisableMotionBlurMixin(data::DisableMotionBlurMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DisableMotionBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
};

// Line 11595: range 00000000112E6680-00000000112E66D8
void __cdecl data::DisableMotionBlurMixin::DisableMotionBlurMixin(
        data::DisableMotionBlurMixin *const this,
        const data::DisableMotionBlurMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DisableMotionBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
};

// Line 11601: range 00000000112FA29A-00000000112FA2E7
void __cdecl data::DisableMotionBlurMixin::~DisableMotionBlurMixin(data::DisableMotionBlurMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableMotionBlurMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11601: range 00000000112FA2E8-00000000112FA312
void __cdecl data::DisableMotionBlurMixin::~DisableMotionBlurMixin(data::DisableMotionBlurMixin *const this)
{
  data::DisableMotionBlurMixin::~DisableMotionBlurMixin(this);
  operator delete(this, 0x20uLL);
};

// Line 11606: range 00000000100D9F08-00000000100D9F18
const char *__cdecl data::DisableMotionBlurMixin::getTypeName(const data::DisableMotionBlurMixin *const this)
{
  return "DisableMotionBlurMixin";
};

// Line 11607: range 00000000100D9F1A-00000000100DA0B6
int32_t __cdecl data::DisableMotionBlurMixin::getHashNum(const data::DisableMotionBlurMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DisableMotionBlurMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DisableMotionBlurMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11623: range 00000000112E6922-00000000112E6963
void __cdecl data::DisableMotionBlurMixinFactory::DisableMotionBlurMixinFactory(
        data::DisableMotionBlurMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DisableMotionBlurMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DisableMotionBlurMixinFactory = v2;
};

// Line 11631: range 00000000112E6C6C-00000000112E6E6D
void __cdecl data::AttackChainMixin::AttackChainMixin(data::AttackChainMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
  v2 = (int (**)(...))(&`vtable for'data::AttackChainMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)this + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&this->ignore_element_reaction_type >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&this->ignore_element_reaction_type >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_store1(&this->ignore_element_reaction_type, v3, v4);
  this->ignore_element_reaction_type = 0;
  std::vector<data::ElementReactionType>::vector(&this->reaction_types);
  if ( *(char *)(((unsigned __int64)&this->ignore_attack_tag >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->ignore_attack_tag, v3, &this->ignore_attack_tag);
  this->ignore_attack_tag = 0;
  std::vector<std::string>::vector(&this->attack_tags);
  std::string::basic_string(&this->effect_name);
  std::string::basic_string(&this->effect_attach_point);
  data::DynamicFloat::DynamicFloat(&this->line_range, 20.0);
  std::string::basic_string(&this->attack_chain_receiver_key);
  data::DynamicFloat::DynamicFloat(&this->cd, 10.0);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
};

// Line 11631: range 00000000112E72B0-00000000112E75E0
void __cdecl data::AttackChainMixin::AttackChainMixin(
        data::AttackChainMixin *const this,
        const data::AttackChainMixin *a2)
{
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rdx
  bool ignore_element_reaction_type; // cl
  char v6; // dl
  __int64 v7; // rdx
  data::ElementReactionTypeList *p_reaction_types; // rsi
  bool ignore_attack_tag; // cl
  char v10; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(
    (data::ConfigAbilityMixin *const)this,
    (const data::ConfigAbilityMixin *)a2);
  v2 = (int (**)(...))(&`vtable for'data::AttackChainMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  v3 = ((_BYTE)a2 + 30) & 7;
  v4 = (*(_BYTE *)(((unsigned __int64)&a2->ignore_element_reaction_type >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v3 >= *(_BYTE *)(((unsigned __int64)&a2->ignore_element_reaction_type >> 3) + 0x7FFF8000));
  if ( (_BYTE)v4 )
    __asan_report_load1(&a2->ignore_element_reaction_type, v3, v4);
  ignore_element_reaction_type = a2->ignore_element_reaction_type;
  v6 = *(_BYTE *)(((unsigned __int64)&this->ignore_element_reaction_type >> 3) + 0x7FFF8000);
  LOBYTE(v3) = v6 != 0;
  v7 = (v6 != 0) & (unsigned __int8)((((unsigned __int8)this + 30) & 7) >= v6);
  if ( (_BYTE)v7 )
    __asan_report_store1(&this->ignore_element_reaction_type, v3, v7);
  this->ignore_element_reaction_type = ignore_element_reaction_type;
  p_reaction_types = &a2->reaction_types;
  std::vector<data::ElementReactionType>::vector(&this->reaction_types, &a2->reaction_types);
  if ( *(char *)(((unsigned __int64)&a2->ignore_attack_tag >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->ignore_attack_tag, p_reaction_types, &a2->ignore_attack_tag);
  ignore_attack_tag = a2->ignore_attack_tag;
  v10 = *(_BYTE *)(((unsigned __int64)&this->ignore_attack_tag >> 3) + 0x7FFF8000);
  if ( v10 < 0 )
  {
    LOBYTE(p_reaction_types) = v10 != 0;
    __asan_report_store1(&this->ignore_attack_tag, p_reaction_types, &this->ignore_attack_tag);
  }
  this->ignore_attack_tag = ignore_attack_tag;
  std::vector<std::string>::vector(&this->attack_tags, &a2->attack_tags);
  std::string::basic_string(&this->effect_name, &a2->effect_name);
  std::string::basic_string(&this->effect_attach_point, &a2->effect_attach_point);
  data::DynamicFloat::DynamicFloat(&this->line_range, &a2->line_range);
  std::string::basic_string(&this->attack_chain_receiver_key, &a2->attack_chain_receiver_key);
  data::DynamicFloat::DynamicFloat(&this->cd, &a2->cd);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
};

// Line 11648: range 00000000112FA186-00000000112FA26D
void __cdecl data::AttackChainMixin::~AttackChainMixin(data::AttackChainMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackChainMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  data::DynamicFloat::~DynamicFloat(&this->cd);
  std::string::~string(&this->attack_chain_receiver_key);
  data::DynamicFloat::~DynamicFloat(&this->line_range);
  std::string::~string(&this->effect_attach_point);
  std::string::~string(&this->effect_name);
  std::vector<std::string>::~vector(&this->attack_tags);
  std::vector<data::ElementReactionType>::~vector(&this->reaction_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin((data::ConfigAbilityMixin *const)this);
};

// Line 11648: range 00000000112FA26E-00000000112FA298
void __cdecl data::AttackChainMixin::~AttackChainMixin(data::AttackChainMixin *const this)
{
  data::AttackChainMixin::~AttackChainMixin(this);
  operator delete(this, 0x128uLL);
};

// Line 11653: range 00000000100DA0B8-00000000100DA0C8
const char *__cdecl data::AttackChainMixin::getTypeName(const data::AttackChainMixin *const this)
{
  return "AttackChainMixin";
};

// Line 11654: range 00000000100DA0CA-00000000100DA266
int32_t __cdecl data::AttackChainMixin::getHashNum(const data::AttackChainMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttackChainMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttackChainMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11670: range 00000000112E78CA-00000000112E790B
void __cdecl data::AttackChainMixinFactory::AttackChainMixinFactory(data::AttackChainMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackChainMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttackChainMixinFactory = v2;
};

// Line 11693: range 00000000112E7D74-00000000112E7EC5
void __cdecl data::DoActionByAimMixin::DoActionByAimMixin(data::DoActionByAimMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByAimMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::EntityType>::vector(&this->entity_types);
  std::string::basic_string(&this->collider_node_name);
  data::DynamicFloat::DynamicFloat(&this->cd, -1.0);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_leave_scope_action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_remove_action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&this->aim_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->aim_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->aim_type, v1);
  }
  this->aim_type = AllEnter;
};

// Line 11693: range 00000000112E830E-00000000112E8559
void __cdecl data::DoActionByAimMixin::DoActionByAimMixin(
        data::DoActionByAimMixin *const this,
        const data::DoActionByAimMixin *a2)
{
  int (**v2)(...); // rdx
  data::ConfigAbilityPredicateArray *p_predicates; // rsi
  data::AimType aim_type; // ecx
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::DoActionByAimMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::EntityType>::vector(&this->entity_types, &a2->entity_types);
  std::string::basic_string(&this->collider_node_name, &a2->collider_node_name);
  data::DynamicFloat::DynamicFloat(&this->cd, &a2->cd);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_leave_scope_action_queue,
    &a2->on_leave_scope_action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(
    &this->on_remove_action_queue,
    &a2->on_remove_action_queue);
  p_predicates = &a2->predicates;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  if ( *(_BYTE *)(((unsigned __int64)&a2->aim_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->aim_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->aim_type);
  }
  aim_type = a2->aim_type;
  v5 = *(_BYTE *)(((unsigned __int64)&this->aim_type >> 3) + 0x7FFF8000);
  if ( v5 != 0 && v5 <= 3 )
  {
    LOBYTE(p_predicates) = v5 != 0;
    __asan_report_store4(&this->aim_type, p_predicates);
  }
  this->aim_type = aim_type;
};

// Line 11707: range 00000000112FA096-00000000112FA159
void __cdecl data::DoActionByAimMixin::~DoActionByAimMixin(data::DoActionByAimMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByAimMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_remove_action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_leave_scope_action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  data::DynamicFloat::~DynamicFloat(&this->cd);
  std::string::~string(&this->collider_node_name);
  std::vector<data::EntityType>::~vector(&this->entity_types);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11707: range 00000000112FA15A-00000000112FA184
void __cdecl data::DoActionByAimMixin::~DoActionByAimMixin(data::DoActionByAimMixin *const this)
{
  data::DoActionByAimMixin::~DoActionByAimMixin(this);
  operator delete(this, 0xE0uLL);
};

// Line 11712: range 00000000100DA268-00000000100DA278
const char *__cdecl data::DoActionByAimMixin::getTypeName(const data::DoActionByAimMixin *const this)
{
  return "DoActionByAimMixin";
};

// Line 11713: range 00000000100DA27A-00000000100DA416
int32_t __cdecl data::DoActionByAimMixin::getHashNum(const data::DoActionByAimMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::DoActionByAimMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "DoActionByAimMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11729: range 00000000112E8842-00000000112E8883
void __cdecl data::DoActionByAimMixinFactory::DoActionByAimMixinFactory(data::DoActionByAimMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::DoActionByAimMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_DoActionByAimMixinFactory = v2;
};

// Line 11737: range 00000000112E8B8C-00000000112E8CC5
void __cdecl data::NahidaAimNpcGatherMixin::NahidaAimNpcGatherMixin(data::NahidaAimNpcGatherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::NahidaAimNpcGatherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->detect_range_for_npc);
  data::DynamicFloat::DynamicFloat(&this->width_for_npc);
  data::DynamicFloat::DynamicFloat(&this->height_for_npc);
  std::string::basic_string(&this->npc_attach_effect);
  data::DynamicFloat::DynamicFloat(&this->detect_range_for_gather);
  data::DynamicFloat::DynamicFloat(&this->width_for_gather);
  data::DynamicFloat::DynamicFloat(&this->height_for_gather);
  data::DynamicFloat::DynamicFloat(&this->gather_ignore_raycast_threshold);
  data::DynamicInt::DynamicInt(&this->gather_max_count);
  if ( *(char *)(((unsigned __int64)&this->disable_ray_check >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->disable_ray_check, v1, &this->disable_ray_check);
  this->disable_ray_check = 0;
  std::string::basic_string(&this->gather_attach_effect);
};

// Line 11737: range 00000000112E9074-00000000112E9365
void __cdecl data::NahidaAimNpcGatherMixin::NahidaAimNpcGatherMixin(
        data::NahidaAimNpcGatherMixin *const this,
        const data::NahidaAimNpcGatherMixin *a2)
{
  int (**v2)(...); // rdx
  data::DynamicInt *p_gather_max_count; // rsi
  bool disable_ray_check; // cl
  char v5; // al

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::NahidaAimNpcGatherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->detect_range_for_npc, &a2->detect_range_for_npc);
  data::DynamicFloat::DynamicFloat(&this->width_for_npc, &a2->width_for_npc);
  data::DynamicFloat::DynamicFloat(&this->height_for_npc, &a2->height_for_npc);
  std::string::basic_string(&this->npc_attach_effect, &a2->npc_attach_effect);
  data::DynamicFloat::DynamicFloat(&this->detect_range_for_gather, &a2->detect_range_for_gather);
  data::DynamicFloat::DynamicFloat(&this->width_for_gather, &a2->width_for_gather);
  data::DynamicFloat::DynamicFloat(&this->height_for_gather, &a2->height_for_gather);
  data::DynamicFloat::DynamicFloat(&this->gather_ignore_raycast_threshold, &a2->gather_ignore_raycast_threshold);
  p_gather_max_count = &a2->gather_max_count;
  data::DynamicInt::DynamicInt(&this->gather_max_count, &a2->gather_max_count);
  if ( *(char *)(((unsigned __int64)&a2->disable_ray_check >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&a2->disable_ray_check, p_gather_max_count, &a2->disable_ray_check);
  disable_ray_check = a2->disable_ray_check;
  v5 = *(_BYTE *)(((unsigned __int64)&this->disable_ray_check >> 3) + 0x7FFF8000);
  if ( v5 < 0 )
  {
    LOBYTE(p_gather_max_count) = v5 != 0;
    __asan_report_store1(&this->disable_ray_check, p_gather_max_count, &this->disable_ray_check);
  }
  this->disable_ray_check = disable_ray_check;
  std::string::basic_string(&this->gather_attach_effect, &a2->gather_attach_effect);
};

// Line 11754: range 00000000112F9F70-00000000112FA069
void __cdecl data::NahidaAimNpcGatherMixin::~NahidaAimNpcGatherMixin(data::NahidaAimNpcGatherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NahidaAimNpcGatherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->gather_attach_effect);
  data::DynamicInt::~DynamicInt(&this->gather_max_count);
  data::DynamicFloat::~DynamicFloat(&this->gather_ignore_raycast_threshold);
  data::DynamicFloat::~DynamicFloat(&this->height_for_gather);
  data::DynamicFloat::~DynamicFloat(&this->width_for_gather);
  data::DynamicFloat::~DynamicFloat(&this->detect_range_for_gather);
  std::string::~string(&this->npc_attach_effect);
  data::DynamicFloat::~DynamicFloat(&this->height_for_npc);
  data::DynamicFloat::~DynamicFloat(&this->width_for_npc);
  data::DynamicFloat::~DynamicFloat(&this->detect_range_for_npc);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11754: range 00000000112FA06A-00000000112FA094
void __cdecl data::NahidaAimNpcGatherMixin::~NahidaAimNpcGatherMixin(data::NahidaAimNpcGatherMixin *const this)
{
  data::NahidaAimNpcGatherMixin::~NahidaAimNpcGatherMixin(this);
  operator delete(this, 0x178uLL);
};

// Line 11759: range 00000000100DA418-00000000100DA428
const char *__cdecl data::NahidaAimNpcGatherMixin::getTypeName(const data::NahidaAimNpcGatherMixin *const this)
{
  return "NahidaAimNpcGatherMixin";
};

// Line 11760: range 00000000100DA42A-00000000100DA5C6
int32_t __cdecl data::NahidaAimNpcGatherMixin::getHashNum(const data::NahidaAimNpcGatherMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::NahidaAimNpcGatherMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "NahidaAimNpcGatherMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11776: range 00000000112E964E-00000000112E968F
void __cdecl data::NahidaAimNpcGatherMixinFactory::NahidaAimNpcGatherMixinFactory(
        data::NahidaAimNpcGatherMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NahidaAimNpcGatherMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_NahidaAimNpcGatherMixinFactory = v2;
};

// Line 11784: range 00000000112E9998-00000000112E9A62
void __cdecl data::AttackChainReceiverMixin::AttackChainReceiverMixin(data::AttackChainReceiverMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::AttackChainReceiverMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->cd, 3.0);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->attacker_predicates);
  std::string::basic_string(&this->attack_chain_receiver_key);
};

// Line 11784: range 00000000112E9EA6-00000000112EA001
void __cdecl data::AttackChainReceiverMixin::AttackChainReceiverMixin(
        data::AttackChainReceiverMixin *const this,
        const data::AttackChainReceiverMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::AttackChainReceiverMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  data::DynamicFloat::DynamicFloat(&this->cd, &a2->cd);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->action_queue, &a2->action_queue);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->predicates, &a2->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(
    &this->attacker_predicates,
    &a2->attacker_predicates);
  std::string::basic_string(&this->attack_chain_receiver_key, &a2->attack_chain_receiver_key);
};

// Line 11795: range 00000000112F9F44-00000000112F9F6E
void __cdecl data::AttackChainReceiverMixin::~AttackChainReceiverMixin(data::AttackChainReceiverMixin *const this)
{
  data::AttackChainReceiverMixin::~AttackChainReceiverMixin(this);
  operator delete(this, 0xA8uLL);
};

// Line 11795: range 00000000112F9EA4-00000000112F9F43
void __cdecl data::AttackChainReceiverMixin::~AttackChainReceiverMixin(data::AttackChainReceiverMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackChainReceiverMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->attack_chain_receiver_key);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->attacker_predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->predicates);
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->action_queue);
  data::DynamicFloat::~DynamicFloat(&this->cd);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11800: range 00000000100DA5C8-00000000100DA5D8
const char *__cdecl data::AttackChainReceiverMixin::getTypeName(const data::AttackChainReceiverMixin *const this)
{
  return "AttackChainReceiverMixin";
};

// Line 11801: range 00000000100DA5DA-00000000100DA776
int32_t __cdecl data::AttackChainReceiverMixin::getHashNum(const data::AttackChainReceiverMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::AttackChainReceiverMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "AttackChainReceiverMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11817: range 00000000112EA2EA-00000000112EA32B
void __cdecl data::AttackChainReceiverMixinFactory::AttackChainReceiverMixinFactory(
        data::AttackChainReceiverMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::AttackChainReceiverMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_AttackChainReceiverMixinFactory = v2;
};

// Line 11825: range 00000000112EA634-00000000112EA84D
void __cdecl data::NahidaHollowFlowerMixin::NahidaHollowFlowerMixin(data::NahidaHollowFlowerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx
  __int64 v3; // rsi
  __int64 v4; // rsi

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::NahidaHollowFlowerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern);
  std::string::basic_string(&this->effect_trigger);
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, v1);
  }
  this->interval = 0.0;
  v3 = (((_BYTE)this + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->max_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->max_count, v3);
  }
  this->max_count = 0;
  if ( *(_BYTE *)(((unsigned __int64)&this->create_max_num_per_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->create_max_num_per_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->create_max_num_per_interval, v3);
  }
  this->create_max_num_per_interval = 0;
  data::Vector::Vector(&this->create_offset);
  v4 = (((_BYTE)this + 124) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_range, v4);
  }
  this->min_range = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, v4);
  }
  this->max_range = 0.0;
  if ( *(_BYTE *)(((unsigned __int64)&this->destroy_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->destroy_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->destroy_range, (((_BYTE)this - 124) & 7u) + 3);
  }
  this->destroy_range = 0.0;
};

// Line 11825: range 00000000112EAC08-00000000112EB0CE
void __cdecl data::NahidaHollowFlowerMixin::NahidaHollowFlowerMixin(
        data::NahidaHollowFlowerMixin *const this,
        const data::NahidaHollowFlowerMixin *a2)
{
  int (**v2)(...); // rdx
  float interval; // xmm0_4
  __int64 v4; // rsi
  int32_t max_count; // ecx
  char v6; // dl
  int32_t create_max_num_per_interval; // ecx
  char v8; // al
  __int64 v9; // rdx
  float min_range; // xmm0_4
  __int64 v11; // rsi
  float max_range; // xmm0_4
  float destroy_range; // xmm0_4

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::NahidaHollowFlowerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->effect_pattern, &a2->effect_pattern);
  std::string::basic_string(&this->effect_trigger, &a2->effect_trigger);
  if ( *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->interval);
  }
  interval = a2->interval;
  if ( *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->interval, &a2->effect_trigger);
  }
  this->interval = interval;
  v4 = (((_BYTE)a2 + 100) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_count >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 100) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->max_count >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->max_count);
  }
  max_count = a2->max_count;
  v6 = *(_BYTE *)(((unsigned __int64)&this->max_count >> 3) + 0x7FFF8000);
  if ( v6 != 0 && (char)((((_BYTE)this + 100) & 7) + 3) >= v6 )
  {
    LOBYTE(v4) = v6 != 0;
    __asan_report_store4(&this->max_count, v4);
  }
  this->max_count = max_count;
  if ( *(_BYTE *)(((unsigned __int64)&a2->create_max_num_per_interval >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->create_max_num_per_interval >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->create_max_num_per_interval);
  }
  create_max_num_per_interval = a2->create_max_num_per_interval;
  v8 = *(_BYTE *)(((unsigned __int64)&this->create_max_num_per_interval >> 3) + 0x7FFF8000);
  if ( v8 != 0 && v8 <= 3 )
  {
    LOBYTE(v4) = v8 != 0;
    __asan_report_store4(&this->create_max_num_per_interval, v4);
  }
  this->create_max_num_per_interval = create_max_num_per_interval;
  if ( (((unsigned __int8)this + 108) & 7) >= *(_BYTE *)(((unsigned __int64)&this->create_offset >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&this->create_offset >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&this->create_offset.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)this + 123) & 7) >= *(_BYTE *)(((unsigned __int64)(&this->create_offset.is_json_loaded + 3) >> 3)
                                                       + 0x7FFF8000) )
  {
    __asan_report_store_n(&this->create_offset, 16LL);
  }
  if ( (((unsigned __int8)a2 + 108) & 7) >= *(_BYTE *)(((unsigned __int64)&a2->create_offset >> 3) + 0x7FFF8000)
    && *(_BYTE *)(((unsigned __int64)&a2->create_offset >> 3) + 0x7FFF8000) != 0
    || *(_BYTE *)(((unsigned __int64)(&a2->create_offset.is_json_loaded + 3) >> 3) + 0x7FFF8000) != 0
    && (((unsigned __int8)a2 + 123) & 7) >= *(_BYTE *)(((unsigned __int64)(&a2->create_offset.is_json_loaded + 3) >> 3)
                                                     + 0x7FFF8000) )
  {
    __asan_report_load_n(&a2->create_offset, 16LL);
  }
  v9 = *(_QWORD *)&a2->create_offset.z;
  *(_QWORD *)&this->create_offset.x = *(_QWORD *)&a2->create_offset.x;
  *(_QWORD *)&this->create_offset.z = v9;
  if ( *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->min_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->min_range);
  }
  min_range = a2->min_range;
  v11 = (((_BYTE)this + 124) & 7u) + 3;
  if ( *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this + 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->min_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->min_range, v11);
  }
  this->min_range = min_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->max_range);
  }
  max_range = a2->max_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->max_range >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->max_range, v11);
  }
  this->max_range = max_range;
  if ( *(_BYTE *)(((unsigned __int64)&a2->destroy_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)a2 - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&a2->destroy_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_load4(&a2->destroy_range);
  }
  destroy_range = a2->destroy_range;
  if ( *(_BYTE *)(((unsigned __int64)&this->destroy_range >> 3) + 0x7FFF8000) != 0
    && (char)((((_BYTE)this - 124) & 7) + 3) >= *(_BYTE *)(((unsigned __int64)&this->destroy_range >> 3) + 0x7FFF8000) )
  {
    __asan_report_store4(&this->destroy_range, (((_BYTE)this - 124) & 7u) + 3);
  }
  this->destroy_range = destroy_range;
};

// Line 11840: range 00000000112F9E78-00000000112F9EA2
void __cdecl data::NahidaHollowFlowerMixin::~NahidaHollowFlowerMixin(data::NahidaHollowFlowerMixin *const this)
{
  data::NahidaHollowFlowerMixin::~NahidaHollowFlowerMixin(this);
  operator delete(this, 0x88uLL);
};

// Line 11840: range 00000000112F9E0A-00000000112F9E77
void __cdecl data::NahidaHollowFlowerMixin::~NahidaHollowFlowerMixin(data::NahidaHollowFlowerMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NahidaHollowFlowerMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->effect_trigger);
  std::string::~string(&this->effect_pattern);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11845: range 00000000100DA778-00000000100DA788
const char *__cdecl data::NahidaHollowFlowerMixin::getTypeName(const data::NahidaHollowFlowerMixin *const this)
{
  return "NahidaHollowFlowerMixin";
};

// Line 11846: range 00000000100DA78A-00000000100DA926
int32_t __cdecl data::NahidaHollowFlowerMixin::getHashNum(const data::NahidaHollowFlowerMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::NahidaHollowFlowerMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "NahidaHollowFlowerMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11862: range 00000000112EB3B8-00000000112EB3F9
void __cdecl data::NahidaHollowFlowerMixinFactory::NahidaHollowFlowerMixinFactory(
        data::NahidaHollowFlowerMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::NahidaHollowFlowerMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_NahidaHollowFlowerMixinFactory = v2;
};

// Line 11870: range 00000000112EB702-00000000112EB75F
void __cdecl data::IgnoreBulletAimPointMixin::IgnoreBulletAimPointMixin(data::IgnoreBulletAimPointMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::IgnoreBulletAimPointMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->override_bullet_aim_point);
};

// Line 11870: range 00000000112EBB64-00000000112EBBFA
void __cdecl data::IgnoreBulletAimPointMixin::IgnoreBulletAimPointMixin(
        data::IgnoreBulletAimPointMixin *const this,
        const data::IgnoreBulletAimPointMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::IgnoreBulletAimPointMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::string::basic_string(&this->override_bullet_aim_point, &a2->override_bullet_aim_point);
};

// Line 11877: range 00000000112F9DDE-00000000112F9E08
void __cdecl data::IgnoreBulletAimPointMixin::~IgnoreBulletAimPointMixin(data::IgnoreBulletAimPointMixin *const this)
{
  data::IgnoreBulletAimPointMixin::~IgnoreBulletAimPointMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 11877: range 00000000112F9D80-00000000112F9DDD
void __cdecl data::IgnoreBulletAimPointMixin::~IgnoreBulletAimPointMixin(data::IgnoreBulletAimPointMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IgnoreBulletAimPointMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::string::~string(&this->override_bullet_aim_point);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11882: range 00000000100DA928-00000000100DA938
const char *__cdecl data::IgnoreBulletAimPointMixin::getTypeName(const data::IgnoreBulletAimPointMixin *const this)
{
  return "IgnoreBulletAimPointMixin";
};

// Line 11883: range 00000000100DA93A-00000000100DAAD6
int32_t __cdecl data::IgnoreBulletAimPointMixin::getHashNum(const data::IgnoreBulletAimPointMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::IgnoreBulletAimPointMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "IgnoreBulletAimPointMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11899: range 00000000112EBEE4-00000000112EBF25
void __cdecl data::IgnoreBulletAimPointMixinFactory::IgnoreBulletAimPointMixinFactory(
        data::IgnoreBulletAimPointMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::IgnoreBulletAimPointMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_IgnoreBulletAimPointMixinFactory = v2;
};

// Line 11907: range 00000000112EC22E-00000000112EC28B
void __cdecl data::HittingOtherMixin::HittingOtherMixin(data::HittingOtherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::HittingOtherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hitting_other);
};

// Line 11907: range 00000000112EC680-00000000112EC716
void __cdecl data::HittingOtherMixin::HittingOtherMixin(
        data::HittingOtherMixin *const this,
        const data::HittingOtherMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::HittingOtherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::vector(&this->on_hitting_other, &a2->on_hitting_other);
};

// Line 11914: range 00000000112F9D54-00000000112F9D7E
void __cdecl data::HittingOtherMixin::~HittingOtherMixin(data::HittingOtherMixin *const this)
{
  data::HittingOtherMixin::~HittingOtherMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 11914: range 00000000112F9CF6-00000000112F9D53
void __cdecl data::HittingOtherMixin::~HittingOtherMixin(data::HittingOtherMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HittingOtherMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::shared_ptr<data::ConfigAbilityAction>>::~vector(&this->on_hitting_other);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11919: range 00000000100DAAD8-00000000100DAAE8
const char *__cdecl data::HittingOtherMixin::getTypeName(const data::HittingOtherMixin *const this)
{
  return "HittingOtherMixin";
};

// Line 11920: range 00000000100DAAEA-00000000100DAC86
int32_t __cdecl data::HittingOtherMixin::getHashNum(const data::HittingOtherMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::HittingOtherMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "HittingOtherMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11936: range 00000000112ECA00-00000000112ECA41
void __cdecl data::HittingOtherMixinFactory::HittingOtherMixinFactory(data::HittingOtherMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::HittingOtherMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_HittingOtherMixinFactory = v2;
};

// Line 11944: range 00000000112ECD4A-00000000112ECDA7
void __cdecl data::PerformOperationMixin::PerformOperationMixin(data::PerformOperationMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::PerformOperationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->effects);
};

// Line 11944: range 00000000112ED19C-00000000112ED232
void __cdecl data::PerformOperationMixin::PerformOperationMixin(
        data::PerformOperationMixin *const this,
        const data::PerformOperationMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::PerformOperationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::vector(&this->effects, &a2->effects);
};

// Line 11951: range 00000000112F9CCA-00000000112F9CF4
void __cdecl data::PerformOperationMixin::~PerformOperationMixin(data::PerformOperationMixin *const this)
{
  data::PerformOperationMixin::~PerformOperationMixin(this);
  operator delete(this, 0x38uLL);
};

// Line 11951: range 00000000112F9C6C-00000000112F9CC9
void __cdecl data::PerformOperationMixin::~PerformOperationMixin(data::PerformOperationMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PerformOperationMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<std::string>::~vector(&this->effects);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11956: range 00000000100DAC88-00000000100DAC98
const char *__cdecl data::PerformOperationMixin::getTypeName(const data::PerformOperationMixin *const this)
{
  return "PerformOperationMixin";
};

// Line 11957: range 00000000100DAC9A-00000000100DAE36
int32_t __cdecl data::PerformOperationMixin::getHashNum(const data::PerformOperationMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::PerformOperationMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "PerformOperationMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 11973: range 00000000112ED51C-00000000112ED55D
void __cdecl data::PerformOperationMixinFactory::PerformOperationMixinFactory(
        data::PerformOperationMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::PerformOperationMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_PerformOperationMixinFactory = v2;
};

// Line 11981: range 00000000112ED866-00000000112ED8C3
void __cdecl data::StateLayersOverrideMixin::StateLayersOverrideMixin(data::StateLayersOverrideMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::StateLayersOverrideMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>>::unordered_map(&this->state_layers);
};

// Line 11981: range 00000000112EDC7E-00000000112EDD14
void __cdecl data::StateLayersOverrideMixin::StateLayersOverrideMixin(
        data::StateLayersOverrideMixin *const this,
        const data::StateLayersOverrideMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::StateLayersOverrideMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>>::unordered_map(
    &this->state_layers,
    &a2->state_layers);
};

// Line 11988: range 00000000112F9C40-00000000112F9C6A
void __cdecl data::StateLayersOverrideMixin::~StateLayersOverrideMixin(data::StateLayersOverrideMixin *const this)
{
  data::StateLayersOverrideMixin::~StateLayersOverrideMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 11988: range 00000000112F9BE2-00000000112F9C3F
void __cdecl data::StateLayersOverrideMixin::~StateLayersOverrideMixin(data::StateLayersOverrideMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StateLayersOverrideMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<std::string,std::shared_ptr<data::ConfigBaseStateLayer>>::~unordered_map(&this->state_layers);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 11993: range 00000000100DAE38-00000000100DAE48
const char *__cdecl data::StateLayersOverrideMixin::getTypeName(const data::StateLayersOverrideMixin *const this)
{
  return "StateLayersOverrideMixin";
};

// Line 11994: range 00000000100DAE4A-00000000100DAFE6
int32_t __cdecl data::StateLayersOverrideMixin::getHashNum(const data::StateLayersOverrideMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::StateLayersOverrideMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "StateLayersOverrideMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12010: range 00000000112EDFFE-00000000112EE03F
void __cdecl data::StateLayersOverrideMixinFactory::StateLayersOverrideMixinFactory(
        data::StateLayersOverrideMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::StateLayersOverrideMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_StateLayersOverrideMixinFactory = v2;
};

// Line 12018: range 00000000112EE4A2-00000000112EE4FF
void __cdecl data::OverrideEnviroParamMixin::OverrideEnviroParamMixin(data::OverrideEnviroParamMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::OverrideEnviroParamMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<std::string,std::unordered_map<std::string,float>>::unordered_map(&this->esp_name_map);
};

// Line 12018: range 00000000112EE8BA-00000000112EE950
void __cdecl data::OverrideEnviroParamMixin::OverrideEnviroParamMixin(
        data::OverrideEnviroParamMixin *const this,
        const data::OverrideEnviroParamMixin *a2)
{
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::OverrideEnviroParamMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<std::string,std::unordered_map<std::string,float>>::unordered_map(
    &this->esp_name_map,
    &a2->esp_name_map);
};

// Line 12025: range 00000000112F9BB6-00000000112F9BE0
void __cdecl data::OverrideEnviroParamMixin::~OverrideEnviroParamMixin(data::OverrideEnviroParamMixin *const this)
{
  data::OverrideEnviroParamMixin::~OverrideEnviroParamMixin(this);
  operator delete(this, 0x58uLL);
};

// Line 12025: range 00000000112F9B58-00000000112F9BB5
void __cdecl data::OverrideEnviroParamMixin::~OverrideEnviroParamMixin(data::OverrideEnviroParamMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideEnviroParamMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::unordered_map<std::string,std::unordered_map<std::string,float>>::~unordered_map(&this->esp_name_map);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 12030: range 00000000100DAFE8-00000000100DAFF8
const char *__cdecl data::OverrideEnviroParamMixin::getTypeName(const data::OverrideEnviroParamMixin *const this)
{
  return "OverrideEnviroParamMixin";
};

// Line 12031: range 00000000100DAFFA-00000000100DB196
int32_t __cdecl data::OverrideEnviroParamMixin::getHashNum(const data::OverrideEnviroParamMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::OverrideEnviroParamMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "OverrideEnviroParamMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12047: range 00000000112EEC3A-00000000112EEC7B
void __cdecl data::OverrideEnviroParamMixinFactory::OverrideEnviroParamMixinFactory(
        data::OverrideEnviroParamMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::OverrideEnviroParamMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_OverrideEnviroParamMixinFactory = v2;
};

// Line 12055: range 00000000101972C2-0000000010197394
void __cdecl data::InputActionUseable::InputActionUseable(data::InputActionUseable *const this)
{
  __int64 v1; // rsi
  __int64 v2; // rsi
  __int64 v3; // rdx

  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(this, v1);
  }
  this->input_action_type = Invalid_6;
  v2 = ((_BYTE)this + 4) & 7;
  v3 = (*(_BYTE *)(((unsigned __int64)&this->check_can_do_skill >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v2 >= *(_BYTE *)(((unsigned __int64)&this->check_can_do_skill >> 3) + 0x7FFF8000));
  if ( (_BYTE)v3 )
    __asan_report_store1(&this->check_can_do_skill, v2, v3);
  this->check_can_do_skill = 0;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->conditions);
  if ( *(char *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_store1(&this->is_json_loaded, v2, &this->is_json_loaded);
  this->is_json_loaded = 0;
};

// Line 12055: range 0000000010EC468A-0000000010EC4818
void __cdecl data::InputActionUseable::InputActionUseable(
        data::InputActionUseable *const this,
        const data::InputActionUseable *a2)
{
  data::GeneralInputActionType input_action_type; // ecx
  char v3; // al
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool check_can_do_skill; // cl
  char v7; // dl
  __int64 v8; // rdx
  data::ConfigAbilityPredicateArray *p_conditions; // rsi
  bool is_json_loaded; // cl
  char v11; // al
  const data::InputActionUseable *v12; // [rsp+0h] [rbp-10h]

  v12 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  input_action_type = a2->input_action_type;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->input_action_type = input_action_type;
  v4 = ((_BYTE)v12 + 4) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&v12->check_can_do_skill >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&v12->check_can_do_skill >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&v12->check_can_do_skill, v4, v5);
  check_can_do_skill = v12->check_can_do_skill;
  v7 = *(_BYTE *)(((unsigned __int64)&this->check_can_do_skill >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 4) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->check_can_do_skill, v4, v8);
  this->check_can_do_skill = check_can_do_skill;
  p_conditions = &v12->conditions;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->conditions, &v12->conditions);
  if ( *(char *)(((unsigned __int64)&v12->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v12->is_json_loaded, p_conditions, &v12->is_json_loaded);
  is_json_loaded = v12->is_json_loaded;
  v11 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v11 < 0 )
  {
    LOBYTE(p_conditions) = v11 != 0;
    __asan_report_store1(&this->is_json_loaded, p_conditions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 12055: range 00000000105C8948-00000000105C8AD6
void __cdecl data::InputActionUseable::InputActionUseable(
        data::InputActionUseable *const this,
        data::InputActionUseable *a2)
{
  data::GeneralInputActionType input_action_type; // ecx
  char v3; // al
  __int64 v4; // rsi
  __int64 v5; // rdx
  bool check_can_do_skill; // cl
  char v7; // dl
  __int64 v8; // rdx
  data::ConfigAbilityPredicateArray *p_conditions; // rsi
  bool is_json_loaded; // cl
  char v11; // al
  data::InputActionUseable *v12; // [rsp+0h] [rbp-10h]

  v12 = a2;
  if ( *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)a2 >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(a2);
  }
  input_action_type = a2->input_action_type;
  v3 = *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000);
  if ( v3 != 0 && v3 <= 3 )
  {
    LOBYTE(a2) = v3 != 0;
    __asan_report_store4(this, a2);
  }
  this->input_action_type = input_action_type;
  v4 = ((_BYTE)v12 + 4) & 7;
  v5 = (*(_BYTE *)(((unsigned __int64)&v12->check_can_do_skill >> 3) + 0x7FFF8000) != 0) & (unsigned __int8)((char)v4 >= *(_BYTE *)(((unsigned __int64)&v12->check_can_do_skill >> 3) + 0x7FFF8000));
  if ( (_BYTE)v5 )
    __asan_report_load1(&v12->check_can_do_skill, v4, v5);
  check_can_do_skill = v12->check_can_do_skill;
  v7 = *(_BYTE *)(((unsigned __int64)&this->check_can_do_skill >> 3) + 0x7FFF8000);
  LOBYTE(v4) = v7 != 0;
  v8 = (v7 != 0) & (unsigned __int8)((((unsigned __int8)this + 4) & 7) >= v7);
  if ( (_BYTE)v8 )
    __asan_report_store1(&this->check_can_do_skill, v4, v8);
  this->check_can_do_skill = check_can_do_skill;
  p_conditions = &v12->conditions;
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::vector(&this->conditions, &v12->conditions);
  if ( *(char *)(((unsigned __int64)&v12->is_json_loaded >> 3) + 0x7FFF8000) < 0 )
    __asan_report_load1(&v12->is_json_loaded, p_conditions, &v12->is_json_loaded);
  is_json_loaded = v12->is_json_loaded;
  v11 = *(_BYTE *)(((unsigned __int64)&this->is_json_loaded >> 3) + 0x7FFF8000);
  if ( v11 < 0 )
  {
    LOBYTE(p_conditions) = v11 != 0;
    __asan_report_store1(&this->is_json_loaded, p_conditions, &this->is_json_loaded);
  }
  this->is_json_loaded = is_json_loaded;
};

// Line 12055: range 0000000010197396-00000000101973B4
void __cdecl data::InputActionUseable::~InputActionUseable(data::InputActionUseable *const this)
{
  std::vector<std::shared_ptr<data::ConfigAbilityPredicate>>::~vector(&this->conditions);
};

// Line 12085: range 00000000112EEFBC-00000000112EF057
void __cdecl data::InputActionUseableMixin::InputActionUseableMixin(data::InputActionUseableMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  data::ConfigAbilityMixin::ConfigAbilityMixin(this);
  v2 = (int (**)(...))(&`vtable for'data::InputActionUseableMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&this->input_action_controller_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&this->input_action_controller_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_store4(&this->input_action_controller_type, v1);
  }
  this->input_action_controller_type = ElectroherculesBattle;
  std::vector<data::InputActionUseable>::vector(&this->useable_list);
};

// Line 12085: range 00000000112EF45C-00000000112EF567
void __cdecl data::InputActionUseableMixin::InputActionUseableMixin(
        data::InputActionUseableMixin *const this,
        const data::InputActionUseableMixin *a2)
{
  int (**v2)(...); // rdx
  data::InputActionControllerType input_action_controller_type; // ecx
  char v4; // al
  const data::InputActionUseableMixin *v5; // [rsp+0h] [rbp-20h]

  v5 = a2;
  data::ConfigAbilityMixin::ConfigAbilityMixin(this, a2);
  v2 = (int (**)(...))(&`vtable for'data::InputActionUseableMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, a2);
  this->_vptr_BaseActionContainer = v2;
  if ( *(_BYTE *)(((unsigned __int64)&a2->input_action_controller_type >> 3) + 0x7FFF8000) != 0
    && *(_BYTE *)(((unsigned __int64)&a2->input_action_controller_type >> 3) + 0x7FFF8000) <= 3 )
  {
    __asan_report_load4(&a2->input_action_controller_type);
  }
  input_action_controller_type = a2->input_action_controller_type;
  v4 = *(_BYTE *)(((unsigned __int64)&this->input_action_controller_type >> 3) + 0x7FFF8000);
  if ( v4 != 0 && v4 <= 3 )
  {
    LOBYTE(a2) = v4 != 0;
    __asan_report_store4(&this->input_action_controller_type, a2);
  }
  this->input_action_controller_type = input_action_controller_type;
  std::vector<data::InputActionUseable>::vector(&this->useable_list, &v5->useable_list);
};

// Line 12093: range 00000000112F9ACE-00000000112F9B2B
void __cdecl data::InputActionUseableMixin::~InputActionUseableMixin(data::InputActionUseableMixin *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InputActionUseableMixin + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_BaseActionContainer = v2;
  std::vector<data::InputActionUseable>::~vector(&this->useable_list);
  data::ConfigAbilityMixin::~ConfigAbilityMixin(this);
};

// Line 12093: range 00000000112F9B2C-00000000112F9B56
void __cdecl data::InputActionUseableMixin::~InputActionUseableMixin(data::InputActionUseableMixin *const this)
{
  data::InputActionUseableMixin::~InputActionUseableMixin(this);
  operator delete(this, 0x40uLL);
};

// Line 12098: range 00000000100DB198-00000000100DB1A8
const char *__cdecl data::InputActionUseableMixin::getTypeName(const data::InputActionUseableMixin *const this)
{
  return "InputActionUseableMixin";
};

// Line 12099: range 00000000100DB1AA-00000000100DB346
int32_t __cdecl data::InputActionUseableMixin::getHashNum(const data::InputActionUseableMixin *const this)
{
  unsigned __int64 v1; // r12
  __int64 v2; // rax
  _DWORD *v3; // r13
  int32_t StringHash; // r14d
  int32_t result; // eax
  char v6[176]; // [rsp+10h] [rbp-B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_1(128LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "2 48 1 9 <unknown> 64 32 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::InputActionUseableMixin::getHashNum;
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862723] = -202116109;
  std::allocator<char>::allocator(v1 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v1 + 64),
    "InputActionUseableMixin",
    (const std::allocator<char> *)(v1 + 48));
  StringHash = getStringHash((const std::string *)(v1 + 64));
  std::string::~string((void *)(v1 + 64));
  *(_DWORD *)(((v1 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v1 + 48);
  result = StringHash;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 12115: range 00000000112EF850-00000000112EF891
void __cdecl data::InputActionUseableMixinFactory::InputActionUseableMixinFactory(
        data::InputActionUseableMixinFactory *const this)
{
  __int64 v1; // rsi
  int (**v2)(...); // rdx

  v2 = (int (**)(...))(&`vtable for'data::InputActionUseableMixinFactory + 2);
  if ( *(_BYTE *)(((unsigned __int64)this >> 3) + 0x7FFF8000) )
    __asan_report_store8(this, v1);
  this->_vptr_InputActionUseableMixinFactory = v2;
};
