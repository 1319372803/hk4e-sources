// File: /data/jenkins/jenkins_hk4e/workspace/hk4e_3.4_dev/hk4e_data/src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp

// Line 12: range 000000000FA1180E-000000000FA11B81
const char *__fastcall data::enumValToStr(data::ArithType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::ArithType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::ArithType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 4 e:11 64 8 7 iter:14 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getArithTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::ArithType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ArithType,std::pair<std::string,std::string>>::find(
                                                                                                  map,
                                                                                                  (const std::map<data::ArithType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::ArithType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ArithType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::ArithType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::ArithType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      17);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_ArithType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::ArithType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::ArithType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 24: range 000000000FA11B82-000000000FA1213A
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ArithType>,false,true>::pointer v10; // rax
  data::ArithType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::ArithType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 5 it:33 96 8 9 <unknown> 128 8 4 s:23 160 32 9 <unknown> 224 32 9 <unkno"
                        "wn> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getArithTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::ArithType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ArithType>::find(
                                                                                      m,
                                                                                      (const std::unordered_map<std::string,data::ArithType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::ArithType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::ArithType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::ArithType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ArithType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ArithType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        36);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::ArithType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::ArithType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      27);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 45: range 000000000FA1213B-000000000FA12C39
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::ArithType> *i; // r14
  _DWORD *v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::ArithType>,false,true>::pointer v12; // rax
  data::ArithType second; // ecx
  char v14; // dl
  char v16[720]; // [rsp+20h] [rbp-2D0h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(672LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "15 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 8 5 it:60 192 8 9 <unknown> 224 8 4 s:44 256 3"
                        "2 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 160 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862739] = -202116109;
  v4[536862740] = -202116109;
  *(_QWORD *)(v2 + 224) = s;
  if ( *(_QWORD *)(v2 + 224) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::ArithType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::ArithType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::ArithType>::pair<char const(&)[4],data::ArithType,true>(
        (std::pair<const std::string,data::ArithType> *const)(v2 + 448),
        (const char (*)[4])off_1A6220E0,
        (data::ArithType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, off_1A6220E0);
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::ArithType>::pair<char const(&)[4],data::ArithType,true>(
        (std::pair<const std::string,data::ArithType> *const)(v2 + 488),
        (const char (*)[4])off_1A622120,
        (data::ArithType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, off_1A622120);
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::ArithType>::pair<char const(&)[4],data::ArithType,true>(
        (std::pair<const std::string,data::ArithType> *const)(v2 + 528),
        (const char (*)[4])off_1A622160,
        (data::ArithType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, off_1A622160);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::ArithType>::pair<char const(&)[4],data::ArithType,true>(
        (std::pair<const std::string,data::ArithType> *const)(v2 + 568),
        (const char (*)[4])off_1A6221A0,
        (data::ArithType *)(v2 + 144));
      std::allocator<std::pair<std::string const,data::ArithType>>::allocator((std::allocator<std::pair<const std::string,data::ArithType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::ArithType>::unordered_map(
        &data::enumStrToVal(char const*,data::ArithType &)::m,
        (std::initializer_list<std::pair<const std::string,data::ArithType> >)__PAIR128__(4LL, v2 + 448),
        0LL,
        (const std::unordered_map<std::string,data::ArithType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::ArithType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::ArithType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::ArithType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::ArithType>::~unordered_map,
        &data::enumStrToVal(char const*,data::ArithType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ArithType>>::~allocator((std::allocator<std::pair<const std::string,data::ArithType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ArithType> *)(v2 + 608);
            i != (std::pair<const std::string,data::ArithType> *)(v2 + 448);
            std::pair<std::string const,data::ArithType>::~pair(i) )
      {
        --i;
      }
      v7 = (_DWORD *)(((v2 + 448) >> 3) + 2147450880);
      *v7 = -117901064;
      v7[1] = -117901064;
      v7[2] = -117901064;
      v7[3] = -117901064;
      v7[4] = -117901064;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v8 = *(const char **)(v2 + 224);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      v8,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v8);
    *(std::unordered_map<std::string,data::ArithType>::iterator *)(v2 + 160) = std::unordered_map<std::string,data::ArithType>::find(
                                                                                 &data::enumStrToVal(char const*,data::ArithType &)::m,
                                                                                 (const std::unordered_map<std::string,data::ArithType>::key_type *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v2 + 320);
    *(std::unordered_map<std::string,data::ArithType>::iterator *)(v2 + 192) = std::unordered_map<std::string,data::ArithType>::end(&data::enumStrToVal(char const*,data::ArithType &)::m);
    v9 = (char *)(v2 + 192);
    v10 = std::__detail::operator==<std::pair<std::string const,data::ArithType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ArithType>,true> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ArithType>,true> *)(v2 + 192));
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        63);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 384),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 224));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::ArithType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ArithType>,false,true> *const)(v2 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 127) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      48);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 72: range 000000000FA12C3A-000000000FA12C50
const char *__cdecl data::getDescription(data::ArithType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 77: range 000000000FA12C51-000000000FA12E06
bool __cdecl data::isValidArithType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::ArithType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::ArithType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 4 e:78 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidArithType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getArithTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::ArithType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ArithType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getArithTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::ArithType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ArithType,std::pair<std::string,std::string>>::find(
                                                                                                  v6,
                                                                                                  (const std::map<data::ArithType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::ArithType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::ArithType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 83: range 000000000FA12E07-000000000FA12F68
bool __cdecl data::isValidArithTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::ArithType> *v5; // rcx
  const std::unordered_map<std::string,data::ArithType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidArithTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getArithTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::ArithType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ArithType>::end(v5);
  v6 = data::getArithTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::ArithType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::ArithType>::find(
                                                                                    v6,
                                                                                    name);
  result = std::__detail::operator!=<std::pair<std::string const,data::ArithType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ArithType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ArithType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 88: range 000000000FA12F69-000000000FA13583
const std::unordered_map<std::string,data::ArithType> *__cdecl data::getArithTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::ArithType> *i; // r14
  const std::unordered_map<std::string,data::ArithType> *result; // rax
  char v6[496]; // [rsp+10h] [rbp-1F0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(448LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9 "
                        "<unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 200 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getArithTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = 61956;
  v3[536862731] = -218103808;
  v3[536862732] = -202116109;
  v3[536862733] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getArithTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getArithTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::ArithType>::pair<char const(&)[11],data::ArithType,true>(
      (std::pair<const std::string,data::ArithType> *const)(v1 + 176),
      (const char (*)[11])"ARITH_NONE",
      (data::ArithType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "ARITH_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::ArithType>::pair<char const(&)[10],data::ArithType,true>(
      (std::pair<const std::string,data::ArithType> *const)(v1 + 216),
      (const char (*)[10])"ARITH_ADD",
      (data::ArithType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "ARITH_ADD");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::ArithType>::pair<char const(&)[12],data::ArithType,true>(
      (std::pair<const std::string,data::ArithType> *const)(v1 + 256),
      (const char (*)[12])"ARITH_MULTI",
      (data::ArithType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "ARITH_MULTI");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::ArithType>::pair<char const(&)[10],data::ArithType,true>(
      (std::pair<const std::string,data::ArithType> *const)(v1 + 296),
      (const char (*)[10])"ARITH_SUB",
      (data::ArithType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "ARITH_SUB");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::ArithType>::pair<char const(&)[13],data::ArithType,true>(
      (std::pair<const std::string,data::ArithType> *const)(v1 + 336),
      (const char (*)[13])"ARITH_DIVIDE",
      (data::ArithType *)(v1 + 160));
    std::allocator<std::pair<std::string const,data::ArithType>>::allocator((std::allocator<std::pair<const std::string,data::ArithType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::ArithType>::unordered_map(
      &data::getArithTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::ArithType> >)__PAIR128__(5LL, v1 + 176),
      0LL,
      (const std::unordered_map<std::string,data::ArithType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::ArithType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::ArithType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getArithTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::ArithType>::~unordered_map,
      &data::getArithTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::ArithType>>::~allocator((std::allocator<std::pair<const std::string,data::ArithType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::ArithType> *)(v1 + 376);
          i != (std::pair<const std::string,data::ArithType> *)(v1 + 176);
          std::pair<std::string const,data::ArithType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getArithTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 101: range 000000000FA13584-000000000FA13E49
const std::map<data::ArithType,std::pair<std::string,std::string >> *__cdecl data::getArithTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::ArithType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  char v10[1104]; // [rsp+10h] [rbp-450h] BYREF

  v1 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1056LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "13 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 64 9 <unknown> 240 64 9 <unknown> 336 64 9 <unknown> 432 64 9 <u"
                        "nknown> 528 64 9 <unknown> 624 360 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getArithTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = 61956;
  v3[536862726] = -219021312;
  v3[536862727] = 62194;
  v3[536862729] = -219021312;
  v3[536862730] = 62194;
  v3[536862732] = -219021312;
  v3[536862733] = 62194;
  v3[536862735] = -219021312;
  v3[536862736] = 62194;
  v3[536862738] = -219021312;
  v3[536862739] = 62194;
  v3[536862750] = -218103808;
  v3[536862751] = -202116109;
  v3[536862752] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getArithTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getArithTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[11],true>(
      (std::pair<std::string,std::string > *const)(v1 + 144),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[11])"ARITH_NONE");
    std::pair<data::ArithType const,std::pair<std::string,std::string>>::pair<data::ArithType,true>(
      (std::pair<const data::ArithType,std::pair<std::string,std::string > > *const)(v1 + 624),
      (data::ArithType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 240),
      (const char (*)[4])off_1A6220E0,
      (const char (*)[10])"ARITH_ADD");
    std::pair<data::ArithType const,std::pair<std::string,std::string>>::pair<data::ArithType,true>(
      (std::pair<const data::ArithType,std::pair<std::string,std::string > > *const)(v1 + 696),
      (data::ArithType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[12],true>(
      (std::pair<std::string,std::string > *const)(v1 + 336),
      (const char (*)[4])off_1A622120,
      (const char (*)[12])"ARITH_MULTI");
    std::pair<data::ArithType const,std::pair<std::string,std::string>>::pair<data::ArithType,true>(
      (std::pair<const data::ArithType,std::pair<std::string,std::string > > *const)(v1 + 768),
      (data::ArithType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 432),
      (const char (*)[4])off_1A622160,
      (const char (*)[10])"ARITH_SUB");
    std::pair<data::ArithType const,std::pair<std::string,std::string>>::pair<data::ArithType,true>(
      (std::pair<const data::ArithType,std::pair<std::string,std::string > > *const)(v1 + 840),
      (data::ArithType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 528),
      (const char (*)[4])off_1A6221A0,
      (const char (*)[13])"ARITH_DIVIDE");
    std::pair<data::ArithType const,std::pair<std::string,std::string>>::pair<data::ArithType,true>(
      (std::pair<const data::ArithType,std::pair<std::string,std::string > > *const)(v1 + 912),
      (data::ArithType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 528));
    std::allocator<std::pair<data::ArithType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::ArithType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::ArithType,std::pair<std::string,std::string>>::map(
      &data::getArithTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::ArithType,std::pair<std::string,std::string > > >)__PAIR128__(5LL, v1 + 624),
      (const std::less<data::ArithType> *)(v1 + 32),
      (const std::map<data::ArithType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getArithTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::ArithType,std::pair<std::string,std::string>>::~map,
      &data::getArithTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::ArithType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::ArithType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::ArithType,std::pair<std::string,std::string > > *)(v1 + 984);
          i != (std::pair<const data::ArithType,std::pair<std::string,std::string > > *)(v1 + 624);
          std::pair<data::ArithType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 624, 360LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 528));
    v5 = (_DWORD *)(((v1 + 528) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 432));
    v6 = (_DWORD *)(((v1 + 432) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 336));
    v7 = (_DWORD *)(((v1 + 336) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 240));
    v8 = (_DWORD *)(((v1 + 240) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 144));
  }
  if ( v10 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF807C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 132) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1056LL, v10);
  }
  return &data::getArithTypeEnumMap[abi:cxx11](void)::m;
};

// Line 114: range 000000000FA13E4A-000000000FA141BD
const char *__fastcall data::enumValToStr(data::QualityType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::QualityType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::QualityType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:113 64 8 8 iter:116 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getQualityTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::QualityType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::QualityType,std::pair<std::string,std::string>>::find(
                                                                                                    map,
                                                                                                    (const std::map<data::QualityType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::QualityType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::QualityType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::QualityType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::QualityType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      119);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_QualityType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::QualityType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::QualityType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 126: range 000000000FA141BE-000000000FA14776
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::QualityType>,false,true>::pointer v10; // rax
  data::QualityType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::QualityType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:135 96 8 9 <unknown> 128 8 5 s:125 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getQualityTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::QualityType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::QualityType>::find(
                                                                                        m,
                                                                                        (const std::unordered_map<std::string,data::QualityType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::QualityType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::QualityType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::QualityType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::QualityType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::QualityType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        138);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::QualityType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::QualityType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      129);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 147: range 000000000FA14777-000000000FA153F9
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::QualityType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::QualityType>,false,true>::pointer v12; // rax
  data::QualityType second; // ecx
  char v14; // dl
  char v16[848]; // [rsp+20h] [rbp-350h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(800LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 8 6 it:16"
                        "4 240 8 9 <unknown> 272 8 5 s:146 304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496 240 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = 61956;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862743] = -202116109;
  v4[536862744] = -202116109;
  *(_QWORD *)(v2 + 272) = s;
  if ( *(_QWORD *)(v2 + 272) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::QualityType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::QualityType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::QualityType>::pair<char const(&)[4],data::QualityType,true>(
        (std::pair<const std::string,data::QualityType> *const)(v2 + 496),
        (const char (*)[4])off_1A622780,
        (data::QualityType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, off_1A622780);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::QualityType>::pair<char const(&)[4],data::QualityType,true>(
        (std::pair<const std::string,data::QualityType> *const)(v2 + 536),
        (const char (*)[4])off_1A6227C0,
        (data::QualityType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, off_1A6227C0);
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::QualityType>::pair<char const(&)[4],data::QualityType,true>(
        (std::pair<const std::string,data::QualityType> *const)(v2 + 576),
        (const char (*)[4])off_1A622800,
        (data::QualityType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, off_1A622800);
      *(_DWORD *)(v2 + 160) = 4;
      std::pair<std::string const,data::QualityType>::pair<char const(&)[4],data::QualityType,true>(
        (std::pair<const std::string,data::QualityType> *const)(v2 + 616),
        (const char (*)[4])off_1A622840,
        (data::QualityType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, off_1A622840);
      *(_DWORD *)(v2 + 176) = 5;
      std::pair<std::string const,data::QualityType>::pair<char const(&)[4],data::QualityType,true>(
        (std::pair<const std::string,data::QualityType> *const)(v2 + 656),
        (const char (*)[4])off_1A622880,
        (data::QualityType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, off_1A622880);
      *(_DWORD *)(v2 + 192) = 105;
      std::pair<std::string const,data::QualityType>::pair<char const(&)[6],data::QualityType,true>(
        (std::pair<const std::string,data::QualityType> *const)(v2 + 696),
        (const char (*)[6])byte_1A6228C0,
        (data::QualityType *)(v2 + 192));
      std::allocator<std::pair<std::string const,data::QualityType>>::allocator((std::allocator<std::pair<const std::string,data::QualityType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::QualityType>::unordered_map(
        &data::enumStrToVal(char const*,data::QualityType &)::m,
        (std::initializer_list<std::pair<const std::string,data::QualityType> >)__PAIR128__(6LL, v2 + 496),
        0LL,
        (const std::unordered_map<std::string,data::QualityType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::QualityType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::QualityType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::QualityType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::QualityType>::~unordered_map,
        &data::enumStrToVal(char const*,data::QualityType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::QualityType>>::~allocator((std::allocator<std::pair<const std::string,data::QualityType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::QualityType> *)(v2 + 736);
            i != (std::pair<const std::string,data::QualityType> *)(v2 + 496);
            std::pair<std::string const,data::QualityType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 496) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_DWORD *)(v7 + 12) = -117901064;
      *(_DWORD *)(v7 + 16) = -117901064;
      *(_DWORD *)(v7 + 20) = -117901064;
      *(_DWORD *)(v7 + 24) = -117901064;
      *(_WORD *)(v7 + 28) = -1800;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 272);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 368),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, v8);
    *(std::unordered_map<std::string,data::QualityType>::iterator *)(v2 + 208) = std::unordered_map<std::string,data::QualityType>::find(
                                                                                   &data::enumStrToVal(char const*,data::QualityType &)::m,
                                                                                   (const std::unordered_map<std::string,data::QualityType>::key_type *)(v2 + 368));
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, v2 + 368);
    *(std::unordered_map<std::string,data::QualityType>::iterator *)(v2 + 240) = std::unordered_map<std::string,data::QualityType>::end(&data::enumStrToVal(char const*,data::QualityType &)::m);
    v9 = (char *)(v2 + 240);
    v10 = std::__detail::operator==<std::pair<std::string const,data::QualityType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::QualityType>,true> *)(v2 + 208),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::QualityType>,true> *)(v2 + 240));
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 432, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 432),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        167);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 432),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 272));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
      LODWORD(result) = -1;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::QualityType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::QualityType>,false,true> *const)(v2 + 208));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      LODWORD(result) = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 304),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      150);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 304),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
    LODWORD(result) = -1;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = -168430091;
  }
  return (unsigned int)result;
};

// Line 176: range 000000000FA153FA-000000000FA15410
const char *__cdecl data::getDescription(data::QualityType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 181: range 000000000FA15411-000000000FA155C6
bool __cdecl data::isValidQualityType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::QualityType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::QualityType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:182 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidQualityType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getQualityTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::QualityType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::QualityType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getQualityTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::QualityType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::QualityType,std::pair<std::string,std::string>>::find(
                                                                                                    v6,
                                                                                                    (const std::map<data::QualityType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::QualityType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::QualityType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 187: range 000000000FA155C7-000000000FA15728
bool __cdecl data::isValidQualityTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::QualityType> *v5; // rcx
  const std::unordered_map<std::string,data::QualityType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidQualityTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getQualityTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::QualityType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::QualityType>::end(v5);
  v6 = data::getQualityTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::QualityType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::QualityType>::find(
                                                                                      v6,
                                                                                      name);
  result = std::__detail::operator!=<std::pair<std::string const,data::QualityType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::QualityType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::QualityType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 192: range 000000000FA15729-000000000FA15E32
const std::unordered_map<std::string,data::QualityType> *__cdecl data::getQualityTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::QualityType> *i; // r14
  const std::unordered_map<std::string,data::QualityType> *result; // rax
  char v6[592]; // [rsp+10h] [rbp-250h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(544LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 280 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getQualityTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862734] = -218103808;
  v3[536862735] = -202116109;
  v3[536862736] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getQualityTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getQualityTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::QualityType>::pair<char const(&)[13],data::QualityType,true>(
      (std::pair<const std::string,data::QualityType> *const)(v1 + 192),
      (const char (*)[13])"QUALITY_NONE",
      (data::QualityType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "QUALITY_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::QualityType>::pair<char const(&)[14],data::QualityType,true>(
      (std::pair<const std::string,data::QualityType> *const)(v1 + 232),
      (const char (*)[14])"QUALITY_WHITE",
      (data::QualityType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "QUALITY_WHITE");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::QualityType>::pair<char const(&)[14],data::QualityType,true>(
      (std::pair<const std::string,data::QualityType> *const)(v1 + 272),
      (const char (*)[14])"QUALITY_GREEN",
      (data::QualityType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "QUALITY_GREEN");
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string const,data::QualityType>::pair<char const(&)[13],data::QualityType,true>(
      (std::pair<const std::string,data::QualityType> *const)(v1 + 312),
      (const char (*)[13])"QUALITY_BLUE",
      (data::QualityType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "QUALITY_BLUE");
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string const,data::QualityType>::pair<char const(&)[15],data::QualityType,true>(
      (std::pair<const std::string,data::QualityType> *const)(v1 + 352),
      (const char (*)[15])"QUALITY_PURPLE",
      (data::QualityType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "QUALITY_PURPLE");
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string const,data::QualityType>::pair<char const(&)[15],data::QualityType,true>(
      (std::pair<const std::string,data::QualityType> *const)(v1 + 392),
      (const char (*)[15])"QUALITY_ORANGE",
      (data::QualityType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "QUALITY_ORANGE");
    *(_DWORD *)(v1 + 176) = 105;
    std::pair<std::string const,data::QualityType>::pair<char const(&)[18],data::QualityType,true>(
      (std::pair<const std::string,data::QualityType> *const)(v1 + 432),
      (const char (*)[18])"QUALITY_ORANGE_SP",
      (data::QualityType *)(v1 + 176));
    std::allocator<std::pair<std::string const,data::QualityType>>::allocator((std::allocator<std::pair<const std::string,data::QualityType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::QualityType>::unordered_map(
      &data::getQualityTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::QualityType> >)__PAIR128__(7LL, v1 + 192),
      0LL,
      (const std::unordered_map<std::string,data::QualityType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::QualityType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::QualityType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getQualityTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::QualityType>::~unordered_map,
      &data::getQualityTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::QualityType>>::~allocator((std::allocator<std::pair<const std::string,data::QualityType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::QualityType> *)(v1 + 472);
          i != (std::pair<const std::string,data::QualityType> *)(v1 + 192);
          std::pair<std::string const,data::QualityType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getQualityTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 207: range 000000000FA15E33-000000000FA16906
const std::map<data::QualityType,std::pair<std::string,std::string >> *__cdecl data::getQualityTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::QualityType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  char v12[1488]; // [rsp+10h] [rbp-5D0h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1440LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 64 9 <unknown> 288 64 9 <un"
                        "known> 384 64 9 <unknown> 480 64 9 <unknown> 576 64 9 <unknown> 672 64 9 <unknown> 768 64 9 <unk"
                        "nown> 864 504 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getQualityTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862728] = -218959118;
  v3[536862731] = -218959118;
  v3[536862734] = -218959118;
  v3[536862737] = -218959118;
  v3[536862740] = -218959118;
  v3[536862743] = -218959118;
  v3[536862746] = -218959118;
  v3[536862762] = -218103808;
  v3[536862763] = -202116109;
  v3[536862764] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getQualityTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getQualityTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 192),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[13])"QUALITY_NONE");
    std::pair<data::QualityType const,std::pair<std::string,std::string>>::pair<data::QualityType,true>(
      (std::pair<const data::QualityType,std::pair<std::string,std::string > > *const)(v1 + 864),
      (data::QualityType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 288),
      (const char (*)[4])off_1A622780,
      (const char (*)[14])"QUALITY_WHITE");
    std::pair<data::QualityType const,std::pair<std::string,std::string>>::pair<data::QualityType,true>(
      (std::pair<const data::QualityType,std::pair<std::string,std::string > > *const)(v1 + 936),
      (data::QualityType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 384),
      (const char (*)[4])off_1A6227C0,
      (const char (*)[14])"QUALITY_GREEN");
    std::pair<data::QualityType const,std::pair<std::string,std::string>>::pair<data::QualityType,true>(
      (std::pair<const data::QualityType,std::pair<std::string,std::string > > *const)(v1 + 1008),
      (data::QualityType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 480),
      (const char (*)[4])off_1A622800,
      (const char (*)[13])"QUALITY_BLUE");
    std::pair<data::QualityType const,std::pair<std::string,std::string>>::pair<data::QualityType,true>(
      (std::pair<const data::QualityType,std::pair<std::string,std::string > > *const)(v1 + 1080),
      (data::QualityType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 576),
      (const char (*)[4])off_1A622840,
      (const char (*)[15])"QUALITY_PURPLE");
    std::pair<data::QualityType const,std::pair<std::string,std::string>>::pair<data::QualityType,true>(
      (std::pair<const data::QualityType,std::pair<std::string,std::string > > *const)(v1 + 1152),
      (data::QualityType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 672),
      (const char (*)[4])off_1A622880,
      (const char (*)[15])"QUALITY_ORANGE");
    std::pair<data::QualityType const,std::pair<std::string,std::string>>::pair<data::QualityType,true>(
      (std::pair<const data::QualityType,std::pair<std::string,std::string > > *const)(v1 + 1224),
      (data::QualityType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 105;
    std::pair<std::string,std::string>::pair<char const(&)[6],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 768),
      (const char (*)[6])byte_1A6228C0,
      (const char (*)[18])"QUALITY_ORANGE_SP");
    std::pair<data::QualityType const,std::pair<std::string,std::string>>::pair<data::QualityType,true>(
      (std::pair<const data::QualityType,std::pair<std::string,std::string > > *const)(v1 + 1296),
      (data::QualityType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 768));
    std::allocator<std::pair<data::QualityType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::QualityType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::QualityType,std::pair<std::string,std::string>>::map(
      &data::getQualityTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::QualityType,std::pair<std::string,std::string > > >)__PAIR128__(7LL, v1 + 864),
      (const std::less<data::QualityType> *)(v1 + 48),
      (const std::map<data::QualityType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getQualityTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::QualityType,std::pair<std::string,std::string>>::~map,
      &data::getQualityTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::QualityType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::QualityType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::QualityType,std::pair<std::string,std::string > > *)(v1 + 1368);
          i != (std::pair<const data::QualityType,std::pair<std::string,std::string > > *)(v1 + 864);
          std::pair<data::QualityType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 864, 504LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 768));
    v5 = (_DWORD *)(((v1 + 768) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 672));
    v6 = (_DWORD *)(((v1 + 672) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 576));
    v7 = (_DWORD *)(((v1 + 576) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 480));
    v8 = (_DWORD *)(((v1 + 480) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 384));
    v9 = (_DWORD *)(((v1 + 384) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 288));
    v10 = (_DWORD *)(((v1 + 288) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 192));
  }
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF80AC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 180) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1440LL, v12);
  }
  return &data::getQualityTypeEnumMap[abi:cxx11](void)::m;
};

// Line 222: range 000000000FA16907-000000000FA16C7A
const char *__fastcall data::enumValToStr(data::JobType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::JobType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::JobType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:221 64 8 8 iter:224 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getJobTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::JobType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::JobType,std::pair<std::string,std::string>>::find(
                                                                                                map,
                                                                                                (const std::map<data::JobType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::JobType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::JobType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::JobType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::JobType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      227);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_JobType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::JobType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::JobType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 234: range 000000000FA16C7B-000000000FA17233
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::JobType>,false,true>::pointer v10; // rax
  data::JobType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::JobType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:243 96 8 9 <unknown> 128 8 5 s:233 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getJobTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::JobType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::JobType>::find(
                                                                                    m,
                                                                                    (const std::unordered_map<std::string,data::JobType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::JobType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::JobType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::JobType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::JobType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::JobType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        246);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::JobType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::JobType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      237);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 255: range 000000000FA17234-000000000FA17BFD
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::JobType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::JobType>,false,true>::pointer v12; // rax
  data::JobType second; // ecx
  char v14; // dl
  char v16[592]; // [rsp+20h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 8 6 it:268 176 8 9 <unknown> 208 8 5 s:254 240 32 9 <unknown> 304 32 9 <unknown> "
                        "368 32 9 <unknown> 432 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = 61956;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862736] = -202116109;
  *(_QWORD *)(v2 + 208) = s;
  if ( *(_QWORD *)(v2 + 208) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::JobType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::JobType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::JobType>::pair<char const(&)[7],data::JobType,true>(
        (std::pair<const std::string,data::JobType> *const)(v2 + 432),
        (const char (*)[7])byte_1A622F20,
        (data::JobType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A622F20);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::JobType>::pair<char const(&)[7],data::JobType,true>(
        (std::pair<const std::string,data::JobType> *const)(v2 + 472),
        (const char (*)[7])byte_1A622F60,
        (data::JobType *)(v2 + 128));
      std::allocator<std::pair<std::string const,data::JobType>>::allocator((std::allocator<std::pair<const std::string,data::JobType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::JobType>::unordered_map(
        &data::enumStrToVal(char const*,data::JobType &)::m,
        (std::initializer_list<std::pair<const std::string,data::JobType> >)__PAIR128__(2LL, v2 + 432),
        0LL,
        (const std::unordered_map<std::string,data::JobType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::JobType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::JobType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::JobType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::JobType>::~unordered_map,
        &data::enumStrToVal(char const*,data::JobType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::JobType>>::~allocator((std::allocator<std::pair<const std::string,data::JobType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::JobType> *)(v2 + 512);
            i != (std::pair<const std::string,data::JobType> *)(v2 + 432);
            std::pair<std::string const,data::JobType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 432) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 208);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 304),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v8);
    *(std::unordered_map<std::string,data::JobType>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::JobType>::find(
                                                                               &data::enumStrToVal(char const*,data::JobType &)::m,
                                                                               (const std::unordered_map<std::string,data::JobType>::key_type *)(v2 + 304));
    std::string::~string((void *)(v2 + 304));
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 176, v2 + 304);
    *(std::unordered_map<std::string,data::JobType>::iterator *)(v2 + 176) = std::unordered_map<std::string,data::JobType>::end(&data::enumStrToVal(char const*,data::JobType &)::m);
    v9 = (char *)(v2 + 176);
    v10 = std::__detail::operator==<std::pair<std::string const,data::JobType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::JobType>,true> *)(v2 + 144),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::JobType>,true> *)(v2 + 176));
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 368, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 368),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        271);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 368),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 208));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::JobType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::JobType>,false,true> *const)(v2 + 144));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 240),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      258);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 240),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 280: range 000000000FA17BFE-000000000FA17C14
const char *__cdecl data::getDescription(data::JobType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 285: range 000000000FA17C15-000000000FA17DCA
bool __cdecl data::isValidJobType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::JobType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::JobType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:286 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidJobType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getJobTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::JobType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::JobType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getJobTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::JobType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::JobType,std::pair<std::string,std::string>>::find(
                                                                                                v6,
                                                                                                (const std::map<data::JobType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::JobType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::JobType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 291: range 000000000FA17DCB-000000000FA17F2C
bool __cdecl data::isValidJobTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::JobType> *v5; // rcx
  const std::unordered_map<std::string,data::JobType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidJobTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getJobTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::JobType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::JobType>::end(v5);
  v6 = data::getJobTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::JobType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::JobType>::find(
                                                                                  v6,
                                                                                  name);
  result = std::__detail::operator!=<std::pair<std::string const,data::JobType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::JobType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::JobType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 296: range 000000000FA17F2D-000000000FA183EF
const std::unordered_map<std::string,data::JobType> *__cdecl data::getJobTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::JobType> *i; // r14
  const std::unordered_map<std::string,data::JobType> *result; // rax
  char v6[336]; // [rsp+10h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <"
                        "unknown> 128 120 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getJobTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getJobTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getJobTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::JobType>::pair<char const(&)[9],data::JobType,true>(
      (std::pair<const std::string,data::JobType> *const)(v1 + 128),
      (const char (*)[9])"JOB_NONE",
      (data::JobType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "JOB_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::JobType>::pair<char const(&)[13],data::JobType,true>(
      (std::pair<const std::string,data::JobType> *const)(v1 + 168),
      (const char (*)[13])"JOB_SWORDMAN",
      (data::JobType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "JOB_SWORDMAN");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::JobType>::pair<char const(&)[11],data::JobType,true>(
      (std::pair<const std::string,data::JobType> *const)(v1 + 208),
      (const char (*)[11])"JOB_ARCHER",
      (data::JobType *)(v1 + 112));
    std::allocator<std::pair<std::string const,data::JobType>>::allocator((std::allocator<std::pair<const std::string,data::JobType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::JobType>::unordered_map(
      &data::getJobTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::JobType> >)__PAIR128__(3LL, v1 + 128),
      0LL,
      (const std::unordered_map<std::string,data::JobType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::JobType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::JobType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getJobTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::JobType>::~unordered_map,
      &data::getJobTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::JobType>>::~allocator((std::allocator<std::pair<const std::string,data::JobType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::JobType> *)(v1 + 248);
          i != (std::pair<const std::string,data::JobType> *)(v1 + 128);
          std::pair<std::string const,data::JobType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getJobTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 307: range 000000000FA183F0-000000000FA18AEE
const std::map<data::JobType,std::pair<std::string,std::string >> *__cdecl data::getJobTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::JobType,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[752]; // [rsp+10h] [rbp-2F0h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(704LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 64 9"
                        " <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 216 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getJobTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862739] = -218103808;
  v3[536862740] = -202116109;
  v3[536862741] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getJobTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getJobTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[9],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[9])"JOB_NONE");
    std::pair<data::JobType const,std::pair<std::string,std::string>>::pair<data::JobType,true>(
      (std::pair<const data::JobType,std::pair<std::string,std::string > > *const)(v1 + 416),
      (data::JobType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[7])byte_1A622F20,
      (const char (*)[13])"JOB_SWORDMAN");
    std::pair<data::JobType const,std::pair<std::string,std::string>>::pair<data::JobType,true>(
      (std::pair<const data::JobType,std::pair<std::string,std::string > > *const)(v1 + 488),
      (data::JobType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[11],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[7])byte_1A622F60,
      (const char (*)[11])"JOB_ARCHER");
    std::pair<data::JobType const,std::pair<std::string,std::string>>::pair<data::JobType,true>(
      (std::pair<const data::JobType,std::pair<std::string,std::string > > *const)(v1 + 560),
      (data::JobType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    std::allocator<std::pair<data::JobType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::JobType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::JobType,std::pair<std::string,std::string>>::map(
      &data::getJobTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::JobType,std::pair<std::string,std::string > > >)__PAIR128__(
                                                                                                     3LL,
                                                                                                     v1 + 416),
      (const std::less<data::JobType> *)(v1 + 48),
      (const std::map<data::JobType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getJobTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::JobType,std::pair<std::string,std::string>>::~map,
      &data::getJobTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::JobType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::JobType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::JobType,std::pair<std::string,std::string > > *)(v1 + 632);
          i != (std::pair<const data::JobType,std::pair<std::string,std::string > > *)(v1 + 416);
          std::pair<data::JobType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 416) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_DWORD *)(v5 + 16) = -117901064;
    *(_DWORD *)(v5 + 20) = -117901064;
    *(_WORD *)(v5 + 24) = -1800;
    *(_BYTE *)(v5 + 26) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return &data::getJobTypeEnumMap[abi:cxx11](void)::m;
};

// Line 318: range 000000000FA18AEF-000000000FA18E62
const char *__fastcall data::enumValToStr(data::BodyType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::BodyType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::BodyType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:317 64 8 8 iter:320 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getBodyTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::BodyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::BodyType,std::pair<std::string,std::string>>::find(
                                                                                                 map,
                                                                                                 (const std::map<data::BodyType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::BodyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::BodyType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::BodyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::BodyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      323);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_BodyType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::BodyType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::BodyType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 330: range 000000000FA18E63-000000000FA1941B
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::BodyType>,false,true>::pointer v10; // rax
  data::BodyType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::BodyType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:339 96 8 9 <unknown> 128 8 5 s:329 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getBodyTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::BodyType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::BodyType>::find(
                                                                                     m,
                                                                                     (const std::unordered_map<std::string,data::BodyType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::BodyType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::BodyType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::BodyType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::BodyType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::BodyType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        342);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::BodyType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::BodyType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      333);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 351: range 000000000FA1941C-000000000FA1A000
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::BodyType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::BodyType>,false,true>::pointer v12; // rax
  data::BodyType second; // ecx
  char v14; // dl
  char v16[784]; // [rsp+20h] [rbp-310h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(736LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "16 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 8 6 it:367 208 8 9 <unknown>"
                        " 240 8 5 s:350 272 32 9 <unknown> 336 32 9 <unknown> 400 32 9 <unknown> 464 200 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = 61956;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862740] = -218103808;
  v4[536862741] = -202116109;
  v4[536862742] = -202116109;
  *(_QWORD *)(v2 + 240) = s;
  if ( *(_QWORD *)(v2 + 240) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::BodyType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::BodyType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::BodyType>::pair<char const(&)[7],data::BodyType,true>(
        (std::pair<const std::string,data::BodyType> *const)(v2 + 464),
        (const char (*)[7])byte_1A623400,
        (data::BodyType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, byte_1A623400);
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::BodyType>::pair<char const(&)[7],data::BodyType,true>(
        (std::pair<const std::string,data::BodyType> *const)(v2 + 504),
        (const char (*)[7])byte_1A623440,
        (data::BodyType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A623440);
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::BodyType>::pair<char const(&)[7],data::BodyType,true>(
        (std::pair<const std::string,data::BodyType> *const)(v2 + 544),
        (const char (*)[7])byte_1A623480,
        (data::BodyType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A623480);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::BodyType>::pair<char const(&)[7],data::BodyType,true>(
        (std::pair<const std::string,data::BodyType> *const)(v2 + 584),
        (const char (*)[7])byte_1A6234C0,
        (data::BodyType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A6234C0);
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::BodyType>::pair<char const(&)[7],data::BodyType,true>(
        (std::pair<const std::string,data::BodyType> *const)(v2 + 624),
        (const char (*)[7])byte_1A623500,
        (data::BodyType *)(v2 + 160));
      std::allocator<std::pair<std::string const,data::BodyType>>::allocator((std::allocator<std::pair<const std::string,data::BodyType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::BodyType>::unordered_map(
        &data::enumStrToVal(char const*,data::BodyType &)::m,
        (std::initializer_list<std::pair<const std::string,data::BodyType> >)__PAIR128__(5LL, v2 + 464),
        0LL,
        (const std::unordered_map<std::string,data::BodyType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::BodyType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::BodyType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::BodyType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::BodyType>::~unordered_map,
        &data::enumStrToVal(char const*,data::BodyType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::BodyType>>::~allocator((std::allocator<std::pair<const std::string,data::BodyType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::BodyType> *)(v2 + 664);
            i != (std::pair<const std::string,data::BodyType> *)(v2 + 464);
            std::pair<std::string const,data::BodyType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 464) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_DWORD *)(v7 + 12) = -117901064;
      *(_DWORD *)(v7 + 16) = -117901064;
      *(_DWORD *)(v7 + 20) = -117901064;
      *(_BYTE *)(v7 + 24) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v8 = *(const char **)(v2 + 240);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 336),
      v8,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 176, v8);
    *(std::unordered_map<std::string,data::BodyType>::iterator *)(v2 + 176) = std::unordered_map<std::string,data::BodyType>::find(
                                                                                &data::enumStrToVal(char const*,data::BodyType &)::m,
                                                                                (const std::unordered_map<std::string,data::BodyType>::key_type *)(v2 + 336));
    std::string::~string((void *)(v2 + 336));
    *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, v2 + 336);
    *(std::unordered_map<std::string,data::BodyType>::iterator *)(v2 + 208) = std::unordered_map<std::string,data::BodyType>::end(&data::enumStrToVal(char const*,data::BodyType &)::m);
    v9 = (char *)(v2 + 208);
    v10 = std::__detail::operator==<std::pair<std::string const,data::BodyType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::BodyType>,true> *)(v2 + 176),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::BodyType>,true> *)(v2 + 208));
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 400) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 400, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 400),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        370);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 400),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 240));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
      LODWORD(result) = -1;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::BodyType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::BodyType>,false,true> *const)(v2 + 176));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      LODWORD(result) = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 272) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 303) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 272, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 272),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      354);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 272),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 272));
    LODWORD(result) = -1;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 92) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = -168430091;
  }
  return (unsigned int)result;
};

// Line 379: range 000000000FA1A001-000000000FA1A017
const char *__cdecl data::getDescription(data::BodyType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 384: range 000000000FA1A018-000000000FA1A1CD
bool __cdecl data::isValidBodyType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::BodyType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::BodyType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:385 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidBodyType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getBodyTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::BodyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::BodyType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getBodyTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::BodyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::BodyType,std::pair<std::string,std::string>>::find(
                                                                                                 v6,
                                                                                                 (const std::map<data::BodyType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::BodyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::BodyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 390: range 000000000FA1A1CE-000000000FA1A32F
bool __cdecl data::isValidBodyTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::BodyType> *v5; // rcx
  const std::unordered_map<std::string,data::BodyType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidBodyTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getBodyTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::BodyType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::BodyType>::end(v5);
  v6 = data::getBodyTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::BodyType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::BodyType>::find(
                                                                                   v6,
                                                                                   name);
  result = std::__detail::operator!=<std::pair<std::string const,data::BodyType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::BodyType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::BodyType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 395: range 000000000FA1A330-000000000FA1A9D9
const std::unordered_map<std::string,data::BodyType> *__cdecl data::getBodyTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::BodyType> *i; // r14
  const std::unordered_map<std::string,data::BodyType> *result; // rax
  char v6[528]; // [rsp+10h] [rbp-210h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(480LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "10 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 240 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getBodyTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = 61956;
  v3[536862733] = -202116109;
  v3[536862734] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getBodyTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getBodyTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::BodyType>::pair<char const(&)[10],data::BodyType,true>(
      (std::pair<const std::string,data::BodyType> *const)(v1 + 176),
      (const char (*)[10])"BODY_NONE",
      (data::BodyType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "BODY_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::BodyType>::pair<char const(&)[9],data::BodyType,true>(
      (std::pair<const std::string,data::BodyType> *const)(v1 + 216),
      (const char (*)[9])"BODY_BOY",
      (data::BodyType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "BODY_BOY");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::BodyType>::pair<char const(&)[10],data::BodyType,true>(
      (std::pair<const std::string,data::BodyType> *const)(v1 + 256),
      (const char (*)[10])"BODY_GIRL",
      (data::BodyType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "BODY_GIRL");
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string const,data::BodyType>::pair<char const(&)[10],data::BodyType,true>(
      (std::pair<const std::string,data::BodyType> *const)(v1 + 296),
      (const char (*)[10])"BODY_LADY",
      (data::BodyType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "BODY_LADY");
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string const,data::BodyType>::pair<char const(&)[10],data::BodyType,true>(
      (std::pair<const std::string,data::BodyType> *const)(v1 + 336),
      (const char (*)[10])"BODY_MALE",
      (data::BodyType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "BODY_MALE");
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string const,data::BodyType>::pair<char const(&)[10],data::BodyType,true>(
      (std::pair<const std::string,data::BodyType> *const)(v1 + 376),
      (const char (*)[10])"BODY_LOLI",
      (data::BodyType *)(v1 + 160));
    std::allocator<std::pair<std::string const,data::BodyType>>::allocator((std::allocator<std::pair<const std::string,data::BodyType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::BodyType>::unordered_map(
      &data::getBodyTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::BodyType> >)__PAIR128__(6LL, v1 + 176),
      0LL,
      (const std::unordered_map<std::string,data::BodyType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::BodyType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::BodyType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getBodyTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::BodyType>::~unordered_map,
      &data::getBodyTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::BodyType>>::~allocator((std::allocator<std::pair<const std::string,data::BodyType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::BodyType> *)(v1 + 416);
          i != (std::pair<const std::string,data::BodyType> *)(v1 + 176);
          std::pair<std::string const,data::BodyType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getBodyTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 409: range 000000000FA1A9DA-000000000FA1B3CA
const std::map<data::BodyType,std::pair<std::string,std::string >> *__cdecl data::getBodyTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::BodyType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  char v11[1296]; // [rsp+10h] [rbp-510h] BYREF

  v1 = (unsigned __int64)v11;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1248LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "15 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 64 9 <unknown> 272 64 9 <unknown> 368 64 9 <u"
                        "nknown> 464 64 9 <unknown> 560 64 9 <unknown> 656 64 9 <unknown> 752 432 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getBodyTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = 61956;
  v3[536862727] = -219021312;
  v3[536862728] = 62194;
  v3[536862730] = -219021312;
  v3[536862731] = 62194;
  v3[536862733] = -219021312;
  v3[536862734] = 62194;
  v3[536862736] = -219021312;
  v3[536862737] = 62194;
  v3[536862739] = -219021312;
  v3[536862740] = 62194;
  v3[536862742] = -219021312;
  v3[536862743] = 62194;
  v3[536862757] = -202116109;
  v3[536862758] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getBodyTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getBodyTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 176),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[10])"BODY_NONE");
    std::pair<data::BodyType const,std::pair<std::string,std::string>>::pair<data::BodyType,true>(
      (std::pair<const data::BodyType,std::pair<std::string,std::string > > *const)(v1 + 752),
      (data::BodyType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[9],true>(
      (std::pair<std::string,std::string > *const)(v1 + 272),
      (const char (*)[7])byte_1A623400,
      (const char (*)[9])"BODY_BOY");
    std::pair<data::BodyType const,std::pair<std::string,std::string>>::pair<data::BodyType,true>(
      (std::pair<const data::BodyType,std::pair<std::string,std::string > > *const)(v1 + 824),
      (data::BodyType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 368),
      (const char (*)[7])byte_1A623440,
      (const char (*)[10])"BODY_GIRL");
    std::pair<data::BodyType const,std::pair<std::string,std::string>>::pair<data::BodyType,true>(
      (std::pair<const data::BodyType,std::pair<std::string,std::string > > *const)(v1 + 896),
      (data::BodyType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 464),
      (const char (*)[7])byte_1A623480,
      (const char (*)[10])"BODY_LADY");
    std::pair<data::BodyType const,std::pair<std::string,std::string>>::pair<data::BodyType,true>(
      (std::pair<const data::BodyType,std::pair<std::string,std::string > > *const)(v1 + 968),
      (data::BodyType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 560),
      (const char (*)[7])byte_1A6234C0,
      (const char (*)[10])"BODY_MALE");
    std::pair<data::BodyType const,std::pair<std::string,std::string>>::pair<data::BodyType,true>(
      (std::pair<const data::BodyType,std::pair<std::string,std::string > > *const)(v1 + 1040),
      (data::BodyType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 656),
      (const char (*)[7])byte_1A623500,
      (const char (*)[10])"BODY_LOLI");
    std::pair<data::BodyType const,std::pair<std::string,std::string>>::pair<data::BodyType,true>(
      (std::pair<const data::BodyType,std::pair<std::string,std::string > > *const)(v1 + 1112),
      (data::BodyType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 656));
    std::allocator<std::pair<data::BodyType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::BodyType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::BodyType,std::pair<std::string,std::string>>::map(
      &data::getBodyTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::BodyType,std::pair<std::string,std::string > > >)__PAIR128__(6LL, v1 + 752),
      (const std::less<data::BodyType> *)(v1 + 48),
      (const std::map<data::BodyType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getBodyTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::BodyType,std::pair<std::string,std::string>>::~map,
      &data::getBodyTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::BodyType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::BodyType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::BodyType,std::pair<std::string,std::string > > *)(v1 + 1184);
          i != (std::pair<const data::BodyType,std::pair<std::string,std::string > > *)(v1 + 752);
          std::pair<data::BodyType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 752, 432LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 656));
    v5 = (_DWORD *)(((v1 + 656) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 560));
    v6 = (_DWORD *)(((v1 + 560) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 464));
    v7 = (_DWORD *)(((v1 + 464) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 368));
    v8 = (_DWORD *)(((v1 + 368) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 272));
    v9 = (_DWORD *)(((v1 + 272) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 176));
  }
  if ( v11 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8094) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 156) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1248LL, v11);
  }
  return &data::getBodyTypeEnumMap[abi:cxx11](void)::m;
};

// Line 423: range 000000000FA1B3CB-000000000FA1B73E
const char *__fastcall data::enumValToStr(data::LifeState e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::LifeState,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::LifeState,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:422 64 8 8 iter:425 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getLifeStateEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::LifeState,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::LifeState,std::pair<std::string,std::string>>::find(
                                                                                                  map,
                                                                                                  (const std::map<data::LifeState,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::LifeState,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::LifeState,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::LifeState,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::LifeState,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      428);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_LifeState";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::LifeState const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::LifeState,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 435: range 000000000FA1B73F-000000000FA1BCF7
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::LifeState>,false,true>::pointer v10; // rax
  data::LifeState second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::LifeState> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:444 96 8 9 <unknown> 128 8 5 s:434 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getLifeStateNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::LifeState>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::LifeState>::find(
                                                                                      m,
                                                                                      (const std::unordered_map<std::string,data::LifeState>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::LifeState>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::LifeState>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::LifeState>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::LifeState>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::LifeState>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        447);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::LifeState>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::LifeState>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      438);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 456: range 000000000FA1BCF8-000000000FA1C753
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::LifeState> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::LifeState>,false,true>::pointer v12; // rax
  data::LifeState second; // ecx
  char v14; // dl
  char v16[656]; // [rsp+20h] [rbp-290h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 8 6 it:470 192 8 9 <unknown> 224 8 5 s:455 256 32 9 <unknown> 3"
                        "20 32 9 <unknown> 384 32 9 <unknown> 448 120 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862737] = -218103808;
  v4[536862738] = -202116109;
  *(_QWORD *)(v2 + 224) = s;
  if ( *(_QWORD *)(v2 + 224) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::LifeState &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::LifeState &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::LifeState>::pair<char const(&)[7],data::LifeState,true>(
        (std::pair<const std::string,data::LifeState> *const)(v2 + 448),
        (const char (*)[7])byte_1A623B00,
        (data::LifeState *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A623B00);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::LifeState>::pair<char const(&)[7],data::LifeState,true>(
        (std::pair<const std::string,data::LifeState> *const)(v2 + 488),
        (const char (*)[7])byte_1A623B40,
        (data::LifeState *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A623B40);
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::LifeState>::pair<char const(&)[10],data::LifeState,true>(
        (std::pair<const std::string,data::LifeState> *const)(v2 + 528),
        (const char (*)[10])byte_1A623B80,
        (data::LifeState *)(v2 + 144));
      std::allocator<std::pair<std::string const,data::LifeState>>::allocator((std::allocator<std::pair<const std::string,data::LifeState> > *const)(v2 + 80));
      std::unordered_map<std::string,data::LifeState>::unordered_map(
        &data::enumStrToVal(char const*,data::LifeState &)::m,
        (std::initializer_list<std::pair<const std::string,data::LifeState> >)__PAIR128__(3LL, v2 + 448),
        0LL,
        (const std::unordered_map<std::string,data::LifeState>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::LifeState>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::LifeState>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::LifeState &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::LifeState>::~unordered_map,
        &data::enumStrToVal(char const*,data::LifeState &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::LifeState>>::~allocator((std::allocator<std::pair<const std::string,data::LifeState> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::LifeState> *)(v2 + 568);
            i != (std::pair<const std::string,data::LifeState> *)(v2 + 448);
            std::pair<std::string const,data::LifeState>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 448) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_WORD *)(v7 + 12) = -1800;
      *(_BYTE *)(v7 + 14) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 224);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v8);
    *(std::unordered_map<std::string,data::LifeState>::iterator *)(v2 + 160) = std::unordered_map<std::string,data::LifeState>::find(
                                                                                 &data::enumStrToVal(char const*,data::LifeState &)::m,
                                                                                 (const std::unordered_map<std::string,data::LifeState>::key_type *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v2 + 320);
    *(std::unordered_map<std::string,data::LifeState>::iterator *)(v2 + 192) = std::unordered_map<std::string,data::LifeState>::end(&data::enumStrToVal(char const*,data::LifeState &)::m);
    v9 = (char *)(v2 + 192);
    v10 = std::__detail::operator==<std::pair<std::string const,data::LifeState>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::LifeState>,true> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::LifeState>,true> *)(v2 + 192));
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        473);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 384),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 224));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::LifeState>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::LifeState>,false,true> *const)(v2 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      459);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 482: range 000000000FA1C754-000000000FA1C76A
const char *__cdecl data::getDescription(data::LifeState e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 487: range 000000000FA1C76B-000000000FA1C920
bool __cdecl data::isValidLifeState(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::LifeState,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::LifeState,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:488 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidLifeState;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getLifeStateEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::LifeState,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::LifeState,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getLifeStateEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::LifeState,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::LifeState,std::pair<std::string,std::string>>::find(
                                                                                                  v6,
                                                                                                  (const std::map<data::LifeState,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::LifeState,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::LifeState,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 493: range 000000000FA1C921-000000000FA1CA82
bool __cdecl data::isValidLifeStateName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::LifeState> *v5; // rcx
  const std::unordered_map<std::string,data::LifeState> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidLifeStateName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getLifeStateNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::LifeState>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::LifeState>::end(v5);
  v6 = data::getLifeStateNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::LifeState>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::LifeState>::find(
                                                                                    v6,
                                                                                    name);
  result = std::__detail::operator!=<std::pair<std::string const,data::LifeState>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::LifeState>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::LifeState>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 498: range 000000000FA1CA83-000000000FA1CFE2
const std::unordered_map<std::string,data::LifeState> *__cdecl data::getLifeStateNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::LifeState> *i; // r14
  const std::unordered_map<std::string,data::LifeState> *result; // rax
  char v6[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(384LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "8 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9 "
                        "<unknown> 144 4 9 <unknown> 160 160 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getLifeStateNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862730] = -202116109;
  v3[536862731] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getLifeStateNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getLifeStateNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::LifeState>::pair<char const(&)[10],data::LifeState,true>(
      (std::pair<const std::string,data::LifeState> *const)(v1 + 160),
      (const char (*)[10])"LIFE_NONE",
      (data::LifeState *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "LIFE_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::LifeState>::pair<char const(&)[11],data::LifeState,true>(
      (std::pair<const std::string,data::LifeState> *const)(v1 + 200),
      (const char (*)[11])"LIFE_ALIVE",
      (data::LifeState *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "LIFE_ALIVE");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::LifeState>::pair<char const(&)[10],data::LifeState,true>(
      (std::pair<const std::string,data::LifeState> *const)(v1 + 240),
      (const char (*)[10])"LIFE_DEAD",
      (data::LifeState *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "LIFE_DEAD");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::LifeState>::pair<char const(&)[12],data::LifeState,true>(
      (std::pair<const std::string,data::LifeState> *const)(v1 + 280),
      (const char (*)[12])"LIFE_REVIVE",
      (data::LifeState *)(v1 + 144));
    std::allocator<std::pair<std::string const,data::LifeState>>::allocator((std::allocator<std::pair<const std::string,data::LifeState> > *const)(v1 + 80));
    std::unordered_map<std::string,data::LifeState>::unordered_map(
      &data::getLifeStateNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::LifeState> >)__PAIR128__(4LL, v1 + 160),
      0LL,
      (const std::unordered_map<std::string,data::LifeState>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::LifeState>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::LifeState>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getLifeStateNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::LifeState>::~unordered_map,
      &data::getLifeStateNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::LifeState>>::~allocator((std::allocator<std::pair<const std::string,data::LifeState> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::LifeState> *)(v1 + 320);
          i != (std::pair<const std::string,data::LifeState> *)(v1 + 160);
          std::pair<std::string const,data::LifeState>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getLifeStateNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 510: range 000000000FA1CFE3-000000000FA1D7B3
const std::map<data::LifeState,std::pair<std::string,std::string >> *__cdecl data::getLifeStateEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::LifeState,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[912]; // [rsp+10h] [rbp-390h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(864LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 64 9 <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 64 9 <unknown> 512 288 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getLifeStateEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862735] = -218959118;
  v3[536862745] = -202116109;
  v3[536862746] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getLifeStateEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getLifeStateEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[10])"LIFE_NONE");
    std::pair<data::LifeState const,std::pair<std::string,std::string>>::pair<data::LifeState,true>(
      (std::pair<const data::LifeState,std::pair<std::string,std::string > > *const)(v1 + 512),
      (data::LifeState *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[11],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[7])byte_1A623B00,
      (const char (*)[11])"LIFE_ALIVE");
    std::pair<data::LifeState const,std::pair<std::string,std::string>>::pair<data::LifeState,true>(
      (std::pair<const data::LifeState,std::pair<std::string,std::string > > *const)(v1 + 584),
      (data::LifeState *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[7])byte_1A623B40,
      (const char (*)[10])"LIFE_DEAD");
    std::pair<data::LifeState const,std::pair<std::string,std::string>>::pair<data::LifeState,true>(
      (std::pair<const data::LifeState,std::pair<std::string,std::string > > *const)(v1 + 656),
      (data::LifeState *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[12],true>(
      (std::pair<std::string,std::string > *const)(v1 + 416),
      (const char (*)[10])byte_1A623B80,
      (const char (*)[12])"LIFE_REVIVE");
    std::pair<data::LifeState const,std::pair<std::string,std::string>>::pair<data::LifeState,true>(
      (std::pair<const data::LifeState,std::pair<std::string,std::string > > *const)(v1 + 728),
      (data::LifeState *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 416));
    std::allocator<std::pair<data::LifeState const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::LifeState,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::LifeState,std::pair<std::string,std::string>>::map(
      &data::getLifeStateEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::LifeState,std::pair<std::string,std::string > > >)__PAIR128__(4LL, v1 + 512),
      (const std::less<data::LifeState> *)(v1 + 32),
      (const std::map<data::LifeState,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getLifeStateEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::LifeState,std::pair<std::string,std::string>>::~map,
      &data::getLifeStateEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::LifeState const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::LifeState,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::LifeState,std::pair<std::string,std::string > > *)(v1 + 800);
          i != (std::pair<const data::LifeState,std::pair<std::string,std::string > > *)(v1 + 512);
          std::pair<data::LifeState const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 512, 288LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 416));
    v5 = (_DWORD *)(((v1 + 416) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8064) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 108) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8068) = -168430091;
  }
  return &data::getLifeStateEnumMap[abi:cxx11](void)::m;
};

// Line 522: range 000000000FA1D7B4-000000000FA1DB27
const char *__fastcall data::enumValToStr(data::StateType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::StateType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::StateType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:521 64 8 8 iter:524 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getStateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::StateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::StateType,std::pair<std::string,std::string>>::find(
                                                                                                  map,
                                                                                                  (const std::map<data::StateType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::StateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::StateType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::StateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::StateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      527);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_StateType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::StateType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::StateType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 534: range 000000000FA1DB28-000000000FA1E0E0
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::StateType>,false,true>::pointer v10; // rax
  data::StateType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::StateType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:543 96 8 9 <unknown> 128 8 5 s:533 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getStateTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::StateType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::StateType>::find(
                                                                                      m,
                                                                                      (const std::unordered_map<std::string,data::StateType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::StateType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::StateType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::StateType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::StateType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::StateType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        546);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::StateType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::StateType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      537);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 555: range 000000000FA1E0E1-000000000FA1EA06
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::StateType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::StateType>,false,true>::pointer v12; // rax
  data::StateType second; // ecx
  char v14; // dl
  char v16[528]; // [rsp+20h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 8 6 "
                        "it:567 144 8 9 <unknown> 176 8 5 s:554 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown> "
                        "400 40 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  *(_QWORD *)(v2 + 176) = s;
  if ( *(_QWORD *)(v2 + 176) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::StateType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::StateType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::StateType>::pair<char const(&)[20],data::StateType,true>(
        (std::pair<const std::string,data::StateType> *const)(v2 + 400),
        (const char (*)[20])byte_1A624080,
        (data::StateType *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::StateType>>::allocator((std::allocator<std::pair<const std::string,data::StateType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::StateType>::unordered_map(
        &data::enumStrToVal(char const*,data::StateType &)::m,
        (std::initializer_list<std::pair<const std::string,data::StateType> >)__PAIR128__(1LL, v2 + 400),
        0LL,
        (const std::unordered_map<std::string,data::StateType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::StateType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::StateType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::StateType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::StateType>::~unordered_map,
        &data::enumStrToVal(char const*,data::StateType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::StateType>>::~allocator((std::allocator<std::pair<const std::string,data::StateType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::StateType> *)(v2 + 440);
            i != (std::pair<const std::string,data::StateType> *)(v2 + 400);
            std::pair<std::string const,data::StateType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 400) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_BYTE *)(v7 + 4) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v8 = *(const char **)(v2 + 176);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 272),
      v8,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v8);
    *(std::unordered_map<std::string,data::StateType>::iterator *)(v2 + 112) = std::unordered_map<std::string,data::StateType>::find(
                                                                                 &data::enumStrToVal(char const*,data::StateType &)::m,
                                                                                 (const std::unordered_map<std::string,data::StateType>::key_type *)(v2 + 272));
    std::string::~string((void *)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v2 + 272);
    *(std::unordered_map<std::string,data::StateType>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::StateType>::end(&data::enumStrToVal(char const*,data::StateType &)::m);
    v9 = (char *)(v2 + 144);
    v10 = std::__detail::operator==<std::pair<std::string const,data::StateType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::StateType>,true> *)(v2 + 112),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::StateType>,true> *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        570);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 336),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::StateType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::StateType>,false,true> *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      558);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 208),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 579: range 000000000FA1EA07-000000000FA1EA1D
const char *__cdecl data::getDescription(data::StateType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 584: range 000000000FA1EA1E-000000000FA1EBD3
bool __cdecl data::isValidStateType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::StateType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::StateType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:585 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidStateType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getStateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::StateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::StateType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getStateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::StateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::StateType,std::pair<std::string,std::string>>::find(
                                                                                                  v6,
                                                                                                  (const std::map<data::StateType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::StateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::StateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 590: range 000000000FA1EBD4-000000000FA1ED35
bool __cdecl data::isValidStateTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::StateType> *v5; // rcx
  const std::unordered_map<std::string,data::StateType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidStateTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getStateTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::StateType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::StateType>::end(v5);
  v6 = data::getStateTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::StateType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::StateType>::find(
                                                                                    v6,
                                                                                    name);
  result = std::__detail::operator!=<std::pair<std::string const,data::StateType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::StateType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::StateType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 595: range 000000000FA1ED36-000000000FA1F13C
const std::unordered_map<std::string,data::StateType> *__cdecl data::getStateTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::StateType> *i; // r14
  const std::unordered_map<std::string,data::StateType> *result; // rax
  char v6[272]; // [rsp+10h] [rbp-110h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(224LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 80 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getStateTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = 61956;
  v3[536862726] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getStateTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getStateTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::StateType>::pair<char const(&)[10],data::StateType,true>(
      (std::pair<const std::string,data::StateType> *const)(v1 + 112),
      (const char (*)[10])"BUFF_NONE",
      (data::StateType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "BUFF_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::StateType>::pair<char const(&)[13],data::StateType,true>(
      (std::pair<const std::string,data::StateType> *const)(v1 + 152),
      (const char (*)[13])"BUFF_CONTROL",
      (data::StateType *)(v1 + 96));
    std::allocator<std::pair<std::string const,data::StateType>>::allocator((std::allocator<std::pair<const std::string,data::StateType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::StateType>::unordered_map(
      &data::getStateTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::StateType> >)__PAIR128__(2LL, v1 + 112),
      0LL,
      (const std::unordered_map<std::string,data::StateType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::StateType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::StateType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getStateTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::StateType>::~unordered_map,
      &data::getStateTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::StateType>>::~allocator((std::allocator<std::pair<const std::string,data::StateType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::StateType> *)(v1 + 192);
          i != (std::pair<const std::string,data::StateType> *)(v1 + 112);
          std::pair<std::string const,data::StateType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getStateTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 605: range 000000000FA1F13D-000000000FA1F6FA
const std::map<data::StateType,std::pair<std::string,std::string >> *__cdecl data::getStateTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::StateType,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  const std::map<data::StateType,std::pair<std::string,std::string >> *result; // rax
  char v8[560]; // [rsp+10h] [rbp-230h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(512LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 64 9 <unknown> 208 64 "
                        "9 <unknown> 304 144 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getStateTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = 61956;
  v3[536862725] = -219021312;
  v3[536862726] = 62194;
  v3[536862728] = -219021312;
  v3[536862729] = 62194;
  v3[536862734] = -202116109;
  v3[536862735] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getStateTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getStateTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 112),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[10])"BUFF_NONE");
    std::pair<data::StateType const,std::pair<std::string,std::string>>::pair<data::StateType,true>(
      (std::pair<const data::StateType,std::pair<std::string,std::string > > *const)(v1 + 304),
      (data::StateType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[20],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 208),
      (const char (*)[20])byte_1A624080,
      (const char (*)[13])"BUFF_CONTROL");
    std::pair<data::StateType const,std::pair<std::string,std::string>>::pair<data::StateType,true>(
      (std::pair<const data::StateType,std::pair<std::string,std::string > > *const)(v1 + 376),
      (data::StateType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 208));
    std::allocator<std::pair<data::StateType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::StateType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::StateType,std::pair<std::string,std::string>>::map(
      &data::getStateTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::StateType,std::pair<std::string,std::string > > >)__PAIR128__(2LL, v1 + 304),
      (const std::less<data::StateType> *)(v1 + 48),
      (const std::map<data::StateType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getStateTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::StateType,std::pair<std::string,std::string>>::~map,
      &data::getStateTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::StateType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::StateType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::StateType,std::pair<std::string,std::string > > *)(v1 + 448);
          i != (std::pair<const data::StateType,std::pair<std::string,std::string > > *)(v1 + 304);
          std::pair<data::StateType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 304) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_WORD *)(v5 + 16) = -1800;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 208));
    v6 = (_DWORD *)(((v1 + 208) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 112));
  }
  result = &data::getStateTypeEnumMap[abi:cxx11](void)::m;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 615: range 000000000FA1F6FB-000000000FA1FA6E
const char *__fastcall data::enumValToStr(data::MonsterType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::MonsterType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:614 64 8 8 iter:617 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getMonsterTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::MonsterType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::MonsterType,std::pair<std::string,std::string>>::find(
                                                                                                    map,
                                                                                                    (const std::map<data::MonsterType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::MonsterType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::MonsterType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      620);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_MonsterType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::MonsterType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 627: range 000000000FA1FA6F-000000000FA20027
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::MonsterType>,false,true>::pointer v10; // rax
  data::MonsterType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::MonsterType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:636 96 8 9 <unknown> 128 8 5 s:626 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getMonsterTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::MonsterType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::MonsterType>::find(
                                                                                        m,
                                                                                        (const std::unordered_map<std::string,data::MonsterType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::MonsterType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::MonsterType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::MonsterType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MonsterType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MonsterType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        639);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::MonsterType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::MonsterType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      630);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 648: range 000000000FA20028-000000000FA20CAA
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::MonsterType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::MonsterType>,false,true>::pointer v12; // rax
  data::MonsterType second; // ecx
  char v14; // dl
  char v16[848]; // [rsp+20h] [rbp-350h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(800LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 8 6 it:66"
                        "5 240 8 9 <unknown> 272 8 5 s:647 304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496 240 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = 61956;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862743] = -202116109;
  v4[536862744] = -202116109;
  *(_QWORD *)(v2 + 272) = s;
  if ( *(_QWORD *)(v2 + 272) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::MonsterType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::MonsterType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::MonsterType>::pair<char const(&)[20],data::MonsterType,true>(
        (std::pair<const std::string,data::MonsterType> *const)(v2 + 496),
        (const char (*)[20])byte_1A6244E0,
        (data::MonsterType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A6244E0);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::MonsterType>::pair<char const(&)[18],data::MonsterType,true>(
        (std::pair<const std::string,data::MonsterType> *const)(v2 + 536),
        (const char (*)[18])byte_1A624520,
        (data::MonsterType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A624520);
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::MonsterType>::pair<char const(&)[29],data::MonsterType,true>(
        (std::pair<const std::string,data::MonsterType> *const)(v2 + 576),
        (const char (*)[29])byte_1A624560,
        (data::MonsterType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A624560);
      *(_DWORD *)(v2 + 160) = 4;
      std::pair<std::string const,data::MonsterType>::pair<char const(&)[20],data::MonsterType,true>(
        (std::pair<const std::string,data::MonsterType> *const)(v2 + 616),
        (const char (*)[20])byte_1A6245A0,
        (data::MonsterType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A6245A0);
      *(_DWORD *)(v2 + 176) = 5;
      std::pair<std::string const,data::MonsterType>::pair<char const(&)[17],data::MonsterType,true>(
        (std::pair<const std::string,data::MonsterType> *const)(v2 + 656),
        (const char (*)[17])byte_1A6245E0,
        (data::MonsterType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A6245E0);
      *(_DWORD *)(v2 + 192) = 6;
      std::pair<std::string const,data::MonsterType>::pair<char const(&)[20],data::MonsterType,true>(
        (std::pair<const std::string,data::MonsterType> *const)(v2 + 696),
        (const char (*)[20])byte_1A624620,
        (data::MonsterType *)(v2 + 192));
      std::allocator<std::pair<std::string const,data::MonsterType>>::allocator((std::allocator<std::pair<const std::string,data::MonsterType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::MonsterType>::unordered_map(
        &data::enumStrToVal(char const*,data::MonsterType &)::m,
        (std::initializer_list<std::pair<const std::string,data::MonsterType> >)__PAIR128__(6LL, v2 + 496),
        0LL,
        (const std::unordered_map<std::string,data::MonsterType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::MonsterType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::MonsterType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::MonsterType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::MonsterType>::~unordered_map,
        &data::enumStrToVal(char const*,data::MonsterType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::MonsterType>>::~allocator((std::allocator<std::pair<const std::string,data::MonsterType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::MonsterType> *)(v2 + 736);
            i != (std::pair<const std::string,data::MonsterType> *)(v2 + 496);
            std::pair<std::string const,data::MonsterType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 496) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_DWORD *)(v7 + 12) = -117901064;
      *(_DWORD *)(v7 + 16) = -117901064;
      *(_DWORD *)(v7 + 20) = -117901064;
      *(_DWORD *)(v7 + 24) = -117901064;
      *(_WORD *)(v7 + 28) = -1800;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 272);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 368),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, v8);
    *(std::unordered_map<std::string,data::MonsterType>::iterator *)(v2 + 208) = std::unordered_map<std::string,data::MonsterType>::find(
                                                                                   &data::enumStrToVal(char const*,data::MonsterType &)::m,
                                                                                   (const std::unordered_map<std::string,data::MonsterType>::key_type *)(v2 + 368));
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, v2 + 368);
    *(std::unordered_map<std::string,data::MonsterType>::iterator *)(v2 + 240) = std::unordered_map<std::string,data::MonsterType>::end(&data::enumStrToVal(char const*,data::MonsterType &)::m);
    v9 = (char *)(v2 + 240);
    v10 = std::__detail::operator==<std::pair<std::string const,data::MonsterType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MonsterType>,true> *)(v2 + 208),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MonsterType>,true> *)(v2 + 240));
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 432, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 432),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        668);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 432),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 272));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
      LODWORD(result) = -1;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::MonsterType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::MonsterType>,false,true> *const)(v2 + 208));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      LODWORD(result) = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 304),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      651);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 304),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
    LODWORD(result) = -1;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = -168430091;
  }
  return (unsigned int)result;
};

// Line 677: range 000000000FA20CAB-000000000FA20CC1
const char *__cdecl data::getDescription(data::MonsterType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 682: range 000000000FA20CC2-000000000FA20E77
bool __cdecl data::isValidMonsterType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::MonsterType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::MonsterType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:683 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidMonsterType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getMonsterTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::MonsterType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::MonsterType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getMonsterTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::MonsterType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::MonsterType,std::pair<std::string,std::string>>::find(
                                                                                                    v6,
                                                                                                    (const std::map<data::MonsterType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 688: range 000000000FA20E78-000000000FA20FD9
bool __cdecl data::isValidMonsterTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::MonsterType> *v5; // rcx
  const std::unordered_map<std::string,data::MonsterType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidMonsterTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getMonsterTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::MonsterType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::MonsterType>::end(v5);
  v6 = data::getMonsterTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::MonsterType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::MonsterType>::find(
                                                                                      v6,
                                                                                      name);
  result = std::__detail::operator!=<std::pair<std::string const,data::MonsterType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MonsterType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MonsterType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 693: range 000000000FA20FDA-000000000FA216E3
const std::unordered_map<std::string,data::MonsterType> *__cdecl data::getMonsterTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::MonsterType> *i; // r14
  const std::unordered_map<std::string,data::MonsterType> *result; // rax
  char v6[592]; // [rsp+10h] [rbp-250h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(544LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 280 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getMonsterTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862734] = -218103808;
  v3[536862735] = -202116109;
  v3[536862736] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getMonsterTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getMonsterTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::MonsterType>::pair<char const(&)[13],data::MonsterType,true>(
      (std::pair<const std::string,data::MonsterType> *const)(v1 + 192),
      (const char (*)[13])"MONSTER_NONE",
      (data::MonsterType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "MONSTER_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::MonsterType>::pair<char const(&)[17],data::MonsterType,true>(
      (std::pair<const std::string,data::MonsterType> *const)(v1 + 232),
      (const char (*)[17])"MONSTER_ORDINARY",
      (data::MonsterType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "MONSTER_ORDINARY");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::MonsterType>::pair<char const(&)[13],data::MonsterType,true>(
      (std::pair<const std::string,data::MonsterType> *const)(v1 + 272),
      (const char (*)[13])"MONSTER_BOSS",
      (data::MonsterType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "MONSTER_BOSS");
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string const,data::MonsterType>::pair<char const(&)[19],data::MonsterType,true>(
      (std::pair<const std::string,data::MonsterType> *const)(v1 + 312),
      (const char (*)[19])"MONSTER_ENV_ANIMAL",
      (data::MonsterType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "MONSTER_ENV_ANIMAL");
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string const,data::MonsterType>::pair<char const(&)[23],data::MonsterType,true>(
      (std::pair<const std::string,data::MonsterType> *const)(v1 + 352),
      (const char (*)[23])"MONSTER_LITTLE_MONSTER",
      (data::MonsterType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "MONSTER_LITTLE_MONSTER");
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string const,data::MonsterType>::pair<char const(&)[13],data::MonsterType,true>(
      (std::pair<const std::string,data::MonsterType> *const)(v1 + 392),
      (const char (*)[13])"MONSTER_FISH",
      (data::MonsterType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "MONSTER_FISH");
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string const,data::MonsterType>::pair<char const(&)[16],data::MonsterType,true>(
      (std::pair<const std::string,data::MonsterType> *const)(v1 + 432),
      (const char (*)[16])"MONSTER_PARTNER",
      (data::MonsterType *)(v1 + 176));
    std::allocator<std::pair<std::string const,data::MonsterType>>::allocator((std::allocator<std::pair<const std::string,data::MonsterType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::MonsterType>::unordered_map(
      &data::getMonsterTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::MonsterType> >)__PAIR128__(7LL, v1 + 192),
      0LL,
      (const std::unordered_map<std::string,data::MonsterType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::MonsterType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::MonsterType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getMonsterTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::MonsterType>::~unordered_map,
      &data::getMonsterTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::MonsterType>>::~allocator((std::allocator<std::pair<const std::string,data::MonsterType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::MonsterType> *)(v1 + 472);
          i != (std::pair<const std::string,data::MonsterType> *)(v1 + 192);
          std::pair<std::string const,data::MonsterType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getMonsterTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 708: range 000000000FA216E4-000000000FA221B7
const std::map<data::MonsterType,std::pair<std::string,std::string >> *__cdecl data::getMonsterTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::MonsterType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  char v12[1488]; // [rsp+10h] [rbp-5D0h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1440LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 64 9 <unknown> 288 64 9 <un"
                        "known> 384 64 9 <unknown> 480 64 9 <unknown> 576 64 9 <unknown> 672 64 9 <unknown> 768 64 9 <unk"
                        "nown> 864 504 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getMonsterTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862728] = -218959118;
  v3[536862731] = -218959118;
  v3[536862734] = -218959118;
  v3[536862737] = -218959118;
  v3[536862740] = -218959118;
  v3[536862743] = -218959118;
  v3[536862746] = -218959118;
  v3[536862762] = -218103808;
  v3[536862763] = -202116109;
  v3[536862764] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getMonsterTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getMonsterTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 192),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[13])"MONSTER_NONE");
    std::pair<data::MonsterType const,std::pair<std::string,std::string>>::pair<data::MonsterType,true>(
      (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *const)(v1 + 864),
      (data::MonsterType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[20],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 288),
      (const char (*)[20])byte_1A6244E0,
      (const char (*)[17])"MONSTER_ORDINARY");
    std::pair<data::MonsterType const,std::pair<std::string,std::string>>::pair<data::MonsterType,true>(
      (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *const)(v1 + 936),
      (data::MonsterType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[18],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 384),
      (const char (*)[18])byte_1A624520,
      (const char (*)[13])"MONSTER_BOSS");
    std::pair<data::MonsterType const,std::pair<std::string,std::string>>::pair<data::MonsterType,true>(
      (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *const)(v1 + 1008),
      (data::MonsterType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 480),
      (const char (*)[29])byte_1A624560,
      (const char (*)[19])"MONSTER_ENV_ANIMAL");
    std::pair<data::MonsterType const,std::pair<std::string,std::string>>::pair<data::MonsterType,true>(
      (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *const)(v1 + 1080),
      (data::MonsterType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[20],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 576),
      (const char (*)[20])byte_1A6245A0,
      (const char (*)[23])"MONSTER_LITTLE_MONSTER");
    std::pair<data::MonsterType const,std::pair<std::string,std::string>>::pair<data::MonsterType,true>(
      (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *const)(v1 + 1152),
      (data::MonsterType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 672),
      (const char (*)[17])byte_1A6245E0,
      (const char (*)[13])"MONSTER_FISH");
    std::pair<data::MonsterType const,std::pair<std::string,std::string>>::pair<data::MonsterType,true>(
      (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *const)(v1 + 1224),
      (data::MonsterType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[20],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 768),
      (const char (*)[20])byte_1A624620,
      (const char (*)[16])"MONSTER_PARTNER");
    std::pair<data::MonsterType const,std::pair<std::string,std::string>>::pair<data::MonsterType,true>(
      (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *const)(v1 + 1296),
      (data::MonsterType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 768));
    std::allocator<std::pair<data::MonsterType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::MonsterType,std::pair<std::string,std::string>>::map(
      &data::getMonsterTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::MonsterType,std::pair<std::string,std::string > > >)__PAIR128__(7LL, v1 + 864),
      (const std::less<data::MonsterType> *)(v1 + 48),
      (const std::map<data::MonsterType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getMonsterTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::MonsterType,std::pair<std::string,std::string>>::~map,
      &data::getMonsterTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::MonsterType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::MonsterType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *)(v1 + 1368);
          i != (std::pair<const data::MonsterType,std::pair<std::string,std::string > > *)(v1 + 864);
          std::pair<data::MonsterType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 864, 504LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 768));
    v5 = (_DWORD *)(((v1 + 768) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 672));
    v6 = (_DWORD *)(((v1 + 672) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 576));
    v7 = (_DWORD *)(((v1 + 576) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 480));
    v8 = (_DWORD *)(((v1 + 480) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 384));
    v9 = (_DWORD *)(((v1 + 384) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 288));
    v10 = (_DWORD *)(((v1 + 288) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 192));
  }
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF80AC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 180) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1440LL, v12);
  }
  return &data::getMonsterTypeEnumMap[abi:cxx11](void)::m;
};

// Line 723: range 000000000FA221B8-000000000FA2252B
const char *__fastcall data::enumValToStr(data::SkillDrag e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::SkillDrag,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:722 64 8 8 iter:725 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getSkillDragEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::SkillDrag,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::SkillDrag,std::pair<std::string,std::string>>::find(
                                                                                                  map,
                                                                                                  (const std::map<data::SkillDrag,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::SkillDrag,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::SkillDrag,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      728);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_SkillDrag";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::SkillDrag const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 735: range 000000000FA2252C-000000000FA22AE4
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::SkillDrag>,false,true>::pointer v10; // rax
  data::SkillDrag second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::SkillDrag> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:744 96 8 9 <unknown> 128 8 5 s:734 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getSkillDragNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::SkillDrag>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::SkillDrag>::find(
                                                                                      m,
                                                                                      (const std::unordered_map<std::string,data::SkillDrag>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::SkillDrag>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::SkillDrag>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::SkillDrag>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::SkillDrag>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::SkillDrag>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        747);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::SkillDrag>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::SkillDrag>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      738);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 756: range 000000000FA22AE5-000000000FA234AE
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::SkillDrag> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::SkillDrag>,false,true>::pointer v12; // rax
  data::SkillDrag second; // ecx
  char v14; // dl
  char v16[592]; // [rsp+20h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 8 6 it:769 176 8 9 <unknown> 208 8 5 s:755 240 32 9 <unknown> 304 32 9 <unknown> "
                        "368 32 9 <unknown> 432 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = 61956;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862736] = -202116109;
  *(_QWORD *)(v2 + 208) = s;
  if ( *(_QWORD *)(v2 + 208) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::SkillDrag &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::SkillDrag &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::SkillDrag>::pair<char const(&)[13],data::SkillDrag,true>(
        (std::pair<const std::string,data::SkillDrag> *const)(v2 + 432),
        (const char (*)[13])byte_1A624A80,
        (data::SkillDrag *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A624A80);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::SkillDrag>::pair<char const(&)[13],data::SkillDrag,true>(
        (std::pair<const std::string,data::SkillDrag> *const)(v2 + 472),
        (const char (*)[13])byte_1A624AC0,
        (data::SkillDrag *)(v2 + 128));
      std::allocator<std::pair<std::string const,data::SkillDrag>>::allocator((std::allocator<std::pair<const std::string,data::SkillDrag> > *const)(v2 + 80));
      std::unordered_map<std::string,data::SkillDrag>::unordered_map(
        &data::enumStrToVal(char const*,data::SkillDrag &)::m,
        (std::initializer_list<std::pair<const std::string,data::SkillDrag> >)__PAIR128__(2LL, v2 + 432),
        0LL,
        (const std::unordered_map<std::string,data::SkillDrag>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::SkillDrag>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::SkillDrag>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::SkillDrag &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::SkillDrag>::~unordered_map,
        &data::enumStrToVal(char const*,data::SkillDrag &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::SkillDrag>>::~allocator((std::allocator<std::pair<const std::string,data::SkillDrag> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::SkillDrag> *)(v2 + 512);
            i != (std::pair<const std::string,data::SkillDrag> *)(v2 + 432);
            std::pair<std::string const,data::SkillDrag>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 432) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 208);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 304),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v8);
    *(std::unordered_map<std::string,data::SkillDrag>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::SkillDrag>::find(
                                                                                 &data::enumStrToVal(char const*,data::SkillDrag &)::m,
                                                                                 (const std::unordered_map<std::string,data::SkillDrag>::key_type *)(v2 + 304));
    std::string::~string((void *)(v2 + 304));
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 176, v2 + 304);
    *(std::unordered_map<std::string,data::SkillDrag>::iterator *)(v2 + 176) = std::unordered_map<std::string,data::SkillDrag>::end(&data::enumStrToVal(char const*,data::SkillDrag &)::m);
    v9 = (char *)(v2 + 176);
    v10 = std::__detail::operator==<std::pair<std::string const,data::SkillDrag>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::SkillDrag>,true> *)(v2 + 144),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::SkillDrag>,true> *)(v2 + 176));
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 368, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 368),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        772);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 368),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 208));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::SkillDrag>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::SkillDrag>,false,true> *const)(v2 + 144));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 240),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      759);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 240),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 781: range 000000000FA234AF-000000000FA234C5
const char *__cdecl data::getDescription(data::SkillDrag e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 786: range 000000000FA234C6-000000000FA2367B
bool __cdecl data::isValidSkillDrag(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::SkillDrag,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::SkillDrag,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:787 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidSkillDrag;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getSkillDragEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::SkillDrag,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::SkillDrag,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getSkillDragEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::SkillDrag,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::SkillDrag,std::pair<std::string,std::string>>::find(
                                                                                                  v6,
                                                                                                  (const std::map<data::SkillDrag,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 792: range 000000000FA2367C-000000000FA237DD
bool __cdecl data::isValidSkillDragName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::SkillDrag> *v5; // rcx
  const std::unordered_map<std::string,data::SkillDrag> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidSkillDragName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getSkillDragNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::SkillDrag>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::SkillDrag>::end(v5);
  v6 = data::getSkillDragNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::SkillDrag>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::SkillDrag>::find(
                                                                                    v6,
                                                                                    name);
  result = std::__detail::operator!=<std::pair<std::string const,data::SkillDrag>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::SkillDrag>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::SkillDrag>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 797: range 000000000FA237DE-000000000FA23CA0
const std::unordered_map<std::string,data::SkillDrag> *__cdecl data::getSkillDragNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::SkillDrag> *i; // r14
  const std::unordered_map<std::string,data::SkillDrag> *result; // rax
  char v6[336]; // [rsp+10h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <"
                        "unknown> 128 120 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getSkillDragNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getSkillDragNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getSkillDragNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::SkillDrag>::pair<char const(&)[10],data::SkillDrag,true>(
      (std::pair<const std::string,data::SkillDrag> *const)(v1 + 128),
      (const char (*)[10])"DRAG_NONE",
      (data::SkillDrag *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "DRAG_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::SkillDrag>::pair<char const(&)[19],data::SkillDrag,true>(
      (std::pair<const std::string,data::SkillDrag> *const)(v1 + 168),
      (const char (*)[19])"DRAG_ROTATE_CAMERA",
      (data::SkillDrag *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "DRAG_ROTATE_CAMERA");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::SkillDrag>::pair<char const(&)[22],data::SkillDrag,true>(
      (std::pair<const std::string,data::SkillDrag> *const)(v1 + 208),
      (const char (*)[22])"DRAG_ROTATE_CHARACTER",
      (data::SkillDrag *)(v1 + 112));
    std::allocator<std::pair<std::string const,data::SkillDrag>>::allocator((std::allocator<std::pair<const std::string,data::SkillDrag> > *const)(v1 + 64));
    std::unordered_map<std::string,data::SkillDrag>::unordered_map(
      &data::getSkillDragNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::SkillDrag> >)__PAIR128__(3LL, v1 + 128),
      0LL,
      (const std::unordered_map<std::string,data::SkillDrag>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::SkillDrag>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::SkillDrag>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getSkillDragNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::SkillDrag>::~unordered_map,
      &data::getSkillDragNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::SkillDrag>>::~allocator((std::allocator<std::pair<const std::string,data::SkillDrag> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::SkillDrag> *)(v1 + 248);
          i != (std::pair<const std::string,data::SkillDrag> *)(v1 + 128);
          std::pair<std::string const,data::SkillDrag>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getSkillDragNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 808: range 000000000FA23CA1-000000000FA2439F
const std::map<data::SkillDrag,std::pair<std::string,std::string >> *__cdecl data::getSkillDragEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::SkillDrag,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[752]; // [rsp+10h] [rbp-2F0h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(704LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 64 9"
                        " <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 216 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getSkillDragEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862739] = -218103808;
  v3[536862740] = -202116109;
  v3[536862741] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getSkillDragEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getSkillDragEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[10])"DRAG_NONE");
    std::pair<data::SkillDrag const,std::pair<std::string,std::string>>::pair<data::SkillDrag,true>(
      (std::pair<const data::SkillDrag,std::pair<std::string,std::string > > *const)(v1 + 416),
      (data::SkillDrag *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[13])byte_1A624A80,
      (const char (*)[19])"DRAG_ROTATE_CAMERA");
    std::pair<data::SkillDrag const,std::pair<std::string,std::string>>::pair<data::SkillDrag,true>(
      (std::pair<const data::SkillDrag,std::pair<std::string,std::string > > *const)(v1 + 488),
      (data::SkillDrag *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[13])byte_1A624AC0,
      (const char (*)[22])"DRAG_ROTATE_CHARACTER");
    std::pair<data::SkillDrag const,std::pair<std::string,std::string>>::pair<data::SkillDrag,true>(
      (std::pair<const data::SkillDrag,std::pair<std::string,std::string > > *const)(v1 + 560),
      (data::SkillDrag *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    std::allocator<std::pair<data::SkillDrag const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::SkillDrag,std::pair<std::string,std::string>>::map(
      &data::getSkillDragEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > >)__PAIR128__(3LL, v1 + 416),
      (const std::less<data::SkillDrag> *)(v1 + 48),
      (const std::map<data::SkillDrag,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getSkillDragEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::SkillDrag,std::pair<std::string,std::string>>::~map,
      &data::getSkillDragEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::SkillDrag const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::SkillDrag,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::SkillDrag,std::pair<std::string,std::string > > *)(v1 + 632);
          i != (std::pair<const data::SkillDrag,std::pair<std::string,std::string > > *)(v1 + 416);
          std::pair<data::SkillDrag const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 416) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_DWORD *)(v5 + 16) = -117901064;
    *(_DWORD *)(v5 + 20) = -117901064;
    *(_WORD *)(v5 + 24) = -1800;
    *(_BYTE *)(v5 + 26) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return &data::getSkillDragEnumMap[abi:cxx11](void)::m;
};

// Line 819: range 000000000FA243A0-000000000FA24713
const char *__fastcall data::enumValToStr(data::FightPropType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::FightPropType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 5 e:818 64 8 8 iter:821 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getFightPropTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::FightPropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::FightPropType,std::pair<std::string,std::string>>::find(map, (const std::map<data::FightPropType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::FightPropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::FightPropType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      824);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_FightPropType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::FightPropType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 831: range 000000000FA24714-000000000FA24CCC
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::FightPropType>,false,true>::pointer v10; // rax
  data::FightPropType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::FightPropType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 6 it:840 96 8 9 <unknown> 128 8 5 s:830 160 32 9 <unknown> 224 32 9 <unk"
                        "nown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getFightPropTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::FightPropType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::FightPropType>::find(
                                                                                          m,
                                                                                          (const std::unordered_map<std::string,data::FightPropType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::FightPropType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::FightPropType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::FightPropType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FightPropType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FightPropType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        843);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::FightPropType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::FightPropType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      834);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 852: range 000000000FA24CCD-000000000FA27A2A
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::FightPropType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::FightPropType>,false,true>::pointer v11; // rax
  data::FightPropType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[4144]; // [rsp+20h] [rbp-1030h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(4096LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "75 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 "
                        "<unknown> 384 4 9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unkno"
                        "wn> 464 4 9 <unknown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 54"
                        "4 4 9 <unknown> 560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 "
                        "<unknown> 640 4 9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unkno"
                        "wn> 720 4 9 <unknown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 80"
                        "0 4 9 <unknown> 816 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9 "
                        "<unknown> 896 4 9 <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unkno"
                        "wn> 976 4 9 <unknown> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 4 9 <unknown>"
                        " 1056 4 9 <unknown> 1072 4 9 <unknown> 1088 4 9 <unknown> 1104 4 9 <unknown> 1120 8 6 it:927 115"
                        "2 8 9 <unknown> 1184 8 5 s:851 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> 1408 "
                        "2560 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -234556924;
  v4[536862735] = -234556924;
  v4[536862736] = -234556924;
  v4[536862737] = -234556924;
  v4[536862738] = -234556924;
  v4[536862739] = -234556924;
  v4[536862740] = -234556924;
  v4[536862741] = -234556924;
  v4[536862742] = -234556924;
  v4[536862743] = -234556924;
  v4[536862744] = -234556924;
  v4[536862745] = -234556924;
  v4[536862746] = -234556924;
  v4[536862747] = -234556924;
  v4[536862748] = -234556924;
  v4[536862749] = -234556924;
  v4[536862750] = -234556924;
  v4[536862751] = -234556924;
  v4[536862752] = -234556924;
  v4[536862753] = -234556924;
  v4[536862754] = -234556924;
  v4[536862755] = -218959360;
  v4[536862756] = -218959360;
  v4[536862757] = -218959360;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862844] = -202116109;
  v4[536862845] = -202116109;
  v4[536862846] = -202116109;
  v4[536862847] = -202116109;
  *(_QWORD *)(v2 + 1184) = s;
  if ( *(_QWORD *)(v2 + 1184) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::FightPropType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::FightPropType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1408),
        (const char (*)[16])byte_1A625280,
        (data::FightPropType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, byte_1A625280);
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[10],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1448),
        (const char (*)[10])byte_1A6252C0,
        (data::FightPropType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A6252C0);
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1488),
        (const char (*)[19])byte_1A625300,
        (data::FightPropType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A625300);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1528),
        (const char (*)[16])byte_1A625340,
        (data::FightPropType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A625340);
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[10],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1568),
        (const char (*)[10])byte_1A625380,
        (data::FightPropType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A625380);
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1608),
        (const char (*)[19])byte_1A6253C0,
        (data::FightPropType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A6253C0);
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1648),
        (const char (*)[16])byte_1A625400,
        (data::FightPropType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A625400);
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[10],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1688),
        (const char (*)[10])byte_1A625440,
        (data::FightPropType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A625440);
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1728),
        (const char (*)[19])byte_1A625480,
        (data::FightPropType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A625480);
      *(_DWORD *)(v2 + 240) = 10;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1768),
        (const char (*)[13])byte_1A6254C0,
        (data::FightPropType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A6254C0);
      *(_DWORD *)(v2 + 256) = 11;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1808),
        (const char (*)[22])byte_1A625500,
        (data::FightPropType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A625500);
      *(_DWORD *)(v2 + 272) = 12;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1848),
        (const char (*)[22])byte_1A625540,
        (data::FightPropType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, byte_1A625540);
      *(_DWORD *)(v2 + 288) = 13;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1888),
        (const char (*)[22])byte_1A625580,
        (data::FightPropType *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, byte_1A625580);
      *(_DWORD *)(v2 + 304) = 20;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[10],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1928),
        (const char (*)[10])byte_1A6255C0,
        (data::FightPropType *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, byte_1A6255C0);
      *(_DWORD *)(v2 + 320) = 21;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 1968),
        (const char (*)[13])byte_1A625600,
        (data::FightPropType *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, byte_1A625600);
      *(_DWORD *)(v2 + 336) = 22;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2008),
        (const char (*)[13])byte_1A625640,
        (data::FightPropType *)(v2 + 336));
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 352, byte_1A625640);
      *(_DWORD *)(v2 + 352) = 23;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2048),
        (const char (*)[13])byte_1A625680,
        (data::FightPropType *)(v2 + 352));
      if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 368, byte_1A625680);
      *(_DWORD *)(v2 + 368) = 24;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2088),
        (const char (*)[13])byte_1A6256C0,
        (data::FightPropType *)(v2 + 368));
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 384, byte_1A6256C0);
      *(_DWORD *)(v2 + 384) = 25;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2128),
        (const char (*)[13])byte_1A625700,
        (data::FightPropType *)(v2 + 384));
      if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 400, byte_1A625700);
      *(_DWORD *)(v2 + 400) = 26;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2168),
        (const char (*)[13])byte_1A625740,
        (data::FightPropType *)(v2 + 400));
      if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 416, byte_1A625740);
      *(_DWORD *)(v2 + 416) = 27;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2208),
        (const char (*)[16])byte_1A625780,
        (data::FightPropType *)(v2 + 416));
      if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 432, byte_1A625780);
      *(_DWORD *)(v2 + 432) = 28;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2248),
        (const char (*)[13])byte_1A6257C0,
        (data::FightPropType *)(v2 + 432));
      if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 448, byte_1A6257C0);
      *(_DWORD *)(v2 + 448) = 29;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2288),
        (const char (*)[13])byte_1A625800,
        (data::FightPropType *)(v2 + 448));
      if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 464, byte_1A625800);
      *(_DWORD *)(v2 + 464) = 30;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2328),
        (const char (*)[19])byte_1A625840,
        (data::FightPropType *)(v2 + 464));
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 480, byte_1A625840);
      *(_DWORD *)(v2 + 480) = 31;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2368),
        (const char (*)[22])byte_1A625880,
        (data::FightPropType *)(v2 + 480));
      if ( *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 496, byte_1A625880);
      *(_DWORD *)(v2 + 496) = 32;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2408),
        (const char (*)[22])byte_1A6258C0,
        (data::FightPropType *)(v2 + 496));
      if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 512, byte_1A6258C0);
      *(_DWORD *)(v2 + 512) = 40;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2448),
        (const char (*)[22])byte_1A625900,
        (data::FightPropType *)(v2 + 512));
      if ( *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 528, byte_1A625900);
      *(_DWORD *)(v2 + 528) = 41;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2488),
        (const char (*)[22])byte_1A625940,
        (data::FightPropType *)(v2 + 528));
      if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 544, byte_1A625940);
      *(_DWORD *)(v2 + 544) = 42;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2528),
        (const char (*)[22])byte_1A625980,
        (data::FightPropType *)(v2 + 544));
      if ( *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 560, byte_1A625980);
      *(_DWORD *)(v2 + 560) = 43;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2568),
        (const char (*)[22])byte_1A6259C0,
        (data::FightPropType *)(v2 + 560));
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 576, byte_1A6259C0);
      *(_DWORD *)(v2 + 576) = 44;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2608),
        (const char (*)[22])byte_1A625A00,
        (data::FightPropType *)(v2 + 576));
      if ( *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 592, byte_1A625A00);
      *(_DWORD *)(v2 + 592) = 45;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2648),
        (const char (*)[22])byte_1A625A40,
        (data::FightPropType *)(v2 + 592));
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 608, byte_1A625A40);
      *(_DWORD *)(v2 + 608) = 46;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2688),
        (const char (*)[22])byte_1A625A80,
        (data::FightPropType *)(v2 + 608));
      if ( *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 624, byte_1A625A80);
      *(_DWORD *)(v2 + 624) = 47;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2728),
        (const char (*)[19])byte_1A625AC0,
        (data::FightPropType *)(v2 + 624));
      if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 640, byte_1A625AC0);
      *(_DWORD *)(v2 + 640) = 50;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2768),
        (const char (*)[16])byte_1A625B00,
        (data::FightPropType *)(v2 + 640));
      if ( *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 656, byte_1A625B00);
      *(_DWORD *)(v2 + 656) = 51;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2808),
        (const char (*)[16])byte_1A625B40,
        (data::FightPropType *)(v2 + 656));
      if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 672, byte_1A625B40);
      *(_DWORD *)(v2 + 672) = 52;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2848),
        (const char (*)[16])byte_1A625B80,
        (data::FightPropType *)(v2 + 672));
      if ( *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 688, byte_1A625B80);
      *(_DWORD *)(v2 + 688) = 53;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2888),
        (const char (*)[16])byte_1A625BC0,
        (data::FightPropType *)(v2 + 688));
      if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 704, byte_1A625BC0);
      *(_DWORD *)(v2 + 704) = 54;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2928),
        (const char (*)[16])byte_1A625C00,
        (data::FightPropType *)(v2 + 704));
      if ( *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 720, byte_1A625C00);
      *(_DWORD *)(v2 + 720) = 55;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 2968),
        (const char (*)[16])byte_1A625C40,
        (data::FightPropType *)(v2 + 720));
      if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 736, byte_1A625C40);
      *(_DWORD *)(v2 + 736) = 56;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3008),
        (const char (*)[16])byte_1A625C80,
        (data::FightPropType *)(v2 + 736));
      if ( *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 752, byte_1A625C80);
      *(_DWORD *)(v2 + 752) = 60;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3048),
        (const char (*)[13])byte_1A625CC0,
        (data::FightPropType *)(v2 + 752));
      if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 768, byte_1A625CC0);
      *(_DWORD *)(v2 + 768) = 61;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3088),
        (const char (*)[13])byte_1A625D00,
        (data::FightPropType *)(v2 + 768));
      if ( *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 784, byte_1A625D00);
      *(_DWORD *)(v2 + 784) = 62;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3128),
        (const char (*)[13])byte_1A625D40,
        (data::FightPropType *)(v2 + 784));
      if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 800, byte_1A625D40);
      *(_DWORD *)(v2 + 800) = 64;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3168),
        (const char (*)[13])byte_1A625D80,
        (data::FightPropType *)(v2 + 800));
      if ( *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 816, byte_1A625D80);
      *(_DWORD *)(v2 + 816) = 65;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3208),
        (const char (*)[19])byte_1A625DC0,
        (data::FightPropType *)(v2 + 816));
      if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 832, byte_1A625DC0);
      *(_DWORD *)(v2 + 832) = 67;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3248),
        (const char (*)[19])byte_1A625E00,
        (data::FightPropType *)(v2 + 832));
      if ( *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 848, byte_1A625E00);
      *(_DWORD *)(v2 + 848) = 70;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3288),
        (const char (*)[16])byte_1A625E40,
        (data::FightPropType *)(v2 + 848));
      if ( *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 864, byte_1A625E40);
      *(_DWORD *)(v2 + 864) = 71;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3328),
        (const char (*)[16])byte_1A625E80,
        (data::FightPropType *)(v2 + 864));
      if ( *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 880, byte_1A625E80);
      *(_DWORD *)(v2 + 880) = 72;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3368),
        (const char (*)[16])byte_1A625EC0,
        (data::FightPropType *)(v2 + 880));
      if ( *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 896, byte_1A625EC0);
      *(_DWORD *)(v2 + 896) = 73;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3408),
        (const char (*)[16])byte_1A625F00,
        (data::FightPropType *)(v2 + 896));
      if ( *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 912, byte_1A625F00);
      *(_DWORD *)(v2 + 912) = 74;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3448),
        (const char (*)[16])byte_1A625F40,
        (data::FightPropType *)(v2 + 912));
      if ( *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 928, byte_1A625F40);
      *(_DWORD *)(v2 + 928) = 75;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3488),
        (const char (*)[16])byte_1A625F80,
        (data::FightPropType *)(v2 + 928));
      if ( *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 944, byte_1A625F80);
      *(_DWORD *)(v2 + 944) = 76;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3528),
        (const char (*)[16])byte_1A625FC0,
        (data::FightPropType *)(v2 + 944));
      if ( *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 960, byte_1A625FC0);
      *(_DWORD *)(v2 + 960) = 80;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3568),
        (const char (*)[13])byte_1A626000,
        (data::FightPropType *)(v2 + 960));
      if ( *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 976, byte_1A626000);
      *(_DWORD *)(v2 + 976) = 81;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3608),
        (const char (*)[13])byte_1A626040,
        (data::FightPropType *)(v2 + 976));
      if ( *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 992, byte_1A626040);
      *(_DWORD *)(v2 + 992) = 1000;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3648),
        (const char (*)[16])byte_1A626080,
        (data::FightPropType *)(v2 + 992));
      if ( *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1008, byte_1A626080);
      *(_DWORD *)(v2 + 1008) = 1001;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3688),
        (const char (*)[16])byte_1A6260C0,
        (data::FightPropType *)(v2 + 1008));
      if ( *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1024, byte_1A6260C0);
      *(_DWORD *)(v2 + 1024) = 1002;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3728),
        (const char (*)[16])byte_1A626100,
        (data::FightPropType *)(v2 + 1024));
      if ( *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1040, byte_1A626100);
      *(_DWORD *)(v2 + 1040) = 1003;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3768),
        (const char (*)[16])byte_1A626140,
        (data::FightPropType *)(v2 + 1040));
      if ( *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1056, byte_1A626140);
      *(_DWORD *)(v2 + 1056) = 1004;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3808),
        (const char (*)[16])byte_1A626180,
        (data::FightPropType *)(v2 + 1056));
      if ( *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1072, byte_1A626180);
      *(_DWORD *)(v2 + 1072) = 1005;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3848),
        (const char (*)[16])byte_1A6261C0,
        (data::FightPropType *)(v2 + 1072));
      if ( *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1088, byte_1A6261C0);
      *(_DWORD *)(v2 + 1088) = 1006;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3888),
        (const char (*)[16])byte_1A626200,
        (data::FightPropType *)(v2 + 1088));
      if ( *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1104, byte_1A626200);
      *(_DWORD *)(v2 + 1104) = 1010;
      std::pair<std::string const,data::FightPropType>::pair<char const(&)[13],data::FightPropType,true>(
        (std::pair<const std::string,data::FightPropType> *const)(v2 + 3928),
        (const char (*)[13])byte_1A626240,
        (data::FightPropType *)(v2 + 1104));
      std::allocator<std::pair<std::string const,data::FightPropType>>::allocator((std::allocator<std::pair<const std::string,data::FightPropType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::FightPropType>::unordered_map(
        &data::enumStrToVal(char const*,data::FightPropType &)::m,
        (std::initializer_list<std::pair<const std::string,data::FightPropType> >)__PAIR128__(64LL, v2 + 1408),
        0LL,
        (const std::unordered_map<std::string,data::FightPropType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::FightPropType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::FightPropType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::FightPropType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::FightPropType>::~unordered_map,
        &data::enumStrToVal(char const*,data::FightPropType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::FightPropType>>::~allocator((std::allocator<std::pair<const std::string,data::FightPropType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::FightPropType> *)(v2 + 3968);
            i != (std::pair<const std::string,data::FightPropType> *)(v2 + 1408);
            std::pair<std::string const,data::FightPropType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 1408, 2560LL);
      *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v7 = *(const char **)(v2 + 1184);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1280),
      v7,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 1120, v7);
    *(std::unordered_map<std::string,data::FightPropType>::iterator *)(v2 + 1120) = std::unordered_map<std::string,data::FightPropType>::find(
                                                                                      &data::enumStrToVal(char const*,data::FightPropType &)::m,
                                                                                      (const std::unordered_map<std::string,data::FightPropType>::key_type *)(v2 + 1280));
    std::string::~string((void *)(v2 + 1280));
    *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 1152, v2 + 1280);
    *(std::unordered_map<std::string,data::FightPropType>::iterator *)(v2 + 1152) = std::unordered_map<std::string,data::FightPropType>::end(&data::enumStrToVal(char const*,data::FightPropType &)::m);
    v8 = (char *)(v2 + 1152);
    v9 = std::__detail::operator==<std::pair<std::string const,data::FightPropType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FightPropType>,true> *)(v2 + 1120),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FightPropType>,true> *)(v2 + 1152));
    *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1344) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 1375) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1344, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1344),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        930);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 1344),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 1184));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1344));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::FightPropType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::FightPropType>,false,true> *const)(v2 + 1120));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 1216) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 1247) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 1216, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 1216),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      855);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 1216),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1216));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8090) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 152) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF809C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80AC) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81F8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862765) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147451052 - (((_DWORD)v4 + 2147451060) & 0xFFFFFFF8) + 340) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 4096LL, v17);
  }
  return v14;
};

// Line 939: range 000000000FA27A2B-000000000FA27A41
const char *__cdecl data::getDescription(data::FightPropType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 944: range 000000000FA27A42-000000000FA27BF7
bool __cdecl data::isValidFightPropType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::FightPropType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::FightPropType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 5 e:945 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidFightPropType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getFightPropTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::FightPropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::FightPropType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getFightPropTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::FightPropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::FightPropType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::FightPropType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 950: range 000000000FA27BF8-000000000FA27D59
bool __cdecl data::isValidFightPropTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::FightPropType> *v5; // rcx
  const std::unordered_map<std::string,data::FightPropType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidFightPropTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getFightPropTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::FightPropType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::FightPropType>::end(v5);
  v6 = data::getFightPropTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::FightPropType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::FightPropType>::find(
                                                                                        v6,
                                                                                        name);
  result = std::__detail::operator!=<std::pair<std::string const,data::FightPropType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FightPropType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FightPropType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 955: range 000000000FA27D5A-000000000FA2BAB5
const std::unordered_map<std::string,data::FightPropType> *__cdecl data::getFightPropTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::FightPropType> *i; // r14
  char v6[6896]; // [rsp+10h] [rbp-1AF0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_7(6848LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "120 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 "
                        "9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unk"
                        "nown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> "
                        "304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 "
                        "9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unk"
                        "nown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> "
                        "560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 "
                        "9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unk"
                        "nown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> "
                        "816 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9 <unknown> 896 4 "
                        "9 <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unknown> 976 4 9 <unk"
                        "nown> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 4 9 <unknown> 1056 4 9 <unkno"
                        "wn> 1072 4 9 <unknown> 1088 4 9 <unknown> 1104 4 9 <unknown> 1120 4 9 <unknown> 1136 4 9 <unknow"
                        "n> 1152 4 9 <unknown> 1168 4 9 <unknown> 1184 4 9 <unknown> 1200 4 9 <unknown> 1216 4 9 <unknown"
                        "> 1232 4 9 <unknown> 1248 4 9 <unknown> 1264 4 9 <unknown> 1280 4 9 <unknown> 1296 4 9 <unknown>"
                        " 1312 4 9 <unknown> 1328 4 9 <unknown> 1344 4 9 <unknown> 1360 4 9 <unknown> 1376 4 9 <unknown> "
                        "1392 4 9 <unknown> 1408 4 9 <unknown> 1424 4 9 <unknown> 1440 4 9 <unknown> 1456 4 9 <unknown> 1"
                        "472 4 9 <unknown> 1488 4 9 <unknown> 1504 4 9 <unknown> 1520 4 9 <unknown> 1536 4 9 <unknown> 15"
                        "52 4 9 <unknown> 1568 4 9 <unknown> 1584 4 9 <unknown> 1600 4 9 <unknown> 1616 4 9 <unknown> 163"
                        "2 4 9 <unknown> 1648 4 9 <unknown> 1664 4 9 <unknown> 1680 4 9 <unknown> 1696 4 9 <unknown> 1712"
                        " 4 9 <unknown> 1728 4 9 <unknown> 1744 4 9 <unknown> 1760 4 9 <unknown> 1776 4 9 <unknown> 1792 "
                        "4 9 <unknown> 1808 4 9 <unknown> 1824 4 9 <unknown> 1840 4 9 <unknown> 1856 4 9 <unknown> 1872 4"
                        " 9 <unknown> 1888 4 9 <unknown> 1904 4 9 <unknown> 1920 4 9 <unknown> 1936 4 9 <unknown> 1952 4640 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getFightPropTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = -234556924;
  v3[536862754] = -234556924;
  v3[536862755] = -234556924;
  v3[536862756] = -234556924;
  v3[536862757] = -234556924;
  v3[536862758] = -234556924;
  v3[536862759] = -234556924;
  v3[536862760] = -234556924;
  v3[536862761] = -234556924;
  v3[536862762] = -234556924;
  v3[536862763] = -234556924;
  v3[536862764] = -234556924;
  v3[536862765] = -234556924;
  v3[536862766] = -234556924;
  v3[536862767] = -234556924;
  v3[536862768] = -234556924;
  v3[536862769] = -234556924;
  v3[536862770] = -234556924;
  v3[536862771] = -234556924;
  v3[536862772] = -234556924;
  v3[536862773] = -234556924;
  v3[536862774] = -234556924;
  v3[536862775] = -234556924;
  v3[536862776] = -234556924;
  v3[536862777] = -234556924;
  v3[536862778] = -234556924;
  v3[536862779] = -234556924;
  v3[536862780] = -234556924;
  v3[536862926] = -202116109;
  v3[536862927] = -202116109;
  v3[536862928] = -202116109;
  v3[536862929] = -202116109;
  v3[536862930] = -202116109;
  v3[536862931] = -202116109;
  v3[536862932] = -202116109;
  v3[536862933] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getFightPropTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getFightPropTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[16],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 1952),
      (const char (*)[16])"FIGHT_PROP_NONE",
      (data::FightPropType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "FIGHT_PROP_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 1992),
      (const char (*)[19])"FIGHT_PROP_BASE_HP",
      (data::FightPropType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "FIGHT_PROP_BASE_HP");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[14],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2032),
      (const char (*)[14])"FIGHT_PROP_HP",
      (data::FightPropType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "FIGHT_PROP_HP");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2072),
      (const char (*)[22])"FIGHT_PROP_HP_PERCENT",
      (data::FightPropType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "FIGHT_PROP_HP_PERCENT");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[23],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2112),
      (const char (*)[23])"FIGHT_PROP_BASE_ATTACK",
      (data::FightPropType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "FIGHT_PROP_BASE_ATTACK");
    *(_DWORD *)(v1 + 176) = 5;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[18],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2152),
      (const char (*)[18])"FIGHT_PROP_ATTACK",
      (data::FightPropType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "FIGHT_PROP_ATTACK");
    *(_DWORD *)(v1 + 192) = 6;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2192),
      (const char (*)[26])"FIGHT_PROP_ATTACK_PERCENT",
      (data::FightPropType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "FIGHT_PROP_ATTACK_PERCENT");
    *(_DWORD *)(v1 + 208) = 7;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[24],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2232),
      (const char (*)[24])"FIGHT_PROP_BASE_DEFENSE",
      (data::FightPropType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "FIGHT_PROP_BASE_DEFENSE");
    *(_DWORD *)(v1 + 224) = 8;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[19],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2272),
      (const char (*)[19])"FIGHT_PROP_DEFENSE",
      (data::FightPropType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "FIGHT_PROP_DEFENSE");
    *(_DWORD *)(v1 + 240) = 9;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2312),
      (const char (*)[27])"FIGHT_PROP_DEFENSE_PERCENT",
      (data::FightPropType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "FIGHT_PROP_DEFENSE_PERCENT");
    *(_DWORD *)(v1 + 256) = 10;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2352),
      (const char (*)[22])"FIGHT_PROP_BASE_SPEED",
      (data::FightPropType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "FIGHT_PROP_BASE_SPEED");
    *(_DWORD *)(v1 + 272) = 11;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2392),
      (const char (*)[25])"FIGHT_PROP_SPEED_PERCENT",
      (data::FightPropType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "FIGHT_PROP_SPEED_PERCENT");
    *(_DWORD *)(v1 + 288) = 12;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2432),
      (const char (*)[25])"FIGHT_PROP_HP_MP_PERCENT",
      (data::FightPropType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "FIGHT_PROP_HP_MP_PERCENT");
    *(_DWORD *)(v1 + 304) = 13;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[29],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2472),
      (const char (*)[29])"FIGHT_PROP_ATTACK_MP_PERCENT",
      (data::FightPropType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "FIGHT_PROP_ATTACK_MP_PERCENT");
    *(_DWORD *)(v1 + 320) = 20;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[20],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2512),
      (const char (*)[20])"FIGHT_PROP_CRITICAL",
      (data::FightPropType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "FIGHT_PROP_CRITICAL");
    *(_DWORD *)(v1 + 336) = 21;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2552),
      (const char (*)[25])"FIGHT_PROP_ANTI_CRITICAL",
      (data::FightPropType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "FIGHT_PROP_ANTI_CRITICAL");
    *(_DWORD *)(v1 + 352) = 22;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2592),
      (const char (*)[25])"FIGHT_PROP_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 352));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, "FIGHT_PROP_CRITICAL_HURT");
    *(_DWORD *)(v1 + 368) = 23;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[29],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2632),
      (const char (*)[29])"FIGHT_PROP_CHARGE_EFFICIENCY",
      (data::FightPropType *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, "FIGHT_PROP_CHARGE_EFFICIENCY");
    *(_DWORD *)(v1 + 384) = 24;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[20],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2672),
      (const char (*)[20])"FIGHT_PROP_ADD_HURT",
      (data::FightPropType *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, "FIGHT_PROP_ADD_HURT");
    *(_DWORD *)(v1 + 400) = 25;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[20],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2712),
      (const char (*)[20])"FIGHT_PROP_SUB_HURT",
      (data::FightPropType *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, "FIGHT_PROP_SUB_HURT");
    *(_DWORD *)(v1 + 416) = 26;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[20],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2752),
      (const char (*)[20])"FIGHT_PROP_HEAL_ADD",
      (data::FightPropType *)(v1 + 416));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, "FIGHT_PROP_HEAL_ADD");
    *(_DWORD *)(v1 + 432) = 27;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2792),
      (const char (*)[22])"FIGHT_PROP_HEALED_ADD",
      (data::FightPropType *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, "FIGHT_PROP_HEALED_ADD");
    *(_DWORD *)(v1 + 448) = 28;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2832),
      (const char (*)[27])"FIGHT_PROP_ELEMENT_MASTERY",
      (data::FightPropType *)(v1 + 448));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, "FIGHT_PROP_ELEMENT_MASTERY");
    *(_DWORD *)(v1 + 464) = 29;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[29],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2872),
      (const char (*)[29])"FIGHT_PROP_PHYSICAL_SUB_HURT",
      (data::FightPropType *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, "FIGHT_PROP_PHYSICAL_SUB_HURT");
    *(_DWORD *)(v1 + 480) = 30;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[29],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2912),
      (const char (*)[29])"FIGHT_PROP_PHYSICAL_ADD_HURT",
      (data::FightPropType *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, "FIGHT_PROP_PHYSICAL_ADD_HURT");
    *(_DWORD *)(v1 + 496) = 31;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[32],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2952),
      (const char (*)[32])"FIGHT_PROP_DEFENCE_IGNORE_RATIO",
      (data::FightPropType *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, "FIGHT_PROP_DEFENCE_IGNORE_RATIO");
    *(_DWORD *)(v1 + 512) = 32;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[32],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 2992),
      (const char (*)[32])"FIGHT_PROP_DEFENCE_IGNORE_DELTA",
      (data::FightPropType *)(v1 + 512));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, "FIGHT_PROP_DEFENCE_IGNORE_DELTA");
    *(_DWORD *)(v1 + 528) = 40;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3032),
      (const char (*)[25])"FIGHT_PROP_FIRE_ADD_HURT",
      (data::FightPropType *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, "FIGHT_PROP_FIRE_ADD_HURT");
    *(_DWORD *)(v1 + 544) = 41;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3072),
      (const char (*)[25])"FIGHT_PROP_ELEC_ADD_HURT",
      (data::FightPropType *)(v1 + 544));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, "FIGHT_PROP_ELEC_ADD_HURT");
    *(_DWORD *)(v1 + 560) = 42;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3112),
      (const char (*)[26])"FIGHT_PROP_WATER_ADD_HURT",
      (data::FightPropType *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, "FIGHT_PROP_WATER_ADD_HURT");
    *(_DWORD *)(v1 + 576) = 43;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3152),
      (const char (*)[26])"FIGHT_PROP_GRASS_ADD_HURT",
      (data::FightPropType *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, "FIGHT_PROP_GRASS_ADD_HURT");
    *(_DWORD *)(v1 + 592) = 44;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3192),
      (const char (*)[25])"FIGHT_PROP_WIND_ADD_HURT",
      (data::FightPropType *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, "FIGHT_PROP_WIND_ADD_HURT");
    *(_DWORD *)(v1 + 608) = 45;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3232),
      (const char (*)[25])"FIGHT_PROP_ROCK_ADD_HURT",
      (data::FightPropType *)(v1 + 608));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, "FIGHT_PROP_ROCK_ADD_HURT");
    *(_DWORD *)(v1 + 624) = 46;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[24],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3272),
      (const char (*)[24])"FIGHT_PROP_ICE_ADD_HURT",
      (data::FightPropType *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, "FIGHT_PROP_ICE_ADD_HURT");
    *(_DWORD *)(v1 + 640) = 47;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[29],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3312),
      (const char (*)[29])"FIGHT_PROP_HIT_HEAD_ADD_HURT",
      (data::FightPropType *)(v1 + 640));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, "FIGHT_PROP_HIT_HEAD_ADD_HURT");
    *(_DWORD *)(v1 + 656) = 50;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3352),
      (const char (*)[25])"FIGHT_PROP_FIRE_SUB_HURT",
      (data::FightPropType *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, "FIGHT_PROP_FIRE_SUB_HURT");
    *(_DWORD *)(v1 + 672) = 51;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3392),
      (const char (*)[25])"FIGHT_PROP_ELEC_SUB_HURT",
      (data::FightPropType *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, "FIGHT_PROP_ELEC_SUB_HURT");
    *(_DWORD *)(v1 + 688) = 52;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3432),
      (const char (*)[26])"FIGHT_PROP_WATER_SUB_HURT",
      (data::FightPropType *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, "FIGHT_PROP_WATER_SUB_HURT");
    *(_DWORD *)(v1 + 704) = 53;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3472),
      (const char (*)[26])"FIGHT_PROP_GRASS_SUB_HURT",
      (data::FightPropType *)(v1 + 704));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, "FIGHT_PROP_GRASS_SUB_HURT");
    *(_DWORD *)(v1 + 720) = 54;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3512),
      (const char (*)[25])"FIGHT_PROP_WIND_SUB_HURT",
      (data::FightPropType *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, "FIGHT_PROP_WIND_SUB_HURT");
    *(_DWORD *)(v1 + 736) = 55;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3552),
      (const char (*)[25])"FIGHT_PROP_ROCK_SUB_HURT",
      (data::FightPropType *)(v1 + 736));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, "FIGHT_PROP_ROCK_SUB_HURT");
    *(_DWORD *)(v1 + 752) = 56;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[24],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3592),
      (const char (*)[24])"FIGHT_PROP_ICE_SUB_HURT",
      (data::FightPropType *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, "FIGHT_PROP_ICE_SUB_HURT");
    *(_DWORD *)(v1 + 768) = 60;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3632),
      (const char (*)[22])"FIGHT_PROP_EFFECT_HIT",
      (data::FightPropType *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, "FIGHT_PROP_EFFECT_HIT");
    *(_DWORD *)(v1 + 784) = 61;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3672),
      (const char (*)[25])"FIGHT_PROP_EFFECT_RESIST",
      (data::FightPropType *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, "FIGHT_PROP_EFFECT_RESIST");
    *(_DWORD *)(v1 + 800) = 62;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3712),
      (const char (*)[25])"FIGHT_PROP_FREEZE_RESIST",
      (data::FightPropType *)(v1 + 800));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, "FIGHT_PROP_FREEZE_RESIST");
    *(_DWORD *)(v1 + 816) = 64;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[24],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3752),
      (const char (*)[24])"FIGHT_PROP_DIZZY_RESIST",
      (data::FightPropType *)(v1 + 816));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, "FIGHT_PROP_DIZZY_RESIST");
    *(_DWORD *)(v1 + 832) = 65;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3792),
      (const char (*)[26])"FIGHT_PROP_FREEZE_SHORTEN",
      (data::FightPropType *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, "FIGHT_PROP_FREEZE_SHORTEN");
    *(_DWORD *)(v1 + 848) = 67;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[25],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3832),
      (const char (*)[25])"FIGHT_PROP_DIZZY_SHORTEN",
      (data::FightPropType *)(v1 + 848));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, "FIGHT_PROP_DIZZY_SHORTEN");
    *(_DWORD *)(v1 + 864) = 70;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3872),
      (const char (*)[27])"FIGHT_PROP_MAX_FIRE_ENERGY",
      (data::FightPropType *)(v1 + 864));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, "FIGHT_PROP_MAX_FIRE_ENERGY");
    *(_DWORD *)(v1 + 880) = 71;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3912),
      (const char (*)[27])"FIGHT_PROP_MAX_ELEC_ENERGY",
      (data::FightPropType *)(v1 + 880));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, "FIGHT_PROP_MAX_ELEC_ENERGY");
    *(_DWORD *)(v1 + 896) = 72;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[28],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3952),
      (const char (*)[28])"FIGHT_PROP_MAX_WATER_ENERGY",
      (data::FightPropType *)(v1 + 896));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, "FIGHT_PROP_MAX_WATER_ENERGY");
    *(_DWORD *)(v1 + 912) = 73;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[28],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 3992),
      (const char (*)[28])"FIGHT_PROP_MAX_GRASS_ENERGY",
      (data::FightPropType *)(v1 + 912));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, "FIGHT_PROP_MAX_GRASS_ENERGY");
    *(_DWORD *)(v1 + 928) = 74;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4032),
      (const char (*)[27])"FIGHT_PROP_MAX_WIND_ENERGY",
      (data::FightPropType *)(v1 + 928));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, "FIGHT_PROP_MAX_WIND_ENERGY");
    *(_DWORD *)(v1 + 944) = 75;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4072),
      (const char (*)[26])"FIGHT_PROP_MAX_ICE_ENERGY",
      (data::FightPropType *)(v1 + 944));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, "FIGHT_PROP_MAX_ICE_ENERGY");
    *(_DWORD *)(v1 + 960) = 76;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4112),
      (const char (*)[27])"FIGHT_PROP_MAX_ROCK_ENERGY",
      (data::FightPropType *)(v1 + 960));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, "FIGHT_PROP_MAX_ROCK_ENERGY");
    *(_DWORD *)(v1 + 976) = 80;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[32],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4152),
      (const char (*)[32])"FIGHT_PROP_SKILL_CD_MINUS_RATIO",
      (data::FightPropType *)(v1 + 976));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, "FIGHT_PROP_SKILL_CD_MINUS_RATIO");
    *(_DWORD *)(v1 + 992) = 81;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[35],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4192),
      (const char (*)[35])"FIGHT_PROP_SHIELD_COST_MINUS_RATIO",
      (data::FightPropType *)(v1 + 992));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, "FIGHT_PROP_SHIELD_COST_MINUS_RATIO");
    *(_DWORD *)(v1 + 1008) = 1000;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4232),
      (const char (*)[27])"FIGHT_PROP_CUR_FIRE_ENERGY",
      (data::FightPropType *)(v1 + 1008));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, "FIGHT_PROP_CUR_FIRE_ENERGY");
    *(_DWORD *)(v1 + 1024) = 1001;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4272),
      (const char (*)[27])"FIGHT_PROP_CUR_ELEC_ENERGY",
      (data::FightPropType *)(v1 + 1024));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, "FIGHT_PROP_CUR_ELEC_ENERGY");
    *(_DWORD *)(v1 + 1040) = 1002;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[28],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4312),
      (const char (*)[28])"FIGHT_PROP_CUR_WATER_ENERGY",
      (data::FightPropType *)(v1 + 1040));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, "FIGHT_PROP_CUR_WATER_ENERGY");
    *(_DWORD *)(v1 + 1056) = 1003;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[28],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4352),
      (const char (*)[28])"FIGHT_PROP_CUR_GRASS_ENERGY",
      (data::FightPropType *)(v1 + 1056));
    if ( *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1072, "FIGHT_PROP_CUR_GRASS_ENERGY");
    *(_DWORD *)(v1 + 1072) = 1004;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4392),
      (const char (*)[27])"FIGHT_PROP_CUR_WIND_ENERGY",
      (data::FightPropType *)(v1 + 1072));
    if ( *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1088, "FIGHT_PROP_CUR_WIND_ENERGY");
    *(_DWORD *)(v1 + 1088) = 1005;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[26],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4432),
      (const char (*)[26])"FIGHT_PROP_CUR_ICE_ENERGY",
      (data::FightPropType *)(v1 + 1088));
    if ( *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1104, "FIGHT_PROP_CUR_ICE_ENERGY");
    *(_DWORD *)(v1 + 1104) = 1006;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4472),
      (const char (*)[27])"FIGHT_PROP_CUR_ROCK_ENERGY",
      (data::FightPropType *)(v1 + 1104));
    if ( *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1120, "FIGHT_PROP_CUR_ROCK_ENERGY");
    *(_DWORD *)(v1 + 1120) = 1010;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[18],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4512),
      (const char (*)[18])"FIGHT_PROP_CUR_HP",
      (data::FightPropType *)(v1 + 1120));
    if ( *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1136, "FIGHT_PROP_CUR_HP");
    *(_DWORD *)(v1 + 1136) = 2000;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[18],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4552),
      (const char (*)[18])"FIGHT_PROP_MAX_HP",
      (data::FightPropType *)(v1 + 1136));
    if ( *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1152, "FIGHT_PROP_MAX_HP");
    *(_DWORD *)(v1 + 1152) = 2001;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[22],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4592),
      (const char (*)[22])"FIGHT_PROP_CUR_ATTACK",
      (data::FightPropType *)(v1 + 1152));
    if ( *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1168, "FIGHT_PROP_CUR_ATTACK");
    *(_DWORD *)(v1 + 1168) = 2002;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[23],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4632),
      (const char (*)[23])"FIGHT_PROP_CUR_DEFENSE",
      (data::FightPropType *)(v1 + 1168));
    if ( *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1184, "FIGHT_PROP_CUR_DEFENSE");
    *(_DWORD *)(v1 + 1184) = 2003;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[21],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4672),
      (const char (*)[21])"FIGHT_PROP_CUR_SPEED",
      (data::FightPropType *)(v1 + 1184));
    if ( *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1200, "FIGHT_PROP_CUR_SPEED");
    *(_DWORD *)(v1 + 1200) = 3000;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[27],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4712),
      (const char (*)[27])"FIGHT_PROP_NONEXTRA_ATTACK",
      (data::FightPropType *)(v1 + 1200));
    if ( *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1216, "FIGHT_PROP_NONEXTRA_ATTACK");
    *(_DWORD *)(v1 + 1216) = 3001;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[28],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4752),
      (const char (*)[28])"FIGHT_PROP_NONEXTRA_DEFENSE",
      (data::FightPropType *)(v1 + 1216));
    if ( *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1232, "FIGHT_PROP_NONEXTRA_DEFENSE");
    *(_DWORD *)(v1 + 1232) = 3002;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[29],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4792),
      (const char (*)[29])"FIGHT_PROP_NONEXTRA_CRITICAL",
      (data::FightPropType *)(v1 + 1232));
    if ( *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1248, "FIGHT_PROP_NONEXTRA_CRITICAL");
    *(_DWORD *)(v1 + 1248) = 3003;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4832),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ANTI_CRITICAL",
      (data::FightPropType *)(v1 + 1248));
    if ( *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1264, "FIGHT_PROP_NONEXTRA_ANTI_CRITICAL");
    *(_DWORD *)(v1 + 1264) = 3004;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4872),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1264));
    if ( *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1280, "FIGHT_PROP_NONEXTRA_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1280) = 3005;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[38],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4912),
      (const char (*)[38])"FIGHT_PROP_NONEXTRA_CHARGE_EFFICIENCY",
      (data::FightPropType *)(v1 + 1280));
    if ( *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1296, "FIGHT_PROP_NONEXTRA_CHARGE_EFFICIENCY");
    *(_DWORD *)(v1 + 1296) = 3006;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[36],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4952),
      (const char (*)[36])"FIGHT_PROP_NONEXTRA_ELEMENT_MASTERY",
      (data::FightPropType *)(v1 + 1296));
    if ( *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1312, "FIGHT_PROP_NONEXTRA_ELEMENT_MASTERY");
    *(_DWORD *)(v1 + 1312) = 3007;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[38],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 4992),
      (const char (*)[38])"FIGHT_PROP_NONEXTRA_PHYSICAL_SUB_HURT",
      (data::FightPropType *)(v1 + 1312));
    if ( *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1328, "FIGHT_PROP_NONEXTRA_PHYSICAL_SUB_HURT");
    *(_DWORD *)(v1 + 1328) = 3008;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5032),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_FIRE_ADD_HURT",
      (data::FightPropType *)(v1 + 1328));
    if ( *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1344, "FIGHT_PROP_NONEXTRA_FIRE_ADD_HURT");
    *(_DWORD *)(v1 + 1344) = 3009;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5072),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ELEC_ADD_HURT",
      (data::FightPropType *)(v1 + 1344));
    if ( *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1360, "FIGHT_PROP_NONEXTRA_ELEC_ADD_HURT");
    *(_DWORD *)(v1 + 1360) = 3010;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[35],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5112),
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_WATER_ADD_HURT",
      (data::FightPropType *)(v1 + 1360));
    if ( *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1376, "FIGHT_PROP_NONEXTRA_WATER_ADD_HURT");
    *(_DWORD *)(v1 + 1376) = 3011;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[35],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5152),
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_GRASS_ADD_HURT",
      (data::FightPropType *)(v1 + 1376));
    if ( *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1392, "FIGHT_PROP_NONEXTRA_GRASS_ADD_HURT");
    *(_DWORD *)(v1 + 1392) = 3012;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5192),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_WIND_ADD_HURT",
      (data::FightPropType *)(v1 + 1392));
    if ( *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1408, "FIGHT_PROP_NONEXTRA_WIND_ADD_HURT");
    *(_DWORD *)(v1 + 1408) = 3013;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5232),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ROCK_ADD_HURT",
      (data::FightPropType *)(v1 + 1408));
    if ( *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1424, "FIGHT_PROP_NONEXTRA_ROCK_ADD_HURT");
    *(_DWORD *)(v1 + 1424) = 3014;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[33],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5272),
      (const char (*)[33])"FIGHT_PROP_NONEXTRA_ICE_ADD_HURT",
      (data::FightPropType *)(v1 + 1424));
    if ( *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1440, "FIGHT_PROP_NONEXTRA_ICE_ADD_HURT");
    *(_DWORD *)(v1 + 1440) = 3015;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5312),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_FIRE_SUB_HURT",
      (data::FightPropType *)(v1 + 1440));
    if ( *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1456, "FIGHT_PROP_NONEXTRA_FIRE_SUB_HURT");
    *(_DWORD *)(v1 + 1456) = 3016;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5352),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ELEC_SUB_HURT",
      (data::FightPropType *)(v1 + 1456));
    if ( *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1472, "FIGHT_PROP_NONEXTRA_ELEC_SUB_HURT");
    *(_DWORD *)(v1 + 1472) = 3017;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[35],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5392),
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_WATER_SUB_HURT",
      (data::FightPropType *)(v1 + 1472));
    if ( *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1488, "FIGHT_PROP_NONEXTRA_WATER_SUB_HURT");
    *(_DWORD *)(v1 + 1488) = 3018;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[35],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5432),
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_GRASS_SUB_HURT",
      (data::FightPropType *)(v1 + 1488));
    if ( *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1504, "FIGHT_PROP_NONEXTRA_GRASS_SUB_HURT");
    *(_DWORD *)(v1 + 1504) = 3019;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5472),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_WIND_SUB_HURT",
      (data::FightPropType *)(v1 + 1504));
    if ( *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1520, "FIGHT_PROP_NONEXTRA_WIND_SUB_HURT");
    *(_DWORD *)(v1 + 1520) = 3020;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[34],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5512),
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ROCK_SUB_HURT",
      (data::FightPropType *)(v1 + 1520));
    if ( *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1536, "FIGHT_PROP_NONEXTRA_ROCK_SUB_HURT");
    *(_DWORD *)(v1 + 1536) = 3021;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[33],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5552),
      (const char (*)[33])"FIGHT_PROP_NONEXTRA_ICE_SUB_HURT",
      (data::FightPropType *)(v1 + 1536));
    if ( *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1552, "FIGHT_PROP_NONEXTRA_ICE_SUB_HURT");
    *(_DWORD *)(v1 + 1552) = 3022;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[41],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5592),
      (const char (*)[41])"FIGHT_PROP_NONEXTRA_SKILL_CD_MINUS_RATIO",
      (data::FightPropType *)(v1 + 1552));
    if ( *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1568, "FIGHT_PROP_NONEXTRA_SKILL_CD_MINUS_RATIO");
    *(_DWORD *)(v1 + 1568) = 3023;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[44],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5632),
      (const char (*)[44])"FIGHT_PROP_NONEXTRA_SHIELD_COST_MINUS_RATIO",
      (data::FightPropType *)(v1 + 1568));
    if ( *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1584, "FIGHT_PROP_NONEXTRA_SHIELD_COST_MINUS_RATIO");
    *(_DWORD *)(v1 + 1584) = 3024;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[38],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5672),
      (const char (*)[38])"FIGHT_PROP_NONEXTRA_PHYSICAL_ADD_HURT",
      (data::FightPropType *)(v1 + 1584));
    if ( *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1600, "FIGHT_PROP_NONEXTRA_PHYSICAL_ADD_HURT");
    *(_DWORD *)(v1 + 1600) = 3045;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[36],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5712),
      (const char (*)[36])"FIGHT_PROP_BASE_ELEM_REACT_CRITICAL",
      (data::FightPropType *)(v1 + 1600));
    if ( *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1616, "FIGHT_PROP_BASE_ELEM_REACT_CRITICAL");
    *(_DWORD *)(v1 + 1616) = 3046;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[41],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5752),
      (const char (*)[41])"FIGHT_PROP_BASE_ELEM_REACT_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1616));
    if ( *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1632, "FIGHT_PROP_BASE_ELEM_REACT_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1632) = 3025;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[31],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5792),
      (const char (*)[31])"FIGHT_PROP_ELEM_REACT_CRITICAL",
      (data::FightPropType *)(v1 + 1632));
    if ( *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1648, "FIGHT_PROP_ELEM_REACT_CRITICAL");
    *(_DWORD *)(v1 + 1648) = 3026;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[36],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5832),
      (const char (*)[36])"FIGHT_PROP_ELEM_REACT_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1648));
    if ( *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1664, "FIGHT_PROP_ELEM_REACT_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1664) = 3027;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[39],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5872),
      (const char (*)[39])"FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL",
      (data::FightPropType *)(v1 + 1664));
    if ( *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1680, "FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL");
    *(_DWORD *)(v1 + 1680) = 3028;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[44],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5912),
      (const char (*)[44])"FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1680));
    if ( *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1696, "FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1696) = 3029;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[37],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5952),
      (const char (*)[37])"FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL",
      (data::FightPropType *)(v1 + 1696));
    if ( *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1712, "FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL");
    *(_DWORD *)(v1 + 1712) = 3030;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[42],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 5992),
      (const char (*)[42])"FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1712));
    if ( *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1728, "FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1728) = 3031;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[40],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6032),
      (const char (*)[40])"FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL",
      (data::FightPropType *)(v1 + 1728));
    if ( *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1744, "FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL");
    *(_DWORD *)(v1 + 1744) = 3032;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[45],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6072),
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1744));
    if ( *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1760, "FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1760) = 3033;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[40],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6112),
      (const char (*)[40])"FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL",
      (data::FightPropType *)(v1 + 1760));
    if ( *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1776, "FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL");
    *(_DWORD *)(v1 + 1776) = 3034;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[45],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6152),
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1776));
    if ( *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1792, "FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1792) = 3035;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[36],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6192),
      (const char (*)[36])"FIGHT_PROP_ELEM_REACT_BURN_CRITICAL",
      (data::FightPropType *)(v1 + 1792));
    if ( *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1808, "FIGHT_PROP_ELEM_REACT_BURN_CRITICAL");
    *(_DWORD *)(v1 + 1808) = 3036;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[41],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6232),
      (const char (*)[41])"FIGHT_PROP_ELEM_REACT_BURN_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1808));
    if ( *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1824, "FIGHT_PROP_ELEM_REACT_BURN_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1824) = 3037;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[44],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6272),
      (const char (*)[44])"FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL",
      (data::FightPropType *)(v1 + 1824));
    if ( *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1840, "FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL");
    *(_DWORD *)(v1 + 1840) = 3038;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[49],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6312),
      (const char (*)[49])"FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1840));
    if ( *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1856, "FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1856) = 3039;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[40],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6352),
      (const char (*)[40])"FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL",
      (data::FightPropType *)(v1 + 1856));
    if ( *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1872, "FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL");
    *(_DWORD *)(v1 + 1872) = 3040;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[45],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6392),
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1872));
    if ( *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1888, "FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1888) = 3041;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[45],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6432),
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL",
      (data::FightPropType *)(v1 + 1888));
    if ( *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1904, "FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL");
    *(_DWORD *)(v1 + 1904) = 3042;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[50],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6472),
      (const char (*)[50])"FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1904));
    if ( *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1920, "FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL_HURT");
    *(_DWORD *)(v1 + 1920) = 3043;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[49],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6512),
      (const char (*)[49])"FIGHT_PROP_ELEM_REACT_OVERGROW_ELECTRIC_CRITICAL",
      (data::FightPropType *)(v1 + 1920));
    if ( *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1936, "FIGHT_PROP_ELEM_REACT_OVERGROW_ELECTRIC_CRITICAL");
    *(_DWORD *)(v1 + 1936) = 3044;
    std::pair<std::string const,data::FightPropType>::pair<char const(&)[54],data::FightPropType,true>(
      (std::pair<const std::string,data::FightPropType> *const)(v1 + 6552),
      (const char (*)[54])"FIGHT_PROP_ELEM_REACT_OVERGROW_ELECTRIC_CRITICAL_HURT",
      (data::FightPropType *)(v1 + 1936));
    std::allocator<std::pair<std::string const,data::FightPropType>>::allocator((std::allocator<std::pair<const std::string,data::FightPropType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::FightPropType>::unordered_map(
      &data::getFightPropTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::FightPropType> >)__PAIR128__(116LL, v1 + 1952),
      0LL,
      (const std::unordered_map<std::string,data::FightPropType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::FightPropType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::FightPropType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getFightPropTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::FightPropType>::~unordered_map,
      &data::getFightPropTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::FightPropType>>::~allocator((std::allocator<std::pair<const std::string,data::FightPropType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::FightPropType> *)(v1 + 6592);
          i != (std::pair<const std::string,data::FightPropType> *)(v1 + 1952);
          std::pair<std::string const,data::FightPropType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8350) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 856) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_7(v1, 6848LL, v6);
  }
  return &data::getFightPropTypeNameMap[abi:cxx11](void)::m;
};

// Line 1079: range 000000000FA2BAB6-000000000FA34280
const std::map<data::FightPropType,std::pair<std::string,std::string >> *__cdecl data::getFightPropTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::FightPropType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  _DWORD *v18; // rax
  _DWORD *v19; // rax
  _DWORD *v20; // rax
  _DWORD *v21; // rax
  _DWORD *v22; // rax
  _DWORD *v23; // rax
  _DWORD *v24; // rax
  _DWORD *v25; // rax
  _DWORD *v26; // rax
  _DWORD *v27; // rax
  _DWORD *v28; // rax
  _DWORD *v29; // rax
  _DWORD *v30; // rax
  _DWORD *v31; // rax
  _DWORD *v32; // rax
  _DWORD *v33; // rax
  _DWORD *v34; // rax
  _DWORD *v35; // rax
  _DWORD *v36; // rax
  _DWORD *v37; // rax
  _DWORD *v38; // rax
  _DWORD *v39; // rax
  _DWORD *v40; // rax
  _DWORD *v41; // rax
  _DWORD *v42; // rax
  _DWORD *v43; // rax
  _DWORD *v44; // rax
  _DWORD *v45; // rax
  _DWORD *v46; // rax
  _DWORD *v47; // rax
  _DWORD *v48; // rax
  _DWORD *v49; // rax
  _DWORD *v50; // rax
  _DWORD *v51; // rax
  _DWORD *v52; // rax
  _DWORD *v53; // rax
  _DWORD *v54; // rax
  _DWORD *v55; // rax
  _DWORD *v56; // rax
  _DWORD *v57; // rax
  _DWORD *v58; // rax
  _DWORD *v59; // rax
  _DWORD *v60; // rax
  _DWORD *v61; // rax
  _DWORD *v62; // rax
  _DWORD *v63; // rax
  _DWORD *v64; // rax
  _DWORD *v65; // rax
  _DWORD *v66; // rax
  _DWORD *v67; // rax
  _DWORD *v68; // rax
  _DWORD *v69; // rax
  _DWORD *v70; // rax
  _DWORD *v71; // rax
  _DWORD *v72; // rax
  _DWORD *v73; // rax
  _DWORD *v74; // rax
  _DWORD *v75; // rax
  _DWORD *v76; // rax
  _DWORD *v77; // rax
  _DWORD *v78; // rax
  _DWORD *v79; // rax
  _DWORD *v80; // rax
  _DWORD *v81; // rax
  _DWORD *v82; // rax
  _DWORD *v83; // rax
  _DWORD *v84; // rax
  _DWORD *v85; // rax
  _DWORD *v86; // rax
  _DWORD *v87; // rax
  _DWORD *v88; // rax
  _DWORD *v89; // rax
  _DWORD *v90; // rax
  _DWORD *v91; // rax
  _DWORD *v92; // rax
  _DWORD *v93; // rax
  _DWORD *v94; // rax
  _DWORD *v95; // rax
  _DWORD *v96; // rax
  _DWORD *v97; // rax
  _DWORD *v98; // rax
  _DWORD *v99; // rax
  _DWORD *v100; // rax
  _DWORD *v101; // rax
  _DWORD *v102; // rax
  _DWORD *v103; // rax
  _DWORD *v104; // rax
  _DWORD *v105; // rax
  _DWORD *v106; // rax
  _DWORD *v107; // rax
  _DWORD *v108; // rax
  _DWORD *v109; // rax
  _DWORD *v110; // rax
  _DWORD *v111; // rax
  _DWORD *v112; // rax
  _DWORD *v113; // rax
  _DWORD *v114; // rax
  _DWORD *v115; // rax
  _DWORD *v116; // rax
  _DWORD *v117; // rax
  _DWORD *v118; // rax
  _DWORD *v119; // rax
  char v121[21712]; // [rsp+10h] [rbp-54D0h] BYREF

  v1 = (unsigned __int64)v121;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_9(21664LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = a2353219Unknown;
  *(_QWORD *)(v1 + 16) = data::getFightPropTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = -234556924;
  v3[536862754] = -234556924;
  v3[536862755] = -234556924;
  v3[536862756] = -234556924;
  v3[536862757] = -234556924;
  v3[536862758] = -234556924;
  v3[536862759] = -234556924;
  v3[536862760] = -234556924;
  v3[536862761] = -234556924;
  v3[536862762] = -234556924;
  v3[536862763] = -234556924;
  v3[536862764] = -234556924;
  v3[536862765] = -234556924;
  v3[536862766] = -234556924;
  v3[536862767] = -234556924;
  v3[536862768] = -234556924;
  v3[536862769] = -234556924;
  v3[536862770] = -234556924;
  v3[536862771] = -234556924;
  v3[536862772] = -234556924;
  v3[536862773] = -234556924;
  v3[536862774] = -234556924;
  v3[536862775] = -234556924;
  v3[536862776] = -234556924;
  v3[536862777] = -234556924;
  v3[536862778] = -234556924;
  v3[536862779] = -234556924;
  v3[536862782] = -218959118;
  v3[536862785] = -218959118;
  v3[536862788] = -218959118;
  v3[536862791] = -218959118;
  v3[536862794] = -218959118;
  v3[536862797] = -218959118;
  v3[536862800] = -218959118;
  v3[536862803] = -218959118;
  v3[536862806] = -218959118;
  v3[536862809] = -218959118;
  v3[536862812] = -218959118;
  v3[536862815] = -218959118;
  v3[536862818] = -218959118;
  v3[536862821] = -218959118;
  v3[536862824] = -218959118;
  v3[536862827] = -218959118;
  v3[536862830] = -218959118;
  v3[536862833] = -218959118;
  v3[536862836] = -218959118;
  v3[536862839] = -218959118;
  v3[536862842] = -218959118;
  v3[536862845] = -218959118;
  v3[536862848] = -218959118;
  v3[536862851] = -218959118;
  v3[536862854] = -218959118;
  v3[536862857] = -218959118;
  v3[536862860] = -218959118;
  v3[536862863] = -218959118;
  v3[536862866] = -218959118;
  v3[536862869] = -218959118;
  v3[536862872] = -218959118;
  v3[536862875] = -218959118;
  v3[536862878] = -218959118;
  v3[536862881] = -218959118;
  v3[536862884] = -218959118;
  v3[536862887] = -218959118;
  v3[536862890] = -218959118;
  v3[536862893] = -218959118;
  v3[536862896] = -218959118;
  v3[536862899] = -218959118;
  v3[536862902] = -218959118;
  v3[536862905] = -218959118;
  v3[536862908] = -218959118;
  v3[536862911] = -218959118;
  v3[536862914] = -218959118;
  v3[536862917] = -218959118;
  v3[536862920] = -218959118;
  v3[536862923] = -218959118;
  v3[536862926] = -218959118;
  v3[536862929] = -218959118;
  v3[536862932] = -218959118;
  v3[536862935] = -218959118;
  v3[536862938] = -218959118;
  v3[536862941] = -218959118;
  v3[536862944] = -218959118;
  v3[536862947] = -218959118;
  v3[536862950] = -218959118;
  v3[536862953] = -218959118;
  v3[536862956] = -218959118;
  v3[536862959] = -218959118;
  v3[536862962] = -218959118;
  v3[536862965] = -218959118;
  v3[536862968] = -218959118;
  v3[536862971] = -218959118;
  v3[536862974] = -218959118;
  v3[536862977] = -218959118;
  v3[536862980] = -218959118;
  v3[536862983] = -218959118;
  v3[536862986] = -218959118;
  v3[536862989] = -218959118;
  v3[536862992] = -218959118;
  v3[536862995] = -218959118;
  v3[536862998] = -218959118;
  v3[536863001] = -218959118;
  v3[536863004] = -218959118;
  v3[536863007] = -218959118;
  v3[536863010] = -218959118;
  v3[536863013] = -218959118;
  v3[536863016] = -218959118;
  v3[536863019] = -218959118;
  v3[536863022] = -218959118;
  v3[536863025] = -218959118;
  v3[536863028] = -218959118;
  v3[536863031] = -218959118;
  v3[536863034] = -218959118;
  v3[536863037] = -218959118;
  v3[536863040] = -218959118;
  v3[536863043] = -218959118;
  v3[536863046] = -218959118;
  v3[536863049] = -218959118;
  v3[536863052] = -218959118;
  v3[536863055] = -218959118;
  v3[536863058] = -218959118;
  v3[536863061] = -218959118;
  v3[536863064] = -218959118;
  v3[536863067] = -218959118;
  v3[536863070] = -218959118;
  v3[536863073] = -218959118;
  v3[536863076] = -218959118;
  v3[536863079] = -218959118;
  v3[536863082] = -218959118;
  v3[536863085] = -218959118;
  v3[536863088] = -218959118;
  v3[536863091] = -218959118;
  v3[536863094] = -218959118;
  v3[536863097] = -218959118;
  v3[536863100] = -218959118;
  v3[536863103] = -218959118;
  v3[536863106] = -218959118;
  v3[536863109] = -218959118;
  v3[536863112] = -218959118;
  v3[536863115] = -218959118;
  v3[536863118] = -218959118;
  v3[536863121] = -218959118;
  v3[536863124] = -218959118;
  v3[536863127] = -218959118;
  v3[536863389] = -202116109;
  v3[536863390] = -202116109;
  v3[536863391] = -202116109;
  v3[536863392] = -202116109;
  v3[536863393] = -202116109;
  v3[536863394] = -202116109;
  v3[536863395] = -202116109;
  v3[536863396] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getFightPropTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getFightPropTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1920),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[16])"FIGHT_PROP_NONE");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13056),
      (data::FightPropType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 1920));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2016),
      (const char (*)[16])byte_1A625280,
      (const char (*)[19])"FIGHT_PROP_BASE_HP");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13128),
      (data::FightPropType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 2016));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2112),
      (const char (*)[10])byte_1A6252C0,
      (const char (*)[14])"FIGHT_PROP_HP");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13200),
      (data::FightPropType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 2112));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2208),
      (const char (*)[19])byte_1A625300,
      (const char (*)[22])"FIGHT_PROP_HP_PERCENT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13272),
      (data::FightPropType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 2208));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2304),
      (const char (*)[16])byte_1A625340,
      (const char (*)[23])"FIGHT_PROP_BASE_ATTACK");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13344),
      (data::FightPropType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 2304));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2400),
      (const char (*)[10])byte_1A625380,
      (const char (*)[18])"FIGHT_PROP_ATTACK");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13416),
      (data::FightPropType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 2400));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2496),
      (const char (*)[19])byte_1A6253C0,
      (const char (*)[26])"FIGHT_PROP_ATTACK_PERCENT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13488),
      (data::FightPropType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 2496));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2592),
      (const char (*)[16])byte_1A625400,
      (const char (*)[24])"FIGHT_PROP_BASE_DEFENSE");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13560),
      (data::FightPropType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 2592));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2688),
      (const char (*)[10])byte_1A625440,
      (const char (*)[19])"FIGHT_PROP_DEFENSE");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13632),
      (data::FightPropType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 2688));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2784),
      (const char (*)[19])byte_1A625480,
      (const char (*)[27])"FIGHT_PROP_DEFENSE_PERCENT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13704),
      (data::FightPropType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 2784));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2880),
      (const char (*)[13])byte_1A6254C0,
      (const char (*)[22])"FIGHT_PROP_BASE_SPEED");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13776),
      (data::FightPropType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 2880));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2976),
      (const char (*)[22])byte_1A625500,
      (const char (*)[25])"FIGHT_PROP_SPEED_PERCENT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13848),
      (data::FightPropType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 2976));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3072),
      (const char (*)[22])byte_1A625540,
      (const char (*)[25])"FIGHT_PROP_HP_MP_PERCENT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13920),
      (data::FightPropType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 3072));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 13;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3168),
      (const char (*)[22])byte_1A625580,
      (const char (*)[29])"FIGHT_PROP_ATTACK_MP_PERCENT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 13992),
      (data::FightPropType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 3168));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 20;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3264),
      (const char (*)[10])byte_1A6255C0,
      (const char (*)[20])"FIGHT_PROP_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14064),
      (data::FightPropType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 3264));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, v1 + 288);
    *(_DWORD *)(v1 + 304) = 21;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3360),
      (const char (*)[13])byte_1A625600,
      (const char (*)[25])"FIGHT_PROP_ANTI_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14136),
      (data::FightPropType *)(v1 + 304),
      (const std::pair<std::string,std::string > *)(v1 + 3360));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, v1 + 304);
    *(_DWORD *)(v1 + 320) = 22;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3456),
      (const char (*)[13])byte_1A625640,
      (const char (*)[25])"FIGHT_PROP_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14208),
      (data::FightPropType *)(v1 + 320),
      (const std::pair<std::string,std::string > *)(v1 + 3456));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, v1 + 320);
    *(_DWORD *)(v1 + 336) = 23;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3552),
      (const char (*)[13])byte_1A625680,
      (const char (*)[29])"FIGHT_PROP_CHARGE_EFFICIENCY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14280),
      (data::FightPropType *)(v1 + 336),
      (const std::pair<std::string,std::string > *)(v1 + 3552));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, v1 + 336);
    *(_DWORD *)(v1 + 352) = 24;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3648),
      (const char (*)[13])byte_1A6256C0,
      (const char (*)[20])"FIGHT_PROP_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14352),
      (data::FightPropType *)(v1 + 352),
      (const std::pair<std::string,std::string > *)(v1 + 3648));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, v1 + 352);
    *(_DWORD *)(v1 + 368) = 25;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3744),
      (const char (*)[13])byte_1A625700,
      (const char (*)[20])"FIGHT_PROP_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14424),
      (data::FightPropType *)(v1 + 368),
      (const std::pair<std::string,std::string > *)(v1 + 3744));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, v1 + 368);
    *(_DWORD *)(v1 + 384) = 26;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3840),
      (const char (*)[13])byte_1A625740,
      (const char (*)[20])"FIGHT_PROP_HEAL_ADD");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14496),
      (data::FightPropType *)(v1 + 384),
      (const std::pair<std::string,std::string > *)(v1 + 3840));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, v1 + 384);
    *(_DWORD *)(v1 + 400) = 27;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3936),
      (const char (*)[16])byte_1A625780,
      (const char (*)[22])"FIGHT_PROP_HEALED_ADD");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14568),
      (data::FightPropType *)(v1 + 400),
      (const std::pair<std::string,std::string > *)(v1 + 3936));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, v1 + 400);
    *(_DWORD *)(v1 + 416) = 28;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4032),
      (const char (*)[13])byte_1A6257C0,
      (const char (*)[27])"FIGHT_PROP_ELEMENT_MASTERY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14640),
      (data::FightPropType *)(v1 + 416),
      (const std::pair<std::string,std::string > *)(v1 + 4032));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, v1 + 416);
    *(_DWORD *)(v1 + 432) = 29;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4128),
      (const char (*)[13])byte_1A625800,
      (const char (*)[29])"FIGHT_PROP_PHYSICAL_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14712),
      (data::FightPropType *)(v1 + 432),
      (const std::pair<std::string,std::string > *)(v1 + 4128));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, v1 + 432);
    *(_DWORD *)(v1 + 448) = 30;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4224),
      (const char (*)[19])byte_1A625840,
      (const char (*)[29])"FIGHT_PROP_PHYSICAL_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14784),
      (data::FightPropType *)(v1 + 448),
      (const std::pair<std::string,std::string > *)(v1 + 4224));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, v1 + 448);
    *(_DWORD *)(v1 + 464) = 31;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4320),
      (const char (*)[22])byte_1A625880,
      (const char (*)[32])"FIGHT_PROP_DEFENCE_IGNORE_RATIO");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14856),
      (data::FightPropType *)(v1 + 464),
      (const std::pair<std::string,std::string > *)(v1 + 4320));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, v1 + 464);
    *(_DWORD *)(v1 + 480) = 32;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4416),
      (const char (*)[22])byte_1A6258C0,
      (const char (*)[32])"FIGHT_PROP_DEFENCE_IGNORE_DELTA");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 14928),
      (data::FightPropType *)(v1 + 480),
      (const std::pair<std::string,std::string > *)(v1 + 4416));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, v1 + 480);
    *(_DWORD *)(v1 + 496) = 40;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4512),
      (const char (*)[22])byte_1A625900,
      (const char (*)[25])"FIGHT_PROP_FIRE_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15000),
      (data::FightPropType *)(v1 + 496),
      (const std::pair<std::string,std::string > *)(v1 + 4512));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, v1 + 496);
    *(_DWORD *)(v1 + 512) = 41;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4608),
      (const char (*)[22])byte_1A625940,
      (const char (*)[25])"FIGHT_PROP_ELEC_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15072),
      (data::FightPropType *)(v1 + 512),
      (const std::pair<std::string,std::string > *)(v1 + 4608));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, v1 + 512);
    *(_DWORD *)(v1 + 528) = 42;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4704),
      (const char (*)[22])byte_1A625980,
      (const char (*)[26])"FIGHT_PROP_WATER_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15144),
      (data::FightPropType *)(v1 + 528),
      (const std::pair<std::string,std::string > *)(v1 + 4704));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, v1 + 528);
    *(_DWORD *)(v1 + 544) = 43;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4800),
      (const char (*)[22])byte_1A6259C0,
      (const char (*)[26])"FIGHT_PROP_GRASS_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15216),
      (data::FightPropType *)(v1 + 544),
      (const std::pair<std::string,std::string > *)(v1 + 4800));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, v1 + 544);
    *(_DWORD *)(v1 + 560) = 44;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4896),
      (const char (*)[22])byte_1A625A00,
      (const char (*)[25])"FIGHT_PROP_WIND_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15288),
      (data::FightPropType *)(v1 + 560),
      (const std::pair<std::string,std::string > *)(v1 + 4896));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, v1 + 560);
    *(_DWORD *)(v1 + 576) = 45;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4992),
      (const char (*)[22])byte_1A625A40,
      (const char (*)[25])"FIGHT_PROP_ROCK_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15360),
      (data::FightPropType *)(v1 + 576),
      (const std::pair<std::string,std::string > *)(v1 + 4992));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, v1 + 576);
    *(_DWORD *)(v1 + 592) = 46;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5088),
      (const char (*)[22])byte_1A625A80,
      (const char (*)[24])"FIGHT_PROP_ICE_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15432),
      (data::FightPropType *)(v1 + 592),
      (const std::pair<std::string,std::string > *)(v1 + 5088));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, v1 + 592);
    *(_DWORD *)(v1 + 608) = 47;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5184),
      (const char (*)[19])byte_1A625AC0,
      (const char (*)[29])"FIGHT_PROP_HIT_HEAD_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15504),
      (data::FightPropType *)(v1 + 608),
      (const std::pair<std::string,std::string > *)(v1 + 5184));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, v1 + 608);
    *(_DWORD *)(v1 + 624) = 50;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5280),
      (const char (*)[16])byte_1A625B00,
      (const char (*)[25])"FIGHT_PROP_FIRE_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15576),
      (data::FightPropType *)(v1 + 624),
      (const std::pair<std::string,std::string > *)(v1 + 5280));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, v1 + 624);
    *(_DWORD *)(v1 + 640) = 51;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5376),
      (const char (*)[16])byte_1A625B40,
      (const char (*)[25])"FIGHT_PROP_ELEC_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15648),
      (data::FightPropType *)(v1 + 640),
      (const std::pair<std::string,std::string > *)(v1 + 5376));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, v1 + 640);
    *(_DWORD *)(v1 + 656) = 52;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5472),
      (const char (*)[16])byte_1A625B80,
      (const char (*)[26])"FIGHT_PROP_WATER_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15720),
      (data::FightPropType *)(v1 + 656),
      (const std::pair<std::string,std::string > *)(v1 + 5472));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, v1 + 656);
    *(_DWORD *)(v1 + 672) = 53;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5568),
      (const char (*)[16])byte_1A625BC0,
      (const char (*)[26])"FIGHT_PROP_GRASS_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15792),
      (data::FightPropType *)(v1 + 672),
      (const std::pair<std::string,std::string > *)(v1 + 5568));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, v1 + 672);
    *(_DWORD *)(v1 + 688) = 54;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5664),
      (const char (*)[16])byte_1A625C00,
      (const char (*)[25])"FIGHT_PROP_WIND_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15864),
      (data::FightPropType *)(v1 + 688),
      (const std::pair<std::string,std::string > *)(v1 + 5664));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, v1 + 688);
    *(_DWORD *)(v1 + 704) = 55;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5760),
      (const char (*)[16])byte_1A625C40,
      (const char (*)[25])"FIGHT_PROP_ROCK_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 15936),
      (data::FightPropType *)(v1 + 704),
      (const std::pair<std::string,std::string > *)(v1 + 5760));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, v1 + 704);
    *(_DWORD *)(v1 + 720) = 56;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5856),
      (const char (*)[16])byte_1A625C80,
      (const char (*)[24])"FIGHT_PROP_ICE_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16008),
      (data::FightPropType *)(v1 + 720),
      (const std::pair<std::string,std::string > *)(v1 + 5856));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, v1 + 720);
    *(_DWORD *)(v1 + 736) = 60;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5952),
      (const char (*)[13])byte_1A625CC0,
      (const char (*)[22])"FIGHT_PROP_EFFECT_HIT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16080),
      (data::FightPropType *)(v1 + 736),
      (const std::pair<std::string,std::string > *)(v1 + 5952));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, v1 + 736);
    *(_DWORD *)(v1 + 752) = 61;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6048),
      (const char (*)[13])byte_1A625D00,
      (const char (*)[25])"FIGHT_PROP_EFFECT_RESIST");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16152),
      (data::FightPropType *)(v1 + 752),
      (const std::pair<std::string,std::string > *)(v1 + 6048));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, v1 + 752);
    *(_DWORD *)(v1 + 768) = 62;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6144),
      (const char (*)[13])byte_1A625D40,
      (const char (*)[25])"FIGHT_PROP_FREEZE_RESIST");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16224),
      (data::FightPropType *)(v1 + 768),
      (const std::pair<std::string,std::string > *)(v1 + 6144));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, v1 + 768);
    *(_DWORD *)(v1 + 784) = 64;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6240),
      (const char (*)[13])byte_1A625D80,
      (const char (*)[24])"FIGHT_PROP_DIZZY_RESIST");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16296),
      (data::FightPropType *)(v1 + 784),
      (const std::pair<std::string,std::string > *)(v1 + 6240));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, v1 + 784);
    *(_DWORD *)(v1 + 800) = 65;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6336),
      (const char (*)[19])byte_1A625DC0,
      (const char (*)[26])"FIGHT_PROP_FREEZE_SHORTEN");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16368),
      (data::FightPropType *)(v1 + 800),
      (const std::pair<std::string,std::string > *)(v1 + 6336));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, v1 + 800);
    *(_DWORD *)(v1 + 816) = 67;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6432),
      (const char (*)[19])byte_1A625E00,
      (const char (*)[25])"FIGHT_PROP_DIZZY_SHORTEN");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16440),
      (data::FightPropType *)(v1 + 816),
      (const std::pair<std::string,std::string > *)(v1 + 6432));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, v1 + 816);
    *(_DWORD *)(v1 + 832) = 70;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6528),
      (const char (*)[16])byte_1A625E40,
      (const char (*)[27])"FIGHT_PROP_MAX_FIRE_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16512),
      (data::FightPropType *)(v1 + 832),
      (const std::pair<std::string,std::string > *)(v1 + 6528));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, v1 + 832);
    *(_DWORD *)(v1 + 848) = 71;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6624),
      (const char (*)[16])byte_1A625E80,
      (const char (*)[27])"FIGHT_PROP_MAX_ELEC_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16584),
      (data::FightPropType *)(v1 + 848),
      (const std::pair<std::string,std::string > *)(v1 + 6624));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, v1 + 848);
    *(_DWORD *)(v1 + 864) = 72;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6720),
      (const char (*)[16])byte_1A625EC0,
      (const char (*)[28])"FIGHT_PROP_MAX_WATER_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16656),
      (data::FightPropType *)(v1 + 864),
      (const std::pair<std::string,std::string > *)(v1 + 6720));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, v1 + 864);
    *(_DWORD *)(v1 + 880) = 73;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6816),
      (const char (*)[16])byte_1A625F00,
      (const char (*)[28])"FIGHT_PROP_MAX_GRASS_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16728),
      (data::FightPropType *)(v1 + 880),
      (const std::pair<std::string,std::string > *)(v1 + 6816));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, v1 + 880);
    *(_DWORD *)(v1 + 896) = 74;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6912),
      (const char (*)[16])byte_1A625F40,
      (const char (*)[27])"FIGHT_PROP_MAX_WIND_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16800),
      (data::FightPropType *)(v1 + 896),
      (const std::pair<std::string,std::string > *)(v1 + 6912));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, v1 + 896);
    *(_DWORD *)(v1 + 912) = 75;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7008),
      (const char (*)[16])byte_1A625F80,
      (const char (*)[26])"FIGHT_PROP_MAX_ICE_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16872),
      (data::FightPropType *)(v1 + 912),
      (const std::pair<std::string,std::string > *)(v1 + 7008));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, v1 + 912);
    *(_DWORD *)(v1 + 928) = 76;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7104),
      (const char (*)[16])byte_1A625FC0,
      (const char (*)[27])"FIGHT_PROP_MAX_ROCK_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 16944),
      (data::FightPropType *)(v1 + 928),
      (const std::pair<std::string,std::string > *)(v1 + 7104));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, v1 + 928);
    *(_DWORD *)(v1 + 944) = 80;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7200),
      (const char (*)[13])byte_1A626000,
      (const char (*)[32])"FIGHT_PROP_SKILL_CD_MINUS_RATIO");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17016),
      (data::FightPropType *)(v1 + 944),
      (const std::pair<std::string,std::string > *)(v1 + 7200));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, v1 + 944);
    *(_DWORD *)(v1 + 960) = 81;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7296),
      (const char (*)[13])byte_1A626040,
      (const char (*)[35])"FIGHT_PROP_SHIELD_COST_MINUS_RATIO");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17088),
      (data::FightPropType *)(v1 + 960),
      (const std::pair<std::string,std::string > *)(v1 + 7296));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, v1 + 960);
    *(_DWORD *)(v1 + 976) = 1000;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7392),
      (const char (*)[16])byte_1A626080,
      (const char (*)[27])"FIGHT_PROP_CUR_FIRE_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17160),
      (data::FightPropType *)(v1 + 976),
      (const std::pair<std::string,std::string > *)(v1 + 7392));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, v1 + 976);
    *(_DWORD *)(v1 + 992) = 1001;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7488),
      (const char (*)[16])byte_1A6260C0,
      (const char (*)[27])"FIGHT_PROP_CUR_ELEC_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17232),
      (data::FightPropType *)(v1 + 992),
      (const std::pair<std::string,std::string > *)(v1 + 7488));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, v1 + 992);
    *(_DWORD *)(v1 + 1008) = 1002;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7584),
      (const char (*)[16])byte_1A626100,
      (const char (*)[28])"FIGHT_PROP_CUR_WATER_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17304),
      (data::FightPropType *)(v1 + 1008),
      (const std::pair<std::string,std::string > *)(v1 + 7584));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, v1 + 1008);
    *(_DWORD *)(v1 + 1024) = 1003;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7680),
      (const char (*)[16])byte_1A626140,
      (const char (*)[28])"FIGHT_PROP_CUR_GRASS_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17376),
      (data::FightPropType *)(v1 + 1024),
      (const std::pair<std::string,std::string > *)(v1 + 7680));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, v1 + 1024);
    *(_DWORD *)(v1 + 1040) = 1004;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7776),
      (const char (*)[16])byte_1A626180,
      (const char (*)[27])"FIGHT_PROP_CUR_WIND_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17448),
      (data::FightPropType *)(v1 + 1040),
      (const std::pair<std::string,std::string > *)(v1 + 7776));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, v1 + 1040);
    *(_DWORD *)(v1 + 1056) = 1005;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7872),
      (const char (*)[16])byte_1A6261C0,
      (const char (*)[26])"FIGHT_PROP_CUR_ICE_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17520),
      (data::FightPropType *)(v1 + 1056),
      (const std::pair<std::string,std::string > *)(v1 + 7872));
    if ( *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1072, v1 + 1056);
    *(_DWORD *)(v1 + 1072) = 1006;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7968),
      (const char (*)[16])byte_1A626200,
      (const char (*)[27])"FIGHT_PROP_CUR_ROCK_ENERGY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17592),
      (data::FightPropType *)(v1 + 1072),
      (const std::pair<std::string,std::string > *)(v1 + 7968));
    if ( *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1088, v1 + 1072);
    *(_DWORD *)(v1 + 1088) = 1010;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8064),
      (const char (*)[13])byte_1A626240,
      (const char (*)[18])"FIGHT_PROP_CUR_HP");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17664),
      (data::FightPropType *)(v1 + 1088),
      (const std::pair<std::string,std::string > *)(v1 + 8064));
    if ( *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1104, v1 + 1088);
    *(_DWORD *)(v1 + 1104) = 2000;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8160),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[18])"FIGHT_PROP_MAX_HP");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17736),
      (data::FightPropType *)(v1 + 1104),
      (const std::pair<std::string,std::string > *)(v1 + 8160));
    if ( *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1120, v1 + 1104);
    *(_DWORD *)(v1 + 1120) = 2001;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8256),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[22])"FIGHT_PROP_CUR_ATTACK");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17808),
      (data::FightPropType *)(v1 + 1120),
      (const std::pair<std::string,std::string > *)(v1 + 8256));
    if ( *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1136, v1 + 1120);
    *(_DWORD *)(v1 + 1136) = 2002;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8352),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[23])"FIGHT_PROP_CUR_DEFENSE");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17880),
      (data::FightPropType *)(v1 + 1136),
      (const std::pair<std::string,std::string > *)(v1 + 8352));
    if ( *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1152, v1 + 1136);
    *(_DWORD *)(v1 + 1152) = 2003;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8448),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[21])"FIGHT_PROP_CUR_SPEED");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 17952),
      (data::FightPropType *)(v1 + 1152),
      (const std::pair<std::string,std::string > *)(v1 + 8448));
    if ( *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1168, v1 + 1152);
    *(_DWORD *)(v1 + 1168) = 3000;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8544),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[27])"FIGHT_PROP_NONEXTRA_ATTACK");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18024),
      (data::FightPropType *)(v1 + 1168),
      (const std::pair<std::string,std::string > *)(v1 + 8544));
    if ( *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1184, v1 + 1168);
    *(_DWORD *)(v1 + 1184) = 3001;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8640),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[28])"FIGHT_PROP_NONEXTRA_DEFENSE");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18096),
      (data::FightPropType *)(v1 + 1184),
      (const std::pair<std::string,std::string > *)(v1 + 8640));
    if ( *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1200, v1 + 1184);
    *(_DWORD *)(v1 + 1200) = 3002;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8736),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[29])"FIGHT_PROP_NONEXTRA_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18168),
      (data::FightPropType *)(v1 + 1200),
      (const std::pair<std::string,std::string > *)(v1 + 8736));
    if ( *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1216, v1 + 1200);
    *(_DWORD *)(v1 + 1216) = 3003;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8832),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ANTI_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18240),
      (data::FightPropType *)(v1 + 1216),
      (const std::pair<std::string,std::string > *)(v1 + 8832));
    if ( *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1232, v1 + 1216);
    *(_DWORD *)(v1 + 1232) = 3004;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8928),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18312),
      (data::FightPropType *)(v1 + 1232),
      (const std::pair<std::string,std::string > *)(v1 + 8928));
    if ( *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1248, v1 + 1232);
    *(_DWORD *)(v1 + 1248) = 3005;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9024),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[38])"FIGHT_PROP_NONEXTRA_CHARGE_EFFICIENCY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18384),
      (data::FightPropType *)(v1 + 1248),
      (const std::pair<std::string,std::string > *)(v1 + 9024));
    if ( *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1264, v1 + 1248);
    *(_DWORD *)(v1 + 1264) = 3006;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9120),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[36])"FIGHT_PROP_NONEXTRA_ELEMENT_MASTERY");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18456),
      (data::FightPropType *)(v1 + 1264),
      (const std::pair<std::string,std::string > *)(v1 + 9120));
    if ( *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1280, v1 + 1264);
    *(_DWORD *)(v1 + 1280) = 3007;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9216),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[38])"FIGHT_PROP_NONEXTRA_PHYSICAL_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18528),
      (data::FightPropType *)(v1 + 1280),
      (const std::pair<std::string,std::string > *)(v1 + 9216));
    if ( *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1296, v1 + 1280);
    *(_DWORD *)(v1 + 1296) = 3008;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9312),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_FIRE_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18600),
      (data::FightPropType *)(v1 + 1296),
      (const std::pair<std::string,std::string > *)(v1 + 9312));
    if ( *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1312, v1 + 1296);
    *(_DWORD *)(v1 + 1312) = 3009;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9408),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ELEC_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18672),
      (data::FightPropType *)(v1 + 1312),
      (const std::pair<std::string,std::string > *)(v1 + 9408));
    if ( *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1328, v1 + 1312);
    *(_DWORD *)(v1 + 1328) = 3010;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9504),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_WATER_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18744),
      (data::FightPropType *)(v1 + 1328),
      (const std::pair<std::string,std::string > *)(v1 + 9504));
    if ( *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1344, v1 + 1328);
    *(_DWORD *)(v1 + 1344) = 3011;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9600),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_GRASS_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18816),
      (data::FightPropType *)(v1 + 1344),
      (const std::pair<std::string,std::string > *)(v1 + 9600));
    if ( *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1360, v1 + 1344);
    *(_DWORD *)(v1 + 1360) = 3012;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9696),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_WIND_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18888),
      (data::FightPropType *)(v1 + 1360),
      (const std::pair<std::string,std::string > *)(v1 + 9696));
    if ( *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1376, v1 + 1360);
    *(_DWORD *)(v1 + 1376) = 3013;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9792),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ROCK_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 18960),
      (data::FightPropType *)(v1 + 1376),
      (const std::pair<std::string,std::string > *)(v1 + 9792));
    if ( *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1392, v1 + 1376);
    *(_DWORD *)(v1 + 1392) = 3014;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9888),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[33])"FIGHT_PROP_NONEXTRA_ICE_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19032),
      (data::FightPropType *)(v1 + 1392),
      (const std::pair<std::string,std::string > *)(v1 + 9888));
    if ( *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1408, v1 + 1392);
    *(_DWORD *)(v1 + 1408) = 3015;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9984),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_FIRE_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19104),
      (data::FightPropType *)(v1 + 1408),
      (const std::pair<std::string,std::string > *)(v1 + 9984));
    if ( *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1424, v1 + 1408);
    *(_DWORD *)(v1 + 1424) = 3016;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10080),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ELEC_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19176),
      (data::FightPropType *)(v1 + 1424),
      (const std::pair<std::string,std::string > *)(v1 + 10080));
    if ( *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1440, v1 + 1424);
    *(_DWORD *)(v1 + 1440) = 3017;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10176),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_WATER_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19248),
      (data::FightPropType *)(v1 + 1440),
      (const std::pair<std::string,std::string > *)(v1 + 10176));
    if ( *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1456, v1 + 1440);
    *(_DWORD *)(v1 + 1456) = 3018;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10272),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[35])"FIGHT_PROP_NONEXTRA_GRASS_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19320),
      (data::FightPropType *)(v1 + 1456),
      (const std::pair<std::string,std::string > *)(v1 + 10272));
    if ( *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1472, v1 + 1456);
    *(_DWORD *)(v1 + 1472) = 3019;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10368),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_WIND_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19392),
      (data::FightPropType *)(v1 + 1472),
      (const std::pair<std::string,std::string > *)(v1 + 10368));
    if ( *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1488, v1 + 1472);
    *(_DWORD *)(v1 + 1488) = 3020;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10464),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"FIGHT_PROP_NONEXTRA_ROCK_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19464),
      (data::FightPropType *)(v1 + 1488),
      (const std::pair<std::string,std::string > *)(v1 + 10464));
    if ( *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1504, v1 + 1488);
    *(_DWORD *)(v1 + 1504) = 3021;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10560),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[33])"FIGHT_PROP_NONEXTRA_ICE_SUB_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19536),
      (data::FightPropType *)(v1 + 1504),
      (const std::pair<std::string,std::string > *)(v1 + 10560));
    if ( *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1520, v1 + 1504);
    *(_DWORD *)(v1 + 1520) = 3022;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10656),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[41])"FIGHT_PROP_NONEXTRA_SKILL_CD_MINUS_RATIO");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19608),
      (data::FightPropType *)(v1 + 1520),
      (const std::pair<std::string,std::string > *)(v1 + 10656));
    if ( *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1536, v1 + 1520);
    *(_DWORD *)(v1 + 1536) = 3023;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[44],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10752),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[44])"FIGHT_PROP_NONEXTRA_SHIELD_COST_MINUS_RATIO");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19680),
      (data::FightPropType *)(v1 + 1536),
      (const std::pair<std::string,std::string > *)(v1 + 10752));
    if ( *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1552, v1 + 1536);
    *(_DWORD *)(v1 + 1552) = 3024;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10848),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[38])"FIGHT_PROP_NONEXTRA_PHYSICAL_ADD_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19752),
      (data::FightPropType *)(v1 + 1552),
      (const std::pair<std::string,std::string > *)(v1 + 10848));
    if ( *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1568, v1 + 1552);
    *(_DWORD *)(v1 + 1568) = 3045;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10944),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[36])"FIGHT_PROP_BASE_ELEM_REACT_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19824),
      (data::FightPropType *)(v1 + 1568),
      (const std::pair<std::string,std::string > *)(v1 + 10944));
    if ( *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1584, v1 + 1568);
    *(_DWORD *)(v1 + 1584) = 3046;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11040),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[41])"FIGHT_PROP_BASE_ELEM_REACT_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19896),
      (data::FightPropType *)(v1 + 1584),
      (const std::pair<std::string,std::string > *)(v1 + 11040));
    if ( *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1600, v1 + 1584);
    *(_DWORD *)(v1 + 1600) = 3025;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11136),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[31])"FIGHT_PROP_ELEM_REACT_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 19968),
      (data::FightPropType *)(v1 + 1600),
      (const std::pair<std::string,std::string > *)(v1 + 11136));
    if ( *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1616, v1 + 1600);
    *(_DWORD *)(v1 + 1616) = 3026;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11232),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[36])"FIGHT_PROP_ELEM_REACT_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20040),
      (data::FightPropType *)(v1 + 1616),
      (const std::pair<std::string,std::string > *)(v1 + 11232));
    if ( *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1632, v1 + 1616);
    *(_DWORD *)(v1 + 1632) = 3027;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[39],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11328),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[39])"FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20112),
      (data::FightPropType *)(v1 + 1632),
      (const std::pair<std::string,std::string > *)(v1 + 11328));
    if ( *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1648, v1 + 1632);
    *(_DWORD *)(v1 + 1648) = 3028;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[44],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11424),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[44])"FIGHT_PROP_ELEM_REACT_EXPLODE_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20184),
      (data::FightPropType *)(v1 + 1648),
      (const std::pair<std::string,std::string > *)(v1 + 11424));
    if ( *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1664, v1 + 1648);
    *(_DWORD *)(v1 + 1664) = 3029;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11520),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[37])"FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20256),
      (data::FightPropType *)(v1 + 1664),
      (const std::pair<std::string,std::string > *)(v1 + 11520));
    if ( *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1680, v1 + 1664);
    *(_DWORD *)(v1 + 1680) = 3030;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[42],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11616),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[42])"FIGHT_PROP_ELEM_REACT_SWIRL_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20328),
      (data::FightPropType *)(v1 + 1680),
      (const std::pair<std::string,std::string > *)(v1 + 11616));
    if ( *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1696, v1 + 1680);
    *(_DWORD *)(v1 + 1696) = 3031;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11712),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[40])"FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20400),
      (data::FightPropType *)(v1 + 1696),
      (const std::pair<std::string,std::string > *)(v1 + 11712));
    if ( *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1712, v1 + 1696);
    *(_DWORD *)(v1 + 1712) = 3032;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[45],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11808),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_ELECTRIC_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20472),
      (data::FightPropType *)(v1 + 1712),
      (const std::pair<std::string,std::string > *)(v1 + 11808));
    if ( *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1728, v1 + 1712);
    *(_DWORD *)(v1 + 1728) = 3033;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11904),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[40])"FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20544),
      (data::FightPropType *)(v1 + 1728),
      (const std::pair<std::string,std::string > *)(v1 + 11904));
    if ( *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1744, v1 + 1728);
    *(_DWORD *)(v1 + 1744) = 3034;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[45],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12000),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_SCONDUCT_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20616),
      (data::FightPropType *)(v1 + 1744),
      (const std::pair<std::string,std::string > *)(v1 + 12000));
    if ( *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1760, v1 + 1744);
    *(_DWORD *)(v1 + 1760) = 3035;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12096),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[36])"FIGHT_PROP_ELEM_REACT_BURN_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20688),
      (data::FightPropType *)(v1 + 1760),
      (const std::pair<std::string,std::string > *)(v1 + 12096));
    if ( *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1776, v1 + 1760);
    *(_DWORD *)(v1 + 1776) = 3036;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12192),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[41])"FIGHT_PROP_ELEM_REACT_BURN_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20760),
      (data::FightPropType *)(v1 + 1776),
      (const std::pair<std::string,std::string > *)(v1 + 12192));
    if ( *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1792, v1 + 1776);
    *(_DWORD *)(v1 + 1792) = 3037;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[44],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12288),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[44])"FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20832),
      (data::FightPropType *)(v1 + 1792),
      (const std::pair<std::string,std::string > *)(v1 + 12288));
    if ( *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1808, v1 + 1792);
    *(_DWORD *)(v1 + 1808) = 3038;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[49],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12384),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[49])"FIGHT_PROP_ELEM_REACT_FROZENBROKEN_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20904),
      (data::FightPropType *)(v1 + 1808),
      (const std::pair<std::string,std::string > *)(v1 + 12384));
    if ( *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1824, v1 + 1808);
    *(_DWORD *)(v1 + 1824) = 3039;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12480),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[40])"FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 20976),
      (data::FightPropType *)(v1 + 1824),
      (const std::pair<std::string,std::string > *)(v1 + 12480));
    if ( *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1840, v1 + 1824);
    *(_DWORD *)(v1 + 1840) = 3040;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[45],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12576),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_OVERGROW_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 21048),
      (data::FightPropType *)(v1 + 1840),
      (const std::pair<std::string,std::string > *)(v1 + 12576));
    if ( *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1856, v1 + 1840);
    *(_DWORD *)(v1 + 1856) = 3041;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[45],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12672),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[45])"FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 21120),
      (data::FightPropType *)(v1 + 1856),
      (const std::pair<std::string,std::string > *)(v1 + 12672));
    if ( *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1872, v1 + 1856);
    *(_DWORD *)(v1 + 1872) = 3042;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[50],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12768),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[50])"FIGHT_PROP_ELEM_REACT_OVERGROW_FIRE_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 21192),
      (data::FightPropType *)(v1 + 1872),
      (const std::pair<std::string,std::string > *)(v1 + 12768));
    if ( *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1888, v1 + 1872);
    *(_DWORD *)(v1 + 1888) = 3043;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[49],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12864),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[49])"FIGHT_PROP_ELEM_REACT_OVERGROW_ELECTRIC_CRITICAL");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 21264),
      (data::FightPropType *)(v1 + 1888),
      (const std::pair<std::string,std::string > *)(v1 + 12864));
    if ( *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1904, v1 + 1888);
    *(_DWORD *)(v1 + 1904) = 3044;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[54],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12960),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[54])"FIGHT_PROP_ELEM_REACT_OVERGROW_ELECTRIC_CRITICAL_HURT");
    std::pair<data::FightPropType const,std::pair<std::string,std::string>>::pair<data::FightPropType,true>(
      (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *const)(v1 + 21336),
      (data::FightPropType *)(v1 + 1904),
      (const std::pair<std::string,std::string > *)(v1 + 12960));
    std::allocator<std::pair<data::FightPropType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::FightPropType,std::pair<std::string,std::string>>::map(
      &data::getFightPropTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::FightPropType,std::pair<std::string,std::string > > >)__PAIR128__(116LL, v1 + 13056),
      (const std::less<data::FightPropType> *)(v1 + 32),
      (const std::map<data::FightPropType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getFightPropTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::FightPropType,std::pair<std::string,std::string>>::~map,
      &data::getFightPropTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::FightPropType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::FightPropType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *)(v1 + 21408);
          i != (std::pair<const data::FightPropType,std::pair<std::string,std::string > > *)(v1 + 13056);
          std::pair<data::FightPropType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 13056, 8352LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12960));
    v5 = (_DWORD *)(((v1 + 12960) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12864));
    v6 = (_DWORD *)(((v1 + 12864) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12768));
    v7 = (_DWORD *)(((v1 + 12768) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12672));
    v8 = (_DWORD *)(((v1 + 12672) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12576));
    v9 = (_DWORD *)(((v1 + 12576) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12480));
    v10 = (_DWORD *)(((v1 + 12480) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12384));
    v11 = (_DWORD *)(((v1 + 12384) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12288));
    v12 = (_DWORD *)(((v1 + 12288) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12192));
    v13 = (_DWORD *)(((v1 + 12192) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12096));
    v14 = (_DWORD *)(((v1 + 12096) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12000));
    v15 = (_DWORD *)(((v1 + 12000) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11904));
    v16 = (_DWORD *)(((v1 + 11904) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11808));
    v17 = (_DWORD *)(((v1 + 11808) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11712));
    v18 = (_DWORD *)(((v1 + 11712) >> 3) + 2147450880);
    *v18 = -117901064;
    v18[1] = -117901064;
    *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11616));
    v19 = (_DWORD *)(((v1 + 11616) >> 3) + 2147450880);
    *v19 = -117901064;
    v19[1] = -117901064;
    *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11520));
    v20 = (_DWORD *)(((v1 + 11520) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11424));
    v21 = (_DWORD *)(((v1 + 11424) >> 3) + 2147450880);
    *v21 = -117901064;
    v21[1] = -117901064;
    *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11328));
    v22 = (_DWORD *)(((v1 + 11328) >> 3) + 2147450880);
    *v22 = -117901064;
    v22[1] = -117901064;
    *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11232));
    v23 = (_DWORD *)(((v1 + 11232) >> 3) + 2147450880);
    *v23 = -117901064;
    v23[1] = -117901064;
    *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11136));
    v24 = (_DWORD *)(((v1 + 11136) >> 3) + 2147450880);
    *v24 = -117901064;
    v24[1] = -117901064;
    *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11040));
    v25 = (_DWORD *)(((v1 + 11040) >> 3) + 2147450880);
    *v25 = -117901064;
    v25[1] = -117901064;
    *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10944));
    v26 = (_DWORD *)(((v1 + 10944) >> 3) + 2147450880);
    *v26 = -117901064;
    v26[1] = -117901064;
    *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10848));
    v27 = (_DWORD *)(((v1 + 10848) >> 3) + 2147450880);
    *v27 = -117901064;
    v27[1] = -117901064;
    *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10752));
    v28 = (_DWORD *)(((v1 + 10752) >> 3) + 2147450880);
    *v28 = -117901064;
    v28[1] = -117901064;
    *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10656));
    v29 = (_DWORD *)(((v1 + 10656) >> 3) + 2147450880);
    *v29 = -117901064;
    v29[1] = -117901064;
    *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10560));
    v30 = (_DWORD *)(((v1 + 10560) >> 3) + 2147450880);
    *v30 = -117901064;
    v30[1] = -117901064;
    *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10464));
    v31 = (_DWORD *)(((v1 + 10464) >> 3) + 2147450880);
    *v31 = -117901064;
    v31[1] = -117901064;
    *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10368));
    v32 = (_DWORD *)(((v1 + 10368) >> 3) + 2147450880);
    *v32 = -117901064;
    v32[1] = -117901064;
    *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10272));
    v33 = (_DWORD *)(((v1 + 10272) >> 3) + 2147450880);
    *v33 = -117901064;
    v33[1] = -117901064;
    *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10176));
    v34 = (_DWORD *)(((v1 + 10176) >> 3) + 2147450880);
    *v34 = -117901064;
    v34[1] = -117901064;
    *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10080));
    v35 = (_DWORD *)(((v1 + 10080) >> 3) + 2147450880);
    *v35 = -117901064;
    v35[1] = -117901064;
    *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9984));
    v36 = (_DWORD *)(((v1 + 9984) >> 3) + 2147450880);
    *v36 = -117901064;
    v36[1] = -117901064;
    *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9888));
    v37 = (_DWORD *)(((v1 + 9888) >> 3) + 2147450880);
    *v37 = -117901064;
    v37[1] = -117901064;
    *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9792));
    v38 = (_DWORD *)(((v1 + 9792) >> 3) + 2147450880);
    *v38 = -117901064;
    v38[1] = -117901064;
    *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9696));
    v39 = (_DWORD *)(((v1 + 9696) >> 3) + 2147450880);
    *v39 = -117901064;
    v39[1] = -117901064;
    *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9600));
    v40 = (_DWORD *)(((v1 + 9600) >> 3) + 2147450880);
    *v40 = -117901064;
    v40[1] = -117901064;
    *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9504));
    v41 = (_DWORD *)(((v1 + 9504) >> 3) + 2147450880);
    *v41 = -117901064;
    v41[1] = -117901064;
    *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9408));
    v42 = (_DWORD *)(((v1 + 9408) >> 3) + 2147450880);
    *v42 = -117901064;
    v42[1] = -117901064;
    *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9312));
    v43 = (_DWORD *)(((v1 + 9312) >> 3) + 2147450880);
    *v43 = -117901064;
    v43[1] = -117901064;
    *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9216));
    v44 = (_DWORD *)(((v1 + 9216) >> 3) + 2147450880);
    *v44 = -117901064;
    v44[1] = -117901064;
    *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9120));
    v45 = (_DWORD *)(((v1 + 9120) >> 3) + 2147450880);
    *v45 = -117901064;
    v45[1] = -117901064;
    *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9024));
    v46 = (_DWORD *)(((v1 + 9024) >> 3) + 2147450880);
    *v46 = -117901064;
    v46[1] = -117901064;
    *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8928));
    v47 = (_DWORD *)(((v1 + 8928) >> 3) + 2147450880);
    *v47 = -117901064;
    v47[1] = -117901064;
    *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8832));
    v48 = (_DWORD *)(((v1 + 8832) >> 3) + 2147450880);
    *v48 = -117901064;
    v48[1] = -117901064;
    *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8736));
    v49 = (_DWORD *)(((v1 + 8736) >> 3) + 2147450880);
    *v49 = -117901064;
    v49[1] = -117901064;
    *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8640));
    v50 = (_DWORD *)(((v1 + 8640) >> 3) + 2147450880);
    *v50 = -117901064;
    v50[1] = -117901064;
    *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8544));
    v51 = (_DWORD *)(((v1 + 8544) >> 3) + 2147450880);
    *v51 = -117901064;
    v51[1] = -117901064;
    *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8448));
    v52 = (_DWORD *)(((v1 + 8448) >> 3) + 2147450880);
    *v52 = -117901064;
    v52[1] = -117901064;
    *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8352));
    v53 = (_DWORD *)(((v1 + 8352) >> 3) + 2147450880);
    *v53 = -117901064;
    v53[1] = -117901064;
    *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8256));
    v54 = (_DWORD *)(((v1 + 8256) >> 3) + 2147450880);
    *v54 = -117901064;
    v54[1] = -117901064;
    *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8160));
    v55 = (_DWORD *)(((v1 + 8160) >> 3) + 2147450880);
    *v55 = -117901064;
    v55[1] = -117901064;
    *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8064));
    v56 = (_DWORD *)(((v1 + 8064) >> 3) + 2147450880);
    *v56 = -117901064;
    v56[1] = -117901064;
    *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7968));
    v57 = (_DWORD *)(((v1 + 7968) >> 3) + 2147450880);
    *v57 = -117901064;
    v57[1] = -117901064;
    *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7872));
    v58 = (_DWORD *)(((v1 + 7872) >> 3) + 2147450880);
    *v58 = -117901064;
    v58[1] = -117901064;
    *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7776));
    v59 = (_DWORD *)(((v1 + 7776) >> 3) + 2147450880);
    *v59 = -117901064;
    v59[1] = -117901064;
    *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7680));
    v60 = (_DWORD *)(((v1 + 7680) >> 3) + 2147450880);
    *v60 = -117901064;
    v60[1] = -117901064;
    *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7584));
    v61 = (_DWORD *)(((v1 + 7584) >> 3) + 2147450880);
    *v61 = -117901064;
    v61[1] = -117901064;
    *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7488));
    v62 = (_DWORD *)(((v1 + 7488) >> 3) + 2147450880);
    *v62 = -117901064;
    v62[1] = -117901064;
    *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7392));
    v63 = (_DWORD *)(((v1 + 7392) >> 3) + 2147450880);
    *v63 = -117901064;
    v63[1] = -117901064;
    *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7296));
    v64 = (_DWORD *)(((v1 + 7296) >> 3) + 2147450880);
    *v64 = -117901064;
    v64[1] = -117901064;
    *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7200));
    v65 = (_DWORD *)(((v1 + 7200) >> 3) + 2147450880);
    *v65 = -117901064;
    v65[1] = -117901064;
    *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7104));
    v66 = (_DWORD *)(((v1 + 7104) >> 3) + 2147450880);
    *v66 = -117901064;
    v66[1] = -117901064;
    *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7008));
    v67 = (_DWORD *)(((v1 + 7008) >> 3) + 2147450880);
    *v67 = -117901064;
    v67[1] = -117901064;
    *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6912));
    v68 = (_DWORD *)(((v1 + 6912) >> 3) + 2147450880);
    *v68 = -117901064;
    v68[1] = -117901064;
    *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6816));
    v69 = (_DWORD *)(((v1 + 6816) >> 3) + 2147450880);
    *v69 = -117901064;
    v69[1] = -117901064;
    *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6720));
    v70 = (_DWORD *)(((v1 + 6720) >> 3) + 2147450880);
    *v70 = -117901064;
    v70[1] = -117901064;
    *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6624));
    v71 = (_DWORD *)(((v1 + 6624) >> 3) + 2147450880);
    *v71 = -117901064;
    v71[1] = -117901064;
    *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6528));
    v72 = (_DWORD *)(((v1 + 6528) >> 3) + 2147450880);
    *v72 = -117901064;
    v72[1] = -117901064;
    *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6432));
    v73 = (_DWORD *)(((v1 + 6432) >> 3) + 2147450880);
    *v73 = -117901064;
    v73[1] = -117901064;
    *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6336));
    v74 = (_DWORD *)(((v1 + 6336) >> 3) + 2147450880);
    *v74 = -117901064;
    v74[1] = -117901064;
    *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6240));
    v75 = (_DWORD *)(((v1 + 6240) >> 3) + 2147450880);
    *v75 = -117901064;
    v75[1] = -117901064;
    *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6144));
    v76 = (_DWORD *)(((v1 + 6144) >> 3) + 2147450880);
    *v76 = -117901064;
    v76[1] = -117901064;
    *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6048));
    v77 = (_DWORD *)(((v1 + 6048) >> 3) + 2147450880);
    *v77 = -117901064;
    v77[1] = -117901064;
    *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5952));
    v78 = (_DWORD *)(((v1 + 5952) >> 3) + 2147450880);
    *v78 = -117901064;
    v78[1] = -117901064;
    *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5856));
    v79 = (_DWORD *)(((v1 + 5856) >> 3) + 2147450880);
    *v79 = -117901064;
    v79[1] = -117901064;
    *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5760));
    v80 = (_DWORD *)(((v1 + 5760) >> 3) + 2147450880);
    *v80 = -117901064;
    v80[1] = -117901064;
    *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5664));
    v81 = (_DWORD *)(((v1 + 5664) >> 3) + 2147450880);
    *v81 = -117901064;
    v81[1] = -117901064;
    *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5568));
    v82 = (_DWORD *)(((v1 + 5568) >> 3) + 2147450880);
    *v82 = -117901064;
    v82[1] = -117901064;
    *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5472));
    v83 = (_DWORD *)(((v1 + 5472) >> 3) + 2147450880);
    *v83 = -117901064;
    v83[1] = -117901064;
    *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5376));
    v84 = (_DWORD *)(((v1 + 5376) >> 3) + 2147450880);
    *v84 = -117901064;
    v84[1] = -117901064;
    *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5280));
    v85 = (_DWORD *)(((v1 + 5280) >> 3) + 2147450880);
    *v85 = -117901064;
    v85[1] = -117901064;
    *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5184));
    v86 = (_DWORD *)(((v1 + 5184) >> 3) + 2147450880);
    *v86 = -117901064;
    v86[1] = -117901064;
    *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5088));
    v87 = (_DWORD *)(((v1 + 5088) >> 3) + 2147450880);
    *v87 = -117901064;
    v87[1] = -117901064;
    *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4992));
    v88 = (_DWORD *)(((v1 + 4992) >> 3) + 2147450880);
    *v88 = -117901064;
    v88[1] = -117901064;
    *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4896));
    v89 = (_DWORD *)(((v1 + 4896) >> 3) + 2147450880);
    *v89 = -117901064;
    v89[1] = -117901064;
    *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4800));
    v90 = (_DWORD *)(((v1 + 4800) >> 3) + 2147450880);
    *v90 = -117901064;
    v90[1] = -117901064;
    *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4704));
    v91 = (_DWORD *)(((v1 + 4704) >> 3) + 2147450880);
    *v91 = -117901064;
    v91[1] = -117901064;
    *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4608));
    v92 = (_DWORD *)(((v1 + 4608) >> 3) + 2147450880);
    *v92 = -117901064;
    v92[1] = -117901064;
    *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4512));
    v93 = (_DWORD *)(((v1 + 4512) >> 3) + 2147450880);
    *v93 = -117901064;
    v93[1] = -117901064;
    *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4416));
    v94 = (_DWORD *)(((v1 + 4416) >> 3) + 2147450880);
    *v94 = -117901064;
    v94[1] = -117901064;
    *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4320));
    v95 = (_DWORD *)(((v1 + 4320) >> 3) + 2147450880);
    *v95 = -117901064;
    v95[1] = -117901064;
    *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4224));
    v96 = (_DWORD *)(((v1 + 4224) >> 3) + 2147450880);
    *v96 = -117901064;
    v96[1] = -117901064;
    *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4128));
    v97 = (_DWORD *)(((v1 + 4128) >> 3) + 2147450880);
    *v97 = -117901064;
    v97[1] = -117901064;
    *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4032));
    v98 = (_DWORD *)(((v1 + 4032) >> 3) + 2147450880);
    *v98 = -117901064;
    v98[1] = -117901064;
    *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3936));
    v99 = (_DWORD *)(((v1 + 3936) >> 3) + 2147450880);
    *v99 = -117901064;
    v99[1] = -117901064;
    *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3840));
    v100 = (_DWORD *)(((v1 + 3840) >> 3) + 2147450880);
    *v100 = -117901064;
    v100[1] = -117901064;
    *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3744));
    v101 = (_DWORD *)(((v1 + 3744) >> 3) + 2147450880);
    *v101 = -117901064;
    v101[1] = -117901064;
    *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3648));
    v102 = (_DWORD *)(((v1 + 3648) >> 3) + 2147450880);
    *v102 = -117901064;
    v102[1] = -117901064;
    *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3552));
    v103 = (_DWORD *)(((v1 + 3552) >> 3) + 2147450880);
    *v103 = -117901064;
    v103[1] = -117901064;
    *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3456));
    v104 = (_DWORD *)(((v1 + 3456) >> 3) + 2147450880);
    *v104 = -117901064;
    v104[1] = -117901064;
    *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3360));
    v105 = (_DWORD *)(((v1 + 3360) >> 3) + 2147450880);
    *v105 = -117901064;
    v105[1] = -117901064;
    *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3264));
    v106 = (_DWORD *)(((v1 + 3264) >> 3) + 2147450880);
    *v106 = -117901064;
    v106[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3168));
    v107 = (_DWORD *)(((v1 + 3168) >> 3) + 2147450880);
    *v107 = -117901064;
    v107[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3072));
    v108 = (_DWORD *)(((v1 + 3072) >> 3) + 2147450880);
    *v108 = -117901064;
    v108[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2976));
    v109 = (_DWORD *)(((v1 + 2976) >> 3) + 2147450880);
    *v109 = -117901064;
    v109[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2880));
    v110 = (_DWORD *)(((v1 + 2880) >> 3) + 2147450880);
    *v110 = -117901064;
    v110[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2784));
    v111 = (_DWORD *)(((v1 + 2784) >> 3) + 2147450880);
    *v111 = -117901064;
    v111[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2688));
    v112 = (_DWORD *)(((v1 + 2688) >> 3) + 2147450880);
    *v112 = -117901064;
    v112[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2592));
    v113 = (_DWORD *)(((v1 + 2592) >> 3) + 2147450880);
    *v113 = -117901064;
    v113[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2496));
    v114 = (_DWORD *)(((v1 + 2496) >> 3) + 2147450880);
    *v114 = -117901064;
    v114[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2400));
    v115 = (_DWORD *)(((v1 + 2400) >> 3) + 2147450880);
    *v115 = -117901064;
    v115[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2304));
    v116 = (_DWORD *)(((v1 + 2304) >> 3) + 2147450880);
    *v116 = -117901064;
    v116[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2208));
    v117 = (_DWORD *)(((v1 + 2208) >> 3) + 2147450880);
    *v117 = -117901064;
    v117[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2112));
    v118 = (_DWORD *)(((v1 + 2112) >> 3) + 2147450880);
    *v118 = -117901064;
    v118[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2016));
    v119 = (_DWORD *)(((v1 + 2016) >> 3) + 2147450880);
    *v119 = -117901064;
    v119[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1920));
  }
  if ( v121 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8A8C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 2708) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_9(v1, 21664LL, v121);
  }
  return &data::getFightPropTypeEnumMap[abi:cxx11](void)::m;
};

// Line 1203: range 000000000FA34281-000000000FA345F4
const char *__fastcall data::enumValToStr(data::PropType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::PropType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::PropType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:1202 64 8 9 iter:1205 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getPropTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::PropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::PropType,std::pair<std::string,std::string>>::find(
                                                                                                 map,
                                                                                                 (const std::map<data::PropType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::PropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::PropType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::PropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::PropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      1208);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_PropType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::PropType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::PropType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1215: range 000000000FA345F5-000000000FA34BAD
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::PropType>,false,true>::pointer v10; // rax
  data::PropType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::PropType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:1224 96 8 9 <unknown> 128 8 6 s:1214 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getPropTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::PropType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::PropType>::find(
                                                                                     m,
                                                                                     (const std::unordered_map<std::string,data::PropType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::PropType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::PropType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::PropType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::PropType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::PropType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        1227);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::PropType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::PropType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      1218);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1236: range 000000000FA34BAE-000000000FA35A91
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::PropType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::PropType>,false,true>::pointer v11; // rax
  data::PropType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[1136]; // [rsp+20h] [rbp-470h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1088LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "22 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 8 7 it:1258 320"
                        " 8 9 <unknown> 352 8 6 s:1235 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 440 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862751] = -218103808;
  v4[536862752] = -202116109;
  v4[536862753] = -202116109;
  *(_QWORD *)(v2 + 352) = s;
  if ( *(_QWORD *)(v2 + 352) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::PropType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::PropType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1001;
      std::pair<std::string const,data::PropType>::pair<char const(&)[7],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 576),
        (const char (*)[7])byte_1A62A2A0,
        (data::PropType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A62A2A0);
      *(_DWORD *)(v2 + 128) = 1002;
      std::pair<std::string const,data::PropType>::pair<char const(&)[13],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 616),
        (const char (*)[13])byte_1A62A2E0,
        (data::PropType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A62A2E0);
      *(_DWORD *)(v2 + 144) = 1003;
      std::pair<std::string const,data::PropType>::pair<char const(&)[10],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 656),
        (const char (*)[10])byte_1A62A320,
        (data::PropType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A62A320);
      *(_DWORD *)(v2 + 160) = 1004;
      std::pair<std::string const,data::PropType>::pair<char const(&)[22],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 696),
        (const char (*)[22])byte_1A62A360,
        (data::PropType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A62A360);
      *(_DWORD *)(v2 + 176) = 2001;
      std::pair<std::string const,data::PropType>::pair<char const(&)[16],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 736),
        (const char (*)[16])byte_1A62A3A0,
        (data::PropType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A62A3A0);
      *(_DWORD *)(v2 + 192) = 2002;
      std::pair<std::string const,data::PropType>::pair<char const(&)[16],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 776),
        (const char (*)[16])byte_1A62A3E0,
        (data::PropType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A62A3E0);
      *(_DWORD *)(v2 + 208) = 4001;
      std::pair<std::string const,data::PropType>::pair<char const(&)[7],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 816),
        (const char (*)[7])byte_1A62A420,
        (data::PropType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A62A420);
      *(_DWORD *)(v2 + 224) = 10002;
      std::pair<std::string const,data::PropType>::pair<char const(&)[16],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 856),
        (const char (*)[16])byte_1A62A460,
        (data::PropType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A62A460);
      *(_DWORD *)(v2 + 240) = 10003;
      std::pair<std::string const,data::PropType>::pair<char const(&)[16],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 896),
        (const char (*)[16])byte_1A62A4A0,
        (data::PropType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A62A4A0);
      *(_DWORD *)(v2 + 256) = 10004;
      std::pair<std::string const,data::PropType>::pair<char const(&)[25],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 936),
        (const char (*)[25])byte_1A62A4E0,
        (data::PropType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A62A4E0);
      *(_DWORD *)(v2 + 272) = 10005;
      std::pair<std::string const,data::PropType>::pair<char const(&)[28],data::PropType,true>(
        (std::pair<const std::string,data::PropType> *const)(v2 + 976),
        (const char (*)[28])byte_1A62A520,
        (data::PropType *)(v2 + 272));
      std::allocator<std::pair<std::string const,data::PropType>>::allocator((std::allocator<std::pair<const std::string,data::PropType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::PropType>::unordered_map(
        &data::enumStrToVal(char const*,data::PropType &)::m,
        (std::initializer_list<std::pair<const std::string,data::PropType> >)__PAIR128__(11LL, v2 + 576),
        0LL,
        (const std::unordered_map<std::string,data::PropType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::PropType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::PropType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::PropType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::PropType>::~unordered_map,
        &data::enumStrToVal(char const*,data::PropType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::PropType>>::~allocator((std::allocator<std::pair<const std::string,data::PropType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::PropType> *)(v2 + 1016);
            i != (std::pair<const std::string,data::PropType> *)(v2 + 576);
            std::pair<std::string const,data::PropType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 576, 440LL);
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v7 = *(const char **)(v2 + 352);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 448),
      v7,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 288, v7);
    *(std::unordered_map<std::string,data::PropType>::iterator *)(v2 + 288) = std::unordered_map<std::string,data::PropType>::find(
                                                                                &data::enumStrToVal(char const*,data::PropType &)::m,
                                                                                (const std::unordered_map<std::string,data::PropType>::key_type *)(v2 + 448));
    std::string::~string((void *)(v2 + 448));
    *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 320, v2 + 448);
    *(std::unordered_map<std::string,data::PropType>::iterator *)(v2 + 320) = std::unordered_map<std::string,data::PropType>::end(&data::enumStrToVal(char const*,data::PropType &)::m);
    v8 = (char *)(v2 + 320);
    v9 = std::__detail::operator==<std::pair<std::string const,data::PropType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::PropType>,true> *)(v2 + 288),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::PropType>,true> *)(v2 + 320));
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 512, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 512),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        1261);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 512),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 352));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::PropType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::PropType>,false,true> *const)(v2 + 288));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 384, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 384),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      1239);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 384),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8084) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1088LL, v17);
  }
  return v14;
};

// Line 1270: range 000000000FA35A92-000000000FA35AA8
const char *__cdecl data::getDescription(data::PropType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 1275: range 000000000FA35AA9-000000000FA35C5E
bool __cdecl data::isValidPropType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::PropType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::PropType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:1276 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidPropType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getPropTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::PropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::PropType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getPropTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::PropType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::PropType,std::pair<std::string,std::string>>::find(
                                                                                                 v6,
                                                                                                 (const std::map<data::PropType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::PropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::PropType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1281: range 000000000FA35C5F-000000000FA35DC0
bool __cdecl data::isValidPropTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::PropType> *v5; // rcx
  const std::unordered_map<std::string,data::PropType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidPropTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getPropTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::PropType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::PropType>::end(v5);
  v6 = data::getPropTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::PropType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::PropType>::find(
                                                                                   v6,
                                                                                   name);
  result = std::__detail::operator!=<std::pair<std::string const,data::PropType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::PropType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::PropType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1286: range 000000000FA35DC1-000000000FA378EC
const std::unordered_map<std::string,data::PropType> *__cdecl data::getPropTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::PropType> *i; // r14
  char v6[2960]; // [rsp+10h] [rbp-B90h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_6(2912LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "52 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 9"
                        " <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unkn"
                        "own> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> 5"
                        "60 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 9"
                        " <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unkn"
                        "own> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> 8"
                        "16 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 1920 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getPropTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862807] = -202116109;
  v3[536862808] = -202116109;
  v3[536862809] = -202116109;
  v3[536862810] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getPropTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getPropTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::PropType>::pair<char const(&)[10],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 864),
      (const char (*)[10])"PROP_NONE",
      (data::PropType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "PROP_NONE");
    *(_DWORD *)(v1 + 112) = 1001;
    std::pair<std::string const,data::PropType>::pair<char const(&)[9],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 904),
      (const char (*)[9])"PROP_EXP",
      (data::PropType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "PROP_EXP");
    *(_DWORD *)(v1 + 128) = 1002;
    std::pair<std::string const,data::PropType>::pair<char const(&)[17],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 944),
      (const char (*)[17])"PROP_BREAK_LEVEL",
      (data::PropType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "PROP_BREAK_LEVEL");
    *(_DWORD *)(v1 + 144) = 1003;
    std::pair<std::string const,data::PropType>::pair<char const(&)[19],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 984),
      (const char (*)[19])"PROP_SATIATION_VAL",
      (data::PropType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "PROP_SATIATION_VAL");
    *(_DWORD *)(v1 + 160) = 1004;
    std::pair<std::string const,data::PropType>::pair<char const(&)[28],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1024),
      (const char (*)[28])"PROP_SATIATION_PENALTY_TIME",
      (data::PropType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "PROP_SATIATION_PENALTY_TIME");
    *(_DWORD *)(v1 + 176) = 2001;
    std::pair<std::string const,data::PropType>::pair<char const(&)[20],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1064),
      (const char (*)[20])"PROP_GEAR_START_VAL",
      (data::PropType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "PROP_GEAR_START_VAL");
    *(_DWORD *)(v1 + 192) = 2002;
    std::pair<std::string const,data::PropType>::pair<char const(&)[19],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1104),
      (const char (*)[19])"PROP_GEAR_STOP_VAL",
      (data::PropType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "PROP_GEAR_STOP_VAL");
    *(_DWORD *)(v1 + 208) = 4001;
    std::pair<std::string const,data::PropType>::pair<char const(&)[11],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1144),
      (const char (*)[11])"PROP_LEVEL",
      (data::PropType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "PROP_LEVEL");
    *(_DWORD *)(v1 + 224) = 10001;
    std::pair<std::string const,data::PropType>::pair<char const(&)[29],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1184),
      (const char (*)[29])"PROP_LAST_CHANGE_AVATAR_TIME",
      (data::PropType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "PROP_LAST_CHANGE_AVATAR_TIME");
    *(_DWORD *)(v1 + 240) = 10002;
    std::pair<std::string const,data::PropType>::pair<char const(&)[23],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1224),
      (const char (*)[23])"PROP_MAX_SPRING_VOLUME",
      (data::PropType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "PROP_MAX_SPRING_VOLUME");
    *(_DWORD *)(v1 + 256) = 10003;
    std::pair<std::string const,data::PropType>::pair<char const(&)[23],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1264),
      (const char (*)[23])"PROP_CUR_SPRING_VOLUME",
      (data::PropType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "PROP_CUR_SPRING_VOLUME");
    *(_DWORD *)(v1 + 272) = 10004;
    std::pair<std::string const,data::PropType>::pair<char const(&)[24],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1304),
      (const char (*)[24])"PROP_IS_SPRING_AUTO_USE",
      (data::PropType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "PROP_IS_SPRING_AUTO_USE");
    *(_DWORD *)(v1 + 288) = 10005;
    std::pair<std::string const,data::PropType>::pair<char const(&)[29],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1344),
      (const char (*)[29])"PROP_SPRING_AUTO_USE_PERCENT",
      (data::PropType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "PROP_SPRING_AUTO_USE_PERCENT");
    *(_DWORD *)(v1 + 304) = 10006;
    std::pair<std::string const,data::PropType>::pair<char const(&)[16],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1384),
      (const char (*)[16])"PROP_IS_FLYABLE",
      (data::PropType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "PROP_IS_FLYABLE");
    *(_DWORD *)(v1 + 320) = 10007;
    std::pair<std::string const,data::PropType>::pair<char const(&)[23],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1424),
      (const char (*)[23])"PROP_IS_WEATHER_LOCKED",
      (data::PropType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "PROP_IS_WEATHER_LOCKED");
    *(_DWORD *)(v1 + 336) = 10008;
    std::pair<std::string const,data::PropType>::pair<char const(&)[25],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1464),
      (const char (*)[25])"PROP_IS_GAME_TIME_LOCKED",
      (data::PropType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "PROP_IS_GAME_TIME_LOCKED");
    *(_DWORD *)(v1 + 352) = 10009;
    std::pair<std::string const,data::PropType>::pair<char const(&)[21],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1504),
      (const char (*)[21])"PROP_IS_TRANSFERABLE",
      (data::PropType *)(v1 + 352));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, "PROP_IS_TRANSFERABLE");
    *(_DWORD *)(v1 + 368) = 10010;
    std::pair<std::string const,data::PropType>::pair<char const(&)[17],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1544),
      (const char (*)[17])"PROP_MAX_STAMINA",
      (data::PropType *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, "PROP_MAX_STAMINA");
    *(_DWORD *)(v1 + 384) = 10011;
    std::pair<std::string const,data::PropType>::pair<char const(&)[25],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1584),
      (const char (*)[25])"PROP_CUR_PERSIST_STAMINA",
      (data::PropType *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, "PROP_CUR_PERSIST_STAMINA");
    *(_DWORD *)(v1 + 400) = 10012;
    std::pair<std::string const,data::PropType>::pair<char const(&)[27],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1624),
      (const char (*)[27])"PROP_CUR_TEMPORARY_STAMINA",
      (data::PropType *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, "PROP_CUR_TEMPORARY_STAMINA");
    *(_DWORD *)(v1 + 416) = 10013;
    std::pair<std::string const,data::PropType>::pair<char const(&)[18],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1664),
      (const char (*)[18])"PROP_PLAYER_LEVEL",
      (data::PropType *)(v1 + 416));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, "PROP_PLAYER_LEVEL");
    *(_DWORD *)(v1 + 432) = 10014;
    std::pair<std::string const,data::PropType>::pair<char const(&)[16],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1704),
      (const char (*)[16])"PROP_PLAYER_EXP",
      (data::PropType *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, "PROP_PLAYER_EXP");
    *(_DWORD *)(v1 + 448) = 10015;
    std::pair<std::string const,data::PropType>::pair<char const(&)[18],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1744),
      (const char (*)[18])"PROP_PLAYER_HCOIN",
      (data::PropType *)(v1 + 448));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, "PROP_PLAYER_HCOIN");
    *(_DWORD *)(v1 + 464) = 10016;
    std::pair<std::string const,data::PropType>::pair<char const(&)[18],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1784),
      (const char (*)[18])"PROP_PLAYER_SCOIN",
      (data::PropType *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, "PROP_PLAYER_SCOIN");
    *(_DWORD *)(v1 + 480) = 10017;
    std::pair<std::string const,data::PropType>::pair<char const(&)[28],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1824),
      (const char (*)[28])"PROP_PLAYER_MP_SETTING_TYPE",
      (data::PropType *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, "PROP_PLAYER_MP_SETTING_TYPE");
    *(_DWORD *)(v1 + 496) = 10018;
    std::pair<std::string const,data::PropType>::pair<char const(&)[26],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1864),
      (const char (*)[26])"PROP_IS_MP_MODE_AVAILABLE",
      (data::PropType *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, "PROP_IS_MP_MODE_AVAILABLE");
    *(_DWORD *)(v1 + 512) = 10019;
    std::pair<std::string const,data::PropType>::pair<char const(&)[24],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1904),
      (const char (*)[24])"PROP_PLAYER_WORLD_LEVEL",
      (data::PropType *)(v1 + 512));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, "PROP_PLAYER_WORLD_LEVEL");
    *(_DWORD *)(v1 + 528) = 10020;
    std::pair<std::string const,data::PropType>::pair<char const(&)[18],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1944),
      (const char (*)[18])"PROP_PLAYER_RESIN",
      (data::PropType *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, "PROP_PLAYER_RESIN");
    *(_DWORD *)(v1 + 544) = 10022;
    std::pair<std::string const,data::PropType>::pair<char const(&)[27],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 1984),
      (const char (*)[27])"PROP_PLAYER_WAIT_SUB_HCOIN",
      (data::PropType *)(v1 + 544));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, "PROP_PLAYER_WAIT_SUB_HCOIN");
    *(_DWORD *)(v1 + 560) = 10023;
    std::pair<std::string const,data::PropType>::pair<char const(&)[27],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2024),
      (const char (*)[27])"PROP_PLAYER_WAIT_SUB_SCOIN",
      (data::PropType *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, "PROP_PLAYER_WAIT_SUB_SCOIN");
    *(_DWORD *)(v1 + 576) = 10024;
    std::pair<std::string const,data::PropType>::pair<char const(&)[31],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2064),
      (const char (*)[31])"PROP_IS_ONLY_MP_WITH_PS_PLAYER",
      (data::PropType *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, "PROP_IS_ONLY_MP_WITH_PS_PLAYER");
    *(_DWORD *)(v1 + 592) = 10025;
    std::pair<std::string const,data::PropType>::pair<char const(&)[18],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2104),
      (const char (*)[18])"PROP_PLAYER_MCOIN",
      (data::PropType *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, "PROP_PLAYER_MCOIN");
    *(_DWORD *)(v1 + 608) = 10026;
    std::pair<std::string const,data::PropType>::pair<char const(&)[27],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2144),
      (const char (*)[27])"PROP_PLAYER_WAIT_SUB_MCOIN",
      (data::PropType *)(v1 + 608));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, "PROP_PLAYER_WAIT_SUB_MCOIN");
    *(_DWORD *)(v1 + 624) = 10027;
    std::pair<std::string const,data::PropType>::pair<char const(&)[26],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2184),
      (const char (*)[26])"PROP_PLAYER_LEGENDARY_KEY",
      (data::PropType *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, "PROP_PLAYER_LEGENDARY_KEY");
    *(_DWORD *)(v1 + 640) = 10028;
    std::pair<std::string const,data::PropType>::pair<char const(&)[24],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2224),
      (const char (*)[24])"PROP_IS_HAS_FIRST_SHARE",
      (data::PropType *)(v1 + 640));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, "PROP_IS_HAS_FIRST_SHARE");
    *(_DWORD *)(v1 + 656) = 10029;
    std::pair<std::string const,data::PropType>::pair<char const(&)[24],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2264),
      (const char (*)[24])"PROP_PLAYER_FORGE_POINT",
      (data::PropType *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, "PROP_PLAYER_FORGE_POINT");
    *(_DWORD *)(v1 + 672) = 10035;
    std::pair<std::string const,data::PropType>::pair<char const(&)[23],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2304),
      (const char (*)[23])"PROP_CUR_CLIMATE_METER",
      (data::PropType *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, "PROP_CUR_CLIMATE_METER");
    *(_DWORD *)(v1 + 688) = 10036;
    std::pair<std::string const,data::PropType>::pair<char const(&)[22],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2344),
      (const char (*)[22])"PROP_CUR_CLIMATE_TYPE",
      (data::PropType *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, "PROP_CUR_CLIMATE_TYPE");
    *(_DWORD *)(v1 + 704) = 10037;
    std::pair<std::string const,data::PropType>::pair<char const(&)[25],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2384),
      (const char (*)[25])"PROP_CUR_CLIMATE_AREA_ID",
      (data::PropType *)(v1 + 704));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, "PROP_CUR_CLIMATE_AREA_ID");
    *(_DWORD *)(v1 + 720) = 10038;
    std::pair<std::string const,data::PropType>::pair<char const(&)[35],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2424),
      (const char (*)[35])"PROP_CUR_CLIMATE_AREA_CLIMATE_TYPE",
      (data::PropType *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, "PROP_CUR_CLIMATE_AREA_CLIMATE_TYPE");
    *(_DWORD *)(v1 + 736) = 10039;
    std::pair<std::string const,data::PropType>::pair<char const(&)[30],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2464),
      (const char (*)[30])"PROP_PLAYER_WORLD_LEVEL_LIMIT",
      (data::PropType *)(v1 + 736));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, "PROP_PLAYER_WORLD_LEVEL_LIMIT");
    *(_DWORD *)(v1 + 752) = 10040;
    std::pair<std::string const,data::PropType>::pair<char const(&)[34],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2504),
      (const char (*)[34])"PROP_PLAYER_WORLD_LEVEL_ADJUST_CD",
      (data::PropType *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, "PROP_PLAYER_WORLD_LEVEL_ADJUST_CD");
    *(_DWORD *)(v1 + 768) = 10041;
    std::pair<std::string const,data::PropType>::pair<char const(&)[37],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2544),
      (const char (*)[37])"PROP_PLAYER_LEGENDARY_DAILY_TASK_NUM",
      (data::PropType *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, "PROP_PLAYER_LEGENDARY_DAILY_TASK_NUM");
    *(_DWORD *)(v1 + 784) = 10042;
    std::pair<std::string const,data::PropType>::pair<char const(&)[22],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2584),
      (const char (*)[22])"PROP_PLAYER_HOME_COIN",
      (data::PropType *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, "PROP_PLAYER_HOME_COIN");
    *(_DWORD *)(v1 + 800) = 10043;
    std::pair<std::string const,data::PropType>::pair<char const(&)[31],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2624),
      (const char (*)[31])"PROP_PLAYER_WAIT_SUB_HOME_COIN",
      (data::PropType *)(v1 + 800));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, "PROP_PLAYER_WAIT_SUB_HOME_COIN");
    *(_DWORD *)(v1 + 816) = 10044;
    std::pair<std::string const,data::PropType>::pair<char const(&)[35],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2664),
      (const char (*)[35])"PROP_IS_AUTO_UNLOCK_SPECIFIC_EQUIP",
      (data::PropType *)(v1 + 816));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, "PROP_IS_AUTO_UNLOCK_SPECIFIC_EQUIP");
    *(_DWORD *)(v1 + 832) = 10045;
    std::pair<std::string const,data::PropType>::pair<char const(&)[21],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2704),
      (const char (*)[21])"PROP_PLAYER_GCG_COIN",
      (data::PropType *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, "PROP_PLAYER_GCG_COIN");
    *(_DWORD *)(v1 + 848) = 10046;
    std::pair<std::string const,data::PropType>::pair<char const(&)[30],data::PropType,true>(
      (std::pair<const std::string,data::PropType> *const)(v1 + 2744),
      (const char (*)[30])"PROP_PLAYER_WAIT_SUB_GCG_COIN",
      (data::PropType *)(v1 + 848));
    std::allocator<std::pair<std::string const,data::PropType>>::allocator((std::allocator<std::pair<const std::string,data::PropType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::PropType>::unordered_map(
      &data::getPropTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::PropType> >)__PAIR128__(48LL, v1 + 864),
      0LL,
      (const std::unordered_map<std::string,data::PropType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::PropType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::PropType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getPropTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::PropType>::~unordered_map,
      &data::getPropTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::PropType>>::~allocator((std::allocator<std::pair<const std::string,data::PropType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::PropType> *)(v1 + 2784);
          i != (std::pair<const std::string,data::PropType> *)(v1 + 864);
          std::pair<std::string const,data::PropType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8164) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 364) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_6(v1, 2912LL, v6);
  }
  return &data::getPropTypeNameMap[abi:cxx11](void)::m;
};

// Line 1342: range 000000000FA378ED-000000000FA3B2B3
const std::map<data::PropType,std::pair<std::string,std::string >> *__cdecl data::getPropTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::PropType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  _DWORD *v18; // rax
  _DWORD *v19; // rax
  _DWORD *v20; // rax
  _DWORD *v21; // rax
  _DWORD *v22; // rax
  _DWORD *v23; // rax
  _DWORD *v24; // rax
  _DWORD *v25; // rax
  _DWORD *v26; // rax
  _DWORD *v27; // rax
  _DWORD *v28; // rax
  _DWORD *v29; // rax
  _DWORD *v30; // rax
  _DWORD *v31; // rax
  _DWORD *v32; // rax
  _DWORD *v33; // rax
  _DWORD *v34; // rax
  _DWORD *v35; // rax
  _DWORD *v36; // rax
  _DWORD *v37; // rax
  _DWORD *v38; // rax
  _DWORD *v39; // rax
  _DWORD *v40; // rax
  _DWORD *v41; // rax
  _DWORD *v42; // rax
  _DWORD *v43; // rax
  _DWORD *v44; // rax
  _DWORD *v45; // rax
  _DWORD *v46; // rax
  _DWORD *v47; // rax
  _DWORD *v48; // rax
  _DWORD *v49; // rax
  _DWORD *v50; // rax
  _DWORD *v51; // rax
  char v53[9072]; // [rsp+10h] [rbp-2370h] BYREF

  v1 = (unsigned __int64)v53;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_8(9024LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "99 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 "
                        "<unknown> 384 4 9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unkno"
                        "wn> 464 4 9 <unknown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 54"
                        "4 4 9 <unknown> 560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 "
                        "<unknown> 640 4 9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unkno"
                        "wn> 720 4 9 <unknown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 80"
                        "0 4 9 <unknown> 816 4 9 <unknown> 832 64 9 <unknown> 928 64 9 <unknown> 1024 64 9 <unknown> 1120"
                        " 64 9 <unknown> 1216 64 9 <unknown> 1312 64 9 <unknown> 1408 64 9 <unknown> 1504 64 9 <unknown> "
                        "1600 64 9 <unknown> 1696 64 9 <unknown> 1792 64 9 <unknown> 1888 64 9 <unknown> 1984 64 9 <unkno"
                        "wn> 2080 64 9 <unknown> 2176 64 9 <unknown> 2272 64 9 <unknown> 2368 64 9 <unknown> 2464 64 9 <u"
                        "nknown> 2560 64 9 <unknown> 2656 64 9 <unknown> 2752 64 9 <unknown> 2848 64 9 <unknown> 2944 64 "
                        "9 <unknown> 3040 64 9 <unknown> 3136 64 9 <unknown> 3232 64 9 <unknown> 3328 64 9 <unknown> 3424"
                        " 64 9 <unknown> 3520 64 9 <unknown> 3616 64 9 <unknown> 3712 64 9 <unknown> 3808 64 9 <unknown> "
                        "3904 64 9 <unknown> 4000 64 9 <unknown> 4096 64 9 <unknown> 4192 64 9 <unknown> 4288 64 9 <unkno"
                        "wn> 4384 64 9 <unknown> 4480 64 9 <unknown> 4576 64 9 <unknown> 4672 64 9 <unknown> 4768 64 9 <u"
                        "nknown> 4864 64 9 <unknown> 4960 64 9 <unknown> 5056 64 9 <unknown> 5152 64 9 <unknown> 5248 64 "
                        "9 <unknown> 5344 64 9 <unknown> 5440 3456 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getPropTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862748] = -218959118;
  v3[536862751] = -218959118;
  v3[536862754] = -218959118;
  v3[536862757] = -218959118;
  v3[536862760] = -218959118;
  v3[536862763] = -218959118;
  v3[536862766] = -218959118;
  v3[536862769] = -218959118;
  v3[536862772] = -218959118;
  v3[536862775] = -218959118;
  v3[536862778] = -218959118;
  v3[536862781] = -218959118;
  v3[536862784] = -218959118;
  v3[536862787] = -218959118;
  v3[536862790] = -218959118;
  v3[536862793] = -218959118;
  v3[536862796] = -218959118;
  v3[536862799] = -218959118;
  v3[536862802] = -218959118;
  v3[536862805] = -218959118;
  v3[536862808] = -218959118;
  v3[536862811] = -218959118;
  v3[536862814] = -218959118;
  v3[536862817] = -218959118;
  v3[536862820] = -218959118;
  v3[536862823] = -218959118;
  v3[536862826] = -218959118;
  v3[536862829] = -218959118;
  v3[536862832] = -218959118;
  v3[536862835] = -218959118;
  v3[536862838] = -218959118;
  v3[536862841] = -218959118;
  v3[536862844] = -218959118;
  v3[536862847] = -218959118;
  v3[536862850] = -218959118;
  v3[536862853] = -218959118;
  v3[536862856] = -218959118;
  v3[536862859] = -218959118;
  v3[536862862] = -218959118;
  v3[536862865] = -218959118;
  v3[536862868] = -218959118;
  v3[536862871] = -218959118;
  v3[536862874] = -218959118;
  v3[536862877] = -218959118;
  v3[536862880] = -218959118;
  v3[536862883] = -218959118;
  v3[536862886] = -218959118;
  v3[536862889] = -218959118;
  v3[536862998] = -202116109;
  v3[536862999] = -202116109;
  v3[536863000] = -202116109;
  v3[536863001] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getPropTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getPropTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 832),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[10])"PROP_NONE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5440),
      (data::PropType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1001;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[9],true>(
      (std::pair<std::string,std::string > *const)(v1 + 928),
      (const char (*)[7])byte_1A62A2A0,
      (const char (*)[9])"PROP_EXP");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5512),
      (data::PropType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 928));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1002;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1024),
      (const char (*)[13])byte_1A62A2E0,
      (const char (*)[17])"PROP_BREAK_LEVEL");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5584),
      (data::PropType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 1024));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 1003;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1120),
      (const char (*)[10])byte_1A62A320,
      (const char (*)[19])"PROP_SATIATION_VAL");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5656),
      (data::PropType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 1120));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 1004;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1216),
      (const char (*)[22])byte_1A62A360,
      (const char (*)[28])"PROP_SATIATION_PENALTY_TIME");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5728),
      (data::PropType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 1216));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 2001;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1312),
      (const char (*)[16])byte_1A62A3A0,
      (const char (*)[20])"PROP_GEAR_START_VAL");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5800),
      (data::PropType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 1312));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 2002;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1408),
      (const char (*)[16])byte_1A62A3E0,
      (const char (*)[19])"PROP_GEAR_STOP_VAL");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5872),
      (data::PropType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 1408));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 4001;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[11],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1504),
      (const char (*)[7])byte_1A62A420,
      (const char (*)[11])"PROP_LEVEL");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 5944),
      (data::PropType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 1504));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 10001;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1600),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[29])"PROP_LAST_CHANGE_AVATAR_TIME");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6016),
      (data::PropType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 1600));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 10002;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1696),
      (const char (*)[16])byte_1A62A460,
      (const char (*)[23])"PROP_MAX_SPRING_VOLUME");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6088),
      (data::PropType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 1696));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10003;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1792),
      (const char (*)[16])byte_1A62A4A0,
      (const char (*)[23])"PROP_CUR_SPRING_VOLUME");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6160),
      (data::PropType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 1792));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 10004;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1888),
      (const char (*)[25])byte_1A62A4E0,
      (const char (*)[24])"PROP_IS_SPRING_AUTO_USE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6232),
      (data::PropType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 1888));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 10005;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1984),
      (const char (*)[28])byte_1A62A520,
      (const char (*)[29])"PROP_SPRING_AUTO_USE_PERCENT");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6304),
      (data::PropType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 1984));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 10006;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2080),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[16])"PROP_IS_FLYABLE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6376),
      (data::PropType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 2080));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 10007;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2176),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[23])"PROP_IS_WEATHER_LOCKED");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6448),
      (data::PropType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 2176));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, v1 + 288);
    *(_DWORD *)(v1 + 304) = 10008;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2272),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[25])"PROP_IS_GAME_TIME_LOCKED");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6520),
      (data::PropType *)(v1 + 304),
      (const std::pair<std::string,std::string > *)(v1 + 2272));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, v1 + 304);
    *(_DWORD *)(v1 + 320) = 10009;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2368),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[21])"PROP_IS_TRANSFERABLE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6592),
      (data::PropType *)(v1 + 320),
      (const std::pair<std::string,std::string > *)(v1 + 2368));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, v1 + 320);
    *(_DWORD *)(v1 + 336) = 10010;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2464),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[17])"PROP_MAX_STAMINA");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6664),
      (data::PropType *)(v1 + 336),
      (const std::pair<std::string,std::string > *)(v1 + 2464));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, v1 + 336);
    *(_DWORD *)(v1 + 352) = 10011;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2560),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[25])"PROP_CUR_PERSIST_STAMINA");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6736),
      (data::PropType *)(v1 + 352),
      (const std::pair<std::string,std::string > *)(v1 + 2560));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, v1 + 352);
    *(_DWORD *)(v1 + 368) = 10012;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2656),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[27])"PROP_CUR_TEMPORARY_STAMINA");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6808),
      (data::PropType *)(v1 + 368),
      (const std::pair<std::string,std::string > *)(v1 + 2656));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, v1 + 368);
    *(_DWORD *)(v1 + 384) = 10013;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2752),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[18])"PROP_PLAYER_LEVEL");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6880),
      (data::PropType *)(v1 + 384),
      (const std::pair<std::string,std::string > *)(v1 + 2752));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, v1 + 384);
    *(_DWORD *)(v1 + 400) = 10014;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2848),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[16])"PROP_PLAYER_EXP");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 6952),
      (data::PropType *)(v1 + 400),
      (const std::pair<std::string,std::string > *)(v1 + 2848));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, v1 + 400);
    *(_DWORD *)(v1 + 416) = 10015;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2944),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[18])"PROP_PLAYER_HCOIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7024),
      (data::PropType *)(v1 + 416),
      (const std::pair<std::string,std::string > *)(v1 + 2944));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, v1 + 416);
    *(_DWORD *)(v1 + 432) = 10016;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3040),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[18])"PROP_PLAYER_SCOIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7096),
      (data::PropType *)(v1 + 432),
      (const std::pair<std::string,std::string > *)(v1 + 3040));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, v1 + 432);
    *(_DWORD *)(v1 + 448) = 10017;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3136),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[28])"PROP_PLAYER_MP_SETTING_TYPE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7168),
      (data::PropType *)(v1 + 448),
      (const std::pair<std::string,std::string > *)(v1 + 3136));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, v1 + 448);
    *(_DWORD *)(v1 + 464) = 10018;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3232),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[26])"PROP_IS_MP_MODE_AVAILABLE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7240),
      (data::PropType *)(v1 + 464),
      (const std::pair<std::string,std::string > *)(v1 + 3232));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, v1 + 464);
    *(_DWORD *)(v1 + 480) = 10019;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3328),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[24])"PROP_PLAYER_WORLD_LEVEL");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7312),
      (data::PropType *)(v1 + 480),
      (const std::pair<std::string,std::string > *)(v1 + 3328));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, v1 + 480);
    *(_DWORD *)(v1 + 496) = 10020;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3424),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[18])"PROP_PLAYER_RESIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7384),
      (data::PropType *)(v1 + 496),
      (const std::pair<std::string,std::string > *)(v1 + 3424));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, v1 + 496);
    *(_DWORD *)(v1 + 512) = 10022;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3520),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[27])"PROP_PLAYER_WAIT_SUB_HCOIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7456),
      (data::PropType *)(v1 + 512),
      (const std::pair<std::string,std::string > *)(v1 + 3520));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, v1 + 512);
    *(_DWORD *)(v1 + 528) = 10023;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3616),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[27])"PROP_PLAYER_WAIT_SUB_SCOIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7528),
      (data::PropType *)(v1 + 528),
      (const std::pair<std::string,std::string > *)(v1 + 3616));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, v1 + 528);
    *(_DWORD *)(v1 + 544) = 10024;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3712),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[31])"PROP_IS_ONLY_MP_WITH_PS_PLAYER");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7600),
      (data::PropType *)(v1 + 544),
      (const std::pair<std::string,std::string > *)(v1 + 3712));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, v1 + 544);
    *(_DWORD *)(v1 + 560) = 10025;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3808),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[18])"PROP_PLAYER_MCOIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7672),
      (data::PropType *)(v1 + 560),
      (const std::pair<std::string,std::string > *)(v1 + 3808));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, v1 + 560);
    *(_DWORD *)(v1 + 576) = 10026;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3904),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[27])"PROP_PLAYER_WAIT_SUB_MCOIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7744),
      (data::PropType *)(v1 + 576),
      (const std::pair<std::string,std::string > *)(v1 + 3904));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, v1 + 576);
    *(_DWORD *)(v1 + 592) = 10027;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4000),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[26])"PROP_PLAYER_LEGENDARY_KEY");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7816),
      (data::PropType *)(v1 + 592),
      (const std::pair<std::string,std::string > *)(v1 + 4000));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, v1 + 592);
    *(_DWORD *)(v1 + 608) = 10028;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4096),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[24])"PROP_IS_HAS_FIRST_SHARE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7888),
      (data::PropType *)(v1 + 608),
      (const std::pair<std::string,std::string > *)(v1 + 4096));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, v1 + 608);
    *(_DWORD *)(v1 + 624) = 10029;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4192),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[24])"PROP_PLAYER_FORGE_POINT");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 7960),
      (data::PropType *)(v1 + 624),
      (const std::pair<std::string,std::string > *)(v1 + 4192));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, v1 + 624);
    *(_DWORD *)(v1 + 640) = 10035;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4288),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[23])"PROP_CUR_CLIMATE_METER");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8032),
      (data::PropType *)(v1 + 640),
      (const std::pair<std::string,std::string > *)(v1 + 4288));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, v1 + 640);
    *(_DWORD *)(v1 + 656) = 10036;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4384),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[22])"PROP_CUR_CLIMATE_TYPE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8104),
      (data::PropType *)(v1 + 656),
      (const std::pair<std::string,std::string > *)(v1 + 4384));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, v1 + 656);
    *(_DWORD *)(v1 + 672) = 10037;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4480),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[25])"PROP_CUR_CLIMATE_AREA_ID");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8176),
      (data::PropType *)(v1 + 672),
      (const std::pair<std::string,std::string > *)(v1 + 4480));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, v1 + 672);
    *(_DWORD *)(v1 + 688) = 10038;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4576),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[35])"PROP_CUR_CLIMATE_AREA_CLIMATE_TYPE");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8248),
      (data::PropType *)(v1 + 688),
      (const std::pair<std::string,std::string > *)(v1 + 4576));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, v1 + 688);
    *(_DWORD *)(v1 + 704) = 10039;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4672),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[30])"PROP_PLAYER_WORLD_LEVEL_LIMIT");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8320),
      (data::PropType *)(v1 + 704),
      (const std::pair<std::string,std::string > *)(v1 + 4672));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, v1 + 704);
    *(_DWORD *)(v1 + 720) = 10040;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4768),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[34])"PROP_PLAYER_WORLD_LEVEL_ADJUST_CD");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8392),
      (data::PropType *)(v1 + 720),
      (const std::pair<std::string,std::string > *)(v1 + 4768));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, v1 + 720);
    *(_DWORD *)(v1 + 736) = 10041;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4864),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[37])"PROP_PLAYER_LEGENDARY_DAILY_TASK_NUM");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8464),
      (data::PropType *)(v1 + 736),
      (const std::pair<std::string,std::string > *)(v1 + 4864));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, v1 + 736);
    *(_DWORD *)(v1 + 752) = 10042;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4960),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[22])"PROP_PLAYER_HOME_COIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8536),
      (data::PropType *)(v1 + 752),
      (const std::pair<std::string,std::string > *)(v1 + 4960));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, v1 + 752);
    *(_DWORD *)(v1 + 768) = 10043;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5056),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[31])"PROP_PLAYER_WAIT_SUB_HOME_COIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8608),
      (data::PropType *)(v1 + 768),
      (const std::pair<std::string,std::string > *)(v1 + 5056));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, v1 + 768);
    *(_DWORD *)(v1 + 784) = 10044;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5152),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[35])"PROP_IS_AUTO_UNLOCK_SPECIFIC_EQUIP");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8680),
      (data::PropType *)(v1 + 784),
      (const std::pair<std::string,std::string > *)(v1 + 5152));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, v1 + 784);
    *(_DWORD *)(v1 + 800) = 10045;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5248),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[21])"PROP_PLAYER_GCG_COIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8752),
      (data::PropType *)(v1 + 800),
      (const std::pair<std::string,std::string > *)(v1 + 5248));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, v1 + 800);
    *(_DWORD *)(v1 + 816) = 10046;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5344),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[30])"PROP_PLAYER_WAIT_SUB_GCG_COIN");
    std::pair<data::PropType const,std::pair<std::string,std::string>>::pair<data::PropType,true>(
      (std::pair<const data::PropType,std::pair<std::string,std::string > > *const)(v1 + 8824),
      (data::PropType *)(v1 + 816),
      (const std::pair<std::string,std::string > *)(v1 + 5344));
    std::allocator<std::pair<data::PropType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::PropType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::PropType,std::pair<std::string,std::string>>::map(
      &data::getPropTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::PropType,std::pair<std::string,std::string > > >)__PAIR128__(48LL, v1 + 5440),
      (const std::less<data::PropType> *)(v1 + 32),
      (const std::map<data::PropType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getPropTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::PropType,std::pair<std::string,std::string>>::~map,
      &data::getPropTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::PropType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::PropType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::PropType,std::pair<std::string,std::string > > *)(v1 + 8896);
          i != (std::pair<const data::PropType,std::pair<std::string,std::string > > *)(v1 + 5440);
          std::pair<data::PropType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 5440, 3456LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5344));
    v5 = (_DWORD *)(((v1 + 5344) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5248));
    v6 = (_DWORD *)(((v1 + 5248) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5152));
    v7 = (_DWORD *)(((v1 + 5152) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5056));
    v8 = (_DWORD *)(((v1 + 5056) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4960));
    v9 = (_DWORD *)(((v1 + 4960) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4864));
    v10 = (_DWORD *)(((v1 + 4864) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4768));
    v11 = (_DWORD *)(((v1 + 4768) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4672));
    v12 = (_DWORD *)(((v1 + 4672) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4576));
    v13 = (_DWORD *)(((v1 + 4576) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4480));
    v14 = (_DWORD *)(((v1 + 4480) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4384));
    v15 = (_DWORD *)(((v1 + 4384) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4288));
    v16 = (_DWORD *)(((v1 + 4288) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4192));
    v17 = (_DWORD *)(((v1 + 4192) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4096));
    v18 = (_DWORD *)(((v1 + 4096) >> 3) + 2147450880);
    *v18 = -117901064;
    v18[1] = -117901064;
    *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4000));
    v19 = (_DWORD *)(((v1 + 4000) >> 3) + 2147450880);
    *v19 = -117901064;
    v19[1] = -117901064;
    *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3904));
    v20 = (_DWORD *)(((v1 + 3904) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3808));
    v21 = (_DWORD *)(((v1 + 3808) >> 3) + 2147450880);
    *v21 = -117901064;
    v21[1] = -117901064;
    *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3712));
    v22 = (_DWORD *)(((v1 + 3712) >> 3) + 2147450880);
    *v22 = -117901064;
    v22[1] = -117901064;
    *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3616));
    v23 = (_DWORD *)(((v1 + 3616) >> 3) + 2147450880);
    *v23 = -117901064;
    v23[1] = -117901064;
    *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3520));
    v24 = (_DWORD *)(((v1 + 3520) >> 3) + 2147450880);
    *v24 = -117901064;
    v24[1] = -117901064;
    *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3424));
    v25 = (_DWORD *)(((v1 + 3424) >> 3) + 2147450880);
    *v25 = -117901064;
    v25[1] = -117901064;
    *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3328));
    v26 = (_DWORD *)(((v1 + 3328) >> 3) + 2147450880);
    *v26 = -117901064;
    v26[1] = -117901064;
    *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3232));
    v27 = (_DWORD *)(((v1 + 3232) >> 3) + 2147450880);
    *v27 = -117901064;
    v27[1] = -117901064;
    *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3136));
    v28 = (_DWORD *)(((v1 + 3136) >> 3) + 2147450880);
    *v28 = -117901064;
    v28[1] = -117901064;
    *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3040));
    v29 = (_DWORD *)(((v1 + 3040) >> 3) + 2147450880);
    *v29 = -117901064;
    v29[1] = -117901064;
    *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2944));
    v30 = (_DWORD *)(((v1 + 2944) >> 3) + 2147450880);
    *v30 = -117901064;
    v30[1] = -117901064;
    *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2848));
    v31 = (_DWORD *)(((v1 + 2848) >> 3) + 2147450880);
    *v31 = -117901064;
    v31[1] = -117901064;
    *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2752));
    v32 = (_DWORD *)(((v1 + 2752) >> 3) + 2147450880);
    *v32 = -117901064;
    v32[1] = -117901064;
    *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2656));
    v33 = (_DWORD *)(((v1 + 2656) >> 3) + 2147450880);
    *v33 = -117901064;
    v33[1] = -117901064;
    *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2560));
    v34 = (_DWORD *)(((v1 + 2560) >> 3) + 2147450880);
    *v34 = -117901064;
    v34[1] = -117901064;
    *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2464));
    v35 = (_DWORD *)(((v1 + 2464) >> 3) + 2147450880);
    *v35 = -117901064;
    v35[1] = -117901064;
    *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2368));
    v36 = (_DWORD *)(((v1 + 2368) >> 3) + 2147450880);
    *v36 = -117901064;
    v36[1] = -117901064;
    *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2272));
    v37 = (_DWORD *)(((v1 + 2272) >> 3) + 2147450880);
    *v37 = -117901064;
    v37[1] = -117901064;
    *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2176));
    v38 = (_DWORD *)(((v1 + 2176) >> 3) + 2147450880);
    *v38 = -117901064;
    v38[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2080));
    v39 = (_DWORD *)(((v1 + 2080) >> 3) + 2147450880);
    *v39 = -117901064;
    v39[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1984));
    v40 = (_DWORD *)(((v1 + 1984) >> 3) + 2147450880);
    *v40 = -117901064;
    v40[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1888));
    v41 = (_DWORD *)(((v1 + 1888) >> 3) + 2147450880);
    *v41 = -117901064;
    v41[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1792));
    v42 = (_DWORD *)(((v1 + 1792) >> 3) + 2147450880);
    *v42 = -117901064;
    v42[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1696));
    v43 = (_DWORD *)(((v1 + 1696) >> 3) + 2147450880);
    *v43 = -117901064;
    v43[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1600));
    v44 = (_DWORD *)(((v1 + 1600) >> 3) + 2147450880);
    *v44 = -117901064;
    v44[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1504));
    v45 = (_DWORD *)(((v1 + 1504) >> 3) + 2147450880);
    *v45 = -117901064;
    v45[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1408));
    v46 = (_DWORD *)(((v1 + 1408) >> 3) + 2147450880);
    *v46 = -117901064;
    v46[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1312));
    v47 = (_DWORD *)(((v1 + 1312) >> 3) + 2147450880);
    *v47 = -117901064;
    v47[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1216));
    v48 = (_DWORD *)(((v1 + 1216) >> 3) + 2147450880);
    *v48 = -117901064;
    v48[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1120));
    v49 = (_DWORD *)(((v1 + 1120) >> 3) + 2147450880);
    *v49 = -117901064;
    v49[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1024));
    v50 = (_DWORD *)(((v1 + 1024) >> 3) + 2147450880);
    *v50 = -117901064;
    v50[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 928));
    v51 = (_DWORD *)(((v1 + 928) >> 3) + 2147450880);
    *v51 = -117901064;
    v51[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 832));
  }
  if ( v53 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8460) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 1128) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_8(v1, 9024LL, v53);
  }
  return &data::getPropTypeEnumMap[abi:cxx11](void)::m;
};

// Line 1398: range 000000000FA3B2B4-000000000FA3B627
const char *__fastcall data::enumValToStr(data::ItemType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::ItemType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::ItemType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:1397 64 8 9 iter:1400 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getItemTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::ItemType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ItemType,std::pair<std::string,std::string>>::find(
                                                                                                 map,
                                                                                                 (const std::map<data::ItemType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::ItemType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ItemType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::ItemType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::ItemType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      1403);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_ItemType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::ItemType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::ItemType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1410: range 000000000FA3B628-000000000FA3BBE0
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ItemType>,false,true>::pointer v10; // rax
  data::ItemType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::ItemType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:1419 96 8 9 <unknown> 128 8 6 s:1409 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getItemTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::ItemType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ItemType>::find(
                                                                                     m,
                                                                                     (const std::unordered_map<std::string,data::ItemType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::ItemType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::ItemType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::ItemType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        1422);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::ItemType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::ItemType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      1413);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1431: range 000000000FA3BBE1-000000000FA3C863
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::ItemType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::ItemType>,false,true>::pointer v12; // rax
  data::ItemType second; // ecx
  char v14; // dl
  char v16[848]; // [rsp+20h] [rbp-350h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(800LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 8 7 it:14"
                        "48 240 8 9 <unknown> 272 8 6 s:1430 304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496"
                        " 240 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = 61956;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862743] = -202116109;
  v4[536862744] = -202116109;
  *(_QWORD *)(v2 + 272) = s;
  if ( *(_QWORD *)(v2 + 272) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::ItemType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::ItemType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::ItemType>::pair<char const(&)[13],data::ItemType,true>(
        (std::pair<const std::string,data::ItemType> *const)(v2 + 496),
        (const char (*)[13])byte_1A62BFA0,
        (data::ItemType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A62BFA0);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::ItemType>::pair<char const(&)[7],data::ItemType,true>(
        (std::pair<const std::string,data::ItemType> *const)(v2 + 536),
        (const char (*)[7])byte_1A62BFE0,
        (data::ItemType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A62BFE0);
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::ItemType>::pair<char const(&)[10],data::ItemType,true>(
        (std::pair<const std::string,data::ItemType> *const)(v2 + 576),
        (const char (*)[10])byte_1A62C020,
        (data::ItemType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A62C020);
      *(_DWORD *)(v2 + 160) = 4;
      std::pair<std::string const,data::ItemType>::pair<char const(&)[7],data::ItemType,true>(
        (std::pair<const std::string,data::ItemType> *const)(v2 + 616),
        (const char (*)[7])byte_1A62C060,
        (data::ItemType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A62C060);
      *(_DWORD *)(v2 + 176) = 5;
      std::pair<std::string const,data::ItemType>::pair<char const(&)[13],data::ItemType,true>(
        (std::pair<const std::string,data::ItemType> *const)(v2 + 656),
        (const char (*)[13])byte_1A62C0A0,
        (data::ItemType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A62C0A0);
      *(_DWORD *)(v2 + 192) = 6;
      std::pair<std::string const,data::ItemType>::pair<char const(&)[7],data::ItemType,true>(
        (std::pair<const std::string,data::ItemType> *const)(v2 + 696),
        (const char (*)[7])byte_1A62C0E0,
        (data::ItemType *)(v2 + 192));
      std::allocator<std::pair<std::string const,data::ItemType>>::allocator((std::allocator<std::pair<const std::string,data::ItemType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::ItemType>::unordered_map(
        &data::enumStrToVal(char const*,data::ItemType &)::m,
        (std::initializer_list<std::pair<const std::string,data::ItemType> >)__PAIR128__(6LL, v2 + 496),
        0LL,
        (const std::unordered_map<std::string,data::ItemType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::ItemType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::ItemType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::ItemType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::ItemType>::~unordered_map,
        &data::enumStrToVal(char const*,data::ItemType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ItemType>>::~allocator((std::allocator<std::pair<const std::string,data::ItemType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ItemType> *)(v2 + 736);
            i != (std::pair<const std::string,data::ItemType> *)(v2 + 496);
            std::pair<std::string const,data::ItemType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 496) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_DWORD *)(v7 + 12) = -117901064;
      *(_DWORD *)(v7 + 16) = -117901064;
      *(_DWORD *)(v7 + 20) = -117901064;
      *(_DWORD *)(v7 + 24) = -117901064;
      *(_WORD *)(v7 + 28) = -1800;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 272);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 368),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, v8);
    *(std::unordered_map<std::string,data::ItemType>::iterator *)(v2 + 208) = std::unordered_map<std::string,data::ItemType>::find(
                                                                                &data::enumStrToVal(char const*,data::ItemType &)::m,
                                                                                (const std::unordered_map<std::string,data::ItemType>::key_type *)(v2 + 368));
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, v2 + 368);
    *(std::unordered_map<std::string,data::ItemType>::iterator *)(v2 + 240) = std::unordered_map<std::string,data::ItemType>::end(&data::enumStrToVal(char const*,data::ItemType &)::m);
    v9 = (char *)(v2 + 240);
    v10 = std::__detail::operator==<std::pair<std::string const,data::ItemType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemType>,true> *)(v2 + 208),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemType>,true> *)(v2 + 240));
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 432, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 432),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        1451);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 432),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 272));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
      LODWORD(result) = -1;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::ItemType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ItemType>,false,true> *const)(v2 + 208));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      LODWORD(result) = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 304),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      1434);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 304),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
    LODWORD(result) = -1;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = -168430091;
  }
  return (unsigned int)result;
};

// Line 1460: range 000000000FA3C864-000000000FA3C87A
const char *__cdecl data::getDescription(data::ItemType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 1465: range 000000000FA3C87B-000000000FA3CA30
bool __cdecl data::isValidItemType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::ItemType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::ItemType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:1466 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidItemType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getItemTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::ItemType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ItemType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getItemTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::ItemType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ItemType,std::pair<std::string,std::string>>::find(
                                                                                                 v6,
                                                                                                 (const std::map<data::ItemType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::ItemType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::ItemType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1471: range 000000000FA3CA31-000000000FA3CB92
bool __cdecl data::isValidItemTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::ItemType> *v5; // rcx
  const std::unordered_map<std::string,data::ItemType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidItemTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getItemTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::ItemType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ItemType>::end(v5);
  v6 = data::getItemTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::ItemType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::ItemType>::find(
                                                                                   v6,
                                                                                   name);
  result = std::__detail::operator!=<std::pair<std::string const,data::ItemType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1476: range 000000000FA3CB93-000000000FA3D29C
const std::unordered_map<std::string,data::ItemType> *__cdecl data::getItemTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::ItemType> *i; // r14
  const std::unordered_map<std::string,data::ItemType> *result; // rax
  char v6[592]; // [rsp+10h] [rbp-250h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(544LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 280 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getItemTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862734] = -218103808;
  v3[536862735] = -202116109;
  v3[536862736] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getItemTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getItemTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::ItemType>::pair<char const(&)[10],data::ItemType,true>(
      (std::pair<const std::string,data::ItemType> *const)(v1 + 192),
      (const char (*)[10])"ITEM_NONE",
      (data::ItemType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "ITEM_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::ItemType>::pair<char const(&)[13],data::ItemType,true>(
      (std::pair<const std::string,data::ItemType> *const)(v1 + 232),
      (const char (*)[13])"ITEM_VIRTUAL",
      (data::ItemType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "ITEM_VIRTUAL");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::ItemType>::pair<char const(&)[14],data::ItemType,true>(
      (std::pair<const std::string,data::ItemType> *const)(v1 + 272),
      (const char (*)[14])"ITEM_MATERIAL",
      (data::ItemType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "ITEM_MATERIAL");
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string const,data::ItemType>::pair<char const(&)[15],data::ItemType,true>(
      (std::pair<const std::string,data::ItemType> *const)(v1 + 312),
      (const char (*)[15])"ITEM_RELIQUARY",
      (data::ItemType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "ITEM_RELIQUARY");
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string const,data::ItemType>::pair<char const(&)[12],data::ItemType,true>(
      (std::pair<const std::string,data::ItemType> *const)(v1 + 352),
      (const char (*)[12])"ITEM_WEAPON",
      (data::ItemType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "ITEM_WEAPON");
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string const,data::ItemType>::pair<char const(&)[13],data::ItemType,true>(
      (std::pair<const std::string,data::ItemType> *const)(v1 + 392),
      (const char (*)[13])"ITEM_DISPLAY",
      (data::ItemType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "ITEM_DISPLAY");
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string const,data::ItemType>::pair<char const(&)[15],data::ItemType,true>(
      (std::pair<const std::string,data::ItemType> *const)(v1 + 432),
      (const char (*)[15])"ITEM_FURNITURE",
      (data::ItemType *)(v1 + 176));
    std::allocator<std::pair<std::string const,data::ItemType>>::allocator((std::allocator<std::pair<const std::string,data::ItemType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::ItemType>::unordered_map(
      &data::getItemTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::ItemType> >)__PAIR128__(7LL, v1 + 192),
      0LL,
      (const std::unordered_map<std::string,data::ItemType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::ItemType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::ItemType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getItemTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::ItemType>::~unordered_map,
      &data::getItemTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::ItemType>>::~allocator((std::allocator<std::pair<const std::string,data::ItemType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::ItemType> *)(v1 + 472);
          i != (std::pair<const std::string,data::ItemType> *)(v1 + 192);
          std::pair<std::string const,data::ItemType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getItemTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 1491: range 000000000FA3D29D-000000000FA3DD70
const std::map<data::ItemType,std::pair<std::string,std::string >> *__cdecl data::getItemTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::ItemType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  char v12[1488]; // [rsp+10h] [rbp-5D0h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1440LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 64 9 <unknown> 288 64 9 <un"
                        "known> 384 64 9 <unknown> 480 64 9 <unknown> 576 64 9 <unknown> 672 64 9 <unknown> 768 64 9 <unk"
                        "nown> 864 504 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getItemTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862728] = -218959118;
  v3[536862731] = -218959118;
  v3[536862734] = -218959118;
  v3[536862737] = -218959118;
  v3[536862740] = -218959118;
  v3[536862743] = -218959118;
  v3[536862746] = -218959118;
  v3[536862762] = -218103808;
  v3[536862763] = -202116109;
  v3[536862764] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getItemTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getItemTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[10],true>(
      (std::pair<std::string,std::string > *const)(v1 + 192),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[10])"ITEM_NONE");
    std::pair<data::ItemType const,std::pair<std::string,std::string>>::pair<data::ItemType,true>(
      (std::pair<const data::ItemType,std::pair<std::string,std::string > > *const)(v1 + 864),
      (data::ItemType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 288),
      (const char (*)[13])byte_1A62BFA0,
      (const char (*)[13])"ITEM_VIRTUAL");
    std::pair<data::ItemType const,std::pair<std::string,std::string>>::pair<data::ItemType,true>(
      (std::pair<const data::ItemType,std::pair<std::string,std::string > > *const)(v1 + 936),
      (data::ItemType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 384),
      (const char (*)[7])byte_1A62BFE0,
      (const char (*)[14])"ITEM_MATERIAL");
    std::pair<data::ItemType const,std::pair<std::string,std::string>>::pair<data::ItemType,true>(
      (std::pair<const data::ItemType,std::pair<std::string,std::string > > *const)(v1 + 1008),
      (data::ItemType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 480),
      (const char (*)[10])byte_1A62C020,
      (const char (*)[15])"ITEM_RELIQUARY");
    std::pair<data::ItemType const,std::pair<std::string,std::string>>::pair<data::ItemType,true>(
      (std::pair<const data::ItemType,std::pair<std::string,std::string > > *const)(v1 + 1080),
      (data::ItemType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[12],true>(
      (std::pair<std::string,std::string > *const)(v1 + 576),
      (const char (*)[7])byte_1A62C060,
      (const char (*)[12])"ITEM_WEAPON");
    std::pair<data::ItemType const,std::pair<std::string,std::string>>::pair<data::ItemType,true>(
      (std::pair<const data::ItemType,std::pair<std::string,std::string > > *const)(v1 + 1152),
      (data::ItemType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 672),
      (const char (*)[13])byte_1A62C0A0,
      (const char (*)[13])"ITEM_DISPLAY");
    std::pair<data::ItemType const,std::pair<std::string,std::string>>::pair<data::ItemType,true>(
      (std::pair<const data::ItemType,std::pair<std::string,std::string > > *const)(v1 + 1224),
      (data::ItemType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 768),
      (const char (*)[7])byte_1A62C0E0,
      (const char (*)[15])"ITEM_FURNITURE");
    std::pair<data::ItemType const,std::pair<std::string,std::string>>::pair<data::ItemType,true>(
      (std::pair<const data::ItemType,std::pair<std::string,std::string > > *const)(v1 + 1296),
      (data::ItemType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 768));
    std::allocator<std::pair<data::ItemType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::ItemType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::ItemType,std::pair<std::string,std::string>>::map(
      &data::getItemTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::ItemType,std::pair<std::string,std::string > > >)__PAIR128__(7LL, v1 + 864),
      (const std::less<data::ItemType> *)(v1 + 48),
      (const std::map<data::ItemType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getItemTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::ItemType,std::pair<std::string,std::string>>::~map,
      &data::getItemTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::ItemType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::ItemType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::ItemType,std::pair<std::string,std::string > > *)(v1 + 1368);
          i != (std::pair<const data::ItemType,std::pair<std::string,std::string > > *)(v1 + 864);
          std::pair<data::ItemType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 864, 504LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 768));
    v5 = (_DWORD *)(((v1 + 768) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 672));
    v6 = (_DWORD *)(((v1 + 672) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 576));
    v7 = (_DWORD *)(((v1 + 576) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 480));
    v8 = (_DWORD *)(((v1 + 480) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 384));
    v9 = (_DWORD *)(((v1 + 384) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 288));
    v10 = (_DWORD *)(((v1 + 288) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 192));
  }
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF80AC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 180) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1440LL, v12);
  }
  return &data::getItemTypeEnumMap[abi:cxx11](void)::m;
};

// Line 1506: range 000000000FA3DD71-000000000FA3E0E4
const char *__fastcall data::enumValToStr(data::MaterialType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::MaterialType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:1505 64 8 9 iter:1508 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getMaterialTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::MaterialType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::MaterialType,std::pair<std::string,std::string>>::find(
                                                                                                     map,
                                                                                                     (const std::map<data::MaterialType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::MaterialType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::MaterialType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      1511);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_MaterialType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::MaterialType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1518: range 000000000FA3E0E5-000000000FA3E69D
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::MaterialType>,false,true>::pointer v10; // rax
  data::MaterialType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::MaterialType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:1527 96 8 9 <unknown> 128 8 6 s:1517 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getMaterialTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::MaterialType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::MaterialType>::find(
                                                                                         m,
                                                                                         (const std::unordered_map<std::string,data::MaterialType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::MaterialType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::MaterialType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::MaterialType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        1530);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::MaterialType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::MaterialType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      1521);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1539: range 000000000FA3E69E-000000000FA4098A
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::MaterialType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::MaterialType>,false,true>::pointer v11; // rax
  data::MaterialType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[3152]; // [rsp+20h] [rbp-C50h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(3104LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "57 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 9"
                        " <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unkn"
                        "own> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> 5"
                        "60 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 9"
                        " <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unkn"
                        "own> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> 8"
                        "16 4 9 <unknown> 832 4 9 <unknown> 848 8 7 it:1596 880 8 9 <unknown> 912 8 6 s:1538 944 32 9 <un"
                        "known> 1008 32 9 <unknown> 1072 32 9 <unknown> 1136 1840 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -234556924;
  v4[536862735] = -234556924;
  v4[536862736] = -234556924;
  v4[536862737] = -234556924;
  v4[536862738] = -234556924;
  v4[536862739] = -234556924;
  v4[536862740] = -234556924;
  v4[536862741] = -234556924;
  v4[536862742] = -234556924;
  v4[536862743] = -234556924;
  v4[536862744] = -234556924;
  v4[536862745] = -234556924;
  v4[536862746] = 61956;
  v4[536862746] = -234881024;
  v4[536862747] = 62194;
  v4[536862747] = -234881024;
  v4[536862748] = 62194;
  v4[536862748] = -234881024;
  v4[536862749] = 62194;
  v4[536862750] = -219021312;
  v4[536862751] = 62194;
  v4[536862752] = -219021312;
  v4[536862753] = 62194;
  v4[536862754] = -219021312;
  v4[536862755] = 62194;
  v4[536862813] = -202116109;
  v4[536862814] = -202116109;
  v4[536862815] = -202116109;
  v4[536862816] = -202116109;
  *(_QWORD *)(v2 + 912) = s;
  if ( *(_QWORD *)(v2 + 912) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::MaterialType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::MaterialType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1136),
        (const char (*)[7])byte_1A62C860,
        (data::MaterialType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A62C860);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1176),
        (const char (*)[13])byte_1A62C8A0,
        (data::MaterialType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A62C8A0);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1216),
        (const char (*)[13])byte_1A62C8E0,
        (data::MaterialType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A62C8E0);
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[10],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1256),
        (const char (*)[10])byte_1A62C920,
        (data::MaterialType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A62C920);
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1296),
        (const char (*)[13])byte_1A62C960,
        (data::MaterialType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A62C960);
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[10],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1336),
        (const char (*)[10])byte_1A62C9A0,
        (data::MaterialType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A62C9A0);
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[10],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1376),
        (const char (*)[10])byte_1A62C9E0,
        (data::MaterialType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A62C9E0);
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1416),
        (const char (*)[7])byte_1A62CA20,
        (data::MaterialType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A62CA20);
      *(_DWORD *)(v2 + 240) = 10;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1456),
        (const char (*)[13])byte_1A62CA60,
        (data::MaterialType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A62CA60);
      *(_DWORD *)(v2 + 256) = 11;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1496),
        (const char (*)[16])byte_1A62CAA0,
        (data::MaterialType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A62CAA0);
      *(_DWORD *)(v2 + 272) = 12;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1536),
        (const char (*)[7])byte_1A62CAE0,
        (data::MaterialType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, byte_1A62CAE0);
      *(_DWORD *)(v2 + 288) = 13;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[22],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1576),
        (const char (*)[22])byte_1A62CB20,
        (data::MaterialType *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, byte_1A62CB20);
      *(_DWORD *)(v2 + 304) = 14;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1616),
        (const char (*)[19])byte_1A62CB60,
        (data::MaterialType *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, byte_1A62CB60);
      *(_DWORD *)(v2 + 320) = 15;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1656),
        (const char (*)[19])byte_1A62CBA0,
        (data::MaterialType *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, byte_1A62CBA0);
      *(_DWORD *)(v2 + 336) = 16;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1696),
        (const char (*)[16])byte_1A62CBE0,
        (data::MaterialType *)(v2 + 336));
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 352, byte_1A62CBE0);
      *(_DWORD *)(v2 + 352) = 17;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1736),
        (const char (*)[13])byte_1A62CC20,
        (data::MaterialType *)(v2 + 352));
      if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 368, byte_1A62CC20);
      *(_DWORD *)(v2 + 368) = 18;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[10],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1776),
        (const char (*)[10])byte_1A62CC60,
        (data::MaterialType *)(v2 + 368));
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 384, byte_1A62CC60);
      *(_DWORD *)(v2 + 384) = 19;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1816),
        (const char (*)[7])byte_1A62CCA0,
        (data::MaterialType *)(v2 + 384));
      if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 400, byte_1A62CCA0);
      *(_DWORD *)(v2 + 400) = 20;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1856),
        (const char (*)[7])byte_1A62CCE0,
        (data::MaterialType *)(v2 + 400));
      if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 416, byte_1A62CCE0);
      *(_DWORD *)(v2 + 416) = 21;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1896),
        (const char (*)[16])byte_1A62CD20,
        (data::MaterialType *)(v2 + 416));
      if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 432, byte_1A62CD20);
      *(_DWORD *)(v2 + 432) = 22;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[22],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1936),
        (const char (*)[22])byte_1A62CD60,
        (data::MaterialType *)(v2 + 432));
      if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 448, byte_1A62CD60);
      *(_DWORD *)(v2 + 448) = 23;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 1976),
        (const char (*)[13])byte_1A62CDA0,
        (data::MaterialType *)(v2 + 448));
      if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 464, byte_1A62CDA0);
      *(_DWORD *)(v2 + 464) = 24;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[25],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2016),
        (const char (*)[25])byte_1A62CDE0,
        (data::MaterialType *)(v2 + 464));
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 480, byte_1A62CDE0);
      *(_DWORD *)(v2 + 480) = 25;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2056),
        (const char (*)[7])byte_1A62CE20,
        (data::MaterialType *)(v2 + 480));
      if ( *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 496, byte_1A62CE20);
      *(_DWORD *)(v2 + 496) = 27;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2096),
        (const char (*)[13])byte_1A62CE60,
        (data::MaterialType *)(v2 + 496));
      if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 512, byte_1A62CE60);
      *(_DWORD *)(v2 + 512) = 28;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[17],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2136),
        (const char (*)[17])byte_1A62CEA0,
        (data::MaterialType *)(v2 + 512));
      if ( *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 528, byte_1A62CEA0);
      *(_DWORD *)(v2 + 528) = 29;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2176),
        (const char (*)[19])byte_1A62CEE0,
        (data::MaterialType *)(v2 + 528));
      if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 544, byte_1A62CEE0);
      *(_DWORD *)(v2 + 544) = 30;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[10],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2216),
        (const char (*)[10])byte_1A62CF20,
        (data::MaterialType *)(v2 + 544));
      if ( *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 560, byte_1A62CF20);
      *(_DWORD *)(v2 + 560) = 31;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2256),
        (const char (*)[13])byte_1A62CF60,
        (data::MaterialType *)(v2 + 560));
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 576, byte_1A62CF60);
      *(_DWORD *)(v2 + 576) = 32;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2296),
        (const char (*)[7])byte_1A62CFA0,
        (data::MaterialType *)(v2 + 576));
      if ( *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 592, byte_1A62CFA0);
      *(_DWORD *)(v2 + 592) = 33;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2336),
        (const char (*)[7])byte_1A62CFE0,
        (data::MaterialType *)(v2 + 592));
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 608, byte_1A62CFE0);
      *(_DWORD *)(v2 + 608) = 34;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[17],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2376),
        (const char (*)[17])byte_1A62D020,
        (data::MaterialType *)(v2 + 608));
      if ( *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 624, byte_1A62D020);
      *(_DWORD *)(v2 + 624) = 35;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[7],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2416),
        (const char (*)[7])byte_1A62D060,
        (data::MaterialType *)(v2 + 624));
      if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 640, byte_1A62D060);
      *(_DWORD *)(v2 + 640) = 36;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[4],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2456),
        (const char (*)[4])off_1A62D0A0,
        (data::MaterialType *)(v2 + 640));
      if ( *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 656, off_1A62D0A0);
      *(_DWORD *)(v2 + 656) = 37;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[25],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2496),
        (const char (*)[25])byte_1A62D0E0,
        (data::MaterialType *)(v2 + 656));
      if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 672, byte_1A62D0E0);
      *(_DWORD *)(v2 + 672) = 38;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2536),
        (const char (*)[16])byte_1A62D120,
        (data::MaterialType *)(v2 + 672));
      if ( *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 688, byte_1A62D120);
      *(_DWORD *)(v2 + 688) = 39;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2576),
        (const char (*)[13])byte_1A62D160,
        (data::MaterialType *)(v2 + 688));
      if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 704, byte_1A62D160);
      *(_DWORD *)(v2 + 704) = 40;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2616),
        (const char (*)[13])byte_1A62D1A0,
        (data::MaterialType *)(v2 + 704));
      if ( *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 720, byte_1A62D1A0);
      *(_DWORD *)(v2 + 720) = 41;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2656),
        (const char (*)[16])byte_1A62D1E0,
        (data::MaterialType *)(v2 + 720));
      if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 736, byte_1A62D1E0);
      *(_DWORD *)(v2 + 736) = 46;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[15],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2696),
        (const char (*)[15])byte_1A62D220,
        (data::MaterialType *)(v2 + 736));
      if ( *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 752, byte_1A62D220);
      *(_DWORD *)(v2 + 752) = 42;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2736),
        (const char (*)[19])byte_1A62D260,
        (data::MaterialType *)(v2 + 752));
      if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 768, byte_1A62D260);
      *(_DWORD *)(v2 + 768) = 43;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2776),
        (const char (*)[19])byte_1A62D2A0,
        (data::MaterialType *)(v2 + 768));
      if ( *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 784, byte_1A62D2A0);
      *(_DWORD *)(v2 + 784) = 44;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2816),
        (const char (*)[19])byte_1A62D2E0,
        (data::MaterialType *)(v2 + 784));
      if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 800, byte_1A62D2E0);
      *(_DWORD *)(v2 + 800) = 45;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2856),
        (const char (*)[19])byte_1A62D320,
        (data::MaterialType *)(v2 + 800));
      if ( *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 816, byte_1A62D320);
      *(_DWORD *)(v2 + 816) = 47;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2896),
        (const char (*)[19])byte_1A62D360,
        (data::MaterialType *)(v2 + 816));
      if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 832, byte_1A62D360);
      *(_DWORD *)(v2 + 832) = 48;
      std::pair<std::string const,data::MaterialType>::pair<char const(&)[25],data::MaterialType,true>(
        (std::pair<const std::string,data::MaterialType> *const)(v2 + 2936),
        (const char (*)[25])byte_1A62D3A0,
        (data::MaterialType *)(v2 + 832));
      std::allocator<std::pair<std::string const,data::MaterialType>>::allocator((std::allocator<std::pair<const std::string,data::MaterialType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::MaterialType>::unordered_map(
        &data::enumStrToVal(char const*,data::MaterialType &)::m,
        (std::initializer_list<std::pair<const std::string,data::MaterialType> >)__PAIR128__(46LL, v2 + 1136),
        0LL,
        (const std::unordered_map<std::string,data::MaterialType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::MaterialType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::MaterialType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::MaterialType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::MaterialType>::~unordered_map,
        &data::enumStrToVal(char const*,data::MaterialType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::MaterialType>>::~allocator((std::allocator<std::pair<const std::string,data::MaterialType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::MaterialType> *)(v2 + 2976);
            i != (std::pair<const std::string,data::MaterialType> *)(v2 + 1136);
            std::pair<std::string const,data::MaterialType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 1136, 1840LL);
      *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 1008) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v7 = *(const char **)(v2 + 912);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1008),
      v7,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 848, v7);
    *(std::unordered_map<std::string,data::MaterialType>::iterator *)(v2 + 848) = std::unordered_map<std::string,data::MaterialType>::find(
                                                                                    &data::enumStrToVal(char const*,data::MaterialType &)::m,
                                                                                    (const std::unordered_map<std::string,data::MaterialType>::key_type *)(v2 + 1008));
    std::string::~string((void *)(v2 + 1008));
    *(_DWORD *)(((v2 + 1008) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 880, v2 + 1008);
    *(std::unordered_map<std::string,data::MaterialType>::iterator *)(v2 + 880) = std::unordered_map<std::string,data::MaterialType>::end(&data::enumStrToVal(char const*,data::MaterialType &)::m);
    v8 = (char *)(v2 + 880);
    v9 = std::__detail::operator==<std::pair<std::string const,data::MaterialType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialType>,true> *)(v2 + 848),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialType>,true> *)(v2 + 880));
    *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 1072) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1072) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1103) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 1103) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1072, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1072),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        1599);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 1072),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 912));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1072));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::MaterialType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::MaterialType>,false,true> *const)(v2 + 848));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 944) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 975) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 975) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 944, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 944),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      1542);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 944),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 944));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF817C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 388) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 3104LL, v17);
  }
  return v14;
};

// Line 1608: range 000000000FA4098B-000000000FA409A1
const char *__cdecl data::getDescription(data::MaterialType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 1613: range 000000000FA409A2-000000000FA40B57
bool __cdecl data::isValidMaterialType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::MaterialType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::MaterialType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:1614 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidMaterialType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getMaterialTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::MaterialType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::MaterialType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getMaterialTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::MaterialType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::MaterialType,std::pair<std::string,std::string>>::find(
                                                                                                     v6,
                                                                                                     (const std::map<data::MaterialType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1619: range 000000000FA40B58-000000000FA40CB9
bool __cdecl data::isValidMaterialTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::MaterialType> *v5; // rcx
  const std::unordered_map<std::string,data::MaterialType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidMaterialTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getMaterialTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::MaterialType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::MaterialType>::end(v5);
  v6 = data::getMaterialTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::MaterialType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::MaterialType>::find(
                                                                                       v6,
                                                                                       name);
  result = std::__detail::operator!=<std::pair<std::string const,data::MaterialType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1624: range 000000000FA40CBA-000000000FA4276B
const std::unordered_map<std::string,data::MaterialType> *__cdecl data::getMaterialTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::MaterialType> *i; // r14
  char v6[2896]; // [rsp+10h] [rbp-B50h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_6(2848LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "51 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 "
                        "<unknown> 384 4 9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unkno"
                        "wn> 464 4 9 <unknown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 54"
                        "4 4 9 <unknown> 560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 "
                        "<unknown> 640 4 9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unkno"
                        "wn> 720 4 9 <unknown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 80"
                        "0 4 9 <unknown> 816 4 9 <unknown> 832 1880 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getMaterialTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862804] = -218103808;
  v3[536862805] = -202116109;
  v3[536862806] = -202116109;
  v3[536862807] = -202116109;
  v3[536862808] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getMaterialTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getMaterialTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[14],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 832),
      (const char (*)[14])"MATERIAL_NONE",
      (data::MaterialType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "MATERIAL_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[14],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 872),
      (const char (*)[14])"MATERIAL_FOOD",
      (data::MaterialType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "MATERIAL_FOOD");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[15],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 912),
      (const char (*)[15])"MATERIAL_QUEST",
      (data::MaterialType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "MATERIAL_QUEST");
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[18],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 952),
      (const char (*)[18])"MATERIAL_EXCHANGE",
      (data::MaterialType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "MATERIAL_EXCHANGE");
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[17],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 992),
      (const char (*)[17])"MATERIAL_CONSUME",
      (data::MaterialType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "MATERIAL_CONSUME");
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1032),
      (const char (*)[19])"MATERIAL_EXP_FRUIT",
      (data::MaterialType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "MATERIAL_EXP_FRUIT");
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1072),
      (const char (*)[16])"MATERIAL_AVATAR",
      (data::MaterialType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "MATERIAL_AVATAR");
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1112),
      (const char (*)[19])"MATERIAL_ADSORBATE",
      (data::MaterialType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "MATERIAL_ADSORBATE");
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[17],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1152),
      (const char (*)[17])"MATERIAL_CRICKET",
      (data::MaterialType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "MATERIAL_CRICKET");
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[22],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1192),
      (const char (*)[22])"MATERIAL_ELEM_CRYSTAL",
      (data::MaterialType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "MATERIAL_ELEM_CRYSTAL");
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[26],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1232),
      (const char (*)[26])"MATERIAL_WEAPON_EXP_STONE",
      (data::MaterialType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "MATERIAL_WEAPON_EXP_STONE");
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[15],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1272),
      (const char (*)[15])"MATERIAL_CHEST",
      (data::MaterialType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "MATERIAL_CHEST");
    *(_DWORD *)(v1 + 272) = 13;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[28],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1312),
      (const char (*)[28])"MATERIAL_RELIQUARY_MATERIAL",
      (data::MaterialType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "MATERIAL_RELIQUARY_MATERIAL");
    *(_DWORD *)(v1 + 288) = 14;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[25],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1352),
      (const char (*)[25])"MATERIAL_AVATAR_MATERIAL",
      (data::MaterialType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "MATERIAL_AVATAR_MATERIAL");
    *(_DWORD *)(v1 + 304) = 15;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[23],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1392),
      (const char (*)[23])"MATERIAL_NOTICE_ADD_HP",
      (data::MaterialType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "MATERIAL_NOTICE_ADD_HP");
    *(_DWORD *)(v1 + 320) = 16;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[18],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1432),
      (const char (*)[18])"MATERIAL_SEA_LAMP",
      (data::MaterialType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "MATERIAL_SEA_LAMP");
    *(_DWORD *)(v1 + 336) = 17;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[26],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1472),
      (const char (*)[26])"MATERIAL_SELECTABLE_CHEST",
      (data::MaterialType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "MATERIAL_SELECTABLE_CHEST");
    *(_DWORD *)(v1 + 352) = 18;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[18],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1512),
      (const char (*)[18])"MATERIAL_FLYCLOAK",
      (data::MaterialType *)(v1 + 352));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, "MATERIAL_FLYCLOAK");
    *(_DWORD *)(v1 + 368) = 19;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[18],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1552),
      (const char (*)[18])"MATERIAL_NAMECARD",
      (data::MaterialType *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, "MATERIAL_NAMECARD");
    *(_DWORD *)(v1 + 384) = 20;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1592),
      (const char (*)[16])"MATERIAL_TALENT",
      (data::MaterialType *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, "MATERIAL_TALENT");
    *(_DWORD *)(v1 + 400) = 21;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[16],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1632),
      (const char (*)[16])"MATERIAL_WIDGET",
      (data::MaterialType *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, "MATERIAL_WIDGET");
    *(_DWORD *)(v1 + 416) = 22;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[25],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1672),
      (const char (*)[25])"MATERIAL_CHEST_BATCH_USE",
      (data::MaterialType *)(v1 + 416));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, "MATERIAL_CHEST_BATCH_USE");
    *(_DWORD *)(v1 + 432) = 23;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[24],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1712),
      (const char (*)[24])"MATERIAL_FAKE_ABSORBATE",
      (data::MaterialType *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, "MATERIAL_FAKE_ABSORBATE");
    *(_DWORD *)(v1 + 448) = 24;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[27],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1752),
      (const char (*)[27])"MATERIAL_CONSUME_BATCH_USE",
      (data::MaterialType *)(v1 + 448));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, "MATERIAL_CONSUME_BATCH_USE");
    *(_DWORD *)(v1 + 464) = 25;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[14],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1792),
      (const char (*)[14])"MATERIAL_WOOD",
      (data::MaterialType *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, "MATERIAL_WOOD");
    *(_DWORD *)(v1 + 480) = 27;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[27],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1832),
      (const char (*)[27])"MATERIAL_FURNITURE_FORMULA",
      (data::MaterialType *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, "MATERIAL_FURNITURE_FORMULA");
    *(_DWORD *)(v1 + 496) = 28;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[30],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1872),
      (const char (*)[30])"MATERIAL_CHANNELLER_SLAB_BUFF",
      (data::MaterialType *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, "MATERIAL_CHANNELLER_SLAB_BUFF");
    *(_DWORD *)(v1 + 512) = 29;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[33],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1912),
      (const char (*)[33])"MATERIAL_FURNITURE_SUITE_FORMULA",
      (data::MaterialType *)(v1 + 512));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, "MATERIAL_FURNITURE_SUITE_FORMULA");
    *(_DWORD *)(v1 + 528) = 30;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[17],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1952),
      (const char (*)[17])"MATERIAL_COSTUME",
      (data::MaterialType *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, "MATERIAL_COSTUME");
    *(_DWORD *)(v1 + 544) = 31;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 1992),
      (const char (*)[19])"MATERIAL_HOME_SEED",
      (data::MaterialType *)(v1 + 544));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, "MATERIAL_HOME_SEED");
    *(_DWORD *)(v1 + 560) = 32;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2032),
      (const char (*)[19])"MATERIAL_FISH_BAIT",
      (data::MaterialType *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, "MATERIAL_FISH_BAIT");
    *(_DWORD *)(v1 + 576) = 33;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[18],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2072),
      (const char (*)[18])"MATERIAL_FISH_ROD",
      (data::MaterialType *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, "MATERIAL_FISH_ROD");
    *(_DWORD *)(v1 + 592) = 34;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2112),
      (const char (*)[19])"MATERIAL_SUMO_BUFF",
      (data::MaterialType *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, "MATERIAL_SUMO_BUFF");
    *(_DWORD *)(v1 + 608) = 35;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2152),
      (const char (*)[19])"MATERIAL_FIREWORKS",
      (data::MaterialType *)(v1 + 608));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, "MATERIAL_FIREWORKS");
    *(_DWORD *)(v1 + 624) = 36;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[13],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2192),
      (const char (*)[13])"MATERIAL_BGM",
      (data::MaterialType *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, "MATERIAL_BGM");
    *(_DWORD *)(v1 + 640) = 37;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[20],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2232),
      (const char (*)[20])"MATERIAL_SPICE_FOOD",
      (data::MaterialType *)(v1 + 640));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, "MATERIAL_SPICE_FOOD");
    *(_DWORD *)(v1 + 656) = 38;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[24],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2272),
      (const char (*)[24])"MATERIAL_ACTIVITY_ROBOT",
      (data::MaterialType *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, "MATERIAL_ACTIVITY_ROBOT");
    *(_DWORD *)(v1 + 672) = 39;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[23],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2312),
      (const char (*)[23])"MATERIAL_ACTIVITY_GEAR",
      (data::MaterialType *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, "MATERIAL_ACTIVITY_GEAR");
    *(_DWORD *)(v1 + 688) = 40;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[25],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2352),
      (const char (*)[25])"MATERIAL_ACTIVITY_JIGSAW",
      (data::MaterialType *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, "MATERIAL_ACTIVITY_JIGSAW");
    *(_DWORD *)(v1 + 704) = 41;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[17],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2392),
      (const char (*)[17])"MATERIAL_ARANARA",
      (data::MaterialType *)(v1 + 704));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, "MATERIAL_ARANARA");
    *(_DWORD *)(v1 + 720) = 46;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[24],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2432),
      (const char (*)[24])"MATERIAL_DESHRET_MANUAL",
      (data::MaterialType *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, "MATERIAL_DESHRET_MANUAL");
    *(_DWORD *)(v1 + 736) = 42;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[18],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2472),
      (const char (*)[18])"MATERIAL_GCG_CARD",
      (data::MaterialType *)(v1 + 736));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, "MATERIAL_GCG_CARD");
    *(_DWORD *)(v1 + 752) = 43;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[23],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2512),
      (const char (*)[23])"MATERIAL_GCG_CARD_FACE",
      (data::MaterialType *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, "MATERIAL_GCG_CARD_FACE");
    *(_DWORD *)(v1 + 768) = 44;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[23],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2552),
      (const char (*)[23])"MATERIAL_GCG_CARD_BACK",
      (data::MaterialType *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, "MATERIAL_GCG_CARD_BACK");
    *(_DWORD *)(v1 + 784) = 45;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[19],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2592),
      (const char (*)[19])"MATERIAL_GCG_FIELD",
      (data::MaterialType *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, "MATERIAL_GCG_FIELD");
    *(_DWORD *)(v1 + 800) = 47;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[21],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2632),
      (const char (*)[21])"MATERIAL_RENAME_ITEM",
      (data::MaterialType *)(v1 + 800));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, "MATERIAL_RENAME_ITEM");
    *(_DWORD *)(v1 + 816) = 48;
    std::pair<std::string const,data::MaterialType>::pair<char const(&)[27],data::MaterialType,true>(
      (std::pair<const std::string,data::MaterialType> *const)(v1 + 2672),
      (const char (*)[27])"MATERIAL_GCG_EXCHANGE_ITEM",
      (data::MaterialType *)(v1 + 816));
    std::allocator<std::pair<std::string const,data::MaterialType>>::allocator((std::allocator<std::pair<const std::string,data::MaterialType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::MaterialType>::unordered_map(
      &data::getMaterialTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::MaterialType> >)__PAIR128__(47LL, v1 + 832),
      0LL,
      (const std::unordered_map<std::string,data::MaterialType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::MaterialType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::MaterialType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getMaterialTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::MaterialType>::~unordered_map,
      &data::getMaterialTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::MaterialType>>::~allocator((std::allocator<std::pair<const std::string,data::MaterialType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::MaterialType> *)(v1 + 2712);
          i != (std::pair<const std::string,data::MaterialType> *)(v1 + 832);
          std::pair<std::string const,data::MaterialType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF815C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 356) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_6(v1, 2848LL, v6);
  }
  return &data::getMaterialTypeNameMap[abi:cxx11](void)::m;
};

// Line 1679: range 000000000FA4276C-000000000FA4601F
const std::map<data::MaterialType,std::pair<std::string,std::string >> *__cdecl data::getMaterialTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::MaterialType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  _DWORD *v18; // rax
  _DWORD *v19; // rax
  _DWORD *v20; // rax
  _DWORD *v21; // rax
  _DWORD *v22; // rax
  _DWORD *v23; // rax
  _DWORD *v24; // rax
  _DWORD *v25; // rax
  _DWORD *v26; // rax
  _DWORD *v27; // rax
  _DWORD *v28; // rax
  _DWORD *v29; // rax
  _DWORD *v30; // rax
  _DWORD *v31; // rax
  _DWORD *v32; // rax
  _DWORD *v33; // rax
  _DWORD *v34; // rax
  _DWORD *v35; // rax
  _DWORD *v36; // rax
  _DWORD *v37; // rax
  _DWORD *v38; // rax
  _DWORD *v39; // rax
  _DWORD *v40; // rax
  _DWORD *v41; // rax
  _DWORD *v42; // rax
  _DWORD *v43; // rax
  _DWORD *v44; // rax
  _DWORD *v45; // rax
  _DWORD *v46; // rax
  _DWORD *v47; // rax
  _DWORD *v48; // rax
  _DWORD *v49; // rax
  _DWORD *v50; // rax
  char v52[8912]; // [rsp+10h] [rbp-22D0h] BYREF

  v1 = (unsigned __int64)v52;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_8(8864LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "97 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 9"
                        " <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unkn"
                        "own> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> 5"
                        "60 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 9"
                        " <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unkn"
                        "own> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> 8"
                        "16 4 9 <unknown> 832 64 9 <unknown> 928 64 9 <unknown> 1024 64 9 <unknown> 1120 64 9 <unknown> 1"
                        "216 64 9 <unknown> 1312 64 9 <unknown> 1408 64 9 <unknown> 1504 64 9 <unknown> 1600 64 9 <unknow"
                        "n> 1696 64 9 <unknown> 1792 64 9 <unknown> 1888 64 9 <unknown> 1984 64 9 <unknown> 2080 64 9 <un"
                        "known> 2176 64 9 <unknown> 2272 64 9 <unknown> 2368 64 9 <unknown> 2464 64 9 <unknown> 2560 64 9"
                        " <unknown> 2656 64 9 <unknown> 2752 64 9 <unknown> 2848 64 9 <unknown> 2944 64 9 <unknown> 3040 "
                        "64 9 <unknown> 3136 64 9 <unknown> 3232 64 9 <unknown> 3328 64 9 <unknown> 3424 64 9 <unknown> 3"
                        "520 64 9 <unknown> 3616 64 9 <unknown> 3712 64 9 <unknown> 3808 64 9 <unknown> 3904 64 9 <unknow"
                        "n> 4000 64 9 <unknown> 4096 64 9 <unknown> 4192 64 9 <unknown> 4288 64 9 <unknown> 4384 64 9 <un"
                        "known> 4480 64 9 <unknown> 4576 64 9 <unknown> 4672 64 9 <unknown> 4768 64 9 <unknown> 4864 64 9"
                        " <unknown> 4960 64 9 <unknown> 5056 64 9 <unknown> 5152 64 9 <unknown> 5248 64 9 <unknown> 5344 "
                        "3384 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getMaterialTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862748] = -218959118;
  v3[536862751] = -218959118;
  v3[536862754] = -218959118;
  v3[536862757] = -218959118;
  v3[536862760] = -218959118;
  v3[536862763] = -218959118;
  v3[536862766] = -218959118;
  v3[536862769] = -218959118;
  v3[536862772] = -218959118;
  v3[536862775] = -218959118;
  v3[536862778] = -218959118;
  v3[536862781] = -218959118;
  v3[536862784] = -218959118;
  v3[536862787] = -218959118;
  v3[536862790] = -218959118;
  v3[536862793] = -218959118;
  v3[536862796] = -218959118;
  v3[536862799] = -218959118;
  v3[536862802] = -218959118;
  v3[536862805] = -218959118;
  v3[536862808] = -218959118;
  v3[536862811] = -218959118;
  v3[536862814] = -218959118;
  v3[536862817] = -218959118;
  v3[536862820] = -218959118;
  v3[536862823] = -218959118;
  v3[536862826] = -218959118;
  v3[536862829] = -218959118;
  v3[536862832] = -218959118;
  v3[536862835] = -218959118;
  v3[536862838] = -218959118;
  v3[536862841] = -218959118;
  v3[536862844] = -218959118;
  v3[536862847] = -218959118;
  v3[536862850] = -218959118;
  v3[536862853] = -218959118;
  v3[536862856] = -218959118;
  v3[536862859] = -218959118;
  v3[536862862] = -218959118;
  v3[536862865] = -218959118;
  v3[536862868] = -218959118;
  v3[536862871] = -218959118;
  v3[536862874] = -218959118;
  v3[536862877] = -218959118;
  v3[536862880] = -218959118;
  v3[536862883] = -218959118;
  v3[536862886] = -218959118;
  v3[536862992] = -218103808;
  v3[536862993] = -202116109;
  v3[536862994] = -202116109;
  v3[536862995] = -202116109;
  v3[536862996] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getMaterialTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getMaterialTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 832),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[14])"MATERIAL_NONE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5344),
      (data::MaterialType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 928),
      (const char (*)[7])byte_1A62C860,
      (const char (*)[14])"MATERIAL_FOOD");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5416),
      (data::MaterialType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 928));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1024),
      (const char (*)[13])byte_1A62C8A0,
      (const char (*)[15])"MATERIAL_QUEST");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5488),
      (data::MaterialType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 1024));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1120),
      (const char (*)[13])byte_1A62C8E0,
      (const char (*)[18])"MATERIAL_EXCHANGE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5560),
      (data::MaterialType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 1120));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1216),
      (const char (*)[10])byte_1A62C920,
      (const char (*)[17])"MATERIAL_CONSUME");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5632),
      (data::MaterialType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 1216));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1312),
      (const char (*)[13])byte_1A62C960,
      (const char (*)[19])"MATERIAL_EXP_FRUIT");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5704),
      (data::MaterialType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 1312));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1408),
      (const char (*)[10])byte_1A62C9A0,
      (const char (*)[16])"MATERIAL_AVATAR");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5776),
      (data::MaterialType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 1408));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1504),
      (const char (*)[10])byte_1A62C9E0,
      (const char (*)[19])"MATERIAL_ADSORBATE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5848),
      (data::MaterialType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 1504));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1600),
      (const char (*)[7])byte_1A62CA20,
      (const char (*)[17])"MATERIAL_CRICKET");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5920),
      (data::MaterialType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 1600));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1696),
      (const char (*)[13])byte_1A62CA60,
      (const char (*)[22])"MATERIAL_ELEM_CRYSTAL");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 5992),
      (data::MaterialType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 1696));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1792),
      (const char (*)[16])byte_1A62CAA0,
      (const char (*)[26])"MATERIAL_WEAPON_EXP_STONE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6064),
      (data::MaterialType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 1792));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1888),
      (const char (*)[7])byte_1A62CAE0,
      (const char (*)[15])"MATERIAL_CHEST");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6136),
      (data::MaterialType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 1888));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 13;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1984),
      (const char (*)[22])byte_1A62CB20,
      (const char (*)[28])"MATERIAL_RELIQUARY_MATERIAL");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6208),
      (data::MaterialType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 1984));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 14;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2080),
      (const char (*)[19])byte_1A62CB60,
      (const char (*)[25])"MATERIAL_AVATAR_MATERIAL");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6280),
      (data::MaterialType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 2080));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, v1 + 288);
    *(_DWORD *)(v1 + 304) = 15;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2176),
      (const char (*)[19])byte_1A62CBA0,
      (const char (*)[23])"MATERIAL_NOTICE_ADD_HP");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6352),
      (data::MaterialType *)(v1 + 304),
      (const std::pair<std::string,std::string > *)(v1 + 2176));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, v1 + 304);
    *(_DWORD *)(v1 + 320) = 16;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2272),
      (const char (*)[16])byte_1A62CBE0,
      (const char (*)[18])"MATERIAL_SEA_LAMP");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6424),
      (data::MaterialType *)(v1 + 320),
      (const std::pair<std::string,std::string > *)(v1 + 2272));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, v1 + 320);
    *(_DWORD *)(v1 + 336) = 17;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2368),
      (const char (*)[13])byte_1A62CC20,
      (const char (*)[26])"MATERIAL_SELECTABLE_CHEST");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6496),
      (data::MaterialType *)(v1 + 336),
      (const std::pair<std::string,std::string > *)(v1 + 2368));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, v1 + 336);
    *(_DWORD *)(v1 + 352) = 18;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2464),
      (const char (*)[10])byte_1A62CC60,
      (const char (*)[18])"MATERIAL_FLYCLOAK");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6568),
      (data::MaterialType *)(v1 + 352),
      (const std::pair<std::string,std::string > *)(v1 + 2464));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, v1 + 352);
    *(_DWORD *)(v1 + 368) = 19;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2560),
      (const char (*)[7])byte_1A62CCA0,
      (const char (*)[18])"MATERIAL_NAMECARD");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6640),
      (data::MaterialType *)(v1 + 368),
      (const std::pair<std::string,std::string > *)(v1 + 2560));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, v1 + 368);
    *(_DWORD *)(v1 + 384) = 20;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2656),
      (const char (*)[7])byte_1A62CCE0,
      (const char (*)[16])"MATERIAL_TALENT");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6712),
      (data::MaterialType *)(v1 + 384),
      (const std::pair<std::string,std::string > *)(v1 + 2656));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, v1 + 384);
    *(_DWORD *)(v1 + 400) = 21;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2752),
      (const char (*)[16])byte_1A62CD20,
      (const char (*)[16])"MATERIAL_WIDGET");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6784),
      (data::MaterialType *)(v1 + 400),
      (const std::pair<std::string,std::string > *)(v1 + 2752));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, v1 + 400);
    *(_DWORD *)(v1 + 416) = 22;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2848),
      (const char (*)[22])byte_1A62CD60,
      (const char (*)[25])"MATERIAL_CHEST_BATCH_USE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6856),
      (data::MaterialType *)(v1 + 416),
      (const std::pair<std::string,std::string > *)(v1 + 2848));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, v1 + 416);
    *(_DWORD *)(v1 + 432) = 23;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2944),
      (const char (*)[13])byte_1A62CDA0,
      (const char (*)[24])"MATERIAL_FAKE_ABSORBATE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 6928),
      (data::MaterialType *)(v1 + 432),
      (const std::pair<std::string,std::string > *)(v1 + 2944));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, v1 + 432);
    *(_DWORD *)(v1 + 448) = 24;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3040),
      (const char (*)[25])byte_1A62CDE0,
      (const char (*)[27])"MATERIAL_CONSUME_BATCH_USE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7000),
      (data::MaterialType *)(v1 + 448),
      (const std::pair<std::string,std::string > *)(v1 + 3040));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, v1 + 448);
    *(_DWORD *)(v1 + 464) = 25;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3136),
      (const char (*)[7])byte_1A62CE20,
      (const char (*)[14])"MATERIAL_WOOD");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7072),
      (data::MaterialType *)(v1 + 464),
      (const std::pair<std::string,std::string > *)(v1 + 3136));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, v1 + 464);
    *(_DWORD *)(v1 + 480) = 27;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3232),
      (const char (*)[13])byte_1A62CE60,
      (const char (*)[27])"MATERIAL_FURNITURE_FORMULA");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7144),
      (data::MaterialType *)(v1 + 480),
      (const std::pair<std::string,std::string > *)(v1 + 3232));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, v1 + 480);
    *(_DWORD *)(v1 + 496) = 28;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3328),
      (const char (*)[17])byte_1A62CEA0,
      (const char (*)[30])"MATERIAL_CHANNELLER_SLAB_BUFF");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7216),
      (data::MaterialType *)(v1 + 496),
      (const std::pair<std::string,std::string > *)(v1 + 3328));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, v1 + 496);
    *(_DWORD *)(v1 + 512) = 29;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3424),
      (const char (*)[19])byte_1A62CEE0,
      (const char (*)[33])"MATERIAL_FURNITURE_SUITE_FORMULA");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7288),
      (data::MaterialType *)(v1 + 512),
      (const std::pair<std::string,std::string > *)(v1 + 3424));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, v1 + 512);
    *(_DWORD *)(v1 + 528) = 30;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3520),
      (const char (*)[10])byte_1A62CF20,
      (const char (*)[17])"MATERIAL_COSTUME");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7360),
      (data::MaterialType *)(v1 + 528),
      (const std::pair<std::string,std::string > *)(v1 + 3520));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, v1 + 528);
    *(_DWORD *)(v1 + 544) = 31;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3616),
      (const char (*)[13])byte_1A62CF60,
      (const char (*)[19])"MATERIAL_HOME_SEED");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7432),
      (data::MaterialType *)(v1 + 544),
      (const std::pair<std::string,std::string > *)(v1 + 3616));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, v1 + 544);
    *(_DWORD *)(v1 + 560) = 32;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3712),
      (const char (*)[7])byte_1A62CFA0,
      (const char (*)[19])"MATERIAL_FISH_BAIT");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7504),
      (data::MaterialType *)(v1 + 560),
      (const std::pair<std::string,std::string > *)(v1 + 3712));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, v1 + 560);
    *(_DWORD *)(v1 + 576) = 33;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3808),
      (const char (*)[7])byte_1A62CFE0,
      (const char (*)[18])"MATERIAL_FISH_ROD");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7576),
      (data::MaterialType *)(v1 + 576),
      (const std::pair<std::string,std::string > *)(v1 + 3808));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, v1 + 576);
    *(_DWORD *)(v1 + 592) = 34;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3904),
      (const char (*)[17])byte_1A62D020,
      (const char (*)[19])"MATERIAL_SUMO_BUFF");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7648),
      (data::MaterialType *)(v1 + 592),
      (const std::pair<std::string,std::string > *)(v1 + 3904));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, v1 + 592);
    *(_DWORD *)(v1 + 608) = 35;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4000),
      (const char (*)[7])byte_1A62D060,
      (const char (*)[19])"MATERIAL_FIREWORKS");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7720),
      (data::MaterialType *)(v1 + 608),
      (const std::pair<std::string,std::string > *)(v1 + 4000));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, v1 + 608);
    *(_DWORD *)(v1 + 624) = 36;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4096),
      (const char (*)[4])off_1A62D0A0,
      (const char (*)[13])"MATERIAL_BGM");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7792),
      (data::MaterialType *)(v1 + 624),
      (const std::pair<std::string,std::string > *)(v1 + 4096));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, v1 + 624);
    *(_DWORD *)(v1 + 640) = 37;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4192),
      (const char (*)[25])byte_1A62D0E0,
      (const char (*)[20])"MATERIAL_SPICE_FOOD");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7864),
      (data::MaterialType *)(v1 + 640),
      (const std::pair<std::string,std::string > *)(v1 + 4192));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, v1 + 640);
    *(_DWORD *)(v1 + 656) = 38;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4288),
      (const char (*)[16])byte_1A62D120,
      (const char (*)[24])"MATERIAL_ACTIVITY_ROBOT");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 7936),
      (data::MaterialType *)(v1 + 656),
      (const std::pair<std::string,std::string > *)(v1 + 4288));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, v1 + 656);
    *(_DWORD *)(v1 + 672) = 39;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4384),
      (const char (*)[13])byte_1A62D160,
      (const char (*)[23])"MATERIAL_ACTIVITY_GEAR");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8008),
      (data::MaterialType *)(v1 + 672),
      (const std::pair<std::string,std::string > *)(v1 + 4384));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, v1 + 672);
    *(_DWORD *)(v1 + 688) = 40;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4480),
      (const char (*)[13])byte_1A62D1A0,
      (const char (*)[25])"MATERIAL_ACTIVITY_JIGSAW");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8080),
      (data::MaterialType *)(v1 + 688),
      (const std::pair<std::string,std::string > *)(v1 + 4480));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, v1 + 688);
    *(_DWORD *)(v1 + 704) = 41;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4576),
      (const char (*)[16])byte_1A62D1E0,
      (const char (*)[17])"MATERIAL_ARANARA");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8152),
      (data::MaterialType *)(v1 + 704),
      (const std::pair<std::string,std::string > *)(v1 + 4576));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, v1 + 704);
    *(_DWORD *)(v1 + 720) = 46;
    std::pair<std::string,std::string>::pair<char const(&)[15],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4672),
      (const char (*)[15])byte_1A62D220,
      (const char (*)[24])"MATERIAL_DESHRET_MANUAL");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8224),
      (data::MaterialType *)(v1 + 720),
      (const std::pair<std::string,std::string > *)(v1 + 4672));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, v1 + 720);
    *(_DWORD *)(v1 + 736) = 42;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4768),
      (const char (*)[19])byte_1A62D260,
      (const char (*)[18])"MATERIAL_GCG_CARD");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8296),
      (data::MaterialType *)(v1 + 736),
      (const std::pair<std::string,std::string > *)(v1 + 4768));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, v1 + 736);
    *(_DWORD *)(v1 + 752) = 43;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4864),
      (const char (*)[19])byte_1A62D2A0,
      (const char (*)[23])"MATERIAL_GCG_CARD_FACE");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8368),
      (data::MaterialType *)(v1 + 752),
      (const std::pair<std::string,std::string > *)(v1 + 4864));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, v1 + 752);
    *(_DWORD *)(v1 + 768) = 44;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4960),
      (const char (*)[19])byte_1A62D2E0,
      (const char (*)[23])"MATERIAL_GCG_CARD_BACK");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8440),
      (data::MaterialType *)(v1 + 768),
      (const std::pair<std::string,std::string > *)(v1 + 4960));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, v1 + 768);
    *(_DWORD *)(v1 + 784) = 45;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5056),
      (const char (*)[19])byte_1A62D320,
      (const char (*)[19])"MATERIAL_GCG_FIELD");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8512),
      (data::MaterialType *)(v1 + 784),
      (const std::pair<std::string,std::string > *)(v1 + 5056));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, v1 + 784);
    *(_DWORD *)(v1 + 800) = 47;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5152),
      (const char (*)[19])byte_1A62D360,
      (const char (*)[21])"MATERIAL_RENAME_ITEM");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8584),
      (data::MaterialType *)(v1 + 800),
      (const std::pair<std::string,std::string > *)(v1 + 5152));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, v1 + 800);
    *(_DWORD *)(v1 + 816) = 48;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5248),
      (const char (*)[25])byte_1A62D3A0,
      (const char (*)[27])"MATERIAL_GCG_EXCHANGE_ITEM");
    std::pair<data::MaterialType const,std::pair<std::string,std::string>>::pair<data::MaterialType,true>(
      (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *const)(v1 + 8656),
      (data::MaterialType *)(v1 + 816),
      (const std::pair<std::string,std::string > *)(v1 + 5248));
    std::allocator<std::pair<data::MaterialType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::MaterialType,std::pair<std::string,std::string>>::map(
      &data::getMaterialTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::MaterialType,std::pair<std::string,std::string > > >)__PAIR128__(47LL, v1 + 5344),
      (const std::less<data::MaterialType> *)(v1 + 48),
      (const std::map<data::MaterialType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getMaterialTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::MaterialType,std::pair<std::string,std::string>>::~map,
      &data::getMaterialTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::MaterialType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::MaterialType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *)(v1 + 8728);
          i != (std::pair<const data::MaterialType,std::pair<std::string,std::string > > *)(v1 + 5344);
          std::pair<data::MaterialType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 5344, 3384LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5248));
    v5 = (_DWORD *)(((v1 + 5248) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5152));
    v6 = (_DWORD *)(((v1 + 5152) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5056));
    v7 = (_DWORD *)(((v1 + 5056) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4960));
    v8 = (_DWORD *)(((v1 + 4960) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4864));
    v9 = (_DWORD *)(((v1 + 4864) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4768));
    v10 = (_DWORD *)(((v1 + 4768) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4672));
    v11 = (_DWORD *)(((v1 + 4672) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4576));
    v12 = (_DWORD *)(((v1 + 4576) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4480));
    v13 = (_DWORD *)(((v1 + 4480) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4384));
    v14 = (_DWORD *)(((v1 + 4384) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4288));
    v15 = (_DWORD *)(((v1 + 4288) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4192));
    v16 = (_DWORD *)(((v1 + 4192) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4096));
    v17 = (_DWORD *)(((v1 + 4096) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4000));
    v18 = (_DWORD *)(((v1 + 4000) >> 3) + 2147450880);
    *v18 = -117901064;
    v18[1] = -117901064;
    *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3904));
    v19 = (_DWORD *)(((v1 + 3904) >> 3) + 2147450880);
    *v19 = -117901064;
    v19[1] = -117901064;
    *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3808));
    v20 = (_DWORD *)(((v1 + 3808) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3712));
    v21 = (_DWORD *)(((v1 + 3712) >> 3) + 2147450880);
    *v21 = -117901064;
    v21[1] = -117901064;
    *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3616));
    v22 = (_DWORD *)(((v1 + 3616) >> 3) + 2147450880);
    *v22 = -117901064;
    v22[1] = -117901064;
    *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3520));
    v23 = (_DWORD *)(((v1 + 3520) >> 3) + 2147450880);
    *v23 = -117901064;
    v23[1] = -117901064;
    *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3424));
    v24 = (_DWORD *)(((v1 + 3424) >> 3) + 2147450880);
    *v24 = -117901064;
    v24[1] = -117901064;
    *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3328));
    v25 = (_DWORD *)(((v1 + 3328) >> 3) + 2147450880);
    *v25 = -117901064;
    v25[1] = -117901064;
    *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3232));
    v26 = (_DWORD *)(((v1 + 3232) >> 3) + 2147450880);
    *v26 = -117901064;
    v26[1] = -117901064;
    *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3136));
    v27 = (_DWORD *)(((v1 + 3136) >> 3) + 2147450880);
    *v27 = -117901064;
    v27[1] = -117901064;
    *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3040));
    v28 = (_DWORD *)(((v1 + 3040) >> 3) + 2147450880);
    *v28 = -117901064;
    v28[1] = -117901064;
    *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2944));
    v29 = (_DWORD *)(((v1 + 2944) >> 3) + 2147450880);
    *v29 = -117901064;
    v29[1] = -117901064;
    *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2848));
    v30 = (_DWORD *)(((v1 + 2848) >> 3) + 2147450880);
    *v30 = -117901064;
    v30[1] = -117901064;
    *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2752));
    v31 = (_DWORD *)(((v1 + 2752) >> 3) + 2147450880);
    *v31 = -117901064;
    v31[1] = -117901064;
    *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2656));
    v32 = (_DWORD *)(((v1 + 2656) >> 3) + 2147450880);
    *v32 = -117901064;
    v32[1] = -117901064;
    *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2560));
    v33 = (_DWORD *)(((v1 + 2560) >> 3) + 2147450880);
    *v33 = -117901064;
    v33[1] = -117901064;
    *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2464));
    v34 = (_DWORD *)(((v1 + 2464) >> 3) + 2147450880);
    *v34 = -117901064;
    v34[1] = -117901064;
    *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2368));
    v35 = (_DWORD *)(((v1 + 2368) >> 3) + 2147450880);
    *v35 = -117901064;
    v35[1] = -117901064;
    *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2272));
    v36 = (_DWORD *)(((v1 + 2272) >> 3) + 2147450880);
    *v36 = -117901064;
    v36[1] = -117901064;
    *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2176));
    v37 = (_DWORD *)(((v1 + 2176) >> 3) + 2147450880);
    *v37 = -117901064;
    v37[1] = -117901064;
    *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2080));
    v38 = (_DWORD *)(((v1 + 2080) >> 3) + 2147450880);
    *v38 = -117901064;
    v38[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1984));
    v39 = (_DWORD *)(((v1 + 1984) >> 3) + 2147450880);
    *v39 = -117901064;
    v39[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1888));
    v40 = (_DWORD *)(((v1 + 1888) >> 3) + 2147450880);
    *v40 = -117901064;
    v40[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1792));
    v41 = (_DWORD *)(((v1 + 1792) >> 3) + 2147450880);
    *v41 = -117901064;
    v41[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1696));
    v42 = (_DWORD *)(((v1 + 1696) >> 3) + 2147450880);
    *v42 = -117901064;
    v42[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1600));
    v43 = (_DWORD *)(((v1 + 1600) >> 3) + 2147450880);
    *v43 = -117901064;
    v43[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1504));
    v44 = (_DWORD *)(((v1 + 1504) >> 3) + 2147450880);
    *v44 = -117901064;
    v44[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1408));
    v45 = (_DWORD *)(((v1 + 1408) >> 3) + 2147450880);
    *v45 = -117901064;
    v45[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1312));
    v46 = (_DWORD *)(((v1 + 1312) >> 3) + 2147450880);
    *v46 = -117901064;
    v46[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1216));
    v47 = (_DWORD *)(((v1 + 1216) >> 3) + 2147450880);
    *v47 = -117901064;
    v47[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1120));
    v48 = (_DWORD *)(((v1 + 1120) >> 3) + 2147450880);
    *v48 = -117901064;
    v48[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1024));
    v49 = (_DWORD *)(((v1 + 1024) >> 3) + 2147450880);
    *v49 = -117901064;
    v49[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 928));
    v50 = (_DWORD *)(((v1 + 928) >> 3) + 2147450880);
    *v50 = -117901064;
    v50[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 832));
  }
  if ( v52 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF844C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 1108) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_8(v1, 8864LL, v52);
  }
  return &data::getMaterialTypeEnumMap[abi:cxx11](void)::m;
};

// Line 1734: range 000000000FA46020-000000000FA46393
const char *__fastcall data::enumValToStr(data::GrowCurveType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::GrowCurveType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:1733 64 8 9 iter:1736 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getGrowCurveTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::GrowCurveType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::GrowCurveType,std::pair<std::string,std::string>>::find(map, (const std::map<data::GrowCurveType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::GrowCurveType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::GrowCurveType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      1739);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_GrowCurveType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1746: range 000000000FA46394-000000000FA4694C
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::GrowCurveType>,false,true>::pointer v10; // rax
  data::GrowCurveType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::GrowCurveType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:1755 96 8 9 <unknown> 128 8 6 s:1745 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getGrowCurveTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::GrowCurveType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::GrowCurveType>::find(
                                                                                          m,
                                                                                          (const std::unordered_map<std::string,data::GrowCurveType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::GrowCurveType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::GrowCurveType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::GrowCurveType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GrowCurveType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GrowCurveType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        1758);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::GrowCurveType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::GrowCurveType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      1749);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 1767: range 000000000FA4694D-000000000FA4945A
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::GrowCurveType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::GrowCurveType>,false,true>::pointer v11; // rax
  data::GrowCurveType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[3920]; // [rsp+20h] [rbp-F50h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(3872LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "71 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 "
                        "<unknown> 384 4 9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unkno"
                        "wn> 464 4 9 <unknown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 54"
                        "4 4 9 <unknown> 560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 "
                        "<unknown> 640 4 9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unkno"
                        "wn> 720 4 9 <unknown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 80"
                        "0 4 9 <unknown> 816 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9 "
                        "<unknown> 896 4 9 <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unkno"
                        "wn> 976 4 9 <unknown> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 4 9 <unknown>"
                        " 1056 8 7 it:1838 1088 8 9 <unknown> 1120 8 6 s:1766 1152 32 9 <unknown> 1216 32 9 <unknown> 128"
                        "0 32 9 <unknown> 1344 2400 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -234556924;
  v4[536862735] = -234556924;
  v4[536862736] = -234556924;
  v4[536862737] = -234556924;
  v4[536862738] = -234556924;
  v4[536862739] = -234556924;
  v4[536862740] = -234556924;
  v4[536862741] = -234556924;
  v4[536862742] = -234556924;
  v4[536862743] = -234556924;
  v4[536862744] = -234556924;
  v4[536862745] = -234556924;
  v4[536862746] = -234556924;
  v4[536862747] = -234556924;
  v4[536862748] = -234556924;
  v4[536862749] = -234556924;
  v4[536862750] = -234556924;
  v4[536862751] = -234556924;
  v4[536862752] = -234556924;
  v4[536862753] = -218959360;
  v4[536862754] = -218959360;
  v4[536862755] = -218959360;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862837] = -202116109;
  v4[536862838] = -202116109;
  v4[536862839] = -202116109;
  v4[536862840] = -202116109;
  *(_QWORD *)(v2 + 1120) = s;
  if ( *(_QWORD *)(v2 + 1120) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::GrowCurveType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::GrowCurveType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[7],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1344),
        (const char (*)[7])byte_1A62F120,
        (data::GrowCurveType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, byte_1A62F120);
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[7],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1384),
        (const char (*)[7])byte_1A62F160,
        (data::GrowCurveType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A62F160);
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[7],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1424),
        (const char (*)[7])byte_1A62F1A0,
        (data::GrowCurveType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A62F1A0);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[7],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1464),
        (const char (*)[7])byte_1A62F1E0,
        (data::GrowCurveType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A62F1E0);
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[7],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1504),
        (const char (*)[7])byte_1A62F220,
        (data::GrowCurveType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A62F220);
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[8],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1544),
        (const char (*)[8])byte_1A62F260,
        (data::GrowCurveType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A62F260);
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[8],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1584),
        (const char (*)[8])byte_1A62F2A0,
        (data::GrowCurveType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A62F2A0);
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[8],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1624),
        (const char (*)[8])byte_1A62F2E0,
        (data::GrowCurveType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A62F2E0);
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[13],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1664),
        (const char (*)[13])byte_1A625640,
        (data::GrowCurveType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A625640);
      *(_DWORD *)(v2 + 240) = 10;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[7],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1704),
        (const char (*)[7])byte_1A62F320,
        (data::GrowCurveType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A62F320);
      *(_DWORD *)(v2 + 256) = 11;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[13],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1744),
        (const char (*)[13])byte_1A62F360,
        (data::GrowCurveType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A62F360);
      *(_DWORD *)(v2 + 272) = 12;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[7],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1784),
        (const char (*)[7])byte_1A62F3A0,
        (data::GrowCurveType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, byte_1A62F3A0);
      *(_DWORD *)(v2 + 288) = 13;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[13],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1824),
        (const char (*)[13])byte_1A62F3E0,
        (data::GrowCurveType *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, byte_1A62F3E0);
      *(_DWORD *)(v2 + 304) = 14;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[16],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1864),
        (const char (*)[16])byte_1A62F420,
        (data::GrowCurveType *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, byte_1A62F420);
      *(_DWORD *)(v2 + 320) = 15;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[13],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1904),
        (const char (*)[13])byte_1A6257C0,
        (data::GrowCurveType *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, byte_1A6257C0);
      *(_DWORD *)(v2 + 336) = 16;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1944),
        (const char (*)[22])byte_1A62F460,
        (data::GrowCurveType *)(v2 + 336));
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 352, byte_1A62F460);
      *(_DWORD *)(v2 + 352) = 17;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[16],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 1984),
        (const char (*)[16])byte_1A62F4A0,
        (data::GrowCurveType *)(v2 + 352));
      if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 368, byte_1A62F4A0);
      *(_DWORD *)(v2 + 368) = 18;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[16],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2024),
        (const char (*)[16])byte_1A62F4E0,
        (data::GrowCurveType *)(v2 + 368));
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 384, byte_1A62F4E0);
      *(_DWORD *)(v2 + 384) = 19;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[16],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2064),
        (const char (*)[16])byte_1A62F520,
        (data::GrowCurveType *)(v2 + 384));
      if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 400, byte_1A62F520);
      *(_DWORD *)(v2 + 400) = 20;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[13],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2104),
        (const char (*)[13])byte_1A62F560,
        (data::GrowCurveType *)(v2 + 400));
      if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 416, byte_1A62F560);
      *(_DWORD *)(v2 + 416) = 21;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2144),
        (const char (*)[11])byte_1A62F5A0,
        (data::GrowCurveType *)(v2 + 416));
      if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 432, byte_1A62F5A0);
      *(_DWORD *)(v2 + 432) = 22;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2184),
        (const char (*)[11])byte_1A62F5E0,
        (data::GrowCurveType *)(v2 + 432));
      if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 448, byte_1A62F5E0);
      *(_DWORD *)(v2 + 448) = 23;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[8],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2224),
        (const char (*)[8])byte_1A62F620,
        (data::GrowCurveType *)(v2 + 448));
      if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 464, byte_1A62F620);
      *(_DWORD *)(v2 + 464) = 24;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[8],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2264),
        (const char (*)[8])byte_1A62F660,
        (data::GrowCurveType *)(v2 + 464));
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 480, byte_1A62F660);
      *(_DWORD *)(v2 + 480) = 31;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2304),
        (const char (*)[11])byte_1A62F6A0,
        (data::GrowCurveType *)(v2 + 480));
      if ( *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 496, byte_1A62F6A0);
      *(_DWORD *)(v2 + 496) = 32;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2344),
        (const char (*)[11])byte_1A62F6E0,
        (data::GrowCurveType *)(v2 + 496));
      if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 512, byte_1A62F6E0);
      *(_DWORD *)(v2 + 512) = 33;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2384),
        (const char (*)[11])byte_1A62F720,
        (data::GrowCurveType *)(v2 + 512));
      if ( *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 528, byte_1A62F720);
      *(_DWORD *)(v2 + 528) = 34;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2424),
        (const char (*)[11])byte_1A62F760,
        (data::GrowCurveType *)(v2 + 528));
      if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 544, byte_1A62F760);
      *(_DWORD *)(v2 + 544) = 41;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2464),
        (const char (*)[11])byte_1A62F7A0,
        (data::GrowCurveType *)(v2 + 544));
      if ( *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 560, byte_1A62F7A0);
      *(_DWORD *)(v2 + 560) = 42;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[11],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2504),
        (const char (*)[11])byte_1A62F7E0,
        (data::GrowCurveType *)(v2 + 560));
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 576, byte_1A62F7E0);
      *(_DWORD *)(v2 + 576) = 1101;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2544),
        (const char (*)[10])byte_1A62F820,
        (data::GrowCurveType *)(v2 + 576));
      if ( *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 592, byte_1A62F820);
      *(_DWORD *)(v2 + 592) = 1102;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2584),
        (const char (*)[10])byte_1A62F860,
        (data::GrowCurveType *)(v2 + 592));
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 608, byte_1A62F860);
      *(_DWORD *)(v2 + 608) = 1103;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2624),
        (const char (*)[10])byte_1A62F8A0,
        (data::GrowCurveType *)(v2 + 608));
      if ( *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 624, byte_1A62F8A0);
      *(_DWORD *)(v2 + 624) = 1104;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2664),
        (const char (*)[10])byte_1A62F8E0,
        (data::GrowCurveType *)(v2 + 624));
      if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 640, byte_1A62F8E0);
      *(_DWORD *)(v2 + 640) = 1105;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2704),
        (const char (*)[10])byte_1A62F920,
        (data::GrowCurveType *)(v2 + 640));
      if ( *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 656, byte_1A62F920);
      *(_DWORD *)(v2 + 656) = 1201;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2744),
        (const char (*)[10])byte_1A62F960,
        (data::GrowCurveType *)(v2 + 656));
      if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 672, byte_1A62F960);
      *(_DWORD *)(v2 + 672) = 1202;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2784),
        (const char (*)[10])byte_1A62F9A0,
        (data::GrowCurveType *)(v2 + 672));
      if ( *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 688, byte_1A62F9A0);
      *(_DWORD *)(v2 + 688) = 1203;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2824),
        (const char (*)[10])byte_1A62F9E0,
        (data::GrowCurveType *)(v2 + 688));
      if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 704, byte_1A62F9E0);
      *(_DWORD *)(v2 + 704) = 1204;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2864),
        (const char (*)[10])byte_1A62FA20,
        (data::GrowCurveType *)(v2 + 704));
      if ( *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 720, byte_1A62FA20);
      *(_DWORD *)(v2 + 720) = 1205;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2904),
        (const char (*)[10])byte_1A62FA60,
        (data::GrowCurveType *)(v2 + 720));
      if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 736, byte_1A62FA60);
      *(_DWORD *)(v2 + 736) = 1301;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2944),
        (const char (*)[10])byte_1A62FAA0,
        (data::GrowCurveType *)(v2 + 736));
      if ( *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 752, byte_1A62FAA0);
      *(_DWORD *)(v2 + 752) = 1302;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 2984),
        (const char (*)[10])byte_1A62FAE0,
        (data::GrowCurveType *)(v2 + 752));
      if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 768, byte_1A62FAE0);
      *(_DWORD *)(v2 + 768) = 1303;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3024),
        (const char (*)[10])byte_1A62FB20,
        (data::GrowCurveType *)(v2 + 768));
      if ( *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 784, byte_1A62FB20);
      *(_DWORD *)(v2 + 784) = 1304;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3064),
        (const char (*)[10])byte_1A62FB60,
        (data::GrowCurveType *)(v2 + 784));
      if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 800, byte_1A62FB60);
      *(_DWORD *)(v2 + 800) = 1305;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3104),
        (const char (*)[10])byte_1A62FBA0,
        (data::GrowCurveType *)(v2 + 800));
      if ( *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 816, byte_1A62FBA0);
      *(_DWORD *)(v2 + 816) = 2101;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3144),
        (const char (*)[10])byte_1A62FBE0,
        (data::GrowCurveType *)(v2 + 816));
      if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 832, byte_1A62FBE0);
      *(_DWORD *)(v2 + 832) = 2102;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3184),
        (const char (*)[10])byte_1A62FC20,
        (data::GrowCurveType *)(v2 + 832));
      if ( *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 848, byte_1A62FC20);
      *(_DWORD *)(v2 + 848) = 2103;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3224),
        (const char (*)[10])byte_1A62FC60,
        (data::GrowCurveType *)(v2 + 848));
      if ( *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 864, byte_1A62FC60);
      *(_DWORD *)(v2 + 864) = 2104;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3264),
        (const char (*)[10])byte_1A62FCA0,
        (data::GrowCurveType *)(v2 + 864));
      if ( *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 880, byte_1A62FCA0);
      *(_DWORD *)(v2 + 880) = 2105;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3304),
        (const char (*)[10])byte_1A62FCE0,
        (data::GrowCurveType *)(v2 + 880));
      if ( *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 896, byte_1A62FCE0);
      *(_DWORD *)(v2 + 896) = 2201;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3344),
        (const char (*)[10])byte_1A62FD20,
        (data::GrowCurveType *)(v2 + 896));
      if ( *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 912, byte_1A62FD20);
      *(_DWORD *)(v2 + 912) = 2202;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3384),
        (const char (*)[10])byte_1A62FD60,
        (data::GrowCurveType *)(v2 + 912));
      if ( *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 928, byte_1A62FD60);
      *(_DWORD *)(v2 + 928) = 2203;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3424),
        (const char (*)[10])byte_1A62FDA0,
        (data::GrowCurveType *)(v2 + 928));
      if ( *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 944, byte_1A62FDA0);
      *(_DWORD *)(v2 + 944) = 2204;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3464),
        (const char (*)[10])byte_1A62FDE0,
        (data::GrowCurveType *)(v2 + 944));
      if ( *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 960, byte_1A62FDE0);
      *(_DWORD *)(v2 + 960) = 2205;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3504),
        (const char (*)[10])byte_1A62FE20,
        (data::GrowCurveType *)(v2 + 960));
      if ( *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 976, byte_1A62FE20);
      *(_DWORD *)(v2 + 976) = 2301;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3544),
        (const char (*)[10])byte_1A62FE60,
        (data::GrowCurveType *)(v2 + 976));
      if ( *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 992, byte_1A62FE60);
      *(_DWORD *)(v2 + 992) = 2302;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3584),
        (const char (*)[10])byte_1A62FEA0,
        (data::GrowCurveType *)(v2 + 992));
      if ( *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1008, byte_1A62FEA0);
      *(_DWORD *)(v2 + 1008) = 2303;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3624),
        (const char (*)[10])byte_1A62FEE0,
        (data::GrowCurveType *)(v2 + 1008));
      if ( *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1024, byte_1A62FEE0);
      *(_DWORD *)(v2 + 1024) = 2304;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3664),
        (const char (*)[10])byte_1A62FF20,
        (data::GrowCurveType *)(v2 + 1024));
      if ( *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1040, byte_1A62FF20);
      *(_DWORD *)(v2 + 1040) = 2305;
      std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[10],data::GrowCurveType,true>(
        (std::pair<const std::string,data::GrowCurveType> *const)(v2 + 3704),
        (const char (*)[10])byte_1A62FF60,
        (data::GrowCurveType *)(v2 + 1040));
      std::allocator<std::pair<std::string const,data::GrowCurveType>>::allocator((std::allocator<std::pair<const std::string,data::GrowCurveType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::GrowCurveType>::unordered_map(
        &data::enumStrToVal(char const*,data::GrowCurveType &)::m,
        (std::initializer_list<std::pair<const std::string,data::GrowCurveType> >)__PAIR128__(60LL, v2 + 1344),
        0LL,
        (const std::unordered_map<std::string,data::GrowCurveType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::GrowCurveType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::GrowCurveType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::GrowCurveType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::GrowCurveType>::~unordered_map,
        &data::enumStrToVal(char const*,data::GrowCurveType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::GrowCurveType>>::~allocator((std::allocator<std::pair<const std::string,data::GrowCurveType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::GrowCurveType> *)(v2 + 3744);
            i != (std::pair<const std::string,data::GrowCurveType> *)(v2 + 1344);
            std::pair<std::string const,data::GrowCurveType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 1344, 2400LL);
      *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v7 = *(const char **)(v2 + 1120);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1216),
      v7,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 1056, v7);
    *(std::unordered_map<std::string,data::GrowCurveType>::iterator *)(v2 + 1056) = std::unordered_map<std::string,data::GrowCurveType>::find(
                                                                                      &data::enumStrToVal(char const*,data::GrowCurveType &)::m,
                                                                                      (const std::unordered_map<std::string,data::GrowCurveType>::key_type *)(v2 + 1216));
    std::string::~string((void *)(v2 + 1216));
    *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 1088, v2 + 1216);
    *(std::unordered_map<std::string,data::GrowCurveType>::iterator *)(v2 + 1088) = std::unordered_map<std::string,data::GrowCurveType>::end(&data::enumStrToVal(char const*,data::GrowCurveType &)::m);
    v8 = (char *)(v2 + 1088);
    v9 = std::__detail::operator==<std::pair<std::string const,data::GrowCurveType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GrowCurveType>,true> *)(v2 + 1056),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GrowCurveType>,true> *)(v2 + 1088));
    *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 1280, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 1280),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        1841);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 1280),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 1120));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::GrowCurveType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::GrowCurveType>,false,true> *const)(v2 + 1056));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 1152, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 1152),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      1770);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 1152),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8088) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 144) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF809C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A4) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81DC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862763) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147451044 - (((_DWORD)v4 + 2147451052) & 0xFFFFFFF8) + 320) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 3872LL, v17);
  }
  return v14;
};

// Line 1850: range 000000000FA4945B-000000000FA49471
const char *__cdecl data::getDescription(data::GrowCurveType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 1855: range 000000000FA49472-000000000FA49627
bool __cdecl data::isValidGrowCurveType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::GrowCurveType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::GrowCurveType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:1856 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidGrowCurveType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getGrowCurveTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::GrowCurveType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::GrowCurveType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getGrowCurveTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::GrowCurveType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::GrowCurveType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::GrowCurveType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 1861: range 000000000FA49628-000000000FA49789
bool __cdecl data::isValidGrowCurveTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::GrowCurveType> *v5; // rcx
  const std::unordered_map<std::string,data::GrowCurveType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidGrowCurveTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getGrowCurveTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::GrowCurveType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::GrowCurveType>::end(v5);
  v6 = data::getGrowCurveTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::GrowCurveType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::GrowCurveType>::find(
                                                                                        v6,
                                                                                        name);
  result = std::__detail::operator!=<std::pair<std::string const,data::GrowCurveType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GrowCurveType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GrowCurveType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 1866: range 000000000FA4978A-000000000FA4B947
const std::unordered_map<std::string,data::GrowCurveType> *__cdecl data::getGrowCurveTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::GrowCurveType> *i; // r14
  char v6[3696]; // [rsp+10h] [rbp-E70h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_6(3648LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "65 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 9"
                        " <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unkn"
                        "own> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> 5"
                        "60 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 9"
                        " <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unkn"
                        "own> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> 8"
                        "16 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9 <unknown> 896 4 9"
                        " <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unknown> 976 4 9 <unkn"
                        "own> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 4 9 <unknown> 1056 4 9 <unknow"
                        "n> 1072 2440 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getGrowCurveTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = 61956;
  v3[536862829] = -218103808;
  v3[536862830] = -202116109;
  v3[536862831] = -202116109;
  v3[536862832] = -202116109;
  v3[536862833] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getGrowCurveTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getGrowCurveTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[16],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1072),
      (const char (*)[16])"GROW_CURVE_NONE",
      (data::GrowCurveType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "GROW_CURVE_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[14],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1112),
      (const char (*)[14])"GROW_CURVE_HP",
      (data::GrowCurveType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "GROW_CURVE_HP");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[18],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1152),
      (const char (*)[18])"GROW_CURVE_ATTACK",
      (data::GrowCurveType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "GROW_CURVE_ATTACK");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[19],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1192),
      (const char (*)[19])"GROW_CURVE_STAMINA",
      (data::GrowCurveType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "GROW_CURVE_STAMINA");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[18],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1232),
      (const char (*)[18])"GROW_CURVE_STRIKE",
      (data::GrowCurveType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "GROW_CURVE_STRIKE");
    *(_DWORD *)(v1 + 176) = 5;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[23],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1272),
      (const char (*)[23])"GROW_CURVE_ANTI_STRIKE",
      (data::GrowCurveType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "GROW_CURVE_ANTI_STRIKE");
    *(_DWORD *)(v1 + 192) = 6;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1312),
      (const char (*)[24])"GROW_CURVE_ANTI_STRIKE1",
      (data::GrowCurveType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "GROW_CURVE_ANTI_STRIKE1");
    *(_DWORD *)(v1 + 208) = 7;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1352),
      (const char (*)[24])"GROW_CURVE_ANTI_STRIKE2",
      (data::GrowCurveType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "GROW_CURVE_ANTI_STRIKE2");
    *(_DWORD *)(v1 + 224) = 8;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1392),
      (const char (*)[24])"GROW_CURVE_ANTI_STRIKE3",
      (data::GrowCurveType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "GROW_CURVE_ANTI_STRIKE3");
    *(_DWORD *)(v1 + 240) = 9;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[23],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1432),
      (const char (*)[23])"GROW_CURVE_STRIKE_HURT",
      (data::GrowCurveType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "GROW_CURVE_STRIKE_HURT");
    *(_DWORD *)(v1 + 256) = 10;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[19],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1472),
      (const char (*)[19])"GROW_CURVE_ELEMENT",
      (data::GrowCurveType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "GROW_CURVE_ELEMENT");
    *(_DWORD *)(v1 + 272) = 11;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[20],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1512),
      (const char (*)[20])"GROW_CURVE_KILL_EXP",
      (data::GrowCurveType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "GROW_CURVE_KILL_EXP");
    *(_DWORD *)(v1 + 288) = 12;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[19],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1552),
      (const char (*)[19])"GROW_CURVE_DEFENSE",
      (data::GrowCurveType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "GROW_CURVE_DEFENSE");
    *(_DWORD *)(v1 + 304) = 13;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[23],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1592),
      (const char (*)[23])"GROW_CURVE_ATTACK_BOMB",
      (data::GrowCurveType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "GROW_CURVE_ATTACK_BOMB");
    *(_DWORD *)(v1 + 320) = 14;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[28],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1632),
      (const char (*)[28])"GROW_CURVE_HP_LITTLEMONSTER",
      (data::GrowCurveType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "GROW_CURVE_HP_LITTLEMONSTER");
    *(_DWORD *)(v1 + 336) = 15;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[27],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1672),
      (const char (*)[27])"GROW_CURVE_ELEMENT_MASTERY",
      (data::GrowCurveType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "GROW_CURVE_ELEMENT_MASTERY");
    *(_DWORD *)(v1 + 352) = 16;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[23],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1712),
      (const char (*)[23])"GROW_CURVE_PROGRESSION",
      (data::GrowCurveType *)(v1 + 352));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, "GROW_CURVE_PROGRESSION");
    *(_DWORD *)(v1 + 368) = 17;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[21],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1752),
      (const char (*)[21])"GROW_CURVE_DEFENDING",
      (data::GrowCurveType *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, "GROW_CURVE_DEFENDING");
    *(_DWORD *)(v1 + 384) = 18;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[15],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1792),
      (const char (*)[15])"GROW_CURVE_MHP",
      (data::GrowCurveType *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, "GROW_CURVE_MHP");
    *(_DWORD *)(v1 + 400) = 19;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[16],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1832),
      (const char (*)[16])"GROW_CURVE_MATK",
      (data::GrowCurveType *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, "GROW_CURVE_MATK");
    *(_DWORD *)(v1 + 416) = 20;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[20],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1872),
      (const char (*)[20])"GROW_CURVE_TOWERATK",
      (data::GrowCurveType *)(v1 + 416));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, "GROW_CURVE_TOWERATK");
    *(_DWORD *)(v1 + 432) = 21;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[17],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1912),
      (const char (*)[17])"GROW_CURVE_HP_S5",
      (data::GrowCurveType *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, "GROW_CURVE_HP_S5");
    *(_DWORD *)(v1 + 448) = 22;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[17],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1952),
      (const char (*)[17])"GROW_CURVE_HP_S4",
      (data::GrowCurveType *)(v1 + 448));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, "GROW_CURVE_HP_S4");
    *(_DWORD *)(v1 + 464) = 23;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[16],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 1992),
      (const char (*)[16])"GROW_CURVE_HP_2",
      (data::GrowCurveType *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, "GROW_CURVE_HP_2");
    *(_DWORD *)(v1 + 480) = 24;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[20],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2032),
      (const char (*)[20])"GROW_CURVE_ATTACK_2",
      (data::GrowCurveType *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, "GROW_CURVE_ATTACK_2");
    *(_DWORD *)(v1 + 496) = 31;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[21],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2072),
      (const char (*)[21])"GROW_CURVE_ATTACK_S5",
      (data::GrowCurveType *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, "GROW_CURVE_ATTACK_S5");
    *(_DWORD *)(v1 + 512) = 32;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[21],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2112),
      (const char (*)[21])"GROW_CURVE_ATTACK_S4",
      (data::GrowCurveType *)(v1 + 512));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, "GROW_CURVE_ATTACK_S4");
    *(_DWORD *)(v1 + 528) = 33;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[21],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2152),
      (const char (*)[21])"GROW_CURVE_ATTACK_S3",
      (data::GrowCurveType *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, "GROW_CURVE_ATTACK_S3");
    *(_DWORD *)(v1 + 544) = 34;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[21],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2192),
      (const char (*)[21])"GROW_CURVE_STRIKE_S5",
      (data::GrowCurveType *)(v1 + 544));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, "GROW_CURVE_STRIKE_S5");
    *(_DWORD *)(v1 + 560) = 41;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2232),
      (const char (*)[22])"GROW_CURVE_DEFENSE_S5",
      (data::GrowCurveType *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, "GROW_CURVE_DEFENSE_S5");
    *(_DWORD *)(v1 + 576) = 42;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2272),
      (const char (*)[22])"GROW_CURVE_DEFENSE_S4",
      (data::GrowCurveType *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, "GROW_CURVE_DEFENSE_S4");
    *(_DWORD *)(v1 + 592) = 1101;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2312),
      (const char (*)[22])"GROW_CURVE_ATTACK_101",
      (data::GrowCurveType *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, "GROW_CURVE_ATTACK_101");
    *(_DWORD *)(v1 + 608) = 1102;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2352),
      (const char (*)[22])"GROW_CURVE_ATTACK_102",
      (data::GrowCurveType *)(v1 + 608));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, "GROW_CURVE_ATTACK_102");
    *(_DWORD *)(v1 + 624) = 1103;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2392),
      (const char (*)[22])"GROW_CURVE_ATTACK_103",
      (data::GrowCurveType *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, "GROW_CURVE_ATTACK_103");
    *(_DWORD *)(v1 + 640) = 1104;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2432),
      (const char (*)[22])"GROW_CURVE_ATTACK_104",
      (data::GrowCurveType *)(v1 + 640));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, "GROW_CURVE_ATTACK_104");
    *(_DWORD *)(v1 + 656) = 1105;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2472),
      (const char (*)[22])"GROW_CURVE_ATTACK_105",
      (data::GrowCurveType *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, "GROW_CURVE_ATTACK_105");
    *(_DWORD *)(v1 + 672) = 1201;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2512),
      (const char (*)[22])"GROW_CURVE_ATTACK_201",
      (data::GrowCurveType *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, "GROW_CURVE_ATTACK_201");
    *(_DWORD *)(v1 + 688) = 1202;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2552),
      (const char (*)[22])"GROW_CURVE_ATTACK_202",
      (data::GrowCurveType *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, "GROW_CURVE_ATTACK_202");
    *(_DWORD *)(v1 + 704) = 1203;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2592),
      (const char (*)[22])"GROW_CURVE_ATTACK_203",
      (data::GrowCurveType *)(v1 + 704));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, "GROW_CURVE_ATTACK_203");
    *(_DWORD *)(v1 + 720) = 1204;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2632),
      (const char (*)[22])"GROW_CURVE_ATTACK_204",
      (data::GrowCurveType *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, "GROW_CURVE_ATTACK_204");
    *(_DWORD *)(v1 + 736) = 1205;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2672),
      (const char (*)[22])"GROW_CURVE_ATTACK_205",
      (data::GrowCurveType *)(v1 + 736));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, "GROW_CURVE_ATTACK_205");
    *(_DWORD *)(v1 + 752) = 1301;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2712),
      (const char (*)[22])"GROW_CURVE_ATTACK_301",
      (data::GrowCurveType *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, "GROW_CURVE_ATTACK_301");
    *(_DWORD *)(v1 + 768) = 1302;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2752),
      (const char (*)[22])"GROW_CURVE_ATTACK_302",
      (data::GrowCurveType *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, "GROW_CURVE_ATTACK_302");
    *(_DWORD *)(v1 + 784) = 1303;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2792),
      (const char (*)[22])"GROW_CURVE_ATTACK_303",
      (data::GrowCurveType *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, "GROW_CURVE_ATTACK_303");
    *(_DWORD *)(v1 + 800) = 1304;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2832),
      (const char (*)[22])"GROW_CURVE_ATTACK_304",
      (data::GrowCurveType *)(v1 + 800));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, "GROW_CURVE_ATTACK_304");
    *(_DWORD *)(v1 + 816) = 1305;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[22],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2872),
      (const char (*)[22])"GROW_CURVE_ATTACK_305",
      (data::GrowCurveType *)(v1 + 816));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, "GROW_CURVE_ATTACK_305");
    *(_DWORD *)(v1 + 832) = 2101;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2912),
      (const char (*)[24])"GROW_CURVE_CRITICAL_101",
      (data::GrowCurveType *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, "GROW_CURVE_CRITICAL_101");
    *(_DWORD *)(v1 + 848) = 2102;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2952),
      (const char (*)[24])"GROW_CURVE_CRITICAL_102",
      (data::GrowCurveType *)(v1 + 848));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, "GROW_CURVE_CRITICAL_102");
    *(_DWORD *)(v1 + 864) = 2103;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 2992),
      (const char (*)[24])"GROW_CURVE_CRITICAL_103",
      (data::GrowCurveType *)(v1 + 864));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, "GROW_CURVE_CRITICAL_103");
    *(_DWORD *)(v1 + 880) = 2104;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3032),
      (const char (*)[24])"GROW_CURVE_CRITICAL_104",
      (data::GrowCurveType *)(v1 + 880));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, "GROW_CURVE_CRITICAL_104");
    *(_DWORD *)(v1 + 896) = 2105;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3072),
      (const char (*)[24])"GROW_CURVE_CRITICAL_105",
      (data::GrowCurveType *)(v1 + 896));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, "GROW_CURVE_CRITICAL_105");
    *(_DWORD *)(v1 + 912) = 2201;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3112),
      (const char (*)[24])"GROW_CURVE_CRITICAL_201",
      (data::GrowCurveType *)(v1 + 912));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, "GROW_CURVE_CRITICAL_201");
    *(_DWORD *)(v1 + 928) = 2202;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3152),
      (const char (*)[24])"GROW_CURVE_CRITICAL_202",
      (data::GrowCurveType *)(v1 + 928));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, "GROW_CURVE_CRITICAL_202");
    *(_DWORD *)(v1 + 944) = 2203;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3192),
      (const char (*)[24])"GROW_CURVE_CRITICAL_203",
      (data::GrowCurveType *)(v1 + 944));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, "GROW_CURVE_CRITICAL_203");
    *(_DWORD *)(v1 + 960) = 2204;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3232),
      (const char (*)[24])"GROW_CURVE_CRITICAL_204",
      (data::GrowCurveType *)(v1 + 960));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, "GROW_CURVE_CRITICAL_204");
    *(_DWORD *)(v1 + 976) = 2205;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3272),
      (const char (*)[24])"GROW_CURVE_CRITICAL_205",
      (data::GrowCurveType *)(v1 + 976));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, "GROW_CURVE_CRITICAL_205");
    *(_DWORD *)(v1 + 992) = 2301;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3312),
      (const char (*)[24])"GROW_CURVE_CRITICAL_301",
      (data::GrowCurveType *)(v1 + 992));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, "GROW_CURVE_CRITICAL_301");
    *(_DWORD *)(v1 + 1008) = 2302;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3352),
      (const char (*)[24])"GROW_CURVE_CRITICAL_302",
      (data::GrowCurveType *)(v1 + 1008));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, "GROW_CURVE_CRITICAL_302");
    *(_DWORD *)(v1 + 1024) = 2303;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3392),
      (const char (*)[24])"GROW_CURVE_CRITICAL_303",
      (data::GrowCurveType *)(v1 + 1024));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, "GROW_CURVE_CRITICAL_303");
    *(_DWORD *)(v1 + 1040) = 2304;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3432),
      (const char (*)[24])"GROW_CURVE_CRITICAL_304",
      (data::GrowCurveType *)(v1 + 1040));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, "GROW_CURVE_CRITICAL_304");
    *(_DWORD *)(v1 + 1056) = 2305;
    std::pair<std::string const,data::GrowCurveType>::pair<char const(&)[24],data::GrowCurveType,true>(
      (std::pair<const std::string,data::GrowCurveType> *const)(v1 + 3472),
      (const char (*)[24])"GROW_CURVE_CRITICAL_305",
      (data::GrowCurveType *)(v1 + 1056));
    std::allocator<std::pair<std::string const,data::GrowCurveType>>::allocator((std::allocator<std::pair<const std::string,data::GrowCurveType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::GrowCurveType>::unordered_map(
      &data::getGrowCurveTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::GrowCurveType> >)__PAIR128__(61LL, v1 + 1072),
      0LL,
      (const std::unordered_map<std::string,data::GrowCurveType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::GrowCurveType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::GrowCurveType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getGrowCurveTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::GrowCurveType>::~unordered_map,
      &data::getGrowCurveTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::GrowCurveType>>::~allocator((std::allocator<std::pair<const std::string,data::GrowCurveType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::GrowCurveType> *)(v1 + 3512);
          i != (std::pair<const std::string,data::GrowCurveType> *)(v1 + 1072);
          std::pair<std::string const,data::GrowCurveType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF81C0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 456) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_6(v1, 3648LL, v6);
  }
  return &data::getGrowCurveTypeNameMap[abi:cxx11](void)::m;
};

// Line 1935: range 000000000FA4B948-000000000FA5050D
const std::map<data::GrowCurveType,std::pair<std::string,std::string >> *__cdecl data::getGrowCurveTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  _DWORD *v18; // rax
  _DWORD *v19; // rax
  _DWORD *v20; // rax
  _DWORD *v21; // rax
  _DWORD *v22; // rax
  _DWORD *v23; // rax
  _DWORD *v24; // rax
  _DWORD *v25; // rax
  _DWORD *v26; // rax
  _DWORD *v27; // rax
  _DWORD *v28; // rax
  _DWORD *v29; // rax
  _DWORD *v30; // rax
  _DWORD *v31; // rax
  _DWORD *v32; // rax
  _DWORD *v33; // rax
  _DWORD *v34; // rax
  _DWORD *v35; // rax
  _DWORD *v36; // rax
  _DWORD *v37; // rax
  _DWORD *v38; // rax
  _DWORD *v39; // rax
  _DWORD *v40; // rax
  _DWORD *v41; // rax
  _DWORD *v42; // rax
  _DWORD *v43; // rax
  _DWORD *v44; // rax
  _DWORD *v45; // rax
  _DWORD *v46; // rax
  _DWORD *v47; // rax
  _DWORD *v48; // rax
  _DWORD *v49; // rax
  _DWORD *v50; // rax
  _DWORD *v51; // rax
  _DWORD *v52; // rax
  _DWORD *v53; // rax
  _DWORD *v54; // rax
  _DWORD *v55; // rax
  _DWORD *v56; // rax
  _DWORD *v57; // rax
  _DWORD *v58; // rax
  _DWORD *v59; // rax
  _DWORD *v60; // rax
  _DWORD *v61; // rax
  _DWORD *v62; // rax
  _DWORD *v63; // rax
  _DWORD *v64; // rax
  char v66[11600]; // [rsp+10h] [rbp-2D50h] BYREF

  v1 = (unsigned __int64)v66;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_8(11552LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "125 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9"
                        " <unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkn"
                        "own> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 2"
                        "88 4 9 <unknown> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9"
                        " <unknown> 384 4 9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unkn"
                        "own> 464 4 9 <unknown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 5"
                        "44 4 9 <unknown> 560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9"
                        " <unknown> 640 4 9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unkn"
                        "own> 720 4 9 <unknown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 8"
                        "00 4 9 <unknown> 816 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9"
                        " <unknown> 896 4 9 <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unkn"
                        "own> 976 4 9 <unknown> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 64 9 <unknow"
                        "n> 1136 64 9 <unknown> 1232 64 9 <unknown> 1328 64 9 <unknown> 1424 64 9 <unknown> 1520 64 9 <un"
                        "known> 1616 64 9 <unknown> 1712 64 9 <unknown> 1808 64 9 <unknown> 1904 64 9 <unknown> 2000 64 9"
                        " <unknown> 2096 64 9 <unknown> 2192 64 9 <unknown> 2288 64 9 <unknown> 2384 64 9 <unknown> 2480 "
                        "64 9 <unknown> 2576 64 9 <unknown> 2672 64 9 <unknown> 2768 64 9 <unknown> 2864 64 9 <unknown> 2"
                        "960 64 9 <unknown> 3056 64 9 <unknown> 3152 64 9 <unknown> 3248 64 9 <unknown> 3344 64 9 <unknow"
                        "n> 3440 64 9 <unknown> 3536 64 9 <unknown> 3632 64 9 <unknown> 3728 64 9 <unknown> 3824 64 9 <un"
                        "known> 3920 64 9 <unknown> 4016 64 9 <unknown> 4112 64 9 <unknown> 4208 64 9 <unknown> 4304 64 9"
                        " <unknown> 4400 64 9 <unknown> 4496 64 9 <unknown> 4592 64 9 <unknown> 4688 64 9 <unknown> 4784 "
                        "64 9 <unknown> 4880 64 9 <unknown> 4976 64 9 <unknown> 5072 64 9 <unknown> 5168 64 9 <unknown> 5"
                        "264 64 9 <unknown> 5360 64 9 <unknown> 5456 64 9 <unknown> 5552 64 9 <unknown> 5648 64 9 <unknow"
                        "n> 5744 64 9 <unknown> 5840 64 9 <unknown> 5936 64 9 <unknown> 6032 64 9 <unknown> 6128 64 9 <un"
                        "known> 6224 64 9 <unknown> 6320 64 9 <unknown> 6416 64 9 <unknown> 6512 64 9 <unknown> 6608 64 9"
                        " <unknown> 6704 64 9 <unknown> 6800 64 9 <unknown> 6896 4392 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getGrowCurveTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = 61956;
  v3[536862754] = -219021312;
  v3[536862755] = 62194;
  v3[536862757] = -219021312;
  v3[536862758] = 62194;
  v3[536862760] = -219021312;
  v3[536862761] = 62194;
  v3[536862763] = -219021312;
  v3[536862764] = 62194;
  v3[536862766] = -219021312;
  v3[536862767] = 62194;
  v3[536862769] = -219021312;
  v3[536862770] = 62194;
  v3[536862772] = -219021312;
  v3[536862773] = 62194;
  v3[536862775] = -219021312;
  v3[536862776] = 62194;
  v3[536862778] = -219021312;
  v3[536862779] = 62194;
  v3[536862781] = -219021312;
  v3[536862782] = 62194;
  v3[536862784] = -219021312;
  v3[536862785] = 62194;
  v3[536862787] = -219021312;
  v3[536862788] = 62194;
  v3[536862790] = -219021312;
  v3[536862791] = 62194;
  v3[536862793] = -219021312;
  v3[536862794] = 62194;
  v3[536862796] = -219021312;
  v3[536862797] = 62194;
  v3[536862799] = -219021312;
  v3[536862800] = 62194;
  v3[536862802] = -219021312;
  v3[536862803] = 62194;
  v3[536862805] = -219021312;
  v3[536862806] = 62194;
  v3[536862808] = -219021312;
  v3[536862809] = 62194;
  v3[536862811] = -219021312;
  v3[536862812] = 62194;
  v3[536862814] = -219021312;
  v3[536862815] = 62194;
  v3[536862817] = -219021312;
  v3[536862818] = 62194;
  v3[536862820] = -219021312;
  v3[536862821] = 62194;
  v3[536862823] = -219021312;
  v3[536862824] = 62194;
  v3[536862826] = -219021312;
  v3[536862827] = 62194;
  v3[536862829] = -219021312;
  v3[536862830] = 62194;
  v3[536862832] = -219021312;
  v3[536862833] = 62194;
  v3[536862835] = -219021312;
  v3[536862836] = 62194;
  v3[536862838] = -219021312;
  v3[536862839] = 62194;
  v3[536862841] = -219021312;
  v3[536862842] = 62194;
  v3[536862844] = -219021312;
  v3[536862845] = 62194;
  v3[536862847] = -219021312;
  v3[536862848] = 62194;
  v3[536862850] = -219021312;
  v3[536862851] = 62194;
  v3[536862853] = -219021312;
  v3[536862854] = 62194;
  v3[536862856] = -219021312;
  v3[536862857] = 62194;
  v3[536862859] = -219021312;
  v3[536862860] = 62194;
  v3[536862862] = -219021312;
  v3[536862863] = 62194;
  v3[536862865] = -219021312;
  v3[536862866] = 62194;
  v3[536862868] = -219021312;
  v3[536862869] = 62194;
  v3[536862871] = -219021312;
  v3[536862872] = 62194;
  v3[536862874] = -219021312;
  v3[536862875] = 62194;
  v3[536862877] = -219021312;
  v3[536862878] = 62194;
  v3[536862880] = -219021312;
  v3[536862881] = 62194;
  v3[536862883] = -219021312;
  v3[536862884] = 62194;
  v3[536862886] = -219021312;
  v3[536862887] = 62194;
  v3[536862889] = -219021312;
  v3[536862890] = 62194;
  v3[536862892] = -219021312;
  v3[536862893] = 62194;
  v3[536862895] = -219021312;
  v3[536862896] = 62194;
  v3[536862898] = -219021312;
  v3[536862899] = 62194;
  v3[536862901] = -219021312;
  v3[536862902] = 62194;
  v3[536862904] = -219021312;
  v3[536862905] = 62194;
  v3[536862907] = -219021312;
  v3[536862908] = 62194;
  v3[536862910] = -219021312;
  v3[536862911] = 62194;
  v3[536862913] = -219021312;
  v3[536862914] = 62194;
  v3[536862916] = -219021312;
  v3[536862917] = 62194;
  v3[536862919] = -219021312;
  v3[536862920] = 62194;
  v3[536862922] = -219021312;
  v3[536862923] = 62194;
  v3[536862925] = -219021312;
  v3[536862926] = 62194;
  v3[536862928] = -219021312;
  v3[536862929] = 62194;
  v3[536862931] = -219021312;
  v3[536862932] = 62194;
  v3[536862934] = -219021312;
  v3[536862935] = 62194;
  v3[536863072] = -218103808;
  v3[536863073] = -202116109;
  v3[536863074] = -202116109;
  v3[536863075] = -202116109;
  v3[536863076] = -202116109;
  v3[536863077] = -202116109;
  v3[536863078] = -202116109;
  v3[536863079] = -202116109;
  v3[536863080] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getGrowCurveTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getGrowCurveTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1040),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[16])"GROW_CURVE_NONE");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 6896),
      (data::GrowCurveType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 1040));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1136),
      (const char (*)[7])byte_1A62F120,
      (const char (*)[14])"GROW_CURVE_HP");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 6968),
      (data::GrowCurveType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 1136));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1232),
      (const char (*)[7])byte_1A62F160,
      (const char (*)[18])"GROW_CURVE_ATTACK");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7040),
      (data::GrowCurveType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 1232));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1328),
      (const char (*)[7])byte_1A62F1A0,
      (const char (*)[19])"GROW_CURVE_STAMINA");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7112),
      (data::GrowCurveType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 1328));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1424),
      (const char (*)[7])byte_1A62F1E0,
      (const char (*)[18])"GROW_CURVE_STRIKE");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7184),
      (data::GrowCurveType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 1424));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1520),
      (const char (*)[7])byte_1A62F220,
      (const char (*)[23])"GROW_CURVE_ANTI_STRIKE");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7256),
      (data::GrowCurveType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 1520));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[8],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1616),
      (const char (*)[8])byte_1A62F260,
      (const char (*)[24])"GROW_CURVE_ANTI_STRIKE1");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7328),
      (data::GrowCurveType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 1616));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[8],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1712),
      (const char (*)[8])byte_1A62F2A0,
      (const char (*)[24])"GROW_CURVE_ANTI_STRIKE2");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7400),
      (data::GrowCurveType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 1712));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[8],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1808),
      (const char (*)[8])byte_1A62F2E0,
      (const char (*)[24])"GROW_CURVE_ANTI_STRIKE3");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7472),
      (data::GrowCurveType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 1808));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1904),
      (const char (*)[13])byte_1A625640,
      (const char (*)[23])"GROW_CURVE_STRIKE_HURT");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7544),
      (data::GrowCurveType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 1904));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2000),
      (const char (*)[7])byte_1A62F320,
      (const char (*)[19])"GROW_CURVE_ELEMENT");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7616),
      (data::GrowCurveType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 2000));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2096),
      (const char (*)[13])byte_1A62F360,
      (const char (*)[20])"GROW_CURVE_KILL_EXP");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7688),
      (data::GrowCurveType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 2096));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2192),
      (const char (*)[7])byte_1A62F3A0,
      (const char (*)[19])"GROW_CURVE_DEFENSE");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7760),
      (data::GrowCurveType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 2192));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 13;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2288),
      (const char (*)[13])byte_1A62F3E0,
      (const char (*)[23])"GROW_CURVE_ATTACK_BOMB");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7832),
      (data::GrowCurveType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 2288));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 14;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2384),
      (const char (*)[16])byte_1A62F420,
      (const char (*)[28])"GROW_CURVE_HP_LITTLEMONSTER");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7904),
      (data::GrowCurveType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 2384));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, v1 + 288);
    *(_DWORD *)(v1 + 304) = 15;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2480),
      (const char (*)[13])byte_1A6257C0,
      (const char (*)[27])"GROW_CURVE_ELEMENT_MASTERY");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 7976),
      (data::GrowCurveType *)(v1 + 304),
      (const std::pair<std::string,std::string > *)(v1 + 2480));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, v1 + 304);
    *(_DWORD *)(v1 + 320) = 16;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2576),
      (const char (*)[22])byte_1A62F460,
      (const char (*)[23])"GROW_CURVE_PROGRESSION");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8048),
      (data::GrowCurveType *)(v1 + 320),
      (const std::pair<std::string,std::string > *)(v1 + 2576));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, v1 + 320);
    *(_DWORD *)(v1 + 336) = 17;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2672),
      (const char (*)[16])byte_1A62F4A0,
      (const char (*)[21])"GROW_CURVE_DEFENDING");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8120),
      (data::GrowCurveType *)(v1 + 336),
      (const std::pair<std::string,std::string > *)(v1 + 2672));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, v1 + 336);
    *(_DWORD *)(v1 + 352) = 18;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2768),
      (const char (*)[16])byte_1A62F4E0,
      (const char (*)[15])"GROW_CURVE_MHP");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 0x2000),
      (data::GrowCurveType *)(v1 + 352),
      (const std::pair<std::string,std::string > *)(v1 + 2768));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, v1 + 352);
    *(_DWORD *)(v1 + 368) = 19;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2864),
      (const char (*)[16])byte_1A62F520,
      (const char (*)[16])"GROW_CURVE_MATK");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8264),
      (data::GrowCurveType *)(v1 + 368),
      (const std::pair<std::string,std::string > *)(v1 + 2864));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, v1 + 368);
    *(_DWORD *)(v1 + 384) = 20;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 2960),
      (const char (*)[13])byte_1A62F560,
      (const char (*)[20])"GROW_CURVE_TOWERATK");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8336),
      (data::GrowCurveType *)(v1 + 384),
      (const std::pair<std::string,std::string > *)(v1 + 2960));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, v1 + 384);
    *(_DWORD *)(v1 + 400) = 21;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3056),
      (const char (*)[11])byte_1A62F5A0,
      (const char (*)[17])"GROW_CURVE_HP_S5");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8408),
      (data::GrowCurveType *)(v1 + 400),
      (const std::pair<std::string,std::string > *)(v1 + 3056));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, v1 + 400);
    *(_DWORD *)(v1 + 416) = 22;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3152),
      (const char (*)[11])byte_1A62F5E0,
      (const char (*)[17])"GROW_CURVE_HP_S4");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8480),
      (data::GrowCurveType *)(v1 + 416),
      (const std::pair<std::string,std::string > *)(v1 + 3152));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, v1 + 416);
    *(_DWORD *)(v1 + 432) = 23;
    std::pair<std::string,std::string>::pair<char const(&)[8],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3248),
      (const char (*)[8])byte_1A62F620,
      (const char (*)[16])"GROW_CURVE_HP_2");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8552),
      (data::GrowCurveType *)(v1 + 432),
      (const std::pair<std::string,std::string > *)(v1 + 3248));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, v1 + 432);
    *(_DWORD *)(v1 + 448) = 24;
    std::pair<std::string,std::string>::pair<char const(&)[8],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3344),
      (const char (*)[8])byte_1A62F660,
      (const char (*)[20])"GROW_CURVE_ATTACK_2");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8624),
      (data::GrowCurveType *)(v1 + 448),
      (const std::pair<std::string,std::string > *)(v1 + 3344));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, v1 + 448);
    *(_DWORD *)(v1 + 464) = 31;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3440),
      (const char (*)[11])byte_1A62F6A0,
      (const char (*)[21])"GROW_CURVE_ATTACK_S5");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8696),
      (data::GrowCurveType *)(v1 + 464),
      (const std::pair<std::string,std::string > *)(v1 + 3440));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, v1 + 464);
    *(_DWORD *)(v1 + 480) = 32;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3536),
      (const char (*)[11])byte_1A62F6E0,
      (const char (*)[21])"GROW_CURVE_ATTACK_S4");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8768),
      (data::GrowCurveType *)(v1 + 480),
      (const std::pair<std::string,std::string > *)(v1 + 3536));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, v1 + 480);
    *(_DWORD *)(v1 + 496) = 33;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3632),
      (const char (*)[11])byte_1A62F720,
      (const char (*)[21])"GROW_CURVE_ATTACK_S3");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8840),
      (data::GrowCurveType *)(v1 + 496),
      (const std::pair<std::string,std::string > *)(v1 + 3632));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, v1 + 496);
    *(_DWORD *)(v1 + 512) = 34;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3728),
      (const char (*)[11])byte_1A62F760,
      (const char (*)[21])"GROW_CURVE_STRIKE_S5");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8912),
      (data::GrowCurveType *)(v1 + 512),
      (const std::pair<std::string,std::string > *)(v1 + 3728));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, v1 + 512);
    *(_DWORD *)(v1 + 528) = 41;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3824),
      (const char (*)[11])byte_1A62F7A0,
      (const char (*)[22])"GROW_CURVE_DEFENSE_S5");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 8984),
      (data::GrowCurveType *)(v1 + 528),
      (const std::pair<std::string,std::string > *)(v1 + 3824));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, v1 + 528);
    *(_DWORD *)(v1 + 544) = 42;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3920),
      (const char (*)[11])byte_1A62F7E0,
      (const char (*)[22])"GROW_CURVE_DEFENSE_S4");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9056),
      (data::GrowCurveType *)(v1 + 544),
      (const std::pair<std::string,std::string > *)(v1 + 3920));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, v1 + 544);
    *(_DWORD *)(v1 + 560) = 1101;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4016),
      (const char (*)[10])byte_1A62F820,
      (const char (*)[22])"GROW_CURVE_ATTACK_101");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9128),
      (data::GrowCurveType *)(v1 + 560),
      (const std::pair<std::string,std::string > *)(v1 + 4016));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, v1 + 560);
    *(_DWORD *)(v1 + 576) = 1102;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4112),
      (const char (*)[10])byte_1A62F860,
      (const char (*)[22])"GROW_CURVE_ATTACK_102");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9200),
      (data::GrowCurveType *)(v1 + 576),
      (const std::pair<std::string,std::string > *)(v1 + 4112));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, v1 + 576);
    *(_DWORD *)(v1 + 592) = 1103;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4208),
      (const char (*)[10])byte_1A62F8A0,
      (const char (*)[22])"GROW_CURVE_ATTACK_103");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9272),
      (data::GrowCurveType *)(v1 + 592),
      (const std::pair<std::string,std::string > *)(v1 + 4208));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, v1 + 592);
    *(_DWORD *)(v1 + 608) = 1104;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4304),
      (const char (*)[10])byte_1A62F8E0,
      (const char (*)[22])"GROW_CURVE_ATTACK_104");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9344),
      (data::GrowCurveType *)(v1 + 608),
      (const std::pair<std::string,std::string > *)(v1 + 4304));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, v1 + 608);
    *(_DWORD *)(v1 + 624) = 1105;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4400),
      (const char (*)[10])byte_1A62F920,
      (const char (*)[22])"GROW_CURVE_ATTACK_105");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9416),
      (data::GrowCurveType *)(v1 + 624),
      (const std::pair<std::string,std::string > *)(v1 + 4400));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, v1 + 624);
    *(_DWORD *)(v1 + 640) = 1201;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4496),
      (const char (*)[10])byte_1A62F960,
      (const char (*)[22])"GROW_CURVE_ATTACK_201");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9488),
      (data::GrowCurveType *)(v1 + 640),
      (const std::pair<std::string,std::string > *)(v1 + 4496));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, v1 + 640);
    *(_DWORD *)(v1 + 656) = 1202;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4592),
      (const char (*)[10])byte_1A62F9A0,
      (const char (*)[22])"GROW_CURVE_ATTACK_202");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9560),
      (data::GrowCurveType *)(v1 + 656),
      (const std::pair<std::string,std::string > *)(v1 + 4592));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, v1 + 656);
    *(_DWORD *)(v1 + 672) = 1203;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4688),
      (const char (*)[10])byte_1A62F9E0,
      (const char (*)[22])"GROW_CURVE_ATTACK_203");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9632),
      (data::GrowCurveType *)(v1 + 672),
      (const std::pair<std::string,std::string > *)(v1 + 4688));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, v1 + 672);
    *(_DWORD *)(v1 + 688) = 1204;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4784),
      (const char (*)[10])byte_1A62FA20,
      (const char (*)[22])"GROW_CURVE_ATTACK_204");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9704),
      (data::GrowCurveType *)(v1 + 688),
      (const std::pair<std::string,std::string > *)(v1 + 4784));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, v1 + 688);
    *(_DWORD *)(v1 + 704) = 1205;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4880),
      (const char (*)[10])byte_1A62FA60,
      (const char (*)[22])"GROW_CURVE_ATTACK_205");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9776),
      (data::GrowCurveType *)(v1 + 704),
      (const std::pair<std::string,std::string > *)(v1 + 4880));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, v1 + 704);
    *(_DWORD *)(v1 + 720) = 1301;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4976),
      (const char (*)[10])byte_1A62FAA0,
      (const char (*)[22])"GROW_CURVE_ATTACK_301");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9848),
      (data::GrowCurveType *)(v1 + 720),
      (const std::pair<std::string,std::string > *)(v1 + 4976));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, v1 + 720);
    *(_DWORD *)(v1 + 736) = 1302;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5072),
      (const char (*)[10])byte_1A62FAE0,
      (const char (*)[22])"GROW_CURVE_ATTACK_302");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9920),
      (data::GrowCurveType *)(v1 + 736),
      (const std::pair<std::string,std::string > *)(v1 + 5072));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, v1 + 736);
    *(_DWORD *)(v1 + 752) = 1303;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5168),
      (const char (*)[10])byte_1A62FB20,
      (const char (*)[22])"GROW_CURVE_ATTACK_303");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 9992),
      (data::GrowCurveType *)(v1 + 752),
      (const std::pair<std::string,std::string > *)(v1 + 5168));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, v1 + 752);
    *(_DWORD *)(v1 + 768) = 1304;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5264),
      (const char (*)[10])byte_1A62FB60,
      (const char (*)[22])"GROW_CURVE_ATTACK_304");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10064),
      (data::GrowCurveType *)(v1 + 768),
      (const std::pair<std::string,std::string > *)(v1 + 5264));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, v1 + 768);
    *(_DWORD *)(v1 + 784) = 1305;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5360),
      (const char (*)[10])byte_1A62FBA0,
      (const char (*)[22])"GROW_CURVE_ATTACK_305");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10136),
      (data::GrowCurveType *)(v1 + 784),
      (const std::pair<std::string,std::string > *)(v1 + 5360));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, v1 + 784);
    *(_DWORD *)(v1 + 800) = 2101;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5456),
      (const char (*)[10])byte_1A62FBE0,
      (const char (*)[24])"GROW_CURVE_CRITICAL_101");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10208),
      (data::GrowCurveType *)(v1 + 800),
      (const std::pair<std::string,std::string > *)(v1 + 5456));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, v1 + 800);
    *(_DWORD *)(v1 + 816) = 2102;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5552),
      (const char (*)[10])byte_1A62FC20,
      (const char (*)[24])"GROW_CURVE_CRITICAL_102");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10280),
      (data::GrowCurveType *)(v1 + 816),
      (const std::pair<std::string,std::string > *)(v1 + 5552));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, v1 + 816);
    *(_DWORD *)(v1 + 832) = 2103;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5648),
      (const char (*)[10])byte_1A62FC60,
      (const char (*)[24])"GROW_CURVE_CRITICAL_103");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10352),
      (data::GrowCurveType *)(v1 + 832),
      (const std::pair<std::string,std::string > *)(v1 + 5648));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, v1 + 832);
    *(_DWORD *)(v1 + 848) = 2104;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5744),
      (const char (*)[10])byte_1A62FCA0,
      (const char (*)[24])"GROW_CURVE_CRITICAL_104");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10424),
      (data::GrowCurveType *)(v1 + 848),
      (const std::pair<std::string,std::string > *)(v1 + 5744));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, v1 + 848);
    *(_DWORD *)(v1 + 864) = 2105;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5840),
      (const char (*)[10])byte_1A62FCE0,
      (const char (*)[24])"GROW_CURVE_CRITICAL_105");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10496),
      (data::GrowCurveType *)(v1 + 864),
      (const std::pair<std::string,std::string > *)(v1 + 5840));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, v1 + 864);
    *(_DWORD *)(v1 + 880) = 2201;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5936),
      (const char (*)[10])byte_1A62FD20,
      (const char (*)[24])"GROW_CURVE_CRITICAL_201");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10568),
      (data::GrowCurveType *)(v1 + 880),
      (const std::pair<std::string,std::string > *)(v1 + 5936));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, v1 + 880);
    *(_DWORD *)(v1 + 896) = 2202;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6032),
      (const char (*)[10])byte_1A62FD60,
      (const char (*)[24])"GROW_CURVE_CRITICAL_202");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10640),
      (data::GrowCurveType *)(v1 + 896),
      (const std::pair<std::string,std::string > *)(v1 + 6032));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, v1 + 896);
    *(_DWORD *)(v1 + 912) = 2203;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6128),
      (const char (*)[10])byte_1A62FDA0,
      (const char (*)[24])"GROW_CURVE_CRITICAL_203");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10712),
      (data::GrowCurveType *)(v1 + 912),
      (const std::pair<std::string,std::string > *)(v1 + 6128));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, v1 + 912);
    *(_DWORD *)(v1 + 928) = 2204;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6224),
      (const char (*)[10])byte_1A62FDE0,
      (const char (*)[24])"GROW_CURVE_CRITICAL_204");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10784),
      (data::GrowCurveType *)(v1 + 928),
      (const std::pair<std::string,std::string > *)(v1 + 6224));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, v1 + 928);
    *(_DWORD *)(v1 + 944) = 2205;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6320),
      (const char (*)[10])byte_1A62FE20,
      (const char (*)[24])"GROW_CURVE_CRITICAL_205");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10856),
      (data::GrowCurveType *)(v1 + 944),
      (const std::pair<std::string,std::string > *)(v1 + 6320));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, v1 + 944);
    *(_DWORD *)(v1 + 960) = 2301;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6416),
      (const char (*)[10])byte_1A62FE60,
      (const char (*)[24])"GROW_CURVE_CRITICAL_301");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 10928),
      (data::GrowCurveType *)(v1 + 960),
      (const std::pair<std::string,std::string > *)(v1 + 6416));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, v1 + 960);
    *(_DWORD *)(v1 + 976) = 2302;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6512),
      (const char (*)[10])byte_1A62FEA0,
      (const char (*)[24])"GROW_CURVE_CRITICAL_302");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 11000),
      (data::GrowCurveType *)(v1 + 976),
      (const std::pair<std::string,std::string > *)(v1 + 6512));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, v1 + 976);
    *(_DWORD *)(v1 + 992) = 2303;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6608),
      (const char (*)[10])byte_1A62FEE0,
      (const char (*)[24])"GROW_CURVE_CRITICAL_303");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 11072),
      (data::GrowCurveType *)(v1 + 992),
      (const std::pair<std::string,std::string > *)(v1 + 6608));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, v1 + 992);
    *(_DWORD *)(v1 + 1008) = 2304;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6704),
      (const char (*)[10])byte_1A62FF20,
      (const char (*)[24])"GROW_CURVE_CRITICAL_304");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 11144),
      (data::GrowCurveType *)(v1 + 1008),
      (const std::pair<std::string,std::string > *)(v1 + 6704));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, v1 + 1008);
    *(_DWORD *)(v1 + 1024) = 2305;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6800),
      (const char (*)[10])byte_1A62FF60,
      (const char (*)[24])"GROW_CURVE_CRITICAL_305");
    std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::pair<data::GrowCurveType,true>(
      (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *const)(v1 + 11216),
      (data::GrowCurveType *)(v1 + 1024),
      (const std::pair<std::string,std::string > *)(v1 + 6800));
    std::allocator<std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::GrowCurveType,std::pair<std::string,std::string>>::map(
      &data::getGrowCurveTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > >)__PAIR128__(61LL, v1 + 6896),
      (const std::less<data::GrowCurveType> *)(v1 + 32),
      (const std::map<data::GrowCurveType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getGrowCurveTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::GrowCurveType,std::pair<std::string,std::string>>::~map,
      &data::getGrowCurveTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *)(v1 + 11288);
          i != (std::pair<const data::GrowCurveType,std::pair<std::string,std::string > > *)(v1 + 6896);
          std::pair<data::GrowCurveType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 6896, 4392LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6800));
    v5 = (_DWORD *)(((v1 + 6800) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6704));
    v6 = (_DWORD *)(((v1 + 6704) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6608));
    v7 = (_DWORD *)(((v1 + 6608) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6512));
    v8 = (_DWORD *)(((v1 + 6512) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6416));
    v9 = (_DWORD *)(((v1 + 6416) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6320));
    v10 = (_DWORD *)(((v1 + 6320) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6224));
    v11 = (_DWORD *)(((v1 + 6224) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6128));
    v12 = (_DWORD *)(((v1 + 6128) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6032));
    v13 = (_DWORD *)(((v1 + 6032) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5936));
    v14 = (_DWORD *)(((v1 + 5936) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5840));
    v15 = (_DWORD *)(((v1 + 5840) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5744));
    v16 = (_DWORD *)(((v1 + 5744) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5648));
    v17 = (_DWORD *)(((v1 + 5648) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5552));
    v18 = (_DWORD *)(((v1 + 5552) >> 3) + 2147450880);
    *v18 = -117901064;
    v18[1] = -117901064;
    *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5456));
    v19 = (_DWORD *)(((v1 + 5456) >> 3) + 2147450880);
    *v19 = -117901064;
    v19[1] = -117901064;
    *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5360));
    v20 = (_DWORD *)(((v1 + 5360) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5264));
    v21 = (_DWORD *)(((v1 + 5264) >> 3) + 2147450880);
    *v21 = -117901064;
    v21[1] = -117901064;
    *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5168));
    v22 = (_DWORD *)(((v1 + 5168) >> 3) + 2147450880);
    *v22 = -117901064;
    v22[1] = -117901064;
    *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5072));
    v23 = (_DWORD *)(((v1 + 5072) >> 3) + 2147450880);
    *v23 = -117901064;
    v23[1] = -117901064;
    *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4976));
    v24 = (_DWORD *)(((v1 + 4976) >> 3) + 2147450880);
    *v24 = -117901064;
    v24[1] = -117901064;
    *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4880));
    v25 = (_DWORD *)(((v1 + 4880) >> 3) + 2147450880);
    *v25 = -117901064;
    v25[1] = -117901064;
    *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4784));
    v26 = (_DWORD *)(((v1 + 4784) >> 3) + 2147450880);
    *v26 = -117901064;
    v26[1] = -117901064;
    *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4688));
    v27 = (_DWORD *)(((v1 + 4688) >> 3) + 2147450880);
    *v27 = -117901064;
    v27[1] = -117901064;
    *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4592));
    v28 = (_DWORD *)(((v1 + 4592) >> 3) + 2147450880);
    *v28 = -117901064;
    v28[1] = -117901064;
    *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4496));
    v29 = (_DWORD *)(((v1 + 4496) >> 3) + 2147450880);
    *v29 = -117901064;
    v29[1] = -117901064;
    *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4400));
    v30 = (_DWORD *)(((v1 + 4400) >> 3) + 2147450880);
    *v30 = -117901064;
    v30[1] = -117901064;
    *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4304));
    v31 = (_DWORD *)(((v1 + 4304) >> 3) + 2147450880);
    *v31 = -117901064;
    v31[1] = -117901064;
    *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4208));
    v32 = (_DWORD *)(((v1 + 4208) >> 3) + 2147450880);
    *v32 = -117901064;
    v32[1] = -117901064;
    *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4112));
    v33 = (_DWORD *)(((v1 + 4112) >> 3) + 2147450880);
    *v33 = -117901064;
    v33[1] = -117901064;
    *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4016));
    v34 = (_DWORD *)(((v1 + 4016) >> 3) + 2147450880);
    *v34 = -117901064;
    v34[1] = -117901064;
    *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3920));
    v35 = (_DWORD *)(((v1 + 3920) >> 3) + 2147450880);
    *v35 = -117901064;
    v35[1] = -117901064;
    *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3824));
    v36 = (_DWORD *)(((v1 + 3824) >> 3) + 2147450880);
    *v36 = -117901064;
    v36[1] = -117901064;
    *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3728));
    v37 = (_DWORD *)(((v1 + 3728) >> 3) + 2147450880);
    *v37 = -117901064;
    v37[1] = -117901064;
    *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3632));
    v38 = (_DWORD *)(((v1 + 3632) >> 3) + 2147450880);
    *v38 = -117901064;
    v38[1] = -117901064;
    *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3536));
    v39 = (_DWORD *)(((v1 + 3536) >> 3) + 2147450880);
    *v39 = -117901064;
    v39[1] = -117901064;
    *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3440));
    v40 = (_DWORD *)(((v1 + 3440) >> 3) + 2147450880);
    *v40 = -117901064;
    v40[1] = -117901064;
    *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3344));
    v41 = (_DWORD *)(((v1 + 3344) >> 3) + 2147450880);
    *v41 = -117901064;
    v41[1] = -117901064;
    *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3248));
    v42 = (_DWORD *)(((v1 + 3248) >> 3) + 2147450880);
    *v42 = -117901064;
    v42[1] = -117901064;
    *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3152));
    v43 = (_DWORD *)(((v1 + 3152) >> 3) + 2147450880);
    *v43 = -117901064;
    v43[1] = -117901064;
    *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3056));
    v44 = (_DWORD *)(((v1 + 3056) >> 3) + 2147450880);
    *v44 = -117901064;
    v44[1] = -117901064;
    *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2960));
    v45 = (_DWORD *)(((v1 + 2960) >> 3) + 2147450880);
    *v45 = -117901064;
    v45[1] = -117901064;
    *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2864));
    v46 = (_DWORD *)(((v1 + 2864) >> 3) + 2147450880);
    *v46 = -117901064;
    v46[1] = -117901064;
    *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2768));
    v47 = (_DWORD *)(((v1 + 2768) >> 3) + 2147450880);
    *v47 = -117901064;
    v47[1] = -117901064;
    *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2672));
    v48 = (_DWORD *)(((v1 + 2672) >> 3) + 2147450880);
    *v48 = -117901064;
    v48[1] = -117901064;
    *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2576));
    v49 = (_DWORD *)(((v1 + 2576) >> 3) + 2147450880);
    *v49 = -117901064;
    v49[1] = -117901064;
    *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2480));
    v50 = (_DWORD *)(((v1 + 2480) >> 3) + 2147450880);
    *v50 = -117901064;
    v50[1] = -117901064;
    *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2384));
    v51 = (_DWORD *)(((v1 + 2384) >> 3) + 2147450880);
    *v51 = -117901064;
    v51[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2288));
    v52 = (_DWORD *)(((v1 + 2288) >> 3) + 2147450880);
    *v52 = -117901064;
    v52[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2192));
    v53 = (_DWORD *)(((v1 + 2192) >> 3) + 2147450880);
    *v53 = -117901064;
    v53[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2096));
    v54 = (_DWORD *)(((v1 + 2096) >> 3) + 2147450880);
    *v54 = -117901064;
    v54[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 2000));
    v55 = (_DWORD *)(((v1 + 2000) >> 3) + 2147450880);
    *v55 = -117901064;
    v55[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1904));
    v56 = (_DWORD *)(((v1 + 1904) >> 3) + 2147450880);
    *v56 = -117901064;
    v56[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1808));
    v57 = (_DWORD *)(((v1 + 1808) >> 3) + 2147450880);
    *v57 = -117901064;
    v57[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1712));
    v58 = (_DWORD *)(((v1 + 1712) >> 3) + 2147450880);
    *v58 = -117901064;
    v58[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1616));
    v59 = (_DWORD *)(((v1 + 1616) >> 3) + 2147450880);
    *v59 = -117901064;
    v59[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1520));
    v60 = (_DWORD *)(((v1 + 1520) >> 3) + 2147450880);
    *v60 = -117901064;
    v60[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1424));
    v61 = (_DWORD *)(((v1 + 1424) >> 3) + 2147450880);
    *v61 = -117901064;
    v61[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1328));
    v62 = (_DWORD *)(((v1 + 1328) >> 3) + 2147450880);
    *v62 = -117901064;
    v62[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1232));
    v63 = (_DWORD *)(((v1 + 1232) >> 3) + 2147450880);
    *v63 = -117901064;
    v63[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1136));
    v64 = (_DWORD *)(((v1 + 1136) >> 3) + 2147450880);
    *v64 = -117901064;
    v64[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1040));
  }
  if ( v66 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF859C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 1444) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_8(v1, 11552LL, v66);
  }
  return &data::getGrowCurveTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2004: range 000000000FA5050E-000000000FA50881
const char *__fastcall data::enumValToStr(data::EquipType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::EquipType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::EquipType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2003 64 8 9 iter:2006 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getEquipTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::EquipType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::EquipType,std::pair<std::string,std::string>>::find(
                                                                                                  map,
                                                                                                  (const std::map<data::EquipType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::EquipType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::EquipType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::EquipType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::EquipType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2009);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_EquipType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::EquipType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::EquipType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2016: range 000000000FA50882-000000000FA50E3A
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::EquipType>,false,true>::pointer v10; // rax
  data::EquipType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::EquipType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2025 96 8 9 <unknown> 128 8 6 s:2015 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getEquipTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::EquipType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::EquipType>::find(
                                                                                      m,
                                                                                      (const std::unordered_map<std::string,data::EquipType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::EquipType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::EquipType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::EquipType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::EquipType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::EquipType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2028);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::EquipType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::EquipType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2019);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2037: range 000000000FA50E3B-000000000FA51ABD
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::EquipType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::EquipType>,false,true>::pointer v12; // rax
  data::EquipType second; // ecx
  char v14; // dl
  char v16[848]; // [rsp+20h] [rbp-350h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(800LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 8 7 it:20"
                        "54 240 8 9 <unknown> 272 8 6 s:2036 304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496"
                        " 240 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = 61956;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862743] = -202116109;
  v4[536862744] = -202116109;
  *(_QWORD *)(v2 + 272) = s;
  if ( *(_QWORD *)(v2 + 272) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::EquipType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::EquipType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::EquipType>::pair<char const(&)[10],data::EquipType,true>(
        (std::pair<const std::string,data::EquipType> *const)(v2 + 496),
        (const char (*)[10])byte_1A631F80,
        (data::EquipType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A631F80);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::EquipType>::pair<char const(&)[10],data::EquipType,true>(
        (std::pair<const std::string,data::EquipType> *const)(v2 + 536),
        (const char (*)[10])byte_1A631FC0,
        (data::EquipType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A631FC0);
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::EquipType>::pair<char const(&)[10],data::EquipType,true>(
        (std::pair<const std::string,data::EquipType> *const)(v2 + 576),
        (const char (*)[10])byte_1A632000,
        (data::EquipType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A632000);
      *(_DWORD *)(v2 + 160) = 4;
      std::pair<std::string const,data::EquipType>::pair<char const(&)[10],data::EquipType,true>(
        (std::pair<const std::string,data::EquipType> *const)(v2 + 616),
        (const char (*)[10])byte_1A632040,
        (data::EquipType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A632040);
      *(_DWORD *)(v2 + 176) = 5;
      std::pair<std::string const,data::EquipType>::pair<char const(&)[10],data::EquipType,true>(
        (std::pair<const std::string,data::EquipType> *const)(v2 + 656),
        (const char (*)[10])byte_1A632080,
        (data::EquipType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A632080);
      *(_DWORD *)(v2 + 192) = 6;
      std::pair<std::string const,data::EquipType>::pair<char const(&)[7],data::EquipType,true>(
        (std::pair<const std::string,data::EquipType> *const)(v2 + 696),
        (const char (*)[7])byte_1A62C060,
        (data::EquipType *)(v2 + 192));
      std::allocator<std::pair<std::string const,data::EquipType>>::allocator((std::allocator<std::pair<const std::string,data::EquipType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::EquipType>::unordered_map(
        &data::enumStrToVal(char const*,data::EquipType &)::m,
        (std::initializer_list<std::pair<const std::string,data::EquipType> >)__PAIR128__(6LL, v2 + 496),
        0LL,
        (const std::unordered_map<std::string,data::EquipType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::EquipType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::EquipType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::EquipType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::EquipType>::~unordered_map,
        &data::enumStrToVal(char const*,data::EquipType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::EquipType>>::~allocator((std::allocator<std::pair<const std::string,data::EquipType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::EquipType> *)(v2 + 736);
            i != (std::pair<const std::string,data::EquipType> *)(v2 + 496);
            std::pair<std::string const,data::EquipType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 496) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_DWORD *)(v7 + 12) = -117901064;
      *(_DWORD *)(v7 + 16) = -117901064;
      *(_DWORD *)(v7 + 20) = -117901064;
      *(_DWORD *)(v7 + 24) = -117901064;
      *(_WORD *)(v7 + 28) = -1800;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 272);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 368),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, v8);
    *(std::unordered_map<std::string,data::EquipType>::iterator *)(v2 + 208) = std::unordered_map<std::string,data::EquipType>::find(
                                                                                 &data::enumStrToVal(char const*,data::EquipType &)::m,
                                                                                 (const std::unordered_map<std::string,data::EquipType>::key_type *)(v2 + 368));
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, v2 + 368);
    *(std::unordered_map<std::string,data::EquipType>::iterator *)(v2 + 240) = std::unordered_map<std::string,data::EquipType>::end(&data::enumStrToVal(char const*,data::EquipType &)::m);
    v9 = (char *)(v2 + 240);
    v10 = std::__detail::operator==<std::pair<std::string const,data::EquipType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::EquipType>,true> *)(v2 + 208),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::EquipType>,true> *)(v2 + 240));
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 432, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 432),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2057);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 432),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 272));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
      LODWORD(result) = -1;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::EquipType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::EquipType>,false,true> *const)(v2 + 208));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      LODWORD(result) = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 304),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2040);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 304),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
    LODWORD(result) = -1;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = -168430091;
  }
  return (unsigned int)result;
};

// Line 2066: range 000000000FA51ABE-000000000FA51AD4
const char *__cdecl data::getDescription(data::EquipType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2071: range 000000000FA51AD5-000000000FA51C8A
bool __cdecl data::isValidEquipType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::EquipType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::EquipType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2072 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidEquipType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getEquipTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::EquipType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::EquipType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getEquipTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::EquipType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::EquipType,std::pair<std::string,std::string>>::find(
                                                                                                  v6,
                                                                                                  (const std::map<data::EquipType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::EquipType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::EquipType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2077: range 000000000FA51C8B-000000000FA51DEC
bool __cdecl data::isValidEquipTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::EquipType> *v5; // rcx
  const std::unordered_map<std::string,data::EquipType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidEquipTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getEquipTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::EquipType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::EquipType>::end(v5);
  v6 = data::getEquipTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::EquipType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::EquipType>::find(
                                                                                    v6,
                                                                                    name);
  result = std::__detail::operator!=<std::pair<std::string const,data::EquipType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::EquipType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::EquipType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2082: range 000000000FA51DED-000000000FA524F6
const std::unordered_map<std::string,data::EquipType> *__cdecl data::getEquipTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::EquipType> *i; // r14
  const std::unordered_map<std::string,data::EquipType> *result; // rax
  char v6[592]; // [rsp+10h] [rbp-250h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(544LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 280 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getEquipTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862734] = -218103808;
  v3[536862735] = -202116109;
  v3[536862736] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getEquipTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getEquipTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::EquipType>::pair<char const(&)[11],data::EquipType,true>(
      (std::pair<const std::string,data::EquipType> *const)(v1 + 192),
      (const char (*)[11])"EQUIP_NONE",
      (data::EquipType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "EQUIP_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::EquipType>::pair<char const(&)[13],data::EquipType,true>(
      (std::pair<const std::string,data::EquipType> *const)(v1 + 232),
      (const char (*)[13])"EQUIP_BRACER",
      (data::EquipType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "EQUIP_BRACER");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::EquipType>::pair<char const(&)[15],data::EquipType,true>(
      (std::pair<const std::string,data::EquipType> *const)(v1 + 272),
      (const char (*)[15])"EQUIP_NECKLACE",
      (data::EquipType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "EQUIP_NECKLACE");
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string const,data::EquipType>::pair<char const(&)[12],data::EquipType,true>(
      (std::pair<const std::string,data::EquipType> *const)(v1 + 312),
      (const char (*)[12])"EQUIP_SHOES",
      (data::EquipType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "EQUIP_SHOES");
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string const,data::EquipType>::pair<char const(&)[11],data::EquipType,true>(
      (std::pair<const std::string,data::EquipType> *const)(v1 + 352),
      (const char (*)[11])"EQUIP_RING",
      (data::EquipType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "EQUIP_RING");
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string const,data::EquipType>::pair<char const(&)[12],data::EquipType,true>(
      (std::pair<const std::string,data::EquipType> *const)(v1 + 392),
      (const char (*)[12])"EQUIP_DRESS",
      (data::EquipType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "EQUIP_DRESS");
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string const,data::EquipType>::pair<char const(&)[13],data::EquipType,true>(
      (std::pair<const std::string,data::EquipType> *const)(v1 + 432),
      (const char (*)[13])"EQUIP_WEAPON",
      (data::EquipType *)(v1 + 176));
    std::allocator<std::pair<std::string const,data::EquipType>>::allocator((std::allocator<std::pair<const std::string,data::EquipType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::EquipType>::unordered_map(
      &data::getEquipTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::EquipType> >)__PAIR128__(7LL, v1 + 192),
      0LL,
      (const std::unordered_map<std::string,data::EquipType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::EquipType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::EquipType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getEquipTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::EquipType>::~unordered_map,
      &data::getEquipTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::EquipType>>::~allocator((std::allocator<std::pair<const std::string,data::EquipType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::EquipType> *)(v1 + 472);
          i != (std::pair<const std::string,data::EquipType> *)(v1 + 192);
          std::pair<std::string const,data::EquipType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getEquipTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 2097: range 000000000FA524F7-000000000FA52FCA
const std::map<data::EquipType,std::pair<std::string,std::string >> *__cdecl data::getEquipTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::EquipType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  char v12[1488]; // [rsp+10h] [rbp-5D0h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1440LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 64 9 <unknown> 288 64 9 <un"
                        "known> 384 64 9 <unknown> 480 64 9 <unknown> 576 64 9 <unknown> 672 64 9 <unknown> 768 64 9 <unk"
                        "nown> 864 504 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getEquipTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862728] = -218959118;
  v3[536862731] = -218959118;
  v3[536862734] = -218959118;
  v3[536862737] = -218959118;
  v3[536862740] = -218959118;
  v3[536862743] = -218959118;
  v3[536862746] = -218959118;
  v3[536862762] = -218103808;
  v3[536862763] = -202116109;
  v3[536862764] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getEquipTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getEquipTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[11],true>(
      (std::pair<std::string,std::string > *const)(v1 + 192),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[11])"EQUIP_NONE");
    std::pair<data::EquipType const,std::pair<std::string,std::string>>::pair<data::EquipType,true>(
      (std::pair<const data::EquipType,std::pair<std::string,std::string > > *const)(v1 + 864),
      (data::EquipType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 288),
      (const char (*)[10])byte_1A631F80,
      (const char (*)[13])"EQUIP_BRACER");
    std::pair<data::EquipType const,std::pair<std::string,std::string>>::pair<data::EquipType,true>(
      (std::pair<const data::EquipType,std::pair<std::string,std::string > > *const)(v1 + 936),
      (data::EquipType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 384),
      (const char (*)[10])byte_1A631FC0,
      (const char (*)[15])"EQUIP_NECKLACE");
    std::pair<data::EquipType const,std::pair<std::string,std::string>>::pair<data::EquipType,true>(
      (std::pair<const data::EquipType,std::pair<std::string,std::string > > *const)(v1 + 1008),
      (data::EquipType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[12],true>(
      (std::pair<std::string,std::string > *const)(v1 + 480),
      (const char (*)[10])byte_1A632000,
      (const char (*)[12])"EQUIP_SHOES");
    std::pair<data::EquipType const,std::pair<std::string,std::string>>::pair<data::EquipType,true>(
      (std::pair<const data::EquipType,std::pair<std::string,std::string > > *const)(v1 + 1080),
      (data::EquipType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[11],true>(
      (std::pair<std::string,std::string > *const)(v1 + 576),
      (const char (*)[10])byte_1A632040,
      (const char (*)[11])"EQUIP_RING");
    std::pair<data::EquipType const,std::pair<std::string,std::string>>::pair<data::EquipType,true>(
      (std::pair<const data::EquipType,std::pair<std::string,std::string > > *const)(v1 + 1152),
      (data::EquipType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[12],true>(
      (std::pair<std::string,std::string > *const)(v1 + 672),
      (const char (*)[10])byte_1A632080,
      (const char (*)[12])"EQUIP_DRESS");
    std::pair<data::EquipType const,std::pair<std::string,std::string>>::pair<data::EquipType,true>(
      (std::pair<const data::EquipType,std::pair<std::string,std::string > > *const)(v1 + 1224),
      (data::EquipType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 768),
      (const char (*)[7])byte_1A62C060,
      (const char (*)[13])"EQUIP_WEAPON");
    std::pair<data::EquipType const,std::pair<std::string,std::string>>::pair<data::EquipType,true>(
      (std::pair<const data::EquipType,std::pair<std::string,std::string > > *const)(v1 + 1296),
      (data::EquipType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 768));
    std::allocator<std::pair<data::EquipType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::EquipType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::EquipType,std::pair<std::string,std::string>>::map(
      &data::getEquipTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::EquipType,std::pair<std::string,std::string > > >)__PAIR128__(7LL, v1 + 864),
      (const std::less<data::EquipType> *)(v1 + 48),
      (const std::map<data::EquipType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getEquipTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::EquipType,std::pair<std::string,std::string>>::~map,
      &data::getEquipTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::EquipType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::EquipType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::EquipType,std::pair<std::string,std::string > > *)(v1 + 1368);
          i != (std::pair<const data::EquipType,std::pair<std::string,std::string > > *)(v1 + 864);
          std::pair<data::EquipType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 864, 504LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 768));
    v5 = (_DWORD *)(((v1 + 768) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 672));
    v6 = (_DWORD *)(((v1 + 672) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 576));
    v7 = (_DWORD *)(((v1 + 576) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 480));
    v8 = (_DWORD *)(((v1 + 480) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 384));
    v9 = (_DWORD *)(((v1 + 384) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 288));
    v10 = (_DWORD *)(((v1 + 288) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 192));
  }
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF80AC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 180) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1440LL, v12);
  }
  return &data::getEquipTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2112: range 000000000FA52FCB-000000000FA5333E
const char *__fastcall data::enumValToStr(data::TypeCount e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::TypeCount,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2111 64 8 9 iter:2114 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getTypeCountEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::TypeCount,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::TypeCount,std::pair<std::string,std::string>>::find(
                                                                                                  map,
                                                                                                  (const std::map<data::TypeCount,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::TypeCount,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::TypeCount,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2117);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_TypeCount";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::TypeCount const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2124: range 000000000FA5333F-000000000FA538F7
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::TypeCount>,false,true>::pointer v10; // rax
  data::TypeCount second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::TypeCount> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2133 96 8 9 <unknown> 128 8 6 s:2123 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getTypeCountNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::TypeCount>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::TypeCount>::find(
                                                                                      m,
                                                                                      (const std::unordered_map<std::string,data::TypeCount>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::TypeCount>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::TypeCount>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::TypeCount>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::TypeCount>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::TypeCount>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2136);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::TypeCount>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::TypeCount>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2127);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2145: range 000000000FA538F8-000000000FA5421D
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::TypeCount> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::TypeCount>,false,true>::pointer v12; // rax
  data::TypeCount second; // ecx
  char v14; // dl
  char v16[528]; // [rsp+20h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 8 7 "
                        "it:2157 144 8 9 <unknown> 176 8 6 s:2144 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown"
                        "> 400 40 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  *(_QWORD *)(v2 + 176) = s;
  if ( *(_QWORD *)(v2 + 176) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::TypeCount &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::TypeCount &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 5;
      std::pair<std::string const,data::TypeCount>::pair<char const(&)[22],data::TypeCount,true>(
        (std::pair<const std::string,data::TypeCount> *const)(v2 + 400),
        (const char (*)[22])byte_1A6324C0,
        (data::TypeCount *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::TypeCount>>::allocator((std::allocator<std::pair<const std::string,data::TypeCount> > *const)(v2 + 64));
      std::unordered_map<std::string,data::TypeCount>::unordered_map(
        &data::enumStrToVal(char const*,data::TypeCount &)::m,
        (std::initializer_list<std::pair<const std::string,data::TypeCount> >)__PAIR128__(1LL, v2 + 400),
        0LL,
        (const std::unordered_map<std::string,data::TypeCount>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::TypeCount>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::TypeCount>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::TypeCount &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::TypeCount>::~unordered_map,
        &data::enumStrToVal(char const*,data::TypeCount &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::TypeCount>>::~allocator((std::allocator<std::pair<const std::string,data::TypeCount> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::TypeCount> *)(v2 + 440);
            i != (std::pair<const std::string,data::TypeCount> *)(v2 + 400);
            std::pair<std::string const,data::TypeCount>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 400) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_BYTE *)(v7 + 4) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v8 = *(const char **)(v2 + 176);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 272),
      v8,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v8);
    *(std::unordered_map<std::string,data::TypeCount>::iterator *)(v2 + 112) = std::unordered_map<std::string,data::TypeCount>::find(
                                                                                 &data::enumStrToVal(char const*,data::TypeCount &)::m,
                                                                                 (const std::unordered_map<std::string,data::TypeCount>::key_type *)(v2 + 272));
    std::string::~string((void *)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v2 + 272);
    *(std::unordered_map<std::string,data::TypeCount>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::TypeCount>::end(&data::enumStrToVal(char const*,data::TypeCount &)::m);
    v9 = (char *)(v2 + 144);
    v10 = std::__detail::operator==<std::pair<std::string const,data::TypeCount>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::TypeCount>,true> *)(v2 + 112),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::TypeCount>,true> *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2160);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 336),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::TypeCount>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::TypeCount>,false,true> *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2148);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 208),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 2169: range 000000000FA5421E-000000000FA54234
const char *__cdecl data::getDescription(data::TypeCount e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2174: range 000000000FA54235-000000000FA543EA
bool __cdecl data::isValidTypeCount(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::TypeCount,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::TypeCount,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2175 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidTypeCount;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getTypeCountEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::TypeCount,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::TypeCount,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getTypeCountEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::TypeCount,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::TypeCount,std::pair<std::string,std::string>>::find(
                                                                                                  v6,
                                                                                                  (const std::map<data::TypeCount,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2180: range 000000000FA543EB-000000000FA5454C
bool __cdecl data::isValidTypeCountName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::TypeCount> *v5; // rcx
  const std::unordered_map<std::string,data::TypeCount> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidTypeCountName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getTypeCountNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::TypeCount>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::TypeCount>::end(v5);
  v6 = data::getTypeCountNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::TypeCount>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::TypeCount>::find(
                                                                                    v6,
                                                                                    name);
  result = std::__detail::operator!=<std::pair<std::string const,data::TypeCount>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::TypeCount>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::TypeCount>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2185: range 000000000FA5454D-000000000FA548AF
const std::unordered_map<std::string,data::TypeCount> *__cdecl data::getTypeCountNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::TypeCount> *i; // r14
  const std::unordered_map<std::string,data::TypeCount> *result; // rax
  char v6[240]; // [rsp+10h] [rbp-F0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(192LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "5 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 40 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getTypeCountNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = 61956;
  v3[536862724] = -218103808;
  v3[536862725] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getTypeCountNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getTypeCountNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 5;
    std::pair<std::string const,data::TypeCount>::pair<char const(&)[21],data::TypeCount,true>(
      (std::pair<const std::string,data::TypeCount> *const)(v1 + 112),
      (const char (*)[21])"RELIQUARY_TYPE_COUNT",
      (data::TypeCount *)(v1 + 96));
    std::allocator<std::pair<std::string const,data::TypeCount>>::allocator((std::allocator<std::pair<const std::string,data::TypeCount> > *const)(v1 + 80));
    std::unordered_map<std::string,data::TypeCount>::unordered_map(
      &data::getTypeCountNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::TypeCount> >)__PAIR128__(1LL, v1 + 112),
      0LL,
      (const std::unordered_map<std::string,data::TypeCount>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::TypeCount>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::TypeCount>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getTypeCountNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::TypeCount>::~unordered_map,
      &data::getTypeCountNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::TypeCount>>::~allocator((std::allocator<std::pair<const std::string,data::TypeCount> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::TypeCount> *)(v1 + 152);
          i != (std::pair<const std::string,data::TypeCount> *)(v1 + 112);
          std::pair<std::string const,data::TypeCount>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getTypeCountNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2194: range 000000000FA548B0-000000000FA54CC3
const std::map<data::TypeCount,std::pair<std::string,std::string >> *__cdecl data::getTypeCountEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::TypeCount,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  const std::map<data::TypeCount,std::pair<std::string,std::string >> *result; // rax
  char v7[336]; // [rsp+10h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v7;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "5 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 64 9 <unknown> 176 72 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getTypeCountEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = 61956;
  v3[536862724] = -219021312;
  v3[536862725] = 62194;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getTypeCountEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getTypeCountEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 80),
      (const char (*)[22])byte_1A6324C0,
      (const char (*)[21])"RELIQUARY_TYPE_COUNT");
    std::pair<data::TypeCount const,std::pair<std::string,std::string>>::pair<data::TypeCount,true>(
      (std::pair<const data::TypeCount,std::pair<std::string,std::string > > *const)(v1 + 176),
      (data::TypeCount *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 80));
    std::allocator<std::pair<data::TypeCount const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::TypeCount,std::pair<std::string,std::string>>::map(
      &data::getTypeCountEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::TypeCount,std::pair<std::string,std::string > > >)__PAIR128__(1LL, v1 + 176),
      (const std::less<data::TypeCount> *)(v1 + 32),
      (const std::map<data::TypeCount,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getTypeCountEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::TypeCount,std::pair<std::string,std::string>>::~map,
      &data::getTypeCountEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::TypeCount const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::TypeCount,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::TypeCount,std::pair<std::string,std::string > > *)(v1 + 248);
          i != (std::pair<const data::TypeCount,std::pair<std::string,std::string > > *)(v1 + 176);
          std::pair<data::TypeCount const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 176) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_BYTE *)(v5 + 8) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 80));
  }
  result = &data::getTypeCountEnumMap[abi:cxx11](void)::m;
  if ( v7 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2203: range 000000000FA54CC4-000000000FA55037
const char *__fastcall data::enumValToStr(data::WeaponType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::WeaponType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2202 64 8 9 iter:2205 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getWeaponTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::WeaponType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::WeaponType,std::pair<std::string,std::string>>::find(
                                                                                                   map,
                                                                                                   (const std::map<data::WeaponType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::WeaponType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::WeaponType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2208);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_WeaponType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::WeaponType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2215: range 000000000FA55038-000000000FA555F0
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::WeaponType>,false,true>::pointer v10; // rax
  data::WeaponType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::WeaponType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2224 96 8 9 <unknown> 128 8 6 s:2214 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getWeaponTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::WeaponType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::WeaponType>::find(
                                                                                       m,
                                                                                       (const std::unordered_map<std::string,data::WeaponType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::WeaponType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::WeaponType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::WeaponType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WeaponType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WeaponType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2227);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::WeaponType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::WeaponType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2218);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2236: range 000000000FA555F1-000000000FA565CF
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::WeaponType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::WeaponType>,false,true>::pointer v11; // rax
  data::WeaponType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[1296]; // [rsp+20h] [rbp-510h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1248LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "24 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 8 7 it:2260 336 8 9 <unknown> 368 8 6 s:2235 400 32 9 <unknown> 464 32 9 <un"
                        "known> 528 32 9 <unknown> 592 520 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = 61956;
  v4[536862729] = -234881024;
  v4[536862730] = 62194;
  v4[536862730] = -234881024;
  v4[536862731] = 62194;
  v4[536862731] = -234881024;
  v4[536862732] = 62194;
  v4[536862733] = -219021312;
  v4[536862734] = 62194;
  v4[536862735] = -219021312;
  v4[536862736] = 62194;
  v4[536862737] = -219021312;
  v4[536862738] = 62194;
  v4[536862754] = -218103808;
  v4[536862755] = -202116109;
  v4[536862756] = -202116109;
  v4[536862757] = -202116109;
  v4[536862758] = -202116109;
  *(_QWORD *)(v2 + 368) = s;
  if ( *(_QWORD *)(v2 + 368) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::WeaponType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::WeaponType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[10],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 592),
        (const char (*)[10])byte_1A632920,
        (data::WeaponType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, byte_1A632920);
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[4],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 632),
        (const char (*)[4])off_1A632960,
        (data::WeaponType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, off_1A632960);
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[7],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 672),
        (const char (*)[7])byte_1A6329A0,
        (data::WeaponType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A6329A0);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[10],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 712),
        (const char (*)[10])byte_1A6329E0,
        (data::WeaponType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A6329E0);
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[7],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 752),
        (const char (*)[7])byte_1A632A20,
        (data::WeaponType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A632A20);
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[10],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 792),
        (const char (*)[10])byte_1A632A60,
        (data::WeaponType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A632A60);
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[4],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 832),
        (const char (*)[4])off_1A632AA0,
        (data::WeaponType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, off_1A632AA0);
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[7],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 872),
        (const char (*)[7])byte_1A632AE0,
        (data::WeaponType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A632AE0);
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[7],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 912),
        (const char (*)[7])byte_1A632B20,
        (data::WeaponType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A632B20);
      *(_DWORD *)(v2 + 240) = 10;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[7],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 952),
        (const char (*)[7])byte_1A632B60,
        (data::WeaponType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A632B60);
      *(_DWORD *)(v2 + 256) = 11;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[10],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 992),
        (const char (*)[10])byte_1A632BA0,
        (data::WeaponType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A632BA0);
      *(_DWORD *)(v2 + 272) = 12;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[4],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 1032),
        (const char (*)[4])off_1A632BE0,
        (data::WeaponType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, off_1A632BE0);
      *(_DWORD *)(v2 + 288) = 13;
      std::pair<std::string const,data::WeaponType>::pair<char const(&)[13],data::WeaponType,true>(
        (std::pair<const std::string,data::WeaponType> *const)(v2 + 1072),
        (const char (*)[13])byte_1A632C20,
        (data::WeaponType *)(v2 + 288));
      std::allocator<std::pair<std::string const,data::WeaponType>>::allocator((std::allocator<std::pair<const std::string,data::WeaponType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::WeaponType>::unordered_map(
        &data::enumStrToVal(char const*,data::WeaponType &)::m,
        (std::initializer_list<std::pair<const std::string,data::WeaponType> >)__PAIR128__(13LL, v2 + 592),
        0LL,
        (const std::unordered_map<std::string,data::WeaponType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::WeaponType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::WeaponType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::WeaponType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::WeaponType>::~unordered_map,
        &data::enumStrToVal(char const*,data::WeaponType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::WeaponType>>::~allocator((std::allocator<std::pair<const std::string,data::WeaponType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::WeaponType> *)(v2 + 1112);
            i != (std::pair<const std::string,data::WeaponType> *)(v2 + 592);
            std::pair<std::string const,data::WeaponType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 592, 520LL);
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v7 = *(const char **)(v2 + 368);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 464),
      v7,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 304, v7);
    *(std::unordered_map<std::string,data::WeaponType>::iterator *)(v2 + 304) = std::unordered_map<std::string,data::WeaponType>::find(
                                                                                  &data::enumStrToVal(char const*,data::WeaponType &)::m,
                                                                                  (const std::unordered_map<std::string,data::WeaponType>::key_type *)(v2 + 464));
    std::string::~string((void *)(v2 + 464));
    *(_DWORD *)(((v2 + 464) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 336, v2 + 464);
    *(std::unordered_map<std::string,data::WeaponType>::iterator *)(v2 + 336) = std::unordered_map<std::string,data::WeaponType>::end(&data::enumStrToVal(char const*,data::WeaponType &)::m);
    v8 = (char *)(v2 + 336);
    v9 = std::__detail::operator==<std::pair<std::string const,data::WeaponType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WeaponType>,true> *)(v2 + 304),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WeaponType>,true> *)(v2 + 336));
    *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 528) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 528) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 79) & 7) >= *(_BYTE *)(((v2 + 559) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 528, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 528),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2263);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 528),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 368));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 528));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::WeaponType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::WeaponType>,false,true> *const)(v2 + 304));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 400) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 112 + 31) & 7) >= *(_BYTE *)(((v2 + 431) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 400, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 400),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2239);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 400),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 400));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 156) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1248LL, v17);
  }
  return v14;
};

// Line 2272: range 000000000FA565D0-000000000FA565E6
const char *__cdecl data::getDescription(data::WeaponType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2277: range 000000000FA565E7-000000000FA5679C
bool __cdecl data::isValidWeaponType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::WeaponType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::WeaponType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2278 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidWeaponType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getWeaponTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::WeaponType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::WeaponType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getWeaponTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::WeaponType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::WeaponType,std::pair<std::string,std::string>>::find(
                                                                                                   v6,
                                                                                                   (const std::map<data::WeaponType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2283: range 000000000FA5679D-000000000FA568FE
bool __cdecl data::isValidWeaponTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::WeaponType> *v5; // rcx
  const std::unordered_map<std::string,data::WeaponType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidWeaponTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getWeaponTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::WeaponType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::WeaponType>::end(v5);
  v6 = data::getWeaponTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::WeaponType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::WeaponType>::find(
                                                                                     v6,
                                                                                     name);
  result = std::__detail::operator!=<std::pair<std::string const,data::WeaponType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WeaponType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WeaponType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2288: range 000000000FA568FF-000000000FA573B8
const std::unordered_map<std::string,data::WeaponType> *__cdecl data::getWeaponTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::WeaponType> *i; // r14
  char v6[1040]; // [rsp+10h] [rbp-410h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(992LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "18 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 560 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getWeaponTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = 61956;
  v3[536862747] = -202116109;
  v3[536862748] = -202116109;
  v3[536862749] = -202116109;
  v3[536862750] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getWeaponTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getWeaponTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[12],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 304),
      (const char (*)[12])"WEAPON_NONE",
      (data::WeaponType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "WEAPON_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[22],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 344),
      (const char (*)[22])"WEAPON_SWORD_ONE_HAND",
      (data::WeaponType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "WEAPON_SWORD_ONE_HAND");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[16],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 384),
      (const char (*)[16])"WEAPON_CROSSBOW",
      (data::WeaponType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "WEAPON_CROSSBOW");
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[13],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 424),
      (const char (*)[13])"WEAPON_STAFF",
      (data::WeaponType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "WEAPON_STAFF");
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[21],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 464),
      (const char (*)[21])"WEAPON_DOUBLE_DAGGER",
      (data::WeaponType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "WEAPON_DOUBLE_DAGGER");
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[14],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 504),
      (const char (*)[14])"WEAPON_KATANA",
      (data::WeaponType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "WEAPON_KATANA");
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[16],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 544),
      (const char (*)[16])"WEAPON_SHURIKEN",
      (data::WeaponType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "WEAPON_SHURIKEN");
    *(_DWORD *)(v1 + 192) = 7;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[13],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 584),
      (const char (*)[13])"WEAPON_STICK",
      (data::WeaponType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "WEAPON_STICK");
    *(_DWORD *)(v1 + 208) = 8;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[13],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 624),
      (const char (*)[13])"WEAPON_SPEAR",
      (data::WeaponType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "WEAPON_SPEAR");
    *(_DWORD *)(v1 + 224) = 9;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[20],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 664),
      (const char (*)[20])"WEAPON_SHIELD_SMALL",
      (data::WeaponType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "WEAPON_SHIELD_SMALL");
    *(_DWORD *)(v1 + 240) = 10;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[16],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 704),
      (const char (*)[16])"WEAPON_CATALYST",
      (data::WeaponType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "WEAPON_CATALYST");
    *(_DWORD *)(v1 + 256) = 11;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[16],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 744),
      (const char (*)[16])"WEAPON_CLAYMORE",
      (data::WeaponType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "WEAPON_CLAYMORE");
    *(_DWORD *)(v1 + 272) = 12;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[11],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 784),
      (const char (*)[11])"WEAPON_BOW",
      (data::WeaponType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "WEAPON_BOW");
    *(_DWORD *)(v1 + 288) = 13;
    std::pair<std::string const,data::WeaponType>::pair<char const(&)[12],data::WeaponType,true>(
      (std::pair<const std::string,data::WeaponType> *const)(v1 + 824),
      (const char (*)[12])"WEAPON_POLE",
      (data::WeaponType *)(v1 + 288));
    std::allocator<std::pair<std::string const,data::WeaponType>>::allocator((std::allocator<std::pair<const std::string,data::WeaponType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::WeaponType>::unordered_map(
      &data::getWeaponTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::WeaponType> >)__PAIR128__(14LL, v1 + 304),
      0LL,
      (const std::unordered_map<std::string,data::WeaponType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::WeaponType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::WeaponType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getWeaponTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::WeaponType>::~unordered_map,
      &data::getWeaponTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::WeaponType>>::~allocator((std::allocator<std::pair<const std::string,data::WeaponType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::WeaponType> *)(v1 + 864);
          i != (std::pair<const std::string,data::WeaponType> *)(v1 + 304);
          std::pair<std::string const,data::WeaponType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8074) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 124) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8078) = -168430091;
  }
  return &data::getWeaponTypeNameMap[abi:cxx11](void)::m;
};

// Line 2310: range 000000000FA573B9-000000000FA58749
const std::map<data::WeaponType,std::pair<std::string,std::string >> *__cdecl data::getWeaponTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::WeaponType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  char v19[2832]; // [rsp+10h] [rbp-B10h] BYREF

  v1 = (unsigned __int64)v19;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_6(2784LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "31 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 64 9 <unknown> 400 64 9 <unknown> 496 64 9 <unknown> 592 64 9 <unknown> 688 64 9 <unknown> 78"
                        "4 64 9 <unknown> 880 64 9 <unknown> 976 64 9 <unknown> 1072 64 9 <unknown> 1168 64 9 <unknown> 1"
                        "264 64 9 <unknown> 1360 64 9 <unknown> 1456 64 9 <unknown> 1552 64 9 <unknown> 1648 1008 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getWeaponTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = 61956;
  v3[536862731] = -219021312;
  v3[536862732] = 62194;
  v3[536862734] = -219021312;
  v3[536862735] = 62194;
  v3[536862737] = -219021312;
  v3[536862738] = 62194;
  v3[536862740] = -219021312;
  v3[536862741] = 62194;
  v3[536862743] = -219021312;
  v3[536862744] = 62194;
  v3[536862746] = -219021312;
  v3[536862747] = 62194;
  v3[536862749] = -219021312;
  v3[536862750] = 62194;
  v3[536862752] = -219021312;
  v3[536862753] = 62194;
  v3[536862755] = -219021312;
  v3[536862756] = 62194;
  v3[536862758] = -219021312;
  v3[536862759] = 62194;
  v3[536862761] = -219021312;
  v3[536862762] = 62194;
  v3[536862764] = -219021312;
  v3[536862765] = 62194;
  v3[536862767] = -219021312;
  v3[536862768] = 62194;
  v3[536862770] = -219021312;
  v3[536862771] = 62194;
  v3[536862803] = -202116109;
  v3[536862804] = -202116109;
  v3[536862805] = -202116109;
  v3[536862806] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getWeaponTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getWeaponTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[12],true>(
      (std::pair<std::string,std::string > *const)(v1 + 304),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[12])"WEAPON_NONE");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 1648),
      (data::WeaponType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 400),
      (const char (*)[10])byte_1A632920,
      (const char (*)[22])"WEAPON_SWORD_ONE_HAND");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 1720),
      (data::WeaponType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 496),
      (const char (*)[4])off_1A632960,
      (const char (*)[16])"WEAPON_CROSSBOW");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 1792),
      (data::WeaponType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 592),
      (const char (*)[7])byte_1A6329A0,
      (const char (*)[13])"WEAPON_STAFF");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 1864),
      (data::WeaponType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 688),
      (const char (*)[10])byte_1A6329E0,
      (const char (*)[21])"WEAPON_DOUBLE_DAGGER");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 1936),
      (data::WeaponType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 784),
      (const char (*)[7])byte_1A632A20,
      (const char (*)[14])"WEAPON_KATANA");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2008),
      (data::WeaponType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 880),
      (const char (*)[10])byte_1A632A60,
      (const char (*)[16])"WEAPON_SHURIKEN");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2080),
      (data::WeaponType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 880));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 976),
      (const char (*)[4])off_1A632AA0,
      (const char (*)[13])"WEAPON_STICK");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2152),
      (data::WeaponType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 976));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1072),
      (const char (*)[7])byte_1A632AE0,
      (const char (*)[13])"WEAPON_SPEAR");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2224),
      (data::WeaponType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 1072));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1168),
      (const char (*)[7])byte_1A632B20,
      (const char (*)[20])"WEAPON_SHIELD_SMALL");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2296),
      (data::WeaponType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 1168));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1264),
      (const char (*)[7])byte_1A632B60,
      (const char (*)[16])"WEAPON_CATALYST");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2368),
      (data::WeaponType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 1264));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1360),
      (const char (*)[10])byte_1A632BA0,
      (const char (*)[16])"WEAPON_CLAYMORE");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2440),
      (data::WeaponType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 1360));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[11],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1456),
      (const char (*)[4])off_1A632BE0,
      (const char (*)[11])"WEAPON_BOW");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2512),
      (data::WeaponType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 1456));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 13;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[12],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1552),
      (const char (*)[13])byte_1A632C20,
      (const char (*)[12])"WEAPON_POLE");
    std::pair<data::WeaponType const,std::pair<std::string,std::string>>::pair<data::WeaponType,true>(
      (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *const)(v1 + 2584),
      (data::WeaponType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 1552));
    std::allocator<std::pair<data::WeaponType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::WeaponType,std::pair<std::string,std::string>>::map(
      &data::getWeaponTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::WeaponType,std::pair<std::string,std::string > > >)__PAIR128__(14LL, v1 + 1648),
      (const std::less<data::WeaponType> *)(v1 + 48),
      (const std::map<data::WeaponType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getWeaponTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::WeaponType,std::pair<std::string,std::string>>::~map,
      &data::getWeaponTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::WeaponType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::WeaponType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *)(v1 + 2656);
          i != (std::pair<const data::WeaponType,std::pair<std::string,std::string > > *)(v1 + 1648);
          std::pair<data::WeaponType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 1648, 1008LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1552));
    v5 = (_DWORD *)(((v1 + 1552) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1456));
    v6 = (_DWORD *)(((v1 + 1456) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1360));
    v7 = (_DWORD *)(((v1 + 1360) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1264));
    v8 = (_DWORD *)(((v1 + 1264) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1168));
    v9 = (_DWORD *)(((v1 + 1168) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1072));
    v10 = (_DWORD *)(((v1 + 1072) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 976));
    v11 = (_DWORD *)(((v1 + 976) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 880));
    v12 = (_DWORD *)(((v1 + 880) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 784));
    v13 = (_DWORD *)(((v1 + 784) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 688));
    v14 = (_DWORD *)(((v1 + 688) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 592));
    v15 = (_DWORD *)(((v1 + 592) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 496));
    v16 = (_DWORD *)(((v1 + 496) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 400));
    v17 = (_DWORD *)(((v1 + 400) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 304));
  }
  if ( v19 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8154) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 348) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_6(v1, 2784LL, v19);
  }
  return &data::getWeaponTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2332: range 000000000FA5874A-000000000FA58ABD
const char *__fastcall data::enumValToStr(data::DungeonPlayType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::DungeonPlayType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2331 64 8 9 iter:2334 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getDungeonPlayTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::DungeonPlayType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::DungeonPlayType,std::pair<std::string,std::string>>::find(map, (const std::map<data::DungeonPlayType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::DungeonPlayType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::DungeonPlayType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2337);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_DungeonPlayType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2344: range 000000000FA58ABE-000000000FA59076
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::DungeonPlayType>,false,true>::pointer v10; // rax
  data::DungeonPlayType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::DungeonPlayType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2353 96 8 9 <unknown> 128 8 6 s:2343 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getDungeonPlayTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::DungeonPlayType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::DungeonPlayType>::find(
                                                                                            m,
                                                                                            (const std::unordered_map<std::string,data::DungeonPlayType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::DungeonPlayType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::DungeonPlayType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::DungeonPlayType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DungeonPlayType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DungeonPlayType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2356);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::DungeonPlayType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::DungeonPlayType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2347);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2365: range 000000000FA59077-000000000FA59AD2
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::DungeonPlayType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::DungeonPlayType>,false,true>::pointer v12; // rax
  data::DungeonPlayType second; // ecx
  char v14; // dl
  char v16[656]; // [rsp+20h] [rbp-290h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 8 7 it:2379 192 8 9 <unknown> 224 8 6 s:2364 256 32 9 <unknown>"
                        " 320 32 9 <unknown> 384 32 9 <unknown> 448 120 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862737] = -218103808;
  v4[536862738] = -202116109;
  *(_QWORD *)(v2 + 224) = s;
  if ( *(_QWORD *)(v2 + 224) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::DungeonPlayType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::DungeonPlayType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::DungeonPlayType>::pair<char const(&)[13],data::DungeonPlayType,true>(
        (std::pair<const std::string,data::DungeonPlayType> *const)(v2 + 448),
        (const char (*)[13])byte_1A6335C0,
        (data::DungeonPlayType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A6335C0);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::DungeonPlayType>::pair<char const(&)[13],data::DungeonPlayType,true>(
        (std::pair<const std::string,data::DungeonPlayType> *const)(v2 + 488),
        (const char (*)[13])byte_1A633600,
        (data::DungeonPlayType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A633600);
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::DungeonPlayType>::pair<char const(&)[13],data::DungeonPlayType,true>(
        (std::pair<const std::string,data::DungeonPlayType> *const)(v2 + 528),
        (const char (*)[13])byte_1A633640,
        (data::DungeonPlayType *)(v2 + 144));
      std::allocator<std::pair<std::string const,data::DungeonPlayType>>::allocator((std::allocator<std::pair<const std::string,data::DungeonPlayType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::DungeonPlayType>::unordered_map(
        &data::enumStrToVal(char const*,data::DungeonPlayType &)::m,
        (std::initializer_list<std::pair<const std::string,data::DungeonPlayType> >)__PAIR128__(3LL, v2 + 448),
        0LL,
        (const std::unordered_map<std::string,data::DungeonPlayType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::DungeonPlayType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::DungeonPlayType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::DungeonPlayType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::DungeonPlayType>::~unordered_map,
        &data::enumStrToVal(char const*,data::DungeonPlayType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::DungeonPlayType>>::~allocator((std::allocator<std::pair<const std::string,data::DungeonPlayType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::DungeonPlayType> *)(v2 + 568);
            i != (std::pair<const std::string,data::DungeonPlayType> *)(v2 + 448);
            std::pair<std::string const,data::DungeonPlayType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 448) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_WORD *)(v7 + 12) = -1800;
      *(_BYTE *)(v7 + 14) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 224);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v8);
    *(std::unordered_map<std::string,data::DungeonPlayType>::iterator *)(v2 + 160) = std::unordered_map<std::string,data::DungeonPlayType>::find(
                                                                                       &data::enumStrToVal(char const*,data::DungeonPlayType &)::m,
                                                                                       (const std::unordered_map<std::string,data::DungeonPlayType>::key_type *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v2 + 320);
    *(std::unordered_map<std::string,data::DungeonPlayType>::iterator *)(v2 + 192) = std::unordered_map<std::string,data::DungeonPlayType>::end(&data::enumStrToVal(char const*,data::DungeonPlayType &)::m);
    v9 = (char *)(v2 + 192);
    v10 = std::__detail::operator==<std::pair<std::string const,data::DungeonPlayType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DungeonPlayType>,true> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DungeonPlayType>,true> *)(v2 + 192));
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2382);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 384),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 224));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::DungeonPlayType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::DungeonPlayType>,false,true> *const)(v2 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2368);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 2391: range 000000000FA59AD3-000000000FA59AE9
const char *__cdecl data::getDescription(data::DungeonPlayType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2396: range 000000000FA59AEA-000000000FA59C9F
bool __cdecl data::isValidDungeonPlayType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::DungeonPlayType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::DungeonPlayType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2397 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidDungeonPlayType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getDungeonPlayTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::DungeonPlayType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::DungeonPlayType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getDungeonPlayTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::DungeonPlayType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::DungeonPlayType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::DungeonPlayType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2402: range 000000000FA59CA0-000000000FA59E01
bool __cdecl data::isValidDungeonPlayTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::DungeonPlayType> *v5; // rcx
  const std::unordered_map<std::string,data::DungeonPlayType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidDungeonPlayTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getDungeonPlayTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::DungeonPlayType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::DungeonPlayType>::end(v5);
  v6 = data::getDungeonPlayTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::DungeonPlayType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::DungeonPlayType>::find(
                                                                                          v6,
                                                                                          name);
  result = std::__detail::operator!=<std::pair<std::string const,data::DungeonPlayType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DungeonPlayType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::DungeonPlayType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2407: range 000000000FA59E02-000000000FA5A361
const std::unordered_map<std::string,data::DungeonPlayType> *__cdecl data::getDungeonPlayTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::DungeonPlayType> *i; // r14
  const std::unordered_map<std::string,data::DungeonPlayType> *result; // rax
  char v6[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(384LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "8 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9 "
                        "<unknown> 144 4 9 <unknown> 160 160 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getDungeonPlayTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862730] = -202116109;
  v3[536862731] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getDungeonPlayTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getDungeonPlayTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::DungeonPlayType>::pair<char const(&)[23],data::DungeonPlayType,true>(
      (std::pair<const std::string,data::DungeonPlayType> *const)(v1 + 160),
      (const char (*)[23])"DUNGEON_PLAY_TYPE_NONE",
      (data::DungeonPlayType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "DUNGEON_PLAY_TYPE_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::DungeonPlayType>::pair<char const(&)[29],data::DungeonPlayType,true>(
      (std::pair<const std::string,data::DungeonPlayType> *const)(v1 + 200),
      (const char (*)[29])"DUNGEON_PLAY_TYPE_FOGGY_MAZE",
      (data::DungeonPlayType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "DUNGEON_PLAY_TYPE_FOGGY_MAZE");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::DungeonPlayType>::pair<char const(&)[31],data::DungeonPlayType,true>(
      (std::pair<const std::string,data::DungeonPlayType> *const)(v1 + 240),
      (const char (*)[31])"DUNGEON_PLAY_TYPE_TRIAL_AVATAR",
      (data::DungeonPlayType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "DUNGEON_PLAY_TYPE_TRIAL_AVATAR");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::DungeonPlayType>::pair<char const(&)[29],data::DungeonPlayType,true>(
      (std::pair<const std::string,data::DungeonPlayType> *const)(v1 + 280),
      (const char (*)[29])"DUNGEON_PLAY_TYPE_MIST_TRIAL",
      (data::DungeonPlayType *)(v1 + 144));
    std::allocator<std::pair<std::string const,data::DungeonPlayType>>::allocator((std::allocator<std::pair<const std::string,data::DungeonPlayType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::DungeonPlayType>::unordered_map(
      &data::getDungeonPlayTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::DungeonPlayType> >)__PAIR128__(4LL, v1 + 160),
      0LL,
      (const std::unordered_map<std::string,data::DungeonPlayType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::DungeonPlayType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::DungeonPlayType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getDungeonPlayTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::DungeonPlayType>::~unordered_map,
      &data::getDungeonPlayTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::DungeonPlayType>>::~allocator((std::allocator<std::pair<const std::string,data::DungeonPlayType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::DungeonPlayType> *)(v1 + 320);
          i != (std::pair<const std::string,data::DungeonPlayType> *)(v1 + 160);
          std::pair<std::string const,data::DungeonPlayType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getDungeonPlayTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2419: range 000000000FA5A362-000000000FA5AB32
const std::map<data::DungeonPlayType,std::pair<std::string,std::string >> *__cdecl data::getDungeonPlayTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[912]; // [rsp+10h] [rbp-390h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(864LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 64 9 <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 64 9 <unknown> 512 288 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getDungeonPlayTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862735] = -218959118;
  v3[536862745] = -202116109;
  v3[536862746] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getDungeonPlayTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getDungeonPlayTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[23])"DUNGEON_PLAY_TYPE_NONE");
    std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>::pair<data::DungeonPlayType,true>(
      (std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > *const)(v1 + 512),
      (data::DungeonPlayType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[13])byte_1A6335C0,
      (const char (*)[29])"DUNGEON_PLAY_TYPE_FOGGY_MAZE");
    std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>::pair<data::DungeonPlayType,true>(
      (std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > *const)(v1 + 584),
      (data::DungeonPlayType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[13])byte_1A633600,
      (const char (*)[31])"DUNGEON_PLAY_TYPE_TRIAL_AVATAR");
    std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>::pair<data::DungeonPlayType,true>(
      (std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > *const)(v1 + 656),
      (data::DungeonPlayType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 416),
      (const char (*)[13])byte_1A633640,
      (const char (*)[29])"DUNGEON_PLAY_TYPE_MIST_TRIAL");
    std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>::pair<data::DungeonPlayType,true>(
      (std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > *const)(v1 + 728),
      (data::DungeonPlayType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 416));
    std::allocator<std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::DungeonPlayType,std::pair<std::string,std::string>>::map(
      &data::getDungeonPlayTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > >)__PAIR128__(4LL, v1 + 512),
      (const std::less<data::DungeonPlayType> *)(v1 + 32),
      (const std::map<data::DungeonPlayType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getDungeonPlayTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::DungeonPlayType,std::pair<std::string,std::string>>::~map,
      &data::getDungeonPlayTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > *)(v1 + 800);
          i != (std::pair<const data::DungeonPlayType,std::pair<std::string,std::string > > *)(v1 + 512);
          std::pair<data::DungeonPlayType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 512, 288LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 416));
    v5 = (_DWORD *)(((v1 + 416) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8064) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 108) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8068) = -168430091;
  }
  return &data::getDungeonPlayTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2431: range 000000000FA5AB33-000000000FA5AEA6
const char *__fastcall data::enumValToStr(data::VisionLevelType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::VisionLevelType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2430 64 8 9 iter:2433 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getVisionLevelTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::VisionLevelType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::VisionLevelType,std::pair<std::string,std::string>>::find(map, (const std::map<data::VisionLevelType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::VisionLevelType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::VisionLevelType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2436);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_VisionLevelType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2443: range 000000000FA5AEA7-000000000FA5B45F
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::VisionLevelType>,false,true>::pointer v10; // rax
  data::VisionLevelType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::VisionLevelType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2452 96 8 9 <unknown> 128 8 6 s:2442 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getVisionLevelTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::VisionLevelType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::VisionLevelType>::find(
                                                                                            m,
                                                                                            (const std::unordered_map<std::string,data::VisionLevelType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::VisionLevelType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::VisionLevelType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::VisionLevelType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::VisionLevelType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::VisionLevelType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2455);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::VisionLevelType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::VisionLevelType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2446);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2464: range 000000000FA5B460-000000000FA5C0E2
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::VisionLevelType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::VisionLevelType>,false,true>::pointer v12; // rax
  data::VisionLevelType second; // ecx
  char v14; // dl
  char v16[848]; // [rsp+20h] [rbp-350h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(800LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 8 7 it:24"
                        "81 240 8 9 <unknown> 272 8 6 s:2463 304 32 9 <unknown> 368 32 9 <unknown> 432 32 9 <unknown> 496"
                        " 240 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = 61956;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862727] = -234881024;
  v4[536862728] = 62194;
  v4[536862728] = -234881024;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862734] = -219021312;
  v4[536862735] = 62194;
  v4[536862743] = -202116109;
  v4[536862744] = -202116109;
  *(_QWORD *)(v2 + 272) = s;
  if ( *(_QWORD *)(v2 + 272) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::VisionLevelType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::VisionLevelType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 0;
      std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[13],data::VisionLevelType,true>(
        (std::pair<const std::string,data::VisionLevelType> *const)(v2 + 496),
        (const char (*)[13])byte_1A633A20,
        (data::VisionLevelType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A633A20);
      *(_DWORD *)(v2 + 128) = 1;
      std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[13],data::VisionLevelType,true>(
        (std::pair<const std::string,data::VisionLevelType> *const)(v2 + 536),
        (const char (*)[13])byte_1A633A60,
        (data::VisionLevelType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A633A60);
      *(_DWORD *)(v2 + 144) = 2;
      std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[10],data::VisionLevelType,true>(
        (std::pair<const std::string,data::VisionLevelType> *const)(v2 + 576),
        (const char (*)[10])byte_1A633AA0,
        (data::VisionLevelType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A633AA0);
      *(_DWORD *)(v2 + 160) = 3;
      std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[13],data::VisionLevelType,true>(
        (std::pair<const std::string,data::VisionLevelType> *const)(v2 + 616),
        (const char (*)[13])byte_1A633AE0,
        (data::VisionLevelType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A633AE0);
      *(_DWORD *)(v2 + 176) = 4;
      std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[10],data::VisionLevelType,true>(
        (std::pair<const std::string,data::VisionLevelType> *const)(v2 + 656),
        (const char (*)[10])byte_1A633B20,
        (data::VisionLevelType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A633B20);
      *(_DWORD *)(v2 + 192) = 5;
      std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[13],data::VisionLevelType,true>(
        (std::pair<const std::string,data::VisionLevelType> *const)(v2 + 696),
        (const char (*)[13])byte_1A633B60,
        (data::VisionLevelType *)(v2 + 192));
      std::allocator<std::pair<std::string const,data::VisionLevelType>>::allocator((std::allocator<std::pair<const std::string,data::VisionLevelType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::VisionLevelType>::unordered_map(
        &data::enumStrToVal(char const*,data::VisionLevelType &)::m,
        (std::initializer_list<std::pair<const std::string,data::VisionLevelType> >)__PAIR128__(6LL, v2 + 496),
        0LL,
        (const std::unordered_map<std::string,data::VisionLevelType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::VisionLevelType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::VisionLevelType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::VisionLevelType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::VisionLevelType>::~unordered_map,
        &data::enumStrToVal(char const*,data::VisionLevelType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::VisionLevelType>>::~allocator((std::allocator<std::pair<const std::string,data::VisionLevelType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::VisionLevelType> *)(v2 + 736);
            i != (std::pair<const std::string,data::VisionLevelType> *)(v2 + 496);
            std::pair<std::string const,data::VisionLevelType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 496) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_DWORD *)(v7 + 12) = -117901064;
      *(_DWORD *)(v7 + 16) = -117901064;
      *(_DWORD *)(v7 + 20) = -117901064;
      *(_DWORD *)(v7 + 24) = -117901064;
      *(_WORD *)(v7 + 28) = -1800;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 272);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 368),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 208, v8);
    *(std::unordered_map<std::string,data::VisionLevelType>::iterator *)(v2 + 208) = std::unordered_map<std::string,data::VisionLevelType>::find(
                                                                                       &data::enumStrToVal(char const*,data::VisionLevelType &)::m,
                                                                                       (const std::unordered_map<std::string,data::VisionLevelType>::key_type *)(v2 + 368));
    std::string::~string((void *)(v2 + 368));
    *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 240, v2 + 368);
    *(std::unordered_map<std::string,data::VisionLevelType>::iterator *)(v2 + 240) = std::unordered_map<std::string,data::VisionLevelType>::end(&data::enumStrToVal(char const*,data::VisionLevelType &)::m);
    v9 = (char *)(v2 + 240);
    v10 = std::__detail::operator==<std::pair<std::string const,data::VisionLevelType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::VisionLevelType>,true> *)(v2 + 208),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::VisionLevelType>,true> *)(v2 + 240));
    *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 432) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 432) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 463) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 432, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 432),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2484);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 432),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 272));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 432));
      LODWORD(result) = -1;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::VisionLevelType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::VisionLevelType>,false,true> *const)(v2 + 208));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      LODWORD(result) = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 304) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 335) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 304, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 304),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2467);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 304),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 304));
    LODWORD(result) = -1;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = -168430091;
  }
  return (unsigned int)result;
};

// Line 2493: range 000000000FA5C0E3-000000000FA5C0F9
const char *__cdecl data::getDescription(data::VisionLevelType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2498: range 000000000FA5C0FA-000000000FA5C2AF
bool __cdecl data::isValidVisionLevelType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::VisionLevelType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::VisionLevelType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2499 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidVisionLevelType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getVisionLevelTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::VisionLevelType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::VisionLevelType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getVisionLevelTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::VisionLevelType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::VisionLevelType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::VisionLevelType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2504: range 000000000FA5C2B0-000000000FA5C411
bool __cdecl data::isValidVisionLevelTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::VisionLevelType> *v5; // rcx
  const std::unordered_map<std::string,data::VisionLevelType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidVisionLevelTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getVisionLevelTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::VisionLevelType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::VisionLevelType>::end(v5);
  v6 = data::getVisionLevelTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::VisionLevelType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::VisionLevelType>::find(
                                                                                          v6,
                                                                                          name);
  result = std::__detail::operator!=<std::pair<std::string const,data::VisionLevelType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::VisionLevelType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::VisionLevelType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2509: range 000000000FA5C412-000000000FA5CB1B
const std::unordered_map<std::string,data::VisionLevelType> *__cdecl data::getVisionLevelTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::VisionLevelType> *i; // r14
  const std::unordered_map<std::string,data::VisionLevelType> *result; // rax
  char v6[592]; // [rsp+10h] [rbp-250h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(544LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 280 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getVisionLevelTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862734] = -218103808;
  v3[536862735] = -202116109;
  v3[536862736] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getVisionLevelTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getVisionLevelTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[20],data::VisionLevelType,true>(
      (std::pair<const std::string,data::VisionLevelType> *const)(v1 + 192),
      (const char (*)[20])"VISION_LEVEL_NORMAL",
      (data::VisionLevelType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "VISION_LEVEL_NORMAL");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[27],data::VisionLevelType,true>(
      (std::pair<const std::string,data::VisionLevelType> *const)(v1 + 232),
      (const char (*)[27])"VISION_LEVEL_LITTLE_REMOTE",
      (data::VisionLevelType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "VISION_LEVEL_LITTLE_REMOTE");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[20],data::VisionLevelType,true>(
      (std::pair<const std::string,data::VisionLevelType> *const)(v1 + 272),
      (const char (*)[20])"VISION_LEVEL_REMOTE",
      (data::VisionLevelType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "VISION_LEVEL_REMOTE");
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[19],data::VisionLevelType,true>(
      (std::pair<const std::string,data::VisionLevelType> *const)(v1 + 312),
      (const char (*)[19])"VISION_LEVEL_SUPER",
      (data::VisionLevelType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "VISION_LEVEL_SUPER");
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[20],data::VisionLevelType,true>(
      (std::pair<const std::string,data::VisionLevelType> *const)(v1 + 352),
      (const char (*)[20])"VISION_LEVEL_NEARBY",
      (data::VisionLevelType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "VISION_LEVEL_NEARBY");
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[26],data::VisionLevelType,true>(
      (std::pair<const std::string,data::VisionLevelType> *const)(v1 + 392),
      (const char (*)[26])"VISION_LEVEL_SUPER_NEARBY",
      (data::VisionLevelType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "VISION_LEVEL_SUPER_NEARBY");
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string const,data::VisionLevelType>::pair<char const(&)[17],data::VisionLevelType,true>(
      (std::pair<const std::string,data::VisionLevelType> *const)(v1 + 432),
      (const char (*)[17])"VISION_LEVEL_NUM",
      (data::VisionLevelType *)(v1 + 176));
    std::allocator<std::pair<std::string const,data::VisionLevelType>>::allocator((std::allocator<std::pair<const std::string,data::VisionLevelType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::VisionLevelType>::unordered_map(
      &data::getVisionLevelTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::VisionLevelType> >)__PAIR128__(7LL, v1 + 192),
      0LL,
      (const std::unordered_map<std::string,data::VisionLevelType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::VisionLevelType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::VisionLevelType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getVisionLevelTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::VisionLevelType>::~unordered_map,
      &data::getVisionLevelTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::VisionLevelType>>::~allocator((std::allocator<std::pair<const std::string,data::VisionLevelType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::VisionLevelType> *)(v1 + 472);
          i != (std::pair<const std::string,data::VisionLevelType> *)(v1 + 192);
          std::pair<std::string const,data::VisionLevelType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getVisionLevelTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 2524: range 000000000FA5CB1C-000000000FA5D5EF
const std::map<data::VisionLevelType,std::pair<std::string,std::string >> *__cdecl data::getVisionLevelTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  char v12[1488]; // [rsp+10h] [rbp-5D0h] BYREF

  v1 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1440LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 64 9 <unknown> 288 64 9 <un"
                        "known> 384 64 9 <unknown> 480 64 9 <unknown> 576 64 9 <unknown> 672 64 9 <unknown> 768 64 9 <unk"
                        "nown> 864 504 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getVisionLevelTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862728] = -218959118;
  v3[536862731] = -218959118;
  v3[536862734] = -218959118;
  v3[536862737] = -218959118;
  v3[536862740] = -218959118;
  v3[536862743] = -218959118;
  v3[536862746] = -218959118;
  v3[536862762] = -218103808;
  v3[536862763] = -202116109;
  v3[536862764] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getVisionLevelTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getVisionLevelTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 192),
      (const char (*)[13])byte_1A633A20,
      (const char (*)[20])"VISION_LEVEL_NORMAL");
    std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::pair<data::VisionLevelType,true>(
      (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *const)(v1 + 864),
      (data::VisionLevelType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 288),
      (const char (*)[13])byte_1A633A60,
      (const char (*)[27])"VISION_LEVEL_LITTLE_REMOTE");
    std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::pair<data::VisionLevelType,true>(
      (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *const)(v1 + 936),
      (data::VisionLevelType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 384),
      (const char (*)[10])byte_1A633AA0,
      (const char (*)[20])"VISION_LEVEL_REMOTE");
    std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::pair<data::VisionLevelType,true>(
      (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *const)(v1 + 1008),
      (data::VisionLevelType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 480),
      (const char (*)[13])byte_1A633AE0,
      (const char (*)[19])"VISION_LEVEL_SUPER");
    std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::pair<data::VisionLevelType,true>(
      (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *const)(v1 + 1080),
      (data::VisionLevelType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 576),
      (const char (*)[10])byte_1A633B20,
      (const char (*)[20])"VISION_LEVEL_NEARBY");
    std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::pair<data::VisionLevelType,true>(
      (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *const)(v1 + 1152),
      (data::VisionLevelType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 672),
      (const char (*)[13])byte_1A633B60,
      (const char (*)[26])"VISION_LEVEL_SUPER_NEARBY");
    std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::pair<data::VisionLevelType,true>(
      (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *const)(v1 + 1224),
      (data::VisionLevelType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 768),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[17])"VISION_LEVEL_NUM");
    std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::pair<data::VisionLevelType,true>(
      (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *const)(v1 + 1296),
      (data::VisionLevelType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 768));
    std::allocator<std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::VisionLevelType,std::pair<std::string,std::string>>::map(
      &data::getVisionLevelTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > >)__PAIR128__(7LL, v1 + 864),
      (const std::less<data::VisionLevelType> *)(v1 + 48),
      (const std::map<data::VisionLevelType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getVisionLevelTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::VisionLevelType,std::pair<std::string,std::string>>::~map,
      &data::getVisionLevelTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *)(v1 + 1368);
          i != (std::pair<const data::VisionLevelType,std::pair<std::string,std::string > > *)(v1 + 864);
          std::pair<data::VisionLevelType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 864, 504LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 768));
    v5 = (_DWORD *)(((v1 + 768) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 672));
    v6 = (_DWORD *)(((v1 + 672) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 576));
    v7 = (_DWORD *)(((v1 + 576) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 480));
    v8 = (_DWORD *)(((v1 + 480) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 384));
    v9 = (_DWORD *)(((v1 + 384) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 288));
    v10 = (_DWORD *)(((v1 + 288) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 192));
  }
  if ( v12 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF80AC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 180) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1440LL, v12);
  }
  return &data::getVisionLevelTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2539: range 000000000FA5D5F0-000000000FA5D963
const char *__fastcall data::enumValToStr(data::RoundType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::RoundType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::RoundType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2538 64 8 9 iter:2541 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getRoundTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::RoundType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::RoundType,std::pair<std::string,std::string>>::find(
                                                                                                  map,
                                                                                                  (const std::map<data::RoundType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::RoundType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::RoundType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::RoundType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::RoundType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2544);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_RoundType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::RoundType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::RoundType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2551: range 000000000FA5D964-000000000FA5DF1C
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::RoundType>,false,true>::pointer v10; // rax
  data::RoundType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::RoundType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2560 96 8 9 <unknown> 128 8 6 s:2550 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getRoundTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::RoundType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::RoundType>::find(
                                                                                      m,
                                                                                      (const std::unordered_map<std::string,data::RoundType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::RoundType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::RoundType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::RoundType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::RoundType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::RoundType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2563);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::RoundType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::RoundType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2554);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2572: range 000000000FA5DF1D-000000000FA5E978
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::RoundType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::RoundType>,false,true>::pointer v12; // rax
  data::RoundType second; // ecx
  char v14; // dl
  char v16[656]; // [rsp+20h] [rbp-290h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 8 7 it:2586 192 8 9 <unknown> 224 8 6 s:2571 256 32 9 <unknown>"
                        " 320 32 9 <unknown> 384 32 9 <unknown> 448 120 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862737] = -218103808;
  v4[536862738] = -202116109;
  *(_QWORD *)(v2 + 224) = s;
  if ( *(_QWORD *)(v2 + 224) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::RoundType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::RoundType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 0;
      std::pair<std::string const,data::RoundType>::pair<char const(&)[13],data::RoundType,true>(
        (std::pair<const std::string,data::RoundType> *const)(v2 + 448),
        (const char (*)[13])byte_1A633FC0,
        (data::RoundType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A633FC0);
      *(_DWORD *)(v2 + 128) = 1;
      std::pair<std::string const,data::RoundType>::pair<char const(&)[13],data::RoundType,true>(
        (std::pair<const std::string,data::RoundType> *const)(v2 + 488),
        (const char (*)[13])byte_1A634000,
        (data::RoundType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A634000);
      *(_DWORD *)(v2 + 144) = 2;
      std::pair<std::string const,data::RoundType>::pair<char const(&)[13],data::RoundType,true>(
        (std::pair<const std::string,data::RoundType> *const)(v2 + 528),
        (const char (*)[13])byte_1A634040,
        (data::RoundType *)(v2 + 144));
      std::allocator<std::pair<std::string const,data::RoundType>>::allocator((std::allocator<std::pair<const std::string,data::RoundType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::RoundType>::unordered_map(
        &data::enumStrToVal(char const*,data::RoundType &)::m,
        (std::initializer_list<std::pair<const std::string,data::RoundType> >)__PAIR128__(3LL, v2 + 448),
        0LL,
        (const std::unordered_map<std::string,data::RoundType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::RoundType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::RoundType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::RoundType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::RoundType>::~unordered_map,
        &data::enumStrToVal(char const*,data::RoundType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::RoundType>>::~allocator((std::allocator<std::pair<const std::string,data::RoundType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::RoundType> *)(v2 + 568);
            i != (std::pair<const std::string,data::RoundType> *)(v2 + 448);
            std::pair<std::string const,data::RoundType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 448) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_WORD *)(v7 + 12) = -1800;
      *(_BYTE *)(v7 + 14) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 224);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v8);
    *(std::unordered_map<std::string,data::RoundType>::iterator *)(v2 + 160) = std::unordered_map<std::string,data::RoundType>::find(
                                                                                 &data::enumStrToVal(char const*,data::RoundType &)::m,
                                                                                 (const std::unordered_map<std::string,data::RoundType>::key_type *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v2 + 320);
    *(std::unordered_map<std::string,data::RoundType>::iterator *)(v2 + 192) = std::unordered_map<std::string,data::RoundType>::end(&data::enumStrToVal(char const*,data::RoundType &)::m);
    v9 = (char *)(v2 + 192);
    v10 = std::__detail::operator==<std::pair<std::string const,data::RoundType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::RoundType>,true> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::RoundType>,true> *)(v2 + 192));
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2589);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 384),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 224));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::RoundType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::RoundType>,false,true> *const)(v2 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2575);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 2598: range 000000000FA5E979-000000000FA5E98F
const char *__cdecl data::getDescription(data::RoundType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2603: range 000000000FA5E990-000000000FA5EB45
bool __cdecl data::isValidRoundType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::RoundType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::RoundType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2604 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidRoundType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getRoundTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::RoundType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::RoundType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getRoundTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::RoundType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::RoundType,std::pair<std::string,std::string>>::find(
                                                                                                  v6,
                                                                                                  (const std::map<data::RoundType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::RoundType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::RoundType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2609: range 000000000FA5EB46-000000000FA5ECA7
bool __cdecl data::isValidRoundTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::RoundType> *v5; // rcx
  const std::unordered_map<std::string,data::RoundType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidRoundTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getRoundTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::RoundType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::RoundType>::end(v5);
  v6 = data::getRoundTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::RoundType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::RoundType>::find(
                                                                                    v6,
                                                                                    name);
  result = std::__detail::operator!=<std::pair<std::string const,data::RoundType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::RoundType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::RoundType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2614: range 000000000FA5ECA8-000000000FA5F16A
const std::unordered_map<std::string,data::RoundType> *__cdecl data::getRoundTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::RoundType> *i; // r14
  const std::unordered_map<std::string,data::RoundType> *result; // rax
  char v6[336]; // [rsp+10h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <"
                        "unknown> 128 120 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getRoundTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getRoundTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getRoundTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::RoundType>::pair<char const(&)[17],data::RoundType,true>(
      (std::pair<const std::string,data::RoundType> *const)(v1 + 128),
      (const char (*)[17])"ROUND_TYPE_FLOOR",
      (data::RoundType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "ROUND_TYPE_FLOOR");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::RoundType>::pair<char const(&)[17],data::RoundType,true>(
      (std::pair<const std::string,data::RoundType> *const)(v1 + 168),
      (const char (*)[17])"ROUND_TYPE_ROUND",
      (data::RoundType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "ROUND_TYPE_ROUND");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::RoundType>::pair<char const(&)[16],data::RoundType,true>(
      (std::pair<const std::string,data::RoundType> *const)(v1 + 208),
      (const char (*)[16])"ROUND_TYPE_CEIL",
      (data::RoundType *)(v1 + 112));
    std::allocator<std::pair<std::string const,data::RoundType>>::allocator((std::allocator<std::pair<const std::string,data::RoundType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::RoundType>::unordered_map(
      &data::getRoundTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::RoundType> >)__PAIR128__(3LL, v1 + 128),
      0LL,
      (const std::unordered_map<std::string,data::RoundType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::RoundType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::RoundType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getRoundTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::RoundType>::~unordered_map,
      &data::getRoundTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::RoundType>>::~allocator((std::allocator<std::pair<const std::string,data::RoundType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::RoundType> *)(v1 + 248);
          i != (std::pair<const std::string,data::RoundType> *)(v1 + 128);
          std::pair<std::string const,data::RoundType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getRoundTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2625: range 000000000FA5F16B-000000000FA5F869
const std::map<data::RoundType,std::pair<std::string,std::string >> *__cdecl data::getRoundTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::RoundType,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[752]; // [rsp+10h] [rbp-2F0h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(704LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 64 9"
                        " <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 216 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getRoundTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862739] = -218103808;
  v3[536862740] = -202116109;
  v3[536862741] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getRoundTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getRoundTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[13])byte_1A633FC0,
      (const char (*)[17])"ROUND_TYPE_FLOOR");
    std::pair<data::RoundType const,std::pair<std::string,std::string>>::pair<data::RoundType,true>(
      (std::pair<const data::RoundType,std::pair<std::string,std::string > > *const)(v1 + 416),
      (data::RoundType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[13])byte_1A634000,
      (const char (*)[17])"ROUND_TYPE_ROUND");
    std::pair<data::RoundType const,std::pair<std::string,std::string>>::pair<data::RoundType,true>(
      (std::pair<const data::RoundType,std::pair<std::string,std::string > > *const)(v1 + 488),
      (data::RoundType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[13])byte_1A634040,
      (const char (*)[16])"ROUND_TYPE_CEIL");
    std::pair<data::RoundType const,std::pair<std::string,std::string>>::pair<data::RoundType,true>(
      (std::pair<const data::RoundType,std::pair<std::string,std::string > > *const)(v1 + 560),
      (data::RoundType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    std::allocator<std::pair<data::RoundType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::RoundType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::RoundType,std::pair<std::string,std::string>>::map(
      &data::getRoundTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::RoundType,std::pair<std::string,std::string > > >)__PAIR128__(3LL, v1 + 416),
      (const std::less<data::RoundType> *)(v1 + 48),
      (const std::map<data::RoundType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getRoundTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::RoundType,std::pair<std::string,std::string>>::~map,
      &data::getRoundTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::RoundType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::RoundType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::RoundType,std::pair<std::string,std::string > > *)(v1 + 632);
          i != (std::pair<const data::RoundType,std::pair<std::string,std::string > > *)(v1 + 416);
          std::pair<data::RoundType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 416) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_DWORD *)(v5 + 16) = -117901064;
    *(_DWORD *)(v5 + 20) = -117901064;
    *(_WORD *)(v5 + 24) = -1800;
    *(_BYTE *)(v5 + 26) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return &data::getRoundTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2636: range 000000000FA5F86A-000000000FA5FBDD
const char *__fastcall data::enumValToStr(data::ServerBuffType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::ServerBuffType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2635 64 8 9 iter:2638 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getServerBuffTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::ServerBuffType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ServerBuffType,std::pair<std::string,std::string>>::find(map, (const std::map<data::ServerBuffType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::ServerBuffType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ServerBuffType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2641);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_ServerBuffType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2648: range 000000000FA5FBDE-000000000FA60196
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ServerBuffType>,false,true>::pointer v10; // rax
  data::ServerBuffType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::ServerBuffType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2657 96 8 9 <unknown> 128 8 6 s:2647 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getServerBuffTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::ServerBuffType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ServerBuffType>::find(
                                                                                           m,
                                                                                           (const std::unordered_map<std::string,data::ServerBuffType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::ServerBuffType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::ServerBuffType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::ServerBuffType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ServerBuffType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ServerBuffType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2660);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::ServerBuffType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::ServerBuffType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2651);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2669: range 000000000FA60197-000000000FA60BF2
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::ServerBuffType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::ServerBuffType>,false,true>::pointer v12; // rax
  data::ServerBuffType second; // ecx
  char v14; // dl
  char v16[656]; // [rsp+20h] [rbp-290h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "14 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 8 7 it:2683 192 8 9 <unknown> 224 8 6 s:2668 256 32 9 <unknown>"
                        " 320 32 9 <unknown> 384 32 9 <unknown> 448 120 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -218959360;
  v4[536862726] = -218959360;
  v4[536862727] = -218959360;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862737] = -218103808;
  v4[536862738] = -202116109;
  *(_QWORD *)(v2 + 224) = s;
  if ( *(_QWORD *)(v2 + 224) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::ServerBuffType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::ServerBuffType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::ServerBuffType>::pair<char const(&)[11],data::ServerBuffType,true>(
        (std::pair<const std::string,data::ServerBuffType> *const)(v2 + 448),
        (const char (*)[11])"AvatarBuff",
        (data::ServerBuffType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, "AvatarBuff");
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::ServerBuffType>::pair<char const(&)[9],data::ServerBuffType,true>(
        (std::pair<const std::string,data::ServerBuffType> *const)(v2 + 488),
        (const char (*)[9])"TeamBuff",
        (data::ServerBuffType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, "TeamBuff");
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::ServerBuffType>::pair<char const(&)[10],data::ServerBuffType,true>(
        (std::pair<const std::string,data::ServerBuffType> *const)(v2 + 528),
        (const char (*)[10])"TowerBuff",
        (data::ServerBuffType *)(v2 + 144));
      std::allocator<std::pair<std::string const,data::ServerBuffType>>::allocator((std::allocator<std::pair<const std::string,data::ServerBuffType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::ServerBuffType>::unordered_map(
        &data::enumStrToVal(char const*,data::ServerBuffType &)::m,
        (std::initializer_list<std::pair<const std::string,data::ServerBuffType> >)__PAIR128__(3LL, v2 + 448),
        0LL,
        (const std::unordered_map<std::string,data::ServerBuffType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::ServerBuffType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::ServerBuffType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::ServerBuffType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::ServerBuffType>::~unordered_map,
        &data::enumStrToVal(char const*,data::ServerBuffType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ServerBuffType>>::~allocator((std::allocator<std::pair<const std::string,data::ServerBuffType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ServerBuffType> *)(v2 + 568);
            i != (std::pair<const std::string,data::ServerBuffType> *)(v2 + 448);
            std::pair<std::string const,data::ServerBuffType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 448) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_DWORD *)(v7 + 8) = -117901064;
      *(_WORD *)(v7 + 12) = -1800;
      *(_BYTE *)(v7 + 14) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 224);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 160, v8);
    *(std::unordered_map<std::string,data::ServerBuffType>::iterator *)(v2 + 160) = std::unordered_map<std::string,data::ServerBuffType>::find(
                                                                                      &data::enumStrToVal(char const*,data::ServerBuffType &)::m,
                                                                                      (const std::unordered_map<std::string,data::ServerBuffType>::key_type *)(v2 + 320));
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 192, v2 + 320);
    *(std::unordered_map<std::string,data::ServerBuffType>::iterator *)(v2 + 192) = std::unordered_map<std::string,data::ServerBuffType>::end(&data::enumStrToVal(char const*,data::ServerBuffType &)::m);
    v9 = (char *)(v2 + 192);
    v10 = std::__detail::operator==<std::pair<std::string const,data::ServerBuffType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ServerBuffType>,true> *)(v2 + 160),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ServerBuffType>,true> *)(v2 + 192));
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2686);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 384),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 224));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::ServerBuffType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ServerBuffType>,false,true> *const)(v2 + 160));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2672);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 256),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 2695: range 000000000FA60BF3-000000000FA60C09
const char *__cdecl data::getDescription(data::ServerBuffType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2700: range 000000000FA60C0A-000000000FA60DBF
bool __cdecl data::isValidServerBuffType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::ServerBuffType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::ServerBuffType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2701 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidServerBuffType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getServerBuffTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::ServerBuffType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ServerBuffType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getServerBuffTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::ServerBuffType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ServerBuffType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::ServerBuffType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2706: range 000000000FA60DC0-000000000FA60F21
bool __cdecl data::isValidServerBuffTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::ServerBuffType> *v5; // rcx
  const std::unordered_map<std::string,data::ServerBuffType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidServerBuffTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getServerBuffTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::ServerBuffType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ServerBuffType>::end(v5);
  v6 = data::getServerBuffTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::ServerBuffType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::ServerBuffType>::find(
                                                                                         v6,
                                                                                         name);
  result = std::__detail::operator!=<std::pair<std::string const,data::ServerBuffType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ServerBuffType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ServerBuffType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2711: range 000000000FA60F22-000000000FA61481
const std::unordered_map<std::string,data::ServerBuffType> *__cdecl data::getServerBuffTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::ServerBuffType> *i; // r14
  const std::unordered_map<std::string,data::ServerBuffType> *result; // rax
  char v6[432]; // [rsp+10h] [rbp-1B0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(384LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "8 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9 "
                        "<unknown> 144 4 9 <unknown> 160 160 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getServerBuffTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862730] = -202116109;
  v3[536862731] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getServerBuffTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getServerBuffTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::ServerBuffType>::pair<char const(&)[17],data::ServerBuffType,true>(
      (std::pair<const std::string,data::ServerBuffType> *const)(v1 + 160),
      (const char (*)[17])"SERVER_BUFF_NONE",
      (data::ServerBuffType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "SERVER_BUFF_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::ServerBuffType>::pair<char const(&)[19],data::ServerBuffType,true>(
      (std::pair<const std::string,data::ServerBuffType> *const)(v1 + 200),
      (const char (*)[19])"SERVER_BUFF_AVATAR",
      (data::ServerBuffType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "SERVER_BUFF_AVATAR");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::ServerBuffType>::pair<char const(&)[17],data::ServerBuffType,true>(
      (std::pair<const std::string,data::ServerBuffType> *const)(v1 + 240),
      (const char (*)[17])"SERVER_BUFF_TEAM",
      (data::ServerBuffType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "SERVER_BUFF_TEAM");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::ServerBuffType>::pair<char const(&)[18],data::ServerBuffType,true>(
      (std::pair<const std::string,data::ServerBuffType> *const)(v1 + 280),
      (const char (*)[18])"SERVER_BUFF_TOWER",
      (data::ServerBuffType *)(v1 + 144));
    std::allocator<std::pair<std::string const,data::ServerBuffType>>::allocator((std::allocator<std::pair<const std::string,data::ServerBuffType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::ServerBuffType>::unordered_map(
      &data::getServerBuffTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::ServerBuffType> >)__PAIR128__(4LL, v1 + 160),
      0LL,
      (const std::unordered_map<std::string,data::ServerBuffType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::ServerBuffType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::ServerBuffType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getServerBuffTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::ServerBuffType>::~unordered_map,
      &data::getServerBuffTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::ServerBuffType>>::~allocator((std::allocator<std::pair<const std::string,data::ServerBuffType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::ServerBuffType> *)(v1 + 320);
          i != (std::pair<const std::string,data::ServerBuffType> *)(v1 + 160);
          std::pair<std::string const,data::ServerBuffType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getServerBuffTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2723: range 000000000FA61482-000000000FA61C52
const std::map<data::ServerBuffType,std::pair<std::string,std::string >> *__cdecl data::getServerBuffTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[912]; // [rsp+10h] [rbp-390h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(864LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "11 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 64 9 <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 64 9 <unknown> 512 288 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getServerBuffTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862735] = -218959118;
  v3[536862745] = -202116109;
  v3[536862746] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getServerBuffTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getServerBuffTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[17])"SERVER_BUFF_NONE");
    std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>::pair<data::ServerBuffType,true>(
      (std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > *const)(v1 + 512),
      (data::ServerBuffType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[11])"AvatarBuff",
      (const char (*)[19])"SERVER_BUFF_AVATAR");
    std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>::pair<data::ServerBuffType,true>(
      (std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > *const)(v1 + 584),
      (data::ServerBuffType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[9],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[9])"TeamBuff",
      (const char (*)[17])"SERVER_BUFF_TEAM");
    std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>::pair<data::ServerBuffType,true>(
      (std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > *const)(v1 + 656),
      (data::ServerBuffType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 416),
      (const char (*)[10])"TowerBuff",
      (const char (*)[18])"SERVER_BUFF_TOWER");
    std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>::pair<data::ServerBuffType,true>(
      (std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > *const)(v1 + 728),
      (data::ServerBuffType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 416));
    std::allocator<std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::ServerBuffType,std::pair<std::string,std::string>>::map(
      &data::getServerBuffTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > >)__PAIR128__(4LL, v1 + 512),
      (const std::less<data::ServerBuffType> *)(v1 + 32),
      (const std::map<data::ServerBuffType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getServerBuffTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::ServerBuffType,std::pair<std::string,std::string>>::~map,
      &data::getServerBuffTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > *)(v1 + 800);
          i != (std::pair<const data::ServerBuffType,std::pair<std::string,std::string > > *)(v1 + 512);
          std::pair<data::ServerBuffType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 512, 288LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 416));
    v5 = (_DWORD *)(((v1 + 416) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8064) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 108) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8068) = -168430091;
  }
  return &data::getServerBuffTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2735: range 000000000FA61C53-000000000FA61FC6
const char *__fastcall data::enumValToStr(data::WatcherTriggerTraceBackType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2734 64 8 9 iter:2737 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string>>::find(map, (const std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2740);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_WatcherTriggerTraceBackType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::WatcherTriggerTraceBackType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2747: range 000000000FA61FC7-000000000FA6257F
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::WatcherTriggerTraceBackType>,false,true>::pointer v10; // rax
  data::WatcherTriggerTraceBackType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::WatcherTriggerTraceBackType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2756 96 8 9 <unknown> 128 8 6 s:2746 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::find(m, (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::WatcherTriggerTraceBackType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerTraceBackType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerTraceBackType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2759);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::WatcherTriggerTraceBackType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::WatcherTriggerTraceBackType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2750);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2768: range 000000000FA62580-000000000FA62F49
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::WatcherTriggerTraceBackType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::WatcherTriggerTraceBackType>,false,true>::pointer v12; // rax
  data::WatcherTriggerTraceBackType second; // ecx
  char v14; // dl
  char v16[592]; // [rsp+20h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 8 7 it:2781 176 8 9 <unknown> 208 8 6 s:2767 240 32 9 <unknown> 304 32 9 <unknown"
                        "> 368 32 9 <unknown> 432 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = 61956;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862736] = -202116109;
  *(_QWORD *)(v2 + 208) = s;
  if ( *(_QWORD *)(v2 + 208) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::WatcherTriggerTraceBackType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::WatcherTriggerTraceBackType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::WatcherTriggerTraceBackType>::pair<char const(&)[10],data::WatcherTriggerTraceBackType,true>(
        (std::pair<const std::string,data::WatcherTriggerTraceBackType> *const)(v2 + 432),
        (const char (*)[10])byte_1A6347E0,
        (data::WatcherTriggerTraceBackType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A6347E0);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::WatcherTriggerTraceBackType>::pair<char const(&)[13],data::WatcherTriggerTraceBackType,true>(
        (std::pair<const std::string,data::WatcherTriggerTraceBackType> *const)(v2 + 472),
        (const char (*)[13])byte_1A634820,
        (data::WatcherTriggerTraceBackType *)(v2 + 128));
      std::allocator<std::pair<std::string const,data::WatcherTriggerTraceBackType>>::allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerTraceBackType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::unordered_map(
        &data::enumStrToVal(char const*,data::WatcherTriggerTraceBackType &)::m,
        (std::initializer_list<std::pair<const std::string,data::WatcherTriggerTraceBackType> >)__PAIR128__(
                                                                                                  2LL,
                                                                                                  v2 + 432),
        0LL,
        (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::WatcherTriggerTraceBackType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::~unordered_map,
        &data::enumStrToVal(char const*,data::WatcherTriggerTraceBackType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::WatcherTriggerTraceBackType>>::~allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerTraceBackType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::WatcherTriggerTraceBackType> *)(v2 + 512);
            i != (std::pair<const std::string,data::WatcherTriggerTraceBackType> *)(v2 + 432);
            std::pair<std::string const,data::WatcherTriggerTraceBackType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 432) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 208);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 304),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v8);
    *(std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::find(
                                                                                                   &data::enumStrToVal(char const*,data::WatcherTriggerTraceBackType &)::m,
                                                                                                   (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::key_type *)(v2 + 304));
    std::string::~string((void *)(v2 + 304));
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 176, v2 + 304);
    *(std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::iterator *)(v2 + 176) = std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::end(&data::enumStrToVal(char const*,data::WatcherTriggerTraceBackType &)::m);
    v9 = (char *)(v2 + 176);
    v10 = std::__detail::operator==<std::pair<std::string const,data::WatcherTriggerTraceBackType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerTraceBackType>,true> *)(v2 + 144),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerTraceBackType>,true> *)(v2 + 176));
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 368, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 368),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        2784);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 368),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 208));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::WatcherTriggerTraceBackType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::WatcherTriggerTraceBackType>,false,true> *const)(v2 + 144));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 240),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2771);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 240),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 2793: range 000000000FA62F4A-000000000FA62F60
const char *__cdecl data::getDescription(data::WatcherTriggerTraceBackType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 2798: range 000000000FA62F61-000000000FA63116
bool __cdecl data::isValidWatcherTriggerTraceBackType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:2799 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidWatcherTriggerTraceBackType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2804: range 000000000FA63117-000000000FA63278
bool __cdecl data::isValidWatcherTriggerTraceBackTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::WatcherTriggerTraceBackType> *v5; // rcx
  const std::unordered_map<std::string,data::WatcherTriggerTraceBackType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidWatcherTriggerTraceBackTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::end(v5);
  v6 = data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::find(v6, name);
  result = std::__detail::operator!=<std::pair<std::string const,data::WatcherTriggerTraceBackType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerTraceBackType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerTraceBackType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 2809: range 000000000FA63279-000000000FA6373B
const std::unordered_map<std::string,data::WatcherTriggerTraceBackType> *__cdecl data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::WatcherTriggerTraceBackType> *i; // r14
  const std::unordered_map<std::string,data::WatcherTriggerTraceBackType> *result; // rax
  char v6[336]; // [rsp+10h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <"
                        "unknown> 128 120 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::WatcherTriggerTraceBackType>::pair<char const(&)[24],data::WatcherTriggerTraceBackType,true>(
      (std::pair<const std::string,data::WatcherTriggerTraceBackType> *const)(v1 + 128),
      (const char (*)[24])"WATCHER_TRACE_BACK_NONE",
      (data::WatcherTriggerTraceBackType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "WATCHER_TRACE_BACK_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::WatcherTriggerTraceBackType>::pair<char const(&)[23],data::WatcherTriggerTraceBackType,true>(
      (std::pair<const std::string,data::WatcherTriggerTraceBackType> *const)(v1 + 168),
      (const char (*)[23])"WATCHER_TRACE_BACK_YES",
      (data::WatcherTriggerTraceBackType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "WATCHER_TRACE_BACK_YES");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::WatcherTriggerTraceBackType>::pair<char const(&)[22],data::WatcherTriggerTraceBackType,true>(
      (std::pair<const std::string,data::WatcherTriggerTraceBackType> *const)(v1 + 208),
      (const char (*)[22])"WATCHER_TRACE_BACK_NO",
      (data::WatcherTriggerTraceBackType *)(v1 + 112));
    std::allocator<std::pair<std::string const,data::WatcherTriggerTraceBackType>>::allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerTraceBackType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::unordered_map(
      &data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::WatcherTriggerTraceBackType> >)__PAIR128__(3LL, v1 + 128),
      0LL,
      (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::WatcherTriggerTraceBackType>::~unordered_map,
      &data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::WatcherTriggerTraceBackType>>::~allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerTraceBackType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::WatcherTriggerTraceBackType> *)(v1 + 248);
          i != (std::pair<const std::string,data::WatcherTriggerTraceBackType> *)(v1 + 128);
          std::pair<std::string const,data::WatcherTriggerTraceBackType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getWatcherTriggerTraceBackTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 2820: range 000000000FA6373C-000000000FA63E3A
const std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >> *__cdecl data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[752]; // [rsp+10h] [rbp-2F0h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(704LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 64 9"
                        " <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 216 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862739] = -218103808;
  v3[536862740] = -202116109;
  v3[536862741] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[24])"WATCHER_TRACE_BACK_NONE");
    std::pair<data::WatcherTriggerTraceBackType const,std::pair<std::string,std::string>>::pair<data::WatcherTriggerTraceBackType,true>(
      (std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > *const)(v1 + 416),
      (data::WatcherTriggerTraceBackType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[10])byte_1A6347E0,
      (const char (*)[23])"WATCHER_TRACE_BACK_YES");
    std::pair<data::WatcherTriggerTraceBackType const,std::pair<std::string,std::string>>::pair<data::WatcherTriggerTraceBackType,true>(
      (std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > *const)(v1 + 488),
      (data::WatcherTriggerTraceBackType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[13])byte_1A634820,
      (const char (*)[22])"WATCHER_TRACE_BACK_NO");
    std::pair<data::WatcherTriggerTraceBackType const,std::pair<std::string,std::string>>::pair<data::WatcherTriggerTraceBackType,true>(
      (std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > *const)(v1 + 560),
      (data::WatcherTriggerTraceBackType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    std::allocator<std::pair<data::WatcherTriggerTraceBackType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string>>::map(
      &data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > >)__PAIR128__(3LL, v1 + 416),
      (const std::less<data::WatcherTriggerTraceBackType> *)(v1 + 48),
      (const std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::WatcherTriggerTraceBackType,std::pair<std::string,std::string>>::~map,
      &data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::WatcherTriggerTraceBackType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > *)(v1 + 632);
          i != (std::pair<const data::WatcherTriggerTraceBackType,std::pair<std::string,std::string > > *)(v1 + 416);
          std::pair<data::WatcherTriggerTraceBackType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 416) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_DWORD *)(v5 + 16) = -117901064;
    *(_DWORD *)(v5 + 20) = -117901064;
    *(_WORD *)(v5 + 24) = -1800;
    *(_BYTE *)(v5 + 26) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return &data::getWatcherTriggerTraceBackTypeEnumMap[abi:cxx11](void)::m;
};

// Line 2831: range 000000000FA63E3B-000000000FA641AE
const char *__fastcall data::enumValToStr(data::WatcherTriggerType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::WatcherTriggerType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:2830 64 8 9 iter:2833 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getWatcherTriggerTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::WatcherTriggerType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::WatcherTriggerType,std::pair<std::string,std::string>>::find(map, (const std::map<data::WatcherTriggerType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::WatcherTriggerType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::WatcherTriggerType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      2836);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_WatcherTriggerType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::WatcherTriggerType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 2843: range 000000000FA641AF-000000000FA64767
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::WatcherTriggerType>,false,true>::pointer v10; // rax
  data::WatcherTriggerType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::WatcherTriggerType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:2852 96 8 9 <unknown> 128 8 6 s:2842 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getWatcherTriggerTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::WatcherTriggerType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::WatcherTriggerType>::find(
                                                                                               m,
                                                                                               (const std::unordered_map<std::string,data::WatcherTriggerType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::WatcherTriggerType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::WatcherTriggerType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::WatcherTriggerType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        2855);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::WatcherTriggerType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::WatcherTriggerType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      2846);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 2864: range 000000000FA64768-000000000FA72CC4
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::WatcherTriggerType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::WatcherTriggerType>,false,true>::pointer v11; // rax
  data::WatcherTriggerType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[22096]; // [rsp+20h] [rbp-5650h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_9(22048LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = a3934819Unknown;
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -234556924;
  v4[536862735] = -234556924;
  v4[536862736] = -234556924;
  v4[536862737] = -234556924;
  v4[536862738] = -234556924;
  v4[536862739] = -234556924;
  v4[536862740] = -234556924;
  v4[536862741] = -234556924;
  v4[536862742] = -234556924;
  v4[536862743] = -234556924;
  v4[536862744] = -234556924;
  v4[536862745] = -234556924;
  v4[536862746] = -234556924;
  v4[536862747] = -234556924;
  v4[536862748] = -234556924;
  v4[536862749] = -234556924;
  v4[536862750] = -234556924;
  v4[536862751] = -234556924;
  v4[536862752] = -234556924;
  v4[536862753] = -234556924;
  v4[536862754] = -234556924;
  v4[536862755] = -234556924;
  v4[536862756] = -234556924;
  v4[536862757] = -234556924;
  v4[536862758] = -234556924;
  v4[536862759] = -234556924;
  v4[536862760] = -234556924;
  v4[536862761] = -234556924;
  v4[536862762] = -234556924;
  v4[536862763] = -234556924;
  v4[536862764] = -234556924;
  v4[536862765] = -234556924;
  v4[536862766] = -234556924;
  v4[536862767] = -234556924;
  v4[536862768] = -234556924;
  v4[536862769] = -234556924;
  v4[536862770] = -234556924;
  v4[536862771] = -234556924;
  v4[536862772] = -234556924;
  v4[536862773] = -234556924;
  v4[536862774] = -234556924;
  v4[536862775] = -234556924;
  v4[536862776] = -234556924;
  v4[536862777] = -234556924;
  v4[536862778] = -234556924;
  v4[536862779] = -234556924;
  v4[536862780] = -234556924;
  v4[536862781] = -234556924;
  v4[536862782] = -234556924;
  v4[536862783] = -234556924;
  v4[536862784] = -234556924;
  v4[536862785] = -234556924;
  v4[536862786] = -234556924;
  v4[536862787] = -234556924;
  v4[536862788] = -234556924;
  v4[536862789] = -234556924;
  v4[536862790] = -234556924;
  v4[536862791] = -234556924;
  v4[536862792] = -234556924;
  v4[536862793] = -234556924;
  v4[536862794] = -234556924;
  v4[536862795] = -234556924;
  v4[536862796] = -234556924;
  v4[536862797] = -234556924;
  v4[536862798] = -234556924;
  v4[536862799] = -234556924;
  v4[536862800] = -234556924;
  v4[536862801] = -234556924;
  v4[536862802] = -234556924;
  v4[536862803] = -234556924;
  v4[536862804] = -234556924;
  v4[536862805] = -234556924;
  v4[536862806] = -234556924;
  v4[536862807] = -234556924;
  v4[536862808] = -234556924;
  v4[536862809] = -234556924;
  v4[536862810] = -234556924;
  v4[536862811] = -234556924;
  v4[536862812] = -234556924;
  v4[536862813] = -234556924;
  v4[536862814] = -234556924;
  v4[536862815] = -234556924;
  v4[536862816] = -234556924;
  v4[536862817] = -234556924;
  v4[536862818] = -234556924;
  v4[536862819] = -234556924;
  v4[536862820] = -234556924;
  v4[536862821] = -234556924;
  v4[536862822] = -234556924;
  v4[536862823] = -234556924;
  v4[536862824] = -234556924;
  v4[536862825] = -234556924;
  v4[536862826] = -234556924;
  v4[536862827] = -234556924;
  v4[536862828] = -234556924;
  v4[536862829] = -234556924;
  v4[536862830] = -234556924;
  v4[536862831] = -234556924;
  v4[536862832] = -234556924;
  v4[536862833] = -234556924;
  v4[536862834] = -234556924;
  v4[536862835] = -234556924;
  v4[536862836] = -234556924;
  v4[536862837] = -234556924;
  v4[536862838] = -234556924;
  v4[536862839] = -234556924;
  v4[536862840] = -234556924;
  v4[536862841] = -234556924;
  v4[536862842] = -234556924;
  v4[536862843] = -234556924;
  v4[536862844] = -234556924;
  v4[536862845] = -234556924;
  v4[536862846] = -234556924;
  v4[536862847] = -234556924;
  v4[536862848] = -234556924;
  v4[536862849] = -234556924;
  v4[536862850] = -234556924;
  v4[536862851] = -234556924;
  v4[536862852] = -234556924;
  v4[536862853] = -234556924;
  v4[536862854] = -234556924;
  v4[536862855] = -234556924;
  v4[536862856] = -234556924;
  v4[536862857] = -234556924;
  v4[536862858] = -234556924;
  v4[536862859] = -234556924;
  v4[536862860] = -234556924;
  v4[536862861] = -234556924;
  v4[536862862] = -234556924;
  v4[536862863] = -234556924;
  v4[536862864] = -234556924;
  v4[536862865] = -234556924;
  v4[536862866] = -234556924;
  v4[536862867] = -234556924;
  v4[536862868] = -234556924;
  v4[536862869] = -234556924;
  v4[536862870] = -234556924;
  v4[536862871] = -234556924;
  v4[536862872] = -234556924;
  v4[536862873] = -234556924;
  v4[536862874] = -234556924;
  v4[536862875] = -234556924;
  v4[536862876] = -234556924;
  v4[536862877] = -234556924;
  v4[536862878] = -234556924;
  v4[536862879] = -234556924;
  v4[536862880] = -234556924;
  v4[536862881] = -234556924;
  v4[536862882] = -234556924;
  v4[536862883] = -234556924;
  v4[536862884] = -234556924;
  v4[536862885] = -234556924;
  v4[536862886] = -234556924;
  v4[536862887] = -234556924;
  v4[536862888] = -234556924;
  v4[536862889] = -234556924;
  v4[536862890] = -234556924;
  v4[536862891] = -234556924;
  v4[536862892] = -234556924;
  v4[536862893] = -234556924;
  v4[536862894] = -234556924;
  v4[536862895] = -234556924;
  v4[536862896] = -234556924;
  v4[536862897] = -234556924;
  v4[536862898] = -234556924;
  v4[536862899] = -234556924;
  v4[536862900] = -234556924;
  v4[536862901] = -234556924;
  v4[536862902] = -234556924;
  v4[536862903] = -234556924;
  v4[536862904] = -234556924;
  v4[536862905] = -234556924;
  v4[536862906] = -234556924;
  v4[536862907] = -234556924;
  v4[536862908] = -234556924;
  v4[536862909] = -234556924;
  v4[536862910] = -234556924;
  v4[536862911] = -234556924;
  v4[536862912] = -234556924;
  v4[536862913] = -234556924;
  v4[536862914] = 61956;
  v4[536862914] = -234881024;
  v4[536862915] = 62194;
  v4[536862915] = -234881024;
  v4[536862916] = 62194;
  v4[536862916] = -234881024;
  v4[536862917] = 62194;
  v4[536862918] = -219021312;
  v4[536862919] = 62194;
  v4[536862920] = -219021312;
  v4[536862921] = 62194;
  v4[536862922] = -219021312;
  v4[536862923] = 62194;
  v4[536863401] = -202116109;
  v4[536863402] = -202116109;
  v4[536863403] = -202116109;
  v4[536863404] = -202116109;
  v4[536863405] = -202116109;
  v4[536863406] = -202116109;
  v4[536863407] = -202116109;
  v4[536863408] = -202116109;
  *(_QWORD *)(v2 + 6288) = s;
  if ( *(_QWORD *)(v2 + 6288) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::WatcherTriggerType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::WatcherTriggerType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6512),
        (const char (*)[19])byte_1A636780,
        (data::WatcherTriggerType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A636780);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6552),
        (const char (*)[19])byte_1A6367C0,
        (data::WatcherTriggerType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A6367C0);
      *(_DWORD *)(v2 + 144) = 5;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6592),
        (const char (*)[13])byte_1A636800,
        (data::WatcherTriggerType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A636800);
      *(_DWORD *)(v2 + 160) = 6;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6632),
        (const char (*)[16])byte_1A636840,
        (data::WatcherTriggerType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A636840);
      *(_DWORD *)(v2 + 176) = 8;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6672),
        (const char (*)[16])byte_1A636880,
        (data::WatcherTriggerType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A636880);
      *(_DWORD *)(v2 + 192) = 9;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6712),
        (const char (*)[28])byte_1A6368C0,
        (data::WatcherTriggerType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A6368C0);
      *(_DWORD *)(v2 + 208) = 10;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6752),
        (const char (*)[31])byte_1A636900,
        (data::WatcherTriggerType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A636900);
      *(_DWORD *)(v2 + 224) = 11;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6792),
        (const char (*)[16])byte_1A636940,
        (data::WatcherTriggerType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A636940);
      *(_DWORD *)(v2 + 240) = 12;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6832),
        (const char (*)[13])byte_1A636980,
        (data::WatcherTriggerType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A636980);
      *(_DWORD *)(v2 + 256) = 13;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6872),
        (const char (*)[28])byte_1A6369C0,
        (data::WatcherTriggerType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A6369C0);
      *(_DWORD *)(v2 + 272) = 14;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6912),
        (const char (*)[25])byte_1A636A00,
        (data::WatcherTriggerType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, byte_1A636A00);
      *(_DWORD *)(v2 + 288) = 15;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6952),
        (const char (*)[30])byte_1A636A40,
        (data::WatcherTriggerType *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, byte_1A636A40);
      *(_DWORD *)(v2 + 304) = 101;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 6992),
        (const char (*)[16])byte_1A636A80,
        (data::WatcherTriggerType *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, byte_1A636A80);
      *(_DWORD *)(v2 + 320) = 102;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7032),
        (const char (*)[19])byte_1A636AC0,
        (data::WatcherTriggerType *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, byte_1A636AC0);
      *(_DWORD *)(v2 + 336) = 103;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7072),
        (const char (*)[22])byte_1A636B00,
        (data::WatcherTriggerType *)(v2 + 336));
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 352, byte_1A636B00);
      *(_DWORD *)(v2 + 352) = 104;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7112),
        (const char (*)[16])byte_1A636B40,
        (data::WatcherTriggerType *)(v2 + 352));
      if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 368, byte_1A636B40);
      *(_DWORD *)(v2 + 368) = 105;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7152),
        (const char (*)[19])byte_1A636B80,
        (data::WatcherTriggerType *)(v2 + 368));
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 384, byte_1A636B80);
      *(_DWORD *)(v2 + 384) = 106;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7192),
        (const char (*)[19])byte_1A636BC0,
        (data::WatcherTriggerType *)(v2 + 384));
      if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 400, byte_1A636BC0);
      *(_DWORD *)(v2 + 400) = 107;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7232),
        (const char (*)[13])byte_1A636C00,
        (data::WatcherTriggerType *)(v2 + 400));
      if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 416, byte_1A636C00);
      *(_DWORD *)(v2 + 416) = 108;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7272),
        (const char (*)[19])byte_1A636C40,
        (data::WatcherTriggerType *)(v2 + 416));
      if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 432, byte_1A636C40);
      *(_DWORD *)(v2 + 432) = 109;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7312),
        (const char (*)[13])byte_1A636C80,
        (data::WatcherTriggerType *)(v2 + 432));
      if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 448, byte_1A636C80);
      *(_DWORD *)(v2 + 448) = 110;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7352),
        (const char (*)[19])byte_1A636CC0,
        (data::WatcherTriggerType *)(v2 + 448));
      if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 464, byte_1A636CC0);
      *(_DWORD *)(v2 + 464) = 111;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[12],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7392),
        (const char (*)[12])byte_1A636D00,
        (data::WatcherTriggerType *)(v2 + 464));
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 480, byte_1A636D00);
      *(_DWORD *)(v2 + 480) = 112;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7432),
        (const char (*)[19])byte_1A636D40,
        (data::WatcherTriggerType *)(v2 + 480));
      if ( *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 496, byte_1A636D40);
      *(_DWORD *)(v2 + 496) = 113;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7472),
        (const char (*)[16])byte_1A636D80,
        (data::WatcherTriggerType *)(v2 + 496));
      if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 512, byte_1A636D80);
      *(_DWORD *)(v2 + 512) = 114;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7512),
        (const char (*)[22])byte_1A636DC0,
        (data::WatcherTriggerType *)(v2 + 512));
      if ( *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 528, byte_1A636DC0);
      *(_DWORD *)(v2 + 528) = 115;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7552),
        (const char (*)[22])byte_1A636E00,
        (data::WatcherTriggerType *)(v2 + 528));
      if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 544, byte_1A636E00);
      *(_DWORD *)(v2 + 544) = 116;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7592),
        (const char (*)[16])byte_1A636E40,
        (data::WatcherTriggerType *)(v2 + 544));
      if ( *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 560, byte_1A636E40);
      *(_DWORD *)(v2 + 560) = 117;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7632),
        (const char (*)[19])byte_1A636E80,
        (data::WatcherTriggerType *)(v2 + 560));
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 576, byte_1A636E80);
      *(_DWORD *)(v2 + 576) = 118;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7672),
        (const char (*)[24])byte_1A636EC0,
        (data::WatcherTriggerType *)(v2 + 576));
      if ( *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 592, byte_1A636EC0);
      *(_DWORD *)(v2 + 592) = 119;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7712),
        (const char (*)[24])byte_1A636F00,
        (data::WatcherTriggerType *)(v2 + 592));
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 608, byte_1A636F00);
      *(_DWORD *)(v2 + 608) = 120;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7752),
        (const char (*)[22])byte_1A636F40,
        (data::WatcherTriggerType *)(v2 + 608));
      if ( *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 624, byte_1A636F40);
      *(_DWORD *)(v2 + 624) = 121;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7792),
        (const char (*)[25])byte_1A636F80,
        (data::WatcherTriggerType *)(v2 + 624));
      if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 640, byte_1A636F80);
      *(_DWORD *)(v2 + 640) = 122;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7832),
        (const char (*)[16])byte_1A636FC0,
        (data::WatcherTriggerType *)(v2 + 640));
      if ( *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 656, byte_1A636FC0);
      *(_DWORD *)(v2 + 656) = 123;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7872),
        (const char (*)[35])byte_1A637000,
        (data::WatcherTriggerType *)(v2 + 656));
      if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 672, byte_1A637000);
      *(_DWORD *)(v2 + 672) = 124;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7912),
        (const char (*)[36])byte_1A637060,
        (data::WatcherTriggerType *)(v2 + 672));
      if ( *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 688, byte_1A637060);
      *(_DWORD *)(v2 + 688) = 125;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7952),
        (const char (*)[19])byte_1A6370C0,
        (data::WatcherTriggerType *)(v2 + 688));
      if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 704, byte_1A6370C0);
      *(_DWORD *)(v2 + 704) = 126;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 7992),
        (const char (*)[25])byte_1A637100,
        (data::WatcherTriggerType *)(v2 + 704));
      if ( *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 720, byte_1A637100);
      *(_DWORD *)(v2 + 720) = 201;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8032),
        (const char (*)[13])byte_1A637140,
        (data::WatcherTriggerType *)(v2 + 720));
      if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 736, byte_1A637140);
      *(_DWORD *)(v2 + 736) = 202;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8072),
        (const char (*)[19])byte_1A637180,
        (data::WatcherTriggerType *)(v2 + 736));
      if ( *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 752, byte_1A637180);
      *(_DWORD *)(v2 + 752) = 203;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8112),
        (const char (*)[13])byte_1A6371C0,
        (data::WatcherTriggerType *)(v2 + 752));
      if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 768, byte_1A6371C0);
      *(_DWORD *)(v2 + 768) = 204;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8152),
        (const char (*)[13])byte_1A637200,
        (data::WatcherTriggerType *)(v2 + 768));
      if ( *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 784, byte_1A637200);
      *(_DWORD *)(v2 + 784) = 205;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 0x2000),
        (const char (*)[13])byte_1A637240,
        (data::WatcherTriggerType *)(v2 + 784));
      if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 800, byte_1A637240);
      *(_DWORD *)(v2 + 800) = 206;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8232),
        (const char (*)[13])byte_1A637280,
        (data::WatcherTriggerType *)(v2 + 800));
      if ( *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 816, byte_1A637280);
      *(_DWORD *)(v2 + 816) = 207;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8272),
        (const char (*)[16])byte_1A6372C0,
        (data::WatcherTriggerType *)(v2 + 816));
      if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 832, byte_1A6372C0);
      *(_DWORD *)(v2 + 832) = 208;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8312),
        (const char (*)[16])byte_1A637300,
        (data::WatcherTriggerType *)(v2 + 832));
      if ( *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 848, byte_1A637300);
      *(_DWORD *)(v2 + 848) = 209;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8352),
        (const char (*)[13])byte_1A637340,
        (data::WatcherTriggerType *)(v2 + 848));
      if ( *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 864, byte_1A637340);
      *(_DWORD *)(v2 + 864) = 210;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8392),
        (const char (*)[28])byte_1A637380,
        (data::WatcherTriggerType *)(v2 + 864));
      if ( *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 880, byte_1A637380);
      *(_DWORD *)(v2 + 880) = 211;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8432),
        (const char (*)[22])byte_1A6373C0,
        (data::WatcherTriggerType *)(v2 + 880));
      if ( *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 896, byte_1A6373C0);
      *(_DWORD *)(v2 + 896) = 212;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8472),
        (const char (*)[13])byte_1A637400,
        (data::WatcherTriggerType *)(v2 + 896));
      if ( *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 912, byte_1A637400);
      *(_DWORD *)(v2 + 912) = 213;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8512),
        (const char (*)[16])byte_1A637440,
        (data::WatcherTriggerType *)(v2 + 912));
      if ( *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 928, byte_1A637440);
      *(_DWORD *)(v2 + 928) = 214;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8552),
        (const char (*)[13])byte_1A637480,
        (data::WatcherTriggerType *)(v2 + 928));
      if ( *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 944, byte_1A637480);
      *(_DWORD *)(v2 + 944) = 215;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8592),
        (const char (*)[22])byte_1A6374C0,
        (data::WatcherTriggerType *)(v2 + 944));
      if ( *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 960, byte_1A6374C0);
      *(_DWORD *)(v2 + 960) = 216;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8632),
        (const char (*)[31])byte_1A637500,
        (data::WatcherTriggerType *)(v2 + 960));
      if ( *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 976, byte_1A637500);
      *(_DWORD *)(v2 + 976) = 217;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8672),
        (const char (*)[31])byte_1A637540,
        (data::WatcherTriggerType *)(v2 + 976));
      if ( *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 992, byte_1A637540);
      *(_DWORD *)(v2 + 992) = 218;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8712),
        (const char (*)[30])byte_1A637580,
        (data::WatcherTriggerType *)(v2 + 992));
      if ( *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1008, byte_1A637580);
      *(_DWORD *)(v2 + 1008) = 219;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8752),
        (const char (*)[19])byte_1A6375C0,
        (data::WatcherTriggerType *)(v2 + 1008));
      if ( *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1024, byte_1A6375C0);
      *(_DWORD *)(v2 + 1024) = 220;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8792),
        (const char (*)[19])byte_1A637600,
        (data::WatcherTriggerType *)(v2 + 1024));
      if ( *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1040, byte_1A637600);
      *(_DWORD *)(v2 + 1040) = 221;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8832),
        (const char (*)[24])byte_1A637640,
        (data::WatcherTriggerType *)(v2 + 1040));
      if ( *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1056, byte_1A637640);
      *(_DWORD *)(v2 + 1056) = 222;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8872),
        (const char (*)[13])byte_1A637680,
        (data::WatcherTriggerType *)(v2 + 1056));
      if ( *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1072, byte_1A637680);
      *(_DWORD *)(v2 + 1072) = 223;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8912),
        (const char (*)[40])byte_1A6376C0,
        (data::WatcherTriggerType *)(v2 + 1072));
      if ( *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1088, byte_1A6376C0);
      *(_DWORD *)(v2 + 1088) = 224;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8952),
        (const char (*)[46])byte_1A637720,
        (data::WatcherTriggerType *)(v2 + 1088));
      if ( *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1104, byte_1A637720);
      *(_DWORD *)(v2 + 1104) = 225;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 8992),
        (const char (*)[25])byte_1A637780,
        (data::WatcherTriggerType *)(v2 + 1104));
      if ( *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1120, byte_1A637780);
      *(_DWORD *)(v2 + 1120) = 226;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9032),
        (const char (*)[28])byte_1A6377C0,
        (data::WatcherTriggerType *)(v2 + 1120));
      if ( *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1136, byte_1A6377C0);
      *(_DWORD *)(v2 + 1136) = 227;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9072),
        (const char (*)[19])byte_1A637800,
        (data::WatcherTriggerType *)(v2 + 1136));
      if ( *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1152, byte_1A637800);
      *(_DWORD *)(v2 + 1152) = 228;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9112),
        (const char (*)[24])byte_1A637840,
        (data::WatcherTriggerType *)(v2 + 1152));
      if ( *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1168, byte_1A637840);
      *(_DWORD *)(v2 + 1168) = 229;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9152),
        (const char (*)[31])byte_1A637880,
        (data::WatcherTriggerType *)(v2 + 1168));
      if ( *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1184, byte_1A637880);
      *(_DWORD *)(v2 + 1184) = 230;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9192),
        (const char (*)[13])byte_1A6378C0,
        (data::WatcherTriggerType *)(v2 + 1184));
      if ( *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1200, byte_1A6378C0);
      *(_DWORD *)(v2 + 1200) = 231;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9232),
        (const char (*)[16])byte_1A637900,
        (data::WatcherTriggerType *)(v2 + 1200));
      if ( *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1216, byte_1A637900);
      *(_DWORD *)(v2 + 1216) = 232;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9272),
        (const char (*)[34])byte_1A637940,
        (data::WatcherTriggerType *)(v2 + 1216));
      if ( *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1232, byte_1A637940);
      *(_DWORD *)(v2 + 1232) = 301;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9312),
        (const char (*)[19])byte_1A6379A0,
        (data::WatcherTriggerType *)(v2 + 1232));
      if ( *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1248, byte_1A6379A0);
      *(_DWORD *)(v2 + 1248) = 302;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9352),
        (const char (*)[19])byte_1A6379E0,
        (data::WatcherTriggerType *)(v2 + 1248));
      if ( *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1264, byte_1A6379E0);
      *(_DWORD *)(v2 + 1264) = 303;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9392),
        (const char (*)[19])byte_1A637A20,
        (data::WatcherTriggerType *)(v2 + 1264));
      if ( *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1280, byte_1A637A20);
      *(_DWORD *)(v2 + 1280) = 304;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9432),
        (const char (*)[25])byte_1A637A60,
        (data::WatcherTriggerType *)(v2 + 1280));
      if ( *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1296, byte_1A637A60);
      *(_DWORD *)(v2 + 1296) = 306;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9472),
        (const char (*)[26])byte_1A637AA0,
        (data::WatcherTriggerType *)(v2 + 1296));
      if ( *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1312, byte_1A637AA0);
      *(_DWORD *)(v2 + 1312) = 307;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9512),
        (const char (*)[13])byte_1A637AE0,
        (data::WatcherTriggerType *)(v2 + 1312));
      if ( *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1328, byte_1A637AE0);
      *(_DWORD *)(v2 + 1328) = 308;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9552),
        (const char (*)[19])byte_1A637B20,
        (data::WatcherTriggerType *)(v2 + 1328));
      if ( *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1344, byte_1A637B20);
      *(_DWORD *)(v2 + 1344) = 309;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9592),
        (const char (*)[25])byte_1A637B60,
        (data::WatcherTriggerType *)(v2 + 1344));
      if ( *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1360, byte_1A637B60);
      *(_DWORD *)(v2 + 1360) = 310;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9632),
        (const char (*)[25])byte_1A637BA0,
        (data::WatcherTriggerType *)(v2 + 1360));
      if ( *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1376, byte_1A637BA0);
      *(_DWORD *)(v2 + 1376) = 311;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9672),
        (const char (*)[25])byte_1A637BE0,
        (data::WatcherTriggerType *)(v2 + 1376));
      if ( *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1392, byte_1A637BE0);
      *(_DWORD *)(v2 + 1392) = 312;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9712),
        (const char (*)[19])byte_1A637C20,
        (data::WatcherTriggerType *)(v2 + 1392));
      if ( *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1408, byte_1A637C20);
      *(_DWORD *)(v2 + 1408) = 313;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9752),
        (const char (*)[25])byte_1A637C60,
        (data::WatcherTriggerType *)(v2 + 1408));
      if ( *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1424, byte_1A637C60);
      *(_DWORD *)(v2 + 1424) = 314;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9792),
        (const char (*)[13])byte_1A637CA0,
        (data::WatcherTriggerType *)(v2 + 1424));
      if ( *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1440, byte_1A637CA0);
      *(_DWORD *)(v2 + 1440) = 315;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9832),
        (const char (*)[22])byte_1A637CE0,
        (data::WatcherTriggerType *)(v2 + 1440));
      if ( *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1456, byte_1A637CE0);
      *(_DWORD *)(v2 + 1456) = 316;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9872),
        (const char (*)[39])byte_1A637D20,
        (data::WatcherTriggerType *)(v2 + 1456));
      if ( *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1472, byte_1A637D20);
      *(_DWORD *)(v2 + 1472) = 317;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9912),
        (const char (*)[19])byte_1A637D80,
        (data::WatcherTriggerType *)(v2 + 1472));
      if ( *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1488, byte_1A637D80);
      *(_DWORD *)(v2 + 1488) = 318;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9952),
        (const char (*)[19])byte_1A637DC0,
        (data::WatcherTriggerType *)(v2 + 1488));
      if ( *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1504, byte_1A637DC0);
      *(_DWORD *)(v2 + 1504) = 319;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 9992),
        (const char (*)[37])byte_1A637E00,
        (data::WatcherTriggerType *)(v2 + 1504));
      if ( *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1520, byte_1A637E00);
      *(_DWORD *)(v2 + 1520) = 320;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10032),
        (const char (*)[37])byte_1A637E60,
        (data::WatcherTriggerType *)(v2 + 1520));
      if ( *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1536, byte_1A637E60);
      *(_DWORD *)(v2 + 1536) = 321;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[45],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10072),
        (const char (*)[45])byte_1A637EC0,
        (data::WatcherTriggerType *)(v2 + 1536));
      if ( *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1552, byte_1A637EC0);
      *(_DWORD *)(v2 + 1552) = 322;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10112),
        (const char (*)[19])byte_1A637F20,
        (data::WatcherTriggerType *)(v2 + 1552));
      if ( *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1568, byte_1A637F20);
      *(_DWORD *)(v2 + 1568) = 323;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10152),
        (const char (*)[33])byte_1A637F60,
        (data::WatcherTriggerType *)(v2 + 1568));
      if ( *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1584, byte_1A637F60);
      *(_DWORD *)(v2 + 1584) = 324;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10192),
        (const char (*)[31])byte_1A637FC0,
        (data::WatcherTriggerType *)(v2 + 1584));
      if ( *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1600, byte_1A637FC0);
      *(_DWORD *)(v2 + 1600) = 325;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10232),
        (const char (*)[40])byte_1A638000,
        (data::WatcherTriggerType *)(v2 + 1600));
      if ( *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1616, byte_1A638000);
      *(_DWORD *)(v2 + 1616) = 326;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10272),
        (const char (*)[40])byte_1A638060,
        (data::WatcherTriggerType *)(v2 + 1616));
      if ( *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1632, byte_1A638060);
      *(_DWORD *)(v2 + 1632) = 327;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10312),
        (const char (*)[34])byte_1A6380C0,
        (data::WatcherTriggerType *)(v2 + 1632));
      if ( *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1648, byte_1A6380C0);
      *(_DWORD *)(v2 + 1648) = 328;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10352),
        (const char (*)[42])byte_1A638120,
        (data::WatcherTriggerType *)(v2 + 1648));
      if ( *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1664, byte_1A638120);
      *(_DWORD *)(v2 + 1664) = 329;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10392),
        (const char (*)[23])byte_1A638180,
        (data::WatcherTriggerType *)(v2 + 1664));
      if ( *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1680, byte_1A638180);
      *(_DWORD *)(v2 + 1680) = 330;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10432),
        (const char (*)[28])byte_1A6381C0,
        (data::WatcherTriggerType *)(v2 + 1680));
      if ( *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1696, byte_1A6381C0);
      *(_DWORD *)(v2 + 1696) = 331;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10472),
        (const char (*)[22])byte_1A638200,
        (data::WatcherTriggerType *)(v2 + 1696));
      if ( *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1712, byte_1A638200);
      *(_DWORD *)(v2 + 1712) = 332;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10512),
        (const char (*)[30])byte_1A638240,
        (data::WatcherTriggerType *)(v2 + 1712));
      if ( *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1728, byte_1A638240);
      *(_DWORD *)(v2 + 1728) = 333;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10552),
        (const char (*)[25])byte_1A638280,
        (data::WatcherTriggerType *)(v2 + 1728));
      if ( *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1744, byte_1A638280);
      *(_DWORD *)(v2 + 1744) = 334;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10592),
        (const char (*)[40])byte_1A6382C0,
        (data::WatcherTriggerType *)(v2 + 1744));
      if ( *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1760, byte_1A6382C0);
      *(_DWORD *)(v2 + 1760) = 335;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10632),
        (const char (*)[28])byte_1A638320,
        (data::WatcherTriggerType *)(v2 + 1760));
      if ( *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1776, byte_1A638320);
      *(_DWORD *)(v2 + 1776) = 336;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10672),
        (const char (*)[13])byte_1A638360,
        (data::WatcherTriggerType *)(v2 + 1776));
      if ( *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1792, byte_1A638360);
      *(_DWORD *)(v2 + 1792) = 337;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10712),
        (const char (*)[19])byte_1A6383A0,
        (data::WatcherTriggerType *)(v2 + 1792));
      if ( *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1808, byte_1A6383A0);
      *(_DWORD *)(v2 + 1808) = 338;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10752),
        (const char (*)[13])byte_1A6383E0,
        (data::WatcherTriggerType *)(v2 + 1808));
      if ( *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1824, byte_1A6383E0);
      *(_DWORD *)(v2 + 1824) = 339;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10792),
        (const char (*)[22])byte_1A638420,
        (data::WatcherTriggerType *)(v2 + 1824));
      if ( *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1840, byte_1A638420);
      *(_DWORD *)(v2 + 1840) = 340;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10832),
        (const char (*)[19])byte_1A638460,
        (data::WatcherTriggerType *)(v2 + 1840));
      if ( *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1856, byte_1A638460);
      *(_DWORD *)(v2 + 1856) = 401;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10872),
        (const char (*)[13])byte_1A6384A0,
        (data::WatcherTriggerType *)(v2 + 1856));
      if ( *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1872, byte_1A6384A0);
      *(_DWORD *)(v2 + 1872) = 402;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10912),
        (const char (*)[13])byte_1A6384E0,
        (data::WatcherTriggerType *)(v2 + 1872));
      if ( *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1888, byte_1A6384E0);
      *(_DWORD *)(v2 + 1888) = 403;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10952),
        (const char (*)[13])byte_1A638520,
        (data::WatcherTriggerType *)(v2 + 1888));
      if ( *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1904, byte_1A638520);
      *(_DWORD *)(v2 + 1904) = 404;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 10992),
        (const char (*)[13])byte_1A638560,
        (data::WatcherTriggerType *)(v2 + 1904));
      if ( *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1920, byte_1A638560);
      *(_DWORD *)(v2 + 1920) = 405;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11032),
        (const char (*)[19])byte_1A6385A0,
        (data::WatcherTriggerType *)(v2 + 1920));
      if ( *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1936, byte_1A6385A0);
      *(_DWORD *)(v2 + 1936) = 406;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11072),
        (const char (*)[40])byte_1A6385E0,
        (data::WatcherTriggerType *)(v2 + 1936));
      if ( *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1952, byte_1A6385E0);
      *(_DWORD *)(v2 + 1952) = 407;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11112),
        (const char (*)[24])byte_1A638640,
        (data::WatcherTriggerType *)(v2 + 1952));
      if ( *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1968, byte_1A638640);
      *(_DWORD *)(v2 + 1968) = 421;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11152),
        (const char (*)[25])byte_1A638680,
        (data::WatcherTriggerType *)(v2 + 1968));
      if ( *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1984, byte_1A638680);
      *(_DWORD *)(v2 + 1984) = 422;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11192),
        (const char (*)[37])byte_1A6386C0,
        (data::WatcherTriggerType *)(v2 + 1984));
      if ( *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2000, byte_1A6386C0);
      *(_DWORD *)(v2 + 2000) = 423;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11232),
        (const char (*)[28])byte_1A638720,
        (data::WatcherTriggerType *)(v2 + 2000));
      if ( *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2016, byte_1A638720);
      *(_DWORD *)(v2 + 2016) = 424;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11272),
        (const char (*)[19])byte_1A638760,
        (data::WatcherTriggerType *)(v2 + 2016));
      if ( *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2032, byte_1A638760);
      *(_DWORD *)(v2 + 2032) = 425;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11312),
        (const char (*)[16])byte_1A6387A0,
        (data::WatcherTriggerType *)(v2 + 2032));
      if ( *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2048, byte_1A6387A0);
      *(_DWORD *)(v2 + 2048) = 426;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11352),
        (const char (*)[25])byte_1A6387E0,
        (data::WatcherTriggerType *)(v2 + 2048));
      if ( *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2064, byte_1A6387E0);
      *(_DWORD *)(v2 + 2064) = 427;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11392),
        (const char (*)[28])byte_1A638820,
        (data::WatcherTriggerType *)(v2 + 2064));
      if ( *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2080, byte_1A638820);
      *(_DWORD *)(v2 + 2080) = 428;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11432),
        (const char (*)[25])byte_1A638860,
        (data::WatcherTriggerType *)(v2 + 2080));
      if ( *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2096, byte_1A638860);
      *(_DWORD *)(v2 + 2096) = 429;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11472),
        (const char (*)[43])byte_1A6388A0,
        (data::WatcherTriggerType *)(v2 + 2096));
      if ( *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2112, byte_1A6388A0);
      *(_DWORD *)(v2 + 2112) = 430;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11512),
        (const char (*)[24])byte_1A638900,
        (data::WatcherTriggerType *)(v2 + 2112));
      if ( *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2128, byte_1A638900);
      *(_DWORD *)(v2 + 2128) = 431;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11552),
        (const char (*)[33])byte_1A638940,
        (data::WatcherTriggerType *)(v2 + 2128));
      if ( *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2144, byte_1A638940);
      *(_DWORD *)(v2 + 2144) = 432;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11592),
        (const char (*)[19])byte_1A6389A0,
        (data::WatcherTriggerType *)(v2 + 2144));
      if ( *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2160, byte_1A6389A0);
      *(_DWORD *)(v2 + 2160) = 433;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11632),
        (const char (*)[19])byte_1A6389E0,
        (data::WatcherTriggerType *)(v2 + 2160));
      if ( *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2176, byte_1A6389E0);
      *(_DWORD *)(v2 + 2176) = 434;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11672),
        (const char (*)[28])byte_1A638A20,
        (data::WatcherTriggerType *)(v2 + 2176));
      if ( *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2192, byte_1A638A20);
      *(_DWORD *)(v2 + 2192) = 435;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11712),
        (const char (*)[28])byte_1A638A60,
        (data::WatcherTriggerType *)(v2 + 2192));
      if ( *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2208, byte_1A638A60);
      *(_DWORD *)(v2 + 2208) = 436;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11752),
        (const char (*)[28])byte_1A638AA0,
        (data::WatcherTriggerType *)(v2 + 2208));
      if ( *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2224, byte_1A638AA0);
      *(_DWORD *)(v2 + 2224) = 437;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11792),
        (const char (*)[19])byte_1A638AE0,
        (data::WatcherTriggerType *)(v2 + 2224));
      if ( *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2240, byte_1A638AE0);
      *(_DWORD *)(v2 + 2240) = 438;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11832),
        (const char (*)[28])byte_1A638B20,
        (data::WatcherTriggerType *)(v2 + 2240));
      if ( *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2256, byte_1A638B20);
      *(_DWORD *)(v2 + 2256) = 439;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11872),
        (const char (*)[37])byte_1A638B60,
        (data::WatcherTriggerType *)(v2 + 2256));
      if ( *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2272, byte_1A638B60);
      *(_DWORD *)(v2 + 2272) = 440;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[18],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11912),
        (const char (*)[18])byte_1A638BC0,
        (data::WatcherTriggerType *)(v2 + 2272));
      if ( *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2288, byte_1A638BC0);
      *(_DWORD *)(v2 + 2288) = 501;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11952),
        (const char (*)[13])byte_1A638C00,
        (data::WatcherTriggerType *)(v2 + 2288));
      if ( *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2304, byte_1A638C00);
      *(_DWORD *)(v2 + 2304) = 502;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 11992),
        (const char (*)[13])byte_1A638C40,
        (data::WatcherTriggerType *)(v2 + 2304));
      if ( *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2320, byte_1A638C40);
      *(_DWORD *)(v2 + 2320) = 503;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12032),
        (const char (*)[16])byte_1A638C80,
        (data::WatcherTriggerType *)(v2 + 2320));
      if ( *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2336, byte_1A638C80);
      *(_DWORD *)(v2 + 2336) = 504;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12072),
        (const char (*)[13])byte_1A638CC0,
        (data::WatcherTriggerType *)(v2 + 2336));
      if ( *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2352, byte_1A638CC0);
      *(_DWORD *)(v2 + 2352) = 505;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12112),
        (const char (*)[25])byte_1A638D00,
        (data::WatcherTriggerType *)(v2 + 2352));
      if ( *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2368, byte_1A638D00);
      *(_DWORD *)(v2 + 2368) = 601;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12152),
        (const char (*)[19])byte_1A638D40,
        (data::WatcherTriggerType *)(v2 + 2368));
      if ( *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2384, byte_1A638D40);
      *(_DWORD *)(v2 + 2384) = 602;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12192),
        (const char (*)[28])byte_1A638D80,
        (data::WatcherTriggerType *)(v2 + 2384));
      if ( *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2400, byte_1A638D80);
      *(_DWORD *)(v2 + 2400) = 603;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12232),
        (const char (*)[43])byte_1A638DC0,
        (data::WatcherTriggerType *)(v2 + 2400));
      if ( *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2416, byte_1A638DC0);
      *(_DWORD *)(v2 + 2416) = 604;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12272),
        (const char (*)[34])byte_1A638E20,
        (data::WatcherTriggerType *)(v2 + 2416));
      if ( *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2432, byte_1A638E20);
      *(_DWORD *)(v2 + 2432) = 605;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12312),
        (const char (*)[49])byte_1A638E80,
        (data::WatcherTriggerType *)(v2 + 2432));
      if ( *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2448, byte_1A638E80);
      *(_DWORD *)(v2 + 2448) = 606;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12352),
        (const char (*)[31])byte_1A638EE0,
        (data::WatcherTriggerType *)(v2 + 2448));
      if ( *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2464, byte_1A638EE0);
      *(_DWORD *)(v2 + 2464) = 607;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12392),
        (const char (*)[31])byte_1A638F20,
        (data::WatcherTriggerType *)(v2 + 2464));
      if ( *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2480, byte_1A638F20);
      *(_DWORD *)(v2 + 2480) = 608;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12432),
        (const char (*)[34])byte_1A638F60,
        (data::WatcherTriggerType *)(v2 + 2480));
      if ( *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2496, byte_1A638F60);
      *(_DWORD *)(v2 + 2496) = 609;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12472),
        (const char (*)[13])byte_1A638FC0,
        (data::WatcherTriggerType *)(v2 + 2496));
      if ( *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2512, byte_1A638FC0);
      *(_DWORD *)(v2 + 2512) = 610;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12512),
        (const char (*)[31])byte_1A639000,
        (data::WatcherTriggerType *)(v2 + 2512));
      if ( *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2528, byte_1A639000);
      *(_DWORD *)(v2 + 2528) = 611;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12552),
        (const char (*)[31])byte_1A639040,
        (data::WatcherTriggerType *)(v2 + 2528));
      if ( *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2544, byte_1A639040);
      *(_DWORD *)(v2 + 2544) = 612;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12592),
        (const char (*)[31])byte_1A639080,
        (data::WatcherTriggerType *)(v2 + 2544));
      if ( *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2560, byte_1A639080);
      *(_DWORD *)(v2 + 2560) = 613;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12632),
        (const char (*)[31])byte_1A6390C0,
        (data::WatcherTriggerType *)(v2 + 2560));
      if ( *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2576, byte_1A6390C0);
      *(_DWORD *)(v2 + 2576) = 614;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12672),
        (const char (*)[38])byte_1A639100,
        (data::WatcherTriggerType *)(v2 + 2576));
      if ( *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2592, byte_1A639100);
      *(_DWORD *)(v2 + 2592) = 615;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12712),
        (const char (*)[44])byte_1A639160,
        (data::WatcherTriggerType *)(v2 + 2592));
      if ( *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2608, byte_1A639160);
      *(_DWORD *)(v2 + 2608) = 616;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12752),
        (const char (*)[47])byte_1A6391C0,
        (data::WatcherTriggerType *)(v2 + 2608));
      if ( *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2624, byte_1A6391C0);
      *(_DWORD *)(v2 + 2624) = 617;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12792),
        (const char (*)[41])byte_1A639220,
        (data::WatcherTriggerType *)(v2 + 2624));
      if ( *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2640, byte_1A639220);
      *(_DWORD *)(v2 + 2640) = 618;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12832),
        (const char (*)[23])byte_1A639280,
        (data::WatcherTriggerType *)(v2 + 2640));
      if ( *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2656, byte_1A639280);
      *(_DWORD *)(v2 + 2656) = 619;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12872),
        (const char (*)[31])byte_1A6392C0,
        (data::WatcherTriggerType *)(v2 + 2656));
      if ( *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2672, byte_1A6392C0);
      *(_DWORD *)(v2 + 2672) = 620;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12912),
        (const char (*)[29])byte_1A639300,
        (data::WatcherTriggerType *)(v2 + 2672));
      if ( *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2688, byte_1A639300);
      *(_DWORD *)(v2 + 2688) = 621;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12952),
        (const char (*)[27])byte_1A639340,
        (data::WatcherTriggerType *)(v2 + 2688));
      if ( *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2704, byte_1A639340);
      *(_DWORD *)(v2 + 2704) = 622;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 12992),
        (const char (*)[35])byte_1A639380,
        (data::WatcherTriggerType *)(v2 + 2704));
      if ( *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2720, byte_1A639380);
      *(_DWORD *)(v2 + 2720) = 623;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13032),
        (const char (*)[49])byte_1A6393E0,
        (data::WatcherTriggerType *)(v2 + 2720));
      if ( *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2736, byte_1A6393E0);
      *(_DWORD *)(v2 + 2736) = 624;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13072),
        (const char (*)[49])byte_1A639440,
        (data::WatcherTriggerType *)(v2 + 2736));
      if ( *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2752, byte_1A639440);
      *(_DWORD *)(v2 + 2752) = 625;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[52],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13112),
        (const char (*)[52])byte_1A6394A0,
        (data::WatcherTriggerType *)(v2 + 2752));
      if ( *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2768, byte_1A6394A0);
      *(_DWORD *)(v2 + 2768) = 626;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13152),
        (const char (*)[37])byte_1A639500,
        (data::WatcherTriggerType *)(v2 + 2768));
      if ( *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2784, byte_1A639500);
      *(_DWORD *)(v2 + 2784) = 627;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13192),
        (const char (*)[37])byte_1A639560,
        (data::WatcherTriggerType *)(v2 + 2784));
      if ( *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2800, byte_1A639560);
      *(_DWORD *)(v2 + 2800) = 628;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13232),
        (const char (*)[42])byte_1A6395C0,
        (data::WatcherTriggerType *)(v2 + 2800));
      if ( *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2816, byte_1A6395C0);
      *(_DWORD *)(v2 + 2816) = 629;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13272),
        (const char (*)[47])byte_1A639620,
        (data::WatcherTriggerType *)(v2 + 2816));
      if ( *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2832, byte_1A639620);
      *(_DWORD *)(v2 + 2832) = 630;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13312),
        (const char (*)[34])byte_1A639680,
        (data::WatcherTriggerType *)(v2 + 2832));
      if ( *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2848, byte_1A639680);
      *(_DWORD *)(v2 + 2848) = 631;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13352),
        (const char (*)[40])byte_1A6396E0,
        (data::WatcherTriggerType *)(v2 + 2848));
      if ( *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2864, byte_1A6396E0);
      *(_DWORD *)(v2 + 2864) = 632;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13392),
        (const char (*)[43])byte_1A639740,
        (data::WatcherTriggerType *)(v2 + 2864));
      if ( *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2880, byte_1A639740);
      *(_DWORD *)(v2 + 2880) = 633;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13432),
        (const char (*)[49])byte_1A6397A0,
        (data::WatcherTriggerType *)(v2 + 2880));
      if ( *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2896, byte_1A6397A0);
      *(_DWORD *)(v2 + 2896) = 634;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13472),
        (const char (*)[40])byte_1A639800,
        (data::WatcherTriggerType *)(v2 + 2896));
      if ( *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2912, byte_1A639800);
      *(_DWORD *)(v2 + 2912) = 635;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13512),
        (const char (*)[42])byte_1A639860,
        (data::WatcherTriggerType *)(v2 + 2912));
      if ( *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2928, byte_1A639860);
      *(_DWORD *)(v2 + 2928) = 636;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13552),
        (const char (*)[44])byte_1A6398C0,
        (data::WatcherTriggerType *)(v2 + 2928));
      if ( *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2944, byte_1A6398C0);
      *(_DWORD *)(v2 + 2944) = 637;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13592),
        (const char (*)[42])byte_1A639920,
        (data::WatcherTriggerType *)(v2 + 2944));
      if ( *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2960, byte_1A639920);
      *(_DWORD *)(v2 + 2960) = 638;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[66],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13632),
        (const char (*)[66])byte_1A639980,
        (data::WatcherTriggerType *)(v2 + 2960));
      if ( *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2976, byte_1A639980);
      *(_DWORD *)(v2 + 2976) = 639;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[84],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13672),
        (const char (*)[84])byte_1A639A00,
        (data::WatcherTriggerType *)(v2 + 2976));
      if ( *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2992, byte_1A639A00);
      *(_DWORD *)(v2 + 2992) = 640;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[101],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13712),
        (const char (*)[101])byte_1A639A80,
        (data::WatcherTriggerType *)(v2 + 2992));
      if ( *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3008, byte_1A639A80);
      *(_DWORD *)(v2 + 3008) = 641;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[98],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13752),
        (const char (*)[98])byte_1A639B20,
        (data::WatcherTriggerType *)(v2 + 3008));
      if ( *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3024, byte_1A639B20);
      *(_DWORD *)(v2 + 3024) = 642;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13792),
        (const char (*)[47])byte_1A639BC0,
        (data::WatcherTriggerType *)(v2 + 3024));
      if ( *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3040, byte_1A639BC0);
      *(_DWORD *)(v2 + 3040) = 643;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[50],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13832),
        (const char (*)[50])byte_1A639C20,
        (data::WatcherTriggerType *)(v2 + 3040));
      if ( *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3056, byte_1A639C20);
      *(_DWORD *)(v2 + 3056) = 644;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13872),
        (const char (*)[49])byte_1A639C80,
        (data::WatcherTriggerType *)(v2 + 3056));
      if ( *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3072, byte_1A639C80);
      *(_DWORD *)(v2 + 3072) = 645;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13912),
        (const char (*)[55])byte_1A639CE0,
        (data::WatcherTriggerType *)(v2 + 3072));
      if ( *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3088, byte_1A639CE0);
      *(_DWORD *)(v2 + 3088) = 646;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13952),
        (const char (*)[31])byte_1A639D40,
        (data::WatcherTriggerType *)(v2 + 3088));
      if ( *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3104, byte_1A639D40);
      *(_DWORD *)(v2 + 3104) = 647;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 13992),
        (const char (*)[31])byte_1A639D80,
        (data::WatcherTriggerType *)(v2 + 3104));
      if ( *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3120, byte_1A639D80);
      *(_DWORD *)(v2 + 3120) = 649;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14032),
        (const char (*)[46])byte_1A639DC0,
        (data::WatcherTriggerType *)(v2 + 3120));
      if ( *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3136, byte_1A639DC0);
      *(_DWORD *)(v2 + 3136) = 650;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14072),
        (const char (*)[46])byte_1A639E20,
        (data::WatcherTriggerType *)(v2 + 3136));
      if ( *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3152, byte_1A639E20);
      *(_DWORD *)(v2 + 3152) = 651;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14112),
        (const char (*)[46])byte_1A639E80,
        (data::WatcherTriggerType *)(v2 + 3152));
      if ( *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3168, byte_1A639E80);
      *(_DWORD *)(v2 + 3168) = 652;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14152),
        (const char (*)[40])byte_1A639EE0,
        (data::WatcherTriggerType *)(v2 + 3168));
      if ( *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3184, byte_1A639EE0);
      *(_DWORD *)(v2 + 3184) = 653;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14192),
        (const char (*)[43])byte_1A639F40,
        (data::WatcherTriggerType *)(v2 + 3184));
      if ( *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3200, byte_1A639F40);
      *(_DWORD *)(v2 + 3200) = 654;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14232),
        (const char (*)[37])byte_1A639FA0,
        (data::WatcherTriggerType *)(v2 + 3200));
      if ( *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3216, byte_1A639FA0);
      *(_DWORD *)(v2 + 3216) = 655;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14272),
        (const char (*)[31])byte_1A63A000,
        (data::WatcherTriggerType *)(v2 + 3216));
      if ( *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3232, byte_1A63A000);
      *(_DWORD *)(v2 + 3232) = 656;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14312),
        (const char (*)[25])byte_1A63A040,
        (data::WatcherTriggerType *)(v2 + 3232));
      if ( *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3248, byte_1A63A040);
      *(_DWORD *)(v2 + 3248) = 700;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14352),
        (const char (*)[24])byte_1A63A080,
        (data::WatcherTriggerType *)(v2 + 3248));
      if ( *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3264, byte_1A63A080);
      *(_DWORD *)(v2 + 3264) = 701;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14392),
        (const char (*)[24])byte_1A63A0C0,
        (data::WatcherTriggerType *)(v2 + 3264));
      if ( *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3280, byte_1A63A0C0);
      *(_DWORD *)(v2 + 3280) = 702;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14432),
        (const char (*)[19])byte_1A63A100,
        (data::WatcherTriggerType *)(v2 + 3280));
      if ( *(_BYTE *)(((v2 + 3296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3296) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3296, byte_1A63A100);
      *(_DWORD *)(v2 + 3296) = 703;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14472),
        (const char (*)[25])byte_1A63A140,
        (data::WatcherTriggerType *)(v2 + 3296));
      if ( *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3312, byte_1A63A140);
      *(_DWORD *)(v2 + 3312) = 704;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14512),
        (const char (*)[16])byte_1A63A180,
        (data::WatcherTriggerType *)(v2 + 3312));
      if ( *(_BYTE *)(((v2 + 3328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3328, byte_1A63A180);
      *(_DWORD *)(v2 + 3328) = 705;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14552),
        (const char (*)[27])byte_1A63A1C0,
        (data::WatcherTriggerType *)(v2 + 3328));
      if ( *(_BYTE *)(((v2 + 3344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3344) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3344, byte_1A63A1C0);
      *(_DWORD *)(v2 + 3344) = 706;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14592),
        (const char (*)[27])byte_1A63A200,
        (data::WatcherTriggerType *)(v2 + 3344));
      if ( *(_BYTE *)(((v2 + 3360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3360) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3360, byte_1A63A200);
      *(_DWORD *)(v2 + 3360) = 800;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14632),
        (const char (*)[25])byte_1A63A240,
        (data::WatcherTriggerType *)(v2 + 3360));
      if ( *(_BYTE *)(((v2 + 3376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3376) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3376, byte_1A63A240);
      *(_DWORD *)(v2 + 3376) = 801;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14672),
        (const char (*)[28])byte_1A63A280,
        (data::WatcherTriggerType *)(v2 + 3376));
      if ( *(_BYTE *)(((v2 + 3392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3392) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3392, byte_1A63A280);
      *(_DWORD *)(v2 + 3392) = 802;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14712),
        (const char (*)[28])byte_1A63A2C0,
        (data::WatcherTriggerType *)(v2 + 3392));
      if ( *(_BYTE *)(((v2 + 3408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3408) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3408, byte_1A63A2C0);
      *(_DWORD *)(v2 + 3408) = 803;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14752),
        (const char (*)[31])byte_1A63A300,
        (data::WatcherTriggerType *)(v2 + 3408));
      if ( *(_BYTE *)(((v2 + 3424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3424) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3424, byte_1A63A300);
      *(_DWORD *)(v2 + 3424) = 804;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14792),
        (const char (*)[19])byte_1A63A340,
        (data::WatcherTriggerType *)(v2 + 3424));
      if ( *(_BYTE *)(((v2 + 3440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3440) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3440, byte_1A63A340);
      *(_DWORD *)(v2 + 3440) = 805;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14832),
        (const char (*)[28])byte_1A63A380,
        (data::WatcherTriggerType *)(v2 + 3440));
      if ( *(_BYTE *)(((v2 + 3456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3456) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3456, byte_1A63A380);
      *(_DWORD *)(v2 + 3456) = 806;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14872),
        (const char (*)[22])byte_1A63A3C0,
        (data::WatcherTriggerType *)(v2 + 3456));
      if ( *(_BYTE *)(((v2 + 3472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3472) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3472, byte_1A63A3C0);
      *(_DWORD *)(v2 + 3472) = 807;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14912),
        (const char (*)[19])byte_1A63A400,
        (data::WatcherTriggerType *)(v2 + 3472));
      if ( *(_BYTE *)(((v2 + 3488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3488) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3488, byte_1A63A400);
      *(_DWORD *)(v2 + 3488) = 808;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14952),
        (const char (*)[25])byte_1A63A440,
        (data::WatcherTriggerType *)(v2 + 3488));
      if ( *(_BYTE *)(((v2 + 3504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3504) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3504, byte_1A63A440);
      *(_DWORD *)(v2 + 3504) = 809;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 14992),
        (const char (*)[28])byte_1A63A480,
        (data::WatcherTriggerType *)(v2 + 3504));
      if ( *(_BYTE *)(((v2 + 3520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3520) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3520, byte_1A63A480);
      *(_DWORD *)(v2 + 3520) = 810;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15032),
        (const char (*)[22])byte_1A63A4C0,
        (data::WatcherTriggerType *)(v2 + 3520));
      if ( *(_BYTE *)(((v2 + 3536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3536) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3536, byte_1A63A4C0);
      *(_DWORD *)(v2 + 3536) = 811;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15072),
        (const char (*)[35])byte_1A63A500,
        (data::WatcherTriggerType *)(v2 + 3536));
      if ( *(_BYTE *)(((v2 + 3552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3552) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3552, byte_1A63A500);
      *(_DWORD *)(v2 + 3552) = 812;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15112),
        (const char (*)[23])byte_1A63A560,
        (data::WatcherTriggerType *)(v2 + 3552));
      if ( *(_BYTE *)(((v2 + 3568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3568) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3568, byte_1A63A560);
      *(_DWORD *)(v2 + 3568) = 900;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15152),
        (const char (*)[25])byte_1A63A5A0,
        (data::WatcherTriggerType *)(v2 + 3568));
      if ( *(_BYTE *)(((v2 + 3584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3584) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3584, byte_1A63A5A0);
      *(_DWORD *)(v2 + 3584) = 901;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15192),
        (const char (*)[25])byte_1A63A5E0,
        (data::WatcherTriggerType *)(v2 + 3584));
      if ( *(_BYTE *)(((v2 + 3600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3600) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3600, byte_1A63A5E0);
      *(_DWORD *)(v2 + 3600) = 902;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15232),
        (const char (*)[25])byte_1A63A620,
        (data::WatcherTriggerType *)(v2 + 3600));
      if ( *(_BYTE *)(((v2 + 3616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3616) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3616, byte_1A63A620);
      *(_DWORD *)(v2 + 3616) = 903;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15272),
        (const char (*)[16])byte_1A63A660,
        (data::WatcherTriggerType *)(v2 + 3616));
      if ( *(_BYTE *)(((v2 + 3632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3632) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3632, byte_1A63A660);
      *(_DWORD *)(v2 + 3632) = 904;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15312),
        (const char (*)[13])byte_1A63A6A0,
        (data::WatcherTriggerType *)(v2 + 3632));
      if ( *(_BYTE *)(((v2 + 3648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3648) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3648, byte_1A63A6A0);
      *(_DWORD *)(v2 + 3648) = 905;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15352),
        (const char (*)[13])byte_1A63A6E0,
        (data::WatcherTriggerType *)(v2 + 3648));
      if ( *(_BYTE *)(((v2 + 3664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3664) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3664, byte_1A63A6E0);
      *(_DWORD *)(v2 + 3664) = 906;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15392),
        (const char (*)[13])byte_1A63A720,
        (data::WatcherTriggerType *)(v2 + 3664));
      if ( *(_BYTE *)(((v2 + 3680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3680) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3680, byte_1A63A720);
      *(_DWORD *)(v2 + 3680) = 930;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15432),
        (const char (*)[25])byte_1A63A760,
        (data::WatcherTriggerType *)(v2 + 3680));
      if ( *(_BYTE *)(((v2 + 3696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3696) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3696, byte_1A63A760);
      *(_DWORD *)(v2 + 3696) = 931;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15472),
        (const char (*)[37])byte_1A63A7A0,
        (data::WatcherTriggerType *)(v2 + 3696));
      if ( *(_BYTE *)(((v2 + 3712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3712) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3712, byte_1A63A7A0);
      *(_DWORD *)(v2 + 3712) = 932;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15512),
        (const char (*)[19])byte_1A63A800,
        (data::WatcherTriggerType *)(v2 + 3712));
      if ( *(_BYTE *)(((v2 + 3728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3728) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3728, byte_1A63A800);
      *(_DWORD *)(v2 + 3728) = 933;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15552),
        (const char (*)[19])byte_1A63A840,
        (data::WatcherTriggerType *)(v2 + 3728));
      if ( *(_BYTE *)(((v2 + 3744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3744) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3744, byte_1A63A840);
      *(_DWORD *)(v2 + 3744) = 934;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15592),
        (const char (*)[31])byte_1A63A880,
        (data::WatcherTriggerType *)(v2 + 3744));
      if ( *(_BYTE *)(((v2 + 3760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3760) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3760, byte_1A63A880);
      *(_DWORD *)(v2 + 3760) = 935;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15632),
        (const char (*)[31])byte_1A63A8C0,
        (data::WatcherTriggerType *)(v2 + 3760));
      if ( *(_BYTE *)(((v2 + 3776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3776) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3776, byte_1A63A8C0);
      *(_DWORD *)(v2 + 3776) = 936;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15672),
        (const char (*)[31])byte_1A63A900,
        (data::WatcherTriggerType *)(v2 + 3776));
      if ( *(_BYTE *)(((v2 + 3792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3792) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3792, byte_1A63A900);
      *(_DWORD *)(v2 + 3792) = 937;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15712),
        (const char (*)[28])byte_1A63A940,
        (data::WatcherTriggerType *)(v2 + 3792));
      if ( *(_BYTE *)(((v2 + 3808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3808) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3808, byte_1A63A940);
      *(_DWORD *)(v2 + 3808) = 938;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15752),
        (const char (*)[28])byte_1A63A980,
        (data::WatcherTriggerType *)(v2 + 3808));
      if ( *(_BYTE *)(((v2 + 3824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3824) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3824, byte_1A63A980);
      *(_DWORD *)(v2 + 3824) = 939;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15792),
        (const char (*)[31])byte_1A63A9C0,
        (data::WatcherTriggerType *)(v2 + 3824));
      if ( *(_BYTE *)(((v2 + 3840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3840) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3840, byte_1A63A9C0);
      *(_DWORD *)(v2 + 3840) = 940;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15832),
        (const char (*)[34])byte_1A63AA00,
        (data::WatcherTriggerType *)(v2 + 3840));
      if ( *(_BYTE *)(((v2 + 3856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3856) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3856, byte_1A63AA00);
      *(_DWORD *)(v2 + 3856) = 941;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15872),
        (const char (*)[28])byte_1A63AA60,
        (data::WatcherTriggerType *)(v2 + 3856));
      if ( *(_BYTE *)(((v2 + 3872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3872) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3872, byte_1A63AA60);
      *(_DWORD *)(v2 + 3872) = 942;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15912),
        (const char (*)[29])byte_1A63AAA0,
        (data::WatcherTriggerType *)(v2 + 3872));
      if ( *(_BYTE *)(((v2 + 3888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3888) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3888, byte_1A63AAA0);
      *(_DWORD *)(v2 + 3888) = 943;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15952),
        (const char (*)[29])byte_1A63AAE0,
        (data::WatcherTriggerType *)(v2 + 3888));
      if ( *(_BYTE *)(((v2 + 3904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3904) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3904, byte_1A63AAE0);
      *(_DWORD *)(v2 + 3904) = 944;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[17],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 15992),
        (const char (*)[17])byte_1A63AB20,
        (data::WatcherTriggerType *)(v2 + 3904));
      if ( *(_BYTE *)(((v2 + 3920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3920) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3920, byte_1A63AB20);
      *(_DWORD *)(v2 + 3920) = 945;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16032),
        (const char (*)[47])byte_1A63AB60,
        (data::WatcherTriggerType *)(v2 + 3920));
      if ( *(_BYTE *)(((v2 + 3936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3936) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3936, byte_1A63AB60);
      *(_DWORD *)(v2 + 3936) = 946;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16072),
        (const char (*)[40])byte_1A63ABC0,
        (data::WatcherTriggerType *)(v2 + 3936));
      if ( *(_BYTE *)(((v2 + 3952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3952) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3952, byte_1A63ABC0);
      *(_DWORD *)(v2 + 3952) = 947;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16112),
        (const char (*)[34])byte_1A63AC20,
        (data::WatcherTriggerType *)(v2 + 3952));
      if ( *(_BYTE *)(((v2 + 3968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3968) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3968, byte_1A63AC20);
      *(_DWORD *)(v2 + 3968) = 948;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16152),
        (const char (*)[19])byte_1A63AC80,
        (data::WatcherTriggerType *)(v2 + 3968));
      if ( *(_BYTE *)(((v2 + 3984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3984) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3984, byte_1A63AC80);
      *(_DWORD *)(v2 + 3984) = 949;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16192),
        (const char (*)[22])byte_1A63ACC0,
        (data::WatcherTriggerType *)(v2 + 3984));
      if ( *(_BYTE *)(((v2 + 4000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4000) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4000, byte_1A63ACC0);
      *(_DWORD *)(v2 + 4000) = 950;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16232),
        (const char (*)[28])byte_1A63AD00,
        (data::WatcherTriggerType *)(v2 + 4000));
      if ( *(_BYTE *)(((v2 + 4016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4016) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4016, byte_1A63AD00);
      *(_DWORD *)(v2 + 4016) = 951;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16272),
        (const char (*)[25])byte_1A63AD40,
        (data::WatcherTriggerType *)(v2 + 4016));
      if ( *(_BYTE *)(((v2 + 4032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4032) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4032, byte_1A63AD40);
      *(_DWORD *)(v2 + 4032) = 952;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16312),
        (const char (*)[28])byte_1A63AD80,
        (data::WatcherTriggerType *)(v2 + 4032));
      if ( *(_BYTE *)(((v2 + 4048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4048) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4048, byte_1A63AD80);
      *(_DWORD *)(v2 + 4048) = 953;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16352),
        (const char (*)[16])byte_1A63ADC0,
        (data::WatcherTriggerType *)(v2 + 4048));
      if ( *(_BYTE *)(((v2 + 4064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4064) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4064, byte_1A63ADC0);
      *(_DWORD *)(v2 + 4064) = 954;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16392),
        (const char (*)[16])byte_1A63AE00,
        (data::WatcherTriggerType *)(v2 + 4064));
      if ( *(_BYTE *)(((v2 + 4080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4080) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4080, byte_1A63AE00);
      *(_DWORD *)(v2 + 4080) = 955;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16432),
        (const char (*)[22])byte_1A63AE40,
        (data::WatcherTriggerType *)(v2 + 4080));
      if ( *(_BYTE *)(((v2 + 4096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4096) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4096, byte_1A63AE40);
      *(_DWORD *)(v2 + 4096) = 956;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16472),
        (const char (*)[25])byte_1A63AE80,
        (data::WatcherTriggerType *)(v2 + 4096));
      if ( *(_BYTE *)(((v2 + 4112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4112, byte_1A63AE80);
      *(_DWORD *)(v2 + 4112) = 957;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16512),
        (const char (*)[28])byte_1A63AEC0,
        (data::WatcherTriggerType *)(v2 + 4112));
      if ( *(_BYTE *)(((v2 + 4128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4128, byte_1A63AEC0);
      *(_DWORD *)(v2 + 4128) = 1000;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16552),
        (const char (*)[19])byte_1A63AF00,
        (data::WatcherTriggerType *)(v2 + 4128));
      if ( *(_BYTE *)(((v2 + 4144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4144, byte_1A63AF00);
      *(_DWORD *)(v2 + 4144) = 1001;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16592),
        (const char (*)[19])byte_1A63AF40,
        (data::WatcherTriggerType *)(v2 + 4144));
      if ( *(_BYTE *)(((v2 + 4160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4160, byte_1A63AF40);
      *(_DWORD *)(v2 + 4160) = 1002;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16632),
        (const char (*)[25])byte_1A63AF80,
        (data::WatcherTriggerType *)(v2 + 4160));
      if ( *(_BYTE *)(((v2 + 4176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4176, byte_1A63AF80);
      *(_DWORD *)(v2 + 4176) = 1003;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16672),
        (const char (*)[13])byte_1A63AFC0,
        (data::WatcherTriggerType *)(v2 + 4176));
      if ( *(_BYTE *)(((v2 + 4192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4192, byte_1A63AFC0);
      *(_DWORD *)(v2 + 4192) = 1004;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16712),
        (const char (*)[13])byte_1A63B000,
        (data::WatcherTriggerType *)(v2 + 4192));
      if ( *(_BYTE *)(((v2 + 4208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4208, byte_1A63B000);
      *(_DWORD *)(v2 + 4208) = 1005;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16752),
        (const char (*)[22])byte_1A63B040,
        (data::WatcherTriggerType *)(v2 + 4208));
      if ( *(_BYTE *)(((v2 + 4224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4224, byte_1A63B040);
      *(_DWORD *)(v2 + 4224) = 1006;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16792),
        (const char (*)[22])byte_1A63B080,
        (data::WatcherTriggerType *)(v2 + 4224));
      if ( *(_BYTE *)(((v2 + 4240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4240, byte_1A63B080);
      *(_DWORD *)(v2 + 4240) = 1007;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16832),
        (const char (*)[37])byte_1A63B0C0,
        (data::WatcherTriggerType *)(v2 + 4240));
      if ( *(_BYTE *)(((v2 + 4256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4256, byte_1A63B0C0);
      *(_DWORD *)(v2 + 4256) = 1008;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16872),
        (const char (*)[25])byte_1A63B120,
        (data::WatcherTriggerType *)(v2 + 4256));
      if ( *(_BYTE *)(((v2 + 4272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4272, byte_1A63B120);
      *(_DWORD *)(v2 + 4272) = 1009;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16912),
        (const char (*)[19])byte_1A63B160,
        (data::WatcherTriggerType *)(v2 + 4272));
      if ( *(_BYTE *)(((v2 + 4288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4288, byte_1A63B160);
      *(_DWORD *)(v2 + 4288) = 1010;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16952),
        (const char (*)[19])byte_1A63B1A0,
        (data::WatcherTriggerType *)(v2 + 4288));
      if ( *(_BYTE *)(((v2 + 4304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4304, byte_1A63B1A0);
      *(_DWORD *)(v2 + 4304) = 1011;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 16992),
        (const char (*)[16])byte_1A63B1E0,
        (data::WatcherTriggerType *)(v2 + 4304));
      if ( *(_BYTE *)(((v2 + 4320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4320, byte_1A63B1E0);
      *(_DWORD *)(v2 + 4320) = 1012;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17032),
        (const char (*)[19])byte_1A63B220,
        (data::WatcherTriggerType *)(v2 + 4320));
      if ( *(_BYTE *)(((v2 + 4336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4336, byte_1A63B220);
      *(_DWORD *)(v2 + 4336) = 1013;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17072),
        (const char (*)[19])byte_1A63B260,
        (data::WatcherTriggerType *)(v2 + 4336));
      if ( *(_BYTE *)(((v2 + 4352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4352, byte_1A63B260);
      *(_DWORD *)(v2 + 4352) = 1014;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17112),
        (const char (*)[34])byte_1A63B2A0,
        (data::WatcherTriggerType *)(v2 + 4352));
      if ( *(_BYTE *)(((v2 + 4368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4368, byte_1A63B2A0);
      *(_DWORD *)(v2 + 4368) = 1015;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17152),
        (const char (*)[34])byte_1A63B300,
        (data::WatcherTriggerType *)(v2 + 4368));
      if ( *(_BYTE *)(((v2 + 4384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4384, byte_1A63B300);
      *(_DWORD *)(v2 + 4384) = 1016;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17192),
        (const char (*)[34])byte_1A63B360,
        (data::WatcherTriggerType *)(v2 + 4384));
      if ( *(_BYTE *)(((v2 + 4400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4400, byte_1A63B360);
      *(_DWORD *)(v2 + 4400) = 1017;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17232),
        (const char (*)[34])byte_1A63B3C0,
        (data::WatcherTriggerType *)(v2 + 4400));
      if ( *(_BYTE *)(((v2 + 4416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4416, byte_1A63B3C0);
      *(_DWORD *)(v2 + 4416) = 1018;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17272),
        (const char (*)[28])byte_1A63B420,
        (data::WatcherTriggerType *)(v2 + 4416));
      if ( *(_BYTE *)(((v2 + 4432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4432, byte_1A63B420);
      *(_DWORD *)(v2 + 4432) = 1019;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17312),
        (const char (*)[28])byte_1A63B460,
        (data::WatcherTriggerType *)(v2 + 4432));
      if ( *(_BYTE *)(((v2 + 4448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4448, byte_1A63B460);
      *(_DWORD *)(v2 + 4448) = 1020;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17352),
        (const char (*)[19])byte_1A63B4A0,
        (data::WatcherTriggerType *)(v2 + 4448));
      if ( *(_BYTE *)(((v2 + 4464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4464, byte_1A63B4A0);
      *(_DWORD *)(v2 + 4464) = 1021;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17392),
        (const char (*)[19])byte_1A63B4E0,
        (data::WatcherTriggerType *)(v2 + 4464));
      if ( *(_BYTE *)(((v2 + 4480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4480, byte_1A63B4E0);
      *(_DWORD *)(v2 + 4480) = 1022;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17432),
        (const char (*)[22])byte_1A63B520,
        (data::WatcherTriggerType *)(v2 + 4480));
      if ( *(_BYTE *)(((v2 + 4496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4496, byte_1A63B520);
      *(_DWORD *)(v2 + 4496) = 1023;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17472),
        (const char (*)[16])byte_1A63B560,
        (data::WatcherTriggerType *)(v2 + 4496));
      if ( *(_BYTE *)(((v2 + 4512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4512, byte_1A63B560);
      *(_DWORD *)(v2 + 4512) = 1024;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17512),
        (const char (*)[22])byte_1A63B5A0,
        (data::WatcherTriggerType *)(v2 + 4512));
      if ( *(_BYTE *)(((v2 + 4528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4528, byte_1A63B5A0);
      *(_DWORD *)(v2 + 4528) = 1100;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17552),
        (const char (*)[19])byte_1A63B5E0,
        (data::WatcherTriggerType *)(v2 + 4528));
      if ( *(_BYTE *)(((v2 + 4544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4544, byte_1A63B5E0);
      *(_DWORD *)(v2 + 4544) = 1101;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17592),
        (const char (*)[24])byte_1A63B620,
        (data::WatcherTriggerType *)(v2 + 4544));
      if ( *(_BYTE *)(((v2 + 4560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4560, byte_1A63B620);
      *(_DWORD *)(v2 + 4560) = 1102;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17632),
        (const char (*)[13])byte_1A63B660,
        (data::WatcherTriggerType *)(v2 + 4560));
      if ( *(_BYTE *)(((v2 + 4576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4576, byte_1A63B660);
      *(_DWORD *)(v2 + 4576) = 1103;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17672),
        (const char (*)[22])byte_1A63B6A0,
        (data::WatcherTriggerType *)(v2 + 4576));
      if ( *(_BYTE *)(((v2 + 4592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4592, byte_1A63B6A0);
      *(_DWORD *)(v2 + 4592) = 1104;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17712),
        (const char (*)[16])byte_1A63B6E0,
        (data::WatcherTriggerType *)(v2 + 4592));
      if ( *(_BYTE *)(((v2 + 4608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4608, byte_1A63B6E0);
      *(_DWORD *)(v2 + 4608) = 1105;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17752),
        (const char (*)[37])byte_1A63B720,
        (data::WatcherTriggerType *)(v2 + 4608));
      if ( *(_BYTE *)(((v2 + 4624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4624, byte_1A63B720);
      *(_DWORD *)(v2 + 4624) = 1106;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17792),
        (const char (*)[32])byte_1A63B780,
        (data::WatcherTriggerType *)(v2 + 4624));
      if ( *(_BYTE *)(((v2 + 4640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4640, byte_1A63B780);
      *(_DWORD *)(v2 + 4640) = 1107;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17832),
        (const char (*)[41])byte_1A63B7C0,
        (data::WatcherTriggerType *)(v2 + 4640));
      if ( *(_BYTE *)(((v2 + 4656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4656, byte_1A63B7C0);
      *(_DWORD *)(v2 + 4656) = 1108;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17872),
        (const char (*)[32])byte_1A63B820,
        (data::WatcherTriggerType *)(v2 + 4656));
      if ( *(_BYTE *)(((v2 + 4672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4672, byte_1A63B820);
      *(_DWORD *)(v2 + 4672) = 1111;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17912),
        (const char (*)[34])byte_1A63B860,
        (data::WatcherTriggerType *)(v2 + 4672));
      if ( *(_BYTE *)(((v2 + 4688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4688, byte_1A63B860);
      *(_DWORD *)(v2 + 4688) = 1112;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17952),
        (const char (*)[34])byte_1A63B8C0,
        (data::WatcherTriggerType *)(v2 + 4688));
      if ( *(_BYTE *)(((v2 + 4704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4704, byte_1A63B8C0);
      *(_DWORD *)(v2 + 4704) = 1113;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 17992),
        (const char (*)[40])byte_1A63B920,
        (data::WatcherTriggerType *)(v2 + 4704));
      if ( *(_BYTE *)(((v2 + 4720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4720, byte_1A63B920);
      *(_DWORD *)(v2 + 4720) = 1115;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18032),
        (const char (*)[37])byte_1A63B980,
        (data::WatcherTriggerType *)(v2 + 4720));
      if ( *(_BYTE *)(((v2 + 4736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4736, byte_1A63B980);
      *(_DWORD *)(v2 + 4736) = 1116;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[61],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18072),
        (const char (*)[61])byte_1A63B9E0,
        (data::WatcherTriggerType *)(v2 + 4736));
      if ( *(_BYTE *)(((v2 + 4752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4752, byte_1A63B9E0);
      *(_DWORD *)(v2 + 4752) = 1117;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18112),
        (const char (*)[38])byte_1A63BA40,
        (data::WatcherTriggerType *)(v2 + 4752));
      if ( *(_BYTE *)(((v2 + 4768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4768, byte_1A63BA40);
      *(_DWORD *)(v2 + 4768) = 1120;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18152),
        (const char (*)[34])byte_1A63BAA0,
        (data::WatcherTriggerType *)(v2 + 4768));
      if ( *(_BYTE *)(((v2 + 4784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4784, byte_1A63BAA0);
      *(_DWORD *)(v2 + 4784) = 1121;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18192),
        (const char (*)[34])byte_1A63BB00,
        (data::WatcherTriggerType *)(v2 + 4784));
      if ( *(_BYTE *)(((v2 + 4800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4800, byte_1A63BB00);
      *(_DWORD *)(v2 + 4800) = 1122;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18232),
        (const char (*)[28])byte_1A63BB60,
        (data::WatcherTriggerType *)(v2 + 4800));
      if ( *(_BYTE *)(((v2 + 4816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4816, byte_1A63BB60);
      *(_DWORD *)(v2 + 4816) = 1123;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18272),
        (const char (*)[40])byte_1A63BBA0,
        (data::WatcherTriggerType *)(v2 + 4816));
      if ( *(_BYTE *)(((v2 + 4832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4832, byte_1A63BBA0);
      *(_DWORD *)(v2 + 4832) = 1124;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18312),
        (const char (*)[46])byte_1A63BC00,
        (data::WatcherTriggerType *)(v2 + 4832));
      if ( *(_BYTE *)(((v2 + 4848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4848, byte_1A63BC00);
      *(_DWORD *)(v2 + 4848) = 1125;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18352),
        (const char (*)[28])byte_1A63BC60,
        (data::WatcherTriggerType *)(v2 + 4848));
      if ( *(_BYTE *)(((v2 + 4864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4864, byte_1A63BC60);
      *(_DWORD *)(v2 + 4864) = 1126;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18392),
        (const char (*)[31])byte_1A63BCA0,
        (data::WatcherTriggerType *)(v2 + 4864));
      if ( *(_BYTE *)(((v2 + 4880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4880, byte_1A63BCA0);
      *(_DWORD *)(v2 + 4880) = 1127;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18432),
        (const char (*)[31])byte_1A63BCE0,
        (data::WatcherTriggerType *)(v2 + 4880));
      if ( *(_BYTE *)(((v2 + 4896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4896, byte_1A63BCE0);
      *(_DWORD *)(v2 + 4896) = 1128;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18472),
        (const char (*)[37])byte_1A63BD20,
        (data::WatcherTriggerType *)(v2 + 4896));
      if ( *(_BYTE *)(((v2 + 4912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4912, byte_1A63BD20);
      *(_DWORD *)(v2 + 4912) = 1131;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18512),
        (const char (*)[34])byte_1A63BD80,
        (data::WatcherTriggerType *)(v2 + 4912));
      if ( *(_BYTE *)(((v2 + 4928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4928, byte_1A63BD80);
      *(_DWORD *)(v2 + 4928) = 1132;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18552),
        (const char (*)[34])byte_1A63BDE0,
        (data::WatcherTriggerType *)(v2 + 4928));
      if ( *(_BYTE *)(((v2 + 4944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4944, byte_1A63BDE0);
      *(_DWORD *)(v2 + 4944) = 1133;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18592),
        (const char (*)[43])byte_1A63BE40,
        (data::WatcherTriggerType *)(v2 + 4944));
      if ( *(_BYTE *)(((v2 + 4960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4960, byte_1A63BE40);
      *(_DWORD *)(v2 + 4960) = 1134;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18632),
        (const char (*)[34])byte_1A63BEA0,
        (data::WatcherTriggerType *)(v2 + 4960));
      if ( *(_BYTE *)(((v2 + 4976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4976, byte_1A63BEA0);
      *(_DWORD *)(v2 + 4976) = 1135;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18672),
        (const char (*)[30])byte_1A63BF00,
        (data::WatcherTriggerType *)(v2 + 4976));
      if ( *(_BYTE *)(((v2 + 4992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 4992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 4992, byte_1A63BF00);
      *(_DWORD *)(v2 + 4992) = 1138;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18712),
        (const char (*)[49])byte_1A63BF40,
        (data::WatcherTriggerType *)(v2 + 4992));
      if ( *(_BYTE *)(((v2 + 5008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5008, byte_1A63BF40);
      *(_DWORD *)(v2 + 5008) = 1139;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18752),
        (const char (*)[55])byte_1A63BFA0,
        (data::WatcherTriggerType *)(v2 + 5008));
      if ( *(_BYTE *)(((v2 + 5024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5024, byte_1A63BFA0);
      *(_DWORD *)(v2 + 5024) = 1140;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18792),
        (const char (*)[41])byte_1A63C000,
        (data::WatcherTriggerType *)(v2 + 5024));
      if ( *(_BYTE *)(((v2 + 5040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5040, byte_1A63C000);
      *(_DWORD *)(v2 + 5040) = 1141;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18832),
        (const char (*)[28])byte_1A63C060,
        (data::WatcherTriggerType *)(v2 + 5040));
      if ( *(_BYTE *)(((v2 + 5056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5056, byte_1A63C060);
      *(_DWORD *)(v2 + 5056) = 1142;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18872),
        (const char (*)[28])byte_1A63C0A0,
        (data::WatcherTriggerType *)(v2 + 5056));
      if ( *(_BYTE *)(((v2 + 5072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5072, byte_1A63C0A0);
      *(_DWORD *)(v2 + 5072) = 1143;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18912),
        (const char (*)[28])byte_1A63C0E0,
        (data::WatcherTriggerType *)(v2 + 5072));
      if ( *(_BYTE *)(((v2 + 5088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5088, byte_1A63C0E0);
      *(_DWORD *)(v2 + 5088) = 1144;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18952),
        (const char (*)[28])byte_1A63C120,
        (data::WatcherTriggerType *)(v2 + 5088));
      if ( *(_BYTE *)(((v2 + 5104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5104, byte_1A63C120);
      *(_DWORD *)(v2 + 5104) = 1145;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 18992),
        (const char (*)[34])byte_1A63C160,
        (data::WatcherTriggerType *)(v2 + 5104));
      if ( *(_BYTE *)(((v2 + 5120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5120, byte_1A63C160);
      *(_DWORD *)(v2 + 5120) = 1151;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19032),
        (const char (*)[22])byte_1A63C1C0,
        (data::WatcherTriggerType *)(v2 + 5120));
      if ( *(_BYTE *)(((v2 + 5136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5136, byte_1A63C1C0);
      *(_DWORD *)(v2 + 5136) = 1152;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19072),
        (const char (*)[28])byte_1A63C200,
        (data::WatcherTriggerType *)(v2 + 5136));
      if ( *(_BYTE *)(((v2 + 5152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5152) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5152, byte_1A63C200);
      *(_DWORD *)(v2 + 5152) = 1153;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19112),
        (const char (*)[46])byte_1A63C240,
        (data::WatcherTriggerType *)(v2 + 5152));
      if ( *(_BYTE *)(((v2 + 5168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5168, byte_1A63C240);
      *(_DWORD *)(v2 + 5168) = 1154;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19152),
        (const char (*)[31])byte_1A63C2A0,
        (data::WatcherTriggerType *)(v2 + 5168));
      if ( *(_BYTE *)(((v2 + 5184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5184) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5184, byte_1A63C2A0);
      *(_DWORD *)(v2 + 5184) = 1161;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19192),
        (const char (*)[34])byte_1A63C2E0,
        (data::WatcherTriggerType *)(v2 + 5184));
      if ( *(_BYTE *)(((v2 + 5200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5200) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5200, byte_1A63C2E0);
      *(_DWORD *)(v2 + 5200) = 1162;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19232),
        (const char (*)[34])byte_1A63C340,
        (data::WatcherTriggerType *)(v2 + 5200));
      if ( *(_BYTE *)(((v2 + 5216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5216) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5216, byte_1A63C340);
      *(_DWORD *)(v2 + 5216) = 1165;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19272),
        (const char (*)[31])byte_1A63C3A0,
        (data::WatcherTriggerType *)(v2 + 5216));
      if ( *(_BYTE *)(((v2 + 5232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5232) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5232, byte_1A63C3A0);
      *(_DWORD *)(v2 + 5232) = 1171;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19312),
        (const char (*)[31])byte_1A63C3E0,
        (data::WatcherTriggerType *)(v2 + 5232));
      if ( *(_BYTE *)(((v2 + 5248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5248) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5248, byte_1A63C3E0);
      *(_DWORD *)(v2 + 5248) = 1172;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19352),
        (const char (*)[31])byte_1A63C420,
        (data::WatcherTriggerType *)(v2 + 5248));
      if ( *(_BYTE *)(((v2 + 5264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5264) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5264, byte_1A63C420);
      *(_DWORD *)(v2 + 5264) = 1173;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19392),
        (const char (*)[31])byte_1A63C460,
        (data::WatcherTriggerType *)(v2 + 5264));
      if ( *(_BYTE *)(((v2 + 5280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5280) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5280, byte_1A63C460);
      *(_DWORD *)(v2 + 5280) = 1174;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19432),
        (const char (*)[37])byte_1A63C4A0,
        (data::WatcherTriggerType *)(v2 + 5280));
      if ( *(_BYTE *)(((v2 + 5296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5296) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5296, byte_1A63C4A0);
      *(_DWORD *)(v2 + 5296) = 1176;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19472),
        (const char (*)[43])byte_1A63C500,
        (data::WatcherTriggerType *)(v2 + 5296));
      if ( *(_BYTE *)(((v2 + 5312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5312, byte_1A63C500);
      *(_DWORD *)(v2 + 5312) = 1180;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19512),
        (const char (*)[46])byte_1A63C560,
        (data::WatcherTriggerType *)(v2 + 5312));
      if ( *(_BYTE *)(((v2 + 5328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5328, byte_1A63C560);
      *(_DWORD *)(v2 + 5328) = 1181;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19552),
        (const char (*)[43])byte_1A63C5C0,
        (data::WatcherTriggerType *)(v2 + 5328));
      if ( *(_BYTE *)(((v2 + 5344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5344) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5344, byte_1A63C5C0);
      *(_DWORD *)(v2 + 5344) = 1182;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[52],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19592),
        (const char (*)[52])byte_1A63C620,
        (data::WatcherTriggerType *)(v2 + 5344));
      if ( *(_BYTE *)(((v2 + 5360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5360) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5360, byte_1A63C620);
      *(_DWORD *)(v2 + 5360) = 1186;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19632),
        (const char (*)[37])byte_1A63C680,
        (data::WatcherTriggerType *)(v2 + 5360));
      if ( *(_BYTE *)(((v2 + 5376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5376) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5376, byte_1A63C680);
      *(_DWORD *)(v2 + 5376) = 1190;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[58],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19672),
        (const char (*)[58])byte_1A63C6E0,
        (data::WatcherTriggerType *)(v2 + 5376));
      if ( *(_BYTE *)(((v2 + 5392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5392) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5392, byte_1A63C6E0);
      *(_DWORD *)(v2 + 5392) = 1191;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[58],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19712),
        (const char (*)[58])byte_1A63C740,
        (data::WatcherTriggerType *)(v2 + 5392));
      if ( *(_BYTE *)(((v2 + 5408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5408) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5408, byte_1A63C740);
      *(_DWORD *)(v2 + 5408) = 1192;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19752),
        (const char (*)[49])byte_1A63C7A0,
        (data::WatcherTriggerType *)(v2 + 5408));
      if ( *(_BYTE *)(((v2 + 5424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5424) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5424, byte_1A63C7A0);
      *(_DWORD *)(v2 + 5424) = 1193;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[58],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19792),
        (const char (*)[58])byte_1A63C800,
        (data::WatcherTriggerType *)(v2 + 5424));
      if ( *(_BYTE *)(((v2 + 5440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5440) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5440, byte_1A63C800);
      *(_DWORD *)(v2 + 5440) = 1194;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[52],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19832),
        (const char (*)[52])byte_1A63C860,
        (data::WatcherTriggerType *)(v2 + 5440));
      if ( *(_BYTE *)(((v2 + 5456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5456) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5456, byte_1A63C860);
      *(_DWORD *)(v2 + 5456) = 1195;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[50],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19872),
        (const char (*)[50])byte_1A63C8C0,
        (data::WatcherTriggerType *)(v2 + 5456));
      if ( *(_BYTE *)(((v2 + 5472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5472) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5472, byte_1A63C8C0);
      *(_DWORD *)(v2 + 5472) = 1196;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[74],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19912),
        (const char (*)[74])byte_1A63C920,
        (data::WatcherTriggerType *)(v2 + 5472));
      if ( *(_BYTE *)(((v2 + 5488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5488) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5488, byte_1A63C920);
      *(_DWORD *)(v2 + 5488) = 1197;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19952),
        (const char (*)[43])byte_1A63C9A0,
        (data::WatcherTriggerType *)(v2 + 5488));
      if ( *(_BYTE *)(((v2 + 5504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5504) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5504, byte_1A63C9A0);
      *(_DWORD *)(v2 + 5504) = 1198;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[52],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 19992),
        (const char (*)[52])byte_1A63CA00,
        (data::WatcherTriggerType *)(v2 + 5504));
      if ( *(_BYTE *)(((v2 + 5520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5520) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5520, byte_1A63CA00);
      *(_DWORD *)(v2 + 5520) = 1199;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20032),
        (const char (*)[43])byte_1A63CA60,
        (data::WatcherTriggerType *)(v2 + 5520));
      if ( *(_BYTE *)(((v2 + 5536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5536) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5536, byte_1A63CA60);
      *(_DWORD *)(v2 + 5536) = 1200;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20072),
        (const char (*)[31])byte_1A63CAC0,
        (data::WatcherTriggerType *)(v2 + 5536));
      if ( *(_BYTE *)(((v2 + 5552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5552) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5552, byte_1A63CAC0);
      *(_DWORD *)(v2 + 5552) = 1206;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20112),
        (const char (*)[40])byte_1A63CB00,
        (data::WatcherTriggerType *)(v2 + 5552));
      if ( *(_BYTE *)(((v2 + 5568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5568) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5568, byte_1A63CB00);
      *(_DWORD *)(v2 + 5568) = 1207;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[50],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20152),
        (const char (*)[50])byte_1A63CB60,
        (data::WatcherTriggerType *)(v2 + 5568));
      if ( *(_BYTE *)(((v2 + 5584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5584) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5584, byte_1A63CB60);
      *(_DWORD *)(v2 + 5584) = 1208;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20192),
        (const char (*)[37])byte_1A63CBC0,
        (data::WatcherTriggerType *)(v2 + 5584));
      if ( *(_BYTE *)(((v2 + 5600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5600) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5600, byte_1A63CBC0);
      *(_DWORD *)(v2 + 5600) = 1210;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20232),
        (const char (*)[25])byte_1A63CC20,
        (data::WatcherTriggerType *)(v2 + 5600));
      if ( *(_BYTE *)(((v2 + 5616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5616) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5616, byte_1A63CC20);
      *(_DWORD *)(v2 + 5616) = 1211;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20272),
        (const char (*)[40])byte_1A63CC60,
        (data::WatcherTriggerType *)(v2 + 5616));
      if ( *(_BYTE *)(((v2 + 5632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5632) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5632, byte_1A63CC60);
      *(_DWORD *)(v2 + 5632) = 1212;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20312),
        (const char (*)[31])byte_1A63CCC0,
        (data::WatcherTriggerType *)(v2 + 5632));
      if ( *(_BYTE *)(((v2 + 5648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5648) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5648, byte_1A63CCC0);
      *(_DWORD *)(v2 + 5648) = 1213;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20352),
        (const char (*)[31])byte_1A63CD00,
        (data::WatcherTriggerType *)(v2 + 5648));
      if ( *(_BYTE *)(((v2 + 5664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5664) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5664, byte_1A63CD00);
      *(_DWORD *)(v2 + 5664) = 3200;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20392),
        (const char (*)[37])byte_1A63CD40,
        (data::WatcherTriggerType *)(v2 + 5664));
      if ( *(_BYTE *)(((v2 + 5680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5680) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5680, byte_1A63CD40);
      *(_DWORD *)(v2 + 5680) = 3300;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20432),
        (const char (*)[31])byte_1A63CDA0,
        (data::WatcherTriggerType *)(v2 + 5680));
      if ( *(_BYTE *)(((v2 + 5696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5696) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5696, byte_1A63CDA0);
      *(_DWORD *)(v2 + 5696) = 1300;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20472),
        (const char (*)[19])byte_1A63CDE0,
        (data::WatcherTriggerType *)(v2 + 5696));
      if ( *(_BYTE *)(((v2 + 5712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5712) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5712, byte_1A63CDE0);
      *(_DWORD *)(v2 + 5712) = 1301;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20512),
        (const char (*)[31])byte_1A63CE20,
        (data::WatcherTriggerType *)(v2 + 5712));
      if ( *(_BYTE *)(((v2 + 5728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5728) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5728, byte_1A63CE20);
      *(_DWORD *)(v2 + 5728) = 1302;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20552),
        (const char (*)[22])byte_1A63CE60,
        (data::WatcherTriggerType *)(v2 + 5728));
      if ( *(_BYTE *)(((v2 + 5744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5744) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5744, byte_1A63CE60);
      *(_DWORD *)(v2 + 5744) = 1303;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20592),
        (const char (*)[25])byte_1A63CEA0,
        (data::WatcherTriggerType *)(v2 + 5744));
      if ( *(_BYTE *)(((v2 + 5760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5760) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5760, byte_1A63CEA0);
      *(_DWORD *)(v2 + 5760) = 1304;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20632),
        (const char (*)[25])byte_1A63CEE0,
        (data::WatcherTriggerType *)(v2 + 5760));
      if ( *(_BYTE *)(((v2 + 5776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5776) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5776, byte_1A63CEE0);
      *(_DWORD *)(v2 + 5776) = 1305;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20672),
        (const char (*)[40])byte_1A63CF20,
        (data::WatcherTriggerType *)(v2 + 5776));
      if ( *(_BYTE *)(((v2 + 5792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5792) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5792, byte_1A63CF20);
      *(_DWORD *)(v2 + 5792) = 1306;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20712),
        (const char (*)[25])byte_1A63CF80,
        (data::WatcherTriggerType *)(v2 + 5792));
      if ( *(_BYTE *)(((v2 + 5808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5808) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5808, byte_1A63CF80);
      *(_DWORD *)(v2 + 5808) = 1307;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20752),
        (const char (*)[31])byte_1A63CFC0,
        (data::WatcherTriggerType *)(v2 + 5808));
      if ( *(_BYTE *)(((v2 + 5824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5824) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5824, byte_1A63CFC0);
      *(_DWORD *)(v2 + 5824) = 1308;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20792),
        (const char (*)[25])byte_1A63D000,
        (data::WatcherTriggerType *)(v2 + 5824));
      if ( *(_BYTE *)(((v2 + 5840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5840) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5840, byte_1A63D000);
      *(_DWORD *)(v2 + 5840) = 1309;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20832),
        (const char (*)[37])byte_1A63D040,
        (data::WatcherTriggerType *)(v2 + 5840));
      if ( *(_BYTE *)(((v2 + 5856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5856) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5856, byte_1A63D040);
      *(_DWORD *)(v2 + 5856) = 1310;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20872),
        (const char (*)[37])byte_1A63D0A0,
        (data::WatcherTriggerType *)(v2 + 5856));
      if ( *(_BYTE *)(((v2 + 5872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5872) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5872, byte_1A63D0A0);
      *(_DWORD *)(v2 + 5872) = 1311;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20912),
        (const char (*)[37])byte_1A63D100,
        (data::WatcherTriggerType *)(v2 + 5872));
      if ( *(_BYTE *)(((v2 + 5888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5888) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5888, byte_1A63D100);
      *(_DWORD *)(v2 + 5888) = 1312;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20952),
        (const char (*)[28])byte_1A63D160,
        (data::WatcherTriggerType *)(v2 + 5888));
      if ( *(_BYTE *)(((v2 + 5904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5904) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5904, byte_1A63D160);
      *(_DWORD *)(v2 + 5904) = 1313;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 20992),
        (const char (*)[31])byte_1A63D1A0,
        (data::WatcherTriggerType *)(v2 + 5904));
      if ( *(_BYTE *)(((v2 + 5920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5920) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5920, byte_1A63D1A0);
      *(_DWORD *)(v2 + 5920) = 1314;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21032),
        (const char (*)[39])byte_1A63D1E0,
        (data::WatcherTriggerType *)(v2 + 5920));
      if ( *(_BYTE *)(((v2 + 5936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5936) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5936, byte_1A63D1E0);
      *(_DWORD *)(v2 + 5936) = 1315;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21072),
        (const char (*)[55])byte_1A63D240,
        (data::WatcherTriggerType *)(v2 + 5936));
      if ( *(_BYTE *)(((v2 + 5952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5952) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5952, byte_1A63D240);
      *(_DWORD *)(v2 + 5952) = 3310;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21112),
        (const char (*)[31])byte_1A63D2A0,
        (data::WatcherTriggerType *)(v2 + 5952));
      if ( *(_BYTE *)(((v2 + 5968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5968) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5968, byte_1A63D2A0);
      *(_DWORD *)(v2 + 5968) = 3311;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21152),
        (const char (*)[46])byte_1A63D2E0,
        (data::WatcherTriggerType *)(v2 + 5968));
      if ( *(_BYTE *)(((v2 + 5984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 5984) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 5984, byte_1A63D2E0);
      *(_DWORD *)(v2 + 5984) = 3312;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21192),
        (const char (*)[43])byte_1A63D340,
        (data::WatcherTriggerType *)(v2 + 5984));
      if ( *(_BYTE *)(((v2 + 6000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6000) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6000, byte_1A63D340);
      *(_DWORD *)(v2 + 6000) = 3313;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21232),
        (const char (*)[28])byte_1A63D3A0,
        (data::WatcherTriggerType *)(v2 + 6000));
      if ( *(_BYTE *)(((v2 + 6016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6016) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6016, byte_1A63D3A0);
      *(_DWORD *)(v2 + 6016) = 3314;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21272),
        (const char (*)[43])byte_1A63D3E0,
        (data::WatcherTriggerType *)(v2 + 6016));
      if ( *(_BYTE *)(((v2 + 6032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6032) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6032, byte_1A63D3E0);
      *(_DWORD *)(v2 + 6032) = 3315;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21312),
        (const char (*)[40])byte_1A63D440,
        (data::WatcherTriggerType *)(v2 + 6032));
      if ( *(_BYTE *)(((v2 + 6048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6048) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6048, byte_1A63D440);
      *(_DWORD *)(v2 + 6048) = 3316;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21352),
        (const char (*)[55])byte_1A63D4A0,
        (data::WatcherTriggerType *)(v2 + 6048));
      if ( *(_BYTE *)(((v2 + 6064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6064) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6064, byte_1A63D4A0);
      *(_DWORD *)(v2 + 6064) = 3317;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[58],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21392),
        (const char (*)[58])byte_1A63D500,
        (data::WatcherTriggerType *)(v2 + 6064));
      if ( *(_BYTE *)(((v2 + 6080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6080) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6080, byte_1A63D500);
      *(_DWORD *)(v2 + 6080) = 3318;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[52],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21432),
        (const char (*)[52])byte_1A63D560,
        (data::WatcherTriggerType *)(v2 + 6080));
      if ( *(_BYTE *)(((v2 + 6096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6096) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6096, byte_1A63D560);
      *(_DWORD *)(v2 + 6096) = 3319;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21472),
        (const char (*)[55])byte_1A63D5C0,
        (data::WatcherTriggerType *)(v2 + 6096));
      if ( *(_BYTE *)(((v2 + 6112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6112, byte_1A63D5C0);
      *(_DWORD *)(v2 + 6112) = 3320;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21512),
        (const char (*)[22])byte_1A63D620,
        (data::WatcherTriggerType *)(v2 + 6112));
      if ( *(_BYTE *)(((v2 + 6128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6128, byte_1A63D620);
      *(_DWORD *)(v2 + 6128) = 3400;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21552),
        (const char (*)[31])byte_1A63D660,
        (data::WatcherTriggerType *)(v2 + 6128));
      if ( *(_BYTE *)(((v2 + 6144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6144, byte_1A63D660);
      *(_DWORD *)(v2 + 6144) = 3401;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21592),
        (const char (*)[43])byte_1A63D6A0,
        (data::WatcherTriggerType *)(v2 + 6144));
      if ( *(_BYTE *)(((v2 + 6160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6160, byte_1A63D6A0);
      *(_DWORD *)(v2 + 6160) = 3402;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21632),
        (const char (*)[37])byte_1A63D700,
        (data::WatcherTriggerType *)(v2 + 6160));
      if ( *(_BYTE *)(((v2 + 6176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6176, byte_1A63D700);
      *(_DWORD *)(v2 + 6176) = 3403;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21672),
        (const char (*)[25])byte_1A63D760,
        (data::WatcherTriggerType *)(v2 + 6176));
      if ( *(_BYTE *)(((v2 + 6192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6192, byte_1A63D760);
      *(_DWORD *)(v2 + 6192) = 3406;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21712),
        (const char (*)[31])byte_1A63D7A0,
        (data::WatcherTriggerType *)(v2 + 6192));
      if ( *(_BYTE *)(((v2 + 6208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 6208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 6208, byte_1A63D7A0);
      *(_DWORD *)(v2 + 6208) = 3407;
      std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
        (std::pair<const std::string,data::WatcherTriggerType> *const)(v2 + 21752),
        (const char (*)[34])byte_1A63D7E0,
        (data::WatcherTriggerType *)(v2 + 6208));
      std::allocator<std::pair<std::string const,data::WatcherTriggerType>>::allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::WatcherTriggerType>::unordered_map(
        &data::enumStrToVal(char const*,data::WatcherTriggerType &)::m,
        (std::initializer_list<std::pair<const std::string,data::WatcherTriggerType> >)__PAIR128__(382LL, v2 + 6512),
        0LL,
        (const std::unordered_map<std::string,data::WatcherTriggerType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::WatcherTriggerType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::WatcherTriggerType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::WatcherTriggerType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::WatcherTriggerType>::~unordered_map,
        &data::enumStrToVal(char const*,data::WatcherTriggerType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::WatcherTriggerType>>::~allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::WatcherTriggerType> *)(v2 + 21792);
            i != (std::pair<const std::string,data::WatcherTriggerType> *)(v2 + 6512);
            std::pair<std::string const,data::WatcherTriggerType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 6512, 15280LL);
      *(_BYTE *)(((v2 + 6208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6096) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6080) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6064) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6048) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6032) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6016) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 6000) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5984) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5968) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5952) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5936) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5920) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5904) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5888) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5872) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5856) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5840) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5824) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5808) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5792) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5776) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5760) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5744) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5728) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5712) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5696) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5680) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5664) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5648) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5632) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5616) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5600) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5584) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5568) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5552) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5536) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5520) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5504) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5488) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5472) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5456) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5440) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5424) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5408) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5392) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5376) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5360) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5344) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5328) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5312) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5296) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5280) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5264) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5248) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5232) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5216) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5200) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5184) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5168) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5152) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5136) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5120) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 5008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4096) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4080) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4064) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4048) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4032) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4016) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 4000) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3984) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3968) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3952) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3936) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3920) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3904) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3888) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3872) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3856) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3840) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3824) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3808) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3792) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3776) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3760) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3744) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3728) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3712) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3696) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3680) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3664) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3648) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3632) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3616) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3600) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3584) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3568) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3552) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3536) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3520) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3504) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3488) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3472) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3456) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3440) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3424) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3408) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3392) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3376) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3360) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3344) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3328) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3296) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 6224) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 6384) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v7 = *(const char **)(v2 + 6288);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 6384),
      v7,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 6224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 6224, v7);
    *(std::unordered_map<std::string,data::WatcherTriggerType>::iterator *)(v2 + 6224) = std::unordered_map<std::string,data::WatcherTriggerType>::find(
                                                                                           &data::enumStrToVal(char const*,data::WatcherTriggerType &)::m,
                                                                                           (const std::unordered_map<std::string,data::WatcherTriggerType>::key_type *)(v2 + 6384));
    std::string::~string((void *)(v2 + 6384));
    *(_DWORD *)(((v2 + 6384) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 6256) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 6256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 6256, v2 + 6384);
    *(std::unordered_map<std::string,data::WatcherTriggerType>::iterator *)(v2 + 6256) = std::unordered_map<std::string,data::WatcherTriggerType>::end(&data::enumStrToVal(char const*,data::WatcherTriggerType &)::m);
    v8 = (char *)(v2 + 6256);
    v9 = std::__detail::operator==<std::pair<std::string const,data::WatcherTriggerType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerType>,true> *)(v2 + 6224),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerType>,true> *)(v2 + 6256));
    *(_BYTE *)(((v2 + 6256) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 6448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 6448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 6479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 79) & 7) >= *(_BYTE *)(((v2 + 6479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 6448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 6448),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        3260);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 6448),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 6288));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6448));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::WatcherTriggerType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::WatcherTriggerType>,false,true> *const)(v2 + 6224));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 6320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 6351) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 6351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 6320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 6320),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      2867);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 6320),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 6320));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8ABC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 2756) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_9(v2, 22048LL, v17);
  }
  return v14;
};

// Line 3269: range 000000000FA72CC5-000000000FA72CDB
const char *__cdecl data::getDescription(data::WatcherTriggerType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 3274: range 000000000FA72CDC-000000000FA72E91
bool __cdecl data::isValidWatcherTriggerType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::WatcherTriggerType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::WatcherTriggerType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:3275 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidWatcherTriggerType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getWatcherTriggerTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::WatcherTriggerType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::WatcherTriggerType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getWatcherTriggerTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::WatcherTriggerType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::WatcherTriggerType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::WatcherTriggerType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::WatcherTriggerType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 3280: range 000000000FA72E92-000000000FA72FF3
bool __cdecl data::isValidWatcherTriggerTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::WatcherTriggerType> *v5; // rcx
  const std::unordered_map<std::string,data::WatcherTriggerType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidWatcherTriggerTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getWatcherTriggerTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::WatcherTriggerType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::WatcherTriggerType>::end(v5);
  v6 = data::getWatcherTriggerTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::WatcherTriggerType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::WatcherTriggerType>::find(
                                                                                             v6,
                                                                                             name);
  result = std::__detail::operator!=<std::pair<std::string const,data::WatcherTriggerType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::WatcherTriggerType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 3285: range 000000000FA72FF4-000000000FA7F2D5
const std::unordered_map<std::string,data::WatcherTriggerType> *__cdecl data::getWatcherTriggerTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::WatcherTriggerType> *i; // r14
  char v6[21840]; // [rsp+10h] [rbp-5550h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_9(21792LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = a3873219Unknown;
  *(_QWORD *)(v1 + 16) = data::getWatcherTriggerTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = -234556924;
  v3[536862754] = -234556924;
  v3[536862755] = -234556924;
  v3[536862756] = -234556924;
  v3[536862757] = -234556924;
  v3[536862758] = -234556924;
  v3[536862759] = -234556924;
  v3[536862760] = -234556924;
  v3[536862761] = -234556924;
  v3[536862762] = -234556924;
  v3[536862763] = -234556924;
  v3[536862764] = -234556924;
  v3[536862765] = -234556924;
  v3[536862766] = -234556924;
  v3[536862767] = -234556924;
  v3[536862768] = -234556924;
  v3[536862769] = -234556924;
  v3[536862770] = -234556924;
  v3[536862771] = -234556924;
  v3[536862772] = -234556924;
  v3[536862773] = -234556924;
  v3[536862774] = -234556924;
  v3[536862775] = -234556924;
  v3[536862776] = -234556924;
  v3[536862777] = -234556924;
  v3[536862778] = -234556924;
  v3[536862779] = -234556924;
  v3[536862780] = -234556924;
  v3[536862781] = -234556924;
  v3[536862782] = -234556924;
  v3[536862783] = -234556924;
  v3[536862784] = -234556924;
  v3[536862785] = -234556924;
  v3[536862786] = -234556924;
  v3[536862787] = -234556924;
  v3[536862788] = -234556924;
  v3[536862789] = -234556924;
  v3[536862790] = -234556924;
  v3[536862791] = -234556924;
  v3[536862792] = -234556924;
  v3[536862793] = -234556924;
  v3[536862794] = -234556924;
  v3[536862795] = -234556924;
  v3[536862796] = -234556924;
  v3[536862797] = -234556924;
  v3[536862798] = -234556924;
  v3[536862799] = -234556924;
  v3[536862800] = -234556924;
  v3[536862801] = -234556924;
  v3[536862802] = -234556924;
  v3[536862803] = -234556924;
  v3[536862804] = -234556924;
  v3[536862805] = -234556924;
  v3[536862806] = -234556924;
  v3[536862807] = -234556924;
  v3[536862808] = -234556924;
  v3[536862809] = -234556924;
  v3[536862810] = -234556924;
  v3[536862811] = -234556924;
  v3[536862812] = -234556924;
  v3[536862813] = -234556924;
  v3[536862814] = -234556924;
  v3[536862815] = -234556924;
  v3[536862816] = -234556924;
  v3[536862817] = -234556924;
  v3[536862818] = -234556924;
  v3[536862819] = -234556924;
  v3[536862820] = -234556924;
  v3[536862821] = -234556924;
  v3[536862822] = -234556924;
  v3[536862823] = -234556924;
  v3[536862824] = -234556924;
  v3[536862825] = -234556924;
  v3[536862826] = -234556924;
  v3[536862827] = -234556924;
  v3[536862828] = -234556924;
  v3[536862829] = -234556924;
  v3[536862830] = -234556924;
  v3[536862831] = -234556924;
  v3[536862832] = -234556924;
  v3[536862833] = -234556924;
  v3[536862834] = -234556924;
  v3[536862835] = -234556924;
  v3[536862836] = -234556924;
  v3[536862837] = -234556924;
  v3[536862838] = -234556924;
  v3[536862839] = -234556924;
  v3[536862840] = -234556924;
  v3[536862841] = -234556924;
  v3[536862842] = -234556924;
  v3[536862843] = -234556924;
  v3[536862844] = -234556924;
  v3[536862845] = -234556924;
  v3[536862846] = -234556924;
  v3[536862847] = -234556924;
  v3[536862848] = -234556924;
  v3[536862849] = -234556924;
  v3[536862850] = -234556924;
  v3[536862851] = -234556924;
  v3[536862852] = -234556924;
  v3[536862853] = -234556924;
  v3[536862854] = -234556924;
  v3[536862855] = -234556924;
  v3[536862856] = -234556924;
  v3[536862857] = -234556924;
  v3[536862858] = -234556924;
  v3[536862859] = -234556924;
  v3[536862860] = -234556924;
  v3[536862861] = -234556924;
  v3[536862862] = -234556924;
  v3[536862863] = -234556924;
  v3[536862864] = -234556924;
  v3[536862865] = -234556924;
  v3[536862866] = -234556924;
  v3[536862867] = -234556924;
  v3[536862868] = -234556924;
  v3[536862869] = -234556924;
  v3[536862870] = -234556924;
  v3[536862871] = -234556924;
  v3[536862872] = -234556924;
  v3[536862873] = -234556924;
  v3[536862874] = -234556924;
  v3[536862875] = -234556924;
  v3[536862876] = -234556924;
  v3[536862877] = -234556924;
  v3[536862878] = -234556924;
  v3[536862879] = -234556924;
  v3[536862880] = -234556924;
  v3[536862881] = -234556924;
  v3[536862882] = -234556924;
  v3[536862883] = -234556924;
  v3[536862884] = -234556924;
  v3[536862885] = -234556924;
  v3[536862886] = -234556924;
  v3[536862887] = -234556924;
  v3[536862888] = -234556924;
  v3[536862889] = -234556924;
  v3[536862890] = -234556924;
  v3[536862891] = -234556924;
  v3[536862892] = -234556924;
  v3[536862893] = -234556924;
  v3[536862894] = -234556924;
  v3[536862895] = -234556924;
  v3[536862896] = -234556924;
  v3[536862897] = -234556924;
  v3[536862898] = -234556924;
  v3[536862899] = -234556924;
  v3[536862900] = -234556924;
  v3[536862901] = -234556924;
  v3[536862902] = -234556924;
  v3[536862903] = -234556924;
  v3[536862904] = -234556924;
  v3[536862905] = -234556924;
  v3[536862906] = -234556924;
  v3[536862907] = -234556924;
  v3[536862908] = -234556924;
  v3[536862909] = -234556924;
  v3[536862910] = -234556924;
  v3[536862911] = -234556924;
  v3[536862912] = -234556924;
  v3[536862913] = -234556924;
  v3[536863392] = -218103808;
  v3[536863393] = -202116109;
  v3[536863394] = -202116109;
  v3[536863395] = -202116109;
  v3[536863396] = -202116109;
  v3[536863397] = -202116109;
  v3[536863398] = -202116109;
  v3[536863399] = -202116109;
  v3[536863400] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getWatcherTriggerTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getWatcherTriggerTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6208),
      (const char (*)[13])"TRIGGER_NONE",
      (data::WatcherTriggerType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "TRIGGER_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6248),
      (const char (*)[29])"TRIGGER_COMBAT_CONFIG_COMMON",
      (data::WatcherTriggerType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "TRIGGER_COMBAT_CONFIG_COMMON");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6288),
      (const char (*)[21])"TRIGGER_ELEMENT_VIEW",
      (data::WatcherTriggerType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "TRIGGER_ELEMENT_VIEW");
    *(_DWORD *)(v1 + 128) = 5;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6328),
      (const char (*)[22])"TRIGGER_ENTER_AIRFLOW",
      (data::WatcherTriggerType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "TRIGGER_ENTER_AIRFLOW");
    *(_DWORD *)(v1 + 144) = 6;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[20],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6368),
      (const char (*)[20])"TRIGGER_NEW_MONSTER",
      (data::WatcherTriggerType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "TRIGGER_NEW_MONSTER");
    *(_DWORD *)(v1 + 160) = 8;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[18],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6408),
      (const char (*)[18])"TRIGGER_NEW_AFFIX",
      (data::WatcherTriggerType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "TRIGGER_NEW_AFFIX");
    *(_DWORD *)(v1 + 176) = 9;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6448),
      (const char (*)[33])"TRIGGER_CHANGE_INPUT_DEVICE_TYPE",
      (data::WatcherTriggerType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "TRIGGER_CHANGE_INPUT_DEVICE_TYPE");
    *(_DWORD *)(v1 + 192) = 10;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6488),
      (const char (*)[38])"TRIGGER_PAIMON_ANGRY_VOICE_EASTER_EGG",
      (data::WatcherTriggerType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "TRIGGER_PAIMON_ANGRY_VOICE_EASTER_EGG");
    *(_DWORD *)(v1 + 208) = 11;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6528),
      (const char (*)[21])"TRIGGER_WIND_CRYSTAL",
      (data::WatcherTriggerType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "TRIGGER_WIND_CRYSTAL");
    *(_DWORD *)(v1 + 224) = 12;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6568),
      (const char (*)[19])"TRIGGER_TAKE_PHOTO",
      (data::WatcherTriggerType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "TRIGGER_TAKE_PHOTO");
    *(_DWORD *)(v1 + 240) = 13;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6608),
      (const char (*)[39])"TRIGGER_COMBAT_MULTICOND_CONFIG_COMMON",
      (data::WatcherTriggerType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "TRIGGER_COMBAT_MULTICOND_CONFIG_COMMON");
    *(_DWORD *)(v1 + 256) = 14;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6648),
      (const char (*)[23])"TRIGGER_GENERAL_GADGET",
      (data::WatcherTriggerType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "TRIGGER_GENERAL_GADGET");
    *(_DWORD *)(v1 + 272) = 15;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6688),
      (const char (*)[26])"TRIGGER_GENERAL_GADGET_OR",
      (data::WatcherTriggerType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "TRIGGER_GENERAL_GADGET_OR");
    *(_DWORD *)(v1 + 288) = 101;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6728),
      (const char (*)[21])"TRIGGER_ELEMENT_BALL",
      (data::WatcherTriggerType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "TRIGGER_ELEMENT_BALL");
    *(_DWORD *)(v1 + 304) = 102;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6768),
      (const char (*)[23])"TRIGGER_WORLD_LEVEL_UP",
      (data::WatcherTriggerType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "TRIGGER_WORLD_LEVEL_UP");
    *(_DWORD *)(v1 + 320) = 103;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6808),
      (const char (*)[37])"TRIGGER_DUNGEON_ENTRY_TO_BE_EXPLORED",
      (data::WatcherTriggerType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "TRIGGER_DUNGEON_ENTRY_TO_BE_EXPLORED");
    *(_DWORD *)(v1 + 336) = 104;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6848),
      (const char (*)[27])"TRIGGER_UNLOCK_GATE_TEMPLE",
      (data::WatcherTriggerType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "TRIGGER_UNLOCK_GATE_TEMPLE");
    *(_DWORD *)(v1 + 352) = 105;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[20],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6888),
      (const char (*)[20])"TRIGGER_UNLOCK_AREA",
      (data::WatcherTriggerType *)(v1 + 352));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, "TRIGGER_UNLOCK_AREA");
    *(_DWORD *)(v1 + 368) = 106;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6928),
      (const char (*)[27])"TRIGGER_UNLOCK_TRANS_POINT",
      (data::WatcherTriggerType *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, "TRIGGER_UNLOCK_TRANS_POINT");
    *(_DWORD *)(v1 + 384) = 107;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 6968),
      (const char (*)[34])"TRIGGER_OPEN_CHEST_WITH_GADGET_ID",
      (data::WatcherTriggerType *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, "TRIGGER_OPEN_CHEST_WITH_GADGET_ID");
    *(_DWORD *)(v1 + 400) = 108;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7008),
      (const char (*)[22])"TRIGGER_CITY_LEVEL_UP",
      (data::WatcherTriggerType *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, "TRIGGER_CITY_LEVEL_UP");
    *(_DWORD *)(v1 + 416) = 109;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[20],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7048),
      (const char (*)[20])"TRIGGER_MONSTER_DIE",
      (data::WatcherTriggerType *)(v1 + 416));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, "TRIGGER_MONSTER_DIE");
    *(_DWORD *)(v1 + 432) = 110;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7088),
      (const char (*)[28])"TRIGGER_PLATFORM_START_MOVE",
      (data::WatcherTriggerType *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, "TRIGGER_PLATFORM_START_MOVE");
    *(_DWORD *)(v1 + 448) = 111;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7128),
      (const char (*)[21])"TRIGGER_GROUP_NOTIFY",
      (data::WatcherTriggerType *)(v1 + 448));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, "TRIGGER_GROUP_NOTIFY");
    *(_DWORD *)(v1 + 464) = 112;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7168),
      (const char (*)[28])"TRIGGER_ELEMENT_TYPE_CHANGE",
      (data::WatcherTriggerType *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, "TRIGGER_ELEMENT_TYPE_CHANGE");
    *(_DWORD *)(v1 + 480) = 113;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7208),
      (const char (*)[28])"TRIGGER_GADGET_INTERACTABLE",
      (data::WatcherTriggerType *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, "TRIGGER_GADGET_INTERACTABLE");
    *(_DWORD *)(v1 + 496) = 114;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7248),
      (const char (*)[32])"TRIGGER_COLLECT_SET_OF_READINGS",
      (data::WatcherTriggerType *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, "TRIGGER_COLLECT_SET_OF_READINGS");
    *(_DWORD *)(v1 + 512) = 115;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7288),
      (const char (*)[37])"TRIGGER_TELEPORT_WITH_CERTAIN_PORTAL",
      (data::WatcherTriggerType *)(v1 + 512));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, "TRIGGER_TELEPORT_WITH_CERTAIN_PORTAL");
    *(_DWORD *)(v1 + 528) = 116;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7328),
      (const char (*)[21])"TRIGGER_WORLD_GATHER",
      (data::WatcherTriggerType *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, "TRIGGER_WORLD_GATHER");
    *(_DWORD *)(v1 + 544) = 117;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7368),
      (const char (*)[28])"TRIGGER_TAKE_GENERAL_REWARD",
      (data::WatcherTriggerType *)(v1 + 544));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, "TRIGGER_TAKE_GENERAL_REWARD");
    *(_DWORD *)(v1 + 560) = 118;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7408),
      (const char (*)[34])"TRIGGER_BATTLE_FOR_MONSTER_DIE_OR",
      (data::WatcherTriggerType *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, "TRIGGER_BATTLE_FOR_MONSTER_DIE_OR");
    *(_DWORD *)(v1 + 576) = 119;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7448),
      (const char (*)[35])"TRIGGER_BATTLE_FOR_MONSTER_DIE_AND",
      (data::WatcherTriggerType *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, "TRIGGER_BATTLE_FOR_MONSTER_DIE_AND");
    *(_DWORD *)(v1 + 592) = 120;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7488),
      (const char (*)[25])"TRIGGER_OPEN_WORLD_CHEST",
      (data::WatcherTriggerType *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, "TRIGGER_OPEN_WORLD_CHEST");
    *(_DWORD *)(v1 + 608) = 121;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7528),
      (const char (*)[27])"TRIGGER_ENTER_CLIMATE_AREA",
      (data::WatcherTriggerType *)(v1 + 608));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, "TRIGGER_ENTER_CLIMATE_AREA");
    *(_DWORD *)(v1 + 624) = 122;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7568),
      (const char (*)[27])"TRIGGER_UNLOCK_SCENE_POINT",
      (data::WatcherTriggerType *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, "TRIGGER_UNLOCK_SCENE_POINT");
    *(_DWORD *)(v1 + 640) = 123;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7608),
      (const char (*)[41])"TRIGGER_INTERACT_GADGET_WITH_INTERACT_ID",
      (data::WatcherTriggerType *)(v1 + 640));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, "TRIGGER_INTERACT_GADGET_WITH_INTERACT_ID");
    *(_DWORD *)(v1 + 656) = 124;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7648),
      (const char (*)[39])"TRIGGER_TAKE_DUNGEON_FIRST_PASS_REWARD",
      (data::WatcherTriggerType *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, "TRIGGER_TAKE_DUNGEON_FIRST_PASS_REWARD");
    *(_DWORD *)(v1 + 672) = 125;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7688),
      (const char (*)[29])"TRIGGER_MONSTER_CATEGORY_DIE",
      (data::WatcherTriggerType *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, "TRIGGER_MONSTER_CATEGORY_DIE");
    *(_DWORD *)(v1 + 688) = 126;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7728),
      (const char (*)[36])"TRIGGER_UNLOCK_SPECIFIC_TRANS_POINT",
      (data::WatcherTriggerType *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, "TRIGGER_UNLOCK_SPECIFIC_TRANS_POINT");
    *(_DWORD *)(v1 + 704) = 201;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7768),
      (const char (*)[22])"TRIGGER_OBTAIN_AVATAR",
      (data::WatcherTriggerType *)(v1 + 704));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, "TRIGGER_OBTAIN_AVATAR");
    *(_DWORD *)(v1 + 720) = 202;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7808),
      (const char (*)[21])"TRIGGER_PLAYER_LEVEL",
      (data::WatcherTriggerType *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, "TRIGGER_PLAYER_LEVEL");
    *(_DWORD *)(v1 + 736) = 203;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7848),
      (const char (*)[23])"TRIGGER_AVATAR_UPGRADE",
      (data::WatcherTriggerType *)(v1 + 736));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, "TRIGGER_AVATAR_UPGRADE");
    *(_DWORD *)(v1 + 752) = 204;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7888),
      (const char (*)[23])"TRIGGER_AVATAR_PROMOTE",
      (data::WatcherTriggerType *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, "TRIGGER_AVATAR_PROMOTE");
    *(_DWORD *)(v1 + 768) = 205;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7928),
      (const char (*)[23])"TRIGGER_WEAPON_UPGRADE",
      (data::WatcherTriggerType *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, "TRIGGER_WEAPON_UPGRADE");
    *(_DWORD *)(v1 + 784) = 206;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 7968),
      (const char (*)[23])"TRIGGER_WEAPON_PROMOTE",
      (data::WatcherTriggerType *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, "TRIGGER_WEAPON_PROMOTE");
    *(_DWORD *)(v1 + 800) = 207;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8008),
      (const char (*)[26])"TRIGGER_RELIQUARY_UPGRADE",
      (data::WatcherTriggerType *)(v1 + 800));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, "TRIGGER_RELIQUARY_UPGRADE");
    *(_DWORD *)(v1 + 816) = 208;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8048),
      (const char (*)[23])"TRIGGER_WEAR_RELIQUARY",
      (data::WatcherTriggerType *)(v1 + 816));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, "TRIGGER_WEAR_RELIQUARY");
    *(_DWORD *)(v1 + 832) = 209;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8088),
      (const char (*)[23])"TRIGGER_UPGRADE_TALENT",
      (data::WatcherTriggerType *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, "TRIGGER_UPGRADE_TALENT");
    *(_DWORD *)(v1 + 848) = 210;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8128),
      (const char (*)[22])"TRIGGER_UNLOCK_RECIPE",
      (data::WatcherTriggerType *)(v1 + 848));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, "TRIGGER_UNLOCK_RECIPE");
    *(_DWORD *)(v1 + 864) = 211;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8168),
      (const char (*)[26])"TRIGGER_RELIQUARY_SET_NUM",
      (data::WatcherTriggerType *)(v1 + 864));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, "TRIGGER_RELIQUARY_SET_NUM");
    *(_DWORD *)(v1 + 880) = 212;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8208),
      (const char (*)[28])"TRIGGER_OBTAIN_MATERIAL_NUM",
      (data::WatcherTriggerType *)(v1 + 880));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, "TRIGGER_OBTAIN_MATERIAL_NUM");
    *(_DWORD *)(v1 + 896) = 213;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8248),
      (const char (*)[29])"TRIGGER_OBTAIN_RELIQUARY_NUM",
      (data::WatcherTriggerType *)(v1 + 896));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, "TRIGGER_OBTAIN_RELIQUARY_NUM");
    *(_DWORD *)(v1 + 912) = 214;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[18],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8288),
      (const char (*)[18])"TRIGGER_GACHA_NUM",
      (data::WatcherTriggerType *)(v1 + 912));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, "TRIGGER_GACHA_NUM");
    *(_DWORD *)(v1 + 928) = 215;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8328),
      (const char (*)[30])"TRIGGER_ANY_RELIQUARY_UPGRADE",
      (data::WatcherTriggerType *)(v1 + 928));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, "TRIGGER_ANY_RELIQUARY_UPGRADE");
    *(_DWORD *)(v1 + 944) = 216;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8368),
      (const char (*)[32])"TRIGGER_FETTER_LEVEL_AVATAR_NUM",
      (data::WatcherTriggerType *)(v1 + 944));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, "TRIGGER_FETTER_LEVEL_AVATAR_NUM");
    *(_DWORD *)(v1 + 960) = 217;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8408),
      (const char (*)[26])"TRIGGER_SKILLED_AT_RECIPE",
      (data::WatcherTriggerType *)(v1 + 960));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, "TRIGGER_SKILLED_AT_RECIPE");
    *(_DWORD *)(v1 + 976) = 218;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8448),
      (const char (*)[43])"TRIGGER_RELIQUARY_UPGRADE_EQUAL_RANK_LEVEL",
      (data::WatcherTriggerType *)(v1 + 976));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, "TRIGGER_RELIQUARY_UPGRADE_EQUAL_RANK_LEVEL");
    *(_DWORD *)(v1 + 992) = 219;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8488),
      (const char (*)[33])"TRIGGER_SPECIFIED_WEAPON_UPGRADE",
      (data::WatcherTriggerType *)(v1 + 992));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, "TRIGGER_SPECIFIED_WEAPON_UPGRADE");
    *(_DWORD *)(v1 + 1008) = 220;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8528),
      (const char (*)[32])"TRIGGER_SPECIFIED_WEAPON_AWAKEN",
      (data::WatcherTriggerType *)(v1 + 1008));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, "TRIGGER_SPECIFIED_WEAPON_AWAKEN");
    *(_DWORD *)(v1 + 1024) = 221;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8568),
      (const char (*)[34])"TRIGGER_UNLOCK_SPECIFIC_RECIPE_OR",
      (data::WatcherTriggerType *)(v1 + 1024));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, "TRIGGER_UNLOCK_SPECIFIC_RECIPE_OR");
    *(_DWORD *)(v1 + 1040) = 222;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8608),
      (const char (*)[29])"TRIGGER_POSSESS_MATERIAL_NUM",
      (data::WatcherTriggerType *)(v1 + 1040));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, "TRIGGER_POSSESS_MATERIAL_NUM");
    *(_DWORD *)(v1 + 1056) = 223;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8648),
      (const char (*)[37])"TRIGGER_EXHIBITION_ACCUMULABLE_VALUE",
      (data::WatcherTriggerType *)(v1 + 1056));
    if ( *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1072, "TRIGGER_EXHIBITION_ACCUMULABLE_VALUE");
    *(_DWORD *)(v1 + 1072) = 224;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[48],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8688),
      (const char (*)[48])"TRIGGER_EXHIBITION_REPLACEABLE_VALUE_SETTLE_NUM",
      (data::WatcherTriggerType *)(v1 + 1072));
    if ( *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1088, "TRIGGER_EXHIBITION_REPLACEABLE_VALUE_SETTLE_NUM");
    *(_DWORD *)(v1 + 1088) = 225;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8728),
      (const char (*)[31])"TRIGGER_ANY_WEAPON_UPGRADE_NUM",
      (data::WatcherTriggerType *)(v1 + 1088));
    if ( *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1104, "TRIGGER_ANY_WEAPON_UPGRADE_NUM");
    *(_DWORD *)(v1 + 1104) = 226;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8768),
      (const char (*)[34])"TRIGGER_ANY_RELIQUARY_UPGRADE_NUM",
      (data::WatcherTriggerType *)(v1 + 1104));
    if ( *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1120, "TRIGGER_ANY_RELIQUARY_UPGRADE_NUM");
    *(_DWORD *)(v1 + 1120) = 227;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8808),
      (const char (*)[36])"TRIGGER_ACTIVITY_SCORE_EXCEED_VALUE",
      (data::WatcherTriggerType *)(v1 + 1120));
    if ( *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1136, "TRIGGER_ACTIVITY_SCORE_EXCEED_VALUE");
    *(_DWORD *)(v1 + 1136) = 228;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8848),
      (const char (*)[33])"TRIGGER_UNLOCK_SPECIFIC_FORGE_OR",
      (data::WatcherTriggerType *)(v1 + 1136));
    if ( *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1152, "TRIGGER_UNLOCK_SPECIFIC_FORGE_OR");
    *(_DWORD *)(v1 + 1152) = 229;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8888),
      (const char (*)[37])"TRIGGER_UNLOCK_SPECIFIC_ANIMAL_CODEX",
      (data::WatcherTriggerType *)(v1 + 1152));
    if ( *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1168, "TRIGGER_UNLOCK_SPECIFIC_ANIMAL_CODEX");
    *(_DWORD *)(v1 + 1168) = 230;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8928),
      (const char (*)[24])"TRIGGER_OBTAIN_ITEM_NUM",
      (data::WatcherTriggerType *)(v1 + 1168));
    if ( *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1184, "TRIGGER_OBTAIN_ITEM_NUM");
    *(_DWORD *)(v1 + 1184) = 231;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 8968),
      (const char (*)[23])"TRIGGER_CAPTURE_ANIMAL",
      (data::WatcherTriggerType *)(v1 + 1184));
    if ( *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1200, "TRIGGER_CAPTURE_ANIMAL");
    *(_DWORD *)(v1 + 1200) = 232;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9008),
      (const char (*)[40])"TRIGGER_AVATAR_PROMOTE_EXCLUDING_PLAYER",
      (data::WatcherTriggerType *)(v1 + 1200));
    if ( *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1216, "TRIGGER_AVATAR_PROMOTE_EXCLUDING_PLAYER");
    *(_DWORD *)(v1 + 1216) = 301;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9048),
      (const char (*)[19])"TRIGGER_DAILY_TASK",
      (data::WatcherTriggerType *)(v1 + 1216));
    if ( *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1232, "TRIGGER_DAILY_TASK");
    *(_DWORD *)(v1 + 1232) = 302;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[18],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9088),
      (const char (*)[18])"TRIGGER_RAND_TASK",
      (data::WatcherTriggerType *)(v1 + 1232));
    if ( *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1248, "TRIGGER_RAND_TASK");
    *(_DWORD *)(v1 + 1248) = 303;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9128),
      (const char (*)[26])"TRIGGER_AVATAR_EXPEDITION",
      (data::WatcherTriggerType *)(v1 + 1248));
    if ( *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1264, "TRIGGER_AVATAR_EXPEDITION");
    *(_DWORD *)(v1 + 1264) = 304;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9168),
      (const char (*)[27])"TRIGGER_FINISH_TOWER_LEVEL",
      (data::WatcherTriggerType *)(v1 + 1264));
    if ( *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1280, "TRIGGER_FINISH_TOWER_LEVEL");
    *(_DWORD *)(v1 + 1280) = 306;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9208),
      (const char (*)[26])"TRIGGER_WORLD_BOSS_REWARD",
      (data::WatcherTriggerType *)(v1 + 1280));
    if ( *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1296, "TRIGGER_WORLD_BOSS_REWARD");
    *(_DWORD *)(v1 + 1296) = 307;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9248),
      (const char (*)[23])"TRIGGER_FINISH_DUNGEON",
      (data::WatcherTriggerType *)(v1 + 1296));
    if ( *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1312, "TRIGGER_FINISH_DUNGEON");
    *(_DWORD *)(v1 + 1312) = 308;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9288),
      (const char (*)[32])"TRIGGER_START_AVATAR_EXPEDITION",
      (data::WatcherTriggerType *)(v1 + 1312));
    if ( *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1328, "TRIGGER_START_AVATAR_EXPEDITION");
    *(_DWORD *)(v1 + 1328) = 309;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9328),
      (const char (*)[27])"TRIGGER_OPEN_BLOSSOM_CHEST",
      (data::WatcherTriggerType *)(v1 + 1328));
    if ( *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1344, "TRIGGER_OPEN_BLOSSOM_CHEST");
    *(_DWORD *)(v1 + 1344) = 310;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9368),
      (const char (*)[32])"TRIGGER_FINISH_BLOSSOM_PROGRESS",
      (data::WatcherTriggerType *)(v1 + 1344));
    if ( *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1360, "TRIGGER_FINISH_BLOSSOM_PROGRESS");
    *(_DWORD *)(v1 + 1360) = 311;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9408),
      (const char (*)[33])"TRIGGER_DONE_TOWER_GADGET_UNHURT",
      (data::WatcherTriggerType *)(v1 + 1360));
    if ( *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1376, "TRIGGER_DONE_TOWER_GADGET_UNHURT");
    *(_DWORD *)(v1 + 1376) = 312;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9448),
      (const char (*)[25])"TRIGGER_DONE_TOWER_STARS",
      (data::WatcherTriggerType *)(v1 + 1376));
    if ( *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1392, "TRIGGER_DONE_TOWER_STARS");
    *(_DWORD *)(v1 + 1392) = 313;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9488),
      (const char (*)[26])"TRIGGER_DONE_TOWER_UNHURT",
      (data::WatcherTriggerType *)(v1 + 1392));
    if ( *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1408, "TRIGGER_DONE_TOWER_UNHURT");
    *(_DWORD *)(v1 + 1408) = 314;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9528),
      (const char (*)[25])"TRIGGER_STEAL_FOOD_TIMES",
      (data::WatcherTriggerType *)(v1 + 1408));
    if ( *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1424, "TRIGGER_STEAL_FOOD_TIMES");
    *(_DWORD *)(v1 + 1424) = 315;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9568),
      (const char (*)[47])"TRIGGER_DONE_DUNGEON_WITH_SAME_ELEMENT_AVATARS",
      (data::WatcherTriggerType *)(v1 + 1424));
    if ( *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1440, "TRIGGER_DONE_DUNGEON_WITH_SAME_ELEMENT_AVATARS");
    *(_DWORD *)(v1 + 1440) = 316;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9608),
      (const char (*)[44])"TRIGGER_GROUP_FLIGHT_CHALLENGE_REACH_POINTS",
      (data::WatcherTriggerType *)(v1 + 1440));
    if ( *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1456, "TRIGGER_GROUP_FLIGHT_CHALLENGE_REACH_POINTS");
    *(_DWORD *)(v1 + 1456) = 317;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9648),
      (const char (*)[34])"TRIGGER_FINISH_DAILY_DELIVERY_NUM",
      (data::WatcherTriggerType *)(v1 + 1456));
    if ( *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1472, "TRIGGER_FINISH_DAILY_DELIVERY_NUM");
    *(_DWORD *)(v1 + 1472) = 318;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9688),
      (const char (*)[24])"TRIGGER_TOWER_STARS_NUM",
      (data::WatcherTriggerType *)(v1 + 1472));
    if ( *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1488, "TRIGGER_TOWER_STARS_NUM");
    *(_DWORD *)(v1 + 1488) = 319;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9728),
      (const char (*)[41])"TRIGGER_FINISH_SPECIFED_TYPE_BLOSSOM_NUM",
      (data::WatcherTriggerType *)(v1 + 1488));
    if ( *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1504, "TRIGGER_FINISH_SPECIFED_TYPE_BLOSSOM_NUM");
    *(_DWORD *)(v1 + 1504) = 320;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[51],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9768),
      (const char (*)[51])"TRIGGER_FINISH_SPECIFED_TYPE_BLOSSOM_CLIMATE_METER",
      (data::WatcherTriggerType *)(v1 + 1504));
    if ( *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1520, "TRIGGER_FINISH_SPECIFED_TYPE_BLOSSOM_CLIMATE_METER");
    *(_DWORD *)(v1 + 1520) = 321;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9808),
      (const char (*)[41])"TRIGGER_FINISH_BLOSSOM_GROUP_VARIABLE_GT",
      (data::WatcherTriggerType *)(v1 + 1520));
    if ( *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1536, "TRIGGER_FINISH_BLOSSOM_GROUP_VARIABLE_GT");
    *(_DWORD *)(v1 + 1536) = 322;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9848),
      (const char (*)[31])"TRIGGER_EFFIGY_CHALLENGE_SCORE",
      (data::WatcherTriggerType *)(v1 + 1536));
    if ( *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1552, "TRIGGER_EFFIGY_CHALLENGE_SCORE");
    *(_DWORD *)(v1 + 1552) = 323;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9888),
      (const char (*)[23])"TRIGGER_FINISH_ROUTINE",
      (data::WatcherTriggerType *)(v1 + 1552));
    if ( *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1568, "TRIGGER_FINISH_ROUTINE");
    *(_DWORD *)(v1 + 1568) = 324;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9928),
      (const char (*)[35])"TRIGGER_ACTIVITY_EXPEDITION_FINISH",
      (data::WatcherTriggerType *)(v1 + 1568));
    if ( *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1584, "TRIGGER_ACTIVITY_EXPEDITION_FINISH");
    *(_DWORD *)(v1 + 1584) = 325;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[49],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 9968),
      (const char (*)[49])"TRIGGER_ACTIVITY_CHANNELLER_SLAB_FINISH_ALL_CAMP",
      (data::WatcherTriggerType *)(v1 + 1584));
    if ( *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1600, "TRIGGER_ACTIVITY_CHANNELLER_SLAB_FINISH_ALL_CAMP");
    *(_DWORD *)(v1 + 1600) = 326;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[59],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10008),
      (const char (*)[59])"TRIGGER_ACTIVITY_CHANNELLER_SLAB_FINISH_ALL_ONEOFF_DUNGEON",
      (data::WatcherTriggerType *)(v1 + 1600));
    if ( *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1616, "TRIGGER_ACTIVITY_CHANNELLER_SLAB_FINISH_ALL_ONEOFF_DUNGEON");
    *(_DWORD *)(v1 + 1616) = 327;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[58],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10048),
      (const char (*)[58])"TRIGGER_ACTIVITY_CHANNELLER_SLAB_LOOP_DUNGEON_TOTAL_SCORE",
      (data::WatcherTriggerType *)(v1 + 1616));
    if ( *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1632, "TRIGGER_ACTIVITY_CHANNELLER_SLAB_LOOP_DUNGEON_TOTAL_SCORE");
    *(_DWORD *)(v1 + 1632) = 328;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[51],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10088),
      (const char (*)[51])"TRIGGER_GROUP_SUMMER_TIME_SPRINT_BOAT_REACH_POINTS",
      (data::WatcherTriggerType *)(v1 + 1632));
    if ( *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1648, "TRIGGER_GROUP_SUMMER_TIME_SPRINT_BOAT_REACH_POINTS");
    *(_DWORD *)(v1 + 1648) = 329;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10128),
      (const char (*)[25])"TRIGGER_WEEKLY_BOSS_KILL",
      (data::WatcherTriggerType *)(v1 + 1648));
    if ( *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1664, "TRIGGER_WEEKLY_BOSS_KILL");
    *(_DWORD *)(v1 + 1664) = 330;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10168),
      (const char (*)[38])"TRIGGER_BOUNCE_CONJURING_FINISH_COUNT",
      (data::WatcherTriggerType *)(v1 + 1664));
    if ( *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1680, "TRIGGER_BOUNCE_CONJURING_FINISH_COUNT");
    *(_DWORD *)(v1 + 1680) = 331;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10208),
      (const char (*)[31])"TRIGGER_BOUNCE_CONJURING_SCORE",
      (data::WatcherTriggerType *)(v1 + 1680));
    if ( *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1696, "TRIGGER_BOUNCE_CONJURING_SCORE");
    *(_DWORD *)(v1 + 1696) = 332;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10248),
      (const char (*)[36])"TRIGGER_GROUP_VARIABLE_SET_VALUE_TO",
      (data::WatcherTriggerType *)(v1 + 1696));
    if ( *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1712, "TRIGGER_GROUP_VARIABLE_SET_VALUE_TO");
    *(_DWORD *)(v1 + 1712) = 333;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10288),
      (const char (*)[39])"TRIGGER_KILL_GADGETS_BY_SPECIFIC_SKILL",
      (data::WatcherTriggerType *)(v1 + 1712));
    if ( *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1728, "TRIGGER_KILL_GADGETS_BY_SPECIFIC_SKILL");
    *(_DWORD *)(v1 + 1728) = 334;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10328),
      (const char (*)[38])"TRIGGER_KILL_MONSTERS_WITHOUT_VEHICLE",
      (data::WatcherTriggerType *)(v1 + 1728));
    if ( *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1744, "TRIGGER_KILL_MONSTERS_WITHOUT_VEHICLE");
    *(_DWORD *)(v1 + 1744) = 335;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10368),
      (const char (*)[29])"TRIGGER_KILL_MONSTER_IN_AREA",
      (data::WatcherTriggerType *)(v1 + 1744));
    if ( *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1760, "TRIGGER_KILL_MONSTER_IN_AREA");
    *(_DWORD *)(v1 + 1760) = 336;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10408),
      (const char (*)[22])"TRIGGER_ENTER_VEHICLE",
      (data::WatcherTriggerType *)(v1 + 1760));
    if ( *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1776, "TRIGGER_ENTER_VEHICLE");
    *(_DWORD *)(v1 + 1776) = 337;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10448),
      (const char (*)[25])"TRIGGER_VEHICLE_DURATION",
      (data::WatcherTriggerType *)(v1 + 1776));
    if ( *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1792, "TRIGGER_VEHICLE_DURATION");
    *(_DWORD *)(v1 + 1792) = 338;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10488),
      (const char (*)[24])"TRIGGER_VEHICLE_FRIENDS",
      (data::WatcherTriggerType *)(v1 + 1792));
    if ( *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1808, "TRIGGER_VEHICLE_FRIENDS");
    *(_DWORD *)(v1 + 1808) = 339;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10528),
      (const char (*)[34])"TRIGGER_VEHICLE_KILLED_BY_MONSTER",
      (data::WatcherTriggerType *)(v1 + 1808));
    if ( *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1824, "TRIGGER_VEHICLE_KILLED_BY_MONSTER");
    *(_DWORD *)(v1 + 1824) = 340;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10568),
      (const char (*)[21])"TRIGGER_VEHICLE_DASH",
      (data::WatcherTriggerType *)(v1 + 1824));
    if ( *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1840, "TRIGGER_VEHICLE_DASH");
    *(_DWORD *)(v1 + 1840) = 401;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[16],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10608),
      (const char (*)[16])"TRIGGER_DO_COOK",
      (data::WatcherTriggerType *)(v1 + 1840));
    if ( *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1856, "TRIGGER_DO_COOK");
    *(_DWORD *)(v1 + 1856) = 402;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[17],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10648),
      (const char (*)[17])"TRIGGER_DO_FORGE",
      (data::WatcherTriggerType *)(v1 + 1856));
    if ( *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1872, "TRIGGER_DO_FORGE");
    *(_DWORD *)(v1 + 1872) = 403;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[20],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10688),
      (const char (*)[20])"TRIGGER_DO_COMPOUND",
      (data::WatcherTriggerType *)(v1 + 1872));
    if ( *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1888, "TRIGGER_DO_COMPOUND");
    *(_DWORD *)(v1 + 1888) = 404;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10728),
      (const char (*)[19])"TRIGGER_DO_COMBINE",
      (data::WatcherTriggerType *)(v1 + 1888));
    if ( *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1904, "TRIGGER_DO_COMBINE");
    *(_DWORD *)(v1 + 1904) = 405;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10768),
      (const char (*)[23])"TRIGGER_BUY_SHOP_GOODS",
      (data::WatcherTriggerType *)(v1 + 1904));
    if ( *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1920, "TRIGGER_BUY_SHOP_GOODS");
    *(_DWORD *)(v1 + 1920) = 406;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10808),
      (const char (*)[21])"TRIGGER_FORGE_WEAPON",
      (data::WatcherTriggerType *)(v1 + 1920));
    if ( *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1936, "TRIGGER_FORGE_WEAPON");
    *(_DWORD *)(v1 + 1936) = 407;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10848),
      (const char (*)[27])"TRIGGER_BUY_SHOP_GOODS_AND",
      (data::WatcherTriggerType *)(v1 + 1936));
    if ( *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1952, "TRIGGER_BUY_SHOP_GOODS_AND");
    *(_DWORD *)(v1 + 1952) = 421;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10888),
      (const char (*)[27])"TRIGGER_MP_PLAY_BATTLE_WIN",
      (data::WatcherTriggerType *)(v1 + 1952));
    if ( *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1968, "TRIGGER_MP_PLAY_BATTLE_WIN");
    *(_DWORD *)(v1 + 1968) = 422;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10928),
      (const char (*)[27])"TRIGGER_KILL_GROUP_MONSTER",
      (data::WatcherTriggerType *)(v1 + 1968));
    if ( *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1984, "TRIGGER_KILL_GROUP_MONSTER");
    *(_DWORD *)(v1 + 1984) = 423;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 10968),
      (const char (*)[31])"TRIGGER_CRUCIBLE_ELEMENT_SCORE",
      (data::WatcherTriggerType *)(v1 + 1984));
    if ( *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2000, "TRIGGER_CRUCIBLE_ELEMENT_SCORE");
    *(_DWORD *)(v1 + 2000) = 424;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11008),
      (const char (*)[25])"TRIGGER_MP_DUNGEON_TIMES",
      (data::WatcherTriggerType *)(v1 + 2000));
    if ( *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2016, "TRIGGER_MP_DUNGEON_TIMES");
    *(_DWORD *)(v1 + 2016) = 425;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11048),
      (const char (*)[28])"TRIGGER_MP_KILL_MONSTER_NUM",
      (data::WatcherTriggerType *)(v1 + 2016));
    if ( *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2032, "TRIGGER_MP_KILL_MONSTER_NUM");
    *(_DWORD *)(v1 + 2032) = 426;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11088),
      (const char (*)[26])"TRIGGER_CRUCIBLE_MAX_BALL",
      (data::WatcherTriggerType *)(v1 + 2032));
    if ( *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2048, "TRIGGER_CRUCIBLE_MAX_BALL");
    *(_DWORD *)(v1 + 2048) = 427;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11128),
      (const char (*)[27])"TRIGGER_CRUCIBLE_MAX_SCORE",
      (data::WatcherTriggerType *)(v1 + 2048));
    if ( *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2064, "TRIGGER_CRUCIBLE_MAX_SCORE");
    *(_DWORD *)(v1 + 2064) = 428;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11168),
      (const char (*)[29])"TRIGGER_CRUCIBLE_SUBMIT_BALL",
      (data::WatcherTriggerType *)(v1 + 2064));
    if ( *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2080, "TRIGGER_CRUCIBLE_SUBMIT_BALL");
    *(_DWORD *)(v1 + 2080) = 429;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11208),
      (const char (*)[35])"TRIGGER_CRUCIBLE_WORLD_LEVEL_SCORE",
      (data::WatcherTriggerType *)(v1 + 2080));
    if ( *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2096, "TRIGGER_CRUCIBLE_WORLD_LEVEL_SCORE");
    *(_DWORD *)(v1 + 2096) = 430;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11248),
      (const char (*)[32])"TRIGGER_MP_PLAY_GROUP_STATISTIC",
      (data::WatcherTriggerType *)(v1 + 2096));
    if ( *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2112, "TRIGGER_MP_PLAY_GROUP_STATISTIC");
    *(_DWORD *)(v1 + 2112) = 431;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11288),
      (const char (*)[36])"TRIGGER_KILL_GROUP_SPECIFIC_MONSTER",
      (data::WatcherTriggerType *)(v1 + 2112));
    if ( *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2128, "TRIGGER_KILL_GROUP_SPECIFIC_MONSTER");
    *(_DWORD *)(v1 + 2128) = 432;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11328),
      (const char (*)[28])"TRIGGER_REACH_MP_PLAY_SCORE",
      (data::WatcherTriggerType *)(v1 + 2128));
    if ( *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2144, "TRIGGER_REACH_MP_PLAY_SCORE");
    *(_DWORD *)(v1 + 2144) = 433;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11368),
      (const char (*)[29])"TRIGGER_REACH_MP_PLAY_RECORD",
      (data::WatcherTriggerType *)(v1 + 2144));
    if ( *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2160, "TRIGGER_REACH_MP_PLAY_RECORD");
    *(_DWORD *)(v1 + 2160) = 434;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11408),
      (const char (*)[33])"TRIGGER_TREASURE_MAP_DONE_REGION",
      (data::WatcherTriggerType *)(v1 + 2160));
    if ( *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2176, "TRIGGER_TREASURE_MAP_DONE_REGION");
    *(_DWORD *)(v1 + 2176) = 435;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11448),
      (const char (*)[28])"TRIGGER_SEA_LAMP_MINI_QUEST",
      (data::WatcherTriggerType *)(v1 + 2176));
    if ( *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2192, "TRIGGER_SEA_LAMP_MINI_QUEST");
    *(_DWORD *)(v1 + 2192) = 436;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11488),
      (const char (*)[36])"TRIGGER_FINISH_FIND_HILICHURL_LEVEL",
      (data::WatcherTriggerType *)(v1 + 2192));
    if ( *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2208, "TRIGGER_FINISH_FIND_HILICHURL_LEVEL");
    *(_DWORD *)(v1 + 2208) = 437;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11528),
      (const char (*)[21])"TRIGGER_COMBINE_ITEM",
      (data::WatcherTriggerType *)(v1 + 2208));
    if ( *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2224, "TRIGGER_COMBINE_ITEM");
    *(_DWORD *)(v1 + 2224) = 438;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11568),
      (const char (*)[37])"TRIGGER_FINISH_CHALLENGE_IN_DURATION",
      (data::WatcherTriggerType *)(v1 + 2224));
    if ( *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2240, "TRIGGER_FINISH_CHALLENGE_IN_DURATION");
    *(_DWORD *)(v1 + 2240) = 439;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11608),
      (const char (*)[35])"TRIGGER_FINISH_CHALLENGE_LEFT_TIME",
      (data::WatcherTriggerType *)(v1 + 2240));
    if ( *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2256, "TRIGGER_FINISH_CHALLENGE_LEFT_TIME");
    *(_DWORD *)(v1 + 2256) = 440;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11648),
      (const char (*)[31])"TRIGGER_MP_KILL_MONSTER_ID_NUM",
      (data::WatcherTriggerType *)(v1 + 2256));
    if ( *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2272, "TRIGGER_MP_KILL_MONSTER_ID_NUM");
    *(_DWORD *)(v1 + 2272) = 501;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[14],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11688),
      (const char (*)[14])"TRIGGER_LOGIN",
      (data::WatcherTriggerType *)(v1 + 2272));
    if ( *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2288, "TRIGGER_LOGIN");
    *(_DWORD *)(v1 + 2288) = 502;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11728),
      (const char (*)[22])"TRIGGER_COST_MATERIAL",
      (data::WatcherTriggerType *)(v1 + 2288));
    if ( *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2304, "TRIGGER_COST_MATERIAL");
    *(_DWORD *)(v1 + 2304) = 503;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11768),
      (const char (*)[33])"TRIGGER_DELIVER_ITEM_TO_SALESMAN",
      (data::WatcherTriggerType *)(v1 + 2304));
    if ( *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2320, "TRIGGER_DELIVER_ITEM_TO_SALESMAN");
    *(_DWORD *)(v1 + 2320) = 504;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[17],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11808),
      (const char (*)[17])"TRIGGER_USE_ITEM",
      (data::WatcherTriggerType *)(v1 + 2320));
    if ( *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2336, "TRIGGER_USE_ITEM");
    *(_DWORD *)(v1 + 2336) = 505;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11848),
      (const char (*)[31])"TRIGGER_ACCUMULATE_DAILY_LOGIN",
      (data::WatcherTriggerType *)(v1 + 2336));
    if ( *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2352, "TRIGGER_ACCUMULATE_DAILY_LOGIN");
    *(_DWORD *)(v1 + 2352) = 601;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11888),
      (const char (*)[25])"TRIGGER_FINISH_CHALLENGE",
      (data::WatcherTriggerType *)(v1 + 2352));
    if ( *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2368, "TRIGGER_FINISH_CHALLENGE");
    *(_DWORD *)(v1 + 2368) = 602;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11928),
      (const char (*)[31])"TRIGGER_MECHANICUS_UNLOCK_GEAR",
      (data::WatcherTriggerType *)(v1 + 2368));
    if ( *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2384, "TRIGGER_MECHANICUS_UNLOCK_GEAR");
    *(_DWORD *)(v1 + 2384) = 603;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 11968),
      (const char (*)[32])"TRIGGER_MECHANICUS_LEVELUP_GEAR",
      (data::WatcherTriggerType *)(v1 + 2384));
    if ( *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2400, "TRIGGER_MECHANICUS_LEVELUP_GEAR");
    *(_DWORD *)(v1 + 2400) = 604;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12008),
      (const char (*)[29])"TRIGGER_MECHANICUS_DIFFICULT",
      (data::WatcherTriggerType *)(v1 + 2400));
    if ( *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2416, "TRIGGER_MECHANICUS_DIFFICULT");
    *(_DWORD *)(v1 + 2416) = 605;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12048),
      (const char (*)[35])"TRIGGER_MECHANICUS_DIFFICULT_SCORE",
      (data::WatcherTriggerType *)(v1 + 2416));
    if ( *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2432, "TRIGGER_MECHANICUS_DIFFICULT_SCORE");
    *(_DWORD *)(v1 + 2432) = 606;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12088),
      (const char (*)[32])"TRIGGER_MECHANICUS_KILL_MONSTER",
      (data::WatcherTriggerType *)(v1 + 2432));
    if ( *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2448, "TRIGGER_MECHANICUS_KILL_MONSTER");
    *(_DWORD *)(v1 + 2448) = 607;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12128),
      (const char (*)[34])"TRIGGER_MECHANICUS_BUILDING_POINT",
      (data::WatcherTriggerType *)(v1 + 2448));
    if ( *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2464, "TRIGGER_MECHANICUS_BUILDING_POINT");
    *(_DWORD *)(v1 + 2464) = 608;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12168),
      (const char (*)[32])"TRIGGER_MECHANICUS_DIFFICULT_EQ",
      (data::WatcherTriggerType *)(v1 + 2464));
    if ( *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2480, "TRIGGER_MECHANICUS_DIFFICULT_EQ");
    *(_DWORD *)(v1 + 2480) = 609;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12208),
      (const char (*)[30])"TRIGGER_MECHANICUS_BATTLE_END",
      (data::WatcherTriggerType *)(v1 + 2480));
    if ( *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2496, "TRIGGER_MECHANICUS_BATTLE_END");
    *(_DWORD *)(v1 + 2496) = 610;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[48],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12248),
      (const char (*)[48])"TRIGGER_MECHANICUS_BATTLE_END_EXCAPED_LESS_THAN",
      (data::WatcherTriggerType *)(v1 + 2496));
    if ( *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2512, "TRIGGER_MECHANICUS_BATTLE_END_EXCAPED_LESS_THAN");
    *(_DWORD *)(v1 + 2512) = 611;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12288),
      (const char (*)[47])"TRIGGER_MECHANICUS_BATTLE_END_POINTS_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2512));
    if ( *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2528, "TRIGGER_MECHANICUS_BATTLE_END_POINTS_MORE_THAN");
    *(_DWORD *)(v1 + 2528) = 612;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[45],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12328),
      (const char (*)[45])"TRIGGER_MECHANICUS_BATTLE_END_GEAR_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2528));
    if ( *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2544, "TRIGGER_MECHANICUS_BATTLE_END_GEAR_MORE_THAN");
    *(_DWORD *)(v1 + 2544) = 613;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12368),
      (const char (*)[47])"TRIGGER_MECHANICUS_BATTLE_END_PURE_GEAR_DAMAGE",
      (data::WatcherTriggerType *)(v1 + 2544));
    if ( *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2560, "TRIGGER_MECHANICUS_BATTLE_END_PURE_GEAR_DAMAGE");
    *(_DWORD *)(v1 + 2560) = 614;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[50],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12408),
      (const char (*)[50])"TRIGGER_MECHANICUS_BATTLE_END_CARD_PICK_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2560));
    if ( *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2576, "TRIGGER_MECHANICUS_BATTLE_END_CARD_PICK_MORE_THAN");
    *(_DWORD *)(v1 + 2576) = 615;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[52],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12448),
      (const char (*)[52])"TRIGGER_MECHANICUS_BATTLE_END_CARD_TARGET_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2576));
    if ( *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2592, "TRIGGER_MECHANICUS_BATTLE_END_CARD_TARGET_MORE_THAN");
    *(_DWORD *)(v1 + 2592) = 616;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[51],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12488),
      (const char (*)[51])"TRIGGER_MECHANICUS_BATTLE_END_BUILD_GEAR_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2592));
    if ( *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2608, "TRIGGER_MECHANICUS_BATTLE_END_BUILD_GEAR_MORE_THAN");
    *(_DWORD *)(v1 + 2608) = 617;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[50],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12528),
      (const char (*)[50])"TRIGGER_MECHANICUS_BATTLE_END_GEAR_KILL_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2608));
    if ( *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2624, "TRIGGER_MECHANICUS_BATTLE_END_GEAR_KILL_MORE_THAN");
    *(_DWORD *)(v1 + 2624) = 618;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12568),
      (const char (*)[46])"TRIGGER_MECHANICUS_BATTLE_END_ROUND_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2624));
    if ( *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2640, "TRIGGER_MECHANICUS_BATTLE_END_ROUND_MORE_THAN");
    *(_DWORD *)(v1 + 2640) = 619;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12608),
      (const char (*)[36])"TRIGGER_MECHANICUS_BATTLE_END_ROUND",
      (data::WatcherTriggerType *)(v1 + 2640));
    if ( *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2656, "TRIGGER_MECHANICUS_BATTLE_END_ROUND");
    *(_DWORD *)(v1 + 2656) = 620;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[50],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12648),
      (const char (*)[50])"TRIGGER_MECHANICUS_BATTLE_FIN_CHALLENGE_MORE_THAN",
      (data::WatcherTriggerType *)(v1 + 2656));
    if ( *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2672, "TRIGGER_MECHANICUS_BATTLE_FIN_CHALLENGE_MORE_THAN");
    *(_DWORD *)(v1 + 2672) = 621;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12688),
      (const char (*)[47])"TRIGGER_MECHANICUS_BATTLE_WATCHER_FINISH_COUNT",
      (data::WatcherTriggerType *)(v1 + 2672));
    if ( *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2688, "TRIGGER_MECHANICUS_BATTLE_WATCHER_FINISH_COUNT");
    *(_DWORD *)(v1 + 2688) = 622;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12728),
      (const char (*)[41])"TRIGGER_MECHANICUS_BATTLE_INTERACT_COUNT",
      (data::WatcherTriggerType *)(v1 + 2688));
    if ( *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2704, "TRIGGER_MECHANICUS_BATTLE_INTERACT_COUNT");
    *(_DWORD *)(v1 + 2704) = 623;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12768),
      (const char (*)[43])"TRIGGER_MECHANICUS_BATTLE_DIFFICULT_ESCAPE",
      (data::WatcherTriggerType *)(v1 + 2704));
    if ( *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2720, "TRIGGER_MECHANICUS_BATTLE_DIFFICULT_ESCAPE");
    *(_DWORD *)(v1 + 2720) = 624;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[45],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12808),
      (const char (*)[45])"TRIGGER_MECHANICUS_BATTLE_DIFFICULT_GEAR_NUM",
      (data::WatcherTriggerType *)(v1 + 2720));
    if ( *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2736, "TRIGGER_MECHANICUS_BATTLE_DIFFICULT_GEAR_NUM");
    *(_DWORD *)(v1 + 2736) = 625;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[48],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12848),
      (const char (*)[48])"TRIGGER_MECHANICUS_BATTLE_DIFFICULT_GEAR_ID_NUM",
      (data::WatcherTriggerType *)(v1 + 2736));
    if ( *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2752, "TRIGGER_MECHANICUS_BATTLE_DIFFICULT_GEAR_ID_NUM");
    *(_DWORD *)(v1 + 2752) = 626;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[48],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12888),
      (const char (*)[48])"TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_IN_LIMIT_TIME",
      (data::WatcherTriggerType *)(v1 + 2752));
    if ( *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2768, "TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_IN_LIMIT_TIME");
    *(_DWORD *)(v1 + 2768) = 627;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12928),
      (const char (*)[46])"TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_KEEP_ENERGY",
      (data::WatcherTriggerType *)(v1 + 2768));
    if ( *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2784, "TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_KEEP_ENERGY");
    *(_DWORD *)(v1 + 2784) = 628;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[54],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 12968),
      (const char (*)[54])"TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_WITH_GROUP_VARIABLE",
      (data::WatcherTriggerType *)(v1 + 2784));
    if ( *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2800, "TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_WITH_GROUP_VARIABLE");
    *(_DWORD *)(v1 + 2800) = 629;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[48],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13008),
      (const char (*)[48])"TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_WITH_BUFF_NUM",
      (data::WatcherTriggerType *)(v1 + 2800));
    if ( *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2816, "TRIGGER_FLEUR_FAIR_DUNGEON_FINISH_WITH_BUFF_NUM");
    *(_DWORD *)(v1 + 2816) = 630;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13048),
      (const char (*)[42])"TRIGGER_FLEUR_FAIR_DUNGEON_MISSION_FINISH",
      (data::WatcherTriggerType *)(v1 + 2816));
    if ( *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2832, "TRIGGER_FLEUR_FAIR_DUNGEON_MISSION_FINISH");
    *(_DWORD *)(v1 + 2832) = 631;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[62],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13088),
      (const char (*)[62])"TRIGGER_FINISH_DUNGEON_AND_CHALLENGE_REMAIN_TIME_GREATER_THAN",
      (data::WatcherTriggerType *)(v1 + 2832));
    if ( *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2848, "TRIGGER_FINISH_DUNGEON_AND_CHALLENGE_REMAIN_TIME_GREATER_THAN");
    *(_DWORD *)(v1 + 2848) = 632;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13128),
      (const char (*)[44])"TRIGGER_FINISH_DUNGEON_WITH_MIST_TRIAL_STAT",
      (data::WatcherTriggerType *)(v1 + 2848));
    if ( *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2864, "TRIGGER_FINISH_DUNGEON_WITH_MIST_TRIAL_STAT");
    *(_DWORD *)(v1 + 2864) = 633;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13168),
      (const char (*)[32])"TRIGGER_DUNGEON_MIST_TRIAL_STAT",
      (data::WatcherTriggerType *)(v1 + 2864));
    if ( *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2880, "TRIGGER_DUNGEON_MIST_TRIAL_STAT");
    *(_DWORD *)(v1 + 2880) = 634;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13208),
      (const char (*)[37])"TRIGGER_DUNGEON_ELEMENT_REACTION_NUM",
      (data::WatcherTriggerType *)(v1 + 2880));
    if ( *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2896, "TRIGGER_DUNGEON_ELEMENT_REACTION_NUM");
    *(_DWORD *)(v1 + 2896) = 635;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13248),
      (const char (*)[42])"TRIGGER_LEVEL_AVATAR_FINISH_DUNGEON_COUNT",
      (data::WatcherTriggerType *)(v1 + 2896));
    if ( *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2912, "TRIGGER_LEVEL_AVATAR_FINISH_DUNGEON_COUNT");
    *(_DWORD *)(v1 + 2912) = 636;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13288),
      (const char (*)[26])"TRIGGER_CHESS_REACH_LEVEL",
      (data::WatcherTriggerType *)(v1 + 2912));
    if ( *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2928, "TRIGGER_CHESS_REACH_LEVEL");
    *(_DWORD *)(v1 + 2928) = 637;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13328),
      (const char (*)[32])"TRIGGER_CHESS_DUNGEON_ADD_SCORE",
      (data::WatcherTriggerType *)(v1 + 2928));
    if ( *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2944, "TRIGGER_CHESS_DUNGEON_ADD_SCORE");
    *(_DWORD *)(v1 + 2944) = 638;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[59],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13368),
      (const char (*)[59])"TRIGGER_CHESS_DUNGEON_SUCC_WITH_ESCAPED_MONSTERS_LESS_THAN",
      (data::WatcherTriggerType *)(v1 + 2944));
    if ( *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2960, "TRIGGER_CHESS_DUNGEON_SUCC_WITH_ESCAPED_MONSTERS_LESS_THAN");
    *(_DWORD *)(v1 + 2960) = 639;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[58],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13408),
      (const char (*)[58])"TRIGGER_CHESS_DUNGEON_SUCC_WITH_TOWER_COUNT_LESS_OR_EQUAL",
      (data::WatcherTriggerType *)(v1 + 2960));
    if ( *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2976, "TRIGGER_CHESS_DUNGEON_SUCC_WITH_TOWER_COUNT_LESS_OR_EQUAL");
    *(_DWORD *)(v1 + 2976) = 640;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[57],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13448),
      (const char (*)[57])"TRIGGER_CHESS_DUNGEON_SUCC_WITH_CARD_COUNT_LESS_OR_EQUAL",
      (data::WatcherTriggerType *)(v1 + 2976));
    if ( *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2992, "TRIGGER_CHESS_DUNGEON_SUCC_WITH_CARD_COUNT_LESS_OR_EQUAL");
    *(_DWORD *)(v1 + 2992) = 641;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[56],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13488),
      (const char (*)[56])"TRIGGER_CHESS_DUNGEON_SUCC_WITH_CARD_COUNT_GREATER_THAN",
      (data::WatcherTriggerType *)(v1 + 2992));
    if ( *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3008, "TRIGGER_CHESS_DUNGEON_SUCC_WITH_CARD_COUNT_GREATER_THAN");
    *(_DWORD *)(v1 + 3008) = 642;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13528),
      (const char (*)[28])"TRIGGER_CHESS_KILL_MONSTERS",
      (data::WatcherTriggerType *)(v1 + 3008));
    if ( *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3024, "TRIGGER_CHESS_KILL_MONSTERS");
    *(_DWORD *)(v1 + 3024) = 643;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13568),
      (const char (*)[35])"TRIGGER_CHESS_COST_BUILDING_POINTS",
      (data::WatcherTriggerType *)(v1 + 3024));
    if ( *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3040, "TRIGGER_CHESS_COST_BUILDING_POINTS");
    *(_DWORD *)(v1 + 3040) = 644;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13608),
      (const char (*)[31])"TRIGGER_SUMO_STAGE_SCORE_REACH",
      (data::WatcherTriggerType *)(v1 + 3040));
    if ( *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3056, "TRIGGER_SUMO_STAGE_SCORE_REACH");
    *(_DWORD *)(v1 + 3056) = 645;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13648),
      (const char (*)[35])"TRIGGER_SUMO_TOTAL_MAX_SCORE_REACH",
      (data::WatcherTriggerType *)(v1 + 3056));
    if ( *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3072, "TRIGGER_SUMO_TOTAL_MAX_SCORE_REACH");
    *(_DWORD *)(v1 + 3072) = 646;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13688),
      (const char (*)[33])"TRIGGER_ROGUE_DESTROY_GADGET_NUM",
      (data::WatcherTriggerType *)(v1 + 3072));
    if ( *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3088, "TRIGGER_ROGUE_DESTROY_GADGET_NUM");
    *(_DWORD *)(v1 + 3088) = 647;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13728),
      (const char (*)[31])"TRIGGER_ROGUE_KILL_MONSTER_NUM",
      (data::WatcherTriggerType *)(v1 + 3088));
    if ( *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3104, "TRIGGER_ROGUE_KILL_MONSTER_NUM");
    *(_DWORD *)(v1 + 3104) = 649;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13768),
      (const char (*)[47])"TRIGGER_ROGUE_FINISH_WITHOUT_USING_SPRING_CELL",
      (data::WatcherTriggerType *)(v1 + 3104));
    if ( *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3120, "TRIGGER_ROGUE_FINISH_WITHOUT_USING_SPRING_CELL");
    *(_DWORD *)(v1 + 3120) = 650;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13808),
      (const char (*)[40])"TRIGGER_ROGUE_FINISH_ALL_CHALLENGE_CELL",
      (data::WatcherTriggerType *)(v1 + 3120));
    if ( *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3136, "TRIGGER_ROGUE_FINISH_ALL_CHALLENGE_CELL");
    *(_DWORD *)(v1 + 3136) = 651;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[60],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13848),
      (const char (*)[60])"TRIGGER_ROGUE_FINISH_WITH_AVATAR_ELEMENT_TYPE_NUM_LESS_THAN",
      (data::WatcherTriggerType *)(v1 + 3136));
    if ( *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3152, "TRIGGER_ROGUE_FINISH_WITH_AVATAR_ELEMENT_TYPE_NUM_LESS_THAN");
    *(_DWORD *)(v1 + 3152) = 652;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13888),
      (const char (*)[47])"TRIGGER_ROGUE_FINISH_WITH_AVATAR_NUM_LESS_THAN",
      (data::WatcherTriggerType *)(v1 + 3152));
    if ( *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3168, "TRIGGER_ROGUE_FINISH_WITH_AVATAR_NUM_LESS_THAN");
    *(_DWORD *)(v1 + 3168) = 653;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13928),
      (const char (*)[36])"TRIGGER_ROGUE_FINISH_NO_AVATAR_DEAD",
      (data::WatcherTriggerType *)(v1 + 3168));
    if ( *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3184, "TRIGGER_ROGUE_FINISH_NO_AVATAR_DEAD");
    *(_DWORD *)(v1 + 3184) = 654;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 13968),
      (const char (*)[32])"TRIGGER_ROGUE_SHIKIGAMI_UPGRADE",
      (data::WatcherTriggerType *)(v1 + 3184));
    if ( *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3200, "TRIGGER_ROGUE_SHIKIGAMI_UPGRADE");
    *(_DWORD *)(v1 + 3200) = 655;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14008),
      (const char (*)[24])"TRIGGER_ROGUE_CURSE_NUM",
      (data::WatcherTriggerType *)(v1 + 3200));
    if ( *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3216, "TRIGGER_ROGUE_CURSE_NUM");
    *(_DWORD *)(v1 + 3216) = 656;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14048),
      (const char (*)[30])"TRIGGER_ROGUE_SELECT_CARD_NUM",
      (data::WatcherTriggerType *)(v1 + 3216));
    if ( *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3232, "TRIGGER_ROGUE_SELECT_CARD_NUM");
    *(_DWORD *)(v1 + 3232) = 700;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14088),
      (const char (*)[25])"TRIGGER_FINISH_QUEST_AND",
      (data::WatcherTriggerType *)(v1 + 3232));
    if ( *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3248, "TRIGGER_FINISH_QUEST_AND");
    *(_DWORD *)(v1 + 3248) = 701;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14128),
      (const char (*)[24])"TRIGGER_FINISH_QUEST_OR",
      (data::WatcherTriggerType *)(v1 + 3248));
    if ( *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3264, "TRIGGER_FINISH_QUEST_OR");
    *(_DWORD *)(v1 + 3264) = 702;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14168),
      (const char (*)[29])"TRIGGER_DAILY_TASK_VAR_EQUAL",
      (data::WatcherTriggerType *)(v1 + 3264));
    if ( *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3280, "TRIGGER_DAILY_TASK_VAR_EQUAL");
    *(_DWORD *)(v1 + 3280) = 703;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14208),
      (const char (*)[31])"TRIGGER_QUEST_GLOBAL_VAR_EQUAL",
      (data::WatcherTriggerType *)(v1 + 3280));
    if ( *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3296, "TRIGGER_QUEST_GLOBAL_VAR_EQUAL");
    *(_DWORD *)(v1 + 3296) = 704;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[17],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14248),
      (const char (*)[17])"TRIGGER_TALK_NUM",
      (data::WatcherTriggerType *)(v1 + 3296));
    if ( *(_BYTE *)(((v1 + 3312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3312, "TRIGGER_TALK_NUM");
    *(_DWORD *)(v1 + 3312) = 705;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14288),
      (const char (*)[32])"TRIGGER_FINISH_PARENT_QUEST_AND",
      (data::WatcherTriggerType *)(v1 + 3312));
    if ( *(_BYTE *)(((v1 + 3328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3328, "TRIGGER_FINISH_PARENT_QUEST_AND");
    *(_DWORD *)(v1 + 3328) = 706;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14328),
      (const char (*)[31])"TRIGGER_FINISH_PARENT_QUEST_OR",
      (data::WatcherTriggerType *)(v1 + 3328));
    if ( *(_BYTE *)(((v1 + 3344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3344, "TRIGGER_FINISH_PARENT_QUEST_OR");
    *(_DWORD *)(v1 + 3344) = 800;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14368),
      (const char (*)[39])"TRIGGER_ELEMENT_REACTION_TIMELIMIT_NUM",
      (data::WatcherTriggerType *)(v1 + 3344));
    if ( *(_BYTE *)(((v1 + 3360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3360, "TRIGGER_ELEMENT_REACTION_TIMELIMIT_NUM");
    *(_DWORD *)(v1 + 3360) = 801;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14408),
      (const char (*)[44])"TRIGGER_ELEMENT_REACTION_TIMELIMIT_KILL_NUM",
      (data::WatcherTriggerType *)(v1 + 3360));
    if ( *(_BYTE *)(((v1 + 3376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3376, "TRIGGER_ELEMENT_REACTION_TIMELIMIT_KILL_NUM");
    *(_DWORD *)(v1 + 3376) = 802;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14448),
      (const char (*)[46])"TRIGGER_ELEMENT_REACTION_TIMELIMIT_DAMAGE_NUM",
      (data::WatcherTriggerType *)(v1 + 3376));
    if ( *(_BYTE *)(((v1 + 3392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3392, "TRIGGER_ELEMENT_REACTION_TIMELIMIT_DAMAGE_NUM");
    *(_DWORD *)(v1 + 3392) = 803;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14488),
      (const char (*)[32])"TRIGGER_ABILITY_STATE_PASS_TIME",
      (data::WatcherTriggerType *)(v1 + 3392));
    if ( *(_BYTE *)(((v1 + 3408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3408, "TRIGGER_ABILITY_STATE_PASS_TIME");
    *(_DWORD *)(v1 + 3408) = 804;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14528),
      (const char (*)[28])"TRIGGER_MAX_CRITICAL_DAMAGE",
      (data::WatcherTriggerType *)(v1 + 3408));
    if ( *(_BYTE *)(((v1 + 3424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3424, "TRIGGER_MAX_CRITICAL_DAMAGE");
    *(_DWORD *)(v1 + 3424) = 805;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14568),
      (const char (*)[39])"TRIGGER_FULL_SATIATION_TEAM_AVATAR_NUM",
      (data::WatcherTriggerType *)(v1 + 3424));
    if ( *(_BYTE *)(((v1 + 3440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3440, "TRIGGER_FULL_SATIATION_TEAM_AVATAR_NUM");
    *(_DWORD *)(v1 + 3440) = 806;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14608),
      (const char (*)[34])"TRIGGER_KILLED_BY_CERTAIN_MONSTER",
      (data::WatcherTriggerType *)(v1 + 3440));
    if ( *(_BYTE *)(((v1 + 3456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3456, "TRIGGER_KILLED_BY_CERTAIN_MONSTER");
    *(_DWORD *)(v1 + 3456) = 807;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14648),
      (const char (*)[24])"TRIGGER_CUR_AVATAR_HURT",
      (data::WatcherTriggerType *)(v1 + 3456));
    if ( *(_BYTE *)(((v1 + 3472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3472, "TRIGGER_CUR_AVATAR_HURT");
    *(_DWORD *)(v1 + 3472) = 808;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14688),
      (const char (*)[33])"TRIGGER_CUR_AVATAR_ABILITY_STATE",
      (data::WatcherTriggerType *)(v1 + 3472));
    if ( *(_BYTE *)(((v1 + 3488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3488, "TRIGGER_CUR_AVATAR_ABILITY_STATE");
    *(_DWORD *)(v1 + 3488) = 809;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14728),
      (const char (*)[39])"TRIGGER_USE_ENERGY_SKILL_NUM_TIMELIMIT",
      (data::WatcherTriggerType *)(v1 + 3488));
    if ( *(_BYTE *)(((v1 + 3504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3504, "TRIGGER_USE_ENERGY_SKILL_NUM_TIMELIMIT");
    *(_DWORD *)(v1 + 3504) = 810;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14768),
      (const char (*)[26])"TRIGGER_SHIELD_SOURCE_NUM",
      (data::WatcherTriggerType *)(v1 + 3504));
    if ( *(_BYTE *)(((v1 + 3520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3520, "TRIGGER_SHIELD_SOURCE_NUM");
    *(_DWORD *)(v1 + 3520) = 811;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14808),
      (const char (*)[44])"TRIGGER_CUR_AVATAR_HURT_BY_SPECIFIC_ABILITY",
      (data::WatcherTriggerType *)(v1 + 3520));
    if ( *(_BYTE *)(((v1 + 3536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3536, "TRIGGER_CUR_AVATAR_HURT_BY_SPECIFIC_ABILITY");
    *(_DWORD *)(v1 + 3536) = 812;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14848),
      (const char (*)[35])"TRIGGER_KILLED_BY_SPECIFIC_ABILITY",
      (data::WatcherTriggerType *)(v1 + 3536));
    if ( *(_BYTE *)(((v1 + 3552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3552, "TRIGGER_KILLED_BY_SPECIFIC_ABILITY");
    *(_DWORD *)(v1 + 3552) = 900;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14888),
      (const char (*)[22])"TRIGGER_MAX_DASH_TIME",
      (data::WatcherTriggerType *)(v1 + 3552));
    if ( *(_BYTE *)(((v1 + 3568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3568, "TRIGGER_MAX_DASH_TIME");
    *(_DWORD *)(v1 + 3568) = 901;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[21],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14928),
      (const char (*)[21])"TRIGGER_MAX_FLY_TIME",
      (data::WatcherTriggerType *)(v1 + 3568));
    if ( *(_BYTE *)(((v1 + 3584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3584, "TRIGGER_MAX_FLY_TIME");
    *(_DWORD *)(v1 + 3584) = 902;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 14968),
      (const char (*)[29])"TRIGGER_MAX_FLY_MAP_DISTANCE",
      (data::WatcherTriggerType *)(v1 + 3584));
    if ( *(_BYTE *)(((v1 + 3600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3600, "TRIGGER_MAX_FLY_MAP_DISTANCE");
    *(_DWORD *)(v1 + 3600) = 903;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15008),
      (const char (*)[26])"TRIGGER_SIT_DOWN_IN_POINT",
      (data::WatcherTriggerType *)(v1 + 3600));
    if ( *(_BYTE *)(((v1 + 3616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3616, "TRIGGER_SIT_DOWN_IN_POINT");
    *(_DWORD *)(v1 + 3616) = 904;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[13],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15048),
      (const char (*)[13])"TRIGGER_DASH",
      (data::WatcherTriggerType *)(v1 + 3616));
    if ( *(_BYTE *)(((v1 + 3632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3632, "TRIGGER_DASH");
    *(_DWORD *)(v1 + 3632) = 905;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[14],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15088),
      (const char (*)[14])"TRIGGER_CLIMB",
      (data::WatcherTriggerType *)(v1 + 3632));
    if ( *(_BYTE *)(((v1 + 3648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3648, "TRIGGER_CLIMB");
    *(_DWORD *)(v1 + 3648) = 906;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[12],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15128),
      (const char (*)[12])"TRIGGER_FLY",
      (data::WatcherTriggerType *)(v1 + 3648));
    if ( *(_BYTE *)(((v1 + 3664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3664, "TRIGGER_FLY");
    *(_DWORD *)(v1 + 3664) = 930;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15168),
      (const char (*)[30])"TRIGGER_CITY_REPUTATION_LEVEL",
      (data::WatcherTriggerType *)(v1 + 3664));
    if ( *(_BYTE *)(((v1 + 3680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3680, "TRIGGER_CITY_REPUTATION_LEVEL");
    *(_DWORD *)(v1 + 3680) = 931;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15208),
      (const char (*)[39])"TRIGGER_CITY_REPUTATION_FINISH_REQUEST",
      (data::WatcherTriggerType *)(v1 + 3680));
    if ( *(_BYTE *)(((v1 + 3696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3696, "TRIGGER_CITY_REPUTATION_FINISH_REQUEST");
    *(_DWORD *)(v1 + 3696) = 932;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15248),
      (const char (*)[27])"TRIGGER_HUNTING_FINISH_NUM",
      (data::WatcherTriggerType *)(v1 + 3696));
    if ( *(_BYTE *)(((v1 + 3712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3712, "TRIGGER_HUNTING_FINISH_NUM");
    *(_DWORD *)(v1 + 3712) = 933;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15288),
      (const char (*)[25])"TRIGGER_HUNTING_FAIL_NUM",
      (data::WatcherTriggerType *)(v1 + 3712));
    if ( *(_BYTE *)(((v1 + 3728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3728, "TRIGGER_HUNTING_FAIL_NUM");
    *(_DWORD *)(v1 + 3728) = 934;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15328),
      (const char (*)[23])"TRIGGER_OFFERING_LEVEL",
      (data::WatcherTriggerType *)(v1 + 3728));
    if ( *(_BYTE *)(((v1 + 3744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3744, "TRIGGER_OFFERING_LEVEL");
    *(_DWORD *)(v1 + 3744) = 935;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15368),
      (const char (*)[34])"TRIGGER_MIRACLE_RING_DELIVER_ITEM",
      (data::WatcherTriggerType *)(v1 + 3744));
    if ( *(_BYTE *)(((v1 + 3760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3760, "TRIGGER_MIRACLE_RING_DELIVER_ITEM");
    *(_DWORD *)(v1 + 3760) = 936;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15408),
      (const char (*)[33])"TRIGGER_MIRACLE_RING_TAKE_REWARD",
      (data::WatcherTriggerType *)(v1 + 3760));
    if ( *(_BYTE *)(((v1 + 3776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3776, "TRIGGER_MIRACLE_RING_TAKE_REWARD");
    *(_DWORD *)(v1 + 3776) = 937;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15448),
      (const char (*)[34])"TRIGGER_BLESSING_EXCHANGE_PIC_NUM",
      (data::WatcherTriggerType *)(v1 + 3776));
    if ( *(_BYTE *)(((v1 + 3792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3792, "TRIGGER_BLESSING_EXCHANGE_PIC_NUM");
    *(_DWORD *)(v1 + 3792) = 938;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15488),
      (const char (*)[35])"TRIGGER_BLESSING_REDEEM_REWARD_NUM",
      (data::WatcherTriggerType *)(v1 + 3792));
    if ( *(_BYTE *)(((v1 + 3808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3808, "TRIGGER_BLESSING_REDEEM_REWARD_NUM");
    *(_DWORD *)(v1 + 3808) = 939;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15528),
      (const char (*)[36])"TRIGGER_GALLERY_BALLOON_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 3808));
    if ( *(_BYTE *)(((v1 + 3824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3824, "TRIGGER_GALLERY_BALLOON_REACH_SCORE");
    *(_DWORD *)(v1 + 3824) = 940;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15568),
      (const char (*)[33])"TRIGGER_GALLERY_FALL_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 3824));
    if ( *(_BYTE *)(((v1 + 3840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3840, "TRIGGER_GALLERY_FALL_REACH_SCORE");
    *(_DWORD *)(v1 + 3840) = 941;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15608),
      (const char (*)[42])"TRIGGER_FLEUR_FAIR_MUSIC_GAME_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 3840));
    if ( *(_BYTE *)(((v1 + 3856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3856, "TRIGGER_FLEUR_FAIR_MUSIC_GAME_REACH_SCORE");
    *(_DWORD *)(v1 + 3856) = 942;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15648),
      (const char (*)[33])"TRIGGER_MAIN_COOP_SAVE_POINT_AND",
      (data::WatcherTriggerType *)(v1 + 3856));
    if ( *(_BYTE *)(((v1 + 3872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3872, "TRIGGER_MAIN_COOP_SAVE_POINT_AND");
    *(_DWORD *)(v1 + 3872) = 943;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15688),
      (const char (*)[32])"TRIGGER_MAIN_COOP_SAVE_POINT_OR",
      (data::WatcherTriggerType *)(v1 + 3872));
    if ( *(_BYTE *)(((v1 + 3888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3888, "TRIGGER_MAIN_COOP_SAVE_POINT_OR");
    *(_DWORD *)(v1 + 3888) = 944;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15728),
      (const char (*)[28])"TRIGGER_MAIN_COOP_VAR_EQUAL",
      (data::WatcherTriggerType *)(v1 + 3888));
    if ( *(_BYTE *)(((v1 + 3904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3904, "TRIGGER_MAIN_COOP_VAR_EQUAL");
    *(_DWORD *)(v1 + 3904) = 945;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15768),
      (const char (*)[55])"TRIGGER_FINISH_ALL_ARENA_CHALLENGE_WATCHER_IN_SCHEDULE",
      (data::WatcherTriggerType *)(v1 + 3904));
    if ( *(_BYTE *)(((v1 + 3920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3920, "TRIGGER_FINISH_ALL_ARENA_CHALLENGE_WATCHER_IN_SCHEDULE");
    *(_DWORD *)(v1 + 3920) = 946;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15808),
      (const char (*)[43])"TRIGGER_GALLERY_BUOYANT_COMBAT_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 3920));
    if ( *(_BYTE *)(((v1 + 3936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3936, "TRIGGER_GALLERY_BUOYANT_COMBAT_REACH_SCORE");
    *(_DWORD *)(v1 + 3936) = 947;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[45],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15848),
      (const char (*)[45])"TRIGGER_BUOYANT_COMBAT_REACH_NEW_SCORE_LEVEL",
      (data::WatcherTriggerType *)(v1 + 3936));
    if ( *(_BYTE *)(((v1 + 3952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3952) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3952, "TRIGGER_BUOYANT_COMBAT_REACH_NEW_SCORE_LEVEL");
    *(_DWORD *)(v1 + 3952) = 948;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15888),
      (const char (*)[27])"TRIGGER_PLACE_MIRACLE_RING",
      (data::WatcherTriggerType *)(v1 + 3952));
    if ( *(_BYTE *)(((v1 + 3968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3968, "TRIGGER_PLACE_MIRACLE_RING");
    *(_DWORD *)(v1 + 3968) = 949;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15928),
      (const char (*)[25])"TRIGGER_LUNA_RITE_SEARCH",
      (data::WatcherTriggerType *)(v1 + 3968));
    if ( *(_BYTE *)(((v1 + 3984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3984) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3984, "TRIGGER_LUNA_RITE_SEARCH");
    *(_DWORD *)(v1 + 3984) = 950;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 15968),
      (const char (*)[33])"TRIGGER_GALLERY_FISH_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 3984));
    if ( *(_BYTE *)(((v1 + 4000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4000) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4000, "TRIGGER_GALLERY_FISH_REACH_SCORE");
    *(_DWORD *)(v1 + 4000) = 951;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16008),
      (const char (*)[38])"TRIGGER_GALLERY_TRIATHLON_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 4000));
    if ( *(_BYTE *)(((v1 + 4016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4016) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4016, "TRIGGER_GALLERY_TRIATHLON_REACH_SCORE");
    *(_DWORD *)(v1 + 4016) = 952;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16048),
      (const char (*)[38])"TRIGGER_WINTER_CAMP_SNOWMAN_COMPLEIET",
      (data::WatcherTriggerType *)(v1 + 4016));
    if ( *(_BYTE *)(((v1 + 4032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4032) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4032, "TRIGGER_WINTER_CAMP_SNOWMAN_COMPLEIET");
    *(_DWORD *)(v1 + 4032) = 953;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16088),
      (const char (*)[30])"TRIGGER_CREATE_CUSTOM_DUNGEON",
      (data::WatcherTriggerType *)(v1 + 4032));
    if ( *(_BYTE *)(((v1 + 4048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4048) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4048, "TRIGGER_CREATE_CUSTOM_DUNGEON");
    *(_DWORD *)(v1 + 4048) = 954;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16128),
      (const char (*)[31])"TRIGGER_PUBLISH_CUSTOM_DUNGEON",
      (data::WatcherTriggerType *)(v1 + 4048));
    if ( *(_BYTE *)(((v1 + 4064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4064) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4064, "TRIGGER_PUBLISH_CUSTOM_DUNGEON");
    *(_DWORD *)(v1 + 4064) = 955;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16168),
      (const char (*)[34])"TRIGGER_PLAY_OTHER_CUSTOM_DUNGEON",
      (data::WatcherTriggerType *)(v1 + 4064));
    if ( *(_BYTE *)(((v1 + 4080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4080) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4080, "TRIGGER_PLAY_OTHER_CUSTOM_DUNGEON");
    *(_DWORD *)(v1 + 4080) = 956;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16208),
      (const char (*)[39])"TRIGGER_FINISH_CUSTOM_DUNGEON_OFFICIAL",
      (data::WatcherTriggerType *)(v1 + 4080));
    if ( *(_BYTE *)(((v1 + 4096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4096) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4096, "TRIGGER_FINISH_CUSTOM_DUNGEON_OFFICIAL");
    *(_DWORD *)(v1 + 4096) = 957;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16248),
      (const char (*)[37])"TRIGGER_CUSTOM_DUNGEON_OFFICIAL_COIN",
      (data::WatcherTriggerType *)(v1 + 4096));
    if ( *(_BYTE *)(((v1 + 4112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4112, "TRIGGER_CUSTOM_DUNGEON_OFFICIAL_COIN");
    *(_DWORD *)(v1 + 4112) = 1000;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16288),
      (const char (*)[25])"TRIGGER_OBTAIN_WOOD_TYPE",
      (data::WatcherTriggerType *)(v1 + 4112));
    if ( *(_BYTE *)(((v1 + 4128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4128, "TRIGGER_OBTAIN_WOOD_TYPE");
    *(_DWORD *)(v1 + 4128) = 1001;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16328),
      (const char (*)[26])"TRIGGER_OBTAIN_WOOD_COUNT",
      (data::WatcherTriggerType *)(v1 + 4128));
    if ( *(_BYTE *)(((v1 + 4144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4144, "TRIGGER_OBTAIN_WOOD_COUNT");
    *(_DWORD *)(v1 + 4144) = 1002;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16368),
      (const char (*)[31])"TRIGGER_UNLOCK_FURNITURE_COUNT",
      (data::WatcherTriggerType *)(v1 + 4144));
    if ( *(_BYTE *)(((v1 + 4160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4160, "TRIGGER_UNLOCK_FURNITURE_COUNT");
    *(_DWORD *)(v1 + 4160) = 1003;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16408),
      (const char (*)[23])"TRIGGER_FURNITURE_MAKE",
      (data::WatcherTriggerType *)(v1 + 4160));
    if ( *(_BYTE *)(((v1 + 4176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4176, "TRIGGER_FURNITURE_MAKE");
    *(_DWORD *)(v1 + 4176) = 1004;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[19],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16448),
      (const char (*)[19])"TRIGGER_HOME_LEVEL",
      (data::WatcherTriggerType *)(v1 + 4176));
    if ( *(_BYTE *)(((v1 + 4192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4192, "TRIGGER_HOME_LEVEL");
    *(_DWORD *)(v1 + 4192) = 1005;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[18],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16488),
      (const char (*)[18])"TRIGGER_HOME_COIN",
      (data::WatcherTriggerType *)(v1 + 4192));
    if ( *(_BYTE *)(((v1 + 4208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4208, "TRIGGER_HOME_COIN");
    *(_DWORD *)(v1 + 4208) = 1006;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16528),
      (const char (*)[27])"TRIGGER_HOME_COMFORT_LEVEL",
      (data::WatcherTriggerType *)(v1 + 4208));
    if ( *(_BYTE *)(((v1 + 4224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4224, "TRIGGER_HOME_COMFORT_LEVEL");
    *(_DWORD *)(v1 + 4224) = 1007;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16568),
      (const char (*)[30])"TRIGGER_HOME_LIMITED_SHOP_BUY",
      (data::WatcherTriggerType *)(v1 + 4224));
    if ( *(_BYTE *)(((v1 + 4240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4240, "TRIGGER_HOME_LIMITED_SHOP_BUY");
    *(_DWORD *)(v1 + 4240) = 1008;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16608),
      (const char (*)[29])"TRIGGER_FURNITURE_SUITE_TYPE",
      (data::WatcherTriggerType *)(v1 + 4240));
    if ( *(_BYTE *)(((v1 + 4256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4256, "TRIGGER_FURNITURE_SUITE_TYPE");
    *(_DWORD *)(v1 + 4256) = 1009;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16648),
      (const char (*)[36])"TRIGGER_ARRANGEMENT_FURNITURE_COUNT",
      (data::WatcherTriggerType *)(v1 + 4256));
    if ( *(_BYTE *)(((v1 + 4272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4272, "TRIGGER_ARRANGEMENT_FURNITURE_COUNT");
    *(_DWORD *)(v1 + 4272) = 1010;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16688),
      (const char (*)[24])"TRIGGER_ENTER_SELF_HOME",
      (data::WatcherTriggerType *)(v1 + 4272));
    if ( *(_BYTE *)(((v1 + 4288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4288, "TRIGGER_ENTER_SELF_HOME");
    *(_DWORD *)(v1 + 4288) = 1011;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16728),
      (const char (*)[34])"TRIGGER_HOME_MODULE_COMFORT_VALUE",
      (data::WatcherTriggerType *)(v1 + 4288));
    if ( *(_BYTE *)(((v1 + 4304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4304, "TRIGGER_HOME_MODULE_COMFORT_VALUE");
    *(_DWORD *)(v1 + 4304) = 1012;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16768),
      (const char (*)[24])"TRIGGER_HOME_ENTER_ROOM",
      (data::WatcherTriggerType *)(v1 + 4304));
    if ( *(_BYTE *)(((v1 + 4320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4320, "TRIGGER_HOME_ENTER_ROOM");
    *(_DWORD *)(v1 + 4320) = 1013;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16808),
      (const char (*)[23])"TRIGGER_HOME_AVATAR_IN",
      (data::WatcherTriggerType *)(v1 + 4320));
    if ( *(_BYTE *)(((v1 + 4336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4336, "TRIGGER_HOME_AVATAR_IN");
    *(_DWORD *)(v1 + 4336) = 1014;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16848),
      (const char (*)[39])"TRIGGER_HOME_AVATAR_REWARD_EVENT_COUNT",
      (data::WatcherTriggerType *)(v1 + 4336));
    if ( *(_BYTE *)(((v1 + 4352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4352, "TRIGGER_HOME_AVATAR_REWARD_EVENT_COUNT");
    *(_DWORD *)(v1 + 4352) = 1015;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16888),
      (const char (*)[38])"TRIGGER_HOME_AVATAR_TALK_FINISH_COUNT",
      (data::WatcherTriggerType *)(v1 + 4352));
    if ( *(_BYTE *)(((v1 + 4368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4368, "TRIGGER_HOME_AVATAR_TALK_FINISH_COUNT");
    *(_DWORD *)(v1 + 4368) = 1016;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16928),
      (const char (*)[43])"TRIGGER_HOME_AVATAR_REWARD_EVENT_ALL_COUNT",
      (data::WatcherTriggerType *)(v1 + 4368));
    if ( *(_BYTE *)(((v1 + 4384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4384, "TRIGGER_HOME_AVATAR_REWARD_EVENT_ALL_COUNT");
    *(_DWORD *)(v1 + 4384) = 1017;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 16968),
      (const char (*)[42])"TRIGGER_HOME_AVATAR_TALK_FINISH_ALL_COUNT",
      (data::WatcherTriggerType *)(v1 + 4384));
    if ( *(_BYTE *)(((v1 + 4400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4400, "TRIGGER_HOME_AVATAR_TALK_FINISH_ALL_COUNT");
    *(_DWORD *)(v1 + 4400) = 1018;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17008),
      (const char (*)[31])"TRIGGER_HOME_AVATAR_FETTER_GET",
      (data::WatcherTriggerType *)(v1 + 4400));
    if ( *(_BYTE *)(((v1 + 4416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4416, "TRIGGER_HOME_AVATAR_FETTER_GET");
    *(_DWORD *)(v1 + 4416) = 1019;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17048),
      (const char (*)[29])"TRIGGER_HOME_AVATAR_IN_COUNT",
      (data::WatcherTriggerType *)(v1 + 4416));
    if ( *(_BYTE *)(((v1 + 4432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4432, "TRIGGER_HOME_AVATAR_IN_COUNT");
    *(_DWORD *)(v1 + 4432) = 1020;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[22],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17088),
      (const char (*)[22])"TRIGGER_HOME_DO_PLANT",
      (data::WatcherTriggerType *)(v1 + 4432));
    if ( *(_BYTE *)(((v1 + 4448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4448, "TRIGGER_HOME_DO_PLANT");
    *(_DWORD *)(v1 + 4448) = 1021;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17128),
      (const char (*)[30])"TRIGGER_ARRANGEMENT_FURNITURE",
      (data::WatcherTriggerType *)(v1 + 4448));
    if ( *(_BYTE *)(((v1 + 4464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4464, "TRIGGER_ARRANGEMENT_FURNITURE");
    *(_DWORD *)(v1 + 4464) = 1022;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[26],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17168),
      (const char (*)[26])"TRIGGER_HOME_GATHER_COUNT",
      (data::WatcherTriggerType *)(v1 + 4464));
    if ( *(_BYTE *)(((v1 + 4480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4480, "TRIGGER_HOME_GATHER_COUNT");
    *(_DWORD *)(v1 + 4480) = 1023;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17208),
      (const char (*)[32])"TRIGGER_HOME_FIELD_GATHER_COUNT",
      (data::WatcherTriggerType *)(v1 + 4480));
    if ( *(_BYTE *)(((v1 + 4496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4496, "TRIGGER_HOME_FIELD_GATHER_COUNT");
    *(_DWORD *)(v1 + 4496) = 1024;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17248),
      (const char (*)[30])"TRIGGER_HOME_UNLOCK_BGM_COUNT",
      (data::WatcherTriggerType *)(v1 + 4496));
    if ( *(_BYTE *)(((v1 + 4512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4512, "TRIGGER_HOME_UNLOCK_BGM_COUNT");
    *(_DWORD *)(v1 + 4512) = 1100;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17288),
      (const char (*)[25])"TRIGGER_FISHING_SUCC_NUM",
      (data::WatcherTriggerType *)(v1 + 4512));
    if ( *(_BYTE *)(((v1 + 4528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4528, "TRIGGER_FISHING_SUCC_NUM");
    *(_DWORD *)(v1 + 4528) = 1101;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17328),
      (const char (*)[27])"TRIGGER_FISHING_KEEP_BONUS",
      (data::WatcherTriggerType *)(v1 + 4528));
    if ( *(_BYTE *)(((v1 + 4544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4544, "TRIGGER_FISHING_KEEP_BONUS");
    *(_DWORD *)(v1 + 4544) = 1102;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17368),
      (const char (*)[24])"TRIGGER_EMPTY_FISH_POOL",
      (data::WatcherTriggerType *)(v1 + 4544));
    if ( *(_BYTE *)(((v1 + 4560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4560, "TRIGGER_EMPTY_FISH_POOL");
    *(_DWORD *)(v1 + 4560) = 1103;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17408),
      (const char (*)[25])"TRIGGER_FISHING_FAIL_NUM",
      (data::WatcherTriggerType *)(v1 + 4560));
    if ( *(_BYTE *)(((v1 + 4576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4576, "TRIGGER_FISHING_FAIL_NUM");
    *(_DWORD *)(v1 + 4576) = 1104;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17448),
      (const char (*)[23])"TRIGGER_SHOCK_FISH_NUM",
      (data::WatcherTriggerType *)(v1 + 4576));
    if ( *(_BYTE *)(((v1 + 4592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4592, "TRIGGER_SHOCK_FISH_NUM");
    *(_DWORD *)(v1 + 4592) = 1105;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17488),
      (const char (*)[30])"TRIGGER_PLANT_FLOWER_SET_WISH",
      (data::WatcherTriggerType *)(v1 + 4592));
    if ( *(_BYTE *)(((v1 + 4608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4608, "TRIGGER_PLANT_FLOWER_SET_WISH");
    *(_DWORD *)(v1 + 4608) = 1106;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17528),
      (const char (*)[33])"TRIGGER_PLANT_FLOWER_GIVE_FLOWER",
      (data::WatcherTriggerType *)(v1 + 4608));
    if ( *(_BYTE *)(((v1 + 4624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4624, "TRIGGER_PLANT_FLOWER_GIVE_FLOWER");
    *(_DWORD *)(v1 + 4624) = 1107;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17568),
      (const char (*)[40])"TRIGGER_PLANT_FLOWER_OBTAIN_FLOWER_TYPE",
      (data::WatcherTriggerType *)(v1 + 4624));
    if ( *(_BYTE *)(((v1 + 4640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4640, "TRIGGER_PLANT_FLOWER_OBTAIN_FLOWER_TYPE");
    *(_DWORD *)(v1 + 4640) = 1108;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17608),
      (const char (*)[47])"TRIGGER_PLANT_FLOWER_COMMON_OBTAIN_FLOWER_TYPE",
      (data::WatcherTriggerType *)(v1 + 4640));
    if ( *(_BYTE *)(((v1 + 4656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4656, "TRIGGER_PLANT_FLOWER_COMMON_OBTAIN_FLOWER_TYPE");
    *(_DWORD *)(v1 + 4656) = 1111;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17648),
      (const char (*)[38])"TRIGGER_FINISH_LANV2_PROJECTION_LEVEL",
      (data::WatcherTriggerType *)(v1 + 4656));
    if ( *(_BYTE *)(((v1 + 4672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4672, "TRIGGER_FINISH_LANV2_PROJECTION_LEVEL");
    *(_DWORD *)(v1 + 4672) = 1112;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17688),
      (const char (*)[36])"TRIGGER_GALLERY_SALVAGE_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 4672));
    if ( *(_BYTE *)(((v1 + 4688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4688, "TRIGGER_GALLERY_SALVAGE_REACH_SCORE");
    *(_DWORD *)(v1 + 4688) = 1113;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17728),
      (const char (*)[46])"TRIGGER_LANV2_FIREWORKS_CHALLENGE_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 4688));
    if ( *(_BYTE *)(((v1 + 4704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4704, "TRIGGER_LANV2_FIREWORKS_CHALLENGE_REACH_SCORE");
    *(_DWORD *)(v1 + 4704) = 1115;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17768),
      (const char (*)[36])"TRIGGER_POTION_STAGE_LEVEL_PASS_NUM",
      (data::WatcherTriggerType *)(v1 + 4704));
    if ( *(_BYTE *)(((v1 + 4720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4720, "TRIGGER_POTION_STAGE_LEVEL_PASS_NUM");
    *(_DWORD *)(v1 + 4720) = 1116;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17808),
      (const char (*)[38])"TRIGGER_POTION_STAGE_OBTAIN_MEDAL_NUM",
      (data::WatcherTriggerType *)(v1 + 4720));
    if ( *(_BYTE *)(((v1 + 4736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4736, "TRIGGER_POTION_STAGE_OBTAIN_MEDAL_NUM");
    *(_DWORD *)(v1 + 4736) = 1117;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17848),
      (const char (*)[39])"TRIGGER_POTION_STAGE_REACH_TOTAL_SCORE",
      (data::WatcherTriggerType *)(v1 + 4736));
    if ( *(_BYTE *)(((v1 + 4752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4752, "TRIGGER_POTION_STAGE_REACH_TOTAL_SCORE");
    *(_DWORD *)(v1 + 4752) = 1120;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17888),
      (const char (*)[38])"TRIGGER_BARTENDER_FINISH_STORY_MODULE",
      (data::WatcherTriggerType *)(v1 + 4752));
    if ( *(_BYTE *)(((v1 + 4768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4768, "TRIGGER_BARTENDER_FINISH_STORY_MODULE");
    *(_DWORD *)(v1 + 4768) = 1121;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17928),
      (const char (*)[47])"TRIGGER_BARTENDER_CHALLENGE_MODULE_LEVEL_SCORE",
      (data::WatcherTriggerType *)(v1 + 4768));
    if ( *(_BYTE *)(((v1 + 4784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4784, "TRIGGER_BARTENDER_CHALLENGE_MODULE_LEVEL_SCORE");
    *(_DWORD *)(v1 + 4784) = 1122;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 17968),
      (const char (*)[33])"TRIGGER_BARTENDER_UNLOCK_FORMULA",
      (data::WatcherTriggerType *)(v1 + 4784));
    if ( *(_BYTE *)(((v1 + 4800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4800, "TRIGGER_BARTENDER_UNLOCK_FORMULA");
    *(_DWORD *)(v1 + 4800) = 1123;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18008),
      (const char (*)[55])"TRIGGER_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL_REACH_NUM",
      (data::WatcherTriggerType *)(v1 + 4800));
    if ( *(_BYTE *)(((v1 + 4816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4816, "TRIGGER_MICHIAE_MATSURI_UNLOCK_CRYSTAL_SKILL_REACH_NUM");
    *(_DWORD *)(v1 + 4816) = 1124;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[56],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18048),
      (const char (*)[56])"TRIGGER_MICHIAE_MATSURI_FINISH_DARK_CHALLENGE_REACH_NUM",
      (data::WatcherTriggerType *)(v1 + 4816));
    if ( *(_BYTE *)(((v1 + 4832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4832, "TRIGGER_MICHIAE_MATSURI_FINISH_DARK_CHALLENGE_REACH_NUM");
    *(_DWORD *)(v1 + 4832) = 1125;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18088),
      (const char (*)[37])"TRIGGER_CAPTURE_ENV_ANIMAL_REACH_NUM",
      (data::WatcherTriggerType *)(v1 + 4832));
    if ( *(_BYTE *)(((v1 + 4848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4848, "TRIGGER_CAPTURE_ENV_ANIMAL_REACH_NUM");
    *(_DWORD *)(v1 + 4848) = 1126;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18128),
      (const char (*)[33])"TRIGGER_SPICE_MAKE_FORMULA_TIMES",
      (data::WatcherTriggerType *)(v1 + 4848));
    if ( *(_BYTE *)(((v1 + 4864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4864, "TRIGGER_SPICE_MAKE_FORMULA_TIMES");
    *(_DWORD *)(v1 + 4864) = 1127;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18168),
      (const char (*)[30])"TRIGGER_SPICE_GIVE_FOOD_TIMES",
      (data::WatcherTriggerType *)(v1 + 4864));
    if ( *(_BYTE *)(((v1 + 4880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4880, "TRIGGER_SPICE_GIVE_FOOD_TIMES");
    *(_DWORD *)(v1 + 4880) = 1128;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18208),
      (const char (*)[44])"TRIGGER_SPICE_MAKE_FORMULA_SUCCESSFUL_TIMES",
      (data::WatcherTriggerType *)(v1 + 4880));
    if ( *(_BYTE *)(((v1 + 4896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4896, "TRIGGER_SPICE_MAKE_FORMULA_SUCCESSFUL_TIMES");
    *(_DWORD *)(v1 + 4896) = 1131;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18248),
      (const char (*)[36])"TRIGGER_IRODORI_FINISH_FLOWER_THEME",
      (data::WatcherTriggerType *)(v1 + 4896));
    if ( *(_BYTE *)(((v1 + 4912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4912, "TRIGGER_IRODORI_FINISH_FLOWER_THEME");
    *(_DWORD *)(v1 + 4912) = 1132;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18288),
      (const char (*)[36])"TRIGGER_IRODORI_FINISH_MASTER_STAGE",
      (data::WatcherTriggerType *)(v1 + 4912));
    if ( *(_BYTE *)(((v1 + 4928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4928, "TRIGGER_IRODORI_FINISH_MASTER_STAGE");
    *(_DWORD *)(v1 + 4928) = 1133;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18328),
      (const char (*)[40])"TRIGGER_IRODORI_CHESS_STAGE_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 4928));
    if ( *(_BYTE *)(((v1 + 4944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4944, "TRIGGER_IRODORI_CHESS_STAGE_REACH_SCORE");
    *(_DWORD *)(v1 + 4944) = 1134;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18368),
      (const char (*)[36])"TRIGGER_IRODORI_FINISH_POETRY_THEME",
      (data::WatcherTriggerType *)(v1 + 4944));
    if ( *(_BYTE *)(((v1 + 4960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4960, "TRIGGER_IRODORI_FINISH_POETRY_THEME");
    *(_DWORD *)(v1 + 4960) = 1135;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18408),
      (const char (*)[28])"TRIGGER_PHOTO_FINISH_POS_ID",
      (data::WatcherTriggerType *)(v1 + 4960));
    if ( *(_BYTE *)(((v1 + 4976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4976, "TRIGGER_PHOTO_FINISH_POS_ID");
    *(_DWORD *)(v1 + 4976) = 1138;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18448),
      (const char (*)[39])"TRIGGER_CRYSTAL_LINK_LEVEL_SCORE_REACH",
      (data::WatcherTriggerType *)(v1 + 4976));
    if ( *(_BYTE *)(((v1 + 4992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 4992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 4992, "TRIGGER_CRYSTAL_LINK_LEVEL_SCORE_REACH");
    *(_DWORD *)(v1 + 4992) = 1139;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18488),
      (const char (*)[43])"TRIGGER_CRYSTAL_LINK_TOTAL_MAX_SCORE_REACH",
      (data::WatcherTriggerType *)(v1 + 4992));
    if ( *(_BYTE *)(((v1 + 5008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5008, "TRIGGER_CRYSTAL_LINK_TOTAL_MAX_SCORE_REACH");
    *(_DWORD *)(v1 + 5008) = 1140;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18528),
      (const char (*)[46])"TRIGGER_LUMINANCE_STONE_CHALLENGE_SCORE_REACH",
      (data::WatcherTriggerType *)(v1 + 5008));
    if ( *(_BYTE *)(((v1 + 5024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5024, "TRIGGER_LUMINANCE_STONE_CHALLENGE_SCORE_REACH");
    *(_DWORD *)(v1 + 5024) = 1141;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18568),
      (const char (*)[30])"TRIGGER_GACHA_FINISH_STAGE_ID",
      (data::WatcherTriggerType *)(v1 + 5024));
    if ( *(_BYTE *)(((v1 + 5040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5040, "TRIGGER_GACHA_FINISH_STAGE_ID");
    *(_DWORD *)(v1 + 5040) = 1142;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18608),
      (const char (*)[29])"TRIGGER_GACHA_MAKE_ROBOT_NUM",
      (data::WatcherTriggerType *)(v1 + 5040));
    if ( *(_BYTE *)(((v1 + 5056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5056, "TRIGGER_GACHA_MAKE_ROBOT_NUM");
    *(_DWORD *)(v1 + 5056) = 1143;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18648),
      (const char (*)[28])"TRIGGER_GACHA_GET_ROBOT_NUM",
      (data::WatcherTriggerType *)(v1 + 5056));
    if ( *(_BYTE *)(((v1 + 5072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5072, "TRIGGER_GACHA_GET_ROBOT_NUM");
    *(_DWORD *)(v1 + 5072) = 1144;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18688),
      (const char (*)[29])"TRIGGER_GACHA_GIVE_ROBOT_NUM",
      (data::WatcherTriggerType *)(v1 + 5072));
    if ( *(_BYTE *)(((v1 + 5088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5088, "TRIGGER_GACHA_GIVE_ROBOT_NUM");
    *(_DWORD *)(v1 + 5088) = 1145;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18728),
      (const char (*)[32])"TRIGGER_GACHA_CONVERT_ROBOT_NUM",
      (data::WatcherTriggerType *)(v1 + 5088));
    if ( *(_BYTE *)(((v1 + 5104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5104, "TRIGGER_GACHA_CONVERT_ROBOT_NUM");
    *(_DWORD *)(v1 + 5104) = 1151;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18768),
      (const char (*)[33])"TRIGGER_FINISH_ROGUE_DIARY_STAGE",
      (data::WatcherTriggerType *)(v1 + 5104));
    if ( *(_BYTE *)(((v1 + 5120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5120, "TRIGGER_FINISH_ROGUE_DIARY_STAGE");
    *(_DWORD *)(v1 + 5120) = 1152;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18808),
      (const char (*)[39])"TRIGGER_FINISH_ROGUE_DIARY_STAGE_ROUND",
      (data::WatcherTriggerType *)(v1 + 5120));
    if ( *(_BYTE *)(((v1 + 5136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5136, "TRIGGER_FINISH_ROGUE_DIARY_STAGE_ROUND");
    *(_DWORD *)(v1 + 5136) = 1153;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18848),
      (const char (*)[37])"TRIGGER_MUSIC_GAME_SETTLE_OTHERS_UGC",
      (data::WatcherTriggerType *)(v1 + 5136));
    if ( *(_BYTE *)(((v1 + 5152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5152, "TRIGGER_MUSIC_GAME_SETTLE_OTHERS_UGC");
    *(_DWORD *)(v1 + 5152) = 1154;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18888),
      (const char (*)[28])"TRIGGER_MUSIC_GAME_SAVE_UGC",
      (data::WatcherTriggerType *)(v1 + 5152));
    if ( *(_BYTE *)(((v1 + 5168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5168, "TRIGGER_MUSIC_GAME_SAVE_UGC");
    *(_DWORD *)(v1 + 5168) = 1161;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18928),
      (const char (*)[29])"TRIGGER_GEAR_FINISH_LEVEL_ID",
      (data::WatcherTriggerType *)(v1 + 5168));
    if ( *(_BYTE *)(((v1 + 5184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5184, "TRIGGER_GEAR_FINISH_LEVEL_ID");
    *(_DWORD *)(v1 + 5184) = 1162;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 18968),
      (const char (*)[35])"TRIGGER_GEAR_FINISH_JIGSAW_PICTURE",
      (data::WatcherTriggerType *)(v1 + 5184));
    if ( *(_BYTE *)(((v1 + 5200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5200, "TRIGGER_GEAR_FINISH_JIGSAW_PICTURE");
    *(_DWORD *)(v1 + 5200) = 1165;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19008),
      (const char (*)[33])"TRIGGER_ISLAND_PARTY_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 5200));
    if ( *(_BYTE *)(((v1 + 5216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5216, "TRIGGER_ISLAND_PARTY_REACH_SCORE");
    *(_DWORD *)(v1 + 5216) = 1171;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19048),
      (const char (*)[42])"TRIGGER_GRAVEN_INNOCENCE_RACE_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 5216));
    if ( *(_BYTE *)(((v1 + 5232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5232, "TRIGGER_GRAVEN_INNOCENCE_RACE_REACH_SCORE");
    *(_DWORD *)(v1 + 5232) = 1172;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19088),
      (const char (*)[44])"TRIGGER_GRAVEN_INNOCENCE_CARVE_COMPLETE_NUM",
      (data::WatcherTriggerType *)(v1 + 5232));
    if ( *(_BYTE *)(((v1 + 5248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5248, "TRIGGER_GRAVEN_INNOCENCE_CARVE_COMPLETE_NUM");
    *(_DWORD *)(v1 + 5248) = 1173;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19128),
      (const char (*)[44])"TRIGGER_GRAVEN_INNOCENCE_PHOTO_COMPLETE_NUM",
      (data::WatcherTriggerType *)(v1 + 5248));
    if ( *(_BYTE *)(((v1 + 5264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5264, "TRIGGER_GRAVEN_INNOCENCE_PHOTO_COMPLETE_NUM");
    *(_DWORD *)(v1 + 5264) = 1174;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19168),
      (const char (*)[43])"TRIGGER_GRAVEN_INNOCENCE_CAMP_FINISH_LEVEL",
      (data::WatcherTriggerType *)(v1 + 5264));
    if ( *(_BYTE *)(((v1 + 5280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5280, "TRIGGER_GRAVEN_INNOCENCE_CAMP_FINISH_LEVEL");
    *(_DWORD *)(v1 + 5280) = 1176;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19208),
      (const char (*)[35])"TRIGGER_INSTABLE_SPRAY_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 5280));
    if ( *(_BYTE *)(((v1 + 5296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5296, "TRIGGER_INSTABLE_SPRAY_REACH_SCORE");
    *(_DWORD *)(v1 + 5296) = 1180;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19248),
      (const char (*)[35])"TRIGGER_MUQADAS_POTION_LEVEL_SCORE",
      (data::WatcherTriggerType *)(v1 + 5296));
    if ( *(_BYTE *)(((v1 + 5312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5312, "TRIGGER_MUQADAS_POTION_LEVEL_SCORE");
    *(_DWORD *)(v1 + 5312) = 1181;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19288),
      (const char (*)[42])"TRIGGER_MUQADAS_POTION_LEVEL_WEAKNESS_NUM",
      (data::WatcherTriggerType *)(v1 + 5312));
    if ( *(_BYTE *)(((v1 + 5328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5328, "TRIGGER_MUQADAS_POTION_LEVEL_WEAKNESS_NUM");
    *(_DWORD *)(v1 + 5328) = 1182;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[47],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19328),
      (const char (*)[47])"TRIGGER_MUQADAS_POTION_LEVEL_ONCE_WEAKNESS_NUM",
      (data::WatcherTriggerType *)(v1 + 5328));
    if ( *(_BYTE *)(((v1 + 5344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5344, "TRIGGER_MUQADAS_POTION_LEVEL_ONCE_WEAKNESS_NUM");
    *(_DWORD *)(v1 + 5344) = 1186;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19368),
      (const char (*)[36])"TRIGGER_TREASURE_SEELIE_DONE_REGION",
      (data::WatcherTriggerType *)(v1 + 5344));
    if ( *(_BYTE *)(((v1 + 5360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5360, "TRIGGER_TREASURE_SEELIE_DONE_REGION");
    *(_DWORD *)(v1 + 5360) = 1190;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19408),
      (const char (*)[27])"TRIGGER_VINTAGE_POPULARITY",
      (data::WatcherTriggerType *)(v1 + 5360));
    if ( *(_BYTE *)(((v1 + 5376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5376, "TRIGGER_VINTAGE_POPULARITY");
    *(_DWORD *)(v1 + 5376) = 1191;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19448),
      (const char (*)[30])"TRIGGER_VINTAGE_HUNTING_SCORE",
      (data::WatcherTriggerType *)(v1 + 5376));
    if ( *(_BYTE *)(((v1 + 5392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5392, "TRIGGER_VINTAGE_HUNTING_SCORE");
    *(_DWORD *)(v1 + 5392) = 1192;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19488),
      (const char (*)[36])"TRIGGER_VINTAGE_HUNTING_CAPTURE_NUM",
      (data::WatcherTriggerType *)(v1 + 5392));
    if ( *(_BYTE *)(((v1 + 5408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5408, "TRIGGER_VINTAGE_HUNTING_CAPTURE_NUM");
    *(_DWORD *)(v1 + 5408) = 1193;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[46],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19528),
      (const char (*)[46])"TRIGGER_VINTAGE_HUNTING_CAPTURE_NO_BATTLE_NUM",
      (data::WatcherTriggerType *)(v1 + 5408));
    if ( *(_BYTE *)(((v1 + 5424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5424, "TRIGGER_VINTAGE_HUNTING_CAPTURE_NO_BATTLE_NUM");
    *(_DWORD *)(v1 + 5424) = 1194;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19568),
      (const char (*)[37])"TRIGGER_VINTAGE_HUNTING_CAPTURE_TYPE",
      (data::WatcherTriggerType *)(v1 + 5424));
    if ( *(_BYTE *)(((v1 + 5440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5440, "TRIGGER_VINTAGE_HUNTING_CAPTURE_TYPE");
    *(_DWORD *)(v1 + 5440) = 1195;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19608),
      (const char (*)[36])"TRIGGER_VINTAGE_HUNTING_FINISH_BOSS",
      (data::WatcherTriggerType *)(v1 + 5440));
    if ( *(_BYTE *)(((v1 + 5456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5456, "TRIGGER_VINTAGE_HUNTING_FINISH_BOSS");
    *(_DWORD *)(v1 + 5456) = 1196;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19648),
      (const char (*)[44])"TRIGGER_VINTAGE_HUNTING_FINISH_BOSS_IN_TIME",
      (data::WatcherTriggerType *)(v1 + 5456));
    if ( *(_BYTE *)(((v1 + 5472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5472, "TRIGGER_VINTAGE_HUNTING_FINISH_BOSS_IN_TIME");
    *(_DWORD *)(v1 + 5472) = 1197;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19688),
      (const char (*)[36])"TRIGGER_VINTAGE_DECORATION_COMPLETE",
      (data::WatcherTriggerType *)(v1 + 5472));
    if ( *(_BYTE *)(((v1 + 5488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5488, "TRIGGER_VINTAGE_DECORATION_COMPLETE");
    *(_DWORD *)(v1 + 5488) = 1198;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19728),
      (const char (*)[39])"TRIGGER_VINTAGE_COLLECT_DECORATION_NUM",
      (data::WatcherTriggerType *)(v1 + 5488));
    if ( *(_BYTE *)(((v1 + 5504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5504, "TRIGGER_VINTAGE_COLLECT_DECORATION_NUM");
    *(_DWORD *)(v1 + 5504) = 1199;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[28],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19768),
      (const char (*)[28])"TRIGGER_VINTAGE_FINISH_CAMP",
      (data::WatcherTriggerType *)(v1 + 5504));
    if ( *(_BYTE *)(((v1 + 5520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5520, "TRIGGER_VINTAGE_FINISH_CAMP");
    *(_DWORD *)(v1 + 5520) = 1200;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19808),
      (const char (*)[43])"TRIGGER_ROCK_BOARD_EXPLORE_FINISH_STAGE_ID",
      (data::WatcherTriggerType *)(v1 + 5520));
    if ( *(_BYTE *)(((v1 + 5536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5536, "TRIGGER_ROCK_BOARD_EXPLORE_FINISH_STAGE_ID");
    *(_DWORD *)(v1 + 5536) = 1206;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[30],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19848),
      (const char (*)[30])"TRIGGER_VINTAGE_MARKET_COIN_A",
      (data::WatcherTriggerType *)(v1 + 5536));
    if ( *(_BYTE *)(((v1 + 5552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5552, "TRIGGER_VINTAGE_MARKET_COIN_A");
    *(_DWORD *)(v1 + 5552) = 1207;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[37],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19888),
      (const char (*)[37])"TRIGGER_VINTAGE_HUNTING_BOSS_GO_WEAK",
      (data::WatcherTriggerType *)(v1 + 5552));
    if ( *(_BYTE *)(((v1 + 5568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5568, "TRIGGER_VINTAGE_HUNTING_BOSS_GO_WEAK");
    *(_DWORD *)(v1 + 5568) = 1208;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19928),
      (const char (*)[38])"TRIGGER_VINTAGE_MARKET_CONTENT_FINISH",
      (data::WatcherTriggerType *)(v1 + 5568));
    if ( *(_BYTE *)(((v1 + 5584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5584, "TRIGGER_VINTAGE_MARKET_CONTENT_FINISH");
    *(_DWORD *)(v1 + 5584) = 1210;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[38],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 19968),
      (const char (*)[38])"TRIGGER_FUNGUS_FIGHTER_CAPTURE_FUNGUS",
      (data::WatcherTriggerType *)(v1 + 5584));
    if ( *(_BYTE *)(((v1 + 5600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5600, "TRIGGER_FUNGUS_FIGHTER_CAPTURE_FUNGUS");
    *(_DWORD *)(v1 + 5600) = 1211;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20008),
      (const char (*)[40])"TRIGGER_FUNGUS_FIGHTER_CULTIVATE_FUNGUS",
      (data::WatcherTriggerType *)(v1 + 5600));
    if ( *(_BYTE *)(((v1 + 5616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5616, "TRIGGER_FUNGUS_FIGHTER_CULTIVATE_FUNGUS");
    *(_DWORD *)(v1 + 5616) = 1212;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20048),
      (const char (*)[40])"TRIGGER_EFFIGY_CHALLENGE_V2_FINISH_ROOM",
      (data::WatcherTriggerType *)(v1 + 5616));
    if ( *(_BYTE *)(((v1 + 5632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5632, "TRIGGER_EFFIGY_CHALLENGE_V2_FINISH_ROOM");
    *(_DWORD *)(v1 + 5632) = 1213;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20088),
      (const char (*)[39])"TRIGGER_CHAR_AMUSEMENT_FINISH_STAGE_ID",
      (data::WatcherTriggerType *)(v1 + 5632));
    if ( *(_BYTE *)(((v1 + 5648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5648, "TRIGGER_CHAR_AMUSEMENT_FINISH_STAGE_ID");
    *(_DWORD *)(v1 + 5648) = 3200;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20128),
      (const char (*)[44])"TRIGGER_FUNGUS_FIGHTER_TRAINING_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 5648));
    if ( *(_BYTE *)(((v1 + 5664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5664, "TRIGGER_FUNGUS_FIGHTER_TRAINING_REACH_SCORE");
    *(_DWORD *)(v1 + 5664) = 3300;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20168),
      (const char (*)[34])"TRIGGER_COIN_COLLECT_RESULT_REACH",
      (data::WatcherTriggerType *)(v1 + 5664));
    if ( *(_BYTE *)(((v1 + 5680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5680, "TRIGGER_COIN_COLLECT_RESULT_REACH");
    *(_DWORD *)(v1 + 5680) = 1300;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20208),
      (const char (*)[24])"TRIGGER_GCG_OBTAIN_CARD",
      (data::WatcherTriggerType *)(v1 + 5680));
    if ( *(_BYTE *)(((v1 + 5696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5696, "TRIGGER_GCG_OBTAIN_CARD");
    *(_DWORD *)(v1 + 5696) = 1301;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[24],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20248),
      (const char (*)[24])"TRIGGER_GCG_OBTAIN_COIN",
      (data::WatcherTriggerType *)(v1 + 5696));
    if ( *(_BYTE *)(((v1 + 5712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5712, "TRIGGER_GCG_OBTAIN_COIN");
    *(_DWORD *)(v1 + 5712) = 1302;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20288),
      (const char (*)[34])"TRIGGER_GCG_OBTAIN_CHARACTER_CARD",
      (data::WatcherTriggerType *)(v1 + 5712));
    if ( *(_BYTE *)(((v1 + 5728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5728, "TRIGGER_GCG_OBTAIN_CHARACTER_CARD");
    *(_DWORD *)(v1 + 5728) = 1303;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[34],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20328),
      (const char (*)[34])"TRIGGER_GCG_FINISH_WEEK_CHALLENGE",
      (data::WatcherTriggerType *)(v1 + 5728));
    if ( *(_BYTE *)(((v1 + 5744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5744, "TRIGGER_GCG_FINISH_WEEK_CHALLENGE");
    *(_DWORD *)(v1 + 5744) = 1304;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20368),
      (const char (*)[43])"TRIGGER_GCG_WORLD_CHALLENGE_TOTAL_STAR_NUM",
      (data::WatcherTriggerType *)(v1 + 5744));
    if ( *(_BYTE *)(((v1 + 5760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5760, "TRIGGER_GCG_WORLD_CHALLENGE_TOTAL_STAR_NUM");
    *(_DWORD *)(v1 + 5760) = 1305;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[27],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20408),
      (const char (*)[27])"TRIGGER_GCG_VALID_DECK_NUM",
      (data::WatcherTriggerType *)(v1 + 5760));
    if ( *(_BYTE *)(((v1 + 5776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5776, "TRIGGER_GCG_VALID_DECK_NUM");
    *(_DWORD *)(v1 + 5776) = 1306;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[33],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20448),
      (const char (*)[33])"TRIGGER_GCG_UNLOCK_GOLD_FACE_NUM",
      (data::WatcherTriggerType *)(v1 + 5776));
    if ( *(_BYTE *)(((v1 + 5792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5792, "TRIGGER_GCG_UNLOCK_GOLD_FACE_NUM");
    *(_DWORD *)(v1 + 5792) = 1307;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20488),
      (const char (*)[43])"TRIGGER_GCG_UNLOCK_CHARACTER_GOLD_FACE_NUM",
      (data::WatcherTriggerType *)(v1 + 5792));
    if ( *(_BYTE *)(((v1 + 5808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5808, "TRIGGER_GCG_UNLOCK_CHARACTER_GOLD_FACE_NUM");
    *(_DWORD *)(v1 + 5808) = 1308;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20528),
      (const char (*)[43])"TRIGGER_GCG_FULL_PROFICIENCY_CHARACTER_NUM",
      (data::WatcherTriggerType *)(v1 + 5808));
    if ( *(_BYTE *)(((v1 + 5824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5824, "TRIGGER_GCG_FULL_PROFICIENCY_CHARACTER_NUM");
    *(_DWORD *)(v1 + 5824) = 1309;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20568),
      (const char (*)[44])"TRIGGER_GCG_FINISH_HARD_CHARACTER_CHALLENGE",
      (data::WatcherTriggerType *)(v1 + 5824));
    if ( *(_BYTE *)(((v1 + 5840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5840, "TRIGGER_GCG_FINISH_HARD_CHARACTER_CHALLENGE");
    *(_DWORD *)(v1 + 5840) = 1310;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20608),
      (const char (*)[41])"TRIGGER_GCG_FINISH_NORMAL_BOSS_CHALLENGE",
      (data::WatcherTriggerType *)(v1 + 5840));
    if ( *(_BYTE *)(((v1 + 5856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5856, "TRIGGER_GCG_FINISH_NORMAL_BOSS_CHALLENGE");
    *(_DWORD *)(v1 + 5856) = 1311;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[39],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20648),
      (const char (*)[39])"TRIGGER_GCG_FINISH_HARD_BOSS_CHALLENGE",
      (data::WatcherTriggerType *)(v1 + 5856));
    if ( *(_BYTE *)(((v1 + 5872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5872, "TRIGGER_GCG_FINISH_HARD_BOSS_CHALLENGE");
    *(_DWORD *)(v1 + 5872) = 1312;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[23],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20688),
      (const char (*)[23])"TRIGGER_GCG_SHARE_DECK",
      (data::WatcherTriggerType *)(v1 + 5872));
    if ( *(_BYTE *)(((v1 + 5888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5888, "TRIGGER_GCG_SHARE_DECK");
    *(_DWORD *)(v1 + 5888) = 1313;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20728),
      (const char (*)[31])"TRIGGER_GCG_CHALLENGE_PROGRESS",
      (data::WatcherTriggerType *)(v1 + 5888));
    if ( *(_BYTE *)(((v1 + 5904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5904, "TRIGGER_GCG_CHALLENGE_PROGRESS");
    *(_DWORD *)(v1 + 5904) = 1314;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[25],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20768),
      (const char (*)[25])"TRIGGER_BUY_SHOP_ITEM_ID",
      (data::WatcherTriggerType *)(v1 + 5904));
    if ( *(_BYTE *)(((v1 + 5920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5920, "TRIGGER_BUY_SHOP_ITEM_ID");
    *(_DWORD *)(v1 + 5920) = 1315;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[29],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20808),
      (const char (*)[29])"TRIGGER_BUY_SHOP_GOODS_COUNT",
      (data::WatcherTriggerType *)(v1 + 5920));
    if ( *(_BYTE *)(((v1 + 5936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5936, "TRIGGER_BUY_SHOP_GOODS_COUNT");
    *(_DWORD *)(v1 + 5936) = 3310;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[41],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20848),
      (const char (*)[41])"TRIGGER_BRICK_BREAKER_FINISH_WORLD_LEVEL",
      (data::WatcherTriggerType *)(v1 + 5936));
    if ( *(_BYTE *)(((v1 + 5952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5952) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5952, "TRIGGER_BRICK_BREAKER_FINISH_WORLD_LEVEL");
    *(_DWORD *)(v1 + 5952) = 3311;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20888),
      (const char (*)[40])"TRIGGER_BRICK_BREAKER_WORLD_LEVEL_SCORE",
      (data::WatcherTriggerType *)(v1 + 5952));
    if ( *(_BYTE *)(((v1 + 5968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5968, "TRIGGER_BRICK_BREAKER_WORLD_LEVEL_SCORE");
    *(_DWORD *)(v1 + 5968) = 3312;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[40],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20928),
      (const char (*)[40])"TRIGGER_BRICK_BREAKER_WORLD_LEVEL_COMBO",
      (data::WatcherTriggerType *)(v1 + 5968));
    if ( *(_BYTE *)(((v1 + 5984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 5984) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 5984, "TRIGGER_BRICK_BREAKER_WORLD_LEVEL_COMBO");
    *(_DWORD *)(v1 + 5984) = 3313;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[43],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 20968),
      (const char (*)[43])"TRIGGER_BRICK_BREAKER_FINISH_DUNGEON_LEVEL",
      (data::WatcherTriggerType *)(v1 + 5984));
    if ( *(_BYTE *)(((v1 + 6000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6000) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6000, "TRIGGER_BRICK_BREAKER_FINISH_DUNGEON_LEVEL");
    *(_DWORD *)(v1 + 6000) = 3314;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21008),
      (const char (*)[42])"TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_SCORE",
      (data::WatcherTriggerType *)(v1 + 6000));
    if ( *(_BYTE *)(((v1 + 6016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6016) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6016, "TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_SCORE");
    *(_DWORD *)(v1 + 6016) = 3315;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[42],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21048),
      (const char (*)[42])"TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_COMBO",
      (data::WatcherTriggerType *)(v1 + 6016));
    if ( *(_BYTE *)(((v1 + 6032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6032) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6032, "TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_COMBO");
    *(_DWORD *)(v1 + 6032) = 3316;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[48],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21088),
      (const char (*)[48])"TRIGGER_BRICK_BREAKER_WORLD_LEVEL_ELEM_REACTION",
      (data::WatcherTriggerType *)(v1 + 6032));
    if ( *(_BYTE *)(((v1 + 6048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6048) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6048, "TRIGGER_BRICK_BREAKER_WORLD_LEVEL_ELEM_REACTION");
    *(_DWORD *)(v1 + 6048) = 3317;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[53],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21128),
      (const char (*)[53])"TRIGGER_BRICK_BREAKER_WORLD_LEVEL_BALL_ELEM_REACTION",
      (data::WatcherTriggerType *)(v1 + 6048));
    if ( *(_BYTE *)(((v1 + 6064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6064) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6064, "TRIGGER_BRICK_BREAKER_WORLD_LEVEL_BALL_ELEM_REACTION");
    *(_DWORD *)(v1 + 6064) = 3318;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[50],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21168),
      (const char (*)[50])"TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_ELEM_REACTION",
      (data::WatcherTriggerType *)(v1 + 6064));
    if ( *(_BYTE *)(((v1 + 6080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6080) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6080, "TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_ELEM_REACTION");
    *(_DWORD *)(v1 + 6080) = 3319;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[55],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21208),
      (const char (*)[55])"TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_BALL_ELEM_REACTION",
      (data::WatcherTriggerType *)(v1 + 6080));
    if ( *(_BYTE *)(((v1 + 6096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6096) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6096, "TRIGGER_BRICK_BREAKER_DUNGEON_LEVEL_BALL_ELEM_REACTION");
    *(_DWORD *)(v1 + 6096) = 3320;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21248),
      (const char (*)[32])"TRIGGER_ENTER_SCENE_NOT_DUNGEON",
      (data::WatcherTriggerType *)(v1 + 6096));
    if ( *(_BYTE *)(((v1 + 6112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6112, "TRIGGER_ENTER_SCENE_NOT_DUNGEON");
    *(_DWORD *)(v1 + 6112) = 3400;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21288),
      (const char (*)[32])"TRIGGER_DUEL_HEART_FINISH_LEVEL",
      (data::WatcherTriggerType *)(v1 + 6112));
    if ( *(_BYTE *)(((v1 + 6128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6128, "TRIGGER_DUEL_HEART_FINISH_LEVEL");
    *(_DWORD *)(v1 + 6128) = 3401;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[31],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21328),
      (const char (*)[31])"TRIGGER_TEAM_CHAIN_SCORE_REACH",
      (data::WatcherTriggerType *)(v1 + 6128));
    if ( *(_BYTE *)(((v1 + 6144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6144, "TRIGGER_TEAM_CHAIN_SCORE_REACH");
    *(_DWORD *)(v1 + 6144) = 3402;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[36],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21368),
      (const char (*)[36])"TRIGGER_TEAM_CHAIN_FINISH_STAGE_CNT",
      (data::WatcherTriggerType *)(v1 + 6144));
    if ( *(_BYTE *)(((v1 + 6160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6160, "TRIGGER_TEAM_CHAIN_FINISH_STAGE_CNT");
    *(_DWORD *)(v1 + 6160) = 3403;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[44],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21408),
      (const char (*)[44])"TRIGGER_ELECTROHERCULES_BATTLE_FINISH_LEVEL",
      (data::WatcherTriggerType *)(v1 + 6160));
    if ( *(_BYTE *)(((v1 + 6176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6176, "TRIGGER_ELECTROHERCULES_BATTLE_FINISH_LEVEL");
    *(_DWORD *)(v1 + 6176) = 3406;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[32],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21448),
      (const char (*)[32])"TRIGGER_LAN_V3_RACE_REACH_SCORE",
      (data::WatcherTriggerType *)(v1 + 6176));
    if ( *(_BYTE *)(((v1 + 6192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 6192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 6192, "TRIGGER_LAN_V3_RACE_REACH_SCORE");
    *(_DWORD *)(v1 + 6192) = 3407;
    std::pair<std::string const,data::WatcherTriggerType>::pair<char const(&)[35],data::WatcherTriggerType,true>(
      (std::pair<const std::string,data::WatcherTriggerType> *const)(v1 + 21488),
      (const char (*)[35])"TRIGGER_LAN_V3_SHADOW_FINISH_LEVEL",
      (data::WatcherTriggerType *)(v1 + 6192));
    std::allocator<std::pair<std::string const,data::WatcherTriggerType>>::allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::WatcherTriggerType>::unordered_map(
      &data::getWatcherTriggerTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::WatcherTriggerType> >)__PAIR128__(383LL, v1 + 6208),
      0LL,
      (const std::unordered_map<std::string,data::WatcherTriggerType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::WatcherTriggerType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::WatcherTriggerType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getWatcherTriggerTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::WatcherTriggerType>::~unordered_map,
      &data::getWatcherTriggerTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::WatcherTriggerType>>::~allocator((std::allocator<std::pair<const std::string,data::WatcherTriggerType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::WatcherTriggerType> *)(v1 + 21528);
          i != (std::pair<const std::string,data::WatcherTriggerType> *)(v1 + 6208);
          std::pair<std::string const,data::WatcherTriggerType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8A9C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 2724) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_9(v1, 21792LL, v6);
  }
  return &data::getWatcherTriggerTypeNameMap[abi:cxx11](void)::m;
};

// Line 3676: range 000000000FA7F2D6-000000000FA9ABC9
const std::map<data::WatcherTriggerType,std::pair<std::string,std::string >> *__cdecl data::getWatcherTriggerTypeEnumMap[abi:cxx11]();

// Line 4067: range 000000000FA9ABCA-000000000FA9AF3D
const char *__fastcall data::enumValToStr(data::OpenStateType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::OpenStateType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:4066 64 8 9 iter:4069 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getOpenStateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::OpenStateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::OpenStateType,std::pair<std::string,std::string>>::find(map, (const std::map<data::OpenStateType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::OpenStateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::OpenStateType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      4072);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_OpenStateType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::OpenStateType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4079: range 000000000FA9AF3E-000000000FA9B4F6
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::OpenStateType>,false,true>::pointer v10; // rax
  data::OpenStateType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::OpenStateType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:4088 96 8 9 <unknown> 128 8 6 s:4078 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getOpenStateTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::OpenStateType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::OpenStateType>::find(
                                                                                          m,
                                                                                          (const std::unordered_map<std::string,data::OpenStateType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::OpenStateType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::OpenStateType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::OpenStateType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::OpenStateType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::OpenStateType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        4091);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::OpenStateType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::OpenStateType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      4082);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4100: range 000000000FA9B4F7-000000000FAA35C4
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::OpenStateType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::OpenStateType>,false,true>::pointer v11; // rax
  data::OpenStateType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[12336]; // [rsp+20h] [rbp-3030h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_8(12288LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = a2193219Unknown;
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -234556924;
  v4[536862735] = -234556924;
  v4[536862736] = -234556924;
  v4[536862737] = -234556924;
  v4[536862738] = -234556924;
  v4[536862739] = -234556924;
  v4[536862740] = -234556924;
  v4[536862741] = -234556924;
  v4[536862742] = -234556924;
  v4[536862743] = -234556924;
  v4[536862744] = -234556924;
  v4[536862745] = -234556924;
  v4[536862746] = -234556924;
  v4[536862747] = -234556924;
  v4[536862748] = -234556924;
  v4[536862749] = -234556924;
  v4[536862750] = -234556924;
  v4[536862751] = -234556924;
  v4[536862752] = -234556924;
  v4[536862753] = -234556924;
  v4[536862754] = -234556924;
  v4[536862755] = -234556924;
  v4[536862756] = -234556924;
  v4[536862757] = -234556924;
  v4[536862758] = -234556924;
  v4[536862759] = -234556924;
  v4[536862760] = -234556924;
  v4[536862761] = -234556924;
  v4[536862762] = -234556924;
  v4[536862763] = -234556924;
  v4[536862764] = -234556924;
  v4[536862765] = -234556924;
  v4[536862766] = -234556924;
  v4[536862767] = -234556924;
  v4[536862768] = -234556924;
  v4[536862769] = -234556924;
  v4[536862770] = -234556924;
  v4[536862771] = -234556924;
  v4[536862772] = -234556924;
  v4[536862773] = -234556924;
  v4[536862774] = -234556924;
  v4[536862775] = -234556924;
  v4[536862776] = -234556924;
  v4[536862777] = -234556924;
  v4[536862778] = -234556924;
  v4[536862779] = -234556924;
  v4[536862780] = -234556924;
  v4[536862781] = -234556924;
  v4[536862782] = -234556924;
  v4[536862783] = -234556924;
  v4[536862784] = -234556924;
  v4[536862785] = -234556924;
  v4[536862786] = -234556924;
  v4[536862787] = -234556924;
  v4[536862788] = -234556924;
  v4[536862789] = -234556924;
  v4[536862790] = -234556924;
  v4[536862791] = -234556924;
  v4[536862792] = -234556924;
  v4[536862793] = -234556924;
  v4[536862794] = -234556924;
  v4[536862795] = -234556924;
  v4[536862796] = -234556924;
  v4[536862797] = -234556924;
  v4[536862798] = -234556924;
  v4[536862799] = -234556924;
  v4[536862800] = -234556924;
  v4[536862801] = -234556924;
  v4[536862802] = -234556924;
  v4[536862803] = -234556924;
  v4[536862804] = -234556924;
  v4[536862805] = -234556924;
  v4[536862806] = -234556924;
  v4[536862807] = -234556924;
  v4[536862808] = -234556924;
  v4[536862809] = -234556924;
  v4[536862810] = -234556924;
  v4[536862811] = -234556924;
  v4[536862812] = -234556924;
  v4[536862813] = -234556924;
  v4[536862814] = -234556924;
  v4[536862815] = -234556924;
  v4[536862816] = -234556924;
  v4[536862817] = -234556924;
  v4[536862818] = -234556924;
  v4[536862819] = -234556924;
  v4[536862820] = -234556924;
  v4[536862821] = -234556924;
  v4[536862822] = -234556924;
  v4[536862823] = -234556924;
  v4[536862824] = -234556924;
  v4[536862825] = -234556924;
  v4[536862826] = -234556924;
  v4[536862827] = -218959360;
  v4[536862828] = -218959360;
  v4[536862829] = -218959360;
  v4[536862831] = -218959118;
  v4[536862833] = -218959118;
  v4[536862835] = -218959118;
  v4[536863096] = -202116109;
  v4[536863097] = -202116109;
  v4[536863098] = -202116109;
  v4[536863099] = -202116109;
  v4[536863100] = -202116109;
  v4[536863101] = -202116109;
  v4[536863102] = -202116109;
  v4[536863103] = -202116109;
  *(_QWORD *)(v2 + 3488) = s;
  if ( *(_QWORD *)(v2 + 3488) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::OpenStateType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::OpenStateType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[12],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3712),
        (const char (*)[12])"PAIMON_OPEN",
        (data::OpenStateType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, "PAIMON_OPEN");
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[18],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3752),
        (const char (*)[18])"PAIMON_NAVIGATION",
        (data::OpenStateType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, "PAIMON_NAVIGATION");
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3792),
        (const char (*)[26])"OPEN_STATE_AVATAR_PROMOTE",
        (data::OpenStateType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, "OPEN_STATE_AVATAR_PROMOTE");
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3832),
        (const char (*)[25])"OPEN_STATE_AVATAR_TALENT",
        (data::OpenStateType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, "OPEN_STATE_AVATAR_TALENT");
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3872),
        (const char (*)[26])"OPEN_STATE_WEAPON_PROMOTE",
        (data::OpenStateType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, "OPEN_STATE_WEAPON_PROMOTE");
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3912),
        (const char (*)[25])"OPEN_STATE_WEAPON_AWAKEN",
        (data::OpenStateType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, "OPEN_STATE_WEAPON_AWAKEN");
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3952),
        (const char (*)[24])"OPEN_STATE_QUEST_REMIND",
        (data::OpenStateType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, "OPEN_STATE_QUEST_REMIND");
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 3992),
        (const char (*)[22])"OPEN_STATE_GAME_GUIDE",
        (data::OpenStateType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, "OPEN_STATE_GAME_GUIDE");
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[16],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4032),
        (const char (*)[16])"OPEN_STATE_COOK",
        (data::OpenStateType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, "OPEN_STATE_COOK");
      *(_DWORD *)(v2 + 240) = 10;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4072),
        (const char (*)[26])"OPEN_STATE_WEAPON_UPGRADE",
        (data::OpenStateType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, "OPEN_STATE_WEAPON_UPGRADE");
      *(_DWORD *)(v2 + 256) = 11;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4112),
        (const char (*)[29])"OPEN_STATE_RELIQUARY_UPGRADE",
        (data::OpenStateType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, "OPEN_STATE_RELIQUARY_UPGRADE");
      *(_DWORD *)(v2 + 272) = 12;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4152),
        (const char (*)[29])"OPEN_STATE_RELIQUARY_PROMOTE",
        (data::OpenStateType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, "OPEN_STATE_RELIQUARY_PROMOTE");
      *(_DWORD *)(v2 + 288) = 13;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4192),
        (const char (*)[32])"OPEN_STATE_WEAPON_PROMOTE_GUIDE",
        (data::OpenStateType *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, "OPEN_STATE_WEAPON_PROMOTE_GUIDE");
      *(_DWORD *)(v2 + 304) = 14;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4232),
        (const char (*)[31])"OPEN_STATE_WEAPON_CHANGE_GUIDE",
        (data::OpenStateType *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, "OPEN_STATE_WEAPON_CHANGE_GUIDE");
      *(_DWORD *)(v2 + 320) = 15;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4272),
        (const char (*)[29])"OPEN_STATE_PLAYER_LVUP_GUIDE",
        (data::OpenStateType *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, "OPEN_STATE_PLAYER_LVUP_GUIDE");
      *(_DWORD *)(v2 + 336) = 16;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4312),
        (const char (*)[26])"OPEN_STATE_FRESHMAN_GUIDE",
        (data::OpenStateType *)(v2 + 336));
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 352, "OPEN_STATE_FRESHMAN_GUIDE");
      *(_DWORD *)(v2 + 352) = 17;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4352),
        (const char (*)[31])"OPEN_STATE_SKIP_FRESHMAN_GUIDE",
        (data::OpenStateType *)(v2 + 352));
      if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 368, "OPEN_STATE_SKIP_FRESHMAN_GUIDE");
      *(_DWORD *)(v2 + 368) = 18;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4392),
        (const char (*)[29])"OPEN_STATE_GUIDE_MOVE_CAMERA",
        (data::OpenStateType *)(v2 + 368));
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 384, "OPEN_STATE_GUIDE_MOVE_CAMERA");
      *(_DWORD *)(v2 + 384) = 19;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4432),
        (const char (*)[30])"OPEN_STATE_GUIDE_SCALE_CAMERA",
        (data::OpenStateType *)(v2 + 384));
      if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 400, "OPEN_STATE_GUIDE_SCALE_CAMERA");
      *(_DWORD *)(v2 + 400) = 20;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4472),
        (const char (*)[26])"OPEN_STATE_GUIDE_KEYBOARD",
        (data::OpenStateType *)(v2 + 400));
      if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 416, "OPEN_STATE_GUIDE_KEYBOARD");
      *(_DWORD *)(v2 + 416) = 21;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4512),
        (const char (*)[22])"OPEN_STATE_GUIDE_MOVE",
        (data::OpenStateType *)(v2 + 416));
      if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 432, "OPEN_STATE_GUIDE_MOVE");
      *(_DWORD *)(v2 + 432) = 22;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4552),
        (const char (*)[22])"OPEN_STATE_GUIDE_JUMP",
        (data::OpenStateType *)(v2 + 432));
      if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 448, "OPEN_STATE_GUIDE_JUMP");
      *(_DWORD *)(v2 + 448) = 23;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4592),
        (const char (*)[24])"OPEN_STATE_GUIDE_SPRINT",
        (data::OpenStateType *)(v2 + 448));
      if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 464, "OPEN_STATE_GUIDE_SPRINT");
      *(_DWORD *)(v2 + 464) = 24;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4632),
        (const char (*)[21])"OPEN_STATE_GUIDE_MAP",
        (data::OpenStateType *)(v2 + 464));
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 480, "OPEN_STATE_GUIDE_MAP");
      *(_DWORD *)(v2 + 480) = 25;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4672),
        (const char (*)[24])"OPEN_STATE_GUIDE_ATTACK",
        (data::OpenStateType *)(v2 + 480));
      if ( *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 496, "OPEN_STATE_GUIDE_ATTACK");
      *(_DWORD *)(v2 + 496) = 26;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4712),
        (const char (*)[21])"OPEN_STATE_GUIDE_FLY",
        (data::OpenStateType *)(v2 + 496));
      if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 512, "OPEN_STATE_GUIDE_FLY");
      *(_DWORD *)(v2 + 512) = 27;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4752),
        (const char (*)[24])"OPEN_STATE_GUIDE_TALENT",
        (data::OpenStateType *)(v2 + 512));
      if ( *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 528, "OPEN_STATE_GUIDE_TALENT");
      *(_DWORD *)(v2 + 528) = 28;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4792),
        (const char (*)[23])"OPEN_STATE_GUIDE_RELIC",
        (data::OpenStateType *)(v2 + 528));
      if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 544, "OPEN_STATE_GUIDE_RELIC");
      *(_DWORD *)(v2 + 544) = 29;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4832),
        (const char (*)[28])"OPEN_STATE_GUIDE_RELIC_PROM",
        (data::OpenStateType *)(v2 + 544));
      if ( *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 560, "OPEN_STATE_GUIDE_RELIC_PROM");
      *(_DWORD *)(v2 + 560) = 30;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[19],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4872),
        (const char (*)[19])"OPEN_STATE_COMBINE",
        (data::OpenStateType *)(v2 + 560));
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 576, "OPEN_STATE_COMBINE");
      *(_DWORD *)(v2 + 576) = 31;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4912),
        (const char (*)[17])"OPEN_STATE_GACHA",
        (data::OpenStateType *)(v2 + 576));
      if ( *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 592, "OPEN_STATE_GACHA");
      *(_DWORD *)(v2 + 592) = 32;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4952),
        (const char (*)[23])"OPEN_STATE_GUIDE_GACHA",
        (data::OpenStateType *)(v2 + 592));
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 608, "OPEN_STATE_GUIDE_GACHA");
      *(_DWORD *)(v2 + 608) = 33;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 4992),
        (const char (*)[22])"OPEN_STATE_GUIDE_TEAM",
        (data::OpenStateType *)(v2 + 608));
      if ( *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 624, "OPEN_STATE_GUIDE_TEAM");
      *(_DWORD *)(v2 + 624) = 34;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5032),
        (const char (*)[23])"OPEN_STATE_GUIDE_PROUD",
        (data::OpenStateType *)(v2 + 624));
      if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 640, "OPEN_STATE_GUIDE_PROUD");
      *(_DWORD *)(v2 + 640) = 35;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5072),
        (const char (*)[32])"OPEN_STATE_GUIDE_AVATAR_PROMOTE",
        (data::OpenStateType *)(v2 + 640));
      if ( *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 656, "OPEN_STATE_GUIDE_AVATAR_PROMOTE");
      *(_DWORD *)(v2 + 656) = 36;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5112),
        (const char (*)[32])"OPEN_STATE_GUIDE_ADVENTURE_CARD",
        (data::OpenStateType *)(v2 + 656));
      if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 672, "OPEN_STATE_GUIDE_ADVENTURE_CARD");
      *(_DWORD *)(v2 + 672) = 37;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5152),
        (const char (*)[17])"OPEN_STATE_FORGE",
        (data::OpenStateType *)(v2 + 672));
      if ( *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 688, "OPEN_STATE_FORGE");
      *(_DWORD *)(v2 + 688) = 38;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5192),
        (const char (*)[21])"OPEN_STATE_GUIDE_BAG",
        (data::OpenStateType *)(v2 + 688));
      if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 704, "OPEN_STATE_GUIDE_BAG");
      *(_DWORD *)(v2 + 704) = 39;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5232),
        (const char (*)[22])"OPEN_STATE_EXPEDITION",
        (data::OpenStateType *)(v2 + 704));
      if ( *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 720, "OPEN_STATE_EXPEDITION");
      *(_DWORD *)(v2 + 720) = 40;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5272),
        (const char (*)[37])"OPEN_STATE_GUIDE_ADVENTURE_DAILYTASK",
        (data::OpenStateType *)(v2 + 720));
      if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 736, "OPEN_STATE_GUIDE_ADVENTURE_DAILYTASK");
      *(_DWORD *)(v2 + 736) = 41;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5312),
        (const char (*)[35])"OPEN_STATE_GUIDE_ADVENTURE_DUNGEON",
        (data::OpenStateType *)(v2 + 736));
      if ( *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 752, "OPEN_STATE_GUIDE_ADVENTURE_DUNGEON");
      *(_DWORD *)(v2 + 752) = 42;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5352),
        (const char (*)[17])"OPEN_STATE_TOWER",
        (data::OpenStateType *)(v2 + 752));
      if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 768, "OPEN_STATE_TOWER");
      *(_DWORD *)(v2 + 768) = 43;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5392),
        (const char (*)[25])"OPEN_STATE_WORLD_STAMINA",
        (data::OpenStateType *)(v2 + 768));
      if ( *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 784, "OPEN_STATE_WORLD_STAMINA");
      *(_DWORD *)(v2 + 784) = 44;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5432),
        (const char (*)[29])"OPEN_STATE_TOWER_FIRST_ENTER",
        (data::OpenStateType *)(v2 + 784));
      if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 800, "OPEN_STATE_TOWER_FIRST_ENTER");
      *(_DWORD *)(v2 + 800) = 45;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5472),
        (const char (*)[17])"OPEN_STATE_RESIN",
        (data::OpenStateType *)(v2 + 800));
      if ( *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 816, "OPEN_STATE_RESIN");
      *(_DWORD *)(v2 + 816) = 47;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5512),
        (const char (*)[34])"OPEN_STATE_LIMIT_REGION_FRESHMEAT",
        (data::OpenStateType *)(v2 + 816));
      if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 832, "OPEN_STATE_LIMIT_REGION_FRESHMEAT");
      *(_DWORD *)(v2 + 832) = 48;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5552),
        (const char (*)[31])"OPEN_STATE_LIMIT_REGION_GLOBAL",
        (data::OpenStateType *)(v2 + 832));
      if ( *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 848, "OPEN_STATE_LIMIT_REGION_GLOBAL");
      *(_DWORD *)(v2 + 848) = 49;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5592),
        (const char (*)[23])"OPEN_STATE_MULTIPLAYER",
        (data::OpenStateType *)(v2 + 848));
      if ( *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 864, "OPEN_STATE_MULTIPLAYER");
      *(_DWORD *)(v2 + 864) = 50;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5632),
        (const char (*)[25])"OPEN_STATE_GUIDE_MOUSEPC",
        (data::OpenStateType *)(v2 + 864));
      if ( *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 880, "OPEN_STATE_GUIDE_MOUSEPC");
      *(_DWORD *)(v2 + 880) = 51;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5672),
        (const char (*)[29])"OPEN_STATE_GUIDE_MULTIPLAYER",
        (data::OpenStateType *)(v2 + 880));
      if ( *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 896, "OPEN_STATE_GUIDE_MULTIPLAYER");
      *(_DWORD *)(v2 + 896) = 52;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5712),
        (const char (*)[31])"OPEN_STATE_GUIDE_DUNGEONREWARD",
        (data::OpenStateType *)(v2 + 896));
      if ( *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 912, "OPEN_STATE_GUIDE_DUNGEONREWARD");
      *(_DWORD *)(v2 + 912) = 53;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5752),
        (const char (*)[25])"OPEN_STATE_GUIDE_BLOSSOM",
        (data::OpenStateType *)(v2 + 912));
      if ( *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 928, "OPEN_STATE_GUIDE_BLOSSOM");
      *(_DWORD *)(v2 + 928) = 54;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5792),
        (const char (*)[26])"OPEN_STATE_AVATAR_FASHION",
        (data::OpenStateType *)(v2 + 928));
      if ( *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 944, "OPEN_STATE_AVATAR_FASHION");
      *(_DWORD *)(v2 + 944) = 55;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5832),
        (const char (*)[22])"OPEN_STATE_PHOTOGRAPH",
        (data::OpenStateType *)(v2 + 944));
      if ( *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 960, "OPEN_STATE_PHOTOGRAPH");
      *(_DWORD *)(v2 + 960) = 56;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5872),
        (const char (*)[26])"OPEN_STATE_GUIDE_KSLQUEST",
        (data::OpenStateType *)(v2 + 960));
      if ( *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 976, "OPEN_STATE_GUIDE_KSLQUEST");
      *(_DWORD *)(v2 + 976) = 57;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5912),
        (const char (*)[25])"OPEN_STATE_PERSONAL_LINE",
        (data::OpenStateType *)(v2 + 976));
      if ( *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 992, "OPEN_STATE_PERSONAL_LINE");
      *(_DWORD *)(v2 + 992) = 58;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5952),
        (const char (*)[31])"OPEN_STATE_GUIDE_PERSONAL_LINE",
        (data::OpenStateType *)(v2 + 992));
      if ( *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1008, "OPEN_STATE_GUIDE_PERSONAL_LINE");
      *(_DWORD *)(v2 + 1008) = 59;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 5992),
        (const char (*)[28])"OPEN_STATE_GUIDE_APPEARANCE",
        (data::OpenStateType *)(v2 + 1008));
      if ( *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1024, "OPEN_STATE_GUIDE_APPEARANCE");
      *(_DWORD *)(v2 + 1024) = 60;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6032),
        (const char (*)[25])"OPEN_STATE_GUIDE_PROCESS",
        (data::OpenStateType *)(v2 + 1024));
      if ( *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1040, "OPEN_STATE_GUIDE_PROCESS");
      *(_DWORD *)(v2 + 1040) = 61;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6072),
        (const char (*)[35])"OPEN_STATE_GUIDE_PERSONAL_LINE_KEY",
        (data::OpenStateType *)(v2 + 1040));
      if ( *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1056, "OPEN_STATE_GUIDE_PERSONAL_LINE_KEY");
      *(_DWORD *)(v2 + 1056) = 62;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6112),
        (const char (*)[24])"OPEN_STATE_GUIDE_WIDGET",
        (data::OpenStateType *)(v2 + 1056));
      if ( *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1072, "OPEN_STATE_GUIDE_WIDGET");
      *(_DWORD *)(v2 + 1072) = 63;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6152),
        (const char (*)[38])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_ASTER",
        (data::OpenStateType *)(v2 + 1072));
      if ( *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1088, "OPEN_STATE_GUIDE_ACTIVITY_SKILL_ASTER");
      *(_DWORD *)(v2 + 1088) = 64;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6192),
        (const char (*)[29])"OPEN_STATE_GUIDE_COLDCLIMATE",
        (data::OpenStateType *)(v2 + 1088));
      if ( *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1104, "OPEN_STATE_GUIDE_COLDCLIMATE");
      *(_DWORD *)(v2 + 1104) = 65;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6232),
        (const char (*)[27])"OPEN_STATE_DERIVATIVE_MALL",
        (data::OpenStateType *)(v2 + 1104));
      if ( *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1120, "OPEN_STATE_DERIVATIVE_MALL");
      *(_DWORD *)(v2 + 1120) = 66;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6272),
        (const char (*)[33])"OPEN_STATE_GUIDE_EXITMULTIPLAYER",
        (data::OpenStateType *)(v2 + 1120));
      if ( *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1136, "OPEN_STATE_GUIDE_EXITMULTIPLAYER");
      *(_DWORD *)(v2 + 1136) = 67;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6312),
        (const char (*)[41])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD",
        (data::OpenStateType *)(v2 + 1136));
      if ( *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1152, "OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD");
      *(_DWORD *)(v2 + 1152) = 68;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[43],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6352),
        (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_REBUILD",
        (data::OpenStateType *)(v2 + 1152));
      if ( *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1168, "OPEN_STATE_GUIDE_THEATREMACHANICUS_REBUILD");
      *(_DWORD *)(v2 + 1168) = 69;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6392),
        (const char (*)[40])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CARD",
        (data::OpenStateType *)(v2 + 1168));
      if ( *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1184, "OPEN_STATE_GUIDE_THEATREMACHANICUS_CARD");
      *(_DWORD *)(v2 + 1184) = 70;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[43],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6432),
        (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MONSTER",
        (data::OpenStateType *)(v2 + 1184));
      if ( *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1200, "OPEN_STATE_GUIDE_THEATREMACHANICUS_MONSTER");
      *(_DWORD *)(v2 + 1200) = 71;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[49],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6472),
        (const char (*)[49])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MISSION_CHECK",
        (data::OpenStateType *)(v2 + 1200));
      if ( *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1216, "OPEN_STATE_GUIDE_THEATREMACHANICUS_MISSION_CHECK");
      *(_DWORD *)(v2 + 1216) = 72;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[48],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6512),
        (const char (*)[48])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD_SELECT",
        (data::OpenStateType *)(v2 + 1216));
      if ( *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1232, "OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD_SELECT");
      *(_DWORD *)(v2 + 1232) = 73;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[51],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6552),
        (const char (*)[51])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CHALLENGE_START",
        (data::OpenStateType *)(v2 + 1232));
      if ( *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1248, "OPEN_STATE_GUIDE_THEATREMACHANICUS_CHALLENGE_START");
      *(_DWORD *)(v2 + 1248) = 74;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6592),
        (const char (*)[25])"OPEN_STATE_GUIDE_CONVERT",
        (data::OpenStateType *)(v2 + 1248));
      if ( *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1264, "OPEN_STATE_GUIDE_CONVERT");
      *(_DWORD *)(v2 + 1264) = 75;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[47],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6632),
        (const char (*)[47])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MULTIPLAYER",
        (data::OpenStateType *)(v2 + 1264));
      if ( *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1280, "OPEN_STATE_GUIDE_THEATREMACHANICUS_MULTIPLAYER");
      *(_DWORD *)(v2 + 1280) = 76;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6672),
        (const char (*)[27])"OPEN_STATE_GUIDE_COOP_TASK",
        (data::OpenStateType *)(v2 + 1280));
      if ( *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1296, "OPEN_STATE_GUIDE_COOP_TASK");
      *(_DWORD *)(v2 + 1296) = 77;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[39],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6712),
        (const char (*)[39])"OPEN_STATE_GUIDE_HOMEWORLD_ADEPTIABODE",
        (data::OpenStateType *)(v2 + 1296));
      if ( *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1312, "OPEN_STATE_GUIDE_HOMEWORLD_ADEPTIABODE");
      *(_DWORD *)(v2 + 1312) = 78;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6752),
        (const char (*)[34])"OPEN_STATE_GUIDE_HOMEWORLD_DEPLOY",
        (data::OpenStateType *)(v2 + 1312));
      if ( *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1328, "OPEN_STATE_GUIDE_HOMEWORLD_DEPLOY");
      *(_DWORD *)(v2 + 1328) = 79;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6792),
        (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP",
        (data::OpenStateType *)(v2 + 1328));
      if ( *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1344, "OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP");
      *(_DWORD *)(v2 + 1344) = 80;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[44],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6832),
        (const char (*)[44])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION",
        (data::OpenStateType *)(v2 + 1344));
      if ( *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1360, "OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION");
      *(_DWORD *)(v2 + 1360) = 81;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6872),
        (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER",
        (data::OpenStateType *)(v2 + 1360));
      if ( *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1376, "OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER");
      *(_DWORD *)(v2 + 1376) = 82;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6912),
        (const char (*)[35])"OPEN_STATE_GUIDE_HIDEANDSEEK_SKILL",
        (data::OpenStateType *)(v2 + 1376));
      if ( *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1392, "OPEN_STATE_GUIDE_HIDEANDSEEK_SKILL");
      *(_DWORD *)(v2 + 1392) = 83;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6952),
        (const char (*)[35])"OPEN_STATE_GUIDE_HOMEWORLD_MAPLIST",
        (data::OpenStateType *)(v2 + 1392));
      if ( *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1408, "OPEN_STATE_GUIDE_HOMEWORLD_MAPLIST");
      *(_DWORD *)(v2 + 1408) = 84;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 6992),
        (const char (*)[30])"OPEN_STATE_GUIDE_RELICRESOLVE",
        (data::OpenStateType *)(v2 + 1408));
      if ( *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1424, "OPEN_STATE_GUIDE_RELICRESOLVE");
      *(_DWORD *)(v2 + 1424) = 85;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7032),
        (const char (*)[24])"OPEN_STATE_GUIDE_GGUIDE",
        (data::OpenStateType *)(v2 + 1424));
      if ( *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1440, "OPEN_STATE_GUIDE_GGUIDE");
      *(_DWORD *)(v2 + 1440) = 86;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7072),
        (const char (*)[29])"OPEN_STATE_GUIDE_GGUIDE_HINT",
        (data::OpenStateType *)(v2 + 1440));
      if ( *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1456, "OPEN_STATE_GUIDE_GGUIDE_HINT");
      *(_DWORD *)(v2 + 1456) = 87;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7112),
        (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP_V2",
        (data::OpenStateType *)(v2 + 1456));
      if ( *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1472, "OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP_V2");
      *(_DWORD *)(v2 + 1472) = 88;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[47],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7152),
        (const char (*)[47])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION_V2",
        (data::OpenStateType *)(v2 + 1472));
      if ( *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1488, "OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION_V2");
      *(_DWORD *)(v2 + 1488) = 89;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7192),
        (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER_V2",
        (data::OpenStateType *)(v2 + 1488));
      if ( *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1504, "OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER_V2");
      *(_DWORD *)(v2 + 1504) = 90;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7232),
        (const char (*)[40])"OPEN_STATE_GUIDE_QUICK_TEAMMEMBERCHANGE",
        (data::OpenStateType *)(v2 + 1504));
      if ( *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1520, "OPEN_STATE_GUIDE_QUICK_TEAMMEMBERCHANGE");
      *(_DWORD *)(v2 + 1520) = 91;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7272),
        (const char (*)[28])"OPEN_STATE_GGUIDE_FIRSTSHOW",
        (data::OpenStateType *)(v2 + 1520));
      if ( *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1536, "OPEN_STATE_GGUIDE_FIRSTSHOW");
      *(_DWORD *)(v2 + 1536) = 92;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[43],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7312),
        (const char (*)[43])"OPEN_STATE_GGUIDE_MAINPAGE_ENTRY_DISAPPEAR",
        (data::OpenStateType *)(v2 + 1536));
      if ( *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1552, "OPEN_STATE_GGUIDE_MAINPAGE_ENTRY_DISAPPEAR");
      *(_DWORD *)(v2 + 1552) = 800;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7352),
        (const char (*)[33])"OPEN_STATE_CITY_REPUATION_MENGDE",
        (data::OpenStateType *)(v2 + 1552));
      if ( *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1568, "OPEN_STATE_CITY_REPUATION_MENGDE");
      *(_DWORD *)(v2 + 1568) = 801;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7392),
        (const char (*)[32])"OPEN_STATE_CITY_REPUATION_LIYUE",
        (data::OpenStateType *)(v2 + 1568));
      if ( *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1584, "OPEN_STATE_CITY_REPUATION_LIYUE");
      *(_DWORD *)(v2 + 1584) = 802;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7432),
        (const char (*)[34])"OPEN_STATE_CITY_REPUATION_UI_HINT",
        (data::OpenStateType *)(v2 + 1584));
      if ( *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1600, "OPEN_STATE_CITY_REPUATION_UI_HINT");
      *(_DWORD *)(v2 + 1600) = 803;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7472),
        (const char (*)[34])"OPEN_STATE_CITY_REPUATION_INAZUMA",
        (data::OpenStateType *)(v2 + 1600));
      if ( *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1616, "OPEN_STATE_CITY_REPUATION_INAZUMA");
      *(_DWORD *)(v2 + 1616) = 900;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7512),
        (const char (*)[26])"OPEN_STATE_SHOP_TYPE_MALL",
        (data::OpenStateType *)(v2 + 1616));
      if ( *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1632, "OPEN_STATE_SHOP_TYPE_MALL");
      *(_DWORD *)(v2 + 1632) = 901;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7552),
        (const char (*)[33])"OPEN_STATE_SHOP_TYPE_RECOMMANDED",
        (data::OpenStateType *)(v2 + 1632));
      if ( *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1648, "OPEN_STATE_SHOP_TYPE_RECOMMANDED");
      *(_DWORD *)(v2 + 1648) = 902;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7592),
        (const char (*)[36])"OPEN_STATE_SHOP_TYPE_GENESISCRYSTAL",
        (data::OpenStateType *)(v2 + 1648));
      if ( *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1664, "OPEN_STATE_SHOP_TYPE_GENESISCRYSTAL");
      *(_DWORD *)(v2 + 1664) = 903;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7632),
        (const char (*)[33])"OPEN_STATE_SHOP_TYPE_GIFTPACKAGE",
        (data::OpenStateType *)(v2 + 1664));
      if ( *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1680, "OPEN_STATE_SHOP_TYPE_GIFTPACKAGE");
      *(_DWORD *)(v2 + 1680) = 1001;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7672),
        (const char (*)[28])"OPEN_STATE_SHOP_TYPE_PAIMON",
        (data::OpenStateType *)(v2 + 1680));
      if ( *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1696, "OPEN_STATE_SHOP_TYPE_PAIMON");
      *(_DWORD *)(v2 + 1696) = 1002;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7712),
        (const char (*)[26])"OPEN_STATE_SHOP_TYPE_CITY",
        (data::OpenStateType *)(v2 + 1696));
      if ( *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1712, "OPEN_STATE_SHOP_TYPE_CITY");
      *(_DWORD *)(v2 + 1712) = 1003;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7752),
        (const char (*)[32])"OPEN_STATE_SHOP_TYPE_BLACKSMITH",
        (data::OpenStateType *)(v2 + 1712));
      if ( *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1728, "OPEN_STATE_SHOP_TYPE_BLACKSMITH");
      *(_DWORD *)(v2 + 1728) = 1004;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7792),
        (const char (*)[29])"OPEN_STATE_SHOP_TYPE_GROCERY",
        (data::OpenStateType *)(v2 + 1728));
      if ( *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1744, "OPEN_STATE_SHOP_TYPE_GROCERY");
      *(_DWORD *)(v2 + 1744) = 1005;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7832),
        (const char (*)[26])"OPEN_STATE_SHOP_TYPE_FOOD",
        (data::OpenStateType *)(v2 + 1744));
      if ( *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1760, "OPEN_STATE_SHOP_TYPE_FOOD");
      *(_DWORD *)(v2 + 1760) = 1006;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7872),
        (const char (*)[30])"OPEN_STATE_SHOP_TYPE_SEA_LAMP",
        (data::OpenStateType *)(v2 + 1760));
      if ( *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1776, "OPEN_STATE_SHOP_TYPE_SEA_LAMP");
      *(_DWORD *)(v2 + 1776) = 1007;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7912),
        (const char (*)[34])"OPEN_STATE_SHOP_TYPE_VIRTUAL_SHOP",
        (data::OpenStateType *)(v2 + 1776));
      if ( *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1792, "OPEN_STATE_SHOP_TYPE_VIRTUAL_SHOP");
      *(_DWORD *)(v2 + 1792) = 1008;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7952),
        (const char (*)[35])"OPEN_STATE_SHOP_TYPE_LIYUE_GROCERY",
        (data::OpenStateType *)(v2 + 1792));
      if ( *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1808, "OPEN_STATE_SHOP_TYPE_LIYUE_GROCERY");
      *(_DWORD *)(v2 + 1808) = 1009;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 7992),
        (const char (*)[36])"OPEN_STATE_SHOP_TYPE_LIYUE_SOUVENIR",
        (data::OpenStateType *)(v2 + 1808));
      if ( *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1824, "OPEN_STATE_SHOP_TYPE_LIYUE_SOUVENIR");
      *(_DWORD *)(v2 + 1824) = 1010;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8032),
        (const char (*)[38])"OPEN_STATE_SHOP_TYPE_LIYUE_RESTAURANT",
        (data::OpenStateType *)(v2 + 1824));
      if ( *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1840, "OPEN_STATE_SHOP_TYPE_LIYUE_RESTAURANT");
      *(_DWORD *)(v2 + 1840) = 1011;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8072),
        (const char (*)[38])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR",
        (data::OpenStateType *)(v2 + 1840));
      if ( *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1856, "OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR");
      *(_DWORD *)(v2 + 1856) = 1012;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8112),
        (const char (*)[32])"OPEN_STATE_SHOP_TYPE_NPC_TOMOKI",
        (data::OpenStateType *)(v2 + 1856));
      if ( *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1872, "OPEN_STATE_SHOP_TYPE_NPC_TOMOKI");
      *(_DWORD *)(v2 + 1872) = 1013;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[48],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8152),
        (const char (*)[48])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR_BLACK_BAR",
        (data::OpenStateType *)(v2 + 1872));
      if ( *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1888, "OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR_BLACK_BAR");
      *(_DWORD *)(v2 + 1888) = 1100;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 0x2000),
        (const char (*)[22])"OPEN_ADVENTURE_MANUAL",
        (data::OpenStateType *)(v2 + 1888));
      if ( *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1904, "OPEN_ADVENTURE_MANUAL");
      *(_DWORD *)(v2 + 1904) = 1101;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8232),
        (const char (*)[34])"OPEN_ADVENTURE_MANUAL_CITY_MENGDE",
        (data::OpenStateType *)(v2 + 1904));
      if ( *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1920, "OPEN_ADVENTURE_MANUAL_CITY_MENGDE");
      *(_DWORD *)(v2 + 1920) = 1102;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8272),
        (const char (*)[33])"OPEN_ADVENTURE_MANUAL_CITY_LIYUE",
        (data::OpenStateType *)(v2 + 1920));
      if ( *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1936, "OPEN_ADVENTURE_MANUAL_CITY_LIYUE");
      *(_DWORD *)(v2 + 1936) = 1103;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8312),
        (const char (*)[30])"OPEN_ADVENTURE_MANUAL_MONSTER",
        (data::OpenStateType *)(v2 + 1936));
      if ( *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1952, "OPEN_ADVENTURE_MANUAL_MONSTER");
      *(_DWORD *)(v2 + 1952) = 1104;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8352),
        (const char (*)[35])"OPEN_ADVENTURE_MANUAL_BOSS_DUNGEON",
        (data::OpenStateType *)(v2 + 1952));
      if ( *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1968, "OPEN_ADVENTURE_MANUAL_BOSS_DUNGEON");
      *(_DWORD *)(v2 + 1968) = 1200;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8392),
        (const char (*)[28])"OPEN_STATE_ACTIVITY_SEALAMP",
        (data::OpenStateType *)(v2 + 1968));
      if ( *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1984, "OPEN_STATE_ACTIVITY_SEALAMP");
      *(_DWORD *)(v2 + 1984) = 1201;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8432),
        (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB2",
        (data::OpenStateType *)(v2 + 1984));
      if ( *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2000, "OPEN_STATE_ACTIVITY_SEALAMP_TAB2");
      *(_DWORD *)(v2 + 2000) = 1202;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8472),
        (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB3",
        (data::OpenStateType *)(v2 + 2000));
      if ( *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2016, "OPEN_STATE_ACTIVITY_SEALAMP_TAB3");
      *(_DWORD *)(v2 + 2016) = 1300;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8512),
        (const char (*)[23])"OPEN_STATE_BATTLE_PASS",
        (data::OpenStateType *)(v2 + 2016));
      if ( *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2032, "OPEN_STATE_BATTLE_PASS");
      *(_DWORD *)(v2 + 2032) = 1301;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8552),
        (const char (*)[29])"OPEN_STATE_BATTLE_PASS_ENTRY",
        (data::OpenStateType *)(v2 + 2032));
      if ( *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2048, "OPEN_STATE_BATTLE_PASS_ENTRY");
      *(_DWORD *)(v2 + 2048) = 1400;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8592),
        (const char (*)[29])"OPEN_STATE_ACTIVITY_CRUCIBLE",
        (data::OpenStateType *)(v2 + 2048));
      if ( *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2064, "OPEN_STATE_ACTIVITY_CRUCIBLE");
      *(_DWORD *)(v2 + 2064) = 1401;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8632),
        (const char (*)[37])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_OPEN",
        (data::OpenStateType *)(v2 + 2064));
      if ( *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2080, "OPEN_STATE_ACTIVITY_NEWBEEBOUNS_OPEN");
      *(_DWORD *)(v2 + 2080) = 1402;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8672),
        (const char (*)[38])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_CLOSE",
        (data::OpenStateType *)(v2 + 2080));
      if ( *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2096, "OPEN_STATE_ACTIVITY_NEWBEEBOUNS_CLOSE");
      *(_DWORD *)(v2 + 2096) = 1403;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8712),
        (const char (*)[31])"OPEN_STATE_ACTIVITY_ENTRY_OPEN",
        (data::OpenStateType *)(v2 + 2096));
      if ( *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2112, "OPEN_STATE_ACTIVITY_ENTRY_OPEN");
      *(_DWORD *)(v2 + 2112) = 1404;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8752),
        (const char (*)[33])"OPEN_STATE_MENGDE_INFUSEDCRYSTAL",
        (data::OpenStateType *)(v2 + 2112));
      if ( *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2128, "OPEN_STATE_MENGDE_INFUSEDCRYSTAL");
      *(_DWORD *)(v2 + 2128) = 1405;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8792),
        (const char (*)[32])"OPEN_STATE_LIYUE_INFUSEDCRYSTAL",
        (data::OpenStateType *)(v2 + 2128));
      if ( *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2144, "OPEN_STATE_LIYUE_INFUSEDCRYSTAL");
      *(_DWORD *)(v2 + 2144) = 1406;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8832),
        (const char (*)[36])"OPEN_STATE_SNOW_MOUNTAIN_ELDER_TREE",
        (data::OpenStateType *)(v2 + 2144));
      if ( *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2160, "OPEN_STATE_SNOW_MOUNTAIN_ELDER_TREE");
      *(_DWORD *)(v2 + 2160) = 1407;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8872),
        (const char (*)[24])"OPEN_STATE_MIRACLE_RING",
        (data::OpenStateType *)(v2 + 2160));
      if ( *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2176, "OPEN_STATE_MIRACLE_RING");
      *(_DWORD *)(v2 + 2176) = 1408;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8912),
        (const char (*)[21])"OPEN_STATE_COOP_LINE",
        (data::OpenStateType *)(v2 + 2176));
      if ( *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2192, "OPEN_STATE_COOP_LINE");
      *(_DWORD *)(v2 + 2192) = 1409;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8952),
        (const char (*)[34])"OPEN_STATE_INAZUMA_INFUSEDCRYSTAL",
        (data::OpenStateType *)(v2 + 2192));
      if ( *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2208, "OPEN_STATE_INAZUMA_INFUSEDCRYSTAL");
      *(_DWORD *)(v2 + 2208) = 1410;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[16],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 8992),
        (const char (*)[16])"OPEN_STATE_FISH",
        (data::OpenStateType *)(v2 + 2208));
      if ( *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2224, "OPEN_STATE_FISH");
      *(_DWORD *)(v2 + 2224) = 1411;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9032),
        (const char (*)[33])"OPEN_STATE_GUIDE_SUMO_TEAM_SKILL",
        (data::OpenStateType *)(v2 + 2224));
      if ( *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2240, "OPEN_STATE_GUIDE_SUMO_TEAM_SKILL");
      *(_DWORD *)(v2 + 2240) = 1412;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9072),
        (const char (*)[29])"OPEN_STATE_GUIDE_FISH_RECIPE",
        (data::OpenStateType *)(v2 + 2240));
      if ( *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2256, "OPEN_STATE_GUIDE_FISH_RECIPE");
      *(_DWORD *)(v2 + 2256) = 1500;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[16],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9112),
        (const char (*)[16])"OPEN_STATE_HOME",
        (data::OpenStateType *)(v2 + 2256));
      if ( *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2272, "OPEN_STATE_HOME");
      *(_DWORD *)(v2 + 2272) = 1501;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9152),
        (const char (*)[30])"OPEN_STATE_ACTIVITY_HOMEWORLD",
        (data::OpenStateType *)(v2 + 2272));
      if ( *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2288, "OPEN_STATE_ACTIVITY_HOMEWORLD");
      *(_DWORD *)(v2 + 2288) = 1502;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9192),
        (const char (*)[23])"OPEN_STATE_ADEPTIABODE",
        (data::OpenStateType *)(v2 + 2288));
      if ( *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2304, "OPEN_STATE_ADEPTIABODE");
      *(_DWORD *)(v2 + 2304) = 1503;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9232),
        (const char (*)[23])"OPEN_STATE_HOME_AVATAR",
        (data::OpenStateType *)(v2 + 2304));
      if ( *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2320, "OPEN_STATE_HOME_AVATAR");
      *(_DWORD *)(v2 + 2320) = 1504;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9272),
        (const char (*)[21])"OPEN_STATE_HOME_EDIT",
        (data::OpenStateType *)(v2 + 2320));
      if ( *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2336, "OPEN_STATE_HOME_EDIT");
      *(_DWORD *)(v2 + 2336) = 1505;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9312),
        (const char (*)[26])"OPEN_STATE_HOME_EDIT_TIPS",
        (data::OpenStateType *)(v2 + 2336));
      if ( *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2352, "OPEN_STATE_HOME_EDIT_TIPS");
      *(_DWORD *)(v2 + 2352) = 1600;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9352),
        (const char (*)[31])"OPEN_STATE_RELIQUARY_DECOMPOSE",
        (data::OpenStateType *)(v2 + 2352));
      if ( *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2368, "OPEN_STATE_RELIQUARY_DECOMPOSE");
      *(_DWORD *)(v2 + 2368) = 1700;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9392),
        (const char (*)[23])"OPEN_STATE_ACTIVITY_H5",
        (data::OpenStateType *)(v2 + 2368));
      if ( *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2384, "OPEN_STATE_ACTIVITY_H5");
      *(_DWORD *)(v2 + 2384) = 2000;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9432),
        (const char (*)[23])"OPEN_STATE_ORAIONOKAMI",
        (data::OpenStateType *)(v2 + 2384));
      if ( *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2400, "OPEN_STATE_ORAIONOKAMI");
      *(_DWORD *)(v2 + 2400) = 2001;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9472),
        (const char (*)[37])"OPEN_STATE_GUIDE_CHESS_MISSION_CHECK",
        (data::OpenStateType *)(v2 + 2400));
      if ( *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2416, "OPEN_STATE_GUIDE_CHESS_MISSION_CHECK");
      *(_DWORD *)(v2 + 2416) = 2002;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9512),
        (const char (*)[29])"OPEN_STATE_GUIDE_CHESS_BUILD",
        (data::OpenStateType *)(v2 + 2416));
      if ( *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2432, "OPEN_STATE_GUIDE_CHESS_BUILD");
      *(_DWORD *)(v2 + 2432) = 2003;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9552),
        (const char (*)[41])"OPEN_STATE_GUIDE_CHESS_WIND_TOWER_CIRCLE",
        (data::OpenStateType *)(v2 + 2432));
      if ( *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2448, "OPEN_STATE_GUIDE_CHESS_WIND_TOWER_CIRCLE");
      *(_DWORD *)(v2 + 2448) = 2004;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9592),
        (const char (*)[35])"OPEN_STATE_GUIDE_CHESS_CARD_SELECT",
        (data::OpenStateType *)(v2 + 2448));
      if ( *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2464, "OPEN_STATE_GUIDE_CHESS_CARD_SELECT");
      *(_DWORD *)(v2 + 2464) = 2005;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9632),
        (const char (*)[38])"OPEN_STATE_INAZUMA_MAINQUEST_FINISHED",
        (data::OpenStateType *)(v2 + 2464));
      if ( *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2480, "OPEN_STATE_INAZUMA_MAINQUEST_FINISHED");
      *(_DWORD *)(v2 + 2480) = 2100;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9672),
        (const char (*)[25])"OPEN_STATE_PAIMON_LVINFO",
        (data::OpenStateType *)(v2 + 2480));
      if ( *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2496, "OPEN_STATE_PAIMON_LVINFO");
      *(_DWORD *)(v2 + 2496) = 2101;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9712),
        (const char (*)[24])"OPEN_STATE_TELEPORT_HUD",
        (data::OpenStateType *)(v2 + 2496));
      if ( *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2512, "OPEN_STATE_TELEPORT_HUD");
      *(_DWORD *)(v2 + 2512) = 2102;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9752),
        (const char (*)[28])"OPEN_STATE_GUIDE_MAP_UNLOCK",
        (data::OpenStateType *)(v2 + 2512));
      if ( *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2528, "OPEN_STATE_GUIDE_MAP_UNLOCK");
      *(_DWORD *)(v2 + 2528) = 2103;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9792),
        (const char (*)[31])"OPEN_STATE_GUIDE_PAIMON_LVINFO",
        (data::OpenStateType *)(v2 + 2528));
      if ( *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2544, "OPEN_STATE_GUIDE_PAIMON_LVINFO");
      *(_DWORD *)(v2 + 2544) = 2104;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9832),
        (const char (*)[32])"OPEN_STATE_GUIDE_AMBORTRANSPORT",
        (data::OpenStateType *)(v2 + 2544));
      if ( *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2560, "OPEN_STATE_GUIDE_AMBORTRANSPORT");
      *(_DWORD *)(v2 + 2560) = 2105;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9872),
        (const char (*)[28])"OPEN_STATE_GUIDE_FLY_SECOND",
        (data::OpenStateType *)(v2 + 2560));
      if ( *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2576, "OPEN_STATE_GUIDE_FLY_SECOND");
      *(_DWORD *)(v2 + 2576) = 2106;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9912),
        (const char (*)[28])"OPEN_STATE_GUIDE_KAEYA_CLUE",
        (data::OpenStateType *)(v2 + 2576));
      if ( *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2592, "OPEN_STATE_GUIDE_KAEYA_CLUE");
      *(_DWORD *)(v2 + 2592) = 2107;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9952),
        (const char (*)[25])"OPEN_STATE_CAPTURE_CODEX",
        (data::OpenStateType *)(v2 + 2592));
      if ( *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2608, "OPEN_STATE_CAPTURE_CODEX");
      *(_DWORD *)(v2 + 2608) = 2200;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 9992),
        (const char (*)[30])"OPEN_STATE_ACTIVITY_FISH_OPEN",
        (data::OpenStateType *)(v2 + 2608));
      if ( *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2624, "OPEN_STATE_ACTIVITY_FISH_OPEN");
      *(_DWORD *)(v2 + 2624) = 2201;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10032),
        (const char (*)[31])"OPEN_STATE_ACTIVITY_FISH_CLOSE",
        (data::OpenStateType *)(v2 + 2624));
      if ( *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2640, "OPEN_STATE_ACTIVITY_FISH_CLOSE");
      *(_DWORD *)(v2 + 2640) = 2205;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10072),
        (const char (*)[27])"OPEN_STATE_GUIDE_ROGUE_MAP",
        (data::OpenStateType *)(v2 + 2640));
      if ( *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2656, "OPEN_STATE_GUIDE_ROGUE_MAP");
      *(_DWORD *)(v2 + 2656) = 2206;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10112),
        (const char (*)[28])"OPEN_STATE_GUIDE_ROGUE_RUNE",
        (data::OpenStateType *)(v2 + 2656));
      if ( *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2672, "OPEN_STATE_GUIDE_ROGUE_RUNE");
      *(_DWORD *)(v2 + 2672) = 2210;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10152),
        (const char (*)[35])"OPEN_STATE_GUIDE_BARTENDER_FORMULA",
        (data::OpenStateType *)(v2 + 2672));
      if ( *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2688, "OPEN_STATE_GUIDE_BARTENDER_FORMULA");
      *(_DWORD *)(v2 + 2688) = 2211;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10192),
        (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_MIX",
        (data::OpenStateType *)(v2 + 2688));
      if ( *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2704, "OPEN_STATE_GUIDE_BARTENDER_MIX");
      *(_DWORD *)(v2 + 2704) = 2212;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10232),
        (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_CUP",
        (data::OpenStateType *)(v2 + 2704));
      if ( *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2720, "OPEN_STATE_GUIDE_BARTENDER_CUP");
      *(_DWORD *)(v2 + 2720) = 2400;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10272),
        (const char (*)[32])"OPEN_STATE_GUIDE_MAIL_FAVORITES",
        (data::OpenStateType *)(v2 + 2720));
      if ( *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2736, "OPEN_STATE_GUIDE_MAIL_FAVORITES");
      *(_DWORD *)(v2 + 2736) = 2401;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10312),
        (const char (*)[34])"OPEN_STATE_GUIDE_POTION_CONFIGURE",
        (data::OpenStateType *)(v2 + 2736));
      if ( *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2752, "OPEN_STATE_GUIDE_POTION_CONFIGURE");
      *(_DWORD *)(v2 + 2752) = 2402;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10352),
        (const char (*)[32])"OPEN_STATE_GUIDE_LANV2_FIREWORK",
        (data::OpenStateType *)(v2 + 2752));
      if ( *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2768, "OPEN_STATE_GUIDE_LANV2_FIREWORK");
      *(_DWORD *)(v2 + 2768) = 2403;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10392),
        (const char (*)[34])"OPEN_STATE_LOADINGTIPS_ENKANOMIYA",
        (data::OpenStateType *)(v2 + 2768));
      if ( *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2784, "OPEN_STATE_LOADINGTIPS_ENKANOMIYA");
      *(_DWORD *)(v2 + 2784) = 2500;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10432),
        (const char (*)[26])"OPEN_STATE_MICHIAE_CASKET",
        (data::OpenStateType *)(v2 + 2784));
      if ( *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2800, "OPEN_STATE_MICHIAE_CASKET");
      *(_DWORD *)(v2 + 2800) = 2501;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10472),
        (const char (*)[41])"OPEN_STATE_MAIL_COLLECT_UNLOCK_RED_POINT",
        (data::OpenStateType *)(v2 + 2800));
      if ( *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2816, "OPEN_STATE_MAIL_COLLECT_UNLOCK_RED_POINT");
      *(_DWORD *)(v2 + 2816) = 2600;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10512),
        (const char (*)[23])"OPEN_STATE_LUMEN_STONE",
        (data::OpenStateType *)(v2 + 2816));
      if ( *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2832, "OPEN_STATE_LUMEN_STONE");
      *(_DWORD *)(v2 + 2832) = 2601;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10552),
        (const char (*)[34])"OPEN_STATE_GUIDE_CRYSTALLINK_BUFF",
        (data::OpenStateType *)(v2 + 2832));
      if ( *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2848, "OPEN_STATE_GUIDE_CRYSTALLINK_BUFF");
      *(_DWORD *)(v2 + 2848) = 2700;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10592),
        (const char (*)[31])"OPEN_STATE_GUIDE_MUSIC_GAME_V3",
        (data::OpenStateType *)(v2 + 2848));
      if ( *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2864, "OPEN_STATE_GUIDE_MUSIC_GAME_V3");
      *(_DWORD *)(v2 + 2864) = 2701;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[46],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10632),
        (const char (*)[46])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_REAL_TIME_EDIT",
        (data::OpenStateType *)(v2 + 2864));
      if ( *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2880, "OPEN_STATE_GUIDE_MUSIC_GAME_V3_REAL_TIME_EDIT");
      *(_DWORD *)(v2 + 2880) = 2702;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[45],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10672),
        (const char (*)[45])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_TIMELINE_EDIT",
        (data::OpenStateType *)(v2 + 2880));
      if ( *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2896, "OPEN_STATE_GUIDE_MUSIC_GAME_V3_TIMELINE_EDIT");
      *(_DWORD *)(v2 + 2896) = 2703;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[39],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10712),
        (const char (*)[39])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_SETTING",
        (data::OpenStateType *)(v2 + 2896));
      if ( *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2912, "OPEN_STATE_GUIDE_MUSIC_GAME_V3_SETTING");
      *(_DWORD *)(v2 + 2912) = 2704;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10752),
        (const char (*)[28])"OPEN_STATE_GUIDE_ROBOTGACHA",
        (data::OpenStateType *)(v2 + 2912));
      if ( *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2928, "OPEN_STATE_GUIDE_ROBOTGACHA");
      *(_DWORD *)(v2 + 2928) = 2800;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10792),
        (const char (*)[31])"OPEN_STATE_GUIDE_FRAGILE_RESIN",
        (data::OpenStateType *)(v2 + 2928));
      if ( *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2944, "OPEN_STATE_GUIDE_FRAGILE_RESIN");
      *(_DWORD *)(v2 + 2944) = 2801;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10832),
        (const char (*)[32])"OPEN_ADVENTURE_MANUAL_EDUCATION",
        (data::OpenStateType *)(v2 + 2944));
      if ( *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2960, "OPEN_ADVENTURE_MANUAL_EDUCATION");
      *(_DWORD *)(v2 + 2960) = 3000;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10872),
        (const char (*)[33])"OPEN_STATE_CITY_REPUATION_SUMERU",
        (data::OpenStateType *)(v2 + 2960));
      if ( *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2976, "OPEN_STATE_CITY_REPUATION_SUMERU");
      *(_DWORD *)(v2 + 2976) = 3001;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[20],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10912),
        (const char (*)[20])"OPEN_STATE_VANASARA",
        (data::OpenStateType *)(v2 + 2976));
      if ( *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2992, "OPEN_STATE_VANASARA");
      *(_DWORD *)(v2 + 2992) = 3002;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10952),
        (const char (*)[33])"OPEN_STATE_SUMERU_INFUSEDCRYSTAL",
        (data::OpenStateType *)(v2 + 2992));
      if ( *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3008, "OPEN_STATE_SUMERU_INFUSEDCRYSTAL");
      *(_DWORD *)(v2 + 3008) = 3003;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 10992),
        (const char (*)[40])"OPEN_STATE_LIMIT_REGION_WITHERED_FOREST",
        (data::OpenStateType *)(v2 + 3008));
      if ( *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3024, "OPEN_STATE_LIMIT_REGION_WITHERED_FOREST");
      *(_DWORD *)(v2 + 3024) = 3004;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11032),
        (const char (*)[37])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR",
        (data::OpenStateType *)(v2 + 3024));
      if ( *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3040, "OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR");
      *(_DWORD *)(v2 + 3040) = 3005;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[47],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11072),
        (const char (*)[47])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR_BLACK_BAR",
        (data::OpenStateType *)(v2 + 3040));
      if ( *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3056, "OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR_BLACK_BAR");
      *(_DWORD *)(v2 + 3056) = 3006;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11112),
        (const char (*)[40])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_MUQADAS",
        (data::OpenStateType *)(v2 + 3056));
      if ( *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3072, "OPEN_STATE_GUIDE_ACTIVITY_SKILL_MUQADAS");
      *(_DWORD *)(v2 + 3072) = 3007;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11152),
        (const char (*)[25])"OPEN_STATE_GUIDE_MUQADAS",
        (data::OpenStateType *)(v2 + 3072));
      if ( *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3088, "OPEN_STATE_GUIDE_MUQADAS");
      *(_DWORD *)(v2 + 3088) = 3100;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11192),
        (const char (*)[33])"OPEN_STATE_GUIDE_WINDFIELD_SKILL",
        (data::OpenStateType *)(v2 + 3088));
      if ( *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3104, "OPEN_STATE_GUIDE_WINDFIELD_SKILL");
      *(_DWORD *)(v2 + 3104) = 3101;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11232),
        (const char (*)[40])"OPEN_STATE_GUIDE_VINTAGE_MARKET_UPGRADE",
        (data::OpenStateType *)(v2 + 3104));
      if ( *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3120, "OPEN_STATE_GUIDE_VINTAGE_MARKET_UPGRADE");
      *(_DWORD *)(v2 + 3120) = 3102;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11272),
        (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_SKILL",
        (data::OpenStateType *)(v2 + 3120));
      if ( *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3136, "OPEN_STATE_GUIDE_VINTAGE_MARKET_SKILL");
      *(_DWORD *)(v2 + 3136) = 3103;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11312),
        (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_STAFF",
        (data::OpenStateType *)(v2 + 3136));
      if ( *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3152, "OPEN_STATE_GUIDE_VINTAGE_MARKET_STAFF");
      *(_DWORD *)(v2 + 3152) = 3200;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11352),
        (const char (*)[35])"OPEN_STATE_GCG_RESOURCE_MANAGEMENT",
        (data::OpenStateType *)(v2 + 3152));
      if ( *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3168, "OPEN_STATE_GCG_RESOURCE_MANAGEMENT");
      *(_DWORD *)(v2 + 3168) = 3201;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11392),
        (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_1",
        (data::OpenStateType *)(v2 + 3168));
      if ( *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3184, "OPEN_STATE_GUIDE_FUNGUSFIGHTER_1");
      *(_DWORD *)(v2 + 3184) = 3202;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11432),
        (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_2",
        (data::OpenStateType *)(v2 + 3184));
      if ( *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3200, "OPEN_STATE_GUIDE_FUNGUSFIGHTER_2");
      *(_DWORD *)(v2 + 3200) = 3203;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11472),
        (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_3",
        (data::OpenStateType *)(v2 + 3200));
      if ( *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3216, "OPEN_STATE_GUIDE_FUNGUSFIGHTER_3");
      *(_DWORD *)(v2 + 3216) = 3300;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11512),
        (const char (*)[21])"OPEN_STATE_GCG_LEVEL",
        (data::OpenStateType *)(v2 + 3216));
      if ( *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3232, "OPEN_STATE_GCG_LEVEL");
      *(_DWORD *)(v2 + 3232) = 3301;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11552),
        (const char (*)[22])"OPEN_STATE_GCG_INVITE",
        (data::OpenStateType *)(v2 + 3232));
      if ( *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3248, "OPEN_STATE_GCG_INVITE");
      *(_DWORD *)(v2 + 3248) = 3302;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11592),
        (const char (*)[21])"OPEN_STATE_GCG_MATCH",
        (data::OpenStateType *)(v2 + 3248));
      if ( *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3264, "OPEN_STATE_GCG_MATCH");
      *(_DWORD *)(v2 + 3264) = 3303;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[19],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11632),
        (const char (*)[19])"OPEN_STATE_GCG_PVP",
        (data::OpenStateType *)(v2 + 3264));
      if ( *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3280, "OPEN_STATE_GCG_PVP");
      *(_DWORD *)(v2 + 3280) = 3304;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[20],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11672),
        (const char (*)[20])"OPEN_STATE_GCG_DECK",
        (data::OpenStateType *)(v2 + 3280));
      if ( *(_BYTE *)(((v2 + 3296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3296) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3296, "OPEN_STATE_GCG_DECK");
      *(_DWORD *)(v2 + 3296) = 3305;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11712),
        (const char (*)[22])"OPEN_STATE_GCG_MANUAL",
        (data::OpenStateType *)(v2 + 3296));
      if ( *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3312, "OPEN_STATE_GCG_MANUAL");
      *(_DWORD *)(v2 + 3312) = 3306;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11752),
        (const char (*)[30])"OPEN_STATE_GCG_BOSS_CHALLENGE",
        (data::OpenStateType *)(v2 + 3312));
      if ( *(_BYTE *)(((v2 + 3328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3328, "OPEN_STATE_GCG_BOSS_CHALLENGE");
      *(_DWORD *)(v2 + 3328) = 3307;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11792),
        (const char (*)[31])"OPEN_STATE_GCG_WORLD_CHALLENGE",
        (data::OpenStateType *)(v2 + 3328));
      if ( *(_BYTE *)(((v2 + 3344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3344) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3344, "OPEN_STATE_GCG_WORLD_CHALLENGE");
      *(_DWORD *)(v2 + 3344) = 3308;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11832),
        (const char (*)[30])"OPEN_STATE_GCG_WEEK_CHALLENGE",
        (data::OpenStateType *)(v2 + 3344));
      if ( *(_BYTE *)(((v2 + 3360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3360) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3360, "OPEN_STATE_GCG_WEEK_CHALLENGE");
      *(_DWORD *)(v2 + 3360) = 3309;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11872),
        (const char (*)[36])"OPEN_STATE_GCG_TAVERN_SCENE_BUILDER",
        (data::OpenStateType *)(v2 + 3360));
      if ( *(_BYTE *)(((v2 + 3376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3376) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3376, "OPEN_STATE_GCG_TAVERN_SCENE_BUILDER");
      *(_DWORD *)(v2 + 3376) = 3310;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11912),
        (const char (*)[29])"OPEN_STATE_GCG_SHOP_CARDFACE",
        (data::OpenStateType *)(v2 + 3376));
      if ( *(_BYTE *)(((v2 + 3392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3392) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3392, "OPEN_STATE_GCG_SHOP_CARDFACE");
      *(_DWORD *)(v2 + 3392) = 3311;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11952),
        (const char (*)[27])"OPEN_STATE_GCG_SHOP_SYSTEM",
        (data::OpenStateType *)(v2 + 3392));
      if ( *(_BYTE *)(((v2 + 3408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3408) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3408, "OPEN_STATE_GCG_SHOP_SYSTEM");
      *(_DWORD *)(v2 + 3408) = 3312;
      std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
        (std::pair<const std::string,data::OpenStateType> *const)(v2 + 11992),
        (const char (*)[36])"OPEN_STATE_GUIDE_BRICKBREAKER_SKILL",
        (data::OpenStateType *)(v2 + 3408));
      std::allocator<std::pair<std::string const,data::OpenStateType>>::allocator((std::allocator<std::pair<const std::string,data::OpenStateType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::OpenStateType>::unordered_map(
        &data::enumStrToVal(char const*,data::OpenStateType &)::m,
        (std::initializer_list<std::pair<const std::string,data::OpenStateType> >)__PAIR128__(208LL, v2 + 3712),
        0LL,
        (const std::unordered_map<std::string,data::OpenStateType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::OpenStateType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::OpenStateType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::OpenStateType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::OpenStateType>::~unordered_map,
        &data::enumStrToVal(char const*,data::OpenStateType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::OpenStateType>>::~allocator((std::allocator<std::pair<const std::string,data::OpenStateType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::OpenStateType> *)(v2 + 12032);
            i != (std::pair<const std::string,data::OpenStateType> *)(v2 + 3712);
            std::pair<std::string const,data::OpenStateType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 3712, 8320LL);
      *(_BYTE *)(((v2 + 3408) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3392) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3376) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3360) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3344) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3328) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3296) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 3424) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v7 = *(const char **)(v2 + 3488);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 3584),
      v7,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 3424) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 3424, v7);
    *(std::unordered_map<std::string,data::OpenStateType>::iterator *)(v2 + 3424) = std::unordered_map<std::string,data::OpenStateType>::find(
                                                                                      &data::enumStrToVal(char const*,data::OpenStateType &)::m,
                                                                                      (const std::unordered_map<std::string,data::OpenStateType>::key_type *)(v2 + 3584));
    std::string::~string((void *)(v2 + 3584));
    *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 3456) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 3456) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 3456, v2 + 3584);
    *(std::unordered_map<std::string,data::OpenStateType>::iterator *)(v2 + 3456) = std::unordered_map<std::string,data::OpenStateType>::end(&data::enumStrToVal(char const*,data::OpenStateType &)::m);
    v8 = (char *)(v2 + 3456);
    v9 = std::__detail::operator==<std::pair<std::string const,data::OpenStateType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::OpenStateType>,true> *)(v2 + 3424),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::OpenStateType>,true> *)(v2 + 3456));
    *(_BYTE *)(((v2 + 3456) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 3648) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 3679) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 3679) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 3648, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 3648),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        4322);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 3648),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 3488));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3648));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::OpenStateType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::OpenStateType>,false,true> *const)(v2 + 3424));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 3520) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 3551) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 64 + 31) & 7) >= *(_BYTE *)(((v2 + 3551) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 3520, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 3520),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      4103);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 3520),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3520));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81B0) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 440) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF81BC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81C4) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81CC) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF85F8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862837) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147451340 - (((_DWORD)v4 + 2147451348) & 0xFFFFFFF8) + 1076) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_8(v2, 12288LL, v17);
  }
  return v14;
};

// Line 4331: range 000000000FAA35C5-000000000FAA35DB
const char *__cdecl data::getDescription(data::OpenStateType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 4336: range 000000000FAA35DC-000000000FAA3791
bool __cdecl data::isValidOpenStateType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::OpenStateType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::OpenStateType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:4337 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidOpenStateType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getOpenStateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::OpenStateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::OpenStateType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getOpenStateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::OpenStateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::OpenStateType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::OpenStateType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4342: range 000000000FAA3792-000000000FAA38F3
bool __cdecl data::isValidOpenStateTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::OpenStateType> *v5; // rcx
  const std::unordered_map<std::string,data::OpenStateType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidOpenStateTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getOpenStateTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::OpenStateType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::OpenStateType>::end(v5);
  v6 = data::getOpenStateTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::OpenStateType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::OpenStateType>::find(
                                                                                        v6,
                                                                                        name);
  result = std::__detail::operator!=<std::pair<std::string const,data::OpenStateType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::OpenStateType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::OpenStateType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4347: range 000000000FAA38F4-000000000FAAA4E1
const std::unordered_map<std::string,data::OpenStateType> *__cdecl data::getOpenStateTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::OpenStateType> *i; // r14
  char v6[12112]; // [rsp+10h] [rbp-2F50h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_8(12064LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "213 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 "
                        "9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unk"
                        "nown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> "
                        "304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 "
                        "9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unk"
                        "nown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> "
                        "560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 "
                        "9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unk"
                        "nown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> "
                        "816 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9 <unknown> 896 4 "
                        "9 <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unknown> 976 4 9 <unk"
                        "nown> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 4 9 <unknown> 1056 4 9 <unkno"
                        "wn> 1072 4 9 <unknown> 1088 4 9 <unknown> 1104 4 9 <unknown> 1120 4 9 <unknown> 1136 4 9 <unknow"
                        "n> 1152 4 9 <unknown> 1168 4 9 <unknown> 1184 4 9 <unknown> 1200 4 9 <unknown> 1216 4 9 <unknown"
                        "> 1232 4 9 <unknown> 1248 4 9 <unknown> 1264 4 9 <unknown> 1280 4 9 <unknown> 1296 4 9 <unknown>"
                        " 1312 4 9 <unknown> 1328 4 9 <unknown> 1344 4 9 <unknown> 1360 4 9 <unknown> 1376 4 9 <unknown> "
                        "1392 4 9 <unknown> 1408 4 9 <unknown> 1424 4 9 <unknown> 1440 4 9 <unknown> 1456 4 9 <unknown> 1"
                        "472 4 9 <unknown> 1488 4 9 <unknown> 1504 4 9 <unknown> 1520 4 9 <unknown> 1536 4 9 <unknown> 15"
                        "52 4 9 <unknown> 1568 4 9 <unknown> 1584 4 9 <unknown> 1600 4 9 <unknown> 1616 4 9 <unknown> 163"
                        "2 4 9 <unknown> 1648 4 9 <unknown> 1664 4 9 <unknown> 1680 4 9 <unknown> 1696 4 9 <unknown> 1712"
                        " 4 9 <unknown> 1728 4 9 <unknown> 1744 4 9 <unknown> 1760 4 9 <unknown> 1776 4 9 <unknown> 1792 "
                        "4 9 <unknown> 1808 4 9 <unknown> 1824 4 9 <unknown> 1840 4 9 <unknown> 1856 4 9 <unknown> 1872 4"
                        " 9 <unknown> 1888 4 9 <unknown> 1904 4 9 <unknown> 1920 4 9 <unknown> 1936 4 9 <unknown> 1952 4 "
                        "9 <unknown> 1968 4 9 <unknown> 1984 4 9 <unknown> 2000 4 9 <unknown> 2016 4 9 <unknown> 2032 4 9"
                        " <unknown> 2048 4 9 <unknown> 2064 4 9 <unknown> 2080 4 9 <unknown> 2096 4 9 <unknown> 2112 4 9 "
                        "<unknown> 2128 4 9 <unknown> 2144 4 9 <unknown> 2160 4 9 <unknown> 2176 4 9 <unknown> 2192 4 9 <"
                        "unknown> 2208 4 9 <unknown> 2224 4 9 <unknown> 2240 4 9 <unknown> 2256 4 9 <unknown> 2272 4 9 <u"
                        "nknown> 2288 4 9 <unknown> 2304 4 9 <unknown> 2320 4 9 <unknown> 2336 4 9 <unknown> 2352 4 9 <un"
                        "known> 2368 4 9 <unknown> 2384 4 9 <unknown> 2400 4 9 <unknown> 2416 4 9 <unknown> 2432 4 9 <unk"
                        "nown> 2448 4 9 <unknown> 2464 4 9 <unknown> 2480 4 9 <unknown> 2496 4 9 <unknown> 2512 4 9 <unkn"
                        "own> 2528 4 9 <unknown> 2544 4 9 <unknown> 2560 4 9 <unknown> 2576 4 9 <unknown> 2592 4 9 <unkno"
                        "wn> 2608 4 9 <unknown> 2624 4 9 <unknown> 2640 4 9 <unknown> 2656 4 9 <unknown> 2672 4 9 <unknow"
                        "n> 2688 4 9 <unknown> 2704 4 9 <unknown> 2720 4 9 <unknown> 2736 4 9 <unknown> 2752 4 9 <unknown"
                        "> 2768 4 9 <unknown> 2784 4 9 <unknown> 2800 4 9 <unknown> 2816 4 9 <unknown> 2832 4 9 <unknown>"
                        " 2848 4 9 <unknown> 2864 4 9 <unknown> 2880 4 9 <unknown> 2896 4 9 <unknown> 2912 4 9 <unknown> "
                        "2928 4 9 <unknown> 2944 4 9 <unknown> 2960 4 9 <unknown> 2976 4 9 <unknown> 2992 4 9 <unknown> 3"
                        "008 4 9 <unknown> 3024 4 9 <unknown> 3040 4 9 <unknown> 3056 4 9 <unknown> 3072 4 9 <unknown> 30"
                        "88 4 9 <unknown> 3104 4 9 <unknown> 3120 4 9 <unknown> 3136 4 9 <unknown> 3152 4 9 <unknown> 316"
                        "8 4 9 <unknown> 3184 4 9 <unknown> 3200 4 9 <unknown> 3216 4 9 <unknown> 3232 4 9 <unknown> 3248"
                        " 4 9 <unknown> 3264 4 9 <unknown> 3280 4 9 <unknown> 3296 4 9 <unknown> 3312 4 9 <unknown> 3328 "
                        "4 9 <unknown> 3344 4 9 <unknown> 3360 4 9 <unknown> 3376 4 9 <unknown> 3392 4 9 <unknown> 3408 4"
                        " 9 <unknown> 3424 4 9 <unknown> 3440 8360 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getOpenStateTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = -234556924;
  v3[536862754] = -234556924;
  v3[536862755] = -234556924;
  v3[536862756] = -234556924;
  v3[536862757] = -234556924;
  v3[536862758] = -234556924;
  v3[536862759] = -234556924;
  v3[536862760] = -234556924;
  v3[536862761] = -234556924;
  v3[536862762] = -234556924;
  v3[536862763] = -234556924;
  v3[536862764] = -234556924;
  v3[536862765] = -234556924;
  v3[536862766] = -234556924;
  v3[536862767] = -234556924;
  v3[536862768] = -234556924;
  v3[536862769] = -234556924;
  v3[536862770] = -234556924;
  v3[536862771] = -234556924;
  v3[536862772] = -234556924;
  v3[536862773] = -234556924;
  v3[536862774] = -234556924;
  v3[536862775] = -234556924;
  v3[536862776] = -234556924;
  v3[536862777] = -234556924;
  v3[536862778] = -234556924;
  v3[536862779] = -234556924;
  v3[536862780] = -234556924;
  v3[536862781] = -234556924;
  v3[536862782] = -234556924;
  v3[536862783] = -234556924;
  v3[536862784] = -234556924;
  v3[536862785] = -234556924;
  v3[536862786] = -234556924;
  v3[536862787] = -234556924;
  v3[536862788] = -234556924;
  v3[536862789] = -234556924;
  v3[536862790] = -234556924;
  v3[536862791] = -234556924;
  v3[536862792] = -234556924;
  v3[536862793] = -234556924;
  v3[536862794] = -234556924;
  v3[536862795] = -234556924;
  v3[536862796] = -234556924;
  v3[536862797] = -234556924;
  v3[536862798] = -234556924;
  v3[536862799] = -234556924;
  v3[536862800] = -234556924;
  v3[536862801] = -234556924;
  v3[536862802] = -234556924;
  v3[536862803] = -234556924;
  v3[536862804] = -234556924;
  v3[536862805] = -234556924;
  v3[536862806] = -234556924;
  v3[536862807] = -234556924;
  v3[536862808] = -234556924;
  v3[536862809] = -234556924;
  v3[536862810] = -234556924;
  v3[536862811] = -234556924;
  v3[536862812] = -234556924;
  v3[536862813] = -234556924;
  v3[536862814] = -234556924;
  v3[536862815] = -234556924;
  v3[536862816] = -234556924;
  v3[536862817] = -234556924;
  v3[536862818] = -234556924;
  v3[536862819] = -234556924;
  v3[536862820] = -234556924;
  v3[536862821] = -234556924;
  v3[536862822] = -234556924;
  v3[536862823] = -234556924;
  v3[536862824] = -234556924;
  v3[536862825] = -234556924;
  v3[536862826] = -234556924;
  v3[536862827] = 61956;
  v3[536863088] = -218103808;
  v3[536863089] = -202116109;
  v3[536863090] = -202116109;
  v3[536863091] = -202116109;
  v3[536863092] = -202116109;
  v3[536863093] = -202116109;
  v3[536863094] = -202116109;
  v3[536863095] = -202116109;
  v3[536863096] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getOpenStateTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getOpenStateTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[16],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3440),
      (const char (*)[16])"OPEN_STATE_NONE",
      (data::OpenStateType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "OPEN_STATE_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[18],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3480),
      (const char (*)[18])"OPEN_STATE_PAIMON",
      (data::OpenStateType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "OPEN_STATE_PAIMON");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3520),
      (const char (*)[29])"OPEN_STATE_PAIMON_NAVIGATION",
      (data::OpenStateType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "OPEN_STATE_PAIMON_NAVIGATION");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3560),
      (const char (*)[26])"OPEN_STATE_AVATAR_PROMOTE",
      (data::OpenStateType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "OPEN_STATE_AVATAR_PROMOTE");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3600),
      (const char (*)[25])"OPEN_STATE_AVATAR_TALENT",
      (data::OpenStateType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "OPEN_STATE_AVATAR_TALENT");
    *(_DWORD *)(v1 + 176) = 5;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3640),
      (const char (*)[26])"OPEN_STATE_WEAPON_PROMOTE",
      (data::OpenStateType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "OPEN_STATE_WEAPON_PROMOTE");
    *(_DWORD *)(v1 + 192) = 6;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3680),
      (const char (*)[25])"OPEN_STATE_WEAPON_AWAKEN",
      (data::OpenStateType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "OPEN_STATE_WEAPON_AWAKEN");
    *(_DWORD *)(v1 + 208) = 7;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3720),
      (const char (*)[24])"OPEN_STATE_QUEST_REMIND",
      (data::OpenStateType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "OPEN_STATE_QUEST_REMIND");
    *(_DWORD *)(v1 + 224) = 8;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3760),
      (const char (*)[22])"OPEN_STATE_GAME_GUIDE",
      (data::OpenStateType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "OPEN_STATE_GAME_GUIDE");
    *(_DWORD *)(v1 + 240) = 9;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[16],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3800),
      (const char (*)[16])"OPEN_STATE_COOK",
      (data::OpenStateType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "OPEN_STATE_COOK");
    *(_DWORD *)(v1 + 256) = 10;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3840),
      (const char (*)[26])"OPEN_STATE_WEAPON_UPGRADE",
      (data::OpenStateType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "OPEN_STATE_WEAPON_UPGRADE");
    *(_DWORD *)(v1 + 272) = 11;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3880),
      (const char (*)[29])"OPEN_STATE_RELIQUARY_UPGRADE",
      (data::OpenStateType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "OPEN_STATE_RELIQUARY_UPGRADE");
    *(_DWORD *)(v1 + 288) = 12;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3920),
      (const char (*)[29])"OPEN_STATE_RELIQUARY_PROMOTE",
      (data::OpenStateType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "OPEN_STATE_RELIQUARY_PROMOTE");
    *(_DWORD *)(v1 + 304) = 13;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 3960),
      (const char (*)[32])"OPEN_STATE_WEAPON_PROMOTE_GUIDE",
      (data::OpenStateType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "OPEN_STATE_WEAPON_PROMOTE_GUIDE");
    *(_DWORD *)(v1 + 320) = 14;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4000),
      (const char (*)[31])"OPEN_STATE_WEAPON_CHANGE_GUIDE",
      (data::OpenStateType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "OPEN_STATE_WEAPON_CHANGE_GUIDE");
    *(_DWORD *)(v1 + 336) = 15;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4040),
      (const char (*)[29])"OPEN_STATE_PLAYER_LVUP_GUIDE",
      (data::OpenStateType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "OPEN_STATE_PLAYER_LVUP_GUIDE");
    *(_DWORD *)(v1 + 352) = 16;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4080),
      (const char (*)[26])"OPEN_STATE_FRESHMAN_GUIDE",
      (data::OpenStateType *)(v1 + 352));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, "OPEN_STATE_FRESHMAN_GUIDE");
    *(_DWORD *)(v1 + 368) = 17;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4120),
      (const char (*)[31])"OPEN_STATE_SKIP_FRESHMAN_GUIDE",
      (data::OpenStateType *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, "OPEN_STATE_SKIP_FRESHMAN_GUIDE");
    *(_DWORD *)(v1 + 384) = 18;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4160),
      (const char (*)[29])"OPEN_STATE_GUIDE_MOVE_CAMERA",
      (data::OpenStateType *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, "OPEN_STATE_GUIDE_MOVE_CAMERA");
    *(_DWORD *)(v1 + 400) = 19;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4200),
      (const char (*)[30])"OPEN_STATE_GUIDE_SCALE_CAMERA",
      (data::OpenStateType *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, "OPEN_STATE_GUIDE_SCALE_CAMERA");
    *(_DWORD *)(v1 + 416) = 20;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4240),
      (const char (*)[26])"OPEN_STATE_GUIDE_KEYBOARD",
      (data::OpenStateType *)(v1 + 416));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, "OPEN_STATE_GUIDE_KEYBOARD");
    *(_DWORD *)(v1 + 432) = 21;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4280),
      (const char (*)[22])"OPEN_STATE_GUIDE_MOVE",
      (data::OpenStateType *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, "OPEN_STATE_GUIDE_MOVE");
    *(_DWORD *)(v1 + 448) = 22;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4320),
      (const char (*)[22])"OPEN_STATE_GUIDE_JUMP",
      (data::OpenStateType *)(v1 + 448));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, "OPEN_STATE_GUIDE_JUMP");
    *(_DWORD *)(v1 + 464) = 23;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4360),
      (const char (*)[24])"OPEN_STATE_GUIDE_SPRINT",
      (data::OpenStateType *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, "OPEN_STATE_GUIDE_SPRINT");
    *(_DWORD *)(v1 + 480) = 24;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4400),
      (const char (*)[21])"OPEN_STATE_GUIDE_MAP",
      (data::OpenStateType *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, "OPEN_STATE_GUIDE_MAP");
    *(_DWORD *)(v1 + 496) = 25;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4440),
      (const char (*)[24])"OPEN_STATE_GUIDE_ATTACK",
      (data::OpenStateType *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, "OPEN_STATE_GUIDE_ATTACK");
    *(_DWORD *)(v1 + 512) = 26;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4480),
      (const char (*)[21])"OPEN_STATE_GUIDE_FLY",
      (data::OpenStateType *)(v1 + 512));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, "OPEN_STATE_GUIDE_FLY");
    *(_DWORD *)(v1 + 528) = 27;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4520),
      (const char (*)[24])"OPEN_STATE_GUIDE_TALENT",
      (data::OpenStateType *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, "OPEN_STATE_GUIDE_TALENT");
    *(_DWORD *)(v1 + 544) = 28;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4560),
      (const char (*)[23])"OPEN_STATE_GUIDE_RELIC",
      (data::OpenStateType *)(v1 + 544));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, "OPEN_STATE_GUIDE_RELIC");
    *(_DWORD *)(v1 + 560) = 29;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4600),
      (const char (*)[28])"OPEN_STATE_GUIDE_RELIC_PROM",
      (data::OpenStateType *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, "OPEN_STATE_GUIDE_RELIC_PROM");
    *(_DWORD *)(v1 + 576) = 30;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[19],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4640),
      (const char (*)[19])"OPEN_STATE_COMBINE",
      (data::OpenStateType *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, "OPEN_STATE_COMBINE");
    *(_DWORD *)(v1 + 592) = 31;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4680),
      (const char (*)[17])"OPEN_STATE_GACHA",
      (data::OpenStateType *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, "OPEN_STATE_GACHA");
    *(_DWORD *)(v1 + 608) = 32;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4720),
      (const char (*)[23])"OPEN_STATE_GUIDE_GACHA",
      (data::OpenStateType *)(v1 + 608));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, "OPEN_STATE_GUIDE_GACHA");
    *(_DWORD *)(v1 + 624) = 33;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4760),
      (const char (*)[22])"OPEN_STATE_GUIDE_TEAM",
      (data::OpenStateType *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, "OPEN_STATE_GUIDE_TEAM");
    *(_DWORD *)(v1 + 640) = 34;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4800),
      (const char (*)[23])"OPEN_STATE_GUIDE_PROUD",
      (data::OpenStateType *)(v1 + 640));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, "OPEN_STATE_GUIDE_PROUD");
    *(_DWORD *)(v1 + 656) = 35;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4840),
      (const char (*)[32])"OPEN_STATE_GUIDE_AVATAR_PROMOTE",
      (data::OpenStateType *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, "OPEN_STATE_GUIDE_AVATAR_PROMOTE");
    *(_DWORD *)(v1 + 672) = 36;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4880),
      (const char (*)[32])"OPEN_STATE_GUIDE_ADVENTURE_CARD",
      (data::OpenStateType *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, "OPEN_STATE_GUIDE_ADVENTURE_CARD");
    *(_DWORD *)(v1 + 688) = 37;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4920),
      (const char (*)[17])"OPEN_STATE_FORGE",
      (data::OpenStateType *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, "OPEN_STATE_FORGE");
    *(_DWORD *)(v1 + 704) = 38;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 4960),
      (const char (*)[21])"OPEN_STATE_GUIDE_BAG",
      (data::OpenStateType *)(v1 + 704));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, "OPEN_STATE_GUIDE_BAG");
    *(_DWORD *)(v1 + 720) = 39;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5000),
      (const char (*)[22])"OPEN_STATE_EXPEDITION",
      (data::OpenStateType *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, "OPEN_STATE_EXPEDITION");
    *(_DWORD *)(v1 + 736) = 40;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5040),
      (const char (*)[37])"OPEN_STATE_GUIDE_ADVENTURE_DAILYTASK",
      (data::OpenStateType *)(v1 + 736));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, "OPEN_STATE_GUIDE_ADVENTURE_DAILYTASK");
    *(_DWORD *)(v1 + 752) = 41;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5080),
      (const char (*)[35])"OPEN_STATE_GUIDE_ADVENTURE_DUNGEON",
      (data::OpenStateType *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, "OPEN_STATE_GUIDE_ADVENTURE_DUNGEON");
    *(_DWORD *)(v1 + 768) = 42;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5120),
      (const char (*)[17])"OPEN_STATE_TOWER",
      (data::OpenStateType *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, "OPEN_STATE_TOWER");
    *(_DWORD *)(v1 + 784) = 43;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5160),
      (const char (*)[25])"OPEN_STATE_WORLD_STAMINA",
      (data::OpenStateType *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, "OPEN_STATE_WORLD_STAMINA");
    *(_DWORD *)(v1 + 800) = 44;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5200),
      (const char (*)[29])"OPEN_STATE_TOWER_FIRST_ENTER",
      (data::OpenStateType *)(v1 + 800));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, "OPEN_STATE_TOWER_FIRST_ENTER");
    *(_DWORD *)(v1 + 816) = 45;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[17],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5240),
      (const char (*)[17])"OPEN_STATE_RESIN",
      (data::OpenStateType *)(v1 + 816));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, "OPEN_STATE_RESIN");
    *(_DWORD *)(v1 + 832) = 47;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5280),
      (const char (*)[34])"OPEN_STATE_LIMIT_REGION_FRESHMEAT",
      (data::OpenStateType *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, "OPEN_STATE_LIMIT_REGION_FRESHMEAT");
    *(_DWORD *)(v1 + 848) = 48;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5320),
      (const char (*)[31])"OPEN_STATE_LIMIT_REGION_GLOBAL",
      (data::OpenStateType *)(v1 + 848));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, "OPEN_STATE_LIMIT_REGION_GLOBAL");
    *(_DWORD *)(v1 + 864) = 49;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5360),
      (const char (*)[23])"OPEN_STATE_MULTIPLAYER",
      (data::OpenStateType *)(v1 + 864));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, "OPEN_STATE_MULTIPLAYER");
    *(_DWORD *)(v1 + 880) = 50;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5400),
      (const char (*)[25])"OPEN_STATE_GUIDE_MOUSEPC",
      (data::OpenStateType *)(v1 + 880));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, "OPEN_STATE_GUIDE_MOUSEPC");
    *(_DWORD *)(v1 + 896) = 51;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5440),
      (const char (*)[29])"OPEN_STATE_GUIDE_MULTIPLAYER",
      (data::OpenStateType *)(v1 + 896));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, "OPEN_STATE_GUIDE_MULTIPLAYER");
    *(_DWORD *)(v1 + 912) = 52;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5480),
      (const char (*)[31])"OPEN_STATE_GUIDE_DUNGEONREWARD",
      (data::OpenStateType *)(v1 + 912));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, "OPEN_STATE_GUIDE_DUNGEONREWARD");
    *(_DWORD *)(v1 + 928) = 53;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5520),
      (const char (*)[25])"OPEN_STATE_GUIDE_BLOSSOM",
      (data::OpenStateType *)(v1 + 928));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, "OPEN_STATE_GUIDE_BLOSSOM");
    *(_DWORD *)(v1 + 944) = 54;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5560),
      (const char (*)[26])"OPEN_STATE_AVATAR_FASHION",
      (data::OpenStateType *)(v1 + 944));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, "OPEN_STATE_AVATAR_FASHION");
    *(_DWORD *)(v1 + 960) = 55;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5600),
      (const char (*)[22])"OPEN_STATE_PHOTOGRAPH",
      (data::OpenStateType *)(v1 + 960));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, "OPEN_STATE_PHOTOGRAPH");
    *(_DWORD *)(v1 + 976) = 56;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5640),
      (const char (*)[26])"OPEN_STATE_GUIDE_KSLQUEST",
      (data::OpenStateType *)(v1 + 976));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, "OPEN_STATE_GUIDE_KSLQUEST");
    *(_DWORD *)(v1 + 992) = 57;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5680),
      (const char (*)[25])"OPEN_STATE_PERSONAL_LINE",
      (data::OpenStateType *)(v1 + 992));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, "OPEN_STATE_PERSONAL_LINE");
    *(_DWORD *)(v1 + 1008) = 58;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5720),
      (const char (*)[31])"OPEN_STATE_GUIDE_PERSONAL_LINE",
      (data::OpenStateType *)(v1 + 1008));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, "OPEN_STATE_GUIDE_PERSONAL_LINE");
    *(_DWORD *)(v1 + 1024) = 59;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5760),
      (const char (*)[28])"OPEN_STATE_GUIDE_APPEARANCE",
      (data::OpenStateType *)(v1 + 1024));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, "OPEN_STATE_GUIDE_APPEARANCE");
    *(_DWORD *)(v1 + 1040) = 60;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5800),
      (const char (*)[25])"OPEN_STATE_GUIDE_PROCESS",
      (data::OpenStateType *)(v1 + 1040));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, "OPEN_STATE_GUIDE_PROCESS");
    *(_DWORD *)(v1 + 1056) = 61;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5840),
      (const char (*)[35])"OPEN_STATE_GUIDE_PERSONAL_LINE_KEY",
      (data::OpenStateType *)(v1 + 1056));
    if ( *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1072, "OPEN_STATE_GUIDE_PERSONAL_LINE_KEY");
    *(_DWORD *)(v1 + 1072) = 62;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5880),
      (const char (*)[24])"OPEN_STATE_GUIDE_WIDGET",
      (data::OpenStateType *)(v1 + 1072));
    if ( *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1088, "OPEN_STATE_GUIDE_WIDGET");
    *(_DWORD *)(v1 + 1088) = 63;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5920),
      (const char (*)[38])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_ASTER",
      (data::OpenStateType *)(v1 + 1088));
    if ( *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1104, "OPEN_STATE_GUIDE_ACTIVITY_SKILL_ASTER");
    *(_DWORD *)(v1 + 1104) = 64;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 5960),
      (const char (*)[29])"OPEN_STATE_GUIDE_COLDCLIMATE",
      (data::OpenStateType *)(v1 + 1104));
    if ( *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1120, "OPEN_STATE_GUIDE_COLDCLIMATE");
    *(_DWORD *)(v1 + 1120) = 65;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6000),
      (const char (*)[27])"OPEN_STATE_DERIVATIVE_MALL",
      (data::OpenStateType *)(v1 + 1120));
    if ( *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1136, "OPEN_STATE_DERIVATIVE_MALL");
    *(_DWORD *)(v1 + 1136) = 66;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6040),
      (const char (*)[33])"OPEN_STATE_GUIDE_EXITMULTIPLAYER",
      (data::OpenStateType *)(v1 + 1136));
    if ( *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1152, "OPEN_STATE_GUIDE_EXITMULTIPLAYER");
    *(_DWORD *)(v1 + 1152) = 67;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6080),
      (const char (*)[41])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD",
      (data::OpenStateType *)(v1 + 1152));
    if ( *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1168, "OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD");
    *(_DWORD *)(v1 + 1168) = 68;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[43],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6120),
      (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_REBUILD",
      (data::OpenStateType *)(v1 + 1168));
    if ( *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1184, "OPEN_STATE_GUIDE_THEATREMACHANICUS_REBUILD");
    *(_DWORD *)(v1 + 1184) = 69;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6160),
      (const char (*)[40])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CARD",
      (data::OpenStateType *)(v1 + 1184));
    if ( *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1200, "OPEN_STATE_GUIDE_THEATREMACHANICUS_CARD");
    *(_DWORD *)(v1 + 1200) = 70;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[43],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6200),
      (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MONSTER",
      (data::OpenStateType *)(v1 + 1200));
    if ( *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1216, "OPEN_STATE_GUIDE_THEATREMACHANICUS_MONSTER");
    *(_DWORD *)(v1 + 1216) = 71;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[49],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6240),
      (const char (*)[49])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MISSION_CHECK",
      (data::OpenStateType *)(v1 + 1216));
    if ( *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1232, "OPEN_STATE_GUIDE_THEATREMACHANICUS_MISSION_CHECK");
    *(_DWORD *)(v1 + 1232) = 72;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[48],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6280),
      (const char (*)[48])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD_SELECT",
      (data::OpenStateType *)(v1 + 1232));
    if ( *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1248, "OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD_SELECT");
    *(_DWORD *)(v1 + 1248) = 73;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[51],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6320),
      (const char (*)[51])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CHALLENGE_START",
      (data::OpenStateType *)(v1 + 1248));
    if ( *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1264, "OPEN_STATE_GUIDE_THEATREMACHANICUS_CHALLENGE_START");
    *(_DWORD *)(v1 + 1264) = 74;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6360),
      (const char (*)[25])"OPEN_STATE_GUIDE_CONVERT",
      (data::OpenStateType *)(v1 + 1264));
    if ( *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1280, "OPEN_STATE_GUIDE_CONVERT");
    *(_DWORD *)(v1 + 1280) = 75;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[47],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6400),
      (const char (*)[47])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MULTIPLAYER",
      (data::OpenStateType *)(v1 + 1280));
    if ( *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1296, "OPEN_STATE_GUIDE_THEATREMACHANICUS_MULTIPLAYER");
    *(_DWORD *)(v1 + 1296) = 76;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6440),
      (const char (*)[27])"OPEN_STATE_GUIDE_COOP_TASK",
      (data::OpenStateType *)(v1 + 1296));
    if ( *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1312, "OPEN_STATE_GUIDE_COOP_TASK");
    *(_DWORD *)(v1 + 1312) = 77;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[39],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6480),
      (const char (*)[39])"OPEN_STATE_GUIDE_HOMEWORLD_ADEPTIABODE",
      (data::OpenStateType *)(v1 + 1312));
    if ( *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1328, "OPEN_STATE_GUIDE_HOMEWORLD_ADEPTIABODE");
    *(_DWORD *)(v1 + 1328) = 78;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6520),
      (const char (*)[34])"OPEN_STATE_GUIDE_HOMEWORLD_DEPLOY",
      (data::OpenStateType *)(v1 + 1328));
    if ( *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1344, "OPEN_STATE_GUIDE_HOMEWORLD_DEPLOY");
    *(_DWORD *)(v1 + 1344) = 79;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6560),
      (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP",
      (data::OpenStateType *)(v1 + 1344));
    if ( *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1360, "OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP");
    *(_DWORD *)(v1 + 1360) = 80;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[44],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6600),
      (const char (*)[44])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION",
      (data::OpenStateType *)(v1 + 1360));
    if ( *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1376, "OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION");
    *(_DWORD *)(v1 + 1376) = 81;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6640),
      (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER",
      (data::OpenStateType *)(v1 + 1376));
    if ( *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1392, "OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER");
    *(_DWORD *)(v1 + 1392) = 82;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6680),
      (const char (*)[35])"OPEN_STATE_GUIDE_HIDEANDSEEK_SKILL",
      (data::OpenStateType *)(v1 + 1392));
    if ( *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1408, "OPEN_STATE_GUIDE_HIDEANDSEEK_SKILL");
    *(_DWORD *)(v1 + 1408) = 83;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6720),
      (const char (*)[35])"OPEN_STATE_GUIDE_HOMEWORLD_MAPLIST",
      (data::OpenStateType *)(v1 + 1408));
    if ( *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1424, "OPEN_STATE_GUIDE_HOMEWORLD_MAPLIST");
    *(_DWORD *)(v1 + 1424) = 84;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6760),
      (const char (*)[30])"OPEN_STATE_GUIDE_RELICRESOLVE",
      (data::OpenStateType *)(v1 + 1424));
    if ( *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1440, "OPEN_STATE_GUIDE_RELICRESOLVE");
    *(_DWORD *)(v1 + 1440) = 85;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6800),
      (const char (*)[24])"OPEN_STATE_GUIDE_GGUIDE",
      (data::OpenStateType *)(v1 + 1440));
    if ( *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1456, "OPEN_STATE_GUIDE_GGUIDE");
    *(_DWORD *)(v1 + 1456) = 86;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6840),
      (const char (*)[29])"OPEN_STATE_GUIDE_GGUIDE_HINT",
      (data::OpenStateType *)(v1 + 1456));
    if ( *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1472, "OPEN_STATE_GUIDE_GGUIDE_HINT");
    *(_DWORD *)(v1 + 1472) = 87;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6880),
      (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP_V2",
      (data::OpenStateType *)(v1 + 1472));
    if ( *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1488, "OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP_V2");
    *(_DWORD *)(v1 + 1488) = 88;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[47],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6920),
      (const char (*)[47])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION_V2",
      (data::OpenStateType *)(v1 + 1488));
    if ( *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1504, "OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION_V2");
    *(_DWORD *)(v1 + 1504) = 89;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 6960),
      (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER_V2",
      (data::OpenStateType *)(v1 + 1504));
    if ( *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1520, "OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER_V2");
    *(_DWORD *)(v1 + 1520) = 90;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7000),
      (const char (*)[40])"OPEN_STATE_GUIDE_QUICK_TEAMMEMBERCHANGE",
      (data::OpenStateType *)(v1 + 1520));
    if ( *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1536, "OPEN_STATE_GUIDE_QUICK_TEAMMEMBERCHANGE");
    *(_DWORD *)(v1 + 1536) = 91;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7040),
      (const char (*)[28])"OPEN_STATE_GGUIDE_FIRSTSHOW",
      (data::OpenStateType *)(v1 + 1536));
    if ( *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1552, "OPEN_STATE_GGUIDE_FIRSTSHOW");
    *(_DWORD *)(v1 + 1552) = 92;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[43],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7080),
      (const char (*)[43])"OPEN_STATE_GGUIDE_MAINPAGE_ENTRY_DISAPPEAR",
      (data::OpenStateType *)(v1 + 1552));
    if ( *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1568, "OPEN_STATE_GGUIDE_MAINPAGE_ENTRY_DISAPPEAR");
    *(_DWORD *)(v1 + 1568) = 800;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7120),
      (const char (*)[33])"OPEN_STATE_CITY_REPUATION_MENGDE",
      (data::OpenStateType *)(v1 + 1568));
    if ( *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1584, "OPEN_STATE_CITY_REPUATION_MENGDE");
    *(_DWORD *)(v1 + 1584) = 801;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7160),
      (const char (*)[32])"OPEN_STATE_CITY_REPUATION_LIYUE",
      (data::OpenStateType *)(v1 + 1584));
    if ( *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1600, "OPEN_STATE_CITY_REPUATION_LIYUE");
    *(_DWORD *)(v1 + 1600) = 802;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7200),
      (const char (*)[34])"OPEN_STATE_CITY_REPUATION_UI_HINT",
      (data::OpenStateType *)(v1 + 1600));
    if ( *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1616, "OPEN_STATE_CITY_REPUATION_UI_HINT");
    *(_DWORD *)(v1 + 1616) = 803;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7240),
      (const char (*)[34])"OPEN_STATE_CITY_REPUATION_INAZUMA",
      (data::OpenStateType *)(v1 + 1616));
    if ( *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1632, "OPEN_STATE_CITY_REPUATION_INAZUMA");
    *(_DWORD *)(v1 + 1632) = 900;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7280),
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_MALL",
      (data::OpenStateType *)(v1 + 1632));
    if ( *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1648, "OPEN_STATE_SHOP_TYPE_MALL");
    *(_DWORD *)(v1 + 1648) = 901;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7320),
      (const char (*)[33])"OPEN_STATE_SHOP_TYPE_RECOMMANDED",
      (data::OpenStateType *)(v1 + 1648));
    if ( *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1664, "OPEN_STATE_SHOP_TYPE_RECOMMANDED");
    *(_DWORD *)(v1 + 1664) = 902;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7360),
      (const char (*)[36])"OPEN_STATE_SHOP_TYPE_GENESISCRYSTAL",
      (data::OpenStateType *)(v1 + 1664));
    if ( *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1680, "OPEN_STATE_SHOP_TYPE_GENESISCRYSTAL");
    *(_DWORD *)(v1 + 1680) = 903;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7400),
      (const char (*)[33])"OPEN_STATE_SHOP_TYPE_GIFTPACKAGE",
      (data::OpenStateType *)(v1 + 1680));
    if ( *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1696, "OPEN_STATE_SHOP_TYPE_GIFTPACKAGE");
    *(_DWORD *)(v1 + 1696) = 1001;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7440),
      (const char (*)[28])"OPEN_STATE_SHOP_TYPE_PAIMON",
      (data::OpenStateType *)(v1 + 1696));
    if ( *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1712, "OPEN_STATE_SHOP_TYPE_PAIMON");
    *(_DWORD *)(v1 + 1712) = 1002;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7480),
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_CITY",
      (data::OpenStateType *)(v1 + 1712));
    if ( *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1728, "OPEN_STATE_SHOP_TYPE_CITY");
    *(_DWORD *)(v1 + 1728) = 1003;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7520),
      (const char (*)[32])"OPEN_STATE_SHOP_TYPE_BLACKSMITH",
      (data::OpenStateType *)(v1 + 1728));
    if ( *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1744, "OPEN_STATE_SHOP_TYPE_BLACKSMITH");
    *(_DWORD *)(v1 + 1744) = 1004;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7560),
      (const char (*)[29])"OPEN_STATE_SHOP_TYPE_GROCERY",
      (data::OpenStateType *)(v1 + 1744));
    if ( *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1760, "OPEN_STATE_SHOP_TYPE_GROCERY");
    *(_DWORD *)(v1 + 1760) = 1005;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7600),
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_FOOD",
      (data::OpenStateType *)(v1 + 1760));
    if ( *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1776, "OPEN_STATE_SHOP_TYPE_FOOD");
    *(_DWORD *)(v1 + 1776) = 1006;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7640),
      (const char (*)[30])"OPEN_STATE_SHOP_TYPE_SEA_LAMP",
      (data::OpenStateType *)(v1 + 1776));
    if ( *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1792, "OPEN_STATE_SHOP_TYPE_SEA_LAMP");
    *(_DWORD *)(v1 + 1792) = 1007;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7680),
      (const char (*)[34])"OPEN_STATE_SHOP_TYPE_VIRTUAL_SHOP",
      (data::OpenStateType *)(v1 + 1792));
    if ( *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1808, "OPEN_STATE_SHOP_TYPE_VIRTUAL_SHOP");
    *(_DWORD *)(v1 + 1808) = 1008;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7720),
      (const char (*)[35])"OPEN_STATE_SHOP_TYPE_LIYUE_GROCERY",
      (data::OpenStateType *)(v1 + 1808));
    if ( *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1824, "OPEN_STATE_SHOP_TYPE_LIYUE_GROCERY");
    *(_DWORD *)(v1 + 1824) = 1009;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7760),
      (const char (*)[36])"OPEN_STATE_SHOP_TYPE_LIYUE_SOUVENIR",
      (data::OpenStateType *)(v1 + 1824));
    if ( *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1840, "OPEN_STATE_SHOP_TYPE_LIYUE_SOUVENIR");
    *(_DWORD *)(v1 + 1840) = 1010;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7800),
      (const char (*)[38])"OPEN_STATE_SHOP_TYPE_LIYUE_RESTAURANT",
      (data::OpenStateType *)(v1 + 1840));
    if ( *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1856, "OPEN_STATE_SHOP_TYPE_LIYUE_RESTAURANT");
    *(_DWORD *)(v1 + 1856) = 1011;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7840),
      (const char (*)[38])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR",
      (data::OpenStateType *)(v1 + 1856));
    if ( *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1872, "OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR");
    *(_DWORD *)(v1 + 1872) = 1012;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7880),
      (const char (*)[32])"OPEN_STATE_SHOP_TYPE_NPC_TOMOKI",
      (data::OpenStateType *)(v1 + 1872));
    if ( *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1888, "OPEN_STATE_SHOP_TYPE_NPC_TOMOKI");
    *(_DWORD *)(v1 + 1888) = 1013;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[48],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7920),
      (const char (*)[48])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR_BLACK_BAR",
      (data::OpenStateType *)(v1 + 1888));
    if ( *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1904, "OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR_BLACK_BAR");
    *(_DWORD *)(v1 + 1904) = 1100;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 7960),
      (const char (*)[22])"OPEN_ADVENTURE_MANUAL",
      (data::OpenStateType *)(v1 + 1904));
    if ( *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1920, "OPEN_ADVENTURE_MANUAL");
    *(_DWORD *)(v1 + 1920) = 1101;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8000),
      (const char (*)[34])"OPEN_ADVENTURE_MANUAL_CITY_MENGDE",
      (data::OpenStateType *)(v1 + 1920));
    if ( *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1936, "OPEN_ADVENTURE_MANUAL_CITY_MENGDE");
    *(_DWORD *)(v1 + 1936) = 1102;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8040),
      (const char (*)[33])"OPEN_ADVENTURE_MANUAL_CITY_LIYUE",
      (data::OpenStateType *)(v1 + 1936));
    if ( *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1952, "OPEN_ADVENTURE_MANUAL_CITY_LIYUE");
    *(_DWORD *)(v1 + 1952) = 1103;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8080),
      (const char (*)[30])"OPEN_ADVENTURE_MANUAL_MONSTER",
      (data::OpenStateType *)(v1 + 1952));
    if ( *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1968, "OPEN_ADVENTURE_MANUAL_MONSTER");
    *(_DWORD *)(v1 + 1968) = 1104;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8120),
      (const char (*)[35])"OPEN_ADVENTURE_MANUAL_BOSS_DUNGEON",
      (data::OpenStateType *)(v1 + 1968));
    if ( *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1984, "OPEN_ADVENTURE_MANUAL_BOSS_DUNGEON");
    *(_DWORD *)(v1 + 1984) = 1200;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8160),
      (const char (*)[28])"OPEN_STATE_ACTIVITY_SEALAMP",
      (data::OpenStateType *)(v1 + 1984));
    if ( *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2000, "OPEN_STATE_ACTIVITY_SEALAMP");
    *(_DWORD *)(v1 + 2000) = 1201;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8200),
      (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB2",
      (data::OpenStateType *)(v1 + 2000));
    if ( *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2016, "OPEN_STATE_ACTIVITY_SEALAMP_TAB2");
    *(_DWORD *)(v1 + 2016) = 1202;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8240),
      (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB3",
      (data::OpenStateType *)(v1 + 2016));
    if ( *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2032, "OPEN_STATE_ACTIVITY_SEALAMP_TAB3");
    *(_DWORD *)(v1 + 2032) = 1300;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8280),
      (const char (*)[23])"OPEN_STATE_BATTLE_PASS",
      (data::OpenStateType *)(v1 + 2032));
    if ( *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2048, "OPEN_STATE_BATTLE_PASS");
    *(_DWORD *)(v1 + 2048) = 1301;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8320),
      (const char (*)[29])"OPEN_STATE_BATTLE_PASS_ENTRY",
      (data::OpenStateType *)(v1 + 2048));
    if ( *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2064, "OPEN_STATE_BATTLE_PASS_ENTRY");
    *(_DWORD *)(v1 + 2064) = 1400;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8360),
      (const char (*)[29])"OPEN_STATE_ACTIVITY_CRUCIBLE",
      (data::OpenStateType *)(v1 + 2064));
    if ( *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2080, "OPEN_STATE_ACTIVITY_CRUCIBLE");
    *(_DWORD *)(v1 + 2080) = 1401;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8400),
      (const char (*)[37])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_OPEN",
      (data::OpenStateType *)(v1 + 2080));
    if ( *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2096, "OPEN_STATE_ACTIVITY_NEWBEEBOUNS_OPEN");
    *(_DWORD *)(v1 + 2096) = 1402;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8440),
      (const char (*)[38])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_CLOSE",
      (data::OpenStateType *)(v1 + 2096));
    if ( *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2112, "OPEN_STATE_ACTIVITY_NEWBEEBOUNS_CLOSE");
    *(_DWORD *)(v1 + 2112) = 1403;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8480),
      (const char (*)[31])"OPEN_STATE_ACTIVITY_ENTRY_OPEN",
      (data::OpenStateType *)(v1 + 2112));
    if ( *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2128, "OPEN_STATE_ACTIVITY_ENTRY_OPEN");
    *(_DWORD *)(v1 + 2128) = 1404;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8520),
      (const char (*)[33])"OPEN_STATE_MENGDE_INFUSEDCRYSTAL",
      (data::OpenStateType *)(v1 + 2128));
    if ( *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2144, "OPEN_STATE_MENGDE_INFUSEDCRYSTAL");
    *(_DWORD *)(v1 + 2144) = 1405;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8560),
      (const char (*)[32])"OPEN_STATE_LIYUE_INFUSEDCRYSTAL",
      (data::OpenStateType *)(v1 + 2144));
    if ( *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2160, "OPEN_STATE_LIYUE_INFUSEDCRYSTAL");
    *(_DWORD *)(v1 + 2160) = 1406;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8600),
      (const char (*)[36])"OPEN_STATE_SNOW_MOUNTAIN_ELDER_TREE",
      (data::OpenStateType *)(v1 + 2160));
    if ( *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2176, "OPEN_STATE_SNOW_MOUNTAIN_ELDER_TREE");
    *(_DWORD *)(v1 + 2176) = 1407;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8640),
      (const char (*)[24])"OPEN_STATE_MIRACLE_RING",
      (data::OpenStateType *)(v1 + 2176));
    if ( *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2192, "OPEN_STATE_MIRACLE_RING");
    *(_DWORD *)(v1 + 2192) = 1408;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8680),
      (const char (*)[21])"OPEN_STATE_COOP_LINE",
      (data::OpenStateType *)(v1 + 2192));
    if ( *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2208, "OPEN_STATE_COOP_LINE");
    *(_DWORD *)(v1 + 2208) = 1409;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8720),
      (const char (*)[34])"OPEN_STATE_INAZUMA_INFUSEDCRYSTAL",
      (data::OpenStateType *)(v1 + 2208));
    if ( *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2224, "OPEN_STATE_INAZUMA_INFUSEDCRYSTAL");
    *(_DWORD *)(v1 + 2224) = 1410;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[16],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8760),
      (const char (*)[16])"OPEN_STATE_FISH",
      (data::OpenStateType *)(v1 + 2224));
    if ( *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2240, "OPEN_STATE_FISH");
    *(_DWORD *)(v1 + 2240) = 1411;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8800),
      (const char (*)[33])"OPEN_STATE_GUIDE_SUMO_TEAM_SKILL",
      (data::OpenStateType *)(v1 + 2240));
    if ( *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2256, "OPEN_STATE_GUIDE_SUMO_TEAM_SKILL");
    *(_DWORD *)(v1 + 2256) = 1412;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8840),
      (const char (*)[29])"OPEN_STATE_GUIDE_FISH_RECIPE",
      (data::OpenStateType *)(v1 + 2256));
    if ( *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2272, "OPEN_STATE_GUIDE_FISH_RECIPE");
    *(_DWORD *)(v1 + 2272) = 1500;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[16],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8880),
      (const char (*)[16])"OPEN_STATE_HOME",
      (data::OpenStateType *)(v1 + 2272));
    if ( *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2288, "OPEN_STATE_HOME");
    *(_DWORD *)(v1 + 2288) = 1501;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8920),
      (const char (*)[30])"OPEN_STATE_ACTIVITY_HOMEWORLD",
      (data::OpenStateType *)(v1 + 2288));
    if ( *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2304, "OPEN_STATE_ACTIVITY_HOMEWORLD");
    *(_DWORD *)(v1 + 2304) = 1502;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 8960),
      (const char (*)[23])"OPEN_STATE_ADEPTIABODE",
      (data::OpenStateType *)(v1 + 2304));
    if ( *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2320, "OPEN_STATE_ADEPTIABODE");
    *(_DWORD *)(v1 + 2320) = 1503;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9000),
      (const char (*)[23])"OPEN_STATE_HOME_AVATAR",
      (data::OpenStateType *)(v1 + 2320));
    if ( *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2336, "OPEN_STATE_HOME_AVATAR");
    *(_DWORD *)(v1 + 2336) = 1504;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9040),
      (const char (*)[21])"OPEN_STATE_HOME_EDIT",
      (data::OpenStateType *)(v1 + 2336));
    if ( *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2352, "OPEN_STATE_HOME_EDIT");
    *(_DWORD *)(v1 + 2352) = 1505;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9080),
      (const char (*)[26])"OPEN_STATE_HOME_EDIT_TIPS",
      (data::OpenStateType *)(v1 + 2352));
    if ( *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2368, "OPEN_STATE_HOME_EDIT_TIPS");
    *(_DWORD *)(v1 + 2368) = 1600;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9120),
      (const char (*)[31])"OPEN_STATE_RELIQUARY_DECOMPOSE",
      (data::OpenStateType *)(v1 + 2368));
    if ( *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2384, "OPEN_STATE_RELIQUARY_DECOMPOSE");
    *(_DWORD *)(v1 + 2384) = 1700;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9160),
      (const char (*)[23])"OPEN_STATE_ACTIVITY_H5",
      (data::OpenStateType *)(v1 + 2384));
    if ( *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2400, "OPEN_STATE_ACTIVITY_H5");
    *(_DWORD *)(v1 + 2400) = 2000;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9200),
      (const char (*)[23])"OPEN_STATE_ORAIONOKAMI",
      (data::OpenStateType *)(v1 + 2400));
    if ( *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2416, "OPEN_STATE_ORAIONOKAMI");
    *(_DWORD *)(v1 + 2416) = 2001;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9240),
      (const char (*)[37])"OPEN_STATE_GUIDE_CHESS_MISSION_CHECK",
      (data::OpenStateType *)(v1 + 2416));
    if ( *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2432, "OPEN_STATE_GUIDE_CHESS_MISSION_CHECK");
    *(_DWORD *)(v1 + 2432) = 2002;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9280),
      (const char (*)[29])"OPEN_STATE_GUIDE_CHESS_BUILD",
      (data::OpenStateType *)(v1 + 2432));
    if ( *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2448, "OPEN_STATE_GUIDE_CHESS_BUILD");
    *(_DWORD *)(v1 + 2448) = 2003;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9320),
      (const char (*)[41])"OPEN_STATE_GUIDE_CHESS_WIND_TOWER_CIRCLE",
      (data::OpenStateType *)(v1 + 2448));
    if ( *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2464, "OPEN_STATE_GUIDE_CHESS_WIND_TOWER_CIRCLE");
    *(_DWORD *)(v1 + 2464) = 2004;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9360),
      (const char (*)[35])"OPEN_STATE_GUIDE_CHESS_CARD_SELECT",
      (data::OpenStateType *)(v1 + 2464));
    if ( *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2480, "OPEN_STATE_GUIDE_CHESS_CARD_SELECT");
    *(_DWORD *)(v1 + 2480) = 2005;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9400),
      (const char (*)[38])"OPEN_STATE_INAZUMA_MAINQUEST_FINISHED",
      (data::OpenStateType *)(v1 + 2480));
    if ( *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2496, "OPEN_STATE_INAZUMA_MAINQUEST_FINISHED");
    *(_DWORD *)(v1 + 2496) = 2100;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9440),
      (const char (*)[25])"OPEN_STATE_PAIMON_LVINFO",
      (data::OpenStateType *)(v1 + 2496));
    if ( *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2512, "OPEN_STATE_PAIMON_LVINFO");
    *(_DWORD *)(v1 + 2512) = 2101;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[24],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9480),
      (const char (*)[24])"OPEN_STATE_TELEPORT_HUD",
      (data::OpenStateType *)(v1 + 2512));
    if ( *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2528, "OPEN_STATE_TELEPORT_HUD");
    *(_DWORD *)(v1 + 2528) = 2102;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9520),
      (const char (*)[28])"OPEN_STATE_GUIDE_MAP_UNLOCK",
      (data::OpenStateType *)(v1 + 2528));
    if ( *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2544, "OPEN_STATE_GUIDE_MAP_UNLOCK");
    *(_DWORD *)(v1 + 2544) = 2103;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9560),
      (const char (*)[31])"OPEN_STATE_GUIDE_PAIMON_LVINFO",
      (data::OpenStateType *)(v1 + 2544));
    if ( *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2560, "OPEN_STATE_GUIDE_PAIMON_LVINFO");
    *(_DWORD *)(v1 + 2560) = 2104;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9600),
      (const char (*)[32])"OPEN_STATE_GUIDE_AMBORTRANSPORT",
      (data::OpenStateType *)(v1 + 2560));
    if ( *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2576, "OPEN_STATE_GUIDE_AMBORTRANSPORT");
    *(_DWORD *)(v1 + 2576) = 2105;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9640),
      (const char (*)[28])"OPEN_STATE_GUIDE_FLY_SECOND",
      (data::OpenStateType *)(v1 + 2576));
    if ( *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2592, "OPEN_STATE_GUIDE_FLY_SECOND");
    *(_DWORD *)(v1 + 2592) = 2106;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9680),
      (const char (*)[28])"OPEN_STATE_GUIDE_KAEYA_CLUE",
      (data::OpenStateType *)(v1 + 2592));
    if ( *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2608, "OPEN_STATE_GUIDE_KAEYA_CLUE");
    *(_DWORD *)(v1 + 2608) = 2107;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9720),
      (const char (*)[25])"OPEN_STATE_CAPTURE_CODEX",
      (data::OpenStateType *)(v1 + 2608));
    if ( *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2624, "OPEN_STATE_CAPTURE_CODEX");
    *(_DWORD *)(v1 + 2624) = 2200;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9760),
      (const char (*)[30])"OPEN_STATE_ACTIVITY_FISH_OPEN",
      (data::OpenStateType *)(v1 + 2624));
    if ( *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2640, "OPEN_STATE_ACTIVITY_FISH_OPEN");
    *(_DWORD *)(v1 + 2640) = 2201;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9800),
      (const char (*)[31])"OPEN_STATE_ACTIVITY_FISH_CLOSE",
      (data::OpenStateType *)(v1 + 2640));
    if ( *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2656, "OPEN_STATE_ACTIVITY_FISH_CLOSE");
    *(_DWORD *)(v1 + 2656) = 2205;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9840),
      (const char (*)[27])"OPEN_STATE_GUIDE_ROGUE_MAP",
      (data::OpenStateType *)(v1 + 2656));
    if ( *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2672, "OPEN_STATE_GUIDE_ROGUE_MAP");
    *(_DWORD *)(v1 + 2672) = 2206;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9880),
      (const char (*)[28])"OPEN_STATE_GUIDE_ROGUE_RUNE",
      (data::OpenStateType *)(v1 + 2672));
    if ( *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2688, "OPEN_STATE_GUIDE_ROGUE_RUNE");
    *(_DWORD *)(v1 + 2688) = 2210;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9920),
      (const char (*)[35])"OPEN_STATE_GUIDE_BARTENDER_FORMULA",
      (data::OpenStateType *)(v1 + 2688));
    if ( *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2704, "OPEN_STATE_GUIDE_BARTENDER_FORMULA");
    *(_DWORD *)(v1 + 2704) = 2211;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 9960),
      (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_MIX",
      (data::OpenStateType *)(v1 + 2704));
    if ( *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2720, "OPEN_STATE_GUIDE_BARTENDER_MIX");
    *(_DWORD *)(v1 + 2720) = 2212;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10000),
      (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_CUP",
      (data::OpenStateType *)(v1 + 2720));
    if ( *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2736, "OPEN_STATE_GUIDE_BARTENDER_CUP");
    *(_DWORD *)(v1 + 2736) = 2400;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10040),
      (const char (*)[32])"OPEN_STATE_GUIDE_MAIL_FAVORITES",
      (data::OpenStateType *)(v1 + 2736));
    if ( *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2752, "OPEN_STATE_GUIDE_MAIL_FAVORITES");
    *(_DWORD *)(v1 + 2752) = 2401;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10080),
      (const char (*)[34])"OPEN_STATE_GUIDE_POTION_CONFIGURE",
      (data::OpenStateType *)(v1 + 2752));
    if ( *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2768, "OPEN_STATE_GUIDE_POTION_CONFIGURE");
    *(_DWORD *)(v1 + 2768) = 2402;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10120),
      (const char (*)[32])"OPEN_STATE_GUIDE_LANV2_FIREWORK",
      (data::OpenStateType *)(v1 + 2768));
    if ( *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2784, "OPEN_STATE_GUIDE_LANV2_FIREWORK");
    *(_DWORD *)(v1 + 2784) = 2403;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10160),
      (const char (*)[34])"OPEN_STATE_LOADINGTIPS_ENKANOMIYA",
      (data::OpenStateType *)(v1 + 2784));
    if ( *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2800, "OPEN_STATE_LOADINGTIPS_ENKANOMIYA");
    *(_DWORD *)(v1 + 2800) = 2500;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[26],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10200),
      (const char (*)[26])"OPEN_STATE_MICHIAE_CASKET",
      (data::OpenStateType *)(v1 + 2800));
    if ( *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2816, "OPEN_STATE_MICHIAE_CASKET");
    *(_DWORD *)(v1 + 2816) = 2501;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[41],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10240),
      (const char (*)[41])"OPEN_STATE_MAIL_COLLECT_UNLOCK_RED_POINT",
      (data::OpenStateType *)(v1 + 2816));
    if ( *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2832, "OPEN_STATE_MAIL_COLLECT_UNLOCK_RED_POINT");
    *(_DWORD *)(v1 + 2832) = 2600;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[23],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10280),
      (const char (*)[23])"OPEN_STATE_LUMEN_STONE",
      (data::OpenStateType *)(v1 + 2832));
    if ( *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2848, "OPEN_STATE_LUMEN_STONE");
    *(_DWORD *)(v1 + 2848) = 2601;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[34],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10320),
      (const char (*)[34])"OPEN_STATE_GUIDE_CRYSTALLINK_BUFF",
      (data::OpenStateType *)(v1 + 2848));
    if ( *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2864, "OPEN_STATE_GUIDE_CRYSTALLINK_BUFF");
    *(_DWORD *)(v1 + 2864) = 2700;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10360),
      (const char (*)[31])"OPEN_STATE_GUIDE_MUSIC_GAME_V3",
      (data::OpenStateType *)(v1 + 2864));
    if ( *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2880, "OPEN_STATE_GUIDE_MUSIC_GAME_V3");
    *(_DWORD *)(v1 + 2880) = 2701;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[46],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10400),
      (const char (*)[46])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_REAL_TIME_EDIT",
      (data::OpenStateType *)(v1 + 2880));
    if ( *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2896, "OPEN_STATE_GUIDE_MUSIC_GAME_V3_REAL_TIME_EDIT");
    *(_DWORD *)(v1 + 2896) = 2702;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[45],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10440),
      (const char (*)[45])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_TIMELINE_EDIT",
      (data::OpenStateType *)(v1 + 2896));
    if ( *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2912, "OPEN_STATE_GUIDE_MUSIC_GAME_V3_TIMELINE_EDIT");
    *(_DWORD *)(v1 + 2912) = 2703;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[39],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10480),
      (const char (*)[39])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_SETTING",
      (data::OpenStateType *)(v1 + 2912));
    if ( *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2928, "OPEN_STATE_GUIDE_MUSIC_GAME_V3_SETTING");
    *(_DWORD *)(v1 + 2928) = 2704;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[28],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10520),
      (const char (*)[28])"OPEN_STATE_GUIDE_ROBOTGACHA",
      (data::OpenStateType *)(v1 + 2928));
    if ( *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2944, "OPEN_STATE_GUIDE_ROBOTGACHA");
    *(_DWORD *)(v1 + 2944) = 2800;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10560),
      (const char (*)[31])"OPEN_STATE_GUIDE_FRAGILE_RESIN",
      (data::OpenStateType *)(v1 + 2944));
    if ( *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2960, "OPEN_STATE_GUIDE_FRAGILE_RESIN");
    *(_DWORD *)(v1 + 2960) = 2801;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[32],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10600),
      (const char (*)[32])"OPEN_ADVENTURE_MANUAL_EDUCATION",
      (data::OpenStateType *)(v1 + 2960));
    if ( *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2976, "OPEN_ADVENTURE_MANUAL_EDUCATION");
    *(_DWORD *)(v1 + 2976) = 3000;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10640),
      (const char (*)[33])"OPEN_STATE_CITY_REPUATION_SUMERU",
      (data::OpenStateType *)(v1 + 2976));
    if ( *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2992, "OPEN_STATE_CITY_REPUATION_SUMERU");
    *(_DWORD *)(v1 + 2992) = 3001;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[20],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10680),
      (const char (*)[20])"OPEN_STATE_VANASARA",
      (data::OpenStateType *)(v1 + 2992));
    if ( *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3008, "OPEN_STATE_VANASARA");
    *(_DWORD *)(v1 + 3008) = 3002;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10720),
      (const char (*)[33])"OPEN_STATE_SUMERU_INFUSEDCRYSTAL",
      (data::OpenStateType *)(v1 + 3008));
    if ( *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3024, "OPEN_STATE_SUMERU_INFUSEDCRYSTAL");
    *(_DWORD *)(v1 + 3024) = 3003;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10760),
      (const char (*)[40])"OPEN_STATE_LIMIT_REGION_WITHERED_FOREST",
      (data::OpenStateType *)(v1 + 3024));
    if ( *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3040, "OPEN_STATE_LIMIT_REGION_WITHERED_FOREST");
    *(_DWORD *)(v1 + 3040) = 3004;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[37],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10800),
      (const char (*)[37])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR",
      (data::OpenStateType *)(v1 + 3040));
    if ( *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3056, "OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR");
    *(_DWORD *)(v1 + 3056) = 3005;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[47],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10840),
      (const char (*)[47])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR_BLACK_BAR",
      (data::OpenStateType *)(v1 + 3056));
    if ( *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3072, "OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR_BLACK_BAR");
    *(_DWORD *)(v1 + 3072) = 3006;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10880),
      (const char (*)[40])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_MUQADAS",
      (data::OpenStateType *)(v1 + 3072));
    if ( *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3088, "OPEN_STATE_GUIDE_ACTIVITY_SKILL_MUQADAS");
    *(_DWORD *)(v1 + 3088) = 3007;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[25],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10920),
      (const char (*)[25])"OPEN_STATE_GUIDE_MUQADAS",
      (data::OpenStateType *)(v1 + 3088));
    if ( *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3104, "OPEN_STATE_GUIDE_MUQADAS");
    *(_DWORD *)(v1 + 3104) = 3100;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 10960),
      (const char (*)[33])"OPEN_STATE_GUIDE_WINDFIELD_SKILL",
      (data::OpenStateType *)(v1 + 3104));
    if ( *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3120, "OPEN_STATE_GUIDE_WINDFIELD_SKILL");
    *(_DWORD *)(v1 + 3120) = 3101;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[40],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11000),
      (const char (*)[40])"OPEN_STATE_GUIDE_VINTAGE_MARKET_UPGRADE",
      (data::OpenStateType *)(v1 + 3120));
    if ( *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3136, "OPEN_STATE_GUIDE_VINTAGE_MARKET_UPGRADE");
    *(_DWORD *)(v1 + 3136) = 3102;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11040),
      (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_SKILL",
      (data::OpenStateType *)(v1 + 3136));
    if ( *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3152, "OPEN_STATE_GUIDE_VINTAGE_MARKET_SKILL");
    *(_DWORD *)(v1 + 3152) = 3103;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[38],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11080),
      (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_STAFF",
      (data::OpenStateType *)(v1 + 3152));
    if ( *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3168, "OPEN_STATE_GUIDE_VINTAGE_MARKET_STAFF");
    *(_DWORD *)(v1 + 3168) = 3200;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[35],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11120),
      (const char (*)[35])"OPEN_STATE_GCG_RESOURCE_MANAGEMENT",
      (data::OpenStateType *)(v1 + 3168));
    if ( *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3184, "OPEN_STATE_GCG_RESOURCE_MANAGEMENT");
    *(_DWORD *)(v1 + 3184) = 3201;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11160),
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_1",
      (data::OpenStateType *)(v1 + 3184));
    if ( *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3200, "OPEN_STATE_GUIDE_FUNGUSFIGHTER_1");
    *(_DWORD *)(v1 + 3200) = 3202;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11200),
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_2",
      (data::OpenStateType *)(v1 + 3200));
    if ( *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3216, "OPEN_STATE_GUIDE_FUNGUSFIGHTER_2");
    *(_DWORD *)(v1 + 3216) = 3203;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[33],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11240),
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_3",
      (data::OpenStateType *)(v1 + 3216));
    if ( *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3232, "OPEN_STATE_GUIDE_FUNGUSFIGHTER_3");
    *(_DWORD *)(v1 + 3232) = 3300;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11280),
      (const char (*)[21])"OPEN_STATE_GCG_LEVEL",
      (data::OpenStateType *)(v1 + 3232));
    if ( *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3248, "OPEN_STATE_GCG_LEVEL");
    *(_DWORD *)(v1 + 3248) = 3301;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11320),
      (const char (*)[22])"OPEN_STATE_GCG_INVITE",
      (data::OpenStateType *)(v1 + 3248));
    if ( *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3264, "OPEN_STATE_GCG_INVITE");
    *(_DWORD *)(v1 + 3264) = 3302;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[21],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11360),
      (const char (*)[21])"OPEN_STATE_GCG_MATCH",
      (data::OpenStateType *)(v1 + 3264));
    if ( *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3280, "OPEN_STATE_GCG_MATCH");
    *(_DWORD *)(v1 + 3280) = 3303;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[19],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11400),
      (const char (*)[19])"OPEN_STATE_GCG_PVP",
      (data::OpenStateType *)(v1 + 3280));
    if ( *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3296, "OPEN_STATE_GCG_PVP");
    *(_DWORD *)(v1 + 3296) = 3304;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[20],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11440),
      (const char (*)[20])"OPEN_STATE_GCG_DECK",
      (data::OpenStateType *)(v1 + 3296));
    if ( *(_BYTE *)(((v1 + 3312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3312, "OPEN_STATE_GCG_DECK");
    *(_DWORD *)(v1 + 3312) = 3305;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[22],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11480),
      (const char (*)[22])"OPEN_STATE_GCG_MANUAL",
      (data::OpenStateType *)(v1 + 3312));
    if ( *(_BYTE *)(((v1 + 3328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3328, "OPEN_STATE_GCG_MANUAL");
    *(_DWORD *)(v1 + 3328) = 3306;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11520),
      (const char (*)[30])"OPEN_STATE_GCG_BOSS_CHALLENGE",
      (data::OpenStateType *)(v1 + 3328));
    if ( *(_BYTE *)(((v1 + 3344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3344, "OPEN_STATE_GCG_BOSS_CHALLENGE");
    *(_DWORD *)(v1 + 3344) = 3307;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[31],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11560),
      (const char (*)[31])"OPEN_STATE_GCG_WORLD_CHALLENGE",
      (data::OpenStateType *)(v1 + 3344));
    if ( *(_BYTE *)(((v1 + 3360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3360, "OPEN_STATE_GCG_WORLD_CHALLENGE");
    *(_DWORD *)(v1 + 3360) = 3308;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[30],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11600),
      (const char (*)[30])"OPEN_STATE_GCG_WEEK_CHALLENGE",
      (data::OpenStateType *)(v1 + 3360));
    if ( *(_BYTE *)(((v1 + 3376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3376, "OPEN_STATE_GCG_WEEK_CHALLENGE");
    *(_DWORD *)(v1 + 3376) = 3309;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11640),
      (const char (*)[36])"OPEN_STATE_GCG_TAVERN_SCENE_BUILDER",
      (data::OpenStateType *)(v1 + 3376));
    if ( *(_BYTE *)(((v1 + 3392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3392, "OPEN_STATE_GCG_TAVERN_SCENE_BUILDER");
    *(_DWORD *)(v1 + 3392) = 3310;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[29],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11680),
      (const char (*)[29])"OPEN_STATE_GCG_SHOP_CARDFACE",
      (data::OpenStateType *)(v1 + 3392));
    if ( *(_BYTE *)(((v1 + 3408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3408, "OPEN_STATE_GCG_SHOP_CARDFACE");
    *(_DWORD *)(v1 + 3408) = 3311;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[27],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11720),
      (const char (*)[27])"OPEN_STATE_GCG_SHOP_SYSTEM",
      (data::OpenStateType *)(v1 + 3408));
    if ( *(_BYTE *)(((v1 + 3424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3424, "OPEN_STATE_GCG_SHOP_SYSTEM");
    *(_DWORD *)(v1 + 3424) = 3312;
    std::pair<std::string const,data::OpenStateType>::pair<char const(&)[36],data::OpenStateType,true>(
      (std::pair<const std::string,data::OpenStateType> *const)(v1 + 11760),
      (const char (*)[36])"OPEN_STATE_GUIDE_BRICKBREAKER_SKILL",
      (data::OpenStateType *)(v1 + 3424));
    std::allocator<std::pair<std::string const,data::OpenStateType>>::allocator((std::allocator<std::pair<const std::string,data::OpenStateType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::OpenStateType>::unordered_map(
      &data::getOpenStateTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::OpenStateType> >)__PAIR128__(209LL, v1 + 3440),
      0LL,
      (const std::unordered_map<std::string,data::OpenStateType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::OpenStateType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::OpenStateType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getOpenStateTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::OpenStateType>::~unordered_map,
      &data::getOpenStateTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::OpenStateType>>::~allocator((std::allocator<std::pair<const std::string,data::OpenStateType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::OpenStateType> *)(v1 + 11800);
          i != (std::pair<const std::string,data::OpenStateType> *)(v1 + 3440);
          std::pair<std::string const,data::OpenStateType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF85DC) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 1508) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_8(v1, 12064LL, v6);
  }
  return &data::getOpenStateTypeNameMap[abi:cxx11](void)::m;
};

// Line 4564: range 000000000FAAA4E2-000000000FABA0FB
const std::map<data::OpenStateType,std::pair<std::string,std::string >> *__cdecl data::getOpenStateTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  _DWORD *v18; // rax
  _DWORD *v19; // rax
  _DWORD *v20; // rax
  _DWORD *v21; // rax
  _DWORD *v22; // rax
  _DWORD *v23; // rax
  _DWORD *v24; // rax
  _DWORD *v25; // rax
  _DWORD *v26; // rax
  _DWORD *v27; // rax
  _DWORD *v28; // rax
  _DWORD *v29; // rax
  _DWORD *v30; // rax
  _DWORD *v31; // rax
  _DWORD *v32; // rax
  _DWORD *v33; // rax
  _DWORD *v34; // rax
  _DWORD *v35; // rax
  _DWORD *v36; // rax
  _DWORD *v37; // rax
  _DWORD *v38; // rax
  _DWORD *v39; // rax
  _DWORD *v40; // rax
  _DWORD *v41; // rax
  _DWORD *v42; // rax
  _DWORD *v43; // rax
  _DWORD *v44; // rax
  _DWORD *v45; // rax
  _DWORD *v46; // rax
  _DWORD *v47; // rax
  _DWORD *v48; // rax
  _DWORD *v49; // rax
  _DWORD *v50; // rax
  _DWORD *v51; // rax
  _DWORD *v52; // rax
  _DWORD *v53; // rax
  _DWORD *v54; // rax
  _DWORD *v55; // rax
  _DWORD *v56; // rax
  _DWORD *v57; // rax
  _DWORD *v58; // rax
  _DWORD *v59; // rax
  _DWORD *v60; // rax
  _DWORD *v61; // rax
  _DWORD *v62; // rax
  _DWORD *v63; // rax
  _DWORD *v64; // rax
  _DWORD *v65; // rax
  _DWORD *v66; // rax
  _DWORD *v67; // rax
  _DWORD *v68; // rax
  _DWORD *v69; // rax
  _DWORD *v70; // rax
  _DWORD *v71; // rax
  _DWORD *v72; // rax
  _DWORD *v73; // rax
  _DWORD *v74; // rax
  _DWORD *v75; // rax
  _DWORD *v76; // rax
  _DWORD *v77; // rax
  _DWORD *v78; // rax
  _DWORD *v79; // rax
  _DWORD *v80; // rax
  _DWORD *v81; // rax
  _DWORD *v82; // rax
  _DWORD *v83; // rax
  _DWORD *v84; // rax
  _DWORD *v85; // rax
  _DWORD *v86; // rax
  _DWORD *v87; // rax
  _DWORD *v88; // rax
  _DWORD *v89; // rax
  _DWORD *v90; // rax
  _DWORD *v91; // rax
  _DWORD *v92; // rax
  _DWORD *v93; // rax
  _DWORD *v94; // rax
  _DWORD *v95; // rax
  _DWORD *v96; // rax
  _DWORD *v97; // rax
  _DWORD *v98; // rax
  _DWORD *v99; // rax
  _DWORD *v100; // rax
  _DWORD *v101; // rax
  _DWORD *v102; // rax
  _DWORD *v103; // rax
  _DWORD *v104; // rax
  _DWORD *v105; // rax
  _DWORD *v106; // rax
  _DWORD *v107; // rax
  _DWORD *v108; // rax
  _DWORD *v109; // rax
  _DWORD *v110; // rax
  _DWORD *v111; // rax
  _DWORD *v112; // rax
  _DWORD *v113; // rax
  _DWORD *v114; // rax
  _DWORD *v115; // rax
  _DWORD *v116; // rax
  _DWORD *v117; // rax
  _DWORD *v118; // rax
  _DWORD *v119; // rax
  _DWORD *v120; // rax
  _DWORD *v121; // rax
  _DWORD *v122; // rax
  _DWORD *v123; // rax
  _DWORD *v124; // rax
  _DWORD *v125; // rax
  _DWORD *v126; // rax
  _DWORD *v127; // rax
  _DWORD *v128; // rax
  _DWORD *v129; // rax
  _DWORD *v130; // rax
  _DWORD *v131; // rax
  _DWORD *v132; // rax
  _DWORD *v133; // rax
  _DWORD *v134; // rax
  _DWORD *v135; // rax
  _DWORD *v136; // rax
  _DWORD *v137; // rax
  _DWORD *v138; // rax
  _DWORD *v139; // rax
  _DWORD *v140; // rax
  _DWORD *v141; // rax
  _DWORD *v142; // rax
  _DWORD *v143; // rax
  _DWORD *v144; // rax
  _DWORD *v145; // rax
  _DWORD *v146; // rax
  _DWORD *v147; // rax
  _DWORD *v148; // rax
  _DWORD *v149; // rax
  _DWORD *v150; // rax
  _DWORD *v151; // rax
  _DWORD *v152; // rax
  _DWORD *v153; // rax
  _DWORD *v154; // rax
  _DWORD *v155; // rax
  _DWORD *v156; // rax
  _DWORD *v157; // rax
  _DWORD *v158; // rax
  _DWORD *v159; // rax
  _DWORD *v160; // rax
  _DWORD *v161; // rax
  _DWORD *v162; // rax
  _DWORD *v163; // rax
  _DWORD *v164; // rax
  _DWORD *v165; // rax
  _DWORD *v166; // rax
  _DWORD *v167; // rax
  _DWORD *v168; // rax
  _DWORD *v169; // rax
  _DWORD *v170; // rax
  _DWORD *v171; // rax
  _DWORD *v172; // rax
  _DWORD *v173; // rax
  _DWORD *v174; // rax
  _DWORD *v175; // rax
  _DWORD *v176; // rax
  _DWORD *v177; // rax
  _DWORD *v178; // rax
  _DWORD *v179; // rax
  _DWORD *v180; // rax
  _DWORD *v181; // rax
  _DWORD *v182; // rax
  _DWORD *v183; // rax
  _DWORD *v184; // rax
  _DWORD *v185; // rax
  _DWORD *v186; // rax
  _DWORD *v187; // rax
  _DWORD *v188; // rax
  _DWORD *v189; // rax
  _DWORD *v190; // rax
  _DWORD *v191; // rax
  _DWORD *v192; // rax
  _DWORD *v193; // rax
  _DWORD *v194; // rax
  _DWORD *v195; // rax
  _DWORD *v196; // rax
  _DWORD *v197; // rax
  _DWORD *v198; // rax
  _DWORD *v199; // rax
  _DWORD *v200; // rax
  _DWORD *v201; // rax
  _DWORD *v202; // rax
  _DWORD *v203; // rax
  _DWORD *v204; // rax
  _DWORD *v205; // rax
  _DWORD *v206; // rax
  _DWORD *v207; // rax
  _DWORD *v208; // rax
  _DWORD *v209; // rax
  _DWORD *v210; // rax
  _DWORD *v211; // rax
  _DWORD *v212; // rax
  char v214[38832]; // [rsp+10h] [rbp-97B0h] BYREF

  v1 = (unsigned __int64)v214;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_10(38784LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = a4213219Unknown;
  *(_QWORD *)(v1 + 16) = data::getOpenStateTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = -234556924;
  v3[536862754] = -234556924;
  v3[536862755] = -234556924;
  v3[536862756] = -234556924;
  v3[536862757] = -234556924;
  v3[536862758] = -234556924;
  v3[536862759] = -234556924;
  v3[536862760] = -234556924;
  v3[536862761] = -234556924;
  v3[536862762] = -234556924;
  v3[536862763] = -234556924;
  v3[536862764] = -234556924;
  v3[536862765] = -234556924;
  v3[536862766] = -234556924;
  v3[536862767] = -234556924;
  v3[536862768] = -234556924;
  v3[536862769] = -234556924;
  v3[536862770] = -234556924;
  v3[536862771] = -234556924;
  v3[536862772] = -234556924;
  v3[536862773] = -234556924;
  v3[536862774] = -234556924;
  v3[536862775] = -234556924;
  v3[536862776] = -234556924;
  v3[536862777] = -234556924;
  v3[536862778] = -234556924;
  v3[536862779] = -234556924;
  v3[536862780] = -234556924;
  v3[536862781] = -234556924;
  v3[536862782] = -234556924;
  v3[536862783] = -234556924;
  v3[536862784] = -234556924;
  v3[536862785] = -234556924;
  v3[536862786] = -234556924;
  v3[536862787] = -234556924;
  v3[536862788] = -234556924;
  v3[536862789] = -234556924;
  v3[536862790] = -234556924;
  v3[536862791] = -234556924;
  v3[536862792] = -234556924;
  v3[536862793] = -234556924;
  v3[536862794] = -234556924;
  v3[536862795] = -234556924;
  v3[536862796] = -234556924;
  v3[536862797] = -234556924;
  v3[536862798] = -234556924;
  v3[536862799] = -234556924;
  v3[536862800] = -234556924;
  v3[536862801] = -234556924;
  v3[536862802] = -234556924;
  v3[536862803] = -234556924;
  v3[536862804] = -234556924;
  v3[536862805] = -234556924;
  v3[536862806] = -234556924;
  v3[536862807] = -234556924;
  v3[536862808] = -234556924;
  v3[536862809] = -234556924;
  v3[536862810] = -234556924;
  v3[536862811] = -234556924;
  v3[536862812] = -234556924;
  v3[536862813] = -234556924;
  v3[536862814] = -234556924;
  v3[536862815] = -234556924;
  v3[536862816] = -234556924;
  v3[536862817] = -234556924;
  v3[536862818] = -234556924;
  v3[536862819] = -234556924;
  v3[536862820] = -234556924;
  v3[536862821] = -234556924;
  v3[536862822] = -234556924;
  v3[536862823] = -234556924;
  v3[536862824] = -234556924;
  v3[536862825] = -234556924;
  v3[536862826] = 61956;
  v3[536862828] = -219021312;
  v3[536862829] = 62194;
  v3[536862831] = -219021312;
  v3[536862832] = 62194;
  v3[536862834] = -219021312;
  v3[536862835] = 62194;
  v3[536862837] = -219021312;
  v3[536862838] = 62194;
  v3[536862840] = -219021312;
  v3[536862841] = 62194;
  v3[536862843] = -219021312;
  v3[536862844] = 62194;
  v3[536862846] = -219021312;
  v3[536862847] = 62194;
  v3[536862849] = -219021312;
  v3[536862850] = 62194;
  v3[536862852] = -219021312;
  v3[536862853] = 62194;
  v3[536862855] = -219021312;
  v3[536862856] = 62194;
  v3[536862858] = -219021312;
  v3[536862859] = 62194;
  v3[536862861] = -219021312;
  v3[536862862] = 62194;
  v3[536862864] = -219021312;
  v3[536862865] = 62194;
  v3[536862867] = -219021312;
  v3[536862868] = 62194;
  v3[536862870] = -219021312;
  v3[536862871] = 62194;
  v3[536862873] = -219021312;
  v3[536862874] = 62194;
  v3[536862876] = -219021312;
  v3[536862877] = 62194;
  v3[536862879] = -219021312;
  v3[536862880] = 62194;
  v3[536862882] = -219021312;
  v3[536862883] = 62194;
  v3[536862885] = -219021312;
  v3[536862886] = 62194;
  v3[536862888] = -219021312;
  v3[536862889] = 62194;
  v3[536862891] = -219021312;
  v3[536862892] = 62194;
  v3[536862894] = -219021312;
  v3[536862895] = 62194;
  v3[536862897] = -219021312;
  v3[536862898] = 62194;
  v3[536862900] = -219021312;
  v3[536862901] = 62194;
  v3[536862903] = -219021312;
  v3[536862904] = 62194;
  v3[536862906] = -219021312;
  v3[536862907] = 62194;
  v3[536862909] = -219021312;
  v3[536862910] = 62194;
  v3[536862912] = -219021312;
  v3[536862913] = 62194;
  v3[536862915] = -219021312;
  v3[536862916] = 62194;
  v3[536862918] = -219021312;
  v3[536862919] = 62194;
  v3[536862921] = -219021312;
  v3[536862922] = 62194;
  v3[536862924] = -219021312;
  v3[536862925] = 62194;
  v3[536862927] = -219021312;
  v3[536862928] = 62194;
  v3[536862930] = -219021312;
  v3[536862931] = 62194;
  v3[536862933] = -219021312;
  v3[536862934] = 62194;
  v3[536862936] = -219021312;
  v3[536862937] = 62194;
  v3[536862939] = -219021312;
  v3[536862940] = 62194;
  v3[536862942] = -219021312;
  v3[536862943] = 62194;
  v3[536862945] = -219021312;
  v3[536862946] = 62194;
  v3[536862948] = -219021312;
  v3[536862949] = 62194;
  v3[536862951] = -219021312;
  v3[536862952] = 62194;
  v3[536862954] = -219021312;
  v3[536862955] = 62194;
  v3[536862957] = -219021312;
  v3[536862958] = 62194;
  v3[536862960] = -219021312;
  v3[536862961] = 62194;
  v3[536862963] = -219021312;
  v3[536862964] = 62194;
  v3[536862966] = -219021312;
  v3[536862967] = 62194;
  v3[536862969] = -219021312;
  v3[536862970] = 62194;
  v3[536862972] = -219021312;
  v3[536862973] = 62194;
  v3[536862975] = -219021312;
  v3[536862976] = 62194;
  v3[536862978] = -219021312;
  v3[536862979] = 62194;
  v3[536862981] = -219021312;
  v3[536862982] = 62194;
  v3[536862984] = -219021312;
  v3[536862985] = 62194;
  v3[536862987] = -219021312;
  v3[536862988] = 62194;
  v3[536862990] = -219021312;
  v3[536862991] = 62194;
  v3[536862993] = -219021312;
  v3[536862994] = 62194;
  v3[536862996] = -219021312;
  v3[536862997] = 62194;
  v3[536862999] = -219021312;
  v3[536863000] = 62194;
  v3[536863002] = -219021312;
  v3[536863003] = 62194;
  v3[536863005] = -219021312;
  v3[536863006] = 62194;
  v3[536863008] = -219021312;
  v3[536863009] = 62194;
  v3[536863011] = -219021312;
  v3[536863012] = 62194;
  v3[536863014] = -219021312;
  v3[536863015] = 62194;
  v3[536863017] = -219021312;
  v3[536863018] = 62194;
  v3[536863020] = -219021312;
  v3[536863021] = 62194;
  v3[536863023] = -219021312;
  v3[536863024] = 62194;
  v3[536863026] = -219021312;
  v3[536863027] = 62194;
  v3[536863029] = -219021312;
  v3[536863030] = 62194;
  v3[536863032] = -219021312;
  v3[536863033] = 62194;
  v3[536863035] = -219021312;
  v3[536863036] = 62194;
  v3[536863038] = -219021312;
  v3[536863039] = 62194;
  v3[536863041] = -219021312;
  v3[536863042] = 62194;
  v3[536863044] = -219021312;
  v3[536863045] = 62194;
  v3[536863047] = -219021312;
  v3[536863048] = 62194;
  v3[536863050] = -219021312;
  v3[536863051] = 62194;
  v3[536863053] = -219021312;
  v3[536863054] = 62194;
  v3[536863056] = -219021312;
  v3[536863057] = 62194;
  v3[536863059] = -219021312;
  v3[536863060] = 62194;
  v3[536863062] = -219021312;
  v3[536863063] = 62194;
  v3[536863065] = -219021312;
  v3[536863066] = 62194;
  v3[536863068] = -219021312;
  v3[536863069] = 62194;
  v3[536863071] = -219021312;
  v3[536863072] = 62194;
  v3[536863074] = -219021312;
  v3[536863075] = 62194;
  v3[536863077] = -219021312;
  v3[536863078] = 62194;
  v3[536863080] = -219021312;
  v3[536863081] = 62194;
  v3[536863083] = -219021312;
  v3[536863084] = 62194;
  v3[536863086] = -219021312;
  v3[536863087] = 62194;
  v3[536863089] = -219021312;
  v3[536863090] = 62194;
  v3[536863092] = -219021312;
  v3[536863093] = 62194;
  v3[536863095] = -219021312;
  v3[536863096] = 62194;
  v3[536863098] = -219021312;
  v3[536863099] = 62194;
  v3[536863101] = -219021312;
  v3[536863102] = 62194;
  v3[536863104] = -219021312;
  v3[536863105] = 62194;
  v3[536863107] = -219021312;
  v3[536863108] = 62194;
  v3[536863110] = -219021312;
  v3[536863111] = 62194;
  v3[536863113] = -219021312;
  v3[536863114] = 62194;
  v3[536863116] = -219021312;
  v3[536863117] = 62194;
  v3[536863119] = -219021312;
  v3[536863120] = 62194;
  v3[536863122] = -219021312;
  v3[536863123] = 62194;
  v3[536863125] = -219021312;
  v3[536863126] = 62194;
  v3[536863128] = -219021312;
  v3[536863129] = 62194;
  v3[536863131] = -219021312;
  v3[536863132] = 62194;
  v3[536863134] = -219021312;
  v3[536863135] = 62194;
  v3[536863137] = -219021312;
  v3[536863138] = 62194;
  v3[536863140] = -219021312;
  v3[536863141] = 62194;
  v3[536863143] = -219021312;
  v3[536863144] = 62194;
  v3[536863146] = -219021312;
  v3[536863147] = 62194;
  v3[536863149] = -219021312;
  v3[536863150] = 62194;
  v3[536863152] = -219021312;
  v3[536863153] = 62194;
  v3[536863155] = -219021312;
  v3[536863156] = 62194;
  v3[536863158] = -219021312;
  v3[536863159] = 62194;
  v3[536863161] = -219021312;
  v3[536863162] = 62194;
  v3[536863164] = -219021312;
  v3[536863165] = 62194;
  v3[536863167] = -219021312;
  v3[536863168] = 62194;
  v3[536863170] = -219021312;
  v3[536863171] = 62194;
  v3[536863173] = -219021312;
  v3[536863174] = 62194;
  v3[536863176] = -219021312;
  v3[536863177] = 62194;
  v3[536863179] = -219021312;
  v3[536863180] = 62194;
  v3[536863182] = -219021312;
  v3[536863183] = 62194;
  v3[536863185] = -219021312;
  v3[536863186] = 62194;
  v3[536863188] = -219021312;
  v3[536863189] = 62194;
  v3[536863191] = -219021312;
  v3[536863192] = 62194;
  v3[536863194] = -219021312;
  v3[536863195] = 62194;
  v3[536863197] = -219021312;
  v3[536863198] = 62194;
  v3[536863200] = -219021312;
  v3[536863201] = 62194;
  v3[536863203] = -219021312;
  v3[536863204] = 62194;
  v3[536863206] = -219021312;
  v3[536863207] = 62194;
  v3[536863209] = -219021312;
  v3[536863210] = 62194;
  v3[536863212] = -219021312;
  v3[536863213] = 62194;
  v3[536863215] = -219021312;
  v3[536863216] = 62194;
  v3[536863218] = -219021312;
  v3[536863219] = 62194;
  v3[536863221] = -219021312;
  v3[536863222] = 62194;
  v3[536863224] = -219021312;
  v3[536863225] = 62194;
  v3[536863227] = -219021312;
  v3[536863228] = 62194;
  v3[536863230] = -219021312;
  v3[536863231] = 62194;
  v3[536863233] = -219021312;
  v3[536863234] = 62194;
  v3[536863236] = -219021312;
  v3[536863237] = 62194;
  v3[536863239] = -219021312;
  v3[536863240] = 62194;
  v3[536863242] = -219021312;
  v3[536863243] = 62194;
  v3[536863245] = -219021312;
  v3[536863246] = 62194;
  v3[536863248] = -219021312;
  v3[536863249] = 62194;
  v3[536863251] = -219021312;
  v3[536863252] = 62194;
  v3[536863254] = -219021312;
  v3[536863255] = 62194;
  v3[536863257] = -219021312;
  v3[536863258] = 62194;
  v3[536863260] = -219021312;
  v3[536863261] = 62194;
  v3[536863263] = -219021312;
  v3[536863264] = 62194;
  v3[536863266] = -219021312;
  v3[536863267] = 62194;
  v3[536863269] = -219021312;
  v3[536863270] = 62194;
  v3[536863272] = -219021312;
  v3[536863273] = 62194;
  v3[536863275] = -219021312;
  v3[536863276] = 62194;
  v3[536863278] = -219021312;
  v3[536863279] = 62194;
  v3[536863281] = -219021312;
  v3[536863282] = 62194;
  v3[536863284] = -219021312;
  v3[536863285] = 62194;
  v3[536863287] = -219021312;
  v3[536863288] = 62194;
  v3[536863290] = -219021312;
  v3[536863291] = 62194;
  v3[536863293] = -219021312;
  v3[536863294] = 62194;
  v3[536863296] = -219021312;
  v3[536863297] = 62194;
  v3[536863299] = -219021312;
  v3[536863300] = 62194;
  v3[536863302] = -219021312;
  v3[536863303] = 62194;
  v3[536863305] = -219021312;
  v3[536863306] = 62194;
  v3[536863308] = -219021312;
  v3[536863309] = 62194;
  v3[536863311] = -219021312;
  v3[536863312] = 62194;
  v3[536863314] = -219021312;
  v3[536863315] = 62194;
  v3[536863317] = -219021312;
  v3[536863318] = 62194;
  v3[536863320] = -219021312;
  v3[536863321] = 62194;
  v3[536863323] = -219021312;
  v3[536863324] = 62194;
  v3[536863326] = -219021312;
  v3[536863327] = 62194;
  v3[536863329] = -219021312;
  v3[536863330] = 62194;
  v3[536863332] = -219021312;
  v3[536863333] = 62194;
  v3[536863335] = -219021312;
  v3[536863336] = 62194;
  v3[536863338] = -219021312;
  v3[536863339] = 62194;
  v3[536863341] = -219021312;
  v3[536863342] = 62194;
  v3[536863344] = -219021312;
  v3[536863345] = 62194;
  v3[536863347] = -219021312;
  v3[536863348] = 62194;
  v3[536863350] = -219021312;
  v3[536863351] = 62194;
  v3[536863353] = -219021312;
  v3[536863354] = 62194;
  v3[536863356] = -219021312;
  v3[536863357] = 62194;
  v3[536863359] = -219021312;
  v3[536863360] = 62194;
  v3[536863362] = -219021312;
  v3[536863363] = 62194;
  v3[536863365] = -219021312;
  v3[536863366] = 62194;
  v3[536863368] = -219021312;
  v3[536863369] = 62194;
  v3[536863371] = -219021312;
  v3[536863372] = 62194;
  v3[536863374] = -219021312;
  v3[536863375] = 62194;
  v3[536863377] = -219021312;
  v3[536863378] = 62194;
  v3[536863380] = -219021312;
  v3[536863381] = 62194;
  v3[536863383] = -219021312;
  v3[536863384] = 62194;
  v3[536863386] = -219021312;
  v3[536863387] = 62194;
  v3[536863389] = -219021312;
  v3[536863390] = 62194;
  v3[536863392] = -219021312;
  v3[536863393] = 62194;
  v3[536863395] = -219021312;
  v3[536863396] = 62194;
  v3[536863398] = -219021312;
  v3[536863399] = 62194;
  v3[536863401] = -219021312;
  v3[536863402] = 62194;
  v3[536863404] = -219021312;
  v3[536863405] = 62194;
  v3[536863407] = -219021312;
  v3[536863408] = 62194;
  v3[536863410] = -219021312;
  v3[536863411] = 62194;
  v3[536863413] = -219021312;
  v3[536863414] = 62194;
  v3[536863416] = -219021312;
  v3[536863417] = 62194;
  v3[536863419] = -219021312;
  v3[536863420] = 62194;
  v3[536863422] = -219021312;
  v3[536863423] = 62194;
  v3[536863425] = -219021312;
  v3[536863426] = 62194;
  v3[536863428] = -219021312;
  v3[536863429] = 62194;
  v3[536863431] = -219021312;
  v3[536863432] = 62194;
  v3[536863434] = -219021312;
  v3[536863435] = 62194;
  v3[536863437] = -219021312;
  v3[536863438] = 62194;
  v3[536863440] = -219021312;
  v3[536863441] = 62194;
  v3[536863443] = -219021312;
  v3[536863444] = 62194;
  v3[536863446] = -219021312;
  v3[536863447] = 62194;
  v3[536863449] = -219021312;
  v3[536863450] = 62194;
  v3[536863452] = -219021312;
  v3[536863453] = 62194;
  v3[536863923] = -218103808;
  v3[536863924] = -202116109;
  v3[536863925] = -202116109;
  v3[536863926] = -202116109;
  v3[536863927] = -202116109;
  v3[536863928] = -202116109;
  v3[536863929] = -202116109;
  v3[536863930] = -202116109;
  v3[536863931] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getOpenStateTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getOpenStateTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3408),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[16])"OPEN_STATE_NONE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23472),
      (data::OpenStateType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 3408));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[12],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3504),
      (const char (*)[12])"PAIMON_OPEN",
      (const char (*)[18])"OPEN_STATE_PAIMON");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23544),
      (data::OpenStateType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 3504));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[18],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3600),
      (const char (*)[18])"PAIMON_NAVIGATION",
      (const char (*)[29])"OPEN_STATE_PAIMON_NAVIGATION");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23616),
      (data::OpenStateType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 3600));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3696),
      (const char (*)[26])"OPEN_STATE_AVATAR_PROMOTE",
      (const char (*)[26])"OPEN_STATE_AVATAR_PROMOTE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23688),
      (data::OpenStateType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 3696));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3792),
      (const char (*)[25])"OPEN_STATE_AVATAR_TALENT",
      (const char (*)[25])"OPEN_STATE_AVATAR_TALENT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23760),
      (data::OpenStateType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 3792));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3888),
      (const char (*)[26])"OPEN_STATE_WEAPON_PROMOTE",
      (const char (*)[26])"OPEN_STATE_WEAPON_PROMOTE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23832),
      (data::OpenStateType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 3888));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3984),
      (const char (*)[25])"OPEN_STATE_WEAPON_AWAKEN",
      (const char (*)[25])"OPEN_STATE_WEAPON_AWAKEN");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23904),
      (data::OpenStateType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 3984));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4080),
      (const char (*)[24])"OPEN_STATE_QUEST_REMIND",
      (const char (*)[24])"OPEN_STATE_QUEST_REMIND");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 23976),
      (data::OpenStateType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 4080));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4176),
      (const char (*)[22])"OPEN_STATE_GAME_GUIDE",
      (const char (*)[22])"OPEN_STATE_GAME_GUIDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24048),
      (data::OpenStateType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 4176));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4272),
      (const char (*)[16])"OPEN_STATE_COOK",
      (const char (*)[16])"OPEN_STATE_COOK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24120),
      (data::OpenStateType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 4272));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4368),
      (const char (*)[26])"OPEN_STATE_WEAPON_UPGRADE",
      (const char (*)[26])"OPEN_STATE_WEAPON_UPGRADE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24192),
      (data::OpenStateType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 4368));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4464),
      (const char (*)[29])"OPEN_STATE_RELIQUARY_UPGRADE",
      (const char (*)[29])"OPEN_STATE_RELIQUARY_UPGRADE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24264),
      (data::OpenStateType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 4464));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4560),
      (const char (*)[29])"OPEN_STATE_RELIQUARY_PROMOTE",
      (const char (*)[29])"OPEN_STATE_RELIQUARY_PROMOTE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24336),
      (data::OpenStateType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 4560));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 13;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4656),
      (const char (*)[32])"OPEN_STATE_WEAPON_PROMOTE_GUIDE",
      (const char (*)[32])"OPEN_STATE_WEAPON_PROMOTE_GUIDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24408),
      (data::OpenStateType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 4656));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 14;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4752),
      (const char (*)[31])"OPEN_STATE_WEAPON_CHANGE_GUIDE",
      (const char (*)[31])"OPEN_STATE_WEAPON_CHANGE_GUIDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24480),
      (data::OpenStateType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 4752));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, v1 + 288);
    *(_DWORD *)(v1 + 304) = 15;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4848),
      (const char (*)[29])"OPEN_STATE_PLAYER_LVUP_GUIDE",
      (const char (*)[29])"OPEN_STATE_PLAYER_LVUP_GUIDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24552),
      (data::OpenStateType *)(v1 + 304),
      (const std::pair<std::string,std::string > *)(v1 + 4848));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, v1 + 304);
    *(_DWORD *)(v1 + 320) = 16;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4944),
      (const char (*)[26])"OPEN_STATE_FRESHMAN_GUIDE",
      (const char (*)[26])"OPEN_STATE_FRESHMAN_GUIDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24624),
      (data::OpenStateType *)(v1 + 320),
      (const std::pair<std::string,std::string > *)(v1 + 4944));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, v1 + 320);
    *(_DWORD *)(v1 + 336) = 17;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5040),
      (const char (*)[31])"OPEN_STATE_SKIP_FRESHMAN_GUIDE",
      (const char (*)[31])"OPEN_STATE_SKIP_FRESHMAN_GUIDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24696),
      (data::OpenStateType *)(v1 + 336),
      (const std::pair<std::string,std::string > *)(v1 + 5040));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, v1 + 336);
    *(_DWORD *)(v1 + 352) = 18;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5136),
      (const char (*)[29])"OPEN_STATE_GUIDE_MOVE_CAMERA",
      (const char (*)[29])"OPEN_STATE_GUIDE_MOVE_CAMERA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24768),
      (data::OpenStateType *)(v1 + 352),
      (const std::pair<std::string,std::string > *)(v1 + 5136));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, v1 + 352);
    *(_DWORD *)(v1 + 368) = 19;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5232),
      (const char (*)[30])"OPEN_STATE_GUIDE_SCALE_CAMERA",
      (const char (*)[30])"OPEN_STATE_GUIDE_SCALE_CAMERA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24840),
      (data::OpenStateType *)(v1 + 368),
      (const std::pair<std::string,std::string > *)(v1 + 5232));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, v1 + 368);
    *(_DWORD *)(v1 + 384) = 20;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5328),
      (const char (*)[26])"OPEN_STATE_GUIDE_KEYBOARD",
      (const char (*)[26])"OPEN_STATE_GUIDE_KEYBOARD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24912),
      (data::OpenStateType *)(v1 + 384),
      (const std::pair<std::string,std::string > *)(v1 + 5328));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, v1 + 384);
    *(_DWORD *)(v1 + 400) = 21;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5424),
      (const char (*)[22])"OPEN_STATE_GUIDE_MOVE",
      (const char (*)[22])"OPEN_STATE_GUIDE_MOVE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 24984),
      (data::OpenStateType *)(v1 + 400),
      (const std::pair<std::string,std::string > *)(v1 + 5424));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, v1 + 400);
    *(_DWORD *)(v1 + 416) = 22;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5520),
      (const char (*)[22])"OPEN_STATE_GUIDE_JUMP",
      (const char (*)[22])"OPEN_STATE_GUIDE_JUMP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25056),
      (data::OpenStateType *)(v1 + 416),
      (const std::pair<std::string,std::string > *)(v1 + 5520));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, v1 + 416);
    *(_DWORD *)(v1 + 432) = 23;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5616),
      (const char (*)[24])"OPEN_STATE_GUIDE_SPRINT",
      (const char (*)[24])"OPEN_STATE_GUIDE_SPRINT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25128),
      (data::OpenStateType *)(v1 + 432),
      (const std::pair<std::string,std::string > *)(v1 + 5616));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, v1 + 432);
    *(_DWORD *)(v1 + 448) = 24;
    std::pair<std::string,std::string>::pair<char const(&)[21],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5712),
      (const char (*)[21])"OPEN_STATE_GUIDE_MAP",
      (const char (*)[21])"OPEN_STATE_GUIDE_MAP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25200),
      (data::OpenStateType *)(v1 + 448),
      (const std::pair<std::string,std::string > *)(v1 + 5712));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, v1 + 448);
    *(_DWORD *)(v1 + 464) = 25;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5808),
      (const char (*)[24])"OPEN_STATE_GUIDE_ATTACK",
      (const char (*)[24])"OPEN_STATE_GUIDE_ATTACK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25272),
      (data::OpenStateType *)(v1 + 464),
      (const std::pair<std::string,std::string > *)(v1 + 5808));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, v1 + 464);
    *(_DWORD *)(v1 + 480) = 26;
    std::pair<std::string,std::string>::pair<char const(&)[21],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5904),
      (const char (*)[21])"OPEN_STATE_GUIDE_FLY",
      (const char (*)[21])"OPEN_STATE_GUIDE_FLY");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25344),
      (data::OpenStateType *)(v1 + 480),
      (const std::pair<std::string,std::string > *)(v1 + 5904));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, v1 + 480);
    *(_DWORD *)(v1 + 496) = 27;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6000),
      (const char (*)[24])"OPEN_STATE_GUIDE_TALENT",
      (const char (*)[24])"OPEN_STATE_GUIDE_TALENT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25416),
      (data::OpenStateType *)(v1 + 496),
      (const std::pair<std::string,std::string > *)(v1 + 6000));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, v1 + 496);
    *(_DWORD *)(v1 + 512) = 28;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6096),
      (const char (*)[23])"OPEN_STATE_GUIDE_RELIC",
      (const char (*)[23])"OPEN_STATE_GUIDE_RELIC");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25488),
      (data::OpenStateType *)(v1 + 512),
      (const std::pair<std::string,std::string > *)(v1 + 6096));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, v1 + 512);
    *(_DWORD *)(v1 + 528) = 29;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6192),
      (const char (*)[28])"OPEN_STATE_GUIDE_RELIC_PROM",
      (const char (*)[28])"OPEN_STATE_GUIDE_RELIC_PROM");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25560),
      (data::OpenStateType *)(v1 + 528),
      (const std::pair<std::string,std::string > *)(v1 + 6192));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, v1 + 528);
    *(_DWORD *)(v1 + 544) = 30;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6288),
      (const char (*)[19])"OPEN_STATE_COMBINE",
      (const char (*)[19])"OPEN_STATE_COMBINE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25632),
      (data::OpenStateType *)(v1 + 544),
      (const std::pair<std::string,std::string > *)(v1 + 6288));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, v1 + 544);
    *(_DWORD *)(v1 + 560) = 31;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6384),
      (const char (*)[17])"OPEN_STATE_GACHA",
      (const char (*)[17])"OPEN_STATE_GACHA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25704),
      (data::OpenStateType *)(v1 + 560),
      (const std::pair<std::string,std::string > *)(v1 + 6384));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, v1 + 560);
    *(_DWORD *)(v1 + 576) = 32;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6480),
      (const char (*)[23])"OPEN_STATE_GUIDE_GACHA",
      (const char (*)[23])"OPEN_STATE_GUIDE_GACHA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25776),
      (data::OpenStateType *)(v1 + 576),
      (const std::pair<std::string,std::string > *)(v1 + 6480));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, v1 + 576);
    *(_DWORD *)(v1 + 592) = 33;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6576),
      (const char (*)[22])"OPEN_STATE_GUIDE_TEAM",
      (const char (*)[22])"OPEN_STATE_GUIDE_TEAM");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25848),
      (data::OpenStateType *)(v1 + 592),
      (const std::pair<std::string,std::string > *)(v1 + 6576));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, v1 + 592);
    *(_DWORD *)(v1 + 608) = 34;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6672),
      (const char (*)[23])"OPEN_STATE_GUIDE_PROUD",
      (const char (*)[23])"OPEN_STATE_GUIDE_PROUD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25920),
      (data::OpenStateType *)(v1 + 608),
      (const std::pair<std::string,std::string > *)(v1 + 6672));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, v1 + 608);
    *(_DWORD *)(v1 + 624) = 35;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6768),
      (const char (*)[32])"OPEN_STATE_GUIDE_AVATAR_PROMOTE",
      (const char (*)[32])"OPEN_STATE_GUIDE_AVATAR_PROMOTE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 25992),
      (data::OpenStateType *)(v1 + 624),
      (const std::pair<std::string,std::string > *)(v1 + 6768));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, v1 + 624);
    *(_DWORD *)(v1 + 640) = 36;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6864),
      (const char (*)[32])"OPEN_STATE_GUIDE_ADVENTURE_CARD",
      (const char (*)[32])"OPEN_STATE_GUIDE_ADVENTURE_CARD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26064),
      (data::OpenStateType *)(v1 + 640),
      (const std::pair<std::string,std::string > *)(v1 + 6864));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, v1 + 640);
    *(_DWORD *)(v1 + 656) = 37;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6960),
      (const char (*)[17])"OPEN_STATE_FORGE",
      (const char (*)[17])"OPEN_STATE_FORGE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26136),
      (data::OpenStateType *)(v1 + 656),
      (const std::pair<std::string,std::string > *)(v1 + 6960));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, v1 + 656);
    *(_DWORD *)(v1 + 672) = 38;
    std::pair<std::string,std::string>::pair<char const(&)[21],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7056),
      (const char (*)[21])"OPEN_STATE_GUIDE_BAG",
      (const char (*)[21])"OPEN_STATE_GUIDE_BAG");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26208),
      (data::OpenStateType *)(v1 + 672),
      (const std::pair<std::string,std::string > *)(v1 + 7056));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, v1 + 672);
    *(_DWORD *)(v1 + 688) = 39;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7152),
      (const char (*)[22])"OPEN_STATE_EXPEDITION",
      (const char (*)[22])"OPEN_STATE_EXPEDITION");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26280),
      (data::OpenStateType *)(v1 + 688),
      (const std::pair<std::string,std::string > *)(v1 + 7152));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, v1 + 688);
    *(_DWORD *)(v1 + 704) = 40;
    std::pair<std::string,std::string>::pair<char const(&)[37],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7248),
      (const char (*)[37])"OPEN_STATE_GUIDE_ADVENTURE_DAILYTASK",
      (const char (*)[37])"OPEN_STATE_GUIDE_ADVENTURE_DAILYTASK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26352),
      (data::OpenStateType *)(v1 + 704),
      (const std::pair<std::string,std::string > *)(v1 + 7248));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, v1 + 704);
    *(_DWORD *)(v1 + 720) = 41;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7344),
      (const char (*)[35])"OPEN_STATE_GUIDE_ADVENTURE_DUNGEON",
      (const char (*)[35])"OPEN_STATE_GUIDE_ADVENTURE_DUNGEON");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26424),
      (data::OpenStateType *)(v1 + 720),
      (const std::pair<std::string,std::string > *)(v1 + 7344));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, v1 + 720);
    *(_DWORD *)(v1 + 736) = 42;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7440),
      (const char (*)[17])"OPEN_STATE_TOWER",
      (const char (*)[17])"OPEN_STATE_TOWER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26496),
      (data::OpenStateType *)(v1 + 736),
      (const std::pair<std::string,std::string > *)(v1 + 7440));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, v1 + 736);
    *(_DWORD *)(v1 + 752) = 43;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7536),
      (const char (*)[25])"OPEN_STATE_WORLD_STAMINA",
      (const char (*)[25])"OPEN_STATE_WORLD_STAMINA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26568),
      (data::OpenStateType *)(v1 + 752),
      (const std::pair<std::string,std::string > *)(v1 + 7536));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, v1 + 752);
    *(_DWORD *)(v1 + 768) = 44;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7632),
      (const char (*)[29])"OPEN_STATE_TOWER_FIRST_ENTER",
      (const char (*)[29])"OPEN_STATE_TOWER_FIRST_ENTER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26640),
      (data::OpenStateType *)(v1 + 768),
      (const std::pair<std::string,std::string > *)(v1 + 7632));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, v1 + 768);
    *(_DWORD *)(v1 + 784) = 45;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7728),
      (const char (*)[17])"OPEN_STATE_RESIN",
      (const char (*)[17])"OPEN_STATE_RESIN");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26712),
      (data::OpenStateType *)(v1 + 784),
      (const std::pair<std::string,std::string > *)(v1 + 7728));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, v1 + 784);
    *(_DWORD *)(v1 + 800) = 47;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7824),
      (const char (*)[34])"OPEN_STATE_LIMIT_REGION_FRESHMEAT",
      (const char (*)[34])"OPEN_STATE_LIMIT_REGION_FRESHMEAT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26784),
      (data::OpenStateType *)(v1 + 800),
      (const std::pair<std::string,std::string > *)(v1 + 7824));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, v1 + 800);
    *(_DWORD *)(v1 + 816) = 48;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7920),
      (const char (*)[31])"OPEN_STATE_LIMIT_REGION_GLOBAL",
      (const char (*)[31])"OPEN_STATE_LIMIT_REGION_GLOBAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26856),
      (data::OpenStateType *)(v1 + 816),
      (const std::pair<std::string,std::string > *)(v1 + 7920));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, v1 + 816);
    *(_DWORD *)(v1 + 832) = 49;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8016),
      (const char (*)[23])"OPEN_STATE_MULTIPLAYER",
      (const char (*)[23])"OPEN_STATE_MULTIPLAYER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 26928),
      (data::OpenStateType *)(v1 + 832),
      (const std::pair<std::string,std::string > *)(v1 + 8016));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, v1 + 832);
    *(_DWORD *)(v1 + 848) = 50;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8112),
      (const char (*)[25])"OPEN_STATE_GUIDE_MOUSEPC",
      (const char (*)[25])"OPEN_STATE_GUIDE_MOUSEPC");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27000),
      (data::OpenStateType *)(v1 + 848),
      (const std::pair<std::string,std::string > *)(v1 + 8112));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, v1 + 848);
    *(_DWORD *)(v1 + 864) = 51;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8208),
      (const char (*)[29])"OPEN_STATE_GUIDE_MULTIPLAYER",
      (const char (*)[29])"OPEN_STATE_GUIDE_MULTIPLAYER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27072),
      (data::OpenStateType *)(v1 + 864),
      (const std::pair<std::string,std::string > *)(v1 + 8208));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, v1 + 864);
    *(_DWORD *)(v1 + 880) = 52;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8304),
      (const char (*)[31])"OPEN_STATE_GUIDE_DUNGEONREWARD",
      (const char (*)[31])"OPEN_STATE_GUIDE_DUNGEONREWARD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27144),
      (data::OpenStateType *)(v1 + 880),
      (const std::pair<std::string,std::string > *)(v1 + 8304));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, v1 + 880);
    *(_DWORD *)(v1 + 896) = 53;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8400),
      (const char (*)[25])"OPEN_STATE_GUIDE_BLOSSOM",
      (const char (*)[25])"OPEN_STATE_GUIDE_BLOSSOM");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27216),
      (data::OpenStateType *)(v1 + 896),
      (const std::pair<std::string,std::string > *)(v1 + 8400));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, v1 + 896);
    *(_DWORD *)(v1 + 912) = 54;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8496),
      (const char (*)[26])"OPEN_STATE_AVATAR_FASHION",
      (const char (*)[26])"OPEN_STATE_AVATAR_FASHION");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27288),
      (data::OpenStateType *)(v1 + 912),
      (const std::pair<std::string,std::string > *)(v1 + 8496));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, v1 + 912);
    *(_DWORD *)(v1 + 928) = 55;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8592),
      (const char (*)[22])"OPEN_STATE_PHOTOGRAPH",
      (const char (*)[22])"OPEN_STATE_PHOTOGRAPH");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27360),
      (data::OpenStateType *)(v1 + 928),
      (const std::pair<std::string,std::string > *)(v1 + 8592));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, v1 + 928);
    *(_DWORD *)(v1 + 944) = 56;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8688),
      (const char (*)[26])"OPEN_STATE_GUIDE_KSLQUEST",
      (const char (*)[26])"OPEN_STATE_GUIDE_KSLQUEST");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27432),
      (data::OpenStateType *)(v1 + 944),
      (const std::pair<std::string,std::string > *)(v1 + 8688));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, v1 + 944);
    *(_DWORD *)(v1 + 960) = 57;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8784),
      (const char (*)[25])"OPEN_STATE_PERSONAL_LINE",
      (const char (*)[25])"OPEN_STATE_PERSONAL_LINE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27504),
      (data::OpenStateType *)(v1 + 960),
      (const std::pair<std::string,std::string > *)(v1 + 8784));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, v1 + 960);
    *(_DWORD *)(v1 + 976) = 58;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8880),
      (const char (*)[31])"OPEN_STATE_GUIDE_PERSONAL_LINE",
      (const char (*)[31])"OPEN_STATE_GUIDE_PERSONAL_LINE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27576),
      (data::OpenStateType *)(v1 + 976),
      (const std::pair<std::string,std::string > *)(v1 + 8880));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, v1 + 976);
    *(_DWORD *)(v1 + 992) = 59;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8976),
      (const char (*)[28])"OPEN_STATE_GUIDE_APPEARANCE",
      (const char (*)[28])"OPEN_STATE_GUIDE_APPEARANCE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27648),
      (data::OpenStateType *)(v1 + 992),
      (const std::pair<std::string,std::string > *)(v1 + 8976));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, v1 + 992);
    *(_DWORD *)(v1 + 1008) = 60;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9072),
      (const char (*)[25])"OPEN_STATE_GUIDE_PROCESS",
      (const char (*)[25])"OPEN_STATE_GUIDE_PROCESS");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27720),
      (data::OpenStateType *)(v1 + 1008),
      (const std::pair<std::string,std::string > *)(v1 + 9072));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, v1 + 1008);
    *(_DWORD *)(v1 + 1024) = 61;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9168),
      (const char (*)[35])"OPEN_STATE_GUIDE_PERSONAL_LINE_KEY",
      (const char (*)[35])"OPEN_STATE_GUIDE_PERSONAL_LINE_KEY");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27792),
      (data::OpenStateType *)(v1 + 1024),
      (const std::pair<std::string,std::string > *)(v1 + 9168));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, v1 + 1024);
    *(_DWORD *)(v1 + 1040) = 62;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9264),
      (const char (*)[24])"OPEN_STATE_GUIDE_WIDGET",
      (const char (*)[24])"OPEN_STATE_GUIDE_WIDGET");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27864),
      (data::OpenStateType *)(v1 + 1040),
      (const std::pair<std::string,std::string > *)(v1 + 9264));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, v1 + 1040);
    *(_DWORD *)(v1 + 1056) = 63;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9360),
      (const char (*)[38])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_ASTER",
      (const char (*)[38])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_ASTER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 27936),
      (data::OpenStateType *)(v1 + 1056),
      (const std::pair<std::string,std::string > *)(v1 + 9360));
    if ( *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1072, v1 + 1056);
    *(_DWORD *)(v1 + 1072) = 64;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9456),
      (const char (*)[29])"OPEN_STATE_GUIDE_COLDCLIMATE",
      (const char (*)[29])"OPEN_STATE_GUIDE_COLDCLIMATE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28008),
      (data::OpenStateType *)(v1 + 1072),
      (const std::pair<std::string,std::string > *)(v1 + 9456));
    if ( *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1088, v1 + 1072);
    *(_DWORD *)(v1 + 1088) = 65;
    std::pair<std::string,std::string>::pair<char const(&)[27],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9552),
      (const char (*)[27])"OPEN_STATE_DERIVATIVE_MALL",
      (const char (*)[27])"OPEN_STATE_DERIVATIVE_MALL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28080),
      (data::OpenStateType *)(v1 + 1088),
      (const std::pair<std::string,std::string > *)(v1 + 9552));
    if ( *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1104, v1 + 1088);
    *(_DWORD *)(v1 + 1104) = 66;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9648),
      (const char (*)[33])"OPEN_STATE_GUIDE_EXITMULTIPLAYER",
      (const char (*)[33])"OPEN_STATE_GUIDE_EXITMULTIPLAYER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28152),
      (data::OpenStateType *)(v1 + 1104),
      (const std::pair<std::string,std::string > *)(v1 + 9648));
    if ( *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1120, v1 + 1104);
    *(_DWORD *)(v1 + 1120) = 67;
    std::pair<std::string,std::string>::pair<char const(&)[41],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9744),
      (const char (*)[41])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD",
      (const char (*)[41])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28224),
      (data::OpenStateType *)(v1 + 1120),
      (const std::pair<std::string,std::string > *)(v1 + 9744));
    if ( *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1136, v1 + 1120);
    *(_DWORD *)(v1 + 1136) = 68;
    std::pair<std::string,std::string>::pair<char const(&)[43],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9840),
      (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_REBUILD",
      (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_REBUILD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28296),
      (data::OpenStateType *)(v1 + 1136),
      (const std::pair<std::string,std::string > *)(v1 + 9840));
    if ( *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1152, v1 + 1136);
    *(_DWORD *)(v1 + 1152) = 69;
    std::pair<std::string,std::string>::pair<char const(&)[40],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9936),
      (const char (*)[40])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CARD",
      (const char (*)[40])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CARD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28368),
      (data::OpenStateType *)(v1 + 1152),
      (const std::pair<std::string,std::string > *)(v1 + 9936));
    if ( *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1168, v1 + 1152);
    *(_DWORD *)(v1 + 1168) = 70;
    std::pair<std::string,std::string>::pair<char const(&)[43],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10032),
      (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MONSTER",
      (const char (*)[43])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MONSTER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28440),
      (data::OpenStateType *)(v1 + 1168),
      (const std::pair<std::string,std::string > *)(v1 + 10032));
    if ( *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1184, v1 + 1168);
    *(_DWORD *)(v1 + 1184) = 71;
    std::pair<std::string,std::string>::pair<char const(&)[49],char const(&)[49],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10128),
      (const char (*)[49])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MISSION_CHECK",
      (const char (*)[49])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MISSION_CHECK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28512),
      (data::OpenStateType *)(v1 + 1184),
      (const std::pair<std::string,std::string > *)(v1 + 10128));
    if ( *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1200, v1 + 1184);
    *(_DWORD *)(v1 + 1200) = 72;
    std::pair<std::string,std::string>::pair<char const(&)[48],char const(&)[48],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10224),
      (const char (*)[48])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD_SELECT",
      (const char (*)[48])"OPEN_STATE_GUIDE_THEATREMACHANICUS_BUILD_SELECT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28584),
      (data::OpenStateType *)(v1 + 1200),
      (const std::pair<std::string,std::string > *)(v1 + 10224));
    if ( *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1216, v1 + 1200);
    *(_DWORD *)(v1 + 1216) = 73;
    std::pair<std::string,std::string>::pair<char const(&)[51],char const(&)[51],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10320),
      (const char (*)[51])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CHALLENGE_START",
      (const char (*)[51])"OPEN_STATE_GUIDE_THEATREMACHANICUS_CHALLENGE_START");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28656),
      (data::OpenStateType *)(v1 + 1216),
      (const std::pair<std::string,std::string > *)(v1 + 10320));
    if ( *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1232, v1 + 1216);
    *(_DWORD *)(v1 + 1232) = 74;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10416),
      (const char (*)[25])"OPEN_STATE_GUIDE_CONVERT",
      (const char (*)[25])"OPEN_STATE_GUIDE_CONVERT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28728),
      (data::OpenStateType *)(v1 + 1232),
      (const std::pair<std::string,std::string > *)(v1 + 10416));
    if ( *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1248, v1 + 1232);
    *(_DWORD *)(v1 + 1248) = 75;
    std::pair<std::string,std::string>::pair<char const(&)[47],char const(&)[47],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10512),
      (const char (*)[47])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MULTIPLAYER",
      (const char (*)[47])"OPEN_STATE_GUIDE_THEATREMACHANICUS_MULTIPLAYER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28800),
      (data::OpenStateType *)(v1 + 1248),
      (const std::pair<std::string,std::string > *)(v1 + 10512));
    if ( *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1264, v1 + 1248);
    *(_DWORD *)(v1 + 1264) = 76;
    std::pair<std::string,std::string>::pair<char const(&)[27],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10608),
      (const char (*)[27])"OPEN_STATE_GUIDE_COOP_TASK",
      (const char (*)[27])"OPEN_STATE_GUIDE_COOP_TASK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28872),
      (data::OpenStateType *)(v1 + 1264),
      (const std::pair<std::string,std::string > *)(v1 + 10608));
    if ( *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1280, v1 + 1264);
    *(_DWORD *)(v1 + 1280) = 77;
    std::pair<std::string,std::string>::pair<char const(&)[39],char const(&)[39],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10704),
      (const char (*)[39])"OPEN_STATE_GUIDE_HOMEWORLD_ADEPTIABODE",
      (const char (*)[39])"OPEN_STATE_GUIDE_HOMEWORLD_ADEPTIABODE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 28944),
      (data::OpenStateType *)(v1 + 1280),
      (const std::pair<std::string,std::string > *)(v1 + 10704));
    if ( *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1296, v1 + 1280);
    *(_DWORD *)(v1 + 1296) = 78;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10800),
      (const char (*)[34])"OPEN_STATE_GUIDE_HOMEWORLD_DEPLOY",
      (const char (*)[34])"OPEN_STATE_GUIDE_HOMEWORLD_DEPLOY");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29016),
      (data::OpenStateType *)(v1 + 1296),
      (const std::pair<std::string,std::string > *)(v1 + 10800));
    if ( *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1312, v1 + 1296);
    *(_DWORD *)(v1 + 1312) = 79;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10896),
      (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP",
      (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29088),
      (data::OpenStateType *)(v1 + 1312),
      (const std::pair<std::string,std::string > *)(v1 + 10896));
    if ( *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1328, v1 + 1312);
    *(_DWORD *)(v1 + 1328) = 80;
    std::pair<std::string,std::string>::pair<char const(&)[44],char const(&)[44],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10992),
      (const char (*)[44])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION",
      (const char (*)[44])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29160),
      (data::OpenStateType *)(v1 + 1328),
      (const std::pair<std::string,std::string > *)(v1 + 10992));
    if ( *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1344, v1 + 1328);
    *(_DWORD *)(v1 + 1344) = 81;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11088),
      (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER",
      (const char (*)[38])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29232),
      (data::OpenStateType *)(v1 + 1344),
      (const std::pair<std::string,std::string > *)(v1 + 11088));
    if ( *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1360, v1 + 1344);
    *(_DWORD *)(v1 + 1360) = 82;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11184),
      (const char (*)[35])"OPEN_STATE_GUIDE_HIDEANDSEEK_SKILL",
      (const char (*)[35])"OPEN_STATE_GUIDE_HIDEANDSEEK_SKILL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29304),
      (data::OpenStateType *)(v1 + 1360),
      (const std::pair<std::string,std::string > *)(v1 + 11184));
    if ( *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1376, v1 + 1360);
    *(_DWORD *)(v1 + 1376) = 83;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11280),
      (const char (*)[35])"OPEN_STATE_GUIDE_HOMEWORLD_MAPLIST",
      (const char (*)[35])"OPEN_STATE_GUIDE_HOMEWORLD_MAPLIST");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29376),
      (data::OpenStateType *)(v1 + 1376),
      (const std::pair<std::string,std::string > *)(v1 + 11280));
    if ( *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1392, v1 + 1376);
    *(_DWORD *)(v1 + 1392) = 84;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11376),
      (const char (*)[30])"OPEN_STATE_GUIDE_RELICRESOLVE",
      (const char (*)[30])"OPEN_STATE_GUIDE_RELICRESOLVE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29448),
      (data::OpenStateType *)(v1 + 1392),
      (const std::pair<std::string,std::string > *)(v1 + 11376));
    if ( *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1408, v1 + 1392);
    *(_DWORD *)(v1 + 1408) = 85;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11472),
      (const char (*)[24])"OPEN_STATE_GUIDE_GGUIDE",
      (const char (*)[24])"OPEN_STATE_GUIDE_GGUIDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29520),
      (data::OpenStateType *)(v1 + 1408),
      (const std::pair<std::string,std::string > *)(v1 + 11472));
    if ( *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1424, v1 + 1408);
    *(_DWORD *)(v1 + 1424) = 86;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11568),
      (const char (*)[29])"OPEN_STATE_GUIDE_GGUIDE_HINT",
      (const char (*)[29])"OPEN_STATE_GUIDE_GGUIDE_HINT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29592),
      (data::OpenStateType *)(v1 + 1424),
      (const std::pair<std::string,std::string > *)(v1 + 11568));
    if ( *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1440, v1 + 1424);
    *(_DWORD *)(v1 + 1440) = 87;
    std::pair<std::string,std::string>::pair<char const(&)[41],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11664),
      (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP_V2",
      (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_EQUIP_V2");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29664),
      (data::OpenStateType *)(v1 + 1440),
      (const std::pair<std::string,std::string > *)(v1 + 11664));
    if ( *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1456, v1 + 1440);
    *(_DWORD *)(v1 + 1456) = 88;
    std::pair<std::string,std::string>::pair<char const(&)[47],char const(&)[47],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11760),
      (const char (*)[47])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION_V2",
      (const char (*)[47])"OPEN_STATE_GUIDE_CHANNELLERSLAB_MP_SOLUTION_V2");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29736),
      (data::OpenStateType *)(v1 + 1456),
      (const std::pair<std::string,std::string > *)(v1 + 11760));
    if ( *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1472, v1 + 1456);
    *(_DWORD *)(v1 + 1472) = 89;
    std::pair<std::string,std::string>::pair<char const(&)[41],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11856),
      (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER_V2",
      (const char (*)[41])"OPEN_STATE_GUIDE_CHANNELLERSLAB_POWER_V2");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29808),
      (data::OpenStateType *)(v1 + 1472),
      (const std::pair<std::string,std::string > *)(v1 + 11856));
    if ( *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1488, v1 + 1472);
    *(_DWORD *)(v1 + 1488) = 90;
    std::pair<std::string,std::string>::pair<char const(&)[40],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11952),
      (const char (*)[40])"OPEN_STATE_GUIDE_QUICK_TEAMMEMBERCHANGE",
      (const char (*)[40])"OPEN_STATE_GUIDE_QUICK_TEAMMEMBERCHANGE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29880),
      (data::OpenStateType *)(v1 + 1488),
      (const std::pair<std::string,std::string > *)(v1 + 11952));
    if ( *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1504, v1 + 1488);
    *(_DWORD *)(v1 + 1504) = 91;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12048),
      (const char (*)[28])"OPEN_STATE_GGUIDE_FIRSTSHOW",
      (const char (*)[28])"OPEN_STATE_GGUIDE_FIRSTSHOW");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 29952),
      (data::OpenStateType *)(v1 + 1504),
      (const std::pair<std::string,std::string > *)(v1 + 12048));
    if ( *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1520, v1 + 1504);
    *(_DWORD *)(v1 + 1520) = 92;
    std::pair<std::string,std::string>::pair<char const(&)[43],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12144),
      (const char (*)[43])"OPEN_STATE_GGUIDE_MAINPAGE_ENTRY_DISAPPEAR",
      (const char (*)[43])"OPEN_STATE_GGUIDE_MAINPAGE_ENTRY_DISAPPEAR");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30024),
      (data::OpenStateType *)(v1 + 1520),
      (const std::pair<std::string,std::string > *)(v1 + 12144));
    if ( *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1536, v1 + 1520);
    *(_DWORD *)(v1 + 1536) = 800;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12240),
      (const char (*)[33])"OPEN_STATE_CITY_REPUATION_MENGDE",
      (const char (*)[33])"OPEN_STATE_CITY_REPUATION_MENGDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30096),
      (data::OpenStateType *)(v1 + 1536),
      (const std::pair<std::string,std::string > *)(v1 + 12240));
    if ( *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1552, v1 + 1536);
    *(_DWORD *)(v1 + 1552) = 801;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12336),
      (const char (*)[32])"OPEN_STATE_CITY_REPUATION_LIYUE",
      (const char (*)[32])"OPEN_STATE_CITY_REPUATION_LIYUE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30168),
      (data::OpenStateType *)(v1 + 1552),
      (const std::pair<std::string,std::string > *)(v1 + 12336));
    if ( *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1568, v1 + 1552);
    *(_DWORD *)(v1 + 1568) = 802;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12432),
      (const char (*)[34])"OPEN_STATE_CITY_REPUATION_UI_HINT",
      (const char (*)[34])"OPEN_STATE_CITY_REPUATION_UI_HINT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30240),
      (data::OpenStateType *)(v1 + 1568),
      (const std::pair<std::string,std::string > *)(v1 + 12432));
    if ( *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1584, v1 + 1568);
    *(_DWORD *)(v1 + 1584) = 803;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12528),
      (const char (*)[34])"OPEN_STATE_CITY_REPUATION_INAZUMA",
      (const char (*)[34])"OPEN_STATE_CITY_REPUATION_INAZUMA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30312),
      (data::OpenStateType *)(v1 + 1584),
      (const std::pair<std::string,std::string > *)(v1 + 12528));
    if ( *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1600, v1 + 1584);
    *(_DWORD *)(v1 + 1600) = 900;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12624),
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_MALL",
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_MALL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30384),
      (data::OpenStateType *)(v1 + 1600),
      (const std::pair<std::string,std::string > *)(v1 + 12624));
    if ( *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1616, v1 + 1600);
    *(_DWORD *)(v1 + 1616) = 901;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12720),
      (const char (*)[33])"OPEN_STATE_SHOP_TYPE_RECOMMANDED",
      (const char (*)[33])"OPEN_STATE_SHOP_TYPE_RECOMMANDED");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30456),
      (data::OpenStateType *)(v1 + 1616),
      (const std::pair<std::string,std::string > *)(v1 + 12720));
    if ( *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1632, v1 + 1616);
    *(_DWORD *)(v1 + 1632) = 902;
    std::pair<std::string,std::string>::pair<char const(&)[36],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12816),
      (const char (*)[36])"OPEN_STATE_SHOP_TYPE_GENESISCRYSTAL",
      (const char (*)[36])"OPEN_STATE_SHOP_TYPE_GENESISCRYSTAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30528),
      (data::OpenStateType *)(v1 + 1632),
      (const std::pair<std::string,std::string > *)(v1 + 12816));
    if ( *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1648, v1 + 1632);
    *(_DWORD *)(v1 + 1648) = 903;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12912),
      (const char (*)[33])"OPEN_STATE_SHOP_TYPE_GIFTPACKAGE",
      (const char (*)[33])"OPEN_STATE_SHOP_TYPE_GIFTPACKAGE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30600),
      (data::OpenStateType *)(v1 + 1648),
      (const std::pair<std::string,std::string > *)(v1 + 12912));
    if ( *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1664, v1 + 1648);
    *(_DWORD *)(v1 + 1664) = 1001;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13008),
      (const char (*)[28])"OPEN_STATE_SHOP_TYPE_PAIMON",
      (const char (*)[28])"OPEN_STATE_SHOP_TYPE_PAIMON");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30672),
      (data::OpenStateType *)(v1 + 1664),
      (const std::pair<std::string,std::string > *)(v1 + 13008));
    if ( *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1680, v1 + 1664);
    *(_DWORD *)(v1 + 1680) = 1002;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13104),
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_CITY",
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_CITY");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30744),
      (data::OpenStateType *)(v1 + 1680),
      (const std::pair<std::string,std::string > *)(v1 + 13104));
    if ( *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1696, v1 + 1680);
    *(_DWORD *)(v1 + 1696) = 1003;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13200),
      (const char (*)[32])"OPEN_STATE_SHOP_TYPE_BLACKSMITH",
      (const char (*)[32])"OPEN_STATE_SHOP_TYPE_BLACKSMITH");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30816),
      (data::OpenStateType *)(v1 + 1696),
      (const std::pair<std::string,std::string > *)(v1 + 13200));
    if ( *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1712, v1 + 1696);
    *(_DWORD *)(v1 + 1712) = 1004;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13296),
      (const char (*)[29])"OPEN_STATE_SHOP_TYPE_GROCERY",
      (const char (*)[29])"OPEN_STATE_SHOP_TYPE_GROCERY");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30888),
      (data::OpenStateType *)(v1 + 1712),
      (const std::pair<std::string,std::string > *)(v1 + 13296));
    if ( *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1728, v1 + 1712);
    *(_DWORD *)(v1 + 1728) = 1005;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13392),
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_FOOD",
      (const char (*)[26])"OPEN_STATE_SHOP_TYPE_FOOD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 30960),
      (data::OpenStateType *)(v1 + 1728),
      (const std::pair<std::string,std::string > *)(v1 + 13392));
    if ( *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1744, v1 + 1728);
    *(_DWORD *)(v1 + 1744) = 1006;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13488),
      (const char (*)[30])"OPEN_STATE_SHOP_TYPE_SEA_LAMP",
      (const char (*)[30])"OPEN_STATE_SHOP_TYPE_SEA_LAMP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31032),
      (data::OpenStateType *)(v1 + 1744),
      (const std::pair<std::string,std::string > *)(v1 + 13488));
    if ( *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1760, v1 + 1744);
    *(_DWORD *)(v1 + 1760) = 1007;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13584),
      (const char (*)[34])"OPEN_STATE_SHOP_TYPE_VIRTUAL_SHOP",
      (const char (*)[34])"OPEN_STATE_SHOP_TYPE_VIRTUAL_SHOP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31104),
      (data::OpenStateType *)(v1 + 1760),
      (const std::pair<std::string,std::string > *)(v1 + 13584));
    if ( *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1776, v1 + 1760);
    *(_DWORD *)(v1 + 1776) = 1008;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13680),
      (const char (*)[35])"OPEN_STATE_SHOP_TYPE_LIYUE_GROCERY",
      (const char (*)[35])"OPEN_STATE_SHOP_TYPE_LIYUE_GROCERY");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31176),
      (data::OpenStateType *)(v1 + 1776),
      (const std::pair<std::string,std::string > *)(v1 + 13680));
    if ( *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1792, v1 + 1776);
    *(_DWORD *)(v1 + 1792) = 1009;
    std::pair<std::string,std::string>::pair<char const(&)[36],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13776),
      (const char (*)[36])"OPEN_STATE_SHOP_TYPE_LIYUE_SOUVENIR",
      (const char (*)[36])"OPEN_STATE_SHOP_TYPE_LIYUE_SOUVENIR");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31248),
      (data::OpenStateType *)(v1 + 1792),
      (const std::pair<std::string,std::string > *)(v1 + 13776));
    if ( *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1808, v1 + 1792);
    *(_DWORD *)(v1 + 1808) = 1010;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13872),
      (const char (*)[38])"OPEN_STATE_SHOP_TYPE_LIYUE_RESTAURANT",
      (const char (*)[38])"OPEN_STATE_SHOP_TYPE_LIYUE_RESTAURANT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31320),
      (data::OpenStateType *)(v1 + 1808),
      (const std::pair<std::string,std::string > *)(v1 + 13872));
    if ( *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1824, v1 + 1808);
    *(_DWORD *)(v1 + 1824) = 1011;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13968),
      (const char (*)[38])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR",
      (const char (*)[38])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31392),
      (data::OpenStateType *)(v1 + 1824),
      (const std::pair<std::string,std::string > *)(v1 + 13968));
    if ( *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1840, v1 + 1824);
    *(_DWORD *)(v1 + 1840) = 1012;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14064),
      (const char (*)[32])"OPEN_STATE_SHOP_TYPE_NPC_TOMOKI",
      (const char (*)[32])"OPEN_STATE_SHOP_TYPE_NPC_TOMOKI");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31464),
      (data::OpenStateType *)(v1 + 1840),
      (const std::pair<std::string,std::string > *)(v1 + 14064));
    if ( *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1856, v1 + 1840);
    *(_DWORD *)(v1 + 1856) = 1013;
    std::pair<std::string,std::string>::pair<char const(&)[48],char const(&)[48],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14160),
      (const char (*)[48])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR_BLACK_BAR",
      (const char (*)[48])"OPEN_STATE_SHOP_TYPE_INAZUMA_SOUVENIR_BLACK_BAR");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31536),
      (data::OpenStateType *)(v1 + 1856),
      (const std::pair<std::string,std::string > *)(v1 + 14160));
    if ( *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1872, v1 + 1856);
    *(_DWORD *)(v1 + 1872) = 1100;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14256),
      (const char (*)[22])"OPEN_ADVENTURE_MANUAL",
      (const char (*)[22])"OPEN_ADVENTURE_MANUAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31608),
      (data::OpenStateType *)(v1 + 1872),
      (const std::pair<std::string,std::string > *)(v1 + 14256));
    if ( *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1888, v1 + 1872);
    *(_DWORD *)(v1 + 1888) = 1101;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14352),
      (const char (*)[34])"OPEN_ADVENTURE_MANUAL_CITY_MENGDE",
      (const char (*)[34])"OPEN_ADVENTURE_MANUAL_CITY_MENGDE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31680),
      (data::OpenStateType *)(v1 + 1888),
      (const std::pair<std::string,std::string > *)(v1 + 14352));
    if ( *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1904, v1 + 1888);
    *(_DWORD *)(v1 + 1904) = 1102;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14448),
      (const char (*)[33])"OPEN_ADVENTURE_MANUAL_CITY_LIYUE",
      (const char (*)[33])"OPEN_ADVENTURE_MANUAL_CITY_LIYUE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31752),
      (data::OpenStateType *)(v1 + 1904),
      (const std::pair<std::string,std::string > *)(v1 + 14448));
    if ( *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1920, v1 + 1904);
    *(_DWORD *)(v1 + 1920) = 1103;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14544),
      (const char (*)[30])"OPEN_ADVENTURE_MANUAL_MONSTER",
      (const char (*)[30])"OPEN_ADVENTURE_MANUAL_MONSTER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31824),
      (data::OpenStateType *)(v1 + 1920),
      (const std::pair<std::string,std::string > *)(v1 + 14544));
    if ( *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1936, v1 + 1920);
    *(_DWORD *)(v1 + 1936) = 1104;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14640),
      (const char (*)[35])"OPEN_ADVENTURE_MANUAL_BOSS_DUNGEON",
      (const char (*)[35])"OPEN_ADVENTURE_MANUAL_BOSS_DUNGEON");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31896),
      (data::OpenStateType *)(v1 + 1936),
      (const std::pair<std::string,std::string > *)(v1 + 14640));
    if ( *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1952, v1 + 1936);
    *(_DWORD *)(v1 + 1952) = 1200;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14736),
      (const char (*)[28])"OPEN_STATE_ACTIVITY_SEALAMP",
      (const char (*)[28])"OPEN_STATE_ACTIVITY_SEALAMP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 31968),
      (data::OpenStateType *)(v1 + 1952),
      (const std::pair<std::string,std::string > *)(v1 + 14736));
    if ( *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1968, v1 + 1952);
    *(_DWORD *)(v1 + 1968) = 1201;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14832),
      (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB2",
      (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB2");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32040),
      (data::OpenStateType *)(v1 + 1968),
      (const std::pair<std::string,std::string > *)(v1 + 14832));
    if ( *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1984, v1 + 1968);
    *(_DWORD *)(v1 + 1984) = 1202;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14928),
      (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB3",
      (const char (*)[33])"OPEN_STATE_ACTIVITY_SEALAMP_TAB3");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32112),
      (data::OpenStateType *)(v1 + 1984),
      (const std::pair<std::string,std::string > *)(v1 + 14928));
    if ( *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2000, v1 + 1984);
    *(_DWORD *)(v1 + 2000) = 1300;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15024),
      (const char (*)[23])"OPEN_STATE_BATTLE_PASS",
      (const char (*)[23])"OPEN_STATE_BATTLE_PASS");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32184),
      (data::OpenStateType *)(v1 + 2000),
      (const std::pair<std::string,std::string > *)(v1 + 15024));
    if ( *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2016, v1 + 2000);
    *(_DWORD *)(v1 + 2016) = 1301;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15120),
      (const char (*)[29])"OPEN_STATE_BATTLE_PASS_ENTRY",
      (const char (*)[29])"OPEN_STATE_BATTLE_PASS_ENTRY");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32256),
      (data::OpenStateType *)(v1 + 2016),
      (const std::pair<std::string,std::string > *)(v1 + 15120));
    if ( *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2032, v1 + 2016);
    *(_DWORD *)(v1 + 2032) = 1400;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15216),
      (const char (*)[29])"OPEN_STATE_ACTIVITY_CRUCIBLE",
      (const char (*)[29])"OPEN_STATE_ACTIVITY_CRUCIBLE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32328),
      (data::OpenStateType *)(v1 + 2032),
      (const std::pair<std::string,std::string > *)(v1 + 15216));
    if ( *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2048, v1 + 2032);
    *(_DWORD *)(v1 + 2048) = 1401;
    std::pair<std::string,std::string>::pair<char const(&)[37],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15312),
      (const char (*)[37])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_OPEN",
      (const char (*)[37])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_OPEN");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32400),
      (data::OpenStateType *)(v1 + 2048),
      (const std::pair<std::string,std::string > *)(v1 + 15312));
    if ( *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2064, v1 + 2048);
    *(_DWORD *)(v1 + 2064) = 1402;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15408),
      (const char (*)[38])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_CLOSE",
      (const char (*)[38])"OPEN_STATE_ACTIVITY_NEWBEEBOUNS_CLOSE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32472),
      (data::OpenStateType *)(v1 + 2064),
      (const std::pair<std::string,std::string > *)(v1 + 15408));
    if ( *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2080, v1 + 2064);
    *(_DWORD *)(v1 + 2080) = 1403;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15504),
      (const char (*)[31])"OPEN_STATE_ACTIVITY_ENTRY_OPEN",
      (const char (*)[31])"OPEN_STATE_ACTIVITY_ENTRY_OPEN");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32544),
      (data::OpenStateType *)(v1 + 2080),
      (const std::pair<std::string,std::string > *)(v1 + 15504));
    if ( *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2096, v1 + 2080);
    *(_DWORD *)(v1 + 2096) = 1404;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15600),
      (const char (*)[33])"OPEN_STATE_MENGDE_INFUSEDCRYSTAL",
      (const char (*)[33])"OPEN_STATE_MENGDE_INFUSEDCRYSTAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32616),
      (data::OpenStateType *)(v1 + 2096),
      (const std::pair<std::string,std::string > *)(v1 + 15600));
    if ( *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2112, v1 + 2096);
    *(_DWORD *)(v1 + 2112) = 1405;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15696),
      (const char (*)[32])"OPEN_STATE_LIYUE_INFUSEDCRYSTAL",
      (const char (*)[32])"OPEN_STATE_LIYUE_INFUSEDCRYSTAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32688),
      (data::OpenStateType *)(v1 + 2112),
      (const std::pair<std::string,std::string > *)(v1 + 15696));
    if ( *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2128, v1 + 2112);
    *(_DWORD *)(v1 + 2128) = 1406;
    std::pair<std::string,std::string>::pair<char const(&)[36],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15792),
      (const char (*)[36])"OPEN_STATE_SNOW_MOUNTAIN_ELDER_TREE",
      (const char (*)[36])"OPEN_STATE_SNOW_MOUNTAIN_ELDER_TREE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32760),
      (data::OpenStateType *)(v1 + 2128),
      (const std::pair<std::string,std::string > *)(v1 + 15792));
    if ( *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2144, v1 + 2128);
    *(_DWORD *)(v1 + 2144) = 1407;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15888),
      (const char (*)[24])"OPEN_STATE_MIRACLE_RING",
      (const char (*)[24])"OPEN_STATE_MIRACLE_RING");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32832),
      (data::OpenStateType *)(v1 + 2144),
      (const std::pair<std::string,std::string > *)(v1 + 15888));
    if ( *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2160, v1 + 2144);
    *(_DWORD *)(v1 + 2160) = 1408;
    std::pair<std::string,std::string>::pair<char const(&)[21],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15984),
      (const char (*)[21])"OPEN_STATE_COOP_LINE",
      (const char (*)[21])"OPEN_STATE_COOP_LINE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32904),
      (data::OpenStateType *)(v1 + 2160),
      (const std::pair<std::string,std::string > *)(v1 + 15984));
    if ( *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2176, v1 + 2160);
    *(_DWORD *)(v1 + 2176) = 1409;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16080),
      (const char (*)[34])"OPEN_STATE_INAZUMA_INFUSEDCRYSTAL",
      (const char (*)[34])"OPEN_STATE_INAZUMA_INFUSEDCRYSTAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 32976),
      (data::OpenStateType *)(v1 + 2176),
      (const std::pair<std::string,std::string > *)(v1 + 16080));
    if ( *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2192, v1 + 2176);
    *(_DWORD *)(v1 + 2192) = 1410;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16176),
      (const char (*)[16])"OPEN_STATE_FISH",
      (const char (*)[16])"OPEN_STATE_FISH");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33048),
      (data::OpenStateType *)(v1 + 2192),
      (const std::pair<std::string,std::string > *)(v1 + 16176));
    if ( *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2208, v1 + 2192);
    *(_DWORD *)(v1 + 2208) = 1411;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16272),
      (const char (*)[33])"OPEN_STATE_GUIDE_SUMO_TEAM_SKILL",
      (const char (*)[33])"OPEN_STATE_GUIDE_SUMO_TEAM_SKILL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33120),
      (data::OpenStateType *)(v1 + 2208),
      (const std::pair<std::string,std::string > *)(v1 + 16272));
    if ( *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2224, v1 + 2208);
    *(_DWORD *)(v1 + 2224) = 1412;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16368),
      (const char (*)[29])"OPEN_STATE_GUIDE_FISH_RECIPE",
      (const char (*)[29])"OPEN_STATE_GUIDE_FISH_RECIPE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33192),
      (data::OpenStateType *)(v1 + 2224),
      (const std::pair<std::string,std::string > *)(v1 + 16368));
    if ( *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2240, v1 + 2224);
    *(_DWORD *)(v1 + 2240) = 1500;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16464),
      (const char (*)[16])"OPEN_STATE_HOME",
      (const char (*)[16])"OPEN_STATE_HOME");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33264),
      (data::OpenStateType *)(v1 + 2240),
      (const std::pair<std::string,std::string > *)(v1 + 16464));
    if ( *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2256, v1 + 2240);
    *(_DWORD *)(v1 + 2256) = 1501;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16560),
      (const char (*)[30])"OPEN_STATE_ACTIVITY_HOMEWORLD",
      (const char (*)[30])"OPEN_STATE_ACTIVITY_HOMEWORLD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33336),
      (data::OpenStateType *)(v1 + 2256),
      (const std::pair<std::string,std::string > *)(v1 + 16560));
    if ( *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2272, v1 + 2256);
    *(_DWORD *)(v1 + 2272) = 1502;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16656),
      (const char (*)[23])"OPEN_STATE_ADEPTIABODE",
      (const char (*)[23])"OPEN_STATE_ADEPTIABODE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33408),
      (data::OpenStateType *)(v1 + 2272),
      (const std::pair<std::string,std::string > *)(v1 + 16656));
    if ( *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2288, v1 + 2272);
    *(_DWORD *)(v1 + 2288) = 1503;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16752),
      (const char (*)[23])"OPEN_STATE_HOME_AVATAR",
      (const char (*)[23])"OPEN_STATE_HOME_AVATAR");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33480),
      (data::OpenStateType *)(v1 + 2288),
      (const std::pair<std::string,std::string > *)(v1 + 16752));
    if ( *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2304, v1 + 2288);
    *(_DWORD *)(v1 + 2304) = 1504;
    std::pair<std::string,std::string>::pair<char const(&)[21],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16848),
      (const char (*)[21])"OPEN_STATE_HOME_EDIT",
      (const char (*)[21])"OPEN_STATE_HOME_EDIT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33552),
      (data::OpenStateType *)(v1 + 2304),
      (const std::pair<std::string,std::string > *)(v1 + 16848));
    if ( *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2320, v1 + 2304);
    *(_DWORD *)(v1 + 2320) = 1505;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16944),
      (const char (*)[26])"OPEN_STATE_HOME_EDIT_TIPS",
      (const char (*)[26])"OPEN_STATE_HOME_EDIT_TIPS");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33624),
      (data::OpenStateType *)(v1 + 2320),
      (const std::pair<std::string,std::string > *)(v1 + 16944));
    if ( *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2336, v1 + 2320);
    *(_DWORD *)(v1 + 2336) = 1600;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17040),
      (const char (*)[31])"OPEN_STATE_RELIQUARY_DECOMPOSE",
      (const char (*)[31])"OPEN_STATE_RELIQUARY_DECOMPOSE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33696),
      (data::OpenStateType *)(v1 + 2336),
      (const std::pair<std::string,std::string > *)(v1 + 17040));
    if ( *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2352, v1 + 2336);
    *(_DWORD *)(v1 + 2352) = 1700;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17136),
      (const char (*)[23])"OPEN_STATE_ACTIVITY_H5",
      (const char (*)[23])"OPEN_STATE_ACTIVITY_H5");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33768),
      (data::OpenStateType *)(v1 + 2352),
      (const std::pair<std::string,std::string > *)(v1 + 17136));
    if ( *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2368, v1 + 2352);
    *(_DWORD *)(v1 + 2368) = 2000;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17232),
      (const char (*)[23])"OPEN_STATE_ORAIONOKAMI",
      (const char (*)[23])"OPEN_STATE_ORAIONOKAMI");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33840),
      (data::OpenStateType *)(v1 + 2368),
      (const std::pair<std::string,std::string > *)(v1 + 17232));
    if ( *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2384, v1 + 2368);
    *(_DWORD *)(v1 + 2384) = 2001;
    std::pair<std::string,std::string>::pair<char const(&)[37],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17328),
      (const char (*)[37])"OPEN_STATE_GUIDE_CHESS_MISSION_CHECK",
      (const char (*)[37])"OPEN_STATE_GUIDE_CHESS_MISSION_CHECK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33912),
      (data::OpenStateType *)(v1 + 2384),
      (const std::pair<std::string,std::string > *)(v1 + 17328));
    if ( *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2400, v1 + 2384);
    *(_DWORD *)(v1 + 2400) = 2002;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17424),
      (const char (*)[29])"OPEN_STATE_GUIDE_CHESS_BUILD",
      (const char (*)[29])"OPEN_STATE_GUIDE_CHESS_BUILD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 33984),
      (data::OpenStateType *)(v1 + 2400),
      (const std::pair<std::string,std::string > *)(v1 + 17424));
    if ( *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2416, v1 + 2400);
    *(_DWORD *)(v1 + 2416) = 2003;
    std::pair<std::string,std::string>::pair<char const(&)[41],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17520),
      (const char (*)[41])"OPEN_STATE_GUIDE_CHESS_WIND_TOWER_CIRCLE",
      (const char (*)[41])"OPEN_STATE_GUIDE_CHESS_WIND_TOWER_CIRCLE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34056),
      (data::OpenStateType *)(v1 + 2416),
      (const std::pair<std::string,std::string > *)(v1 + 17520));
    if ( *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2432, v1 + 2416);
    *(_DWORD *)(v1 + 2432) = 2004;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17616),
      (const char (*)[35])"OPEN_STATE_GUIDE_CHESS_CARD_SELECT",
      (const char (*)[35])"OPEN_STATE_GUIDE_CHESS_CARD_SELECT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34128),
      (data::OpenStateType *)(v1 + 2432),
      (const std::pair<std::string,std::string > *)(v1 + 17616));
    if ( *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2448, v1 + 2432);
    *(_DWORD *)(v1 + 2448) = 2005;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17712),
      (const char (*)[38])"OPEN_STATE_INAZUMA_MAINQUEST_FINISHED",
      (const char (*)[38])"OPEN_STATE_INAZUMA_MAINQUEST_FINISHED");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34200),
      (data::OpenStateType *)(v1 + 2448),
      (const std::pair<std::string,std::string > *)(v1 + 17712));
    if ( *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2464, v1 + 2448);
    *(_DWORD *)(v1 + 2464) = 2100;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17808),
      (const char (*)[25])"OPEN_STATE_PAIMON_LVINFO",
      (const char (*)[25])"OPEN_STATE_PAIMON_LVINFO");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34272),
      (data::OpenStateType *)(v1 + 2464),
      (const std::pair<std::string,std::string > *)(v1 + 17808));
    if ( *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2480, v1 + 2464);
    *(_DWORD *)(v1 + 2480) = 2101;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17904),
      (const char (*)[24])"OPEN_STATE_TELEPORT_HUD",
      (const char (*)[24])"OPEN_STATE_TELEPORT_HUD");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34344),
      (data::OpenStateType *)(v1 + 2480),
      (const std::pair<std::string,std::string > *)(v1 + 17904));
    if ( *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2496, v1 + 2480);
    *(_DWORD *)(v1 + 2496) = 2102;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18000),
      (const char (*)[28])"OPEN_STATE_GUIDE_MAP_UNLOCK",
      (const char (*)[28])"OPEN_STATE_GUIDE_MAP_UNLOCK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34416),
      (data::OpenStateType *)(v1 + 2496),
      (const std::pair<std::string,std::string > *)(v1 + 18000));
    if ( *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2512, v1 + 2496);
    *(_DWORD *)(v1 + 2512) = 2103;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18096),
      (const char (*)[31])"OPEN_STATE_GUIDE_PAIMON_LVINFO",
      (const char (*)[31])"OPEN_STATE_GUIDE_PAIMON_LVINFO");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34488),
      (data::OpenStateType *)(v1 + 2512),
      (const std::pair<std::string,std::string > *)(v1 + 18096));
    if ( *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2528, v1 + 2512);
    *(_DWORD *)(v1 + 2528) = 2104;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18192),
      (const char (*)[32])"OPEN_STATE_GUIDE_AMBORTRANSPORT",
      (const char (*)[32])"OPEN_STATE_GUIDE_AMBORTRANSPORT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34560),
      (data::OpenStateType *)(v1 + 2528),
      (const std::pair<std::string,std::string > *)(v1 + 18192));
    if ( *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2544, v1 + 2528);
    *(_DWORD *)(v1 + 2544) = 2105;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18288),
      (const char (*)[28])"OPEN_STATE_GUIDE_FLY_SECOND",
      (const char (*)[28])"OPEN_STATE_GUIDE_FLY_SECOND");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34632),
      (data::OpenStateType *)(v1 + 2544),
      (const std::pair<std::string,std::string > *)(v1 + 18288));
    if ( *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2560, v1 + 2544);
    *(_DWORD *)(v1 + 2560) = 2106;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18384),
      (const char (*)[28])"OPEN_STATE_GUIDE_KAEYA_CLUE",
      (const char (*)[28])"OPEN_STATE_GUIDE_KAEYA_CLUE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34704),
      (data::OpenStateType *)(v1 + 2560),
      (const std::pair<std::string,std::string > *)(v1 + 18384));
    if ( *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2576, v1 + 2560);
    *(_DWORD *)(v1 + 2576) = 2107;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18480),
      (const char (*)[25])"OPEN_STATE_CAPTURE_CODEX",
      (const char (*)[25])"OPEN_STATE_CAPTURE_CODEX");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34776),
      (data::OpenStateType *)(v1 + 2576),
      (const std::pair<std::string,std::string > *)(v1 + 18480));
    if ( *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2592, v1 + 2576);
    *(_DWORD *)(v1 + 2592) = 2200;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18576),
      (const char (*)[30])"OPEN_STATE_ACTIVITY_FISH_OPEN",
      (const char (*)[30])"OPEN_STATE_ACTIVITY_FISH_OPEN");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34848),
      (data::OpenStateType *)(v1 + 2592),
      (const std::pair<std::string,std::string > *)(v1 + 18576));
    if ( *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2608, v1 + 2592);
    *(_DWORD *)(v1 + 2608) = 2201;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18672),
      (const char (*)[31])"OPEN_STATE_ACTIVITY_FISH_CLOSE",
      (const char (*)[31])"OPEN_STATE_ACTIVITY_FISH_CLOSE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34920),
      (data::OpenStateType *)(v1 + 2608),
      (const std::pair<std::string,std::string > *)(v1 + 18672));
    if ( *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2624, v1 + 2608);
    *(_DWORD *)(v1 + 2624) = 2205;
    std::pair<std::string,std::string>::pair<char const(&)[27],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18768),
      (const char (*)[27])"OPEN_STATE_GUIDE_ROGUE_MAP",
      (const char (*)[27])"OPEN_STATE_GUIDE_ROGUE_MAP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 34992),
      (data::OpenStateType *)(v1 + 2624),
      (const std::pair<std::string,std::string > *)(v1 + 18768));
    if ( *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2640, v1 + 2624);
    *(_DWORD *)(v1 + 2640) = 2206;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18864),
      (const char (*)[28])"OPEN_STATE_GUIDE_ROGUE_RUNE",
      (const char (*)[28])"OPEN_STATE_GUIDE_ROGUE_RUNE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35064),
      (data::OpenStateType *)(v1 + 2640),
      (const std::pair<std::string,std::string > *)(v1 + 18864));
    if ( *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2656, v1 + 2640);
    *(_DWORD *)(v1 + 2656) = 2210;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18960),
      (const char (*)[35])"OPEN_STATE_GUIDE_BARTENDER_FORMULA",
      (const char (*)[35])"OPEN_STATE_GUIDE_BARTENDER_FORMULA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35136),
      (data::OpenStateType *)(v1 + 2656),
      (const std::pair<std::string,std::string > *)(v1 + 18960));
    if ( *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2672, v1 + 2656);
    *(_DWORD *)(v1 + 2672) = 2211;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19056),
      (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_MIX",
      (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_MIX");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35208),
      (data::OpenStateType *)(v1 + 2672),
      (const std::pair<std::string,std::string > *)(v1 + 19056));
    if ( *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2688, v1 + 2672);
    *(_DWORD *)(v1 + 2688) = 2212;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19152),
      (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_CUP",
      (const char (*)[31])"OPEN_STATE_GUIDE_BARTENDER_CUP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35280),
      (data::OpenStateType *)(v1 + 2688),
      (const std::pair<std::string,std::string > *)(v1 + 19152));
    if ( *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2704, v1 + 2688);
    *(_DWORD *)(v1 + 2704) = 2400;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19248),
      (const char (*)[32])"OPEN_STATE_GUIDE_MAIL_FAVORITES",
      (const char (*)[32])"OPEN_STATE_GUIDE_MAIL_FAVORITES");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35352),
      (data::OpenStateType *)(v1 + 2704),
      (const std::pair<std::string,std::string > *)(v1 + 19248));
    if ( *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2720, v1 + 2704);
    *(_DWORD *)(v1 + 2720) = 2401;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19344),
      (const char (*)[34])"OPEN_STATE_GUIDE_POTION_CONFIGURE",
      (const char (*)[34])"OPEN_STATE_GUIDE_POTION_CONFIGURE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35424),
      (data::OpenStateType *)(v1 + 2720),
      (const std::pair<std::string,std::string > *)(v1 + 19344));
    if ( *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2736, v1 + 2720);
    *(_DWORD *)(v1 + 2736) = 2402;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19440),
      (const char (*)[32])"OPEN_STATE_GUIDE_LANV2_FIREWORK",
      (const char (*)[32])"OPEN_STATE_GUIDE_LANV2_FIREWORK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35496),
      (data::OpenStateType *)(v1 + 2736),
      (const std::pair<std::string,std::string > *)(v1 + 19440));
    if ( *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2752, v1 + 2736);
    *(_DWORD *)(v1 + 2752) = 2403;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19536),
      (const char (*)[34])"OPEN_STATE_LOADINGTIPS_ENKANOMIYA",
      (const char (*)[34])"OPEN_STATE_LOADINGTIPS_ENKANOMIYA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35568),
      (data::OpenStateType *)(v1 + 2752),
      (const std::pair<std::string,std::string > *)(v1 + 19536));
    if ( *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2768, v1 + 2752);
    *(_DWORD *)(v1 + 2768) = 2500;
    std::pair<std::string,std::string>::pair<char const(&)[26],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19632),
      (const char (*)[26])"OPEN_STATE_MICHIAE_CASKET",
      (const char (*)[26])"OPEN_STATE_MICHIAE_CASKET");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35640),
      (data::OpenStateType *)(v1 + 2768),
      (const std::pair<std::string,std::string > *)(v1 + 19632));
    if ( *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2784, v1 + 2768);
    *(_DWORD *)(v1 + 2784) = 2501;
    std::pair<std::string,std::string>::pair<char const(&)[41],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19728),
      (const char (*)[41])"OPEN_STATE_MAIL_COLLECT_UNLOCK_RED_POINT",
      (const char (*)[41])"OPEN_STATE_MAIL_COLLECT_UNLOCK_RED_POINT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35712),
      (data::OpenStateType *)(v1 + 2784),
      (const std::pair<std::string,std::string > *)(v1 + 19728));
    if ( *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2800, v1 + 2784);
    *(_DWORD *)(v1 + 2800) = 2600;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19824),
      (const char (*)[23])"OPEN_STATE_LUMEN_STONE",
      (const char (*)[23])"OPEN_STATE_LUMEN_STONE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35784),
      (data::OpenStateType *)(v1 + 2800),
      (const std::pair<std::string,std::string > *)(v1 + 19824));
    if ( *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2816, v1 + 2800);
    *(_DWORD *)(v1 + 2816) = 2601;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19920),
      (const char (*)[34])"OPEN_STATE_GUIDE_CRYSTALLINK_BUFF",
      (const char (*)[34])"OPEN_STATE_GUIDE_CRYSTALLINK_BUFF");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35856),
      (data::OpenStateType *)(v1 + 2816),
      (const std::pair<std::string,std::string > *)(v1 + 19920));
    if ( *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2832, v1 + 2816);
    *(_DWORD *)(v1 + 2832) = 2700;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20016),
      (const char (*)[31])"OPEN_STATE_GUIDE_MUSIC_GAME_V3",
      (const char (*)[31])"OPEN_STATE_GUIDE_MUSIC_GAME_V3");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 35928),
      (data::OpenStateType *)(v1 + 2832),
      (const std::pair<std::string,std::string > *)(v1 + 20016));
    if ( *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2848, v1 + 2832);
    *(_DWORD *)(v1 + 2848) = 2701;
    std::pair<std::string,std::string>::pair<char const(&)[46],char const(&)[46],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20112),
      (const char (*)[46])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_REAL_TIME_EDIT",
      (const char (*)[46])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_REAL_TIME_EDIT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36000),
      (data::OpenStateType *)(v1 + 2848),
      (const std::pair<std::string,std::string > *)(v1 + 20112));
    if ( *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2864, v1 + 2848);
    *(_DWORD *)(v1 + 2864) = 2702;
    std::pair<std::string,std::string>::pair<char const(&)[45],char const(&)[45],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20208),
      (const char (*)[45])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_TIMELINE_EDIT",
      (const char (*)[45])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_TIMELINE_EDIT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36072),
      (data::OpenStateType *)(v1 + 2864),
      (const std::pair<std::string,std::string > *)(v1 + 20208));
    if ( *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2880, v1 + 2864);
    *(_DWORD *)(v1 + 2880) = 2703;
    std::pair<std::string,std::string>::pair<char const(&)[39],char const(&)[39],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20304),
      (const char (*)[39])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_SETTING",
      (const char (*)[39])"OPEN_STATE_GUIDE_MUSIC_GAME_V3_SETTING");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36144),
      (data::OpenStateType *)(v1 + 2880),
      (const std::pair<std::string,std::string > *)(v1 + 20304));
    if ( *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2896, v1 + 2880);
    *(_DWORD *)(v1 + 2896) = 2704;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20400),
      (const char (*)[28])"OPEN_STATE_GUIDE_ROBOTGACHA",
      (const char (*)[28])"OPEN_STATE_GUIDE_ROBOTGACHA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36216),
      (data::OpenStateType *)(v1 + 2896),
      (const std::pair<std::string,std::string > *)(v1 + 20400));
    if ( *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2912, v1 + 2896);
    *(_DWORD *)(v1 + 2912) = 2800;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20496),
      (const char (*)[31])"OPEN_STATE_GUIDE_FRAGILE_RESIN",
      (const char (*)[31])"OPEN_STATE_GUIDE_FRAGILE_RESIN");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36288),
      (data::OpenStateType *)(v1 + 2912),
      (const std::pair<std::string,std::string > *)(v1 + 20496));
    if ( *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2928, v1 + 2912);
    *(_DWORD *)(v1 + 2928) = 2801;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20592),
      (const char (*)[32])"OPEN_ADVENTURE_MANUAL_EDUCATION",
      (const char (*)[32])"OPEN_ADVENTURE_MANUAL_EDUCATION");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36360),
      (data::OpenStateType *)(v1 + 2928),
      (const std::pair<std::string,std::string > *)(v1 + 20592));
    if ( *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2944, v1 + 2928);
    *(_DWORD *)(v1 + 2944) = 3000;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20688),
      (const char (*)[33])"OPEN_STATE_CITY_REPUATION_SUMERU",
      (const char (*)[33])"OPEN_STATE_CITY_REPUATION_SUMERU");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36432),
      (data::OpenStateType *)(v1 + 2944),
      (const std::pair<std::string,std::string > *)(v1 + 20688));
    if ( *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2960, v1 + 2944);
    *(_DWORD *)(v1 + 2960) = 3001;
    std::pair<std::string,std::string>::pair<char const(&)[20],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20784),
      (const char (*)[20])"OPEN_STATE_VANASARA",
      (const char (*)[20])"OPEN_STATE_VANASARA");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36504),
      (data::OpenStateType *)(v1 + 2960),
      (const std::pair<std::string,std::string > *)(v1 + 20784));
    if ( *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2976, v1 + 2960);
    *(_DWORD *)(v1 + 2976) = 3002;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20880),
      (const char (*)[33])"OPEN_STATE_SUMERU_INFUSEDCRYSTAL",
      (const char (*)[33])"OPEN_STATE_SUMERU_INFUSEDCRYSTAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36576),
      (data::OpenStateType *)(v1 + 2976),
      (const std::pair<std::string,std::string > *)(v1 + 20880));
    if ( *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2992, v1 + 2976);
    *(_DWORD *)(v1 + 2992) = 3003;
    std::pair<std::string,std::string>::pair<char const(&)[40],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20976),
      (const char (*)[40])"OPEN_STATE_LIMIT_REGION_WITHERED_FOREST",
      (const char (*)[40])"OPEN_STATE_LIMIT_REGION_WITHERED_FOREST");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36648),
      (data::OpenStateType *)(v1 + 2992),
      (const std::pair<std::string,std::string > *)(v1 + 20976));
    if ( *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3008, v1 + 2992);
    *(_DWORD *)(v1 + 3008) = 3004;
    std::pair<std::string,std::string>::pair<char const(&)[37],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21072),
      (const char (*)[37])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR",
      (const char (*)[37])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36720),
      (data::OpenStateType *)(v1 + 3008),
      (const std::pair<std::string,std::string > *)(v1 + 21072));
    if ( *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3024, v1 + 3008);
    *(_DWORD *)(v1 + 3024) = 3005;
    std::pair<std::string,std::string>::pair<char const(&)[47],char const(&)[47],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21168),
      (const char (*)[47])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR_BLACK_BAR",
      (const char (*)[47])"OPEN_STATE_SHOP_TYPE_SUMERU_SOUVENIR_BLACK_BAR");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36792),
      (data::OpenStateType *)(v1 + 3024),
      (const std::pair<std::string,std::string > *)(v1 + 21168));
    if ( *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3040, v1 + 3024);
    *(_DWORD *)(v1 + 3040) = 3006;
    std::pair<std::string,std::string>::pair<char const(&)[40],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21264),
      (const char (*)[40])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_MUQADAS",
      (const char (*)[40])"OPEN_STATE_GUIDE_ACTIVITY_SKILL_MUQADAS");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36864),
      (data::OpenStateType *)(v1 + 3040),
      (const std::pair<std::string,std::string > *)(v1 + 21264));
    if ( *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3056, v1 + 3040);
    *(_DWORD *)(v1 + 3056) = 3007;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21360),
      (const char (*)[25])"OPEN_STATE_GUIDE_MUQADAS",
      (const char (*)[25])"OPEN_STATE_GUIDE_MUQADAS");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 36936),
      (data::OpenStateType *)(v1 + 3056),
      (const std::pair<std::string,std::string > *)(v1 + 21360));
    if ( *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3072, v1 + 3056);
    *(_DWORD *)(v1 + 3072) = 3100;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21456),
      (const char (*)[33])"OPEN_STATE_GUIDE_WINDFIELD_SKILL",
      (const char (*)[33])"OPEN_STATE_GUIDE_WINDFIELD_SKILL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37008),
      (data::OpenStateType *)(v1 + 3072),
      (const std::pair<std::string,std::string > *)(v1 + 21456));
    if ( *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3088, v1 + 3072);
    *(_DWORD *)(v1 + 3088) = 3101;
    std::pair<std::string,std::string>::pair<char const(&)[40],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21552),
      (const char (*)[40])"OPEN_STATE_GUIDE_VINTAGE_MARKET_UPGRADE",
      (const char (*)[40])"OPEN_STATE_GUIDE_VINTAGE_MARKET_UPGRADE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37080),
      (data::OpenStateType *)(v1 + 3088),
      (const std::pair<std::string,std::string > *)(v1 + 21552));
    if ( *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3104, v1 + 3088);
    *(_DWORD *)(v1 + 3104) = 3102;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21648),
      (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_SKILL",
      (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_SKILL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37152),
      (data::OpenStateType *)(v1 + 3104),
      (const std::pair<std::string,std::string > *)(v1 + 21648));
    if ( *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3120, v1 + 3104);
    *(_DWORD *)(v1 + 3120) = 3103;
    std::pair<std::string,std::string>::pair<char const(&)[38],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21744),
      (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_STAFF",
      (const char (*)[38])"OPEN_STATE_GUIDE_VINTAGE_MARKET_STAFF");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37224),
      (data::OpenStateType *)(v1 + 3120),
      (const std::pair<std::string,std::string > *)(v1 + 21744));
    if ( *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3136, v1 + 3120);
    *(_DWORD *)(v1 + 3136) = 3200;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21840),
      (const char (*)[35])"OPEN_STATE_GCG_RESOURCE_MANAGEMENT",
      (const char (*)[35])"OPEN_STATE_GCG_RESOURCE_MANAGEMENT");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37296),
      (data::OpenStateType *)(v1 + 3136),
      (const std::pair<std::string,std::string > *)(v1 + 21840));
    if ( *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3152, v1 + 3136);
    *(_DWORD *)(v1 + 3152) = 3201;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21936),
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_1",
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_1");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37368),
      (data::OpenStateType *)(v1 + 3152),
      (const std::pair<std::string,std::string > *)(v1 + 21936));
    if ( *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3168, v1 + 3152);
    *(_DWORD *)(v1 + 3168) = 3202;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22032),
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_2",
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_2");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37440),
      (data::OpenStateType *)(v1 + 3168),
      (const std::pair<std::string,std::string > *)(v1 + 22032));
    if ( *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3184, v1 + 3168);
    *(_DWORD *)(v1 + 3184) = 3203;
    std::pair<std::string,std::string>::pair<char const(&)[33],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22128),
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_3",
      (const char (*)[33])"OPEN_STATE_GUIDE_FUNGUSFIGHTER_3");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37512),
      (data::OpenStateType *)(v1 + 3184),
      (const std::pair<std::string,std::string > *)(v1 + 22128));
    if ( *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3200, v1 + 3184);
    *(_DWORD *)(v1 + 3200) = 3300;
    std::pair<std::string,std::string>::pair<char const(&)[21],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22224),
      (const char (*)[21])"OPEN_STATE_GCG_LEVEL",
      (const char (*)[21])"OPEN_STATE_GCG_LEVEL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37584),
      (data::OpenStateType *)(v1 + 3200),
      (const std::pair<std::string,std::string > *)(v1 + 22224));
    if ( *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3216, v1 + 3200);
    *(_DWORD *)(v1 + 3216) = 3301;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22320),
      (const char (*)[22])"OPEN_STATE_GCG_INVITE",
      (const char (*)[22])"OPEN_STATE_GCG_INVITE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37656),
      (data::OpenStateType *)(v1 + 3216),
      (const std::pair<std::string,std::string > *)(v1 + 22320));
    if ( *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3232, v1 + 3216);
    *(_DWORD *)(v1 + 3232) = 3302;
    std::pair<std::string,std::string>::pair<char const(&)[21],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22416),
      (const char (*)[21])"OPEN_STATE_GCG_MATCH",
      (const char (*)[21])"OPEN_STATE_GCG_MATCH");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37728),
      (data::OpenStateType *)(v1 + 3232),
      (const std::pair<std::string,std::string > *)(v1 + 22416));
    if ( *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3248, v1 + 3232);
    *(_DWORD *)(v1 + 3248) = 3303;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22512),
      (const char (*)[19])"OPEN_STATE_GCG_PVP",
      (const char (*)[19])"OPEN_STATE_GCG_PVP");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37800),
      (data::OpenStateType *)(v1 + 3248),
      (const std::pair<std::string,std::string > *)(v1 + 22512));
    if ( *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3264, v1 + 3248);
    *(_DWORD *)(v1 + 3264) = 3304;
    std::pair<std::string,std::string>::pair<char const(&)[20],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22608),
      (const char (*)[20])"OPEN_STATE_GCG_DECK",
      (const char (*)[20])"OPEN_STATE_GCG_DECK");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37872),
      (data::OpenStateType *)(v1 + 3264),
      (const std::pair<std::string,std::string > *)(v1 + 22608));
    if ( *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3280, v1 + 3264);
    *(_DWORD *)(v1 + 3280) = 3305;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22704),
      (const char (*)[22])"OPEN_STATE_GCG_MANUAL",
      (const char (*)[22])"OPEN_STATE_GCG_MANUAL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 37944),
      (data::OpenStateType *)(v1 + 3280),
      (const std::pair<std::string,std::string > *)(v1 + 22704));
    if ( *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3296, v1 + 3280);
    *(_DWORD *)(v1 + 3296) = 3306;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22800),
      (const char (*)[30])"OPEN_STATE_GCG_BOSS_CHALLENGE",
      (const char (*)[30])"OPEN_STATE_GCG_BOSS_CHALLENGE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 38016),
      (data::OpenStateType *)(v1 + 3296),
      (const std::pair<std::string,std::string > *)(v1 + 22800));
    if ( *(_BYTE *)(((v1 + 3312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3312, v1 + 3296);
    *(_DWORD *)(v1 + 3312) = 3307;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22896),
      (const char (*)[31])"OPEN_STATE_GCG_WORLD_CHALLENGE",
      (const char (*)[31])"OPEN_STATE_GCG_WORLD_CHALLENGE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 38088),
      (data::OpenStateType *)(v1 + 3312),
      (const std::pair<std::string,std::string > *)(v1 + 22896));
    if ( *(_BYTE *)(((v1 + 3328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3328, v1 + 3312);
    *(_DWORD *)(v1 + 3328) = 3308;
    std::pair<std::string,std::string>::pair<char const(&)[30],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22992),
      (const char (*)[30])"OPEN_STATE_GCG_WEEK_CHALLENGE",
      (const char (*)[30])"OPEN_STATE_GCG_WEEK_CHALLENGE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 38160),
      (data::OpenStateType *)(v1 + 3328),
      (const std::pair<std::string,std::string > *)(v1 + 22992));
    if ( *(_BYTE *)(((v1 + 3344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3344, v1 + 3328);
    *(_DWORD *)(v1 + 3344) = 3309;
    std::pair<std::string,std::string>::pair<char const(&)[36],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 23088),
      (const char (*)[36])"OPEN_STATE_GCG_TAVERN_SCENE_BUILDER",
      (const char (*)[36])"OPEN_STATE_GCG_TAVERN_SCENE_BUILDER");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 38232),
      (data::OpenStateType *)(v1 + 3344),
      (const std::pair<std::string,std::string > *)(v1 + 23088));
    if ( *(_BYTE *)(((v1 + 3360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3360, v1 + 3344);
    *(_DWORD *)(v1 + 3360) = 3310;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 23184),
      (const char (*)[29])"OPEN_STATE_GCG_SHOP_CARDFACE",
      (const char (*)[29])"OPEN_STATE_GCG_SHOP_CARDFACE");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 38304),
      (data::OpenStateType *)(v1 + 3360),
      (const std::pair<std::string,std::string > *)(v1 + 23184));
    if ( *(_BYTE *)(((v1 + 3376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3376, v1 + 3360);
    *(_DWORD *)(v1 + 3376) = 3311;
    std::pair<std::string,std::string>::pair<char const(&)[27],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 23280),
      (const char (*)[27])"OPEN_STATE_GCG_SHOP_SYSTEM",
      (const char (*)[27])"OPEN_STATE_GCG_SHOP_SYSTEM");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 38376),
      (data::OpenStateType *)(v1 + 3376),
      (const std::pair<std::string,std::string > *)(v1 + 23280));
    if ( *(_BYTE *)(((v1 + 3392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3392, v1 + 3376);
    *(_DWORD *)(v1 + 3392) = 3312;
    std::pair<std::string,std::string>::pair<char const(&)[36],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 23376),
      (const char (*)[36])"OPEN_STATE_GUIDE_BRICKBREAKER_SKILL",
      (const char (*)[36])"OPEN_STATE_GUIDE_BRICKBREAKER_SKILL");
    std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::pair<data::OpenStateType,true>(
      (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *const)(v1 + 38448),
      (data::OpenStateType *)(v1 + 3392),
      (const std::pair<std::string,std::string > *)(v1 + 23376));
    std::allocator<std::pair<data::OpenStateType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::OpenStateType,std::pair<std::string,std::string>>::map(
      &data::getOpenStateTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > >)__PAIR128__(209LL, v1 + 23472),
      (const std::less<data::OpenStateType> *)(v1 + 32),
      (const std::map<data::OpenStateType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getOpenStateTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::OpenStateType,std::pair<std::string,std::string>>::~map,
      &data::getOpenStateTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::OpenStateType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::OpenStateType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *)(v1 + 38520);
          i != (std::pair<const data::OpenStateType,std::pair<std::string,std::string > > *)(v1 + 23472);
          std::pair<data::OpenStateType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 23472, 15048LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 23376));
    v5 = (_DWORD *)(((v1 + 23376) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 3392) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 23280));
    v6 = (_DWORD *)(((v1 + 23280) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 3376) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 23184));
    v7 = (_DWORD *)(((v1 + 23184) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 3360) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 23088));
    v8 = (_DWORD *)(((v1 + 23088) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 3344) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22992));
    v9 = (_DWORD *)(((v1 + 22992) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 3328) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22896));
    v10 = (_DWORD *)(((v1 + 22896) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 3312) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22800));
    v11 = (_DWORD *)(((v1 + 22800) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22704));
    v12 = (_DWORD *)(((v1 + 22704) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22608));
    v13 = (_DWORD *)(((v1 + 22608) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22512));
    v14 = (_DWORD *)(((v1 + 22512) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22416));
    v15 = (_DWORD *)(((v1 + 22416) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22320));
    v16 = (_DWORD *)(((v1 + 22320) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22224));
    v17 = (_DWORD *)(((v1 + 22224) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22128));
    v18 = (_DWORD *)(((v1 + 22128) >> 3) + 2147450880);
    *v18 = -117901064;
    v18[1] = -117901064;
    *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22032));
    v19 = (_DWORD *)(((v1 + 22032) >> 3) + 2147450880);
    *v19 = -117901064;
    v19[1] = -117901064;
    *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21936));
    v20 = (_DWORD *)(((v1 + 21936) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21840));
    v21 = (_DWORD *)(((v1 + 21840) >> 3) + 2147450880);
    *v21 = -117901064;
    v21[1] = -117901064;
    *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21744));
    v22 = (_DWORD *)(((v1 + 21744) >> 3) + 2147450880);
    *v22 = -117901064;
    v22[1] = -117901064;
    *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21648));
    v23 = (_DWORD *)(((v1 + 21648) >> 3) + 2147450880);
    *v23 = -117901064;
    v23[1] = -117901064;
    *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21552));
    v24 = (_DWORD *)(((v1 + 21552) >> 3) + 2147450880);
    *v24 = -117901064;
    v24[1] = -117901064;
    *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21456));
    v25 = (_DWORD *)(((v1 + 21456) >> 3) + 2147450880);
    *v25 = -117901064;
    v25[1] = -117901064;
    *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21360));
    v26 = (_DWORD *)(((v1 + 21360) >> 3) + 2147450880);
    *v26 = -117901064;
    v26[1] = -117901064;
    *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21264));
    v27 = (_DWORD *)(((v1 + 21264) >> 3) + 2147450880);
    *v27 = -117901064;
    v27[1] = -117901064;
    *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21168));
    v28 = (_DWORD *)(((v1 + 21168) >> 3) + 2147450880);
    *v28 = -117901064;
    v28[1] = -117901064;
    *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21072));
    v29 = (_DWORD *)(((v1 + 21072) >> 3) + 2147450880);
    *v29 = -117901064;
    v29[1] = -117901064;
    *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20976));
    v30 = (_DWORD *)(((v1 + 20976) >> 3) + 2147450880);
    *v30 = -117901064;
    v30[1] = -117901064;
    *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20880));
    v31 = (_DWORD *)(((v1 + 20880) >> 3) + 2147450880);
    *v31 = -117901064;
    v31[1] = -117901064;
    *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20784));
    v32 = (_DWORD *)(((v1 + 20784) >> 3) + 2147450880);
    *v32 = -117901064;
    v32[1] = -117901064;
    *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20688));
    v33 = (_DWORD *)(((v1 + 20688) >> 3) + 2147450880);
    *v33 = -117901064;
    v33[1] = -117901064;
    *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20592));
    v34 = (_DWORD *)(((v1 + 20592) >> 3) + 2147450880);
    *v34 = -117901064;
    v34[1] = -117901064;
    *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20496));
    v35 = (_DWORD *)(((v1 + 20496) >> 3) + 2147450880);
    *v35 = -117901064;
    v35[1] = -117901064;
    *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20400));
    v36 = (_DWORD *)(((v1 + 20400) >> 3) + 2147450880);
    *v36 = -117901064;
    v36[1] = -117901064;
    *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20304));
    v37 = (_DWORD *)(((v1 + 20304) >> 3) + 2147450880);
    *v37 = -117901064;
    v37[1] = -117901064;
    *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20208));
    v38 = (_DWORD *)(((v1 + 20208) >> 3) + 2147450880);
    *v38 = -117901064;
    v38[1] = -117901064;
    *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20112));
    v39 = (_DWORD *)(((v1 + 20112) >> 3) + 2147450880);
    *v39 = -117901064;
    v39[1] = -117901064;
    *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20016));
    v40 = (_DWORD *)(((v1 + 20016) >> 3) + 2147450880);
    *v40 = -117901064;
    v40[1] = -117901064;
    *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19920));
    v41 = (_DWORD *)(((v1 + 19920) >> 3) + 2147450880);
    *v41 = -117901064;
    v41[1] = -117901064;
    *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19824));
    v42 = (_DWORD *)(((v1 + 19824) >> 3) + 2147450880);
    *v42 = -117901064;
    v42[1] = -117901064;
    *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19728));
    v43 = (_DWORD *)(((v1 + 19728) >> 3) + 2147450880);
    *v43 = -117901064;
    v43[1] = -117901064;
    *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19632));
    v44 = (_DWORD *)(((v1 + 19632) >> 3) + 2147450880);
    *v44 = -117901064;
    v44[1] = -117901064;
    *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19536));
    v45 = (_DWORD *)(((v1 + 19536) >> 3) + 2147450880);
    *v45 = -117901064;
    v45[1] = -117901064;
    *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19440));
    v46 = (_DWORD *)(((v1 + 19440) >> 3) + 2147450880);
    *v46 = -117901064;
    v46[1] = -117901064;
    *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19344));
    v47 = (_DWORD *)(((v1 + 19344) >> 3) + 2147450880);
    *v47 = -117901064;
    v47[1] = -117901064;
    *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19248));
    v48 = (_DWORD *)(((v1 + 19248) >> 3) + 2147450880);
    *v48 = -117901064;
    v48[1] = -117901064;
    *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19152));
    v49 = (_DWORD *)(((v1 + 19152) >> 3) + 2147450880);
    *v49 = -117901064;
    v49[1] = -117901064;
    *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19056));
    v50 = (_DWORD *)(((v1 + 19056) >> 3) + 2147450880);
    *v50 = -117901064;
    v50[1] = -117901064;
    *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18960));
    v51 = (_DWORD *)(((v1 + 18960) >> 3) + 2147450880);
    *v51 = -117901064;
    v51[1] = -117901064;
    *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18864));
    v52 = (_DWORD *)(((v1 + 18864) >> 3) + 2147450880);
    *v52 = -117901064;
    v52[1] = -117901064;
    *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18768));
    v53 = (_DWORD *)(((v1 + 18768) >> 3) + 2147450880);
    *v53 = -117901064;
    v53[1] = -117901064;
    *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18672));
    v54 = (_DWORD *)(((v1 + 18672) >> 3) + 2147450880);
    *v54 = -117901064;
    v54[1] = -117901064;
    *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18576));
    v55 = (_DWORD *)(((v1 + 18576) >> 3) + 2147450880);
    *v55 = -117901064;
    v55[1] = -117901064;
    *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18480));
    v56 = (_DWORD *)(((v1 + 18480) >> 3) + 2147450880);
    *v56 = -117901064;
    v56[1] = -117901064;
    *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18384));
    v57 = (_DWORD *)(((v1 + 18384) >> 3) + 2147450880);
    *v57 = -117901064;
    v57[1] = -117901064;
    *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18288));
    v58 = (_DWORD *)(((v1 + 18288) >> 3) + 2147450880);
    *v58 = -117901064;
    v58[1] = -117901064;
    *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18192));
    v59 = (_DWORD *)(((v1 + 18192) >> 3) + 2147450880);
    *v59 = -117901064;
    v59[1] = -117901064;
    *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18096));
    v60 = (_DWORD *)(((v1 + 18096) >> 3) + 2147450880);
    *v60 = -117901064;
    v60[1] = -117901064;
    *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18000));
    v61 = (_DWORD *)(((v1 + 18000) >> 3) + 2147450880);
    *v61 = -117901064;
    v61[1] = -117901064;
    *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17904));
    v62 = (_DWORD *)(((v1 + 17904) >> 3) + 2147450880);
    *v62 = -117901064;
    v62[1] = -117901064;
    *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17808));
    v63 = (_DWORD *)(((v1 + 17808) >> 3) + 2147450880);
    *v63 = -117901064;
    v63[1] = -117901064;
    *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17712));
    v64 = (_DWORD *)(((v1 + 17712) >> 3) + 2147450880);
    *v64 = -117901064;
    v64[1] = -117901064;
    *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17616));
    v65 = (_DWORD *)(((v1 + 17616) >> 3) + 2147450880);
    *v65 = -117901064;
    v65[1] = -117901064;
    *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17520));
    v66 = (_DWORD *)(((v1 + 17520) >> 3) + 2147450880);
    *v66 = -117901064;
    v66[1] = -117901064;
    *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17424));
    v67 = (_DWORD *)(((v1 + 17424) >> 3) + 2147450880);
    *v67 = -117901064;
    v67[1] = -117901064;
    *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17328));
    v68 = (_DWORD *)(((v1 + 17328) >> 3) + 2147450880);
    *v68 = -117901064;
    v68[1] = -117901064;
    *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17232));
    v69 = (_DWORD *)(((v1 + 17232) >> 3) + 2147450880);
    *v69 = -117901064;
    v69[1] = -117901064;
    *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17136));
    v70 = (_DWORD *)(((v1 + 17136) >> 3) + 2147450880);
    *v70 = -117901064;
    v70[1] = -117901064;
    *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17040));
    v71 = (_DWORD *)(((v1 + 17040) >> 3) + 2147450880);
    *v71 = -117901064;
    v71[1] = -117901064;
    *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16944));
    v72 = (_DWORD *)(((v1 + 16944) >> 3) + 2147450880);
    *v72 = -117901064;
    v72[1] = -117901064;
    *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16848));
    v73 = (_DWORD *)(((v1 + 16848) >> 3) + 2147450880);
    *v73 = -117901064;
    v73[1] = -117901064;
    *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16752));
    v74 = (_DWORD *)(((v1 + 16752) >> 3) + 2147450880);
    *v74 = -117901064;
    v74[1] = -117901064;
    *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16656));
    v75 = (_DWORD *)(((v1 + 16656) >> 3) + 2147450880);
    *v75 = -117901064;
    v75[1] = -117901064;
    *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16560));
    v76 = (_DWORD *)(((v1 + 16560) >> 3) + 2147450880);
    *v76 = -117901064;
    v76[1] = -117901064;
    *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16464));
    v77 = (_DWORD *)(((v1 + 16464) >> 3) + 2147450880);
    *v77 = -117901064;
    v77[1] = -117901064;
    *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16368));
    v78 = (_DWORD *)(((v1 + 16368) >> 3) + 2147450880);
    *v78 = -117901064;
    v78[1] = -117901064;
    *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16272));
    v79 = (_DWORD *)(((v1 + 16272) >> 3) + 2147450880);
    *v79 = -117901064;
    v79[1] = -117901064;
    *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16176));
    v80 = (_DWORD *)(((v1 + 16176) >> 3) + 2147450880);
    *v80 = -117901064;
    v80[1] = -117901064;
    *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16080));
    v81 = (_DWORD *)(((v1 + 16080) >> 3) + 2147450880);
    *v81 = -117901064;
    v81[1] = -117901064;
    *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15984));
    v82 = (_DWORD *)(((v1 + 15984) >> 3) + 2147450880);
    *v82 = -117901064;
    v82[1] = -117901064;
    *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15888));
    v83 = (_DWORD *)(((v1 + 15888) >> 3) + 2147450880);
    *v83 = -117901064;
    v83[1] = -117901064;
    *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15792));
    v84 = (_DWORD *)(((v1 + 15792) >> 3) + 2147450880);
    *v84 = -117901064;
    v84[1] = -117901064;
    *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15696));
    v85 = (_DWORD *)(((v1 + 15696) >> 3) + 2147450880);
    *v85 = -117901064;
    v85[1] = -117901064;
    *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15600));
    v86 = (_DWORD *)(((v1 + 15600) >> 3) + 2147450880);
    *v86 = -117901064;
    v86[1] = -117901064;
    *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15504));
    v87 = (_DWORD *)(((v1 + 15504) >> 3) + 2147450880);
    *v87 = -117901064;
    v87[1] = -117901064;
    *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15408));
    v88 = (_DWORD *)(((v1 + 15408) >> 3) + 2147450880);
    *v88 = -117901064;
    v88[1] = -117901064;
    *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15312));
    v89 = (_DWORD *)(((v1 + 15312) >> 3) + 2147450880);
    *v89 = -117901064;
    v89[1] = -117901064;
    *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15216));
    v90 = (_DWORD *)(((v1 + 15216) >> 3) + 2147450880);
    *v90 = -117901064;
    v90[1] = -117901064;
    *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15120));
    v91 = (_DWORD *)(((v1 + 15120) >> 3) + 2147450880);
    *v91 = -117901064;
    v91[1] = -117901064;
    *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15024));
    v92 = (_DWORD *)(((v1 + 15024) >> 3) + 2147450880);
    *v92 = -117901064;
    v92[1] = -117901064;
    *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14928));
    v93 = (_DWORD *)(((v1 + 14928) >> 3) + 2147450880);
    *v93 = -117901064;
    v93[1] = -117901064;
    *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14832));
    v94 = (_DWORD *)(((v1 + 14832) >> 3) + 2147450880);
    *v94 = -117901064;
    v94[1] = -117901064;
    *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14736));
    v95 = (_DWORD *)(((v1 + 14736) >> 3) + 2147450880);
    *v95 = -117901064;
    v95[1] = -117901064;
    *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14640));
    v96 = (_DWORD *)(((v1 + 14640) >> 3) + 2147450880);
    *v96 = -117901064;
    v96[1] = -117901064;
    *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14544));
    v97 = (_DWORD *)(((v1 + 14544) >> 3) + 2147450880);
    *v97 = -117901064;
    v97[1] = -117901064;
    *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14448));
    v98 = (_DWORD *)(((v1 + 14448) >> 3) + 2147450880);
    *v98 = -117901064;
    v98[1] = -117901064;
    *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14352));
    v99 = (_DWORD *)(((v1 + 14352) >> 3) + 2147450880);
    *v99 = -117901064;
    v99[1] = -117901064;
    *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14256));
    v100 = (_DWORD *)(((v1 + 14256) >> 3) + 2147450880);
    *v100 = -117901064;
    v100[1] = -117901064;
    *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14160));
    v101 = (_DWORD *)(((v1 + 14160) >> 3) + 2147450880);
    *v101 = -117901064;
    v101[1] = -117901064;
    *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14064));
    v102 = (_DWORD *)(((v1 + 14064) >> 3) + 2147450880);
    *v102 = -117901064;
    v102[1] = -117901064;
    *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13968));
    v103 = (_DWORD *)(((v1 + 13968) >> 3) + 2147450880);
    *v103 = -117901064;
    v103[1] = -117901064;
    *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13872));
    v104 = (_DWORD *)(((v1 + 13872) >> 3) + 2147450880);
    *v104 = -117901064;
    v104[1] = -117901064;
    *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13776));
    v105 = (_DWORD *)(((v1 + 13776) >> 3) + 2147450880);
    *v105 = -117901064;
    v105[1] = -117901064;
    *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13680));
    v106 = (_DWORD *)(((v1 + 13680) >> 3) + 2147450880);
    *v106 = -117901064;
    v106[1] = -117901064;
    *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13584));
    v107 = (_DWORD *)(((v1 + 13584) >> 3) + 2147450880);
    *v107 = -117901064;
    v107[1] = -117901064;
    *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13488));
    v108 = (_DWORD *)(((v1 + 13488) >> 3) + 2147450880);
    *v108 = -117901064;
    v108[1] = -117901064;
    *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13392));
    v109 = (_DWORD *)(((v1 + 13392) >> 3) + 2147450880);
    *v109 = -117901064;
    v109[1] = -117901064;
    *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13296));
    v110 = (_DWORD *)(((v1 + 13296) >> 3) + 2147450880);
    *v110 = -117901064;
    v110[1] = -117901064;
    *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13200));
    v111 = (_DWORD *)(((v1 + 13200) >> 3) + 2147450880);
    *v111 = -117901064;
    v111[1] = -117901064;
    *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13104));
    v112 = (_DWORD *)(((v1 + 13104) >> 3) + 2147450880);
    *v112 = -117901064;
    v112[1] = -117901064;
    *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13008));
    v113 = (_DWORD *)(((v1 + 13008) >> 3) + 2147450880);
    *v113 = -117901064;
    v113[1] = -117901064;
    *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12912));
    v114 = (_DWORD *)(((v1 + 12912) >> 3) + 2147450880);
    *v114 = -117901064;
    v114[1] = -117901064;
    *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12816));
    v115 = (_DWORD *)(((v1 + 12816) >> 3) + 2147450880);
    *v115 = -117901064;
    v115[1] = -117901064;
    *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12720));
    v116 = (_DWORD *)(((v1 + 12720) >> 3) + 2147450880);
    *v116 = -117901064;
    v116[1] = -117901064;
    *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12624));
    v117 = (_DWORD *)(((v1 + 12624) >> 3) + 2147450880);
    *v117 = -117901064;
    v117[1] = -117901064;
    *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12528));
    v118 = (_DWORD *)(((v1 + 12528) >> 3) + 2147450880);
    *v118 = -117901064;
    v118[1] = -117901064;
    *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12432));
    v119 = (_DWORD *)(((v1 + 12432) >> 3) + 2147450880);
    *v119 = -117901064;
    v119[1] = -117901064;
    *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12336));
    v120 = (_DWORD *)(((v1 + 12336) >> 3) + 2147450880);
    *v120 = -117901064;
    v120[1] = -117901064;
    *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12240));
    v121 = (_DWORD *)(((v1 + 12240) >> 3) + 2147450880);
    *v121 = -117901064;
    v121[1] = -117901064;
    *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12144));
    v122 = (_DWORD *)(((v1 + 12144) >> 3) + 2147450880);
    *v122 = -117901064;
    v122[1] = -117901064;
    *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12048));
    v123 = (_DWORD *)(((v1 + 12048) >> 3) + 2147450880);
    *v123 = -117901064;
    v123[1] = -117901064;
    *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11952));
    v124 = (_DWORD *)(((v1 + 11952) >> 3) + 2147450880);
    *v124 = -117901064;
    v124[1] = -117901064;
    *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11856));
    v125 = (_DWORD *)(((v1 + 11856) >> 3) + 2147450880);
    *v125 = -117901064;
    v125[1] = -117901064;
    *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11760));
    v126 = (_DWORD *)(((v1 + 11760) >> 3) + 2147450880);
    *v126 = -117901064;
    v126[1] = -117901064;
    *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11664));
    v127 = (_DWORD *)(((v1 + 11664) >> 3) + 2147450880);
    *v127 = -117901064;
    v127[1] = -117901064;
    *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11568));
    v128 = (_DWORD *)(((v1 + 11568) >> 3) + 2147450880);
    *v128 = -117901064;
    v128[1] = -117901064;
    *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11472));
    v129 = (_DWORD *)(((v1 + 11472) >> 3) + 2147450880);
    *v129 = -117901064;
    v129[1] = -117901064;
    *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11376));
    v130 = (_DWORD *)(((v1 + 11376) >> 3) + 2147450880);
    *v130 = -117901064;
    v130[1] = -117901064;
    *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11280));
    v131 = (_DWORD *)(((v1 + 11280) >> 3) + 2147450880);
    *v131 = -117901064;
    v131[1] = -117901064;
    *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11184));
    v132 = (_DWORD *)(((v1 + 11184) >> 3) + 2147450880);
    *v132 = -117901064;
    v132[1] = -117901064;
    *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11088));
    v133 = (_DWORD *)(((v1 + 11088) >> 3) + 2147450880);
    *v133 = -117901064;
    v133[1] = -117901064;
    *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10992));
    v134 = (_DWORD *)(((v1 + 10992) >> 3) + 2147450880);
    *v134 = -117901064;
    v134[1] = -117901064;
    *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10896));
    v135 = (_DWORD *)(((v1 + 10896) >> 3) + 2147450880);
    *v135 = -117901064;
    v135[1] = -117901064;
    *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10800));
    v136 = (_DWORD *)(((v1 + 10800) >> 3) + 2147450880);
    *v136 = -117901064;
    v136[1] = -117901064;
    *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10704));
    v137 = (_DWORD *)(((v1 + 10704) >> 3) + 2147450880);
    *v137 = -117901064;
    v137[1] = -117901064;
    *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10608));
    v138 = (_DWORD *)(((v1 + 10608) >> 3) + 2147450880);
    *v138 = -117901064;
    v138[1] = -117901064;
    *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10512));
    v139 = (_DWORD *)(((v1 + 10512) >> 3) + 2147450880);
    *v139 = -117901064;
    v139[1] = -117901064;
    *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10416));
    v140 = (_DWORD *)(((v1 + 10416) >> 3) + 2147450880);
    *v140 = -117901064;
    v140[1] = -117901064;
    *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10320));
    v141 = (_DWORD *)(((v1 + 10320) >> 3) + 2147450880);
    *v141 = -117901064;
    v141[1] = -117901064;
    *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10224));
    v142 = (_DWORD *)(((v1 + 10224) >> 3) + 2147450880);
    *v142 = -117901064;
    v142[1] = -117901064;
    *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10128));
    v143 = (_DWORD *)(((v1 + 10128) >> 3) + 2147450880);
    *v143 = -117901064;
    v143[1] = -117901064;
    *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10032));
    v144 = (_DWORD *)(((v1 + 10032) >> 3) + 2147450880);
    *v144 = -117901064;
    v144[1] = -117901064;
    *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9936));
    v145 = (_DWORD *)(((v1 + 9936) >> 3) + 2147450880);
    *v145 = -117901064;
    v145[1] = -117901064;
    *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9840));
    v146 = (_DWORD *)(((v1 + 9840) >> 3) + 2147450880);
    *v146 = -117901064;
    v146[1] = -117901064;
    *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9744));
    v147 = (_DWORD *)(((v1 + 9744) >> 3) + 2147450880);
    *v147 = -117901064;
    v147[1] = -117901064;
    *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9648));
    v148 = (_DWORD *)(((v1 + 9648) >> 3) + 2147450880);
    *v148 = -117901064;
    v148[1] = -117901064;
    *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9552));
    v149 = (_DWORD *)(((v1 + 9552) >> 3) + 2147450880);
    *v149 = -117901064;
    v149[1] = -117901064;
    *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9456));
    v150 = (_DWORD *)(((v1 + 9456) >> 3) + 2147450880);
    *v150 = -117901064;
    v150[1] = -117901064;
    *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9360));
    v151 = (_DWORD *)(((v1 + 9360) >> 3) + 2147450880);
    *v151 = -117901064;
    v151[1] = -117901064;
    *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9264));
    v152 = (_DWORD *)(((v1 + 9264) >> 3) + 2147450880);
    *v152 = -117901064;
    v152[1] = -117901064;
    *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9168));
    v153 = (_DWORD *)(((v1 + 9168) >> 3) + 2147450880);
    *v153 = -117901064;
    v153[1] = -117901064;
    *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9072));
    v154 = (_DWORD *)(((v1 + 9072) >> 3) + 2147450880);
    *v154 = -117901064;
    v154[1] = -117901064;
    *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8976));
    v155 = (_DWORD *)(((v1 + 8976) >> 3) + 2147450880);
    *v155 = -117901064;
    v155[1] = -117901064;
    *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8880));
    v156 = (_DWORD *)(((v1 + 8880) >> 3) + 2147450880);
    *v156 = -117901064;
    v156[1] = -117901064;
    *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8784));
    v157 = (_DWORD *)(((v1 + 8784) >> 3) + 2147450880);
    *v157 = -117901064;
    v157[1] = -117901064;
    *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8688));
    v158 = (_DWORD *)(((v1 + 8688) >> 3) + 2147450880);
    *v158 = -117901064;
    v158[1] = -117901064;
    *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8592));
    v159 = (_DWORD *)(((v1 + 8592) >> 3) + 2147450880);
    *v159 = -117901064;
    v159[1] = -117901064;
    *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8496));
    v160 = (_DWORD *)(((v1 + 8496) >> 3) + 2147450880);
    *v160 = -117901064;
    v160[1] = -117901064;
    *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8400));
    v161 = (_DWORD *)(((v1 + 8400) >> 3) + 2147450880);
    *v161 = -117901064;
    v161[1] = -117901064;
    *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8304));
    v162 = (_DWORD *)(((v1 + 8304) >> 3) + 2147450880);
    *v162 = -117901064;
    v162[1] = -117901064;
    *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8208));
    v163 = (_DWORD *)(((v1 + 8208) >> 3) + 2147450880);
    *v163 = -117901064;
    v163[1] = -117901064;
    *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8112));
    v164 = (_DWORD *)(((v1 + 8112) >> 3) + 2147450880);
    *v164 = -117901064;
    v164[1] = -117901064;
    *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8016));
    v165 = (_DWORD *)(((v1 + 8016) >> 3) + 2147450880);
    *v165 = -117901064;
    v165[1] = -117901064;
    *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7920));
    v166 = (_DWORD *)(((v1 + 7920) >> 3) + 2147450880);
    *v166 = -117901064;
    v166[1] = -117901064;
    *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7824));
    v167 = (_DWORD *)(((v1 + 7824) >> 3) + 2147450880);
    *v167 = -117901064;
    v167[1] = -117901064;
    *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7728));
    v168 = (_DWORD *)(((v1 + 7728) >> 3) + 2147450880);
    *v168 = -117901064;
    v168[1] = -117901064;
    *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7632));
    v169 = (_DWORD *)(((v1 + 7632) >> 3) + 2147450880);
    *v169 = -117901064;
    v169[1] = -117901064;
    *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7536));
    v170 = (_DWORD *)(((v1 + 7536) >> 3) + 2147450880);
    *v170 = -117901064;
    v170[1] = -117901064;
    *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7440));
    v171 = (_DWORD *)(((v1 + 7440) >> 3) + 2147450880);
    *v171 = -117901064;
    v171[1] = -117901064;
    *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7344));
    v172 = (_DWORD *)(((v1 + 7344) >> 3) + 2147450880);
    *v172 = -117901064;
    v172[1] = -117901064;
    *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7248));
    v173 = (_DWORD *)(((v1 + 7248) >> 3) + 2147450880);
    *v173 = -117901064;
    v173[1] = -117901064;
    *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7152));
    v174 = (_DWORD *)(((v1 + 7152) >> 3) + 2147450880);
    *v174 = -117901064;
    v174[1] = -117901064;
    *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7056));
    v175 = (_DWORD *)(((v1 + 7056) >> 3) + 2147450880);
    *v175 = -117901064;
    v175[1] = -117901064;
    *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6960));
    v176 = (_DWORD *)(((v1 + 6960) >> 3) + 2147450880);
    *v176 = -117901064;
    v176[1] = -117901064;
    *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6864));
    v177 = (_DWORD *)(((v1 + 6864) >> 3) + 2147450880);
    *v177 = -117901064;
    v177[1] = -117901064;
    *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6768));
    v178 = (_DWORD *)(((v1 + 6768) >> 3) + 2147450880);
    *v178 = -117901064;
    v178[1] = -117901064;
    *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6672));
    v179 = (_DWORD *)(((v1 + 6672) >> 3) + 2147450880);
    *v179 = -117901064;
    v179[1] = -117901064;
    *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6576));
    v180 = (_DWORD *)(((v1 + 6576) >> 3) + 2147450880);
    *v180 = -117901064;
    v180[1] = -117901064;
    *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6480));
    v181 = (_DWORD *)(((v1 + 6480) >> 3) + 2147450880);
    *v181 = -117901064;
    v181[1] = -117901064;
    *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6384));
    v182 = (_DWORD *)(((v1 + 6384) >> 3) + 2147450880);
    *v182 = -117901064;
    v182[1] = -117901064;
    *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6288));
    v183 = (_DWORD *)(((v1 + 6288) >> 3) + 2147450880);
    *v183 = -117901064;
    v183[1] = -117901064;
    *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6192));
    v184 = (_DWORD *)(((v1 + 6192) >> 3) + 2147450880);
    *v184 = -117901064;
    v184[1] = -117901064;
    *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6096));
    v185 = (_DWORD *)(((v1 + 6096) >> 3) + 2147450880);
    *v185 = -117901064;
    v185[1] = -117901064;
    *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6000));
    v186 = (_DWORD *)(((v1 + 6000) >> 3) + 2147450880);
    *v186 = -117901064;
    v186[1] = -117901064;
    *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5904));
    v187 = (_DWORD *)(((v1 + 5904) >> 3) + 2147450880);
    *v187 = -117901064;
    v187[1] = -117901064;
    *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5808));
    v188 = (_DWORD *)(((v1 + 5808) >> 3) + 2147450880);
    *v188 = -117901064;
    v188[1] = -117901064;
    *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5712));
    v189 = (_DWORD *)(((v1 + 5712) >> 3) + 2147450880);
    *v189 = -117901064;
    v189[1] = -117901064;
    *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5616));
    v190 = (_DWORD *)(((v1 + 5616) >> 3) + 2147450880);
    *v190 = -117901064;
    v190[1] = -117901064;
    *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5520));
    v191 = (_DWORD *)(((v1 + 5520) >> 3) + 2147450880);
    *v191 = -117901064;
    v191[1] = -117901064;
    *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5424));
    v192 = (_DWORD *)(((v1 + 5424) >> 3) + 2147450880);
    *v192 = -117901064;
    v192[1] = -117901064;
    *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5328));
    v193 = (_DWORD *)(((v1 + 5328) >> 3) + 2147450880);
    *v193 = -117901064;
    v193[1] = -117901064;
    *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5232));
    v194 = (_DWORD *)(((v1 + 5232) >> 3) + 2147450880);
    *v194 = -117901064;
    v194[1] = -117901064;
    *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5136));
    v195 = (_DWORD *)(((v1 + 5136) >> 3) + 2147450880);
    *v195 = -117901064;
    v195[1] = -117901064;
    *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5040));
    v196 = (_DWORD *)(((v1 + 5040) >> 3) + 2147450880);
    *v196 = -117901064;
    v196[1] = -117901064;
    *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4944));
    v197 = (_DWORD *)(((v1 + 4944) >> 3) + 2147450880);
    *v197 = -117901064;
    v197[1] = -117901064;
    *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4848));
    v198 = (_DWORD *)(((v1 + 4848) >> 3) + 2147450880);
    *v198 = -117901064;
    v198[1] = -117901064;
    *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4752));
    v199 = (_DWORD *)(((v1 + 4752) >> 3) + 2147450880);
    *v199 = -117901064;
    v199[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4656));
    v200 = (_DWORD *)(((v1 + 4656) >> 3) + 2147450880);
    *v200 = -117901064;
    v200[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4560));
    v201 = (_DWORD *)(((v1 + 4560) >> 3) + 2147450880);
    *v201 = -117901064;
    v201[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4464));
    v202 = (_DWORD *)(((v1 + 4464) >> 3) + 2147450880);
    *v202 = -117901064;
    v202[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4368));
    v203 = (_DWORD *)(((v1 + 4368) >> 3) + 2147450880);
    *v203 = -117901064;
    v203[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4272));
    v204 = (_DWORD *)(((v1 + 4272) >> 3) + 2147450880);
    *v204 = -117901064;
    v204[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4176));
    v205 = (_DWORD *)(((v1 + 4176) >> 3) + 2147450880);
    *v205 = -117901064;
    v205[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4080));
    v206 = (_DWORD *)(((v1 + 4080) >> 3) + 2147450880);
    *v206 = -117901064;
    v206[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3984));
    v207 = (_DWORD *)(((v1 + 3984) >> 3) + 2147450880);
    *v207 = -117901064;
    v207[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3888));
    v208 = (_DWORD *)(((v1 + 3888) >> 3) + 2147450880);
    *v208 = -117901064;
    v208[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3792));
    v209 = (_DWORD *)(((v1 + 3792) >> 3) + 2147450880);
    *v209 = -117901064;
    v209[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3696));
    v210 = (_DWORD *)(((v1 + 3696) >> 3) + 2147450880);
    *v210 = -117901064;
    v210[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3600));
    v211 = (_DWORD *)(((v1 + 3600) >> 3) + 2147450880);
    *v211 = -117901064;
    v211[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3504));
    v212 = (_DWORD *)(((v1 + 3504) >> 3) + 2147450880);
    *v212 = -117901064;
    v212[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3408));
  }
  if ( v214 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF92E8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 4848) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_10(v1, 38784LL, v214);
  }
  return &data::getOpenStateTypeEnumMap[abi:cxx11](void)::m;
};

// Line 4781: range 000000000FABA0FC-000000000FABA46F
const char *__fastcall data::enumValToStr(data::MaterialDestroyType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:4780 64 8 9 iter:4783 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getMaterialDestroyTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::MaterialDestroyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::MaterialDestroyType,std::pair<std::string,std::string>>::find(map, (const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::MaterialDestroyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::MaterialDestroyType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      4786);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_MaterialDestroyType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::MaterialDestroyType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4793: range 000000000FABA470-000000000FABAA28
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::MaterialDestroyType>,false,true>::pointer v10; // rax
  data::MaterialDestroyType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::MaterialDestroyType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:4802 96 8 9 <unknown> 128 8 6 s:4792 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getMaterialDestroyTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::MaterialDestroyType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::MaterialDestroyType>::find(
                                                                                                m,
                                                                                                (const std::unordered_map<std::string,data::MaterialDestroyType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::MaterialDestroyType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::MaterialDestroyType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::MaterialDestroyType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialDestroyType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialDestroyType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        4805);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::MaterialDestroyType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::MaterialDestroyType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      4796);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4814: range 000000000FABAA29-000000000FABB34E
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::MaterialDestroyType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::MaterialDestroyType>,false,true>::pointer v12; // rax
  data::MaterialDestroyType second; // ecx
  char v14; // dl
  char v16[528]; // [rsp+20h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 8 7 "
                        "it:4826 144 8 9 <unknown> 176 8 6 s:4813 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown"
                        "> 400 40 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  *(_QWORD *)(v2 + 176) = s;
  if ( *(_QWORD *)(v2 + 176) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::MaterialDestroyType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::MaterialDestroyType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::MaterialDestroyType>::pair<char const(&)[19],data::MaterialDestroyType,true>(
        (std::pair<const std::string,data::MaterialDestroyType> *const)(v2 + 400),
        (const char (*)[19])byte_1A652A80,
        (data::MaterialDestroyType *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::MaterialDestroyType>>::allocator((std::allocator<std::pair<const std::string,data::MaterialDestroyType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::MaterialDestroyType>::unordered_map(
        &data::enumStrToVal(char const*,data::MaterialDestroyType &)::m,
        (std::initializer_list<std::pair<const std::string,data::MaterialDestroyType> >)__PAIR128__(1LL, v2 + 400),
        0LL,
        (const std::unordered_map<std::string,data::MaterialDestroyType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::MaterialDestroyType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::MaterialDestroyType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::MaterialDestroyType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::MaterialDestroyType>::~unordered_map,
        &data::enumStrToVal(char const*,data::MaterialDestroyType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::MaterialDestroyType>>::~allocator((std::allocator<std::pair<const std::string,data::MaterialDestroyType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::MaterialDestroyType> *)(v2 + 440);
            i != (std::pair<const std::string,data::MaterialDestroyType> *)(v2 + 400);
            std::pair<std::string const,data::MaterialDestroyType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 400) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_BYTE *)(v7 + 4) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v8 = *(const char **)(v2 + 176);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 272),
      v8,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v8);
    *(std::unordered_map<std::string,data::MaterialDestroyType>::iterator *)(v2 + 112) = std::unordered_map<std::string,data::MaterialDestroyType>::find(
                                                                                           &data::enumStrToVal(char const*,data::MaterialDestroyType &)::m,
                                                                                           (const std::unordered_map<std::string,data::MaterialDestroyType>::key_type *)(v2 + 272));
    std::string::~string((void *)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v2 + 272);
    *(std::unordered_map<std::string,data::MaterialDestroyType>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::MaterialDestroyType>::end(&data::enumStrToVal(char const*,data::MaterialDestroyType &)::m);
    v9 = (char *)(v2 + 144);
    v10 = std::__detail::operator==<std::pair<std::string const,data::MaterialDestroyType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialDestroyType>,true> *)(v2 + 112),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialDestroyType>,true> *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        4829);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 336),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::MaterialDestroyType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::MaterialDestroyType>,false,true> *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      4817);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 208),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 4838: range 000000000FABB34F-000000000FABB365
const char *__cdecl data::getDescription(data::MaterialDestroyType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 4843: range 000000000FABB366-000000000FABB51B
bool __cdecl data::isValidMaterialDestroyType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:4844 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidMaterialDestroyType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getMaterialDestroyTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::MaterialDestroyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::MaterialDestroyType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getMaterialDestroyTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::MaterialDestroyType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::MaterialDestroyType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4849: range 000000000FABB51C-000000000FABB67D
bool __cdecl data::isValidMaterialDestroyTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::MaterialDestroyType> *v5; // rcx
  const std::unordered_map<std::string,data::MaterialDestroyType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidMaterialDestroyTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getMaterialDestroyTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::MaterialDestroyType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::MaterialDestroyType>::end(v5);
  v6 = data::getMaterialDestroyTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::MaterialDestroyType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::MaterialDestroyType>::find(
                                                                                              v6,
                                                                                              name);
  result = std::__detail::operator!=<std::pair<std::string const,data::MaterialDestroyType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialDestroyType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::MaterialDestroyType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4854: range 000000000FABB67E-000000000FABBA84
const std::unordered_map<std::string,data::MaterialDestroyType> *__cdecl data::getMaterialDestroyTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::MaterialDestroyType> *i; // r14
  const std::unordered_map<std::string,data::MaterialDestroyType> *result; // rax
  char v6[272]; // [rsp+10h] [rbp-110h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(224LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 80 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getMaterialDestroyTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = 61956;
  v3[536862726] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getMaterialDestroyTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getMaterialDestroyTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::MaterialDestroyType>::pair<char const(&)[13],data::MaterialDestroyType,true>(
      (std::pair<const std::string,data::MaterialDestroyType> *const)(v1 + 112),
      (const char (*)[13])"DESTROY_NONE",
      (data::MaterialDestroyType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "DESTROY_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::MaterialDestroyType>::pair<char const(&)[24],data::MaterialDestroyType,true>(
      (std::pair<const std::string,data::MaterialDestroyType> *const)(v1 + 152),
      (const char (*)[24])"DESTROY_RETURN_MATERIAL",
      (data::MaterialDestroyType *)(v1 + 96));
    std::allocator<std::pair<std::string const,data::MaterialDestroyType>>::allocator((std::allocator<std::pair<const std::string,data::MaterialDestroyType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::MaterialDestroyType>::unordered_map(
      &data::getMaterialDestroyTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::MaterialDestroyType> >)__PAIR128__(2LL, v1 + 112),
      0LL,
      (const std::unordered_map<std::string,data::MaterialDestroyType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::MaterialDestroyType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::MaterialDestroyType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getMaterialDestroyTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::MaterialDestroyType>::~unordered_map,
      &data::getMaterialDestroyTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::MaterialDestroyType>>::~allocator((std::allocator<std::pair<const std::string,data::MaterialDestroyType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::MaterialDestroyType> *)(v1 + 192);
          i != (std::pair<const std::string,data::MaterialDestroyType> *)(v1 + 112);
          std::pair<std::string const,data::MaterialDestroyType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getMaterialDestroyTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 4864: range 000000000FABBA85-000000000FABC042
const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >> *__cdecl data::getMaterialDestroyTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >> *result; // rax
  char v8[560]; // [rsp+10h] [rbp-230h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(512LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 64 9 <unknown> 208 64 "
                        "9 <unknown> 304 144 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getMaterialDestroyTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = 61956;
  v3[536862725] = -219021312;
  v3[536862726] = 62194;
  v3[536862728] = -219021312;
  v3[536862729] = 62194;
  v3[536862734] = -202116109;
  v3[536862735] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getMaterialDestroyTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getMaterialDestroyTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 112),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[13])"DESTROY_NONE");
    std::pair<data::MaterialDestroyType const,std::pair<std::string,std::string>>::pair<data::MaterialDestroyType,true>(
      (std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > *const)(v1 + 304),
      (data::MaterialDestroyType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 208),
      (const char (*)[19])byte_1A652A80,
      (const char (*)[24])"DESTROY_RETURN_MATERIAL");
    std::pair<data::MaterialDestroyType const,std::pair<std::string,std::string>>::pair<data::MaterialDestroyType,true>(
      (std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > *const)(v1 + 376),
      (data::MaterialDestroyType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 208));
    std::allocator<std::pair<data::MaterialDestroyType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::MaterialDestroyType,std::pair<std::string,std::string>>::map(
      &data::getMaterialDestroyTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > >)__PAIR128__(2LL, v1 + 304),
      (const std::less<data::MaterialDestroyType> *)(v1 + 48),
      (const std::map<data::MaterialDestroyType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getMaterialDestroyTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::MaterialDestroyType,std::pair<std::string,std::string>>::~map,
      &data::getMaterialDestroyTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::MaterialDestroyType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > *)(v1 + 448);
          i != (std::pair<const data::MaterialDestroyType,std::pair<std::string,std::string > > *)(v1 + 304);
          std::pair<data::MaterialDestroyType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 304) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_WORD *)(v5 + 16) = -1800;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 208));
    v6 = (_DWORD *)(((v1 + 208) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 112));
  }
  result = &data::getMaterialDestroyTypeEnumMap[abi:cxx11](void)::m;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4874: range 000000000FABC043-000000000FABC3B6
const char *__fastcall data::enumValToStr(data::ClimateType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::ClimateType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:4873 64 8 9 iter:4876 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getClimateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::ClimateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ClimateType,std::pair<std::string,std::string>>::find(
                                                                                                    map,
                                                                                                    (const std::map<data::ClimateType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::ClimateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ClimateType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      4879);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_ClimateType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::ClimateType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4886: range 000000000FABC3B7-000000000FABC96F
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ClimateType>,false,true>::pointer v10; // rax
  data::ClimateType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::ClimateType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:4895 96 8 9 <unknown> 128 8 6 s:4885 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getClimateTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::ClimateType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ClimateType>::find(
                                                                                        m,
                                                                                        (const std::unordered_map<std::string,data::ClimateType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::ClimateType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::ClimateType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::ClimateType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ClimateType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ClimateType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        4898);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::ClimateType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::ClimateType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      4889);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 4907: range 000000000FABC970-000000000FABD64D
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::ClimateType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::ClimateType>,false,true>::pointer v11; // rax
  data::ClimateType second; // ecx
  char v13; // dl
  char v15[912]; // [rsp+20h] [rbp-390h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(864LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 8 7 it:4925 256 8 9 <unknown> 288 8 6 s:4906 320 32 9 <unknown> 384 32 9 <unknown> 448 "
                        "32 9 <unknown> 512 280 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -218959360;
  v4[536862728] = -218959360;
  v4[536862729] = -218959360;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862744] = -218103808;
  v4[536862745] = -202116109;
  v4[536862746] = -202116109;
  *(_QWORD *)(v2 + 288) = s;
  if ( *(_QWORD *)(v2 + 288) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::ClimateType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::ClimateType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::ClimateType>::pair<char const(&)[4],data::ClimateType,true>(
        (std::pair<const std::string,data::ClimateType> *const)(v2 + 512),
        (const char (*)[4])off_1A652E00,
        (data::ClimateType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, off_1A652E00);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::ClimateType>::pair<char const(&)[7],data::ClimateType,true>(
        (std::pair<const std::string,data::ClimateType> *const)(v2 + 552),
        (const char (*)[7])byte_1A652E40,
        (data::ClimateType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A652E40);
      *(_DWORD *)(v2 + 144) = 3;
      std::pair<std::string const,data::ClimateType>::pair<char const(&)[4],data::ClimateType,true>(
        (std::pair<const std::string,data::ClimateType> *const)(v2 + 592),
        (const char (*)[4])off_1A652E80,
        (data::ClimateType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, off_1A652E80);
      *(_DWORD *)(v2 + 160) = 4;
      std::pair<std::string const,data::ClimateType>::pair<char const(&)[7],data::ClimateType,true>(
        (std::pair<const std::string,data::ClimateType> *const)(v2 + 632),
        (const char (*)[7])byte_1A652EC0,
        (data::ClimateType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A652EC0);
      *(_DWORD *)(v2 + 176) = 5;
      std::pair<std::string const,data::ClimateType>::pair<char const(&)[4],data::ClimateType,true>(
        (std::pair<const std::string,data::ClimateType> *const)(v2 + 672),
        (const char (*)[4])off_1A652F00,
        (data::ClimateType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, off_1A652F00);
      *(_DWORD *)(v2 + 192) = 6;
      std::pair<std::string const,data::ClimateType>::pair<char const(&)[4],data::ClimateType,true>(
        (std::pair<const std::string,data::ClimateType> *const)(v2 + 712),
        (const char (*)[4])off_1A652F40,
        (data::ClimateType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, off_1A652F40);
      *(_DWORD *)(v2 + 208) = 7;
      std::pair<std::string const,data::ClimateType>::pair<char const(&)[7],data::ClimateType,true>(
        (std::pair<const std::string,data::ClimateType> *const)(v2 + 752),
        (const char (*)[7])byte_1A652F80,
        (data::ClimateType *)(v2 + 208));
      std::allocator<std::pair<std::string const,data::ClimateType>>::allocator((std::allocator<std::pair<const std::string,data::ClimateType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::ClimateType>::unordered_map(
        &data::enumStrToVal(char const*,data::ClimateType &)::m,
        (std::initializer_list<std::pair<const std::string,data::ClimateType> >)__PAIR128__(7LL, v2 + 512),
        0LL,
        (const std::unordered_map<std::string,data::ClimateType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::ClimateType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::ClimateType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::ClimateType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::ClimateType>::~unordered_map,
        &data::enumStrToVal(char const*,data::ClimateType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ClimateType>>::~allocator((std::allocator<std::pair<const std::string,data::ClimateType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ClimateType> *)(v2 + 792);
            i != (std::pair<const std::string,data::ClimateType> *)(v2 + 512);
            std::pair<std::string const,data::ClimateType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 512, 280LL);
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v7 = *(const char **)(v2 + 288);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 384),
      v7,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 224, v7);
    *(std::unordered_map<std::string,data::ClimateType>::iterator *)(v2 + 224) = std::unordered_map<std::string,data::ClimateType>::find(
                                                                                   &data::enumStrToVal(char const*,data::ClimateType &)::m,
                                                                                   (const std::unordered_map<std::string,data::ClimateType>::key_type *)(v2 + 384));
    std::string::~string((void *)(v2 + 384));
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 256, v2 + 384);
    *(std::unordered_map<std::string,data::ClimateType>::iterator *)(v2 + 256) = std::unordered_map<std::string,data::ClimateType>::end(&data::enumStrToVal(char const*,data::ClimateType &)::m);
    v8 = (char *)(v2 + 256);
    v9 = std::__detail::operator==<std::pair<std::string const,data::ClimateType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ClimateType>,true> *)(v2 + 224),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ClimateType>,true> *)(v2 + 256));
    *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        4928);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 448),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 288));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::ClimateType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ClimateType>,false,true> *const)(v2 + 224));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 320),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      4910);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 320),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8034) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = -168430091;
  }
  return result;
};

// Line 4937: range 000000000FABD64E-000000000FABD664
const char *__cdecl data::getDescription(data::ClimateType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 4942: range 000000000FABD665-000000000FABD81A
bool __cdecl data::isValidClimateType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::ClimateType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::ClimateType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:4943 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidClimateType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getClimateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::ClimateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ClimateType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getClimateTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::ClimateType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ClimateType,std::pair<std::string,std::string>>::find(
                                                                                                    v6,
                                                                                                    (const std::map<data::ClimateType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4948: range 000000000FABD81B-000000000FABD97C
bool __cdecl data::isValidClimateTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::ClimateType> *v5; // rcx
  const std::unordered_map<std::string,data::ClimateType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidClimateTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getClimateTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::ClimateType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ClimateType>::end(v5);
  v6 = data::getClimateTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::ClimateType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::ClimateType>::find(
                                                                                      v6,
                                                                                      name);
  result = std::__detail::operator!=<std::pair<std::string const,data::ClimateType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ClimateType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ClimateType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 4953: range 000000000FABD97D-000000000FABE0EE
const std::unordered_map<std::string,data::ClimateType> *__cdecl data::getClimateTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::ClimateType> *i; // r14
  char v6[656]; // [rsp+10h] [rbp-290h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(608LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "12 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 320 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getClimateTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862737] = -202116109;
  v3[536862738] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getClimateTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getClimateTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[13],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 224),
      (const char (*)[13])"CLIMATE_NONE",
      (data::ClimateType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "CLIMATE_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[14],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 264),
      (const char (*)[14])"CLIMATE_SUNNY",
      (data::ClimateType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "CLIMATE_SUNNY");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[15],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 304),
      (const char (*)[15])"CLIMATE_CLOUDY",
      (data::ClimateType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "CLIMATE_CLOUDY");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[13],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 344),
      (const char (*)[13])"CLIMATE_RAIN",
      (data::ClimateType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "CLIMATE_RAIN");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[21],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 384),
      (const char (*)[21])"CLIMATE_THUNDERSTORM",
      (data::ClimateType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "CLIMATE_THUNDERSTORM");
    *(_DWORD *)(v1 + 176) = 5;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[13],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 424),
      (const char (*)[13])"CLIMATE_SNOW",
      (data::ClimateType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "CLIMATE_SNOW");
    *(_DWORD *)(v1 + 192) = 6;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[13],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 464),
      (const char (*)[13])"CLIMATE_MIST",
      (data::ClimateType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "CLIMATE_MIST");
    *(_DWORD *)(v1 + 208) = 7;
    std::pair<std::string const,data::ClimateType>::pair<char const(&)[15],data::ClimateType,true>(
      (std::pair<const std::string,data::ClimateType> *const)(v1 + 504),
      (const char (*)[15])"CLIMATE_DESERT",
      (data::ClimateType *)(v1 + 208));
    std::allocator<std::pair<std::string const,data::ClimateType>>::allocator((std::allocator<std::pair<const std::string,data::ClimateType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::ClimateType>::unordered_map(
      &data::getClimateTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::ClimateType> >)__PAIR128__(8LL, v1 + 224),
      0LL,
      (const std::unordered_map<std::string,data::ClimateType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::ClimateType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::ClimateType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getClimateTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::ClimateType>::~unordered_map,
      &data::getClimateTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::ClimateType>>::~allocator((std::allocator<std::pair<const std::string,data::ClimateType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::ClimateType> *)(v1 + 544);
          i != (std::pair<const std::string,data::ClimateType> *)(v1 + 224);
          std::pair<std::string const,data::ClimateType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8048) = -168430091;
  }
  return &data::getClimateTypeNameMap[abi:cxx11](void)::m;
};

// Line 4969: range 000000000FABE0EF-000000000FABECED
const std::map<data::ClimateType,std::pair<std::string,std::string >> *__cdecl data::getClimateTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::ClimateType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  char v13[1712]; // [rsp+10h] [rbp-6B0h] BYREF

  v1 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1664LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "19 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 64 9 <unkn"
                        "own> 288 64 9 <unknown> 384 64 9 <unknown> 480 64 9 <unknown> 576 64 9 <unknown> 672 64 9 <unkno"
                        "wn> 768 64 9 <unknown> 864 64 9 <unknown> 960 576 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getClimateTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862728] = -218959118;
  v3[536862731] = -218959118;
  v3[536862734] = -218959118;
  v3[536862737] = -218959118;
  v3[536862740] = -218959118;
  v3[536862743] = -218959118;
  v3[536862746] = -218959118;
  v3[536862749] = -218959118;
  v3[536862768] = -202116109;
  v3[536862769] = -202116109;
  v3[536862770] = -202116109;
  v3[536862771] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getClimateTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getClimateTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 192),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[13])"CLIMATE_NONE");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 960),
      (data::ClimateType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 288),
      (const char (*)[4])off_1A652E00,
      (const char (*)[14])"CLIMATE_SUNNY");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 1032),
      (data::ClimateType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 384),
      (const char (*)[7])byte_1A652E40,
      (const char (*)[15])"CLIMATE_CLOUDY");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 1104),
      (data::ClimateType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 480),
      (const char (*)[4])off_1A652E80,
      (const char (*)[13])"CLIMATE_RAIN");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 1176),
      (data::ClimateType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 576),
      (const char (*)[7])byte_1A652EC0,
      (const char (*)[21])"CLIMATE_THUNDERSTORM");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 1248),
      (data::ClimateType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 672),
      (const char (*)[4])off_1A652F00,
      (const char (*)[13])"CLIMATE_SNOW");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 1320),
      (data::ClimateType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[4],char const(&)[13],true>(
      (std::pair<std::string,std::string > *const)(v1 + 768),
      (const char (*)[4])off_1A652F40,
      (const char (*)[13])"CLIMATE_MIST");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 1392),
      (data::ClimateType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[15],true>(
      (std::pair<std::string,std::string > *const)(v1 + 864),
      (const char (*)[7])byte_1A652F80,
      (const char (*)[15])"CLIMATE_DESERT");
    std::pair<data::ClimateType const,std::pair<std::string,std::string>>::pair<data::ClimateType,true>(
      (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *const)(v1 + 1464),
      (data::ClimateType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 864));
    std::allocator<std::pair<data::ClimateType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::ClimateType,std::pair<std::string,std::string>>::map(
      &data::getClimateTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::ClimateType,std::pair<std::string,std::string > > >)__PAIR128__(8LL, v1 + 960),
      (const std::less<data::ClimateType> *)(v1 + 32),
      (const std::map<data::ClimateType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getClimateTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::ClimateType,std::pair<std::string,std::string>>::~map,
      &data::getClimateTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::ClimateType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::ClimateType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *)(v1 + 1536);
          i != (std::pair<const data::ClimateType,std::pair<std::string,std::string > > *)(v1 + 960);
          std::pair<data::ClimateType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 960, 576LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 864));
    v5 = (_DWORD *)(((v1 + 864) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 768));
    v6 = (_DWORD *)(((v1 + 768) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 672));
    v7 = (_DWORD *)(((v1 + 672) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 576));
    v8 = (_DWORD *)(((v1 + 576) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 480));
    v9 = (_DWORD *)(((v1 + 480) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 384));
    v10 = (_DWORD *)(((v1 + 384) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 288));
    v11 = (_DWORD *)(((v1 + 288) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 192));
  }
  if ( v13 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF80C8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 208) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1664LL, v13);
  }
  return &data::getClimateTypeEnumMap[abi:cxx11](void)::m;
};

// Line 4985: range 000000000FABECEE-000000000FABF061
const char *__fastcall data::enumValToStr(data::FetterCondType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::FetterCondType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:4984 64 8 9 iter:4987 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getFetterCondTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::FetterCondType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::FetterCondType,std::pair<std::string,std::string>>::find(map, (const std::map<data::FetterCondType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::FetterCondType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::FetterCondType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      4990);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_FetterCondType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::FetterCondType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 4997: range 000000000FABF062-000000000FABF61A
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::FetterCondType>,false,true>::pointer v10; // rax
  data::FetterCondType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::FetterCondType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:5006 96 8 9 <unknown> 128 8 6 s:4996 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getFetterCondTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::FetterCondType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::FetterCondType>::find(
                                                                                           m,
                                                                                           (const std::unordered_map<std::string,data::FetterCondType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::FetterCondType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::FetterCondType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::FetterCondType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FetterCondType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FetterCondType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        5009);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::FetterCondType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::FetterCondType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      5000);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 5018: range 000000000FABF61B-000000000FAC0580
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::FetterCondType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::FetterCondType>,false,true>::pointer v11; // rax
  data::FetterCondType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[1168]; // [rsp+20h] [rbp-490h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1120LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "23 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 8 7 it:5041 320 8 9 <unknown> 352 8 6 s:5017 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <u"
                        "nknown> 576 480 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -218959360;
  v4[536862730] = -218959360;
  v4[536862731] = -218959360;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862753] = -202116109;
  v4[536862754] = -202116109;
  *(_QWORD *)(v2 + 352) = s;
  if ( *(_QWORD *)(v2 + 352) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::FetterCondType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::FetterCondType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 576),
        (const char (*)[13])byte_1A653700,
        (data::FetterCondType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, byte_1A653700);
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 616),
        (const char (*)[13])byte_1A653740,
        (data::FetterCondType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A653740);
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 656),
        (const char (*)[13])byte_1A653780,
        (data::FetterCondType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A653780);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[16],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 696),
        (const char (*)[16])byte_1A6537C0,
        (data::FetterCondType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A6537C0);
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 736),
        (const char (*)[13])byte_1A653800,
        (data::FetterCondType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A653800);
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[9],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 776),
        (const char (*)[9])byte_1A653840,
        (data::FetterCondType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A653840);
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 816),
        (const char (*)[13])byte_1A62A2E0,
        (data::FetterCondType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A62A2E0);
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 856),
        (const char (*)[13])byte_1A653880,
        (data::FetterCondType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A653880);
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 896),
        (const char (*)[13])byte_1A6538C0,
        (data::FetterCondType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A6538C0);
      *(_DWORD *)(v2 + 240) = 10;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[13],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 936),
        (const char (*)[13])byte_1A653900,
        (data::FetterCondType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A653900);
      *(_DWORD *)(v2 + 256) = 11;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[12],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 976),
        (const char (*)[12])byte_1A653940,
        (data::FetterCondType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A653940);
      *(_DWORD *)(v2 + 272) = 12;
      std::pair<std::string const,data::FetterCondType>::pair<char const(&)[28],data::FetterCondType,true>(
        (std::pair<const std::string,data::FetterCondType> *const)(v2 + 1016),
        (const char (*)[28])byte_1A653980,
        (data::FetterCondType *)(v2 + 272));
      std::allocator<std::pair<std::string const,data::FetterCondType>>::allocator((std::allocator<std::pair<const std::string,data::FetterCondType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::FetterCondType>::unordered_map(
        &data::enumStrToVal(char const*,data::FetterCondType &)::m,
        (std::initializer_list<std::pair<const std::string,data::FetterCondType> >)__PAIR128__(12LL, v2 + 576),
        0LL,
        (const std::unordered_map<std::string,data::FetterCondType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::FetterCondType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::FetterCondType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::FetterCondType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::FetterCondType>::~unordered_map,
        &data::enumStrToVal(char const*,data::FetterCondType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::FetterCondType>>::~allocator((std::allocator<std::pair<const std::string,data::FetterCondType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::FetterCondType> *)(v2 + 1056);
            i != (std::pair<const std::string,data::FetterCondType> *)(v2 + 576);
            std::pair<std::string const,data::FetterCondType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 576, 480LL);
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v7 = *(const char **)(v2 + 352);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 448),
      v7,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 288, v7);
    *(std::unordered_map<std::string,data::FetterCondType>::iterator *)(v2 + 288) = std::unordered_map<std::string,data::FetterCondType>::find(
                                                                                      &data::enumStrToVal(char const*,data::FetterCondType &)::m,
                                                                                      (const std::unordered_map<std::string,data::FetterCondType>::key_type *)(v2 + 448));
    std::string::~string((void *)(v2 + 448));
    *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 320, v2 + 448);
    *(std::unordered_map<std::string,data::FetterCondType>::iterator *)(v2 + 320) = std::unordered_map<std::string,data::FetterCondType>::end(&data::enumStrToVal(char const*,data::FetterCondType &)::m);
    v8 = (char *)(v2 + 320);
    v9 = std::__detail::operator==<std::pair<std::string const,data::FetterCondType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FetterCondType>,true> *)(v2 + 288),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FetterCondType>,true> *)(v2 + 320));
    *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 512, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 512),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        5044);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 512),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 352));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::FetterCondType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::FetterCondType>,false,true> *const)(v2 + 288));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 384, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 384),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      5021);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 384),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF805C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF806C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF807C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8084) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1120LL, v17);
  }
  return v14;
};

// Line 5053: range 000000000FAC0581-000000000FAC0597
const char *__cdecl data::getDescription(data::FetterCondType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 5058: range 000000000FAC0598-000000000FAC074D
bool __cdecl data::isValidFetterCondType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::FetterCondType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::FetterCondType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:5059 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidFetterCondType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getFetterCondTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::FetterCondType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::FetterCondType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getFetterCondTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::FetterCondType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::FetterCondType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::FetterCondType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5064: range 000000000FAC074E-000000000FAC08AF
bool __cdecl data::isValidFetterCondTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::FetterCondType> *v5; // rcx
  const std::unordered_map<std::string,data::FetterCondType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidFetterCondTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getFetterCondTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::FetterCondType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::FetterCondType>::end(v5);
  v6 = data::getFetterCondTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::FetterCondType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::FetterCondType>::find(
                                                                                         v6,
                                                                                         name);
  result = std::__detail::operator!=<std::pair<std::string const,data::FetterCondType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FetterCondType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::FetterCondType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5069: range 000000000FAC08B0-000000000FAC12EF
const std::unordered_map<std::string,data::FetterCondType> *__cdecl data::getFetterCondTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::FetterCondType> *i; // r14
  char v6[1008]; // [rsp+10h] [rbp-3F0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(960LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "17 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 520 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getFetterCondTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = 61956;
  v3[536862745] = -218103808;
  v3[536862746] = -202116109;
  v3[536862747] = -202116109;
  v3[536862748] = -202116109;
  v3[536862749] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getFetterCondTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getFetterCondTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[17],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 304),
      (const char (*)[17])"FETTER_COND_NONE",
      (data::FetterCondType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "FETTER_COND_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[25],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 344),
      (const char (*)[25])"FETTER_COND_FETTER_LEVEL",
      (data::FetterCondType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "FETTER_COND_FETTER_LEVEL");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[25],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 384),
      (const char (*)[25])"FETTER_COND_AVATAR_LEVEL",
      (data::FetterCondType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "FETTER_COND_AVATAR_LEVEL");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[27],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 424),
      (const char (*)[27])"FETTER_COND_FINISH_DUNGEON",
      (data::FetterCondType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "FETTER_COND_FINISH_DUNGEON");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[31],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 464),
      (const char (*)[31])"FETTER_COND_UNLOCK_TRANS_POINT",
      (data::FetterCondType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "FETTER_COND_UNLOCK_TRANS_POINT");
    *(_DWORD *)(v1 + 176) = 5;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[24],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 504),
      (const char (*)[24])"FETTER_COND_UNLOCK_AREA",
      (data::FetterCondType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "FETTER_COND_UNLOCK_AREA");
    *(_DWORD *)(v1 + 192) = 6;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[25],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 544),
      (const char (*)[25])"FETTER_COND_FINISH_QUEST",
      (data::FetterCondType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "FETTER_COND_FINISH_QUEST");
    *(_DWORD *)(v1 + 208) = 7;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[33],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 584),
      (const char (*)[33])"FETTER_COND_AVATAR_PROMOTE_LEVEL",
      (data::FetterCondType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "FETTER_COND_AVATAR_PROMOTE_LEVEL");
    *(_DWORD *)(v1 + 224) = 8;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[28],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 624),
      (const char (*)[28])"FETTER_COND_PLAYER_BIRTHDAY",
      (data::FetterCondType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "FETTER_COND_PLAYER_BIRTHDAY");
    *(_DWORD *)(v1 + 240) = 9;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[28],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 664),
      (const char (*)[28])"FETTER_COND_AVATAR_BIRTHDAY",
      (data::FetterCondType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "FETTER_COND_AVATAR_BIRTHDAY");
    *(_DWORD *)(v1 + 256) = 10;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[21],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 704),
      (const char (*)[21])"FETTER_COND_NOT_OPEN",
      (data::FetterCondType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "FETTER_COND_NOT_OPEN");
    *(_DWORD *)(v1 + 272) = 11;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[32],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 744),
      (const char (*)[32])"FETTER_COND_FINISH_PARENT_QUEST",
      (data::FetterCondType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "FETTER_COND_FINISH_PARENT_QUEST");
    *(_DWORD *)(v1 + 288) = 12;
    std::pair<std::string const,data::FetterCondType>::pair<char const(&)[36],data::FetterCondType,true>(
      (std::pair<const std::string,data::FetterCondType> *const)(v1 + 784),
      (const char (*)[36])"FETTER_COND_UNLOCK_ARENA_BY_CITY_ID",
      (data::FetterCondType *)(v1 + 288));
    std::allocator<std::pair<std::string const,data::FetterCondType>>::allocator((std::allocator<std::pair<const std::string,data::FetterCondType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::FetterCondType>::unordered_map(
      &data::getFetterCondTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::FetterCondType> >)__PAIR128__(13LL, v1 + 304),
      0LL,
      (const std::unordered_map<std::string,data::FetterCondType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::FetterCondType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::FetterCondType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getFetterCondTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::FetterCondType>::~unordered_map,
      &data::getFetterCondTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::FetterCondType>>::~allocator((std::allocator<std::pair<const std::string,data::FetterCondType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::FetterCondType> *)(v1 + 824);
          i != (std::pair<const std::string,data::FetterCondType> *)(v1 + 304);
          std::pair<std::string const,data::FetterCondType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8070) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 120) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8058) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8060) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8068) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8070) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return &data::getFetterCondTypeNameMap[abi:cxx11](void)::m;
};

// Line 5090: range 000000000FAC12F0-000000000FAC2555
const std::map<data::FetterCondType,std::pair<std::string,std::string >> *__cdecl data::getFetterCondTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  char v18[2640]; // [rsp+10h] [rbp-A50h] BYREF

  v1 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_6(2592LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "29 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 64 9 <unknown> 3"
                        "68 64 9 <unknown> 464 64 9 <unknown> 560 64 9 <unknown> 656 64 9 <unknown> 752 64 9 <unknown> 84"
                        "8 64 9 <unknown> 944 64 9 <unknown> 1040 64 9 <unknown> 1136 64 9 <unknown> 1232 64 9 <unknown> "
                        "1328 64 9 <unknown> 1424 64 9 <unknown> 1520 936 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getFetterCondTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = 61956;
  v3[536862730] = -219021312;
  v3[536862731] = 62194;
  v3[536862733] = -219021312;
  v3[536862734] = 62194;
  v3[536862736] = -219021312;
  v3[536862737] = 62194;
  v3[536862739] = -219021312;
  v3[536862740] = 62194;
  v3[536862742] = -219021312;
  v3[536862743] = 62194;
  v3[536862745] = -219021312;
  v3[536862746] = 62194;
  v3[536862748] = -219021312;
  v3[536862749] = 62194;
  v3[536862751] = -219021312;
  v3[536862752] = 62194;
  v3[536862754] = -219021312;
  v3[536862755] = 62194;
  v3[536862757] = -219021312;
  v3[536862758] = 62194;
  v3[536862760] = -219021312;
  v3[536862761] = 62194;
  v3[536862763] = -219021312;
  v3[536862764] = 62194;
  v3[536862766] = -219021312;
  v3[536862767] = 62194;
  v3[536862796] = -218103808;
  v3[536862797] = -202116109;
  v3[536862798] = -202116109;
  v3[536862799] = -202116109;
  v3[536862800] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getFetterCondTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getFetterCondTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 272),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[17])"FETTER_COND_NONE");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 1520),
      (data::FetterCondType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 368),
      (const char (*)[13])byte_1A653700,
      (const char (*)[25])"FETTER_COND_FETTER_LEVEL");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 1592),
      (data::FetterCondType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 464),
      (const char (*)[13])byte_1A653740,
      (const char (*)[25])"FETTER_COND_AVATAR_LEVEL");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 1664),
      (data::FetterCondType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 560),
      (const char (*)[13])byte_1A653780,
      (const char (*)[27])"FETTER_COND_FINISH_DUNGEON");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 1736),
      (data::FetterCondType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 656),
      (const char (*)[16])byte_1A6537C0,
      (const char (*)[31])"FETTER_COND_UNLOCK_TRANS_POINT");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 1808),
      (data::FetterCondType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 752),
      (const char (*)[13])byte_1A653800,
      (const char (*)[24])"FETTER_COND_UNLOCK_AREA");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 1880),
      (data::FetterCondType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[9],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 848),
      (const char (*)[9])byte_1A653840,
      (const char (*)[25])"FETTER_COND_FINISH_QUEST");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 1952),
      (data::FetterCondType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 848));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 944),
      (const char (*)[13])byte_1A62A2E0,
      (const char (*)[33])"FETTER_COND_AVATAR_PROMOTE_LEVEL");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 2024),
      (data::FetterCondType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 944));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1040),
      (const char (*)[13])byte_1A653880,
      (const char (*)[28])"FETTER_COND_PLAYER_BIRTHDAY");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 2096),
      (data::FetterCondType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 1040));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1136),
      (const char (*)[13])byte_1A6538C0,
      (const char (*)[28])"FETTER_COND_AVATAR_BIRTHDAY");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 2168),
      (data::FetterCondType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 1136));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1232),
      (const char (*)[13])byte_1A653900,
      (const char (*)[21])"FETTER_COND_NOT_OPEN");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 2240),
      (data::FetterCondType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 1232));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[12],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1328),
      (const char (*)[12])byte_1A653940,
      (const char (*)[32])"FETTER_COND_FINISH_PARENT_QUEST");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 2312),
      (data::FetterCondType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 1328));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1424),
      (const char (*)[28])byte_1A653980,
      (const char (*)[36])"FETTER_COND_UNLOCK_ARENA_BY_CITY_ID");
    std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::pair<data::FetterCondType,true>(
      (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *const)(v1 + 2384),
      (data::FetterCondType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 1424));
    std::allocator<std::pair<data::FetterCondType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::FetterCondType,std::pair<std::string,std::string>>::map(
      &data::getFetterCondTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > >)__PAIR128__(13LL, v1 + 1520),
      (const std::less<data::FetterCondType> *)(v1 + 32),
      (const std::map<data::FetterCondType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getFetterCondTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::FetterCondType,std::pair<std::string,std::string>>::~map,
      &data::getFetterCondTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::FetterCondType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::FetterCondType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *)(v1 + 2456);
          i != (std::pair<const data::FetterCondType,std::pair<std::string,std::string > > *)(v1 + 1520);
          std::pair<data::FetterCondType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 1520, 936LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1424));
    v5 = (_DWORD *)(((v1 + 1424) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1328));
    v6 = (_DWORD *)(((v1 + 1328) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1232));
    v7 = (_DWORD *)(((v1 + 1232) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1136));
    v8 = (_DWORD *)(((v1 + 1136) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1040));
    v9 = (_DWORD *)(((v1 + 1040) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 944));
    v10 = (_DWORD *)(((v1 + 944) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 848));
    v11 = (_DWORD *)(((v1 + 848) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 752));
    v12 = (_DWORD *)(((v1 + 752) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 656));
    v13 = (_DWORD *)(((v1 + 656) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 560));
    v14 = (_DWORD *)(((v1 + 560) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 464));
    v15 = (_DWORD *)(((v1 + 464) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 368));
    v16 = (_DWORD *)(((v1 + 368) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 272));
  }
  if ( v18 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF813C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 324) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_6(v1, 2592LL, v18);
  }
  return &data::getFetterCondTypeEnumMap[abi:cxx11](void)::m;
};

// Line 5111: range 000000000FAC2556-000000000FAC28C9
const char *__fastcall data::enumValToStr(data::ItemLimitType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::ItemLimitType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:5110 64 8 9 iter:5113 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getItemLimitTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::ItemLimitType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ItemLimitType,std::pair<std::string,std::string>>::find(map, (const std::map<data::ItemLimitType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::ItemLimitType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ItemLimitType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      5116);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_ItemLimitType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5123: range 000000000FAC28CA-000000000FAC2E82
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::ItemLimitType>,false,true>::pointer v10; // rax
  data::ItemLimitType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::ItemLimitType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:5132 96 8 9 <unknown> 128 8 6 s:5122 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getItemLimitTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::ItemLimitType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ItemLimitType>::find(
                                                                                          m,
                                                                                          (const std::unordered_map<std::string,data::ItemLimitType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::ItemLimitType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::ItemLimitType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::ItemLimitType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemLimitType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemLimitType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        5135);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::ItemLimitType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::ItemLimitType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      5126);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 5144: range 000000000FAC2E83-000000000FACA97F
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::ItemLimitType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::ItemLimitType>,false,true>::pointer v11; // rax
  data::ItemLimitType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[11792]; // [rsp+20h] [rbp-2E10h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_8(11744LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "209 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 "
                        "9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unk"
                        "nown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> "
                        "304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 "
                        "9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unk"
                        "nown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> "
                        "560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 "
                        "9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unk"
                        "nown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> "
                        "816 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9 <unknown> 896 4 "
                        "9 <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unknown> 976 4 9 <unk"
                        "nown> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 4 9 <unknown> 1056 4 9 <unkno"
                        "wn> 1072 4 9 <unknown> 1088 4 9 <unknown> 1104 4 9 <unknown> 1120 4 9 <unknown> 1136 4 9 <unknow"
                        "n> 1152 4 9 <unknown> 1168 4 9 <unknown> 1184 4 9 <unknown> 1200 4 9 <unknown> 1216 4 9 <unknown"
                        "> 1232 4 9 <unknown> 1248 4 9 <unknown> 1264 4 9 <unknown> 1280 4 9 <unknown> 1296 4 9 <unknown>"
                        " 1312 4 9 <unknown> 1328 4 9 <unknown> 1344 4 9 <unknown> 1360 4 9 <unknown> 1376 4 9 <unknown> "
                        "1392 4 9 <unknown> 1408 4 9 <unknown> 1424 4 9 <unknown> 1440 4 9 <unknown> 1456 4 9 <unknown> 1"
                        "472 4 9 <unknown> 1488 4 9 <unknown> 1504 4 9 <unknown> 1520 4 9 <unknown> 1536 4 9 <unknown> 15"
                        "52 4 9 <unknown> 1568 4 9 <unknown> 1584 4 9 <unknown> 1600 4 9 <unknown> 1616 4 9 <unknown> 163"
                        "2 4 9 <unknown> 1648 4 9 <unknown> 1664 4 9 <unknown> 1680 4 9 <unknown> 1696 4 9 <unknown> 1712"
                        " 4 9 <unknown> 1728 4 9 <unknown> 1744 4 9 <unknown> 1760 4 9 <unknown> 1776 4 9 <unknown> 1792 "
                        "4 9 <unknown> 1808 4 9 <unknown> 1824 4 9 <unknown> 1840 4 9 <unknown> 1856 4 9 <unknown> 1872 4"
                        " 9 <unknown> 1888 4 9 <unknown> 1904 4 9 <unknown> 1920 4 9 <unknown> 1936 4 9 <unknown> 1952 4 "
                        "9 <unknown> 1968 4 9 <unknown> 1984 4 9 <unknown> 2000 4 9 <unknown> 2016 4 9 <unknown> 2032 4 9"
                        " <unknown> 2048 4 9 <unknown> 2064 4 9 <unknown> 2080 4 9 <unknown> 2096 4 9 <unknown> 2112 4 9 "
                        "<unknown> 2128 4 9 <unknown> 2144 4 9 <unknown> 2160 4 9 <unknown> 2176 4 9 <unknown> 2192 4 9 <"
                        "unknown> 2208 4 9 <unknown> 2224 4 9 <unknown> 2240 4 9 <unknown> 2256 4 9 <unknown> 2272 4 9 <u"
                        "nknown> 2288 4 9 <unknown> 2304 4 9 <unknown> 2320 4 9 <unknown> 2336 4 9 <unknown> 2352 4 9 <un"
                        "known> 2368 4 9 <unknown> 2384 4 9 <unknown> 2400 4 9 <unknown> 2416 4 9 <unknown> 2432 4 9 <unk"
                        "nown> 2448 4 9 <unknown> 2464 4 9 <unknown> 2480 4 9 <unknown> 2496 4 9 <unknown> 2512 4 9 <unkn"
                        "own> 2528 4 9 <unknown> 2544 4 9 <unknown> 2560 4 9 <unknown> 2576 4 9 <unknown> 2592 4 9 <unkno"
                        "wn> 2608 4 9 <unknown> 2624 4 9 <unknown> 2640 4 9 <unknown> 2656 4 9 <unknown> 2672 4 9 <unknow"
                        "n> 2688 4 9 <unknown> 2704 4 9 <unknown> 2720 4 9 <unknown> 2736 4 9 <unknown> 2752 4 9 <unknown"
                        "> 2768 4 9 <unknown> 2784 4 9 <unknown> 2800 4 9 <unknown> 2816 4 9 <unknown> 2832 4 9 <unknown>"
                        " 2848 4 9 <unknown> 2864 4 9 <unknown> 2880 4 9 <unknown> 2896 4 9 <unknown> 2912 4 9 <unknown> "
                        "2928 4 9 <unknown> 2944 4 9 <unknown> 2960 4 9 <unknown> 2976 4 9 <unknown> 2992 4 9 <unknown> 3"
                        "008 4 9 <unknown> 3024 4 9 <unknown> 3040 4 9 <unknown> 3056 4 9 <unknown> 3072 4 9 <unknown> 30"
                        "88 4 9 <unknown> 3104 4 9 <unknown> 3120 4 9 <unknown> 3136 4 9 <unknown> 3152 4 9 <unknown> 316"
                        "8 4 9 <unknown> 3184 4 9 <unknown> 3200 4 9 <unknown> 3216 4 9 <unknown> 3232 4 9 <unknown> 3248"
                        " 4 9 <unknown> 3264 4 9 <unknown> 3280 8 7 it:5353 3312 8 9 <unknown> 3344 8 6 s:5143 3376 32 9 "
                        "<unknown> 3440 32 9 <unknown> 3504 32 9 <unknown> 3568 7920 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -234556924;
  v4[536862732] = -234556924;
  v4[536862733] = -234556924;
  v4[536862734] = -234556924;
  v4[536862735] = -234556924;
  v4[536862736] = -234556924;
  v4[536862737] = -234556924;
  v4[536862738] = -234556924;
  v4[536862739] = -234556924;
  v4[536862740] = -234556924;
  v4[536862741] = -234556924;
  v4[536862742] = -234556924;
  v4[536862743] = -234556924;
  v4[536862744] = -234556924;
  v4[536862745] = -234556924;
  v4[536862746] = -234556924;
  v4[536862747] = -234556924;
  v4[536862748] = -234556924;
  v4[536862749] = -234556924;
  v4[536862750] = -234556924;
  v4[536862751] = -234556924;
  v4[536862752] = -234556924;
  v4[536862753] = -234556924;
  v4[536862754] = -234556924;
  v4[536862755] = -234556924;
  v4[536862756] = -234556924;
  v4[536862757] = -234556924;
  v4[536862758] = -234556924;
  v4[536862759] = -234556924;
  v4[536862760] = -234556924;
  v4[536862761] = -234556924;
  v4[536862762] = -234556924;
  v4[536862763] = -234556924;
  v4[536862764] = -234556924;
  v4[536862765] = -234556924;
  v4[536862766] = -234556924;
  v4[536862767] = -234556924;
  v4[536862768] = -234556924;
  v4[536862769] = -234556924;
  v4[536862770] = -234556924;
  v4[536862771] = -234556924;
  v4[536862772] = -234556924;
  v4[536862773] = -234556924;
  v4[536862774] = -234556924;
  v4[536862775] = -234556924;
  v4[536862776] = -234556924;
  v4[536862777] = -234556924;
  v4[536862778] = -234556924;
  v4[536862779] = -234556924;
  v4[536862780] = -234556924;
  v4[536862781] = -234556924;
  v4[536862782] = -234556924;
  v4[536862783] = -234556924;
  v4[536862784] = -234556924;
  v4[536862785] = -234556924;
  v4[536862786] = -234556924;
  v4[536862787] = -234556924;
  v4[536862788] = -234556924;
  v4[536862789] = -234556924;
  v4[536862790] = -234556924;
  v4[536862791] = -234556924;
  v4[536862792] = -234556924;
  v4[536862793] = -234556924;
  v4[536862794] = -234556924;
  v4[536862795] = -234556924;
  v4[536862796] = -234556924;
  v4[536862797] = -234556924;
  v4[536862798] = -234556924;
  v4[536862799] = -234556924;
  v4[536862800] = -234556924;
  v4[536862801] = -234556924;
  v4[536862802] = -234556924;
  v4[536862803] = -234556924;
  v4[536862804] = -234556924;
  v4[536862805] = -234556924;
  v4[536862806] = -234556924;
  v4[536862807] = -234556924;
  v4[536862808] = -234556924;
  v4[536862809] = -234556924;
  v4[536862810] = -234556924;
  v4[536862811] = -234556924;
  v4[536862812] = -234556924;
  v4[536862813] = -234556924;
  v4[536862814] = -234556924;
  v4[536862815] = -234556924;
  v4[536862816] = -234556924;
  v4[536862817] = -234556924;
  v4[536862818] = -234556924;
  v4[536862819] = -234556924;
  v4[536862820] = -234556924;
  v4[536862821] = -234556924;
  v4[536862822] = 61956;
  v4[536862822] = -234881024;
  v4[536862823] = 62194;
  v4[536862823] = -234881024;
  v4[536862824] = 62194;
  v4[536862824] = -234881024;
  v4[536862825] = 62194;
  v4[536862826] = -219021312;
  v4[536862827] = 62194;
  v4[536862828] = -219021312;
  v4[536862829] = 62194;
  v4[536862830] = -219021312;
  v4[536862831] = 62194;
  v4[536863079] = -202116109;
  v4[536863080] = -202116109;
  v4[536863081] = -202116109;
  v4[536863082] = -202116109;
  v4[536863083] = -202116109;
  v4[536863084] = -202116109;
  v4[536863085] = -202116109;
  v4[536863086] = -202116109;
  *(_QWORD *)(v2 + 3344) = s;
  if ( *(_QWORD *)(v2 + 3344) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::ItemLimitType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::ItemLimitType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 3;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3568),
        (const char (*)[19])byte_1A655160,
        (data::ItemLimitType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A655160);
      *(_DWORD *)(v2 + 128) = 4;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3608),
        (const char (*)[22])byte_1A6551A0,
        (data::ItemLimitType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A6551A0);
      *(_DWORD *)(v2 + 144) = 5;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3648),
        (const char (*)[22])byte_1A6551E0,
        (data::ItemLimitType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A6551E0);
      *(_DWORD *)(v2 + 160) = 6;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3688),
        (const char (*)[19])byte_1A655220,
        (data::ItemLimitType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A655220);
      *(_DWORD *)(v2 + 176) = 7;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3728),
        (const char (*)[19])byte_1A655260,
        (data::ItemLimitType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A655260);
      *(_DWORD *)(v2 + 192) = 8;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3768),
        (const char (*)[25])byte_1A6552A0,
        (data::ItemLimitType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A6552A0);
      *(_DWORD *)(v2 + 208) = 9;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3808),
        (const char (*)[25])byte_1A6552E0,
        (data::ItemLimitType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A6552E0);
      *(_DWORD *)(v2 + 224) = 10;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3848),
        (const char (*)[13])byte_1A655320,
        (data::ItemLimitType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A655320);
      *(_DWORD *)(v2 + 240) = 11;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3888),
        (const char (*)[28])byte_1A655360,
        (data::ItemLimitType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A655360);
      *(_DWORD *)(v2 + 256) = 12;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3928),
        (const char (*)[22])byte_1A6553A0,
        (data::ItemLimitType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A6553A0);
      *(_DWORD *)(v2 + 272) = 13;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[23],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 3968),
        (const char (*)[23])byte_1A6553E0,
        (data::ItemLimitType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, byte_1A6553E0);
      *(_DWORD *)(v2 + 288) = 14;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4008),
        (const char (*)[25])byte_1A655420,
        (data::ItemLimitType *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, byte_1A655420);
      *(_DWORD *)(v2 + 304) = 15;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4048),
        (const char (*)[13])byte_1A655460,
        (data::ItemLimitType *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, byte_1A655460);
      *(_DWORD *)(v2 + 320) = 16;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4088),
        (const char (*)[22])byte_1A6554A0,
        (data::ItemLimitType *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, byte_1A6554A0);
      *(_DWORD *)(v2 + 336) = 17;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4128),
        (const char (*)[25])byte_1A6554E0,
        (data::ItemLimitType *)(v2 + 336));
      if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 352, byte_1A6554E0);
      *(_DWORD *)(v2 + 352) = 18;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4168),
        (const char (*)[22])byte_1A655520,
        (data::ItemLimitType *)(v2 + 352));
      if ( *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 368, byte_1A655520);
      *(_DWORD *)(v2 + 368) = 19;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4208),
        (const char (*)[22])byte_1A655560,
        (data::ItemLimitType *)(v2 + 368));
      if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 384, byte_1A655560);
      *(_DWORD *)(v2 + 384) = 20;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[18],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4248),
        (const char (*)[18])byte_1A6555A0,
        (data::ItemLimitType *)(v2 + 384));
      if ( *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 400, byte_1A6555A0);
      *(_DWORD *)(v2 + 400) = 22;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4288),
        (const char (*)[22])byte_1A6555E0,
        (data::ItemLimitType *)(v2 + 400));
      if ( *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 416, byte_1A6555E0);
      *(_DWORD *)(v2 + 416) = 23;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4328),
        (const char (*)[19])byte_1A655620,
        (data::ItemLimitType *)(v2 + 416));
      if ( *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 432, byte_1A655620);
      *(_DWORD *)(v2 + 432) = 24;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4368),
        (const char (*)[22])byte_1A655660,
        (data::ItemLimitType *)(v2 + 432));
      if ( *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 448, byte_1A655660);
      *(_DWORD *)(v2 + 448) = 25;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4408),
        (const char (*)[19])byte_1A6556A0,
        (data::ItemLimitType *)(v2 + 448));
      if ( *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 464, byte_1A6556A0);
      *(_DWORD *)(v2 + 464) = 26;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4448),
        (const char (*)[22])byte_1A6556E0,
        (data::ItemLimitType *)(v2 + 464));
      if ( *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 480, byte_1A6556E0);
      *(_DWORD *)(v2 + 480) = 27;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4488),
        (const char (*)[19])byte_1A655720,
        (data::ItemLimitType *)(v2 + 480));
      if ( *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 496, byte_1A655720);
      *(_DWORD *)(v2 + 496) = 28;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4528),
        (const char (*)[19])byte_1A655760,
        (data::ItemLimitType *)(v2 + 496));
      if ( *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 512, byte_1A655760);
      *(_DWORD *)(v2 + 512) = 29;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4568),
        (const char (*)[25])byte_1A6557A0,
        (data::ItemLimitType *)(v2 + 512));
      if ( *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 528, byte_1A6557A0);
      *(_DWORD *)(v2 + 528) = 30;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4608),
        (const char (*)[19])byte_1A6557E0,
        (data::ItemLimitType *)(v2 + 528));
      if ( *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 544, byte_1A6557E0);
      *(_DWORD *)(v2 + 544) = 31;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4648),
        (const char (*)[19])byte_1A655820,
        (data::ItemLimitType *)(v2 + 544));
      if ( *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 560, byte_1A655820);
      *(_DWORD *)(v2 + 560) = 32;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4688),
        (const char (*)[13])byte_1A655860,
        (data::ItemLimitType *)(v2 + 560));
      if ( *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 576, byte_1A655860);
      *(_DWORD *)(v2 + 576) = 33;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4728),
        (const char (*)[13])byte_1A6558A0,
        (data::ItemLimitType *)(v2 + 576));
      if ( *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 592, byte_1A6558A0);
      *(_DWORD *)(v2 + 592) = 34;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[11],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4768),
        (const char (*)[11])byte_1A6558E0,
        (data::ItemLimitType *)(v2 + 592));
      if ( *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 608, byte_1A6558E0);
      *(_DWORD *)(v2 + 608) = 35;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[14],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4808),
        (const char (*)[14])byte_1A655920,
        (data::ItemLimitType *)(v2 + 608));
      if ( *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 624, byte_1A655920);
      *(_DWORD *)(v2 + 624) = 36;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[16],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4848),
        (const char (*)[16])byte_1A655960,
        (data::ItemLimitType *)(v2 + 624));
      if ( *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 640, byte_1A655960);
      *(_DWORD *)(v2 + 640) = 37;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4888),
        (const char (*)[19])byte_1A6559A0,
        (data::ItemLimitType *)(v2 + 640));
      if ( *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 656, byte_1A6559A0);
      *(_DWORD *)(v2 + 656) = 38;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4928),
        (const char (*)[19])byte_1A6559E0,
        (data::ItemLimitType *)(v2 + 656));
      if ( *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 672, byte_1A6559E0);
      *(_DWORD *)(v2 + 672) = 39;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 4968),
        (const char (*)[22])byte_1A655A20,
        (data::ItemLimitType *)(v2 + 672));
      if ( *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 688, byte_1A655A20);
      *(_DWORD *)(v2 + 688) = 40;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[16],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5008),
        (const char (*)[16])byte_1A655A60,
        (data::ItemLimitType *)(v2 + 688));
      if ( *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 704, byte_1A655A60);
      *(_DWORD *)(v2 + 704) = 41;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5048),
        (const char (*)[19])byte_1A655AA0,
        (data::ItemLimitType *)(v2 + 704));
      if ( *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 720, byte_1A655AA0);
      *(_DWORD *)(v2 + 720) = 42;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5088),
        (const char (*)[25])byte_1A655AE0,
        (data::ItemLimitType *)(v2 + 720));
      if ( *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 736, byte_1A655AE0);
      *(_DWORD *)(v2 + 736) = 43;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[24],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5128),
        (const char (*)[24])byte_1A655B20,
        (data::ItemLimitType *)(v2 + 736));
      if ( *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 752, byte_1A655B20);
      *(_DWORD *)(v2 + 752) = 44;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5168),
        (const char (*)[19])byte_1A655B60,
        (data::ItemLimitType *)(v2 + 752));
      if ( *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 768, byte_1A655B60);
      *(_DWORD *)(v2 + 768) = 45;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[23],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5208),
        (const char (*)[23])byte_1A655BA0,
        (data::ItemLimitType *)(v2 + 768));
      if ( *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 784, byte_1A655BA0);
      *(_DWORD *)(v2 + 784) = 46;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5248),
        (const char (*)[19])byte_1A655BE0,
        (data::ItemLimitType *)(v2 + 784));
      if ( *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 800, byte_1A655BE0);
      *(_DWORD *)(v2 + 800) = 47;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[7],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5288),
        (const char (*)[7])byte_1A655C20,
        (data::ItemLimitType *)(v2 + 800));
      if ( *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 816, byte_1A655C20);
      *(_DWORD *)(v2 + 816) = 48;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5328),
        (const char (*)[13])byte_1A655C60,
        (data::ItemLimitType *)(v2 + 816));
      if ( *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 832, byte_1A655C60);
      *(_DWORD *)(v2 + 832) = 49;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5368),
        (const char (*)[13])byte_1A655CA0,
        (data::ItemLimitType *)(v2 + 832));
      if ( *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 848, byte_1A655CA0);
      *(_DWORD *)(v2 + 848) = 50;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5408),
        (const char (*)[13])byte_1A655CE0,
        (data::ItemLimitType *)(v2 + 848));
      if ( *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 864, byte_1A655CE0);
      *(_DWORD *)(v2 + 864) = 51;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[7],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5448),
        (const char (*)[7])byte_1A655D20,
        (data::ItemLimitType *)(v2 + 864));
      if ( *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 880, byte_1A655D20);
      *(_DWORD *)(v2 + 880) = 52;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[7],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5488),
        (const char (*)[7])byte_1A655D60,
        (data::ItemLimitType *)(v2 + 880));
      if ( *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 896, byte_1A655D60);
      *(_DWORD *)(v2 + 896) = 53;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5528),
        (const char (*)[25])byte_1A655DA0,
        (data::ItemLimitType *)(v2 + 896));
      if ( *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 912, byte_1A655DA0);
      *(_DWORD *)(v2 + 912) = 54;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5568),
        (const char (*)[19])byte_1A655DE0,
        (data::ItemLimitType *)(v2 + 912));
      if ( *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 928, byte_1A655DE0);
      *(_DWORD *)(v2 + 928) = 55;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5608),
        (const char (*)[19])byte_1A655E20,
        (data::ItemLimitType *)(v2 + 928));
      if ( *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 944, byte_1A655E20);
      *(_DWORD *)(v2 + 944) = 56;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5648),
        (const char (*)[25])byte_1A655E60,
        (data::ItemLimitType *)(v2 + 944));
      if ( *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 960, byte_1A655E60);
      *(_DWORD *)(v2 + 960) = 57;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5688),
        (const char (*)[19])byte_1A655EA0,
        (data::ItemLimitType *)(v2 + 960));
      if ( *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 976, byte_1A655EA0);
      *(_DWORD *)(v2 + 976) = 58;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5728),
        (const char (*)[13])byte_1A655EE0,
        (data::ItemLimitType *)(v2 + 976));
      if ( *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 992, byte_1A655EE0);
      *(_DWORD *)(v2 + 992) = 59;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5768),
        (const char (*)[31])byte_1A655F20,
        (data::ItemLimitType *)(v2 + 992));
      if ( *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1008, byte_1A655F20);
      *(_DWORD *)(v2 + 1008) = 60;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5808),
        (const char (*)[25])byte_1A655F60,
        (data::ItemLimitType *)(v2 + 1008));
      if ( *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1024, byte_1A655F60);
      *(_DWORD *)(v2 + 1024) = 61;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5848),
        (const char (*)[13])byte_1A655FA0,
        (data::ItemLimitType *)(v2 + 1024));
      if ( *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1040, byte_1A655FA0);
      *(_DWORD *)(v2 + 1040) = 62;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5888),
        (const char (*)[25])byte_1A655FE0,
        (data::ItemLimitType *)(v2 + 1040));
      if ( *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1056, byte_1A655FE0);
      *(_DWORD *)(v2 + 1056) = 63;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5928),
        (const char (*)[25])byte_1A656020,
        (data::ItemLimitType *)(v2 + 1056));
      if ( *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1072, byte_1A656020);
      *(_DWORD *)(v2 + 1072) = 64;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 5968),
        (const char (*)[13])byte_1A656060,
        (data::ItemLimitType *)(v2 + 1072));
      if ( *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1088, byte_1A656060);
      *(_DWORD *)(v2 + 1088) = 65;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[7],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6008),
        (const char (*)[7])byte_1A6560A0,
        (data::ItemLimitType *)(v2 + 1088));
      if ( *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1104, byte_1A6560A0);
      *(_DWORD *)(v2 + 1104) = 67;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6048),
        (const char (*)[13])byte_1A6560E0,
        (data::ItemLimitType *)(v2 + 1104));
      if ( *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1120, byte_1A6560E0);
      *(_DWORD *)(v2 + 1120) = 68;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6088),
        (const char (*)[13])byte_1A656120,
        (data::ItemLimitType *)(v2 + 1120));
      if ( *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1136, byte_1A656120);
      *(_DWORD *)(v2 + 1136) = 69;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6128),
        (const char (*)[22])byte_1A656160,
        (data::ItemLimitType *)(v2 + 1136));
      if ( *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1152, byte_1A656160);
      *(_DWORD *)(v2 + 1152) = 70;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6168),
        (const char (*)[25])byte_1A6561A0,
        (data::ItemLimitType *)(v2 + 1152));
      if ( *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1168, byte_1A6561A0);
      *(_DWORD *)(v2 + 1168) = 71;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6208),
        (const char (*)[22])byte_1A6561E0,
        (data::ItemLimitType *)(v2 + 1168));
      if ( *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1184, byte_1A6561E0);
      *(_DWORD *)(v2 + 1184) = 72;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6248),
        (const char (*)[13])byte_1A656220,
        (data::ItemLimitType *)(v2 + 1184));
      if ( *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1200, byte_1A656220);
      *(_DWORD *)(v2 + 1200) = 73;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6288),
        (const char (*)[19])byte_1A656260,
        (data::ItemLimitType *)(v2 + 1200));
      if ( *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1216, byte_1A656260);
      *(_DWORD *)(v2 + 1216) = 74;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6328),
        (const char (*)[19])byte_1A6562A0,
        (data::ItemLimitType *)(v2 + 1216));
      if ( *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1232, byte_1A6562A0);
      *(_DWORD *)(v2 + 1232) = 75;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6368),
        (const char (*)[19])byte_1A6562E0,
        (data::ItemLimitType *)(v2 + 1232));
      if ( *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1248, byte_1A6562E0);
      *(_DWORD *)(v2 + 1248) = 76;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6408),
        (const char (*)[28])byte_1A656320,
        (data::ItemLimitType *)(v2 + 1248));
      if ( *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1264, byte_1A656320);
      *(_DWORD *)(v2 + 1264) = 77;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6448),
        (const char (*)[25])byte_1A656360,
        (data::ItemLimitType *)(v2 + 1264));
      if ( *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1280, byte_1A656360);
      *(_DWORD *)(v2 + 1280) = 78;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6488),
        (const char (*)[25])byte_1A6563A0,
        (data::ItemLimitType *)(v2 + 1280));
      if ( *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1296, byte_1A6563A0);
      *(_DWORD *)(v2 + 1296) = 79;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6528),
        (const char (*)[25])byte_1A6563E0,
        (data::ItemLimitType *)(v2 + 1296));
      if ( *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1312, byte_1A6563E0);
      *(_DWORD *)(v2 + 1312) = 80;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6568),
        (const char (*)[31])byte_1A656420,
        (data::ItemLimitType *)(v2 + 1312));
      if ( *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1328, byte_1A656420);
      *(_DWORD *)(v2 + 1328) = 81;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6608),
        (const char (*)[19])byte_1A656460,
        (data::ItemLimitType *)(v2 + 1328));
      if ( *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1344, byte_1A656460);
      *(_DWORD *)(v2 + 1344) = 82;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6648),
        (const char (*)[25])byte_1A6564A0,
        (data::ItemLimitType *)(v2 + 1344));
      if ( *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1360, byte_1A6564A0);
      *(_DWORD *)(v2 + 1360) = 83;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6688),
        (const char (*)[25])byte_1A6564E0,
        (data::ItemLimitType *)(v2 + 1360));
      if ( *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1376, byte_1A6564E0);
      *(_DWORD *)(v2 + 1376) = 84;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6728),
        (const char (*)[28])byte_1A656520,
        (data::ItemLimitType *)(v2 + 1376));
      if ( *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1392, byte_1A656520);
      *(_DWORD *)(v2 + 1392) = 85;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6768),
        (const char (*)[28])byte_1A656560,
        (data::ItemLimitType *)(v2 + 1392));
      if ( *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1408, byte_1A656560);
      *(_DWORD *)(v2 + 1408) = 86;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6808),
        (const char (*)[28])byte_1A6565A0,
        (data::ItemLimitType *)(v2 + 1408));
      if ( *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1424, byte_1A6565A0);
      *(_DWORD *)(v2 + 1424) = 87;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6848),
        (const char (*)[28])byte_1A6565E0,
        (data::ItemLimitType *)(v2 + 1424));
      if ( *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1440, byte_1A6565E0);
      *(_DWORD *)(v2 + 1440) = 88;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6888),
        (const char (*)[25])byte_1A656620,
        (data::ItemLimitType *)(v2 + 1440));
      if ( *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1456, byte_1A656620);
      *(_DWORD *)(v2 + 1456) = 89;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6928),
        (const char (*)[25])byte_1A656660,
        (data::ItemLimitType *)(v2 + 1456));
      if ( *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1472, byte_1A656660);
      *(_DWORD *)(v2 + 1472) = 90;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 6968),
        (const char (*)[31])byte_1A6566A0,
        (data::ItemLimitType *)(v2 + 1472));
      if ( *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1488, byte_1A6566A0);
      *(_DWORD *)(v2 + 1488) = 91;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7008),
        (const char (*)[25])byte_1A6566E0,
        (data::ItemLimitType *)(v2 + 1488));
      if ( *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1504, byte_1A6566E0);
      *(_DWORD *)(v2 + 1504) = 92;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7048),
        (const char (*)[19])byte_1A656720,
        (data::ItemLimitType *)(v2 + 1504));
      if ( *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1520, byte_1A656720);
      *(_DWORD *)(v2 + 1520) = 93;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7088),
        (const char (*)[19])byte_1A656760,
        (data::ItemLimitType *)(v2 + 1520));
      if ( *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1536, byte_1A656760);
      *(_DWORD *)(v2 + 1536) = 94;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7128),
        (const char (*)[34])byte_1A6567A0,
        (data::ItemLimitType *)(v2 + 1536));
      if ( *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1552, byte_1A6567A0);
      *(_DWORD *)(v2 + 1552) = 95;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7168),
        (const char (*)[22])byte_1A656800,
        (data::ItemLimitType *)(v2 + 1552));
      if ( *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1568, byte_1A656800);
      *(_DWORD *)(v2 + 1568) = 96;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[10],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7208),
        (const char (*)[10])byte_1A656840,
        (data::ItemLimitType *)(v2 + 1568));
      if ( *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1584, byte_1A656840);
      *(_DWORD *)(v2 + 1584) = 97;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7248),
        (const char (*)[22])byte_1A656880,
        (data::ItemLimitType *)(v2 + 1584));
      if ( *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1600, byte_1A656880);
      *(_DWORD *)(v2 + 1600) = 98;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7288),
        (const char (*)[19])byte_1A6568C0,
        (data::ItemLimitType *)(v2 + 1600));
      if ( *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1616, byte_1A6568C0);
      *(_DWORD *)(v2 + 1616) = 99;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7328),
        (const char (*)[19])byte_1A656900,
        (data::ItemLimitType *)(v2 + 1616));
      if ( *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1632, byte_1A656900);
      *(_DWORD *)(v2 + 1632) = 100;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7368),
        (const char (*)[28])byte_1A656940,
        (data::ItemLimitType *)(v2 + 1632));
      if ( *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1648, byte_1A656940);
      *(_DWORD *)(v2 + 1648) = 101;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[27],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7408),
        (const char (*)[27])byte_1A656980,
        (data::ItemLimitType *)(v2 + 1648));
      if ( *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1664, byte_1A656980);
      *(_DWORD *)(v2 + 1664) = 1401;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7448),
        (const char (*)[25])byte_1A6569C0,
        (data::ItemLimitType *)(v2 + 1664));
      if ( *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1680, byte_1A6569C0);
      *(_DWORD *)(v2 + 1680) = 1402;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7488),
        (const char (*)[25])byte_1A656A00,
        (data::ItemLimitType *)(v2 + 1680));
      if ( *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1696, byte_1A656A00);
      *(_DWORD *)(v2 + 1696) = 1403;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[17],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7528),
        (const char (*)[17])byte_1A656A40,
        (data::ItemLimitType *)(v2 + 1696));
      if ( *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1712, byte_1A656A40);
      *(_DWORD *)(v2 + 1712) = 1404;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7568),
        (const char (*)[19])byte_1A656A80,
        (data::ItemLimitType *)(v2 + 1712));
      if ( *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1728, byte_1A656A80);
      *(_DWORD *)(v2 + 1728) = 1405;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7608),
        (const char (*)[19])byte_1A656AC0,
        (data::ItemLimitType *)(v2 + 1728));
      if ( *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1744, byte_1A656AC0);
      *(_DWORD *)(v2 + 1744) = 1406;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7648),
        (const char (*)[19])byte_1A656B00,
        (data::ItemLimitType *)(v2 + 1744));
      if ( *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1760, byte_1A656B00);
      *(_DWORD *)(v2 + 1760) = 1407;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7688),
        (const char (*)[22])byte_1A656B40,
        (data::ItemLimitType *)(v2 + 1760));
      if ( *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1776, byte_1A656B40);
      *(_DWORD *)(v2 + 1776) = 1501;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7728),
        (const char (*)[13])byte_1A656B80,
        (data::ItemLimitType *)(v2 + 1776));
      if ( *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1792, byte_1A656B80);
      *(_DWORD *)(v2 + 1792) = 1502;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7768),
        (const char (*)[25])byte_1A656BC0,
        (data::ItemLimitType *)(v2 + 1792));
      if ( *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1808, byte_1A656BC0);
      *(_DWORD *)(v2 + 1808) = 1503;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7808),
        (const char (*)[25])byte_1A656C00,
        (data::ItemLimitType *)(v2 + 1808));
      if ( *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1824, byte_1A656C00);
      *(_DWORD *)(v2 + 1824) = 1504;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7848),
        (const char (*)[22])byte_1A656C40,
        (data::ItemLimitType *)(v2 + 1824));
      if ( *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1840, byte_1A656C40);
      *(_DWORD *)(v2 + 1840) = 1505;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7888),
        (const char (*)[28])byte_1A656C80,
        (data::ItemLimitType *)(v2 + 1840));
      if ( *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1856, byte_1A656C80);
      *(_DWORD *)(v2 + 1856) = 1506;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7928),
        (const char (*)[19])byte_1A656CC0,
        (data::ItemLimitType *)(v2 + 1856));
      if ( *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1872, byte_1A656CC0);
      *(_DWORD *)(v2 + 1872) = 1507;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 7968),
        (const char (*)[19])byte_1A656D00,
        (data::ItemLimitType *)(v2 + 1872));
      if ( *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1888, byte_1A656D00);
      *(_DWORD *)(v2 + 1888) = 1508;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8008),
        (const char (*)[19])byte_1A656D40,
        (data::ItemLimitType *)(v2 + 1888));
      if ( *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1904, byte_1A656D40);
      *(_DWORD *)(v2 + 1904) = 1509;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8048),
        (const char (*)[28])byte_1A656D80,
        (data::ItemLimitType *)(v2 + 1904));
      if ( *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1920, byte_1A656D80);
      *(_DWORD *)(v2 + 1920) = 1510;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8088),
        (const char (*)[29])byte_1A656DC0,
        (data::ItemLimitType *)(v2 + 1920));
      if ( *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1936, byte_1A656DC0);
      *(_DWORD *)(v2 + 1936) = 1511;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8128),
        (const char (*)[31])byte_1A656E00,
        (data::ItemLimitType *)(v2 + 1936));
      if ( *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1952, byte_1A656E00);
      *(_DWORD *)(v2 + 1952) = 1512;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[16],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8168),
        (const char (*)[16])byte_1A656E40,
        (data::ItemLimitType *)(v2 + 1952));
      if ( *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1968, byte_1A656E40);
      *(_DWORD *)(v2 + 1968) = 1513;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8208),
        (const char (*)[13])byte_1A656E80,
        (data::ItemLimitType *)(v2 + 1968));
      if ( *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 1984, byte_1A656E80);
      *(_DWORD *)(v2 + 1984) = 1601;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8248),
        (const char (*)[22])byte_1A656EC0,
        (data::ItemLimitType *)(v2 + 1984));
      if ( *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2000, byte_1A656EC0);
      *(_DWORD *)(v2 + 2000) = 1602;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8288),
        (const char (*)[25])byte_1A656F00,
        (data::ItemLimitType *)(v2 + 2000));
      if ( *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2016, byte_1A656F00);
      *(_DWORD *)(v2 + 2016) = 1603;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8328),
        (const char (*)[22])byte_1A656F40,
        (data::ItemLimitType *)(v2 + 2016));
      if ( *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2032, byte_1A656F40);
      *(_DWORD *)(v2 + 2032) = 1604;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8368),
        (const char (*)[22])byte_1A656F80,
        (data::ItemLimitType *)(v2 + 2032));
      if ( *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2048, byte_1A656F80);
      *(_DWORD *)(v2 + 2048) = 1605;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8408),
        (const char (*)[19])byte_1A656FC0,
        (data::ItemLimitType *)(v2 + 2048));
      if ( *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2064, byte_1A656FC0);
      *(_DWORD *)(v2 + 2064) = 1606;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8448),
        (const char (*)[25])byte_1A657000,
        (data::ItemLimitType *)(v2 + 2064));
      if ( *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2080, byte_1A657000);
      *(_DWORD *)(v2 + 2080) = 1607;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8488),
        (const char (*)[34])byte_1A657040,
        (data::ItemLimitType *)(v2 + 2080));
      if ( *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2096, byte_1A657040);
      *(_DWORD *)(v2 + 2096) = 2000;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8528),
        (const char (*)[19])byte_1A6570A0,
        (data::ItemLimitType *)(v2 + 2096));
      if ( *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2112, byte_1A6570A0);
      *(_DWORD *)(v2 + 2112) = 2001;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8568),
        (const char (*)[13])byte_1A6570E0,
        (data::ItemLimitType *)(v2 + 2112));
      if ( *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2128, byte_1A6570E0);
      *(_DWORD *)(v2 + 2128) = 2002;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8608),
        (const char (*)[22])byte_1A657120,
        (data::ItemLimitType *)(v2 + 2128));
      if ( *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2144, byte_1A657120);
      *(_DWORD *)(v2 + 2144) = 2003;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8648),
        (const char (*)[25])byte_1A657160,
        (data::ItemLimitType *)(v2 + 2144));
      if ( *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2160, byte_1A657160);
      *(_DWORD *)(v2 + 2160) = 2004;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8688),
        (const char (*)[31])byte_1A6571A0,
        (data::ItemLimitType *)(v2 + 2160));
      if ( *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2176, byte_1A6571A0);
      *(_DWORD *)(v2 + 2176) = 2005;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8728),
        (const char (*)[25])byte_1A6571E0,
        (data::ItemLimitType *)(v2 + 2176));
      if ( *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2192, byte_1A6571E0);
      *(_DWORD *)(v2 + 2192) = 2006;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8768),
        (const char (*)[28])byte_1A657220,
        (data::ItemLimitType *)(v2 + 2192));
      if ( *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2208, byte_1A657220);
      *(_DWORD *)(v2 + 2208) = 2007;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8808),
        (const char (*)[19])byte_1A657260,
        (data::ItemLimitType *)(v2 + 2208));
      if ( *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2224, byte_1A657260);
      *(_DWORD *)(v2 + 2224) = 2008;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8848),
        (const char (*)[19])byte_1A6572A0,
        (data::ItemLimitType *)(v2 + 2224));
      if ( *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2240, byte_1A6572A0);
      *(_DWORD *)(v2 + 2240) = 2100;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8888),
        (const char (*)[25])byte_1A6572E0,
        (data::ItemLimitType *)(v2 + 2240));
      if ( *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2256, byte_1A6572E0);
      *(_DWORD *)(v2 + 2256) = 2101;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8928),
        (const char (*)[22])byte_1A657320,
        (data::ItemLimitType *)(v2 + 2256));
      if ( *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2272, byte_1A657320);
      *(_DWORD *)(v2 + 2272) = 2102;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 8968),
        (const char (*)[13])byte_1A657360,
        (data::ItemLimitType *)(v2 + 2272));
      if ( *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2288, byte_1A657360);
      *(_DWORD *)(v2 + 2288) = 2103;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9008),
        (const char (*)[19])byte_1A6573A0,
        (data::ItemLimitType *)(v2 + 2288));
      if ( *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2304, byte_1A6573A0);
      *(_DWORD *)(v2 + 2304) = 2104;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9048),
        (const char (*)[22])byte_1A6573E0,
        (data::ItemLimitType *)(v2 + 2304));
      if ( *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2320, byte_1A6573E0);
      *(_DWORD *)(v2 + 2320) = 2200;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9088),
        (const char (*)[25])byte_1A657420,
        (data::ItemLimitType *)(v2 + 2320));
      if ( *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2336, byte_1A657420);
      *(_DWORD *)(v2 + 2336) = 2201;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9128),
        (const char (*)[31])byte_1A657460,
        (data::ItemLimitType *)(v2 + 2336));
      if ( *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2352, byte_1A657460);
      *(_DWORD *)(v2 + 2352) = 2202;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9168),
        (const char (*)[19])byte_1A6574A0,
        (data::ItemLimitType *)(v2 + 2352));
      if ( *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2368, byte_1A6574A0);
      *(_DWORD *)(v2 + 2368) = 2203;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9208),
        (const char (*)[25])byte_1A6574E0,
        (data::ItemLimitType *)(v2 + 2368));
      if ( *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2384, byte_1A6574E0);
      *(_DWORD *)(v2 + 2384) = 2204;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9248),
        (const char (*)[25])byte_1A657520,
        (data::ItemLimitType *)(v2 + 2384));
      if ( *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2400, byte_1A657520);
      *(_DWORD *)(v2 + 2400) = 2205;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9288),
        (const char (*)[19])byte_1A657560,
        (data::ItemLimitType *)(v2 + 2400));
      if ( *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2416, byte_1A657560);
      *(_DWORD *)(v2 + 2416) = 2300;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9328),
        (const char (*)[19])byte_1A6575A0,
        (data::ItemLimitType *)(v2 + 2416));
      if ( *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2432, byte_1A6575A0);
      *(_DWORD *)(v2 + 2432) = 2301;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9368),
        (const char (*)[22])byte_1A6575E0,
        (data::ItemLimitType *)(v2 + 2432));
      if ( *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2448, byte_1A6575E0);
      *(_DWORD *)(v2 + 2448) = 2302;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9408),
        (const char (*)[22])byte_1A657620,
        (data::ItemLimitType *)(v2 + 2448));
      if ( *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2464, byte_1A657620);
      *(_DWORD *)(v2 + 2464) = 2303;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9448),
        (const char (*)[22])byte_1A657660,
        (data::ItemLimitType *)(v2 + 2464));
      if ( *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2480, byte_1A657660);
      *(_DWORD *)(v2 + 2480) = 2304;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9488),
        (const char (*)[19])byte_1A6576A0,
        (data::ItemLimitType *)(v2 + 2480));
      if ( *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2496, byte_1A6576A0);
      *(_DWORD *)(v2 + 2496) = 2400;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9528),
        (const char (*)[22])byte_1A6576E0,
        (data::ItemLimitType *)(v2 + 2496));
      if ( *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2512, byte_1A6576E0);
      *(_DWORD *)(v2 + 2512) = 2401;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9568),
        (const char (*)[25])byte_1A657720,
        (data::ItemLimitType *)(v2 + 2512));
      if ( *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2528, byte_1A657720);
      *(_DWORD *)(v2 + 2528) = 2402;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9608),
        (const char (*)[25])byte_1A657760,
        (data::ItemLimitType *)(v2 + 2528));
      if ( *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2544, byte_1A657760);
      *(_DWORD *)(v2 + 2544) = 2403;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9648),
        (const char (*)[25])byte_1A6577A0,
        (data::ItemLimitType *)(v2 + 2544));
      if ( *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2560, byte_1A6577A0);
      *(_DWORD *)(v2 + 2560) = 2404;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9688),
        (const char (*)[25])byte_1A6577E0,
        (data::ItemLimitType *)(v2 + 2560));
      if ( *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2576, byte_1A6577E0);
      *(_DWORD *)(v2 + 2576) = 2500;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9728),
        (const char (*)[22])byte_1A657820,
        (data::ItemLimitType *)(v2 + 2576));
      if ( *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2592, byte_1A657820);
      *(_DWORD *)(v2 + 2592) = 2501;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9768),
        (const char (*)[22])byte_1A657860,
        (data::ItemLimitType *)(v2 + 2592));
      if ( *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2608, byte_1A657860);
      *(_DWORD *)(v2 + 2608) = 2502;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9808),
        (const char (*)[22])byte_1A6578A0,
        (data::ItemLimitType *)(v2 + 2608));
      if ( *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2624, byte_1A6578A0);
      *(_DWORD *)(v2 + 2624) = 2503;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[10],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9848),
        (const char (*)[10])byte_1A6578E0,
        (data::ItemLimitType *)(v2 + 2624));
      if ( *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2640, byte_1A6578E0);
      *(_DWORD *)(v2 + 2640) = 2600;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9888),
        (const char (*)[22])byte_1A657920,
        (data::ItemLimitType *)(v2 + 2640));
      if ( *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2656, byte_1A657920);
      *(_DWORD *)(v2 + 2656) = 2601;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9928),
        (const char (*)[25])byte_1A657960,
        (data::ItemLimitType *)(v2 + 2656));
      if ( *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2672, byte_1A657960);
      *(_DWORD *)(v2 + 2672) = 2602;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 9968),
        (const char (*)[19])byte_1A6579A0,
        (data::ItemLimitType *)(v2 + 2672));
      if ( *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2688, byte_1A6579A0);
      *(_DWORD *)(v2 + 2688) = 2603;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10008),
        (const char (*)[22])byte_1A6579E0,
        (data::ItemLimitType *)(v2 + 2688));
      if ( *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2704, byte_1A6579E0);
      *(_DWORD *)(v2 + 2704) = 2604;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10048),
        (const char (*)[28])byte_1A657A20,
        (data::ItemLimitType *)(v2 + 2704));
      if ( *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2720, byte_1A657A20);
      *(_DWORD *)(v2 + 2720) = 2605;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10088),
        (const char (*)[19])byte_1A657A60,
        (data::ItemLimitType *)(v2 + 2720));
      if ( *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2736, byte_1A657A60);
      *(_DWORD *)(v2 + 2736) = 2700;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10128),
        (const char (*)[22])byte_1A657AA0,
        (data::ItemLimitType *)(v2 + 2736));
      if ( *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2752, byte_1A657AA0);
      *(_DWORD *)(v2 + 2752) = 2701;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10168),
        (const char (*)[22])byte_1A657AE0,
        (data::ItemLimitType *)(v2 + 2752));
      if ( *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2768, byte_1A657AE0);
      *(_DWORD *)(v2 + 2768) = 2702;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10208),
        (const char (*)[28])byte_1A657B20,
        (data::ItemLimitType *)(v2 + 2768));
      if ( *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2784, byte_1A657B20);
      *(_DWORD *)(v2 + 2784) = 2703;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10248),
        (const char (*)[31])byte_1A657B60,
        (data::ItemLimitType *)(v2 + 2784));
      if ( *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2800, byte_1A657B60);
      *(_DWORD *)(v2 + 2800) = 2800;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10288),
        (const char (*)[13])byte_1A657BA0,
        (data::ItemLimitType *)(v2 + 2800));
      if ( *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2816, byte_1A657BA0);
      *(_DWORD *)(v2 + 2816) = 2801;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10328),
        (const char (*)[25])byte_1A657BE0,
        (data::ItemLimitType *)(v2 + 2816));
      if ( *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2832, byte_1A657BE0);
      *(_DWORD *)(v2 + 2832) = 2802;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10368),
        (const char (*)[31])byte_1A657C20,
        (data::ItemLimitType *)(v2 + 2832));
      if ( *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2848, byte_1A657C20);
      *(_DWORD *)(v2 + 2848) = 2803;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10408),
        (const char (*)[28])byte_1A657C60,
        (data::ItemLimitType *)(v2 + 2848));
      if ( *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2864, byte_1A657C60);
      *(_DWORD *)(v2 + 2864) = 2804;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10448),
        (const char (*)[25])byte_1A657CA0,
        (data::ItemLimitType *)(v2 + 2864));
      if ( *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2880, byte_1A657CA0);
      *(_DWORD *)(v2 + 2880) = 3000;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10488),
        (const char (*)[25])byte_1A657CE0,
        (data::ItemLimitType *)(v2 + 2880));
      if ( *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2896, byte_1A657CE0);
      *(_DWORD *)(v2 + 2896) = 3001;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10528),
        (const char (*)[31])byte_1A657D20,
        (data::ItemLimitType *)(v2 + 2896));
      if ( *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2912, byte_1A657D20);
      *(_DWORD *)(v2 + 2912) = 3002;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[13],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10568),
        (const char (*)[13])byte_1A657D60,
        (data::ItemLimitType *)(v2 + 2912));
      if ( *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2928, byte_1A657D60);
      *(_DWORD *)(v2 + 2928) = 3003;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10608),
        (const char (*)[25])byte_1A657DA0,
        (data::ItemLimitType *)(v2 + 2928));
      if ( *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2944, byte_1A657DA0);
      *(_DWORD *)(v2 + 2944) = 3004;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10648),
        (const char (*)[25])byte_1A657DE0,
        (data::ItemLimitType *)(v2 + 2944));
      if ( *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2960, byte_1A657DE0);
      *(_DWORD *)(v2 + 2960) = 3005;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10688),
        (const char (*)[28])byte_1A657E20,
        (data::ItemLimitType *)(v2 + 2960));
      if ( *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2976, byte_1A657E20);
      *(_DWORD *)(v2 + 2976) = 3100;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10728),
        (const char (*)[25])byte_1A657E60,
        (data::ItemLimitType *)(v2 + 2976));
      if ( *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 2992, byte_1A657E60);
      *(_DWORD *)(v2 + 2992) = 3101;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10768),
        (const char (*)[25])byte_1A657EA0,
        (data::ItemLimitType *)(v2 + 2992));
      if ( *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3008, byte_1A657EA0);
      *(_DWORD *)(v2 + 3008) = 3102;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10808),
        (const char (*)[25])byte_1A657EE0,
        (data::ItemLimitType *)(v2 + 3008));
      if ( *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3024, byte_1A657EE0);
      *(_DWORD *)(v2 + 3024) = 3201;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10848),
        (const char (*)[22])byte_1A657F20,
        (data::ItemLimitType *)(v2 + 3024));
      if ( *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3040, byte_1A657F20);
      *(_DWORD *)(v2 + 3040) = 3202;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10888),
        (const char (*)[28])byte_1A657F60,
        (data::ItemLimitType *)(v2 + 3040));
      if ( *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3056, byte_1A657F60);
      *(_DWORD *)(v2 + 3056) = 3203;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10928),
        (const char (*)[25])byte_1A657FA0,
        (data::ItemLimitType *)(v2 + 3056));
      if ( *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3072, byte_1A657FA0);
      *(_DWORD *)(v2 + 3072) = 3204;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 10968),
        (const char (*)[28])byte_1A657FE0,
        (data::ItemLimitType *)(v2 + 3072));
      if ( *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3088, byte_1A657FE0);
      *(_DWORD *)(v2 + 3088) = 3300;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11008),
        (const char (*)[22])byte_1A658020,
        (data::ItemLimitType *)(v2 + 3088));
      if ( *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3104, byte_1A658020);
      *(_DWORD *)(v2 + 3104) = 3301;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[16],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11048),
        (const char (*)[16])byte_1A658060,
        (data::ItemLimitType *)(v2 + 3104));
      if ( *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3120, byte_1A658060);
      *(_DWORD *)(v2 + 3120) = 3302;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11088),
        (const char (*)[19])byte_1A6580A0,
        (data::ItemLimitType *)(v2 + 3120));
      if ( *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3136, byte_1A6580A0);
      *(_DWORD *)(v2 + 3136) = 3303;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11128),
        (const char (*)[19])byte_1A6580E0,
        (data::ItemLimitType *)(v2 + 3136));
      if ( *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3152, byte_1A6580E0);
      *(_DWORD *)(v2 + 3152) = 3304;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11168),
        (const char (*)[19])byte_1A658120,
        (data::ItemLimitType *)(v2 + 3152));
      if ( *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3168, byte_1A658120);
      *(_DWORD *)(v2 + 3168) = 3305;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11208),
        (const char (*)[25])byte_1A658160,
        (data::ItemLimitType *)(v2 + 3168));
      if ( *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3184, byte_1A658160);
      *(_DWORD *)(v2 + 3184) = 3306;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11248),
        (const char (*)[22])byte_1A6581A0,
        (data::ItemLimitType *)(v2 + 3184));
      if ( *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3200, byte_1A6581A0);
      *(_DWORD *)(v2 + 3200) = 3400;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11288),
        (const char (*)[25])byte_1A6581E0,
        (data::ItemLimitType *)(v2 + 3200));
      if ( *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3216, byte_1A6581E0);
      *(_DWORD *)(v2 + 3216) = 3401;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11328),
        (const char (*)[31])byte_1A658220,
        (data::ItemLimitType *)(v2 + 3216));
      if ( *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3232, byte_1A658220);
      *(_DWORD *)(v2 + 3232) = 3402;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11368),
        (const char (*)[19])byte_1A658260,
        (data::ItemLimitType *)(v2 + 3232));
      if ( *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3248, byte_1A658260);
      *(_DWORD *)(v2 + 3248) = 3403;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11408),
        (const char (*)[22])byte_1A6582A0,
        (data::ItemLimitType *)(v2 + 3248));
      if ( *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 3264, byte_1A6582A0);
      *(_DWORD *)(v2 + 3264) = 3404;
      std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
        (std::pair<const std::string,data::ItemLimitType> *const)(v2 + 11448),
        (const char (*)[25])byte_1A6582E0,
        (data::ItemLimitType *)(v2 + 3264));
      std::allocator<std::pair<std::string const,data::ItemLimitType>>::allocator((std::allocator<std::pair<const std::string,data::ItemLimitType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::ItemLimitType>::unordered_map(
        &data::enumStrToVal(char const*,data::ItemLimitType &)::m,
        (std::initializer_list<std::pair<const std::string,data::ItemLimitType> >)__PAIR128__(198LL, v2 + 3568),
        0LL,
        (const std::unordered_map<std::string,data::ItemLimitType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::ItemLimitType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::ItemLimitType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::ItemLimitType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::ItemLimitType>::~unordered_map,
        &data::enumStrToVal(char const*,data::ItemLimitType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::ItemLimitType>>::~allocator((std::allocator<std::pair<const std::string,data::ItemLimitType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::ItemLimitType> *)(v2 + 11488);
            i != (std::pair<const std::string,data::ItemLimitType> *)(v2 + 3568);
            std::pair<std::string const,data::ItemLimitType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 3568, 7920LL);
      *(_BYTE *)(((v2 + 3264) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3248) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3232) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3216) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3200) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3184) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3168) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3152) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3136) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3120) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 3008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2096) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2080) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2064) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2048) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2032) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2016) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 2000) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1968) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1952) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1936) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1920) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1904) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1888) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1872) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1840) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1824) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1808) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1792) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1776) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1760) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1744) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1712) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1680) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1664) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1648) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1632) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1616) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1584) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1552) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1536) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1520) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1504) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1488) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1456) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1424) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1408) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1392) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1360) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1328) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1296) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1280) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1264) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1232) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1200) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1168) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1152) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1136) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1104) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1072) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1040) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1024) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 1008) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 992) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 976) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 960) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 944) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 928) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 912) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 896) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 880) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 864) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 848) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 832) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 816) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 800) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 784) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 768) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 752) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 736) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 720) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 704) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 688) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 672) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 656) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 640) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 624) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 608) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 592) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 576) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 3440) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v7 = *(const char **)(v2 + 3344);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 3440),
      v7,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 3280) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 3280, v7);
    *(std::unordered_map<std::string,data::ItemLimitType>::iterator *)(v2 + 3280) = std::unordered_map<std::string,data::ItemLimitType>::find(
                                                                                      &data::enumStrToVal(char const*,data::ItemLimitType &)::m,
                                                                                      (const std::unordered_map<std::string,data::ItemLimitType>::key_type *)(v2 + 3440));
    std::string::~string((void *)(v2 + 3440));
    *(_DWORD *)(((v2 + 3440) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 3312, v2 + 3440);
    *(std::unordered_map<std::string,data::ItemLimitType>::iterator *)(v2 + 3312) = std::unordered_map<std::string,data::ItemLimitType>::end(&data::enumStrToVal(char const*,data::ItemLimitType &)::m);
    v8 = (char *)(v2 + 3312);
    v9 = std::__detail::operator==<std::pair<std::string const,data::ItemLimitType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemLimitType>,true> *)(v2 + 3280),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemLimitType>,true> *)(v2 + 3312));
    *(_BYTE *)(((v2 + 3312) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 3504) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 3504) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 3535) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 80 + 31) & 7) >= *(_BYTE *)(((v2 + 3535) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 3504, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 3504),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        5356);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 3504),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 3344));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3504));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::ItemLimitType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::ItemLimitType>,false,true> *const)(v2 + 3280));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 3376) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 3407) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 111) & 7) >= *(_BYTE *)(((v2 + 3407) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 3376, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 3376),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      5147);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 3376),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3376));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF85B4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 1468) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_8(v2, 11744LL, v17);
  }
  return v14;
};

// Line 5365: range 000000000FACA980-000000000FACA996
const char *__cdecl data::getDescription(data::ItemLimitType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 5370: range 000000000FACA997-000000000FACAB4C
bool __cdecl data::isValidItemLimitType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::ItemLimitType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::ItemLimitType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:5371 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidItemLimitType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getItemLimitTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::ItemLimitType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::ItemLimitType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getItemLimitTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::ItemLimitType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::ItemLimitType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::ItemLimitType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5376: range 000000000FACAB4D-000000000FACACAE
bool __cdecl data::isValidItemLimitTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::ItemLimitType> *v5; // rcx
  const std::unordered_map<std::string,data::ItemLimitType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidItemLimitTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getItemLimitTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::ItemLimitType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::ItemLimitType>::end(v5);
  v6 = data::getItemLimitTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::ItemLimitType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::ItemLimitType>::find(
                                                                                        v6,
                                                                                        name);
  result = std::__detail::operator!=<std::pair<std::string const,data::ItemLimitType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemLimitType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::ItemLimitType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5381: range 000000000FACACAF-000000000FAD149C
const std::unordered_map<std::string,data::ItemLimitType> *__cdecl data::getItemLimitTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::ItemLimitType> *i; // r14
  char v6[11664]; // [rsp+10h] [rbp-2D90h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_8(11616LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "205 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 "
                        "9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unk"
                        "nown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> "
                        "304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 4 9 <unknown> 384 4 "
                        "9 <unknown> 400 4 9 <unknown> 416 4 9 <unknown> 432 4 9 <unknown> 448 4 9 <unknown> 464 4 9 <unk"
                        "nown> 480 4 9 <unknown> 496 4 9 <unknown> 512 4 9 <unknown> 528 4 9 <unknown> 544 4 9 <unknown> "
                        "560 4 9 <unknown> 576 4 9 <unknown> 592 4 9 <unknown> 608 4 9 <unknown> 624 4 9 <unknown> 640 4 "
                        "9 <unknown> 656 4 9 <unknown> 672 4 9 <unknown> 688 4 9 <unknown> 704 4 9 <unknown> 720 4 9 <unk"
                        "nown> 736 4 9 <unknown> 752 4 9 <unknown> 768 4 9 <unknown> 784 4 9 <unknown> 800 4 9 <unknown> "
                        "816 4 9 <unknown> 832 4 9 <unknown> 848 4 9 <unknown> 864 4 9 <unknown> 880 4 9 <unknown> 896 4 "
                        "9 <unknown> 912 4 9 <unknown> 928 4 9 <unknown> 944 4 9 <unknown> 960 4 9 <unknown> 976 4 9 <unk"
                        "nown> 992 4 9 <unknown> 1008 4 9 <unknown> 1024 4 9 <unknown> 1040 4 9 <unknown> 1056 4 9 <unkno"
                        "wn> 1072 4 9 <unknown> 1088 4 9 <unknown> 1104 4 9 <unknown> 1120 4 9 <unknown> 1136 4 9 <unknow"
                        "n> 1152 4 9 <unknown> 1168 4 9 <unknown> 1184 4 9 <unknown> 1200 4 9 <unknown> 1216 4 9 <unknown"
                        "> 1232 4 9 <unknown> 1248 4 9 <unknown> 1264 4 9 <unknown> 1280 4 9 <unknown> 1296 4 9 <unknown>"
                        " 1312 4 9 <unknown> 1328 4 9 <unknown> 1344 4 9 <unknown> 1360 4 9 <unknown> 1376 4 9 <unknown> "
                        "1392 4 9 <unknown> 1408 4 9 <unknown> 1424 4 9 <unknown> 1440 4 9 <unknown> 1456 4 9 <unknown> 1"
                        "472 4 9 <unknown> 1488 4 9 <unknown> 1504 4 9 <unknown> 1520 4 9 <unknown> 1536 4 9 <unknown> 15"
                        "52 4 9 <unknown> 1568 4 9 <unknown> 1584 4 9 <unknown> 1600 4 9 <unknown> 1616 4 9 <unknown> 163"
                        "2 4 9 <unknown> 1648 4 9 <unknown> 1664 4 9 <unknown> 1680 4 9 <unknown> 1696 4 9 <unknown> 1712"
                        " 4 9 <unknown> 1728 4 9 <unknown> 1744 4 9 <unknown> 1760 4 9 <unknown> 1776 4 9 <unknown> 1792 "
                        "4 9 <unknown> 1808 4 9 <unknown> 1824 4 9 <unknown> 1840 4 9 <unknown> 1856 4 9 <unknown> 1872 4"
                        " 9 <unknown> 1888 4 9 <unknown> 1904 4 9 <unknown> 1920 4 9 <unknown> 1936 4 9 <unknown> 1952 4 "
                        "9 <unknown> 1968 4 9 <unknown> 1984 4 9 <unknown> 2000 4 9 <unknown> 2016 4 9 <unknown> 2032 4 9"
                        " <unknown> 2048 4 9 <unknown> 2064 4 9 <unknown> 2080 4 9 <unknown> 2096 4 9 <unknown> 2112 4 9 "
                        "<unknown> 2128 4 9 <unknown> 2144 4 9 <unknown> 2160 4 9 <unknown> 2176 4 9 <unknown> 2192 4 9 <"
                        "unknown> 2208 4 9 <unknown> 2224 4 9 <unknown> 2240 4 9 <unknown> 2256 4 9 <unknown> 2272 4 9 <u"
                        "nknown> 2288 4 9 <unknown> 2304 4 9 <unknown> 2320 4 9 <unknown> 2336 4 9 <unknown> 2352 4 9 <un"
                        "known> 2368 4 9 <unknown> 2384 4 9 <unknown> 2400 4 9 <unknown> 2416 4 9 <unknown> 2432 4 9 <unk"
                        "nown> 2448 4 9 <unknown> 2464 4 9 <unknown> 2480 4 9 <unknown> 2496 4 9 <unknown> 2512 4 9 <unkn"
                        "own> 2528 4 9 <unknown> 2544 4 9 <unknown> 2560 4 9 <unknown> 2576 4 9 <unknown> 2592 4 9 <unkno"
                        "wn> 2608 4 9 <unknown> 2624 4 9 <unknown> 2640 4 9 <unknown> 2656 4 9 <unknown> 2672 4 9 <unknow"
                        "n> 2688 4 9 <unknown> 2704 4 9 <unknown> 2720 4 9 <unknown> 2736 4 9 <unknown> 2752 4 9 <unknown"
                        "> 2768 4 9 <unknown> 2784 4 9 <unknown> 2800 4 9 <unknown> 2816 4 9 <unknown> 2832 4 9 <unknown>"
                        " 2848 4 9 <unknown> 2864 4 9 <unknown> 2880 4 9 <unknown> 2896 4 9 <unknown> 2912 4 9 <unknown> "
                        "2928 4 9 <unknown> 2944 4 9 <unknown> 2960 4 9 <unknown> 2976 4 9 <unknown> 2992 4 9 <unknown> 3"
                        "008 4 9 <unknown> 3024 4 9 <unknown> 3040 4 9 <unknown> 3056 4 9 <unknown> 3072 4 9 <unknown> 30"
                        "88 4 9 <unknown> 3104 4 9 <unknown> 3120 4 9 <unknown> 3136 4 9 <unknown> 3152 4 9 <unknown> 316"
                        "8 4 9 <unknown> 3184 4 9 <unknown> 3200 4 9 <unknown> 3216 4 9 <unknown> 3232 4 9 <unknown> 3248"
                        " 4 9 <unknown> 3264 4 9 <unknown> 3280 4 9 <unknown> 3296 4 9 <unknown> 3312 8040 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getItemLimitTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = -234556924;
  v3[536862754] = -234556924;
  v3[536862755] = -234556924;
  v3[536862756] = -234556924;
  v3[536862757] = -234556924;
  v3[536862758] = -234556924;
  v3[536862759] = -234556924;
  v3[536862760] = -234556924;
  v3[536862761] = -234556924;
  v3[536862762] = -234556924;
  v3[536862763] = -234556924;
  v3[536862764] = -234556924;
  v3[536862765] = -234556924;
  v3[536862766] = -234556924;
  v3[536862767] = -234556924;
  v3[536862768] = -234556924;
  v3[536862769] = -234556924;
  v3[536862770] = -234556924;
  v3[536862771] = -234556924;
  v3[536862772] = -234556924;
  v3[536862773] = -234556924;
  v3[536862774] = -234556924;
  v3[536862775] = -234556924;
  v3[536862776] = -234556924;
  v3[536862777] = -234556924;
  v3[536862778] = -234556924;
  v3[536862779] = -234556924;
  v3[536862780] = -234556924;
  v3[536862781] = -234556924;
  v3[536862782] = -234556924;
  v3[536862783] = -234556924;
  v3[536862784] = -234556924;
  v3[536862785] = -234556924;
  v3[536862786] = -234556924;
  v3[536862787] = -234556924;
  v3[536862788] = -234556924;
  v3[536862789] = -234556924;
  v3[536862790] = -234556924;
  v3[536862791] = -234556924;
  v3[536862792] = -234556924;
  v3[536862793] = -234556924;
  v3[536862794] = -234556924;
  v3[536862795] = -234556924;
  v3[536862796] = -234556924;
  v3[536862797] = -234556924;
  v3[536862798] = -234556924;
  v3[536862799] = -234556924;
  v3[536862800] = -234556924;
  v3[536862801] = -234556924;
  v3[536862802] = -234556924;
  v3[536862803] = -234556924;
  v3[536862804] = -234556924;
  v3[536862805] = -234556924;
  v3[536862806] = -234556924;
  v3[536862807] = -234556924;
  v3[536862808] = -234556924;
  v3[536862809] = -234556924;
  v3[536862810] = -234556924;
  v3[536862811] = -234556924;
  v3[536862812] = -234556924;
  v3[536862813] = -234556924;
  v3[536862814] = -234556924;
  v3[536862815] = -234556924;
  v3[536862816] = -234556924;
  v3[536862817] = -234556924;
  v3[536862818] = -234556924;
  v3[536862819] = -234556924;
  v3[536862820] = -234556924;
  v3[536862821] = -234556924;
  v3[536862822] = -234556924;
  v3[536862823] = 61956;
  v3[536863074] = -218103808;
  v3[536863075] = -202116109;
  v3[536863076] = -202116109;
  v3[536863077] = -202116109;
  v3[536863078] = -202116109;
  v3[536863079] = -202116109;
  v3[536863080] = -202116109;
  v3[536863081] = -202116109;
  v3[536863082] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getItemLimitTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getItemLimitTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[16],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3312),
      (const char (*)[16])"ITEM_LIMIT_NONE",
      (data::ItemLimitType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "ITEM_LIMIT_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[21],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3352),
      (const char (*)[21])"ITEM_LIMIT_UNLIMITED",
      (data::ItemLimitType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "ITEM_LIMIT_UNLIMITED");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[14],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3392),
      (const char (*)[14])"ITEM_LIMIT_GM",
      (data::ItemLimitType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "ITEM_LIMIT_GM");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[17],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3432),
      (const char (*)[17])"ITEM_LIMIT_QUEST",
      (data::ItemLimitType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "ITEM_LIMIT_QUEST");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[24],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3472),
      (const char (*)[24])"ITEM_LIMIT_CITY_UPGRADE",
      (data::ItemLimitType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "ITEM_LIMIT_CITY_UPGRADE");
    *(_DWORD *)(v1 + 176) = 5;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3512),
      (const char (*)[30])"ITEM_LIMIT_UNLOCK_TRANS_POINT",
      (data::ItemLimitType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "ITEM_LIMIT_UNLOCK_TRANS_POINT");
    *(_DWORD *)(v1 + 192) = 6;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3552),
      (const char (*)[26])"ITEM_LIMIT_UNLOCK_DUNGEON",
      (data::ItemLimitType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "ITEM_LIMIT_UNLOCK_DUNGEON");
    *(_DWORD *)(v1 + 208) = 7;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3592),
      (const char (*)[25])"ITEM_LIMIT_INVESTIGATION",
      (data::ItemLimitType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "ITEM_LIMIT_INVESTIGATION");
    *(_DWORD *)(v1 + 224) = 8;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3632),
      (const char (*)[32])"ITEM_LIMIT_PLAYER_LEVEL_UPGRADE",
      (data::ItemLimitType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "ITEM_LIMIT_PLAYER_LEVEL_UPGRADE");
    *(_DWORD *)(v1 + 240) = 9;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3672),
      (const char (*)[28])"ITEM_LIMIT_PUSH_TIPS_REWARD",
      (data::ItemLimitType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "ITEM_LIMIT_PUSH_TIPS_REWARD");
    *(_DWORD *)(v1 + 256) = 10;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3712),
      (const char (*)[32])"ITEM_LIMIT_AVATAR_FETTER_REWARD",
      (data::ItemLimitType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "ITEM_LIMIT_AVATAR_FETTER_REWARD");
    *(_DWORD *)(v1 + 272) = 11;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[43],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3752),
      (const char (*)[43])"ITEM_LIMIT_WORLD_AREA_EXPLORE_EVENT_REWARD",
      (data::ItemLimitType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "ITEM_LIMIT_WORLD_AREA_EXPLORE_EVENT_REWARD");
    *(_DWORD *)(v1 + 288) = 12;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3792),
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_SEA_LAMP",
      (data::ItemLimitType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "ITEM_LIMIT_ACTIVITY_SEA_LAMP");
    *(_DWORD *)(v1 + 304) = 13;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3832),
      (const char (*)[35])"ITEM_LIMIT_BATTLE_PASS_PAID_REWARD",
      (data::ItemLimitType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "ITEM_LIMIT_BATTLE_PASS_PAID_REWARD");
    *(_DWORD *)(v1 + 320) = 14;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3872),
      (const char (*)[33])"ITEM_LIMIT_ONEOFF_BIG_WORLD_DROP",
      (data::ItemLimitType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "ITEM_LIMIT_ONEOFF_BIG_WORLD_DROP");
    *(_DWORD *)(v1 + 336) = 15;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3912),
      (const char (*)[26])"ITEM_LIMIT_GAMEPLAY_NICHE",
      (data::ItemLimitType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "ITEM_LIMIT_GAMEPLAY_NICHE");
    *(_DWORD *)(v1 + 352) = 16;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3952),
      (const char (*)[31])"ITEM_LIMIT_ONEOFF_DUNGEON_DROP",
      (data::ItemLimitType *)(v1 + 352));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, "ITEM_LIMIT_ONEOFF_DUNGEON_DROP");
    *(_DWORD *)(v1 + 368) = 17;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 3992),
      (const char (*)[31])"ITEM_LIMIT_ONEOFF_PLUNDER_DROP",
      (data::ItemLimitType *)(v1 + 368));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, "ITEM_LIMIT_ONEOFF_PLUNDER_DROP");
    *(_DWORD *)(v1 + 384) = 18;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4032),
      (const char (*)[32])"ITEM_LIMIT_ONEOFF_SUBFIELD_DROP",
      (data::ItemLimitType *)(v1 + 384));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, "ITEM_LIMIT_ONEOFF_SUBFIELD_DROP");
    *(_DWORD *)(v1 + 400) = 19;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[27],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4072),
      (const char (*)[27])"ITEM_LIMIT_BIG_WORLD_CHEST",
      (data::ItemLimitType *)(v1 + 400));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, "ITEM_LIMIT_BIG_WORLD_CHEST");
    *(_DWORD *)(v1 + 416) = 20;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4112),
      (const char (*)[28])"ITEM_LIMIT_GACHA_TOKEN_DROP",
      (data::ItemLimitType *)(v1 + 416));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, "ITEM_LIMIT_GACHA_TOKEN_DROP");
    *(_DWORD *)(v1 + 432) = 22;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4152),
      (const char (*)[32])"ITEM_LIMIT_DAILY_BIG_WORLD_DROP",
      (data::ItemLimitType *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, "ITEM_LIMIT_DAILY_BIG_WORLD_DROP");
    *(_DWORD *)(v1 + 448) = 23;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4192),
      (const char (*)[30])"ITEM_LIMIT_DAILY_DUNGEON_DROP",
      (data::ItemLimitType *)(v1 + 448));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, "ITEM_LIMIT_DAILY_DUNGEON_DROP");
    *(_DWORD *)(v1 + 464) = 24;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4232),
      (const char (*)[30])"ITEM_LIMIT_DAILY_PLUNDER_DROP",
      (data::ItemLimitType *)(v1 + 464));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, "ITEM_LIMIT_DAILY_PLUNDER_DROP");
    *(_DWORD *)(v1 + 480) = 25;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4272),
      (const char (*)[31])"ITEM_LIMIT_DAILY_SUBFIELD_DROP",
      (data::ItemLimitType *)(v1 + 480));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, "ITEM_LIMIT_DAILY_SUBFIELD_DROP");
    *(_DWORD *)(v1 + 496) = 26;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4312),
      (const char (*)[31])"ITEM_LIMIT_DAILY_SEA_LAMP_DROP",
      (data::ItemLimitType *)(v1 + 496));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, "ITEM_LIMIT_DAILY_SEA_LAMP_DROP");
    *(_DWORD *)(v1 + 512) = 27;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4352),
      (const char (*)[26])"ITEM_LIMIT_NORMAL_DUNGEON",
      (data::ItemLimitType *)(v1 + 512));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, "ITEM_LIMIT_NORMAL_DUNGEON");
    *(_DWORD *)(v1 + 528) = 28;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4392),
      (const char (*)[22])"ITEM_LIMIT_DAILY_TASK",
      (data::ItemLimitType *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, "ITEM_LIMIT_DAILY_TASK");
    *(_DWORD *)(v1 + 544) = 29;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4432),
      (const char (*)[28])"ITEM_LIMIT_DAILY_TASK_SCORE",
      (data::ItemLimitType *)(v1 + 544));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, "ITEM_LIMIT_DAILY_TASK_SCORE");
    *(_DWORD *)(v1 + 560) = 30;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4472),
      (const char (*)[26])"ITEM_LIMIT_RAND_TASK_DROP",
      (data::ItemLimitType *)(v1 + 560));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, "ITEM_LIMIT_RAND_TASK_DROP");
    *(_DWORD *)(v1 + 576) = 31;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4512),
      (const char (*)[22])"ITEM_LIMIT_EXPEDITION",
      (data::ItemLimitType *)(v1 + 576));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, "ITEM_LIMIT_EXPEDITION");
    *(_DWORD *)(v1 + 592) = 32;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4552),
      (const char (*)[29])"ITEM_LIMIT_SMALL_MONSTER_DIE",
      (data::ItemLimitType *)(v1 + 592));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, "ITEM_LIMIT_SMALL_MONSTER_DIE");
    *(_DWORD *)(v1 + 608) = 33;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4592),
      (const char (*)[29])"ITEM_LIMIT_ELITE_MONSTER_DIE",
      (data::ItemLimitType *)(v1 + 608));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, "ITEM_LIMIT_ELITE_MONSTER_DIE");
    *(_DWORD *)(v1 + 624) = 34;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4632),
      (const char (*)[28])"ITEM_LIMIT_BOSS_MONSTER_DIE",
      (data::ItemLimitType *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, "ITEM_LIMIT_BOSS_MONSTER_DIE");
    *(_DWORD *)(v1 + 640) = 35;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4672),
      (const char (*)[32])"ITEM_LIMIT_BIG_BOSS_MONSTER_DIE",
      (data::ItemLimitType *)(v1 + 640));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, "ITEM_LIMIT_BIG_BOSS_MONSTER_DIE");
    *(_DWORD *)(v1 + 656) = 36;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4712),
      (const char (*)[32])"ITEM_LIMIT_SMALL_ENV_ANIMAL_DIE",
      (data::ItemLimitType *)(v1 + 656));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, "ITEM_LIMIT_SMALL_ENV_ANIMAL_DIE");
    *(_DWORD *)(v1 + 672) = 37;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4752),
      (const char (*)[30])"ITEM_LIMIT_MONSTER_EXCEL_DROP",
      (data::ItemLimitType *)(v1 + 672));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, "ITEM_LIMIT_MONSTER_EXCEL_DROP");
    *(_DWORD *)(v1 + 688) = 38;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4792),
      (const char (*)[35])"ITEM_LIMIT_REPEATABLE_QUEST_REWARD",
      (data::ItemLimitType *)(v1 + 688));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, "ITEM_LIMIT_REPEATABLE_QUEST_REWARD");
    *(_DWORD *)(v1 + 704) = 39;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4832),
      (const char (*)[22])"ITEM_LIMIT_ENV_ANIMAL",
      (data::ItemLimitType *)(v1 + 704));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, "ITEM_LIMIT_ENV_ANIMAL");
    *(_DWORD *)(v1 + 720) = 40;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[18],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4872),
      (const char (*)[18])"ITEM_LIMIT_GATHER",
      (data::ItemLimitType *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, "ITEM_LIMIT_GATHER");
    *(_DWORD *)(v1 + 736) = 41;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4912),
      (const char (*)[36])"ITEM_LIMIT_OPERATION_DAILY_ACTIVITY",
      (data::ItemLimitType *)(v1 + 736));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, "ITEM_LIMIT_OPERATION_DAILY_ACTIVITY");
    *(_DWORD *)(v1 + 752) = 42;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4952),
      (const char (*)[26])"ITEM_LIMIT_QUEST_ADD_ITEM",
      (data::ItemLimitType *)(v1 + 752));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, "ITEM_LIMIT_QUEST_ADD_ITEM");
    *(_DWORD *)(v1 + 768) = 43;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 4992),
      (const char (*)[26])"ITEM_LIMIT_BONUS_ACTIVITY",
      (data::ItemLimitType *)(v1 + 768));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, "ITEM_LIMIT_BONUS_ACTIVITY");
    *(_DWORD *)(v1 + 784) = 44;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5032),
      (const char (*)[25])"ITEM_LIMIT_TOWER_MONTHLY",
      (data::ItemLimitType *)(v1 + 784));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, "ITEM_LIMIT_TOWER_MONTHLY");
    *(_DWORD *)(v1 + 800) = 45;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5072),
      (const char (*)[36])"ITEM_LIMIT_BATTLE_PASS_LEVEL_REWARD",
      (data::ItemLimitType *)(v1 + 800));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, "ITEM_LIMIT_BATTLE_PASS_LEVEL_REWARD");
    *(_DWORD *)(v1 + 816) = 46;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5112),
      (const char (*)[19])"ITEM_LIMIT_SIGN_IN",
      (data::ItemLimitType *)(v1 + 816));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, "ITEM_LIMIT_SIGN_IN");
    *(_DWORD *)(v1 + 832) = 47;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[17],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5152),
      (const char (*)[17])"ITEM_LIMIT_GACHA",
      (data::ItemLimitType *)(v1 + 832));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, "ITEM_LIMIT_GACHA");
    *(_DWORD *)(v1 + 848) = 48;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[16],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5192),
      (const char (*)[16])"ITEM_LIMIT_SHOP",
      (data::ItemLimitType *)(v1 + 848));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, "ITEM_LIMIT_SHOP");
    *(_DWORD *)(v1 + 864) = 49;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[16],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5232),
      (const char (*)[16])"ITEM_LIMIT_COOK",
      (data::ItemLimitType *)(v1 + 864));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, "ITEM_LIMIT_COOK");
    *(_DWORD *)(v1 + 880) = 50;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[20],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5272),
      (const char (*)[20])"ITEM_LIMIT_COMPOUND",
      (data::ItemLimitType *)(v1 + 880));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, "ITEM_LIMIT_COMPOUND");
    *(_DWORD *)(v1 + 896) = 51;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[19],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5312),
      (const char (*)[19])"ITEM_LIMIT_COMBINE",
      (data::ItemLimitType *)(v1 + 896));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, "ITEM_LIMIT_COMBINE");
    *(_DWORD *)(v1 + 912) = 52;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[17],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5352),
      (const char (*)[17])"ITEM_LIMIT_FORGE",
      (data::ItemLimitType *)(v1 + 912));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, "ITEM_LIMIT_FORGE");
    *(_DWORD *)(v1 + 928) = 53;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[24],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5392),
      (const char (*)[24])"ITEM_LIMIT_RANDOM_CHEST",
      (data::ItemLimitType *)(v1 + 928));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, "ITEM_LIMIT_RANDOM_CHEST");
    *(_DWORD *)(v1 + 944) = 54;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[20],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5432),
      (const char (*)[20])"ITEM_LIMIT_USE_ITEM",
      (data::ItemLimitType *)(v1 + 944));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, "ITEM_LIMIT_USE_ITEM");
    *(_DWORD *)(v1 + 960) = 55;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[27],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5472),
      (const char (*)[27])"ITEM_LIMIT_USE_ITEM_REWARD",
      (data::ItemLimitType *)(v1 + 960));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, "ITEM_LIMIT_USE_ITEM_REWARD");
    *(_DWORD *)(v1 + 976) = 56;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5512),
      (const char (*)[30])"ITEM_LIMIT_BLOSSOM_CHEST_DROP",
      (data::ItemLimitType *)(v1 + 976));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, "ITEM_LIMIT_BLOSSOM_CHEST_DROP");
    *(_DWORD *)(v1 + 992) = 57;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[24],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5552),
      (const char (*)[24])"ITEM_LIMIT_MP_PLAY_DROP",
      (data::ItemLimitType *)(v1 + 992));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, "ITEM_LIMIT_MP_PLAY_DROP");
    *(_DWORD *)(v1 + 1008) = 58;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5592),
      (const char (*)[22])"ITEM_LIMIT_FORGE_DROP",
      (data::ItemLimitType *)(v1 + 1008));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, "ITEM_LIMIT_FORGE_DROP");
    *(_DWORD *)(v1 + 1024) = 59;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5632),
      (const char (*)[33])"ITEM_LIMIT_MP_PLAY_CRUCIBLE_DROP",
      (data::ItemLimitType *)(v1 + 1024));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, "ITEM_LIMIT_MP_PLAY_CRUCIBLE_DROP");
    *(_DWORD *)(v1 + 1040) = 60;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5672),
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_CRUCIBLE_REWARD",
      (data::ItemLimitType *)(v1 + 1040));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, "ITEM_LIMIT_ACTIVITY_CRUCIBLE_REWARD");
    *(_DWORD *)(v1 + 1056) = 61;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[27],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5712),
      (const char (*)[27])"ITEM_LIMIT_ACTIVITY_REWARD",
      (data::ItemLimitType *)(v1 + 1056));
    if ( *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1072, "ITEM_LIMIT_ACTIVITY_REWARD");
    *(_DWORD *)(v1 + 1072) = 62;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5752),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_TRIAL_AVATAR",
      (data::ItemLimitType *)(v1 + 1072));
    if ( *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1088, "ITEM_LIMIT_ACTIVITY_TRIAL_AVATAR");
    *(_DWORD *)(v1 + 1088) = 63;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5792),
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_SALESMAN",
      (data::ItemLimitType *)(v1 + 1088));
    if ( *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1104, "ITEM_LIMIT_ACTIVITY_SALESMAN");
    *(_DWORD *)(v1 + 1104) = 64;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[18],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5832),
      (const char (*)[18])"ITEM_LIMIT_REBATE",
      (data::ItemLimitType *)(v1 + 1104));
    if ( *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1120, "ITEM_LIMIT_REBATE");
    *(_DWORD *)(v1 + 1120) = 65;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5872),
      (const char (*)[22])"ITEM_LIMIT_MONTH_CARD",
      (data::ItemLimitType *)(v1 + 1120));
    if ( *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1136, "ITEM_LIMIT_MONTH_CARD");
    *(_DWORD *)(v1 + 1136) = 67;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5912),
      (const char (*)[28])"ITEM_LIMIT_BIRTHDAY_BENEFIT",
      (data::ItemLimitType *)(v1 + 1136));
    if ( *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1152, "ITEM_LIMIT_BIRTHDAY_BENEFIT");
    *(_DWORD *)(v1 + 1152) = 68;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5952),
      (const char (*)[30])"ITEM_LIMIT_ACHIEVEMENT_REWARD",
      (data::ItemLimitType *)(v1 + 1152));
    if ( *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1168, "ITEM_LIMIT_ACHIEVEMENT_REWARD");
    *(_DWORD *)(v1 + 1168) = 69;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 5992),
      (const char (*)[35])"ITEM_LIMIT_ACHIEVEMENT_GOAL_REWARD",
      (data::ItemLimitType *)(v1 + 1168));
    if ( *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1184, "ITEM_LIMIT_ACHIEVEMENT_GOAL_REWARD");
    *(_DWORD *)(v1 + 1184) = 70;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6032),
      (const char (*)[35])"ITEM_LIMIT_DESTROY_RETURN_MATERIAL",
      (data::ItemLimitType *)(v1 + 1184));
    if ( *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1200, "ITEM_LIMIT_DESTROY_RETURN_MATERIAL");
    *(_DWORD *)(v1 + 1200) = 71;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[24],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6072),
      (const char (*)[24])"ITEM_LIMIT_TOWER_REWARD",
      (data::ItemLimitType *)(v1 + 1200));
    if ( *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1216, "ITEM_LIMIT_TOWER_REWARD");
    *(_DWORD *)(v1 + 1216) = 72;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[24],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6112),
      (const char (*)[24])"ITEM_LIMIT_SHARE_REWARD",
      (data::ItemLimitType *)(v1 + 1216));
    if ( *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1232, "ITEM_LIMIT_SHARE_REWARD");
    *(_DWORD *)(v1 + 1232) = 73;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6152),
      (const char (*)[31])"ITEM_LIMIT_FETTER_LEVEL_REWARD",
      (data::ItemLimitType *)(v1 + 1232));
    if ( *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1248, "ITEM_LIMIT_FETTER_LEVEL_REWARD");
    *(_DWORD *)(v1 + 1248) = 74;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[37],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6192),
      (const char (*)[37])"ITEM_LIMIT_DUNGEON_FIRST_PASS_REWARD",
      (data::ItemLimitType *)(v1 + 1248));
    if ( *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1264, "ITEM_LIMIT_DUNGEON_FIRST_PASS_REWARD");
    *(_DWORD *)(v1 + 1264) = 75;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6232),
      (const char (*)[32])"ITEM_LIMIT_CODEX_LEVELUP_REWARD",
      (data::ItemLimitType *)(v1 + 1264));
    if ( *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1280, "ITEM_LIMIT_CODEX_LEVELUP_REWARD");
    *(_DWORD *)(v1 + 1280) = 76;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6272),
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_DELIVERY",
      (data::ItemLimitType *)(v1 + 1280));
    if ( *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1296, "ITEM_LIMIT_ACTIVITY_DELIVERY");
    *(_DWORD *)(v1 + 1296) = 77;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6312),
      (const char (*)[33])"ITEM_LIMIT_CITY_REPUTATION_LEVEL",
      (data::ItemLimitType *)(v1 + 1296));
    if ( *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1312, "ITEM_LIMIT_CITY_REPUTATION_LEVEL");
    *(_DWORD *)(v1 + 1312) = 78;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6352),
      (const char (*)[33])"ITEM_LIMIT_CITY_REPUTATION_QUEST",
      (data::ItemLimitType *)(v1 + 1312));
    if ( *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1328, "ITEM_LIMIT_CITY_REPUTATION_QUEST");
    *(_DWORD *)(v1 + 1328) = 79;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[42],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6392),
      (const char (*)[42])"ITEM_LIMIT_UPGRADE_WEAPON_RETURN_MATERIAL",
      (data::ItemLimitType *)(v1 + 1328));
    if ( *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1344, "ITEM_LIMIT_UPGRADE_WEAPON_RETURN_MATERIAL");
    *(_DWORD *)(v1 + 1344) = 80;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6432),
      (const char (*)[35])"ITEM_LIMIT_CITY_REPUTATION_REQUEST",
      (data::ItemLimitType *)(v1 + 1344));
    if ( *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1360, "ITEM_LIMIT_CITY_REPUTATION_REQUEST");
    *(_DWORD *)(v1 + 1360) = 81;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6472),
      (const char (*)[26])"ITEM_LIMIT_HUNTING_REWARD",
      (data::ItemLimitType *)(v1 + 1360));
    if ( *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1376, "ITEM_LIMIT_HUNTING_REWARD");
    *(_DWORD *)(v1 + 1376) = 82;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6512),
      (const char (*)[35])"ITEM_LIMIT_CITY_REPUTATION_EXPLORE",
      (data::ItemLimitType *)(v1 + 1376));
    if ( *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1392, "ITEM_LIMIT_CITY_REPUTATION_EXPLORE");
    *(_DWORD *)(v1 + 1392) = 83;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6552),
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_FLIGHT_REWARD",
      (data::ItemLimitType *)(v1 + 1392));
    if ( *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1408, "ITEM_LIMIT_ACTIVITY_FLIGHT_REWARD");
    *(_DWORD *)(v1 + 1408) = 84;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6592),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_ASTER_REWARD",
      (data::ItemLimitType *)(v1 + 1408));
    if ( *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1424, "ITEM_LIMIT_ACTIVITY_ASTER_REWARD");
    *(_DWORD *)(v1 + 1424) = 85;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6632),
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_ASTER_DROP",
      (data::ItemLimitType *)(v1 + 1424));
    if ( *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1440, "ITEM_LIMIT_ACTIVITY_ASTER_DROP");
    *(_DWORD *)(v1 + 1440) = 86;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[40],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6672),
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_DRGAON_SPINE_REWARD",
      (data::ItemLimitType *)(v1 + 1440));
    if ( *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1456, "ITEM_LIMIT_ACTIVITY_DRGAON_SPINE_REWARD");
    *(_DWORD *)(v1 + 1456) = 87;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6712),
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_DRAGON_SPINE_DROP",
      (data::ItemLimitType *)(v1 + 1456));
    if ( *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1472, "ITEM_LIMIT_ACTIVITY_DRAGON_SPINE_DROP");
    *(_DWORD *)(v1 + 1472) = 88;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6752),
      (const char (*)[35])"ITEM_LIMIT_SNOW_MOUNTAIN_TREE_TASK",
      (data::ItemLimitType *)(v1 + 1472));
    if ( *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1488, "ITEM_LIMIT_SNOW_MOUNTAIN_TREE_TASK");
    *(_DWORD *)(v1 + 1488) = 89;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6792),
      (const char (*)[36])"ITEM_LIMIT_SNOW_MOUNTAIN_TREE_LEVEL",
      (data::ItemLimitType *)(v1 + 1488));
    if ( *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1504, "ITEM_LIMIT_SNOW_MOUNTAIN_TREE_LEVEL");
    *(_DWORD *)(v1 + 1504) = 90;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[40],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6832),
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_SALESMAN_CHEST_DROP",
      (data::ItemLimitType *)(v1 + 1504));
    if ( *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1520, "ITEM_LIMIT_ACTIVITY_SALESMAN_CHEST_DROP");
    *(_DWORD *)(v1 + 1520) = 91;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6872),
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_EFFIGY_REWARD",
      (data::ItemLimitType *)(v1 + 1520));
    if ( *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1536, "ITEM_LIMIT_ACTIVITY_EFFIGY_REWARD");
    *(_DWORD *)(v1 + 1536) = 92;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6912),
      (const char (*)[26])"ITEM_LIMIT_REUNION_REWARD",
      (data::ItemLimitType *)(v1 + 1536));
    if ( *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1552, "ITEM_LIMIT_REUNION_REWARD");
    *(_DWORD *)(v1 + 1552) = 93;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6952),
      (const char (*)[33])"ITEM_LIMIT_AVATAR_PROMOTE_REWARD",
      (data::ItemLimitType *)(v1 + 1552));
    if ( *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1568, "ITEM_LIMIT_AVATAR_PROMOTE_REWARD");
    *(_DWORD *)(v1 + 1568) = 94;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 6992),
      (const char (*)[32])"ITEM_LIMIT_ACTIVITY_SALESMAN_MP",
      (data::ItemLimitType *)(v1 + 1568));
    if ( *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1584, "ITEM_LIMIT_ACTIVITY_SALESMAN_MP");
    *(_DWORD *)(v1 + 1584) = 95;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[40],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7032),
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_TREASURE_MAP_REWARD",
      (data::ItemLimitType *)(v1 + 1584));
    if ( *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1600, "ITEM_LIMIT_ACTIVITY_TREASURE_MAP_REWARD");
    *(_DWORD *)(v1 + 1600) = 96;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7072),
      (const char (*)[22])"ITEM_LIMIT_RESIN_CARD",
      (data::ItemLimitType *)(v1 + 1600));
    if ( *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1616, "ITEM_LIMIT_RESIN_CARD");
    *(_DWORD *)(v1 + 1616) = 97;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7112),
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_BLESSING",
      (data::ItemLimitType *)(v1 + 1616));
    if ( *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1632, "ITEM_LIMIT_ACTIVITY_BLESSING");
    *(_DWORD *)(v1 + 1632) = 98;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7152),
      (const char (*)[31])"ITEM_LIMIT_MIRACLE_RING_REWARD",
      (data::ItemLimitType *)(v1 + 1632));
    if ( *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1648, "ITEM_LIMIT_MIRACLE_RING_REWARD");
    *(_DWORD *)(v1 + 1648) = 99;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7192),
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_EXPEDITION_REWARD",
      (data::ItemLimitType *)(v1 + 1648));
    if ( *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1664, "ITEM_LIMIT_ACTIVITY_EXPEDITION_REWARD");
    *(_DWORD *)(v1 + 1664) = 100;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[43],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7232),
      (const char (*)[43])"ITEM_LIMIT_MECHANICUS_BATTLE_SETTLE_REWARD",
      (data::ItemLimitType *)(v1 + 1664));
    if ( *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1680, "ITEM_LIMIT_MECHANICUS_BATTLE_SETTLE_REWARD");
    *(_DWORD *)(v1 + 1680) = 101;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[43],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7272),
      (const char (*)[43])"ITEM_LIMIT_SEA_LAMP_ACTIVITY_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 1680));
    if ( *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1696, "ITEM_LIMIT_SEA_LAMP_ACTIVITY_AVATAR_REWARD");
    *(_DWORD *)(v1 + 1696) = 1401;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[41],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7312),
      (const char (*)[41])"ITEM_LIMIT_PLAYER_EXP_OVERFLOW_TRANSFORM",
      (data::ItemLimitType *)(v1 + 1696));
    if ( *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1712, "ITEM_LIMIT_PLAYER_EXP_OVERFLOW_TRANSFORM");
    *(_DWORD *)(v1 + 1712) = 1402;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[43],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7352),
      (const char (*)[43])"ITEM_LIMIT_ACTIVITY_ARENA_CHALLENGE_REWARD",
      (data::ItemLimitType *)(v1 + 1712));
    if ( *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1728, "ITEM_LIMIT_ACTIVITY_ARENA_CHALLENGE_REWARD");
    *(_DWORD *)(v1 + 1728) = 1403;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7392),
      (const char (*)[28])"ITEM_LIMIT_COOP_TASK_REWARD",
      (data::ItemLimitType *)(v1 + 1728));
    if ( *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1744, "ITEM_LIMIT_COOP_TASK_REWARD");
    *(_DWORD *)(v1 + 1744) = 1404;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7432),
      (const char (*)[31])"ITEM_LIMIT_WATER_SPIRIT_REWARD",
      (data::ItemLimitType *)(v1 + 1744));
    if ( *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1760, "ITEM_LIMIT_WATER_SPIRIT_REWARD");
    *(_DWORD *)(v1 + 1760) = 1405;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7472),
      (const char (*)[32])"ITEM_LIMIT_REGION_SEARCH_REWARD",
      (data::ItemLimitType *)(v1 + 1760));
    if ( *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1776, "ITEM_LIMIT_REGION_SEARCH_REWARD");
    *(_DWORD *)(v1 + 1776) = 1406;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7512),
      (const char (*)[29])"ITEM_LIMIT_WATER_SPIRIT_DROP",
      (data::ItemLimitType *)(v1 + 1776));
    if ( *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1792, "ITEM_LIMIT_WATER_SPIRIT_DROP");
    *(_DWORD *)(v1 + 1792) = 1407;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7552),
      (const char (*)[38])"ITEM_LIMTT_ACTIVITY_FLEUR_FAIR_REWARD",
      (data::ItemLimitType *)(v1 + 1792));
    if ( *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1808, "ITEM_LIMTT_ACTIVITY_FLEUR_FAIR_REWARD");
    *(_DWORD *)(v1 + 1808) = 1501;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7592),
      (const char (*)[25])"ITEM_LIMIT_HIT_TREE_DROP",
      (data::ItemLimitType *)(v1 + 1808));
    if ( *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1824, "ITEM_LIMIT_HIT_TREE_DROP");
    *(_DWORD *)(v1 + 1824) = 1502;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7632),
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_MIST_TRIAL",
      (data::ItemLimitType *)(v1 + 1824));
    if ( *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1840, "ITEM_LIMIT_ACTIVITY_MIST_TRIAL");
    *(_DWORD *)(v1 + 1840) = 1503;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7672),
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_CHANNELLER_SLAB",
      (data::ItemLimitType *)(v1 + 1840));
    if ( *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1856, "ITEM_LIMIT_ACTIVITY_CHANNELLER_SLAB");
    *(_DWORD *)(v1 + 1856) = 1504;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7712),
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_HIDE_AND_SEEK",
      (data::ItemLimitType *)(v1 + 1856));
    if ( *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1872, "ITEM_LIMIT_ACTIVITY_HIDE_AND_SEEK");
    *(_DWORD *)(v1 + 1872) = 1505;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7752),
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_FIND_HILICHURL",
      (data::ItemLimitType *)(v1 + 1872));
    if ( *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1888, "ITEM_LIMIT_ACTIVITY_FIND_HILICHURL");
    *(_DWORD *)(v1 + 1888) = 1506;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7792),
      (const char (*)[33])"ITEM_LIMIT_FURNITURE_MAKE_CANCEL",
      (data::ItemLimitType *)(v1 + 1888));
    if ( *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1904, "ITEM_LIMIT_FURNITURE_MAKE_CANCEL");
    *(_DWORD *)(v1 + 1904) = 1507;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7832),
      (const char (*)[31])"ITEM_LIMIT_HOME_LEVELUP_REWARD",
      (data::ItemLimitType *)(v1 + 1904));
    if ( *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1920, "ITEM_LIMIT_HOME_LEVELUP_REWARD");
    *(_DWORD *)(v1 + 1920) = 1508;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7872),
      (const char (*)[26])"ITEM_LIMIT_FURNITURE_MAKE",
      (data::ItemLimitType *)(v1 + 1920));
    if ( *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1936, "ITEM_LIMIT_FURNITURE_MAKE");
    *(_DWORD *)(v1 + 1936) = 1509;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[42],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7912),
      (const char (*)[42])"ITEM_LIMIT_ACTIVITY_CONDITION_MAIL_REWARD",
      (data::ItemLimitType *)(v1 + 1936));
    if ( *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1952, "ITEM_LIMIT_ACTIVITY_CONDITION_MAIL_REWARD");
    *(_DWORD *)(v1 + 1952) = 1510;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[42],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7952),
      (const char (*)[42])"ITEM_LIMIT_BATTLE_PASS_NOTIFY_MAIL_REWARD",
      (data::ItemLimitType *)(v1 + 1952));
    if ( *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1968, "ITEM_LIMIT_BATTLE_PASS_NOTIFY_MAIL_REWARD");
    *(_DWORD *)(v1 + 1968) = 1511;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[50],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 7992),
      (const char (*)[50])"ITEM_LIMIT_ACTIVITY_CHANNELLER_SLAB_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 1968));
    if ( *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1984, "ITEM_LIMIT_ACTIVITY_CHANNELLER_SLAB_AVATAR_REWARD");
    *(_DWORD *)(v1 + 1984) = 1512;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8032),
      (const char (*)[25])"ITEM_LIMIT_HOME_RESOURCE",
      (data::ItemLimitType *)(v1 + 1984));
    if ( *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2000, "ITEM_LIMIT_HOME_RESOURCE");
    *(_DWORD *)(v1 + 2000) = 1513;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8072),
      (const char (*)[29])"ITEM_LIMIT_OPERATION_WELFARE",
      (data::ItemLimitType *)(v1 + 2000));
    if ( *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2016, "ITEM_LIMIT_OPERATION_WELFARE");
    *(_DWORD *)(v1 + 2016) = 1601;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[39],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8112),
      (const char (*)[39])"ITEM_LIMIT_ACTIVITY_SUMMER_TIME_REWARD",
      (data::ItemLimitType *)(v1 + 2016));
    if ( *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2032, "ITEM_LIMIT_ACTIVITY_SUMMER_TIME_REWARD");
    *(_DWORD *)(v1 + 2032) = 1602;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8152),
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_ECHO_SHELL",
      (data::ItemLimitType *)(v1 + 2032));
    if ( *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2048, "ITEM_LIMIT_ACTIVITY_ECHO_SHELL");
    *(_DWORD *)(v1 + 2048) = 1603;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 0x2000),
      (const char (*)[31])"ITEM_LIMIT_RELIQUARY_DECOMPOSE",
      (data::ItemLimitType *)(v1 + 2048));
    if ( *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2064, "ITEM_LIMIT_RELIQUARY_DECOMPOSE");
    *(_DWORD *)(v1 + 2064) = 1604;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[23],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8232),
      (const char (*)[23])"ITEM_LIMIT_HOME_FETTER",
      (data::ItemLimitType *)(v1 + 2064));
    if ( *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2080, "ITEM_LIMIT_HOME_FETTER");
    *(_DWORD *)(v1 + 2080) = 1605;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8272),
      (const char (*)[29])"ITEM_LIMIT_HOME_EVENT_REWARD",
      (data::ItemLimitType *)(v1 + 2080));
    if ( *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2096, "ITEM_LIMIT_HOME_EVENT_REWARD");
    *(_DWORD *)(v1 + 2096) = 1606;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[42],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8312),
      (const char (*)[42])"ITEM_LIMIT_ACTIVITY_BUOYANT_COMBAT_REWARD",
      (data::ItemLimitType *)(v1 + 2096));
    if ( *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2112, "ITEM_LIMIT_ACTIVITY_BUOYANT_COMBAT_REWARD");
    *(_DWORD *)(v1 + 2112) = 1607;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[44],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8352),
      (const char (*)[44])"ITEM_LIMIT_ACTIVITY_BOUNCE_CONJURING_REWARD",
      (data::ItemLimitType *)(v1 + 2112));
    if ( *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2128, "ITEM_LIMIT_ACTIVITY_BOUNCE_CONJURING_REWARD");
    *(_DWORD *)(v1 + 2128) = 2000;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8392),
      (const char (*)[30])"ITEM_LIMIT_ORAIONOKAMI_REWARD",
      (data::ItemLimitType *)(v1 + 2128));
    if ( *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2144, "ITEM_LIMIT_ORAIONOKAMI_REWARD");
    *(_DWORD *)(v1 + 2144) = 2001;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8432),
      (const char (*)[26])"ITEM_LIMIT_BOOK_LEAF_DROP",
      (data::ItemLimitType *)(v1 + 2144));
    if ( *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2160, "ITEM_LIMIT_BOOK_LEAF_DROP");
    *(_DWORD *)(v1 + 2160) = 2002;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[41],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8472),
      (const char (*)[41])"ITEM_LIMIT_EXPLORATION_LINE_LEVEL_REWARD",
      (data::ItemLimitType *)(v1 + 2160));
    if ( *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2176, "ITEM_LIMIT_EXPLORATION_LINE_LEVEL_REWARD");
    *(_DWORD *)(v1 + 2176) = 2003;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8512),
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_BLITZ_RUSH_REWARD",
      (data::ItemLimitType *)(v1 + 2176));
    if ( *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2192, "ITEM_LIMIT_ACTIVITY_BLITZ_RUSH_REWARD");
    *(_DWORD *)(v1 + 2192) = 2004;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[45],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8552),
      (const char (*)[45])"ITEM_LIMIT_ACTIVITY_BLITZ_RUSH_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 2192));
    if ( *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2208, "ITEM_LIMIT_ACTIVITY_BLITZ_RUSH_AVATAR_REWARD");
    *(_DWORD *)(v1 + 2208) = 2005;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8592),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_CHESS_REWARD",
      (data::ItemLimitType *)(v1 + 2208));
    if ( *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2224, "ITEM_LIMIT_ACTIVITY_CHESS_REWARD");
    *(_DWORD *)(v1 + 2224) = 2006;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8632),
      (const char (*)[36])"ITEM_LIMIT_HOME_PLANT_BOX_SEED_DROP",
      (data::ItemLimitType *)(v1 + 2224));
    if ( *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2240, "ITEM_LIMIT_HOME_PLANT_BOX_SEED_DROP");
    *(_DWORD *)(v1 + 2240) = 2007;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8672),
      (const char (*)[34])"ITEM_LIMIT_HOME_PLANT_GATHER_DROP",
      (data::ItemLimitType *)(v1 + 2240));
    if ( *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2256, "ITEM_LIMIT_HOME_PLANT_GATHER_DROP");
    *(_DWORD *)(v1 + 2256) = 2008;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8712),
      (const char (*)[38])"ITEM_LIMIT_HOME_FURNITURE_MAKE_RETURN",
      (data::ItemLimitType *)(v1 + 2256));
    if ( *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2272, "ITEM_LIMIT_HOME_FURNITURE_MAKE_RETURN");
    *(_DWORD *)(v1 + 2272) = 2100;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8752),
      (const char (*)[25])"ITEM_LIMIT_ACTIVITY_SUMO",
      (data::ItemLimitType *)(v1 + 2272));
    if ( *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2288, "ITEM_LIMIT_ACTIVITY_SUMO");
    *(_DWORD *)(v1 + 2288) = 2101;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8792),
      (const char (*)[30])"ITEM_LIMIT_ACTIVITY_LUNA_RITE",
      (data::ItemLimitType *)(v1 + 2288));
    if ( *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2304, "ITEM_LIMIT_ACTIVITY_LUNA_RITE");
    *(_DWORD *)(v1 + 2304) = 2102;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[23],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8832),
      (const char (*)[23])"ITEM_LIMIT_FISH_REWARD",
      (data::ItemLimitType *)(v1 + 2304));
    if ( *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2320, "ITEM_LIMIT_FISH_REWARD");
    *(_DWORD *)(v1 + 2320) = 2103;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8872),
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_MOONFIN_TRIAL",
      (data::ItemLimitType *)(v1 + 2320));
    if ( *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2336, "ITEM_LIMIT_ACTIVITY_MOONFIN_TRIAL");
    *(_DWORD *)(v1 + 2336) = 2104;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8912),
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_LUNA_RITE_DROP",
      (data::ItemLimitType *)(v1 + 2336));
    if ( *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2352, "ITEM_LIMIT_ACTIVITY_LUNA_RITE_DROP");
    *(_DWORD *)(v1 + 2352) = 2200;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8952),
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_ROGUELIKE_DUNGEON",
      (data::ItemLimitType *)(v1 + 2352));
    if ( *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2368, "ITEM_LIMIT_ACTIVITY_ROGUELIKE_DUNGEON");
    *(_DWORD *)(v1 + 2368) = 2201;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[52],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 8992),
      (const char (*)[52])"ITEM_LIMIT_ACTIVITY_ROGUELIKE_DUNGEON_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 2368));
    if ( *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2384, "ITEM_LIMIT_ACTIVITY_ROGUELIKE_DUNGEON_AVATAR_REWARD");
    *(_DWORD *)(v1 + 2384) = 2202;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9032),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_PLANT_FLOWER",
      (data::ItemLimitType *)(v1 + 2384));
    if ( *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2400, "ITEM_LIMIT_ACTIVITY_PLANT_FLOWER");
    *(_DWORD *)(v1 + 2400) = 2203;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9072),
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_DIG_REWARD",
      (data::ItemLimitType *)(v1 + 2400));
    if ( *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2416, "ITEM_LIMIT_ACTIVITY_DIG_REWARD");
    *(_DWORD *)(v1 + 2416) = 2204;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9112),
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_DIG_DROP",
      (data::ItemLimitType *)(v1 + 2416));
    if ( *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2432, "ITEM_LIMIT_ACTIVITY_DIG_DROP");
    *(_DWORD *)(v1 + 2432) = 2205;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9152),
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_MUSIC_GAME_REWARD",
      (data::ItemLimitType *)(v1 + 2432));
    if ( *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2448, "ITEM_LIMIT_ACTIVITY_MUSIC_GAME_REWARD");
    *(_DWORD *)(v1 + 2448) = 2300;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9192),
      (const char (*)[26])"ITEM_LIMIT_CAPTURE_REWARD",
      (data::ItemLimitType *)(v1 + 2448));
    if ( *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2464, "ITEM_LIMIT_CAPTURE_REWARD");
    *(_DWORD *)(v1 + 2464) = 2301;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9232),
      (const char (*)[30])"ITEM_LIMIT_WINTER_CAMP_REWARD",
      (data::ItemLimitType *)(v1 + 2464));
    if ( *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2480, "ITEM_LIMIT_WINTER_CAMP_REWARD");
    *(_DWORD *)(v1 + 2480) = 2302;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9272),
      (const char (*)[28])"ITEM_LIMIT_WINTER_CAMP_DROP",
      (data::ItemLimitType *)(v1 + 2480));
    if ( *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2496, "ITEM_LIMIT_WINTER_CAMP_DROP");
    *(_DWORD *)(v1 + 2496) = 2303;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9312),
      (const char (*)[29])"ITEM_LIMIT_CAPTURE_NONE_DROP",
      (data::ItemLimitType *)(v1 + 2496));
    if ( *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2512, "ITEM_LIMIT_CAPTURE_NONE_DROP");
    *(_DWORD *)(v1 + 2512) = 2304;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9352),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_HACHI_REWARD",
      (data::ItemLimitType *)(v1 + 2512));
    if ( *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2528, "ITEM_LIMIT_ACTIVITY_HACHI_REWARD");
    *(_DWORD *)(v1 + 2528) = 2400;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[27],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9392),
      (const char (*)[27])"ITEM_LIMIT_ACTIVITY_POTION",
      (data::ItemLimitType *)(v1 + 2528));
    if ( *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2544, "ITEM_LIMIT_ACTIVITY_POTION");
    *(_DWORD *)(v1 + 2544) = 2401;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9432),
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_TANUKI_TRAVEL",
      (data::ItemLimitType *)(v1 + 2544));
    if ( *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2560, "ITEM_LIMIT_ACTIVITY_TANUKI_TRAVEL");
    *(_DWORD *)(v1 + 2560) = 2402;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9472),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_LANTERN_RITE",
      (data::ItemLimitType *)(v1 + 2560));
    if ( *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2576, "ITEM_LIMIT_ACTIVITY_LANTERN_RITE");
    *(_DWORD *)(v1 + 2576) = 2403;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[47],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9512),
      (const char (*)[47])"ITEM_LIMIT_ACTIVITY_LANTERN_RITE_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 2576));
    if ( *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2592, "ITEM_LIMIT_ACTIVITY_LANTERN_RITE_AVATAR_REWARD");
    *(_DWORD *)(v1 + 2592) = 2404;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[38],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9552),
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_LANTERN_RITE_DROP",
      (data::ItemLimitType *)(v1 + 2592));
    if ( *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2608, "ITEM_LIMIT_ACTIVITY_LANTERN_RITE_DROP");
    *(_DWORD *)(v1 + 2608) = 2500;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9592),
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_MICHIAE_MATSURI",
      (data::ItemLimitType *)(v1 + 2608));
    if ( *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2624, "ITEM_LIMIT_ACTIVITY_MICHIAE_MATSURI");
    *(_DWORD *)(v1 + 2624) = 2501;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[41],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9632),
      (const char (*)[41])"ITEM_LIMIT_ACTIVITY_MICHIAE_MATSURI_DROP",
      (data::ItemLimitType *)(v1 + 2624));
    if ( *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2640, "ITEM_LIMIT_ACTIVITY_MICHIAE_MATSURI_DROP");
    *(_DWORD *)(v1 + 2640) = 2502;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[30],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9672),
      (const char (*)[30])"ITEM_LIMIT_ACTIVITY_BARTENDER",
      (data::ItemLimitType *)(v1 + 2640));
    if ( *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2656, "ITEM_LIMIT_ACTIVITY_BARTENDER");
    *(_DWORD *)(v1 + 2656) = 2503;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[22],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9712),
      (const char (*)[22])"ITEM_LIMIT_UGC_REWARD",
      (data::ItemLimitType *)(v1 + 2656));
    if ( *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2672, "ITEM_LIMIT_UGC_REWARD");
    *(_DWORD *)(v1 + 2672) = 2600;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[29],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9752),
      (const char (*)[29])"ITEM_LIMIT_LUMEN_STONE_LEVEL",
      (data::ItemLimitType *)(v1 + 2672));
    if ( *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2688, "ITEM_LIMIT_LUMEN_STONE_LEVEL");
    *(_DWORD *)(v1 + 2688) = 2601;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9792),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_CRYSTAL_LINK",
      (data::ItemLimitType *)(v1 + 2688));
    if ( *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2704, "ITEM_LIMIT_ACTIVITY_CRYSTAL_LINK");
    *(_DWORD *)(v1 + 2704) = 2602;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9832),
      (const char (*)[26])"ITEM_LIMIT_ACTIVITY_SPICE",
      (data::ItemLimitType *)(v1 + 2704));
    if ( *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2720, "ITEM_LIMIT_ACTIVITY_SPICE");
    *(_DWORD *)(v1 + 2720) = 2603;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9872),
      (const char (*)[28])"ITEM_LIMIT_ACTIVITY_IRODORI",
      (data::ItemLimitType *)(v1 + 2720));
    if ( *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2736, "ITEM_LIMIT_ACTIVITY_IRODORI");
    *(_DWORD *)(v1 + 2736) = 2604;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[42],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9912),
      (const char (*)[42])"ITEM_LIMIT_ACTIVITY_IRODORI_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 2736));
    if ( *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2752, "ITEM_LIMIT_ACTIVITY_IRODORI_AVATAR_REWARD");
    *(_DWORD *)(v1 + 2752) = 2605;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9952),
      (const char (*)[26])"ITEM_LIMIT_ACTIVITY_PHOTO",
      (data::ItemLimitType *)(v1 + 2752));
    if ( *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2768, "ITEM_LIMIT_ACTIVITY_PHOTO");
    *(_DWORD *)(v1 + 2768) = 2700;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[26],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 9992),
      (const char (*)[26])"ITEM_LIMIT_ACTIVITY_GACHA",
      (data::ItemLimitType *)(v1 + 2768));
    if ( *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2784, "ITEM_LIMIT_ACTIVITY_GACHA");
    *(_DWORD *)(v1 + 2784) = 2701;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10032),
      (const char (*)[32])"ITEM_LIMIT_ACTIVITY_ROGUE_DIARY",
      (data::ItemLimitType *)(v1 + 2784));
    if ( *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2800, "ITEM_LIMIT_ACTIVITY_ROGUE_DIARY");
    *(_DWORD *)(v1 + 2800) = 2702;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10072),
      (const char (*)[34])"ITEM_LIMIT_COMEBACK_QUESTIONNAIRE",
      (data::ItemLimitType *)(v1 + 2800));
    if ( *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2816, "ITEM_LIMIT_COMEBACK_QUESTIONNAIRE");
    *(_DWORD *)(v1 + 2816) = 2703;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[37],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10112),
      (const char (*)[37])"ITEM_LIMIT_LUMINANCE_STONE_CHALLENGE",
      (data::ItemLimitType *)(v1 + 2816));
    if ( *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2832, "ITEM_LIMIT_LUMINANCE_STONE_CHALLENGE");
    *(_DWORD *)(v1 + 2832) = 2800;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10152),
      (const char (*)[28])"ITEM_LIMIT_GIVING_TAKE_BACK",
      (data::ItemLimitType *)(v1 + 2832));
    if ( *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2848, "ITEM_LIMIT_GIVING_TAKE_BACK");
    *(_DWORD *)(v1 + 2848) = 2801;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10192),
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_SUMMER_TIME_V2",
      (data::ItemLimitType *)(v1 + 2848));
    if ( *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2864, "ITEM_LIMIT_ACTIVITY_SUMMER_TIME_V2");
    *(_DWORD *)(v1 + 2864) = 2802;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[49],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10232),
      (const char (*)[49])"ITEM_LIMIT_ACTIVITY_SUMMER_TIME_V2_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 2864));
    if ( *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2880, "ITEM_LIMIT_ACTIVITY_SUMMER_TIME_V2_AVATAR_REWARD");
    *(_DWORD *)(v1 + 2880) = 2803;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10272),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_ISLAND_PARTY",
      (data::ItemLimitType *)(v1 + 2880));
    if ( *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2896, "ITEM_LIMIT_ACTIVITY_ISLAND_PARTY");
    *(_DWORD *)(v1 + 2896) = 2804;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10312),
      (const char (*)[25])"ITEM_LIMIT_ACTIVITY_GEAR",
      (data::ItemLimitType *)(v1 + 2896));
    if ( *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2912, "ITEM_LIMIT_ACTIVITY_GEAR");
    *(_DWORD *)(v1 + 2912) = 3000;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[37],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10352),
      (const char (*)[37])"ITEM_LIMIT_ACTIVITY_GRAVEN_INNOCENCE",
      (data::ItemLimitType *)(v1 + 2912));
    if ( *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2928, "ITEM_LIMIT_ACTIVITY_GRAVEN_INNOCENCE");
    *(_DWORD *)(v1 + 2928) = 3001;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[51],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10392),
      (const char (*)[51])"ITEM_LIMIT_ACTIVITY_GRAVEN_INNOCENCE_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 2928));
    if ( *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2944, "ITEM_LIMIT_ACTIVITY_GRAVEN_INNOCENCE_AVATAR_REWARD");
    *(_DWORD *)(v1 + 2944) = 3002;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10432),
      (const char (*)[25])"ITEM_LIMIT_WOOD_EXCHANGE",
      (data::ItemLimitType *)(v1 + 2944));
    if ( *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2960, "ITEM_LIMIT_WOOD_EXCHANGE");
    *(_DWORD *)(v1 + 2960) = 3003;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10472),
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_INSTABLE_SPRAY",
      (data::ItemLimitType *)(v1 + 2960));
    if ( *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2976, "ITEM_LIMIT_ACTIVITY_INSTABLE_SPRAY");
    *(_DWORD *)(v1 + 2976) = 3004;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[36],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10512),
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_TREASURE_SEELIE",
      (data::ItemLimitType *)(v1 + 2976));
    if ( *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2992, "ITEM_LIMIT_ACTIVITY_TREASURE_SEELIE");
    *(_DWORD *)(v1 + 2992) = 3005;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10552),
      (const char (*)[28])"ITEM_LIMIT_ACTIVITY_MUQADAS",
      (data::ItemLimitType *)(v1 + 2992));
    if ( *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3008, "ITEM_LIMIT_ACTIVITY_MUQADAS");
    *(_DWORD *)(v1 + 3008) = 3100;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[39],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10592),
      (const char (*)[39])"ITEM_LIMIT_ACTIVITY_ROCK_BOARD_EXPLORE",
      (data::ItemLimitType *)(v1 + 3008));
    if ( *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3024, "ITEM_LIMIT_ACTIVITY_ROCK_BOARD_EXPLORE");
    *(_DWORD *)(v1 + 3024) = 3101;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10632),
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_WIND_FIELD",
      (data::ItemLimitType *)(v1 + 3024));
    if ( *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3040, "ITEM_LIMIT_ACTIVITY_WIND_FIELD");
    *(_DWORD *)(v1 + 3040) = 3102;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10672),
      (const char (*)[28])"ITEM_LIMIT_ACTIVITY_VINTAGE",
      (data::ItemLimitType *)(v1 + 3040));
    if ( *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3056, "ITEM_LIMIT_ACTIVITY_VINTAGE");
    *(_DWORD *)(v1 + 3056) = 3201;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10712),
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_FUNGUS_FIGHTER",
      (data::ItemLimitType *)(v1 + 3056));
    if ( *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3072, "ITEM_LIMIT_ACTIVITY_FUNGUS_FIGHTER");
    *(_DWORD *)(v1 + 3072) = 3202;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[49],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10752),
      (const char (*)[49])"ITEM_LIMIT_ACTIVITY_FUNGUS_FIGHTER_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 3072));
    if ( *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3088, "ITEM_LIMIT_ACTIVITY_FUNGUS_FIGHTER_AVATAR_REWARD");
    *(_DWORD *)(v1 + 3088) = 3203;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[35],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10792),
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_CHAR_AMUSEMENT",
      (data::ItemLimitType *)(v1 + 3088));
    if ( *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3104, "ITEM_LIMIT_ACTIVITY_CHAR_AMUSEMENT");
    *(_DWORD *)(v1 + 3104) = 3204;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[40],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10832),
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_EFFIGY_CHALLENGE_V2",
      (data::ItemLimitType *)(v1 + 3104));
    if ( *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3120, "ITEM_LIMIT_ACTIVITY_EFFIGY_CHALLENGE_V2");
    *(_DWORD *)(v1 + 3120) = 3300;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10872),
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_BRICK_BREAKER",
      (data::ItemLimitType *)(v1 + 3120));
    if ( *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3136, "ITEM_LIMIT_ACTIVITY_BRICK_BREAKER");
    *(_DWORD *)(v1 + 3136) = 3301;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10912),
      (const char (*)[25])"ITEM_LIMIT_AVATAR_RENAME",
      (data::ItemLimitType *)(v1 + 3136));
    if ( *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3152, "ITEM_LIMIT_AVATAR_RENAME");
    *(_DWORD *)(v1 + 3152) = 3302;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[28],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10952),
      (const char (*)[28])"ITEM_LIMIT_GCG_LEVEL_REWARD",
      (data::ItemLimitType *)(v1 + 3152));
    if ( *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3168, "ITEM_LIMIT_GCG_LEVEL_REWARD");
    *(_DWORD *)(v1 + 3168) = 3303;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 10992),
      (const char (*)[32])"ITEM_LIMIT_GCG_CHALLENGE_REWARD",
      (data::ItemLimitType *)(v1 + 3168));
    if ( *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3184, "ITEM_LIMIT_GCG_CHALLENGE_REWARD");
    *(_DWORD *)(v1 + 3184) = 3304;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[43],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11032),
      (const char (*)[43])"ITEM_LIMIT_GCG_REPEATABLE_CHALLENGE_REWARD",
      (data::ItemLimitType *)(v1 + 3184));
    if ( *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3200, "ITEM_LIMIT_GCG_REPEATABLE_CHALLENGE_REWARD");
    *(_DWORD *)(v1 + 3200) = 3305;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[33],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11072),
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_COIN_COLLECT",
      (data::ItemLimitType *)(v1 + 3200));
    if ( *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3216, "ITEM_LIMIT_ACTIVITY_COIN_COLLECT");
    *(_DWORD *)(v1 + 3216) = 3306;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[34],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11112),
      (const char (*)[34])"ITEM_LIMIT_GCG_PROFICIENCY_REWARD",
      (data::ItemLimitType *)(v1 + 3216));
    if ( *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3232, "ITEM_LIMIT_GCG_PROFICIENCY_REWARD");
    *(_DWORD *)(v1 + 3232) = 3400;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[32],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11152),
      (const char (*)[32])"ITEM_LIMIT_ACTIVITY_SEA_LAMP_V3",
      (data::ItemLimitType *)(v1 + 3232));
    if ( *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3248, "ITEM_LIMIT_ACTIVITY_SEA_LAMP_V3");
    *(_DWORD *)(v1 + 3248) = 3401;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[46],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11192),
      (const char (*)[46])"ITEM_LIMIT_ACTIVITY_SEA_LAMP_V3_AVATAR_REWARD",
      (data::ItemLimitType *)(v1 + 3248));
    if ( *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3264, "ITEM_LIMIT_ACTIVITY_SEA_LAMP_V3_AVATAR_REWARD");
    *(_DWORD *)(v1 + 3264) = 3402;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[25],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11232),
      (const char (*)[25])"ITEM_LIMIT_COMPOUND_DROP",
      (data::ItemLimitType *)(v1 + 3264));
    if ( *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3280, "ITEM_LIMIT_COMPOUND_DROP");
    *(_DWORD *)(v1 + 3280) = 3403;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[43],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11272),
      (const char (*)[43])"ITEM_LIMIT_ACTIVITY_ELECTROHERCULES_BATTLE",
      (data::ItemLimitType *)(v1 + 3280));
    if ( *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3296, "ITEM_LIMIT_ACTIVITY_ELECTROHERCULES_BATTLE");
    *(_DWORD *)(v1 + 3296) = 3404;
    std::pair<std::string const,data::ItemLimitType>::pair<char const(&)[31],data::ItemLimitType,true>(
      (std::pair<const std::string,data::ItemLimitType> *const)(v1 + 11312),
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_TEAM_CHAIN",
      (data::ItemLimitType *)(v1 + 3296));
    std::allocator<std::pair<std::string const,data::ItemLimitType>>::allocator((std::allocator<std::pair<const std::string,data::ItemLimitType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::ItemLimitType>::unordered_map(
      &data::getItemLimitTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::ItemLimitType> >)__PAIR128__(201LL, v1 + 3312),
      0LL,
      (const std::unordered_map<std::string,data::ItemLimitType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::ItemLimitType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::ItemLimitType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getItemLimitTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::ItemLimitType>::~unordered_map,
      &data::getItemLimitTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::ItemLimitType>>::~allocator((std::allocator<std::pair<const std::string,data::ItemLimitType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::ItemLimitType> *)(v1 + 11352);
          i != (std::pair<const std::string,data::ItemLimitType> *)(v1 + 3312);
          std::pair<std::string const,data::ItemLimitType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF85A4) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 1452) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_8(v1, 11616LL, v6);
  }
  return &data::getItemLimitTypeNameMap[abi:cxx11](void)::m;
};

// Line 5590: range 000000000FAD149D-000000000FAE072E
const std::map<data::ItemLimitType,std::pair<std::string,std::string >> *__cdecl data::getItemLimitTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  _DWORD *v18; // rax
  _DWORD *v19; // rax
  _DWORD *v20; // rax
  _DWORD *v21; // rax
  _DWORD *v22; // rax
  _DWORD *v23; // rax
  _DWORD *v24; // rax
  _DWORD *v25; // rax
  _DWORD *v26; // rax
  _DWORD *v27; // rax
  _DWORD *v28; // rax
  _DWORD *v29; // rax
  _DWORD *v30; // rax
  _DWORD *v31; // rax
  _DWORD *v32; // rax
  _DWORD *v33; // rax
  _DWORD *v34; // rax
  _DWORD *v35; // rax
  _DWORD *v36; // rax
  _DWORD *v37; // rax
  _DWORD *v38; // rax
  _DWORD *v39; // rax
  _DWORD *v40; // rax
  _DWORD *v41; // rax
  _DWORD *v42; // rax
  _DWORD *v43; // rax
  _DWORD *v44; // rax
  _DWORD *v45; // rax
  _DWORD *v46; // rax
  _DWORD *v47; // rax
  _DWORD *v48; // rax
  _DWORD *v49; // rax
  _DWORD *v50; // rax
  _DWORD *v51; // rax
  _DWORD *v52; // rax
  _DWORD *v53; // rax
  _DWORD *v54; // rax
  _DWORD *v55; // rax
  _DWORD *v56; // rax
  _DWORD *v57; // rax
  _DWORD *v58; // rax
  _DWORD *v59; // rax
  _DWORD *v60; // rax
  _DWORD *v61; // rax
  _DWORD *v62; // rax
  _DWORD *v63; // rax
  _DWORD *v64; // rax
  _DWORD *v65; // rax
  _DWORD *v66; // rax
  _DWORD *v67; // rax
  _DWORD *v68; // rax
  _DWORD *v69; // rax
  _DWORD *v70; // rax
  _DWORD *v71; // rax
  _DWORD *v72; // rax
  _DWORD *v73; // rax
  _DWORD *v74; // rax
  _DWORD *v75; // rax
  _DWORD *v76; // rax
  _DWORD *v77; // rax
  _DWORD *v78; // rax
  _DWORD *v79; // rax
  _DWORD *v80; // rax
  _DWORD *v81; // rax
  _DWORD *v82; // rax
  _DWORD *v83; // rax
  _DWORD *v84; // rax
  _DWORD *v85; // rax
  _DWORD *v86; // rax
  _DWORD *v87; // rax
  _DWORD *v88; // rax
  _DWORD *v89; // rax
  _DWORD *v90; // rax
  _DWORD *v91; // rax
  _DWORD *v92; // rax
  _DWORD *v93; // rax
  _DWORD *v94; // rax
  _DWORD *v95; // rax
  _DWORD *v96; // rax
  _DWORD *v97; // rax
  _DWORD *v98; // rax
  _DWORD *v99; // rax
  _DWORD *v100; // rax
  _DWORD *v101; // rax
  _DWORD *v102; // rax
  _DWORD *v103; // rax
  _DWORD *v104; // rax
  _DWORD *v105; // rax
  _DWORD *v106; // rax
  _DWORD *v107; // rax
  _DWORD *v108; // rax
  _DWORD *v109; // rax
  _DWORD *v110; // rax
  _DWORD *v111; // rax
  _DWORD *v112; // rax
  _DWORD *v113; // rax
  _DWORD *v114; // rax
  _DWORD *v115; // rax
  _DWORD *v116; // rax
  _DWORD *v117; // rax
  _DWORD *v118; // rax
  _DWORD *v119; // rax
  _DWORD *v120; // rax
  _DWORD *v121; // rax
  _DWORD *v122; // rax
  _DWORD *v123; // rax
  _DWORD *v124; // rax
  _DWORD *v125; // rax
  _DWORD *v126; // rax
  _DWORD *v127; // rax
  _DWORD *v128; // rax
  _DWORD *v129; // rax
  _DWORD *v130; // rax
  _DWORD *v131; // rax
  _DWORD *v132; // rax
  _DWORD *v133; // rax
  _DWORD *v134; // rax
  _DWORD *v135; // rax
  _DWORD *v136; // rax
  _DWORD *v137; // rax
  _DWORD *v138; // rax
  _DWORD *v139; // rax
  _DWORD *v140; // rax
  _DWORD *v141; // rax
  _DWORD *v142; // rax
  _DWORD *v143; // rax
  _DWORD *v144; // rax
  _DWORD *v145; // rax
  _DWORD *v146; // rax
  _DWORD *v147; // rax
  _DWORD *v148; // rax
  _DWORD *v149; // rax
  _DWORD *v150; // rax
  _DWORD *v151; // rax
  _DWORD *v152; // rax
  _DWORD *v153; // rax
  _DWORD *v154; // rax
  _DWORD *v155; // rax
  _DWORD *v156; // rax
  _DWORD *v157; // rax
  _DWORD *v158; // rax
  _DWORD *v159; // rax
  _DWORD *v160; // rax
  _DWORD *v161; // rax
  _DWORD *v162; // rax
  _DWORD *v163; // rax
  _DWORD *v164; // rax
  _DWORD *v165; // rax
  _DWORD *v166; // rax
  _DWORD *v167; // rax
  _DWORD *v168; // rax
  _DWORD *v169; // rax
  _DWORD *v170; // rax
  _DWORD *v171; // rax
  _DWORD *v172; // rax
  _DWORD *v173; // rax
  _DWORD *v174; // rax
  _DWORD *v175; // rax
  _DWORD *v176; // rax
  _DWORD *v177; // rax
  _DWORD *v178; // rax
  _DWORD *v179; // rax
  _DWORD *v180; // rax
  _DWORD *v181; // rax
  _DWORD *v182; // rax
  _DWORD *v183; // rax
  _DWORD *v184; // rax
  _DWORD *v185; // rax
  _DWORD *v186; // rax
  _DWORD *v187; // rax
  _DWORD *v188; // rax
  _DWORD *v189; // rax
  _DWORD *v190; // rax
  _DWORD *v191; // rax
  _DWORD *v192; // rax
  _DWORD *v193; // rax
  _DWORD *v194; // rax
  _DWORD *v195; // rax
  _DWORD *v196; // rax
  _DWORD *v197; // rax
  _DWORD *v198; // rax
  _DWORD *v199; // rax
  _DWORD *v200; // rax
  _DWORD *v201; // rax
  _DWORD *v202; // rax
  _DWORD *v203; // rax
  _DWORD *v204; // rax
  char v206[37360]; // [rsp+10h] [rbp-91F0h] BYREF

  v1 = (unsigned __int64)v206;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_10(37312LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = a4053219Unknown;
  *(_QWORD *)(v1 + 16) = data::getItemLimitTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = -234556924;
  v3[536862732] = -234556924;
  v3[536862733] = -234556924;
  v3[536862734] = -234556924;
  v3[536862735] = -234556924;
  v3[536862736] = -234556924;
  v3[536862737] = -234556924;
  v3[536862738] = -234556924;
  v3[536862739] = -234556924;
  v3[536862740] = -234556924;
  v3[536862741] = -234556924;
  v3[536862742] = -234556924;
  v3[536862743] = -234556924;
  v3[536862744] = -234556924;
  v3[536862745] = -234556924;
  v3[536862746] = -234556924;
  v3[536862747] = -234556924;
  v3[536862748] = -234556924;
  v3[536862749] = -234556924;
  v3[536862750] = -234556924;
  v3[536862751] = -234556924;
  v3[536862752] = -234556924;
  v3[536862753] = -234556924;
  v3[536862754] = -234556924;
  v3[536862755] = -234556924;
  v3[536862756] = -234556924;
  v3[536862757] = -234556924;
  v3[536862758] = -234556924;
  v3[536862759] = -234556924;
  v3[536862760] = -234556924;
  v3[536862761] = -234556924;
  v3[536862762] = -234556924;
  v3[536862763] = -234556924;
  v3[536862764] = -234556924;
  v3[536862765] = -234556924;
  v3[536862766] = -234556924;
  v3[536862767] = -234556924;
  v3[536862768] = -234556924;
  v3[536862769] = -234556924;
  v3[536862770] = -234556924;
  v3[536862771] = -234556924;
  v3[536862772] = -234556924;
  v3[536862773] = -234556924;
  v3[536862774] = -234556924;
  v3[536862775] = -234556924;
  v3[536862776] = -234556924;
  v3[536862777] = -234556924;
  v3[536862778] = -234556924;
  v3[536862779] = -234556924;
  v3[536862780] = -234556924;
  v3[536862781] = -234556924;
  v3[536862782] = -234556924;
  v3[536862783] = -234556924;
  v3[536862784] = -234556924;
  v3[536862785] = -234556924;
  v3[536862786] = -234556924;
  v3[536862787] = -234556924;
  v3[536862788] = -234556924;
  v3[536862789] = -234556924;
  v3[536862790] = -234556924;
  v3[536862791] = -234556924;
  v3[536862792] = -234556924;
  v3[536862793] = -234556924;
  v3[536862794] = -234556924;
  v3[536862795] = -234556924;
  v3[536862796] = -234556924;
  v3[536862797] = -234556924;
  v3[536862798] = -234556924;
  v3[536862799] = -234556924;
  v3[536862800] = -234556924;
  v3[536862801] = -234556924;
  v3[536862802] = -234556924;
  v3[536862803] = -234556924;
  v3[536862804] = -234556924;
  v3[536862805] = -234556924;
  v3[536862806] = -234556924;
  v3[536862807] = -234556924;
  v3[536862808] = -234556924;
  v3[536862809] = -234556924;
  v3[536862810] = -234556924;
  v3[536862811] = -234556924;
  v3[536862812] = -234556924;
  v3[536862813] = -234556924;
  v3[536862814] = -234556924;
  v3[536862815] = -234556924;
  v3[536862816] = -234556924;
  v3[536862817] = -234556924;
  v3[536862818] = -234556924;
  v3[536862819] = -234556924;
  v3[536862820] = -234556924;
  v3[536862821] = -234556924;
  v3[536862822] = 61956;
  v3[536862824] = -219021312;
  v3[536862825] = 62194;
  v3[536862827] = -219021312;
  v3[536862828] = 62194;
  v3[536862830] = -219021312;
  v3[536862831] = 62194;
  v3[536862833] = -219021312;
  v3[536862834] = 62194;
  v3[536862836] = -219021312;
  v3[536862837] = 62194;
  v3[536862839] = -219021312;
  v3[536862840] = 62194;
  v3[536862842] = -219021312;
  v3[536862843] = 62194;
  v3[536862845] = -219021312;
  v3[536862846] = 62194;
  v3[536862848] = -219021312;
  v3[536862849] = 62194;
  v3[536862851] = -219021312;
  v3[536862852] = 62194;
  v3[536862854] = -219021312;
  v3[536862855] = 62194;
  v3[536862857] = -219021312;
  v3[536862858] = 62194;
  v3[536862860] = -219021312;
  v3[536862861] = 62194;
  v3[536862863] = -219021312;
  v3[536862864] = 62194;
  v3[536862866] = -219021312;
  v3[536862867] = 62194;
  v3[536862869] = -219021312;
  v3[536862870] = 62194;
  v3[536862872] = -219021312;
  v3[536862873] = 62194;
  v3[536862875] = -219021312;
  v3[536862876] = 62194;
  v3[536862878] = -219021312;
  v3[536862879] = 62194;
  v3[536862881] = -219021312;
  v3[536862882] = 62194;
  v3[536862884] = -219021312;
  v3[536862885] = 62194;
  v3[536862887] = -219021312;
  v3[536862888] = 62194;
  v3[536862890] = -219021312;
  v3[536862891] = 62194;
  v3[536862893] = -219021312;
  v3[536862894] = 62194;
  v3[536862896] = -219021312;
  v3[536862897] = 62194;
  v3[536862899] = -219021312;
  v3[536862900] = 62194;
  v3[536862902] = -219021312;
  v3[536862903] = 62194;
  v3[536862905] = -219021312;
  v3[536862906] = 62194;
  v3[536862908] = -219021312;
  v3[536862909] = 62194;
  v3[536862911] = -219021312;
  v3[536862912] = 62194;
  v3[536862914] = -219021312;
  v3[536862915] = 62194;
  v3[536862917] = -219021312;
  v3[536862918] = 62194;
  v3[536862920] = -219021312;
  v3[536862921] = 62194;
  v3[536862923] = -219021312;
  v3[536862924] = 62194;
  v3[536862926] = -219021312;
  v3[536862927] = 62194;
  v3[536862929] = -219021312;
  v3[536862930] = 62194;
  v3[536862932] = -219021312;
  v3[536862933] = 62194;
  v3[536862935] = -219021312;
  v3[536862936] = 62194;
  v3[536862938] = -219021312;
  v3[536862939] = 62194;
  v3[536862941] = -219021312;
  v3[536862942] = 62194;
  v3[536862944] = -219021312;
  v3[536862945] = 62194;
  v3[536862947] = -219021312;
  v3[536862948] = 62194;
  v3[536862950] = -219021312;
  v3[536862951] = 62194;
  v3[536862953] = -219021312;
  v3[536862954] = 62194;
  v3[536862956] = -219021312;
  v3[536862957] = 62194;
  v3[536862959] = -219021312;
  v3[536862960] = 62194;
  v3[536862962] = -219021312;
  v3[536862963] = 62194;
  v3[536862965] = -219021312;
  v3[536862966] = 62194;
  v3[536862968] = -219021312;
  v3[536862969] = 62194;
  v3[536862971] = -219021312;
  v3[536862972] = 62194;
  v3[536862974] = -219021312;
  v3[536862975] = 62194;
  v3[536862977] = -219021312;
  v3[536862978] = 62194;
  v3[536862980] = -219021312;
  v3[536862981] = 62194;
  v3[536862983] = -219021312;
  v3[536862984] = 62194;
  v3[536862986] = -219021312;
  v3[536862987] = 62194;
  v3[536862989] = -219021312;
  v3[536862990] = 62194;
  v3[536862992] = -219021312;
  v3[536862993] = 62194;
  v3[536862995] = -219021312;
  v3[536862996] = 62194;
  v3[536862998] = -219021312;
  v3[536862999] = 62194;
  v3[536863001] = -219021312;
  v3[536863002] = 62194;
  v3[536863004] = -219021312;
  v3[536863005] = 62194;
  v3[536863007] = -219021312;
  v3[536863008] = 62194;
  v3[536863010] = -219021312;
  v3[536863011] = 62194;
  v3[536863013] = -219021312;
  v3[536863014] = 62194;
  v3[536863016] = -219021312;
  v3[536863017] = 62194;
  v3[536863019] = -219021312;
  v3[536863020] = 62194;
  v3[536863022] = -219021312;
  v3[536863023] = 62194;
  v3[536863025] = -219021312;
  v3[536863026] = 62194;
  v3[536863028] = -219021312;
  v3[536863029] = 62194;
  v3[536863031] = -219021312;
  v3[536863032] = 62194;
  v3[536863034] = -219021312;
  v3[536863035] = 62194;
  v3[536863037] = -219021312;
  v3[536863038] = 62194;
  v3[536863040] = -219021312;
  v3[536863041] = 62194;
  v3[536863043] = -219021312;
  v3[536863044] = 62194;
  v3[536863046] = -219021312;
  v3[536863047] = 62194;
  v3[536863049] = -219021312;
  v3[536863050] = 62194;
  v3[536863052] = -219021312;
  v3[536863053] = 62194;
  v3[536863055] = -219021312;
  v3[536863056] = 62194;
  v3[536863058] = -219021312;
  v3[536863059] = 62194;
  v3[536863061] = -219021312;
  v3[536863062] = 62194;
  v3[536863064] = -219021312;
  v3[536863065] = 62194;
  v3[536863067] = -219021312;
  v3[536863068] = 62194;
  v3[536863070] = -219021312;
  v3[536863071] = 62194;
  v3[536863073] = -219021312;
  v3[536863074] = 62194;
  v3[536863076] = -219021312;
  v3[536863077] = 62194;
  v3[536863079] = -219021312;
  v3[536863080] = 62194;
  v3[536863082] = -219021312;
  v3[536863083] = 62194;
  v3[536863085] = -219021312;
  v3[536863086] = 62194;
  v3[536863088] = -219021312;
  v3[536863089] = 62194;
  v3[536863091] = -219021312;
  v3[536863092] = 62194;
  v3[536863094] = -219021312;
  v3[536863095] = 62194;
  v3[536863097] = -219021312;
  v3[536863098] = 62194;
  v3[536863100] = -219021312;
  v3[536863101] = 62194;
  v3[536863103] = -219021312;
  v3[536863104] = 62194;
  v3[536863106] = -219021312;
  v3[536863107] = 62194;
  v3[536863109] = -219021312;
  v3[536863110] = 62194;
  v3[536863112] = -219021312;
  v3[536863113] = 62194;
  v3[536863115] = -219021312;
  v3[536863116] = 62194;
  v3[536863118] = -219021312;
  v3[536863119] = 62194;
  v3[536863121] = -219021312;
  v3[536863122] = 62194;
  v3[536863124] = -219021312;
  v3[536863125] = 62194;
  v3[536863127] = -219021312;
  v3[536863128] = 62194;
  v3[536863130] = -219021312;
  v3[536863131] = 62194;
  v3[536863133] = -219021312;
  v3[536863134] = 62194;
  v3[536863136] = -219021312;
  v3[536863137] = 62194;
  v3[536863139] = -219021312;
  v3[536863140] = 62194;
  v3[536863142] = -219021312;
  v3[536863143] = 62194;
  v3[536863145] = -219021312;
  v3[536863146] = 62194;
  v3[536863148] = -219021312;
  v3[536863149] = 62194;
  v3[536863151] = -219021312;
  v3[536863152] = 62194;
  v3[536863154] = -219021312;
  v3[536863155] = 62194;
  v3[536863157] = -219021312;
  v3[536863158] = 62194;
  v3[536863160] = -219021312;
  v3[536863161] = 62194;
  v3[536863163] = -219021312;
  v3[536863164] = 62194;
  v3[536863166] = -219021312;
  v3[536863167] = 62194;
  v3[536863169] = -219021312;
  v3[536863170] = 62194;
  v3[536863172] = -219021312;
  v3[536863173] = 62194;
  v3[536863175] = -219021312;
  v3[536863176] = 62194;
  v3[536863178] = -219021312;
  v3[536863179] = 62194;
  v3[536863181] = -219021312;
  v3[536863182] = 62194;
  v3[536863184] = -219021312;
  v3[536863185] = 62194;
  v3[536863187] = -219021312;
  v3[536863188] = 62194;
  v3[536863190] = -219021312;
  v3[536863191] = 62194;
  v3[536863193] = -219021312;
  v3[536863194] = 62194;
  v3[536863196] = -219021312;
  v3[536863197] = 62194;
  v3[536863199] = -219021312;
  v3[536863200] = 62194;
  v3[536863202] = -219021312;
  v3[536863203] = 62194;
  v3[536863205] = -219021312;
  v3[536863206] = 62194;
  v3[536863208] = -219021312;
  v3[536863209] = 62194;
  v3[536863211] = -219021312;
  v3[536863212] = 62194;
  v3[536863214] = -219021312;
  v3[536863215] = 62194;
  v3[536863217] = -219021312;
  v3[536863218] = 62194;
  v3[536863220] = -219021312;
  v3[536863221] = 62194;
  v3[536863223] = -219021312;
  v3[536863224] = 62194;
  v3[536863226] = -219021312;
  v3[536863227] = 62194;
  v3[536863229] = -219021312;
  v3[536863230] = 62194;
  v3[536863232] = -219021312;
  v3[536863233] = 62194;
  v3[536863235] = -219021312;
  v3[536863236] = 62194;
  v3[536863238] = -219021312;
  v3[536863239] = 62194;
  v3[536863241] = -219021312;
  v3[536863242] = 62194;
  v3[536863244] = -219021312;
  v3[536863245] = 62194;
  v3[536863247] = -219021312;
  v3[536863248] = 62194;
  v3[536863250] = -219021312;
  v3[536863251] = 62194;
  v3[536863253] = -219021312;
  v3[536863254] = 62194;
  v3[536863256] = -219021312;
  v3[536863257] = 62194;
  v3[536863259] = -219021312;
  v3[536863260] = 62194;
  v3[536863262] = -219021312;
  v3[536863263] = 62194;
  v3[536863265] = -219021312;
  v3[536863266] = 62194;
  v3[536863268] = -219021312;
  v3[536863269] = 62194;
  v3[536863271] = -219021312;
  v3[536863272] = 62194;
  v3[536863274] = -219021312;
  v3[536863275] = 62194;
  v3[536863277] = -219021312;
  v3[536863278] = 62194;
  v3[536863280] = -219021312;
  v3[536863281] = 62194;
  v3[536863283] = -219021312;
  v3[536863284] = 62194;
  v3[536863286] = -219021312;
  v3[536863287] = 62194;
  v3[536863289] = -219021312;
  v3[536863290] = 62194;
  v3[536863292] = -219021312;
  v3[536863293] = 62194;
  v3[536863295] = -219021312;
  v3[536863296] = 62194;
  v3[536863298] = -219021312;
  v3[536863299] = 62194;
  v3[536863301] = -219021312;
  v3[536863302] = 62194;
  v3[536863304] = -219021312;
  v3[536863305] = 62194;
  v3[536863307] = -219021312;
  v3[536863308] = 62194;
  v3[536863310] = -219021312;
  v3[536863311] = 62194;
  v3[536863313] = -219021312;
  v3[536863314] = 62194;
  v3[536863316] = -219021312;
  v3[536863317] = 62194;
  v3[536863319] = -219021312;
  v3[536863320] = 62194;
  v3[536863322] = -219021312;
  v3[536863323] = 62194;
  v3[536863325] = -219021312;
  v3[536863326] = 62194;
  v3[536863328] = -219021312;
  v3[536863329] = 62194;
  v3[536863331] = -219021312;
  v3[536863332] = 62194;
  v3[536863334] = -219021312;
  v3[536863335] = 62194;
  v3[536863337] = -219021312;
  v3[536863338] = 62194;
  v3[536863340] = -219021312;
  v3[536863341] = 62194;
  v3[536863343] = -219021312;
  v3[536863344] = 62194;
  v3[536863346] = -219021312;
  v3[536863347] = 62194;
  v3[536863349] = -219021312;
  v3[536863350] = 62194;
  v3[536863352] = -219021312;
  v3[536863353] = 62194;
  v3[536863355] = -219021312;
  v3[536863356] = 62194;
  v3[536863358] = -219021312;
  v3[536863359] = 62194;
  v3[536863361] = -219021312;
  v3[536863362] = 62194;
  v3[536863364] = -219021312;
  v3[536863365] = 62194;
  v3[536863367] = -219021312;
  v3[536863368] = 62194;
  v3[536863370] = -219021312;
  v3[536863371] = 62194;
  v3[536863373] = -219021312;
  v3[536863374] = 62194;
  v3[536863376] = -219021312;
  v3[536863377] = 62194;
  v3[536863379] = -219021312;
  v3[536863380] = 62194;
  v3[536863382] = -219021312;
  v3[536863383] = 62194;
  v3[536863385] = -219021312;
  v3[536863386] = 62194;
  v3[536863388] = -219021312;
  v3[536863389] = 62194;
  v3[536863391] = -219021312;
  v3[536863392] = 62194;
  v3[536863394] = -219021312;
  v3[536863395] = 62194;
  v3[536863397] = -219021312;
  v3[536863398] = 62194;
  v3[536863400] = -219021312;
  v3[536863401] = 62194;
  v3[536863403] = -219021312;
  v3[536863404] = 62194;
  v3[536863406] = -219021312;
  v3[536863407] = 62194;
  v3[536863409] = -219021312;
  v3[536863410] = 62194;
  v3[536863412] = -219021312;
  v3[536863413] = 62194;
  v3[536863415] = -219021312;
  v3[536863416] = 62194;
  v3[536863418] = -219021312;
  v3[536863419] = 62194;
  v3[536863421] = -219021312;
  v3[536863422] = 62194;
  v3[536863424] = -219021312;
  v3[536863425] = 62194;
  v3[536863877] = -218103808;
  v3[536863878] = -202116109;
  v3[536863879] = -202116109;
  v3[536863880] = -202116109;
  v3[536863881] = -202116109;
  v3[536863882] = -202116109;
  v3[536863883] = -202116109;
  v3[536863884] = -202116109;
  v3[536863885] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getItemLimitTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getItemLimitTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3280),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[16])"ITEM_LIMIT_NONE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 22576),
      (data::ItemLimitType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 3280));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[21],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3376),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[21])"ITEM_LIMIT_UNLIMITED");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 22648),
      (data::ItemLimitType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 3376));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[14],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3472),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[14])"ITEM_LIMIT_GM");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 22720),
      (data::ItemLimitType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 3472));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3568),
      (const char (*)[19])byte_1A655160,
      (const char (*)[17])"ITEM_LIMIT_QUEST");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 22792),
      (data::ItemLimitType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 3568));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3664),
      (const char (*)[22])byte_1A6551A0,
      (const char (*)[24])"ITEM_LIMIT_CITY_UPGRADE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 22864),
      (data::ItemLimitType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 3664));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3760),
      (const char (*)[22])byte_1A6551E0,
      (const char (*)[30])"ITEM_LIMIT_UNLOCK_TRANS_POINT");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 22936),
      (data::ItemLimitType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 3760));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3856),
      (const char (*)[19])byte_1A655220,
      (const char (*)[26])"ITEM_LIMIT_UNLOCK_DUNGEON");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23008),
      (data::ItemLimitType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 3856));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 3952),
      (const char (*)[19])byte_1A655260,
      (const char (*)[25])"ITEM_LIMIT_INVESTIGATION");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23080),
      (data::ItemLimitType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 3952));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4048),
      (const char (*)[25])byte_1A6552A0,
      (const char (*)[32])"ITEM_LIMIT_PLAYER_LEVEL_UPGRADE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23152),
      (data::ItemLimitType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 4048));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4144),
      (const char (*)[25])byte_1A6552E0,
      (const char (*)[28])"ITEM_LIMIT_PUSH_TIPS_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23224),
      (data::ItemLimitType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 4144));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4240),
      (const char (*)[13])byte_1A655320,
      (const char (*)[32])"ITEM_LIMIT_AVATAR_FETTER_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23296),
      (data::ItemLimitType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 4240));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4336),
      (const char (*)[28])byte_1A655360,
      (const char (*)[43])"ITEM_LIMIT_WORLD_AREA_EXPLORE_EVENT_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23368),
      (data::ItemLimitType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 4336));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4432),
      (const char (*)[22])byte_1A6553A0,
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_SEA_LAMP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23440),
      (data::ItemLimitType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 4432));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 13;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4528),
      (const char (*)[23])byte_1A6553E0,
      (const char (*)[35])"ITEM_LIMIT_BATTLE_PASS_PAID_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23512),
      (data::ItemLimitType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 4528));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 14;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4624),
      (const char (*)[25])byte_1A655420,
      (const char (*)[33])"ITEM_LIMIT_ONEOFF_BIG_WORLD_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23584),
      (data::ItemLimitType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 4624));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, v1 + 288);
    *(_DWORD *)(v1 + 304) = 15;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4720),
      (const char (*)[13])byte_1A655460,
      (const char (*)[26])"ITEM_LIMIT_GAMEPLAY_NICHE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23656),
      (data::ItemLimitType *)(v1 + 304),
      (const std::pair<std::string,std::string > *)(v1 + 4720));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, v1 + 304);
    *(_DWORD *)(v1 + 320) = 16;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4816),
      (const char (*)[22])byte_1A6554A0,
      (const char (*)[31])"ITEM_LIMIT_ONEOFF_DUNGEON_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23728),
      (data::ItemLimitType *)(v1 + 320),
      (const std::pair<std::string,std::string > *)(v1 + 4816));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, v1 + 320);
    *(_DWORD *)(v1 + 336) = 17;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 4912),
      (const char (*)[25])byte_1A6554E0,
      (const char (*)[31])"ITEM_LIMIT_ONEOFF_PLUNDER_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23800),
      (data::ItemLimitType *)(v1 + 336),
      (const std::pair<std::string,std::string > *)(v1 + 4912));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, v1 + 336);
    *(_DWORD *)(v1 + 352) = 18;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5008),
      (const char (*)[22])byte_1A655520,
      (const char (*)[32])"ITEM_LIMIT_ONEOFF_SUBFIELD_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23872),
      (data::ItemLimitType *)(v1 + 352),
      (const std::pair<std::string,std::string > *)(v1 + 5008));
    if ( *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 368, v1 + 352);
    *(_DWORD *)(v1 + 368) = 19;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5104),
      (const char (*)[22])byte_1A655560,
      (const char (*)[27])"ITEM_LIMIT_BIG_WORLD_CHEST");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 23944),
      (data::ItemLimitType *)(v1 + 368),
      (const std::pair<std::string,std::string > *)(v1 + 5104));
    if ( *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 384, v1 + 368);
    *(_DWORD *)(v1 + 384) = 20;
    std::pair<std::string,std::string>::pair<char const(&)[18],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5200),
      (const char (*)[18])byte_1A6555A0,
      (const char (*)[28])"ITEM_LIMIT_GACHA_TOKEN_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24016),
      (data::ItemLimitType *)(v1 + 384),
      (const std::pair<std::string,std::string > *)(v1 + 5200));
    if ( *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 400, v1 + 384);
    *(_DWORD *)(v1 + 400) = 22;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5296),
      (const char (*)[22])byte_1A6555E0,
      (const char (*)[32])"ITEM_LIMIT_DAILY_BIG_WORLD_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24088),
      (data::ItemLimitType *)(v1 + 400),
      (const std::pair<std::string,std::string > *)(v1 + 5296));
    if ( *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 416, v1 + 400);
    *(_DWORD *)(v1 + 416) = 23;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5392),
      (const char (*)[19])byte_1A655620,
      (const char (*)[30])"ITEM_LIMIT_DAILY_DUNGEON_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24160),
      (data::ItemLimitType *)(v1 + 416),
      (const std::pair<std::string,std::string > *)(v1 + 5392));
    if ( *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 432, v1 + 416);
    *(_DWORD *)(v1 + 432) = 24;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5488),
      (const char (*)[22])byte_1A655660,
      (const char (*)[30])"ITEM_LIMIT_DAILY_PLUNDER_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24232),
      (data::ItemLimitType *)(v1 + 432),
      (const std::pair<std::string,std::string > *)(v1 + 5488));
    if ( *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 448, v1 + 432);
    *(_DWORD *)(v1 + 448) = 25;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5584),
      (const char (*)[19])byte_1A6556A0,
      (const char (*)[31])"ITEM_LIMIT_DAILY_SUBFIELD_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24304),
      (data::ItemLimitType *)(v1 + 448),
      (const std::pair<std::string,std::string > *)(v1 + 5584));
    if ( *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 464, v1 + 448);
    *(_DWORD *)(v1 + 464) = 26;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5680),
      (const char (*)[22])byte_1A6556E0,
      (const char (*)[31])"ITEM_LIMIT_DAILY_SEA_LAMP_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24376),
      (data::ItemLimitType *)(v1 + 464),
      (const std::pair<std::string,std::string > *)(v1 + 5680));
    if ( *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 480, v1 + 464);
    *(_DWORD *)(v1 + 480) = 27;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5776),
      (const char (*)[19])byte_1A655720,
      (const char (*)[26])"ITEM_LIMIT_NORMAL_DUNGEON");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24448),
      (data::ItemLimitType *)(v1 + 480),
      (const std::pair<std::string,std::string > *)(v1 + 5776));
    if ( *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 496, v1 + 480);
    *(_DWORD *)(v1 + 496) = 28;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5872),
      (const char (*)[19])byte_1A655760,
      (const char (*)[22])"ITEM_LIMIT_DAILY_TASK");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24520),
      (data::ItemLimitType *)(v1 + 496),
      (const std::pair<std::string,std::string > *)(v1 + 5872));
    if ( *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 512, v1 + 496);
    *(_DWORD *)(v1 + 512) = 29;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 5968),
      (const char (*)[25])byte_1A6557A0,
      (const char (*)[28])"ITEM_LIMIT_DAILY_TASK_SCORE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24592),
      (data::ItemLimitType *)(v1 + 512),
      (const std::pair<std::string,std::string > *)(v1 + 5968));
    if ( *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 528, v1 + 512);
    *(_DWORD *)(v1 + 528) = 30;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6064),
      (const char (*)[19])byte_1A6557E0,
      (const char (*)[26])"ITEM_LIMIT_RAND_TASK_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24664),
      (data::ItemLimitType *)(v1 + 528),
      (const std::pair<std::string,std::string > *)(v1 + 6064));
    if ( *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 544, v1 + 528);
    *(_DWORD *)(v1 + 544) = 31;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6160),
      (const char (*)[19])byte_1A655820,
      (const char (*)[22])"ITEM_LIMIT_EXPEDITION");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24736),
      (data::ItemLimitType *)(v1 + 544),
      (const std::pair<std::string,std::string > *)(v1 + 6160));
    if ( *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 560, v1 + 544);
    *(_DWORD *)(v1 + 560) = 32;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6256),
      (const char (*)[13])byte_1A655860,
      (const char (*)[29])"ITEM_LIMIT_SMALL_MONSTER_DIE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24808),
      (data::ItemLimitType *)(v1 + 560),
      (const std::pair<std::string,std::string > *)(v1 + 6256));
    if ( *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 576, v1 + 560);
    *(_DWORD *)(v1 + 576) = 33;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6352),
      (const char (*)[13])byte_1A6558A0,
      (const char (*)[29])"ITEM_LIMIT_ELITE_MONSTER_DIE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24880),
      (data::ItemLimitType *)(v1 + 576),
      (const std::pair<std::string,std::string > *)(v1 + 6352));
    if ( *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 592, v1 + 576);
    *(_DWORD *)(v1 + 592) = 34;
    std::pair<std::string,std::string>::pair<char const(&)[11],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6448),
      (const char (*)[11])byte_1A6558E0,
      (const char (*)[28])"ITEM_LIMIT_BOSS_MONSTER_DIE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 24952),
      (data::ItemLimitType *)(v1 + 592),
      (const std::pair<std::string,std::string > *)(v1 + 6448));
    if ( *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 608, v1 + 592);
    *(_DWORD *)(v1 + 608) = 35;
    std::pair<std::string,std::string>::pair<char const(&)[14],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6544),
      (const char (*)[14])byte_1A655920,
      (const char (*)[32])"ITEM_LIMIT_BIG_BOSS_MONSTER_DIE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25024),
      (data::ItemLimitType *)(v1 + 608),
      (const std::pair<std::string,std::string > *)(v1 + 6544));
    if ( *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 624, v1 + 608);
    *(_DWORD *)(v1 + 624) = 36;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6640),
      (const char (*)[16])byte_1A655960,
      (const char (*)[32])"ITEM_LIMIT_SMALL_ENV_ANIMAL_DIE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25096),
      (data::ItemLimitType *)(v1 + 624),
      (const std::pair<std::string,std::string > *)(v1 + 6640));
    if ( *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 640, v1 + 624);
    *(_DWORD *)(v1 + 640) = 37;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6736),
      (const char (*)[19])byte_1A6559A0,
      (const char (*)[30])"ITEM_LIMIT_MONSTER_EXCEL_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25168),
      (data::ItemLimitType *)(v1 + 640),
      (const std::pair<std::string,std::string > *)(v1 + 6736));
    if ( *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 656, v1 + 640);
    *(_DWORD *)(v1 + 656) = 38;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6832),
      (const char (*)[19])byte_1A6559E0,
      (const char (*)[35])"ITEM_LIMIT_REPEATABLE_QUEST_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25240),
      (data::ItemLimitType *)(v1 + 656),
      (const std::pair<std::string,std::string > *)(v1 + 6832));
    if ( *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 672, v1 + 656);
    *(_DWORD *)(v1 + 672) = 39;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 6928),
      (const char (*)[22])byte_1A655A20,
      (const char (*)[22])"ITEM_LIMIT_ENV_ANIMAL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25312),
      (data::ItemLimitType *)(v1 + 672),
      (const std::pair<std::string,std::string > *)(v1 + 6928));
    if ( *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 688, v1 + 672);
    *(_DWORD *)(v1 + 688) = 40;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7024),
      (const char (*)[16])byte_1A655A60,
      (const char (*)[18])"ITEM_LIMIT_GATHER");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25384),
      (data::ItemLimitType *)(v1 + 688),
      (const std::pair<std::string,std::string > *)(v1 + 7024));
    if ( *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 704, v1 + 688);
    *(_DWORD *)(v1 + 704) = 41;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7120),
      (const char (*)[19])byte_1A655AA0,
      (const char (*)[36])"ITEM_LIMIT_OPERATION_DAILY_ACTIVITY");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25456),
      (data::ItemLimitType *)(v1 + 704),
      (const std::pair<std::string,std::string > *)(v1 + 7120));
    if ( *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 720, v1 + 704);
    *(_DWORD *)(v1 + 720) = 42;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7216),
      (const char (*)[25])byte_1A655AE0,
      (const char (*)[26])"ITEM_LIMIT_QUEST_ADD_ITEM");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25528),
      (data::ItemLimitType *)(v1 + 720),
      (const std::pair<std::string,std::string > *)(v1 + 7216));
    if ( *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 736, v1 + 720);
    *(_DWORD *)(v1 + 736) = 43;
    std::pair<std::string,std::string>::pair<char const(&)[24],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7312),
      (const char (*)[24])byte_1A655B20,
      (const char (*)[26])"ITEM_LIMIT_BONUS_ACTIVITY");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25600),
      (data::ItemLimitType *)(v1 + 736),
      (const std::pair<std::string,std::string > *)(v1 + 7312));
    if ( *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 752, v1 + 736);
    *(_DWORD *)(v1 + 752) = 44;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7408),
      (const char (*)[19])byte_1A655B60,
      (const char (*)[25])"ITEM_LIMIT_TOWER_MONTHLY");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25672),
      (data::ItemLimitType *)(v1 + 752),
      (const std::pair<std::string,std::string > *)(v1 + 7408));
    if ( *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 768, v1 + 752);
    *(_DWORD *)(v1 + 768) = 45;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7504),
      (const char (*)[23])byte_1A655BA0,
      (const char (*)[36])"ITEM_LIMIT_BATTLE_PASS_LEVEL_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25744),
      (data::ItemLimitType *)(v1 + 768),
      (const std::pair<std::string,std::string > *)(v1 + 7504));
    if ( *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 784, v1 + 768);
    *(_DWORD *)(v1 + 784) = 46;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7600),
      (const char (*)[19])byte_1A655BE0,
      (const char (*)[19])"ITEM_LIMIT_SIGN_IN");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25816),
      (data::ItemLimitType *)(v1 + 784),
      (const std::pair<std::string,std::string > *)(v1 + 7600));
    if ( *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 800, v1 + 784);
    *(_DWORD *)(v1 + 800) = 47;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7696),
      (const char (*)[7])byte_1A655C20,
      (const char (*)[17])"ITEM_LIMIT_GACHA");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25888),
      (data::ItemLimitType *)(v1 + 800),
      (const std::pair<std::string,std::string > *)(v1 + 7696));
    if ( *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 816, v1 + 800);
    *(_DWORD *)(v1 + 816) = 48;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7792),
      (const char (*)[13])byte_1A655C60,
      (const char (*)[16])"ITEM_LIMIT_SHOP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 25960),
      (data::ItemLimitType *)(v1 + 816),
      (const std::pair<std::string,std::string > *)(v1 + 7792));
    if ( *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 832, v1 + 816);
    *(_DWORD *)(v1 + 832) = 49;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[16],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7888),
      (const char (*)[13])byte_1A655CA0,
      (const char (*)[16])"ITEM_LIMIT_COOK");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26032),
      (data::ItemLimitType *)(v1 + 832),
      (const std::pair<std::string,std::string > *)(v1 + 7888));
    if ( *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 848, v1 + 832);
    *(_DWORD *)(v1 + 848) = 50;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 7984),
      (const char (*)[13])byte_1A655CE0,
      (const char (*)[20])"ITEM_LIMIT_COMPOUND");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26104),
      (data::ItemLimitType *)(v1 + 848),
      (const std::pair<std::string,std::string > *)(v1 + 7984));
    if ( *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 864, v1 + 848);
    *(_DWORD *)(v1 + 864) = 51;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8080),
      (const char (*)[7])byte_1A655D20,
      (const char (*)[19])"ITEM_LIMIT_COMBINE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26176),
      (data::ItemLimitType *)(v1 + 864),
      (const std::pair<std::string,std::string > *)(v1 + 8080));
    if ( *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 880, v1 + 864);
    *(_DWORD *)(v1 + 880) = 52;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[17],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8176),
      (const char (*)[7])byte_1A655D60,
      (const char (*)[17])"ITEM_LIMIT_FORGE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26248),
      (data::ItemLimitType *)(v1 + 880),
      (const std::pair<std::string,std::string > *)(v1 + 8176));
    if ( *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 896, v1 + 880);
    *(_DWORD *)(v1 + 896) = 53;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8272),
      (const char (*)[25])byte_1A655DA0,
      (const char (*)[24])"ITEM_LIMIT_RANDOM_CHEST");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26320),
      (data::ItemLimitType *)(v1 + 896),
      (const std::pair<std::string,std::string > *)(v1 + 8272));
    if ( *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 912, v1 + 896);
    *(_DWORD *)(v1 + 912) = 54;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[20],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8368),
      (const char (*)[19])byte_1A655DE0,
      (const char (*)[20])"ITEM_LIMIT_USE_ITEM");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26392),
      (data::ItemLimitType *)(v1 + 912),
      (const std::pair<std::string,std::string > *)(v1 + 8368));
    if ( *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 928, v1 + 912);
    *(_DWORD *)(v1 + 928) = 55;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8464),
      (const char (*)[19])byte_1A655E20,
      (const char (*)[27])"ITEM_LIMIT_USE_ITEM_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26464),
      (data::ItemLimitType *)(v1 + 928),
      (const std::pair<std::string,std::string > *)(v1 + 8464));
    if ( *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 944, v1 + 928);
    *(_DWORD *)(v1 + 944) = 56;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8560),
      (const char (*)[25])byte_1A655E60,
      (const char (*)[30])"ITEM_LIMIT_BLOSSOM_CHEST_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26536),
      (data::ItemLimitType *)(v1 + 944),
      (const std::pair<std::string,std::string > *)(v1 + 8560));
    if ( *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 960, v1 + 944);
    *(_DWORD *)(v1 + 960) = 57;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8656),
      (const char (*)[19])byte_1A655EA0,
      (const char (*)[24])"ITEM_LIMIT_MP_PLAY_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26608),
      (data::ItemLimitType *)(v1 + 960),
      (const std::pair<std::string,std::string > *)(v1 + 8656));
    if ( *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 976, v1 + 960);
    *(_DWORD *)(v1 + 976) = 58;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8752),
      (const char (*)[13])byte_1A655EE0,
      (const char (*)[22])"ITEM_LIMIT_FORGE_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26680),
      (data::ItemLimitType *)(v1 + 976),
      (const std::pair<std::string,std::string > *)(v1 + 8752));
    if ( *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 992, v1 + 976);
    *(_DWORD *)(v1 + 992) = 59;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8848),
      (const char (*)[31])byte_1A655F20,
      (const char (*)[33])"ITEM_LIMIT_MP_PLAY_CRUCIBLE_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26752),
      (data::ItemLimitType *)(v1 + 992),
      (const std::pair<std::string,std::string > *)(v1 + 8848));
    if ( *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1008, v1 + 992);
    *(_DWORD *)(v1 + 1008) = 60;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 8944),
      (const char (*)[25])byte_1A655F60,
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_CRUCIBLE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26824),
      (data::ItemLimitType *)(v1 + 1008),
      (const std::pair<std::string,std::string > *)(v1 + 8944));
    if ( *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1024, v1 + 1008);
    *(_DWORD *)(v1 + 1024) = 61;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9040),
      (const char (*)[13])byte_1A655FA0,
      (const char (*)[27])"ITEM_LIMIT_ACTIVITY_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26896),
      (data::ItemLimitType *)(v1 + 1024),
      (const std::pair<std::string,std::string > *)(v1 + 9040));
    if ( *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1040, v1 + 1024);
    *(_DWORD *)(v1 + 1040) = 62;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9136),
      (const char (*)[25])byte_1A655FE0,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_TRIAL_AVATAR");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 26968),
      (data::ItemLimitType *)(v1 + 1040),
      (const std::pair<std::string,std::string > *)(v1 + 9136));
    if ( *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1056, v1 + 1040);
    *(_DWORD *)(v1 + 1056) = 63;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9232),
      (const char (*)[25])byte_1A656020,
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_SALESMAN");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27040),
      (data::ItemLimitType *)(v1 + 1056),
      (const std::pair<std::string,std::string > *)(v1 + 9232));
    if ( *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1072, v1 + 1056);
    *(_DWORD *)(v1 + 1072) = 64;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9328),
      (const char (*)[13])byte_1A656060,
      (const char (*)[18])"ITEM_LIMIT_REBATE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27112),
      (data::ItemLimitType *)(v1 + 1072),
      (const std::pair<std::string,std::string > *)(v1 + 9328));
    if ( *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1088, v1 + 1072);
    *(_DWORD *)(v1 + 1088) = 65;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9424),
      (const char (*)[7])byte_1A6560A0,
      (const char (*)[22])"ITEM_LIMIT_MONTH_CARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27184),
      (data::ItemLimitType *)(v1 + 1088),
      (const std::pair<std::string,std::string > *)(v1 + 9424));
    if ( *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1104, v1 + 1088);
    *(_DWORD *)(v1 + 1104) = 67;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9520),
      (const char (*)[13])byte_1A6560E0,
      (const char (*)[28])"ITEM_LIMIT_BIRTHDAY_BENEFIT");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27256),
      (data::ItemLimitType *)(v1 + 1104),
      (const std::pair<std::string,std::string > *)(v1 + 9520));
    if ( *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1120, v1 + 1104);
    *(_DWORD *)(v1 + 1120) = 68;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9616),
      (const char (*)[13])byte_1A656120,
      (const char (*)[30])"ITEM_LIMIT_ACHIEVEMENT_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27328),
      (data::ItemLimitType *)(v1 + 1120),
      (const std::pair<std::string,std::string > *)(v1 + 9616));
    if ( *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1136, v1 + 1120);
    *(_DWORD *)(v1 + 1136) = 69;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9712),
      (const char (*)[22])byte_1A656160,
      (const char (*)[35])"ITEM_LIMIT_ACHIEVEMENT_GOAL_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27400),
      (data::ItemLimitType *)(v1 + 1136),
      (const std::pair<std::string,std::string > *)(v1 + 9712));
    if ( *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1152, v1 + 1136);
    *(_DWORD *)(v1 + 1152) = 70;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9808),
      (const char (*)[25])byte_1A6561A0,
      (const char (*)[35])"ITEM_LIMIT_DESTROY_RETURN_MATERIAL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27472),
      (data::ItemLimitType *)(v1 + 1152),
      (const std::pair<std::string,std::string > *)(v1 + 9808));
    if ( *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1168, v1 + 1152);
    *(_DWORD *)(v1 + 1168) = 71;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 9904),
      (const char (*)[22])byte_1A6561E0,
      (const char (*)[24])"ITEM_LIMIT_TOWER_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27544),
      (data::ItemLimitType *)(v1 + 1168),
      (const std::pair<std::string,std::string > *)(v1 + 9904));
    if ( *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1184, v1 + 1168);
    *(_DWORD *)(v1 + 1184) = 72;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10000),
      (const char (*)[13])byte_1A656220,
      (const char (*)[24])"ITEM_LIMIT_SHARE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27616),
      (data::ItemLimitType *)(v1 + 1184),
      (const std::pair<std::string,std::string > *)(v1 + 10000));
    if ( *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1200, v1 + 1184);
    *(_DWORD *)(v1 + 1200) = 73;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10096),
      (const char (*)[19])byte_1A656260,
      (const char (*)[31])"ITEM_LIMIT_FETTER_LEVEL_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27688),
      (data::ItemLimitType *)(v1 + 1200),
      (const std::pair<std::string,std::string > *)(v1 + 10096));
    if ( *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1216, v1 + 1200);
    *(_DWORD *)(v1 + 1216) = 74;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10192),
      (const char (*)[19])byte_1A6562A0,
      (const char (*)[37])"ITEM_LIMIT_DUNGEON_FIRST_PASS_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27760),
      (data::ItemLimitType *)(v1 + 1216),
      (const std::pair<std::string,std::string > *)(v1 + 10192));
    if ( *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1232, v1 + 1216);
    *(_DWORD *)(v1 + 1232) = 75;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10288),
      (const char (*)[19])byte_1A6562E0,
      (const char (*)[32])"ITEM_LIMIT_CODEX_LEVELUP_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27832),
      (data::ItemLimitType *)(v1 + 1232),
      (const std::pair<std::string,std::string > *)(v1 + 10288));
    if ( *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1248, v1 + 1232);
    *(_DWORD *)(v1 + 1248) = 76;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10384),
      (const char (*)[28])byte_1A656320,
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_DELIVERY");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27904),
      (data::ItemLimitType *)(v1 + 1248),
      (const std::pair<std::string,std::string > *)(v1 + 10384));
    if ( *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1264, v1 + 1248);
    *(_DWORD *)(v1 + 1264) = 77;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10480),
      (const char (*)[25])byte_1A656360,
      (const char (*)[33])"ITEM_LIMIT_CITY_REPUTATION_LEVEL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 27976),
      (data::ItemLimitType *)(v1 + 1264),
      (const std::pair<std::string,std::string > *)(v1 + 10480));
    if ( *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1280, v1 + 1264);
    *(_DWORD *)(v1 + 1280) = 78;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10576),
      (const char (*)[25])byte_1A6563A0,
      (const char (*)[33])"ITEM_LIMIT_CITY_REPUTATION_QUEST");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28048),
      (data::ItemLimitType *)(v1 + 1280),
      (const std::pair<std::string,std::string > *)(v1 + 10576));
    if ( *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1296, v1 + 1280);
    *(_DWORD *)(v1 + 1296) = 79;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[42],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10672),
      (const char (*)[25])byte_1A6563E0,
      (const char (*)[42])"ITEM_LIMIT_UPGRADE_WEAPON_RETURN_MATERIAL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28120),
      (data::ItemLimitType *)(v1 + 1296),
      (const std::pair<std::string,std::string > *)(v1 + 10672));
    if ( *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1312, v1 + 1296);
    *(_DWORD *)(v1 + 1312) = 80;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10768),
      (const char (*)[31])byte_1A656420,
      (const char (*)[35])"ITEM_LIMIT_CITY_REPUTATION_REQUEST");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28192),
      (data::ItemLimitType *)(v1 + 1312),
      (const std::pair<std::string,std::string > *)(v1 + 10768));
    if ( *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1328, v1 + 1312);
    *(_DWORD *)(v1 + 1328) = 81;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10864),
      (const char (*)[19])byte_1A656460,
      (const char (*)[26])"ITEM_LIMIT_HUNTING_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28264),
      (data::ItemLimitType *)(v1 + 1328),
      (const std::pair<std::string,std::string > *)(v1 + 10864));
    if ( *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1344, v1 + 1328);
    *(_DWORD *)(v1 + 1344) = 82;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 10960),
      (const char (*)[25])byte_1A6564A0,
      (const char (*)[35])"ITEM_LIMIT_CITY_REPUTATION_EXPLORE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28336),
      (data::ItemLimitType *)(v1 + 1344),
      (const std::pair<std::string,std::string > *)(v1 + 10960));
    if ( *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1360, v1 + 1344);
    *(_DWORD *)(v1 + 1360) = 83;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11056),
      (const char (*)[25])byte_1A6564E0,
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_FLIGHT_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28408),
      (data::ItemLimitType *)(v1 + 1360),
      (const std::pair<std::string,std::string > *)(v1 + 11056));
    if ( *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1376, v1 + 1360);
    *(_DWORD *)(v1 + 1376) = 84;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11152),
      (const char (*)[28])byte_1A656520,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_ASTER_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28480),
      (data::ItemLimitType *)(v1 + 1376),
      (const std::pair<std::string,std::string > *)(v1 + 11152));
    if ( *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1392, v1 + 1376);
    *(_DWORD *)(v1 + 1392) = 85;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11248),
      (const char (*)[28])byte_1A656560,
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_ASTER_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28552),
      (data::ItemLimitType *)(v1 + 1392),
      (const std::pair<std::string,std::string > *)(v1 + 11248));
    if ( *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1408, v1 + 1392);
    *(_DWORD *)(v1 + 1408) = 86;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11344),
      (const char (*)[28])byte_1A6565A0,
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_DRGAON_SPINE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28624),
      (data::ItemLimitType *)(v1 + 1408),
      (const std::pair<std::string,std::string > *)(v1 + 11344));
    if ( *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1424, v1 + 1408);
    *(_DWORD *)(v1 + 1424) = 87;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11440),
      (const char (*)[28])byte_1A6565E0,
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_DRAGON_SPINE_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28696),
      (data::ItemLimitType *)(v1 + 1424),
      (const std::pair<std::string,std::string > *)(v1 + 11440));
    if ( *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1440, v1 + 1424);
    *(_DWORD *)(v1 + 1440) = 88;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11536),
      (const char (*)[25])byte_1A656620,
      (const char (*)[35])"ITEM_LIMIT_SNOW_MOUNTAIN_TREE_TASK");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28768),
      (data::ItemLimitType *)(v1 + 1440),
      (const std::pair<std::string,std::string > *)(v1 + 11536));
    if ( *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1456, v1 + 1440);
    *(_DWORD *)(v1 + 1456) = 89;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11632),
      (const char (*)[25])byte_1A656660,
      (const char (*)[36])"ITEM_LIMIT_SNOW_MOUNTAIN_TREE_LEVEL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28840),
      (data::ItemLimitType *)(v1 + 1456),
      (const std::pair<std::string,std::string > *)(v1 + 11632));
    if ( *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1472, v1 + 1456);
    *(_DWORD *)(v1 + 1472) = 90;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11728),
      (const char (*)[31])byte_1A6566A0,
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_SALESMAN_CHEST_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28912),
      (data::ItemLimitType *)(v1 + 1472),
      (const std::pair<std::string,std::string > *)(v1 + 11728));
    if ( *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1488, v1 + 1472);
    *(_DWORD *)(v1 + 1488) = 91;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11824),
      (const char (*)[25])byte_1A6566E0,
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_EFFIGY_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 28984),
      (data::ItemLimitType *)(v1 + 1488),
      (const std::pair<std::string,std::string > *)(v1 + 11824));
    if ( *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1504, v1 + 1488);
    *(_DWORD *)(v1 + 1504) = 92;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 11920),
      (const char (*)[19])byte_1A656720,
      (const char (*)[26])"ITEM_LIMIT_REUNION_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29056),
      (data::ItemLimitType *)(v1 + 1504),
      (const std::pair<std::string,std::string > *)(v1 + 11920));
    if ( *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1520, v1 + 1504);
    *(_DWORD *)(v1 + 1520) = 93;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12016),
      (const char (*)[19])byte_1A656760,
      (const char (*)[33])"ITEM_LIMIT_AVATAR_PROMOTE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29128),
      (data::ItemLimitType *)(v1 + 1520),
      (const std::pair<std::string,std::string > *)(v1 + 12016));
    if ( *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1536, v1 + 1520);
    *(_DWORD *)(v1 + 1536) = 94;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12112),
      (const char (*)[34])byte_1A6567A0,
      (const char (*)[32])"ITEM_LIMIT_ACTIVITY_SALESMAN_MP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29200),
      (data::ItemLimitType *)(v1 + 1536),
      (const std::pair<std::string,std::string > *)(v1 + 12112));
    if ( *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1552, v1 + 1536);
    *(_DWORD *)(v1 + 1552) = 95;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12208),
      (const char (*)[22])byte_1A656800,
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_TREASURE_MAP_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29272),
      (data::ItemLimitType *)(v1 + 1552),
      (const std::pair<std::string,std::string > *)(v1 + 12208));
    if ( *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1568, v1 + 1552);
    *(_DWORD *)(v1 + 1568) = 96;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12304),
      (const char (*)[10])byte_1A656840,
      (const char (*)[22])"ITEM_LIMIT_RESIN_CARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29344),
      (data::ItemLimitType *)(v1 + 1568),
      (const std::pair<std::string,std::string > *)(v1 + 12304));
    if ( *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1584, v1 + 1568);
    *(_DWORD *)(v1 + 1584) = 97;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12400),
      (const char (*)[22])byte_1A656880,
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_BLESSING");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29416),
      (data::ItemLimitType *)(v1 + 1584),
      (const std::pair<std::string,std::string > *)(v1 + 12400));
    if ( *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1600, v1 + 1584);
    *(_DWORD *)(v1 + 1600) = 98;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12496),
      (const char (*)[19])byte_1A6568C0,
      (const char (*)[31])"ITEM_LIMIT_MIRACLE_RING_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29488),
      (data::ItemLimitType *)(v1 + 1600),
      (const std::pair<std::string,std::string > *)(v1 + 12496));
    if ( *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1616, v1 + 1600);
    *(_DWORD *)(v1 + 1616) = 99;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12592),
      (const char (*)[19])byte_1A656900,
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_EXPEDITION_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29560),
      (data::ItemLimitType *)(v1 + 1616),
      (const std::pair<std::string,std::string > *)(v1 + 12592));
    if ( *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1632, v1 + 1616);
    *(_DWORD *)(v1 + 1632) = 100;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12688),
      (const char (*)[28])byte_1A656940,
      (const char (*)[43])"ITEM_LIMIT_MECHANICUS_BATTLE_SETTLE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29632),
      (data::ItemLimitType *)(v1 + 1632),
      (const std::pair<std::string,std::string > *)(v1 + 12688));
    if ( *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1648, v1 + 1632);
    *(_DWORD *)(v1 + 1648) = 101;
    std::pair<std::string,std::string>::pair<char const(&)[27],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12784),
      (const char (*)[27])byte_1A656980,
      (const char (*)[43])"ITEM_LIMIT_SEA_LAMP_ACTIVITY_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29704),
      (data::ItemLimitType *)(v1 + 1648),
      (const std::pair<std::string,std::string > *)(v1 + 12784));
    if ( *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1664, v1 + 1648);
    *(_DWORD *)(v1 + 1664) = 1401;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12880),
      (const char (*)[25])byte_1A6569C0,
      (const char (*)[41])"ITEM_LIMIT_PLAYER_EXP_OVERFLOW_TRANSFORM");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29776),
      (data::ItemLimitType *)(v1 + 1664),
      (const std::pair<std::string,std::string > *)(v1 + 12880));
    if ( *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1680, v1 + 1664);
    *(_DWORD *)(v1 + 1680) = 1402;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 12976),
      (const char (*)[25])byte_1A656A00,
      (const char (*)[43])"ITEM_LIMIT_ACTIVITY_ARENA_CHALLENGE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29848),
      (data::ItemLimitType *)(v1 + 1680),
      (const std::pair<std::string,std::string > *)(v1 + 12976));
    if ( *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1696, v1 + 1680);
    *(_DWORD *)(v1 + 1696) = 1403;
    std::pair<std::string,std::string>::pair<char const(&)[17],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13072),
      (const char (*)[17])byte_1A656A40,
      (const char (*)[28])"ITEM_LIMIT_COOP_TASK_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29920),
      (data::ItemLimitType *)(v1 + 1696),
      (const std::pair<std::string,std::string > *)(v1 + 13072));
    if ( *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1712, v1 + 1696);
    *(_DWORD *)(v1 + 1712) = 1404;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13168),
      (const char (*)[19])byte_1A656A80,
      (const char (*)[31])"ITEM_LIMIT_WATER_SPIRIT_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 29992),
      (data::ItemLimitType *)(v1 + 1712),
      (const std::pair<std::string,std::string > *)(v1 + 13168));
    if ( *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1728, v1 + 1712);
    *(_DWORD *)(v1 + 1728) = 1405;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13264),
      (const char (*)[19])byte_1A656AC0,
      (const char (*)[32])"ITEM_LIMIT_REGION_SEARCH_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30064),
      (data::ItemLimitType *)(v1 + 1728),
      (const std::pair<std::string,std::string > *)(v1 + 13264));
    if ( *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1744, v1 + 1728);
    *(_DWORD *)(v1 + 1744) = 1406;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13360),
      (const char (*)[19])byte_1A656B00,
      (const char (*)[29])"ITEM_LIMIT_WATER_SPIRIT_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30136),
      (data::ItemLimitType *)(v1 + 1744),
      (const std::pair<std::string,std::string > *)(v1 + 13360));
    if ( *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1760, v1 + 1744);
    *(_DWORD *)(v1 + 1760) = 1407;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13456),
      (const char (*)[22])byte_1A656B40,
      (const char (*)[38])"ITEM_LIMTT_ACTIVITY_FLEUR_FAIR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30208),
      (data::ItemLimitType *)(v1 + 1760),
      (const std::pair<std::string,std::string > *)(v1 + 13456));
    if ( *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1776, v1 + 1760);
    *(_DWORD *)(v1 + 1776) = 1501;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13552),
      (const char (*)[13])byte_1A656B80,
      (const char (*)[25])"ITEM_LIMIT_HIT_TREE_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30280),
      (data::ItemLimitType *)(v1 + 1776),
      (const std::pair<std::string,std::string > *)(v1 + 13552));
    if ( *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1792, v1 + 1776);
    *(_DWORD *)(v1 + 1792) = 1502;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13648),
      (const char (*)[25])byte_1A656BC0,
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_MIST_TRIAL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30352),
      (data::ItemLimitType *)(v1 + 1792),
      (const std::pair<std::string,std::string > *)(v1 + 13648));
    if ( *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1808, v1 + 1792);
    *(_DWORD *)(v1 + 1808) = 1503;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13744),
      (const char (*)[25])byte_1A656C00,
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_CHANNELLER_SLAB");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30424),
      (data::ItemLimitType *)(v1 + 1808),
      (const std::pair<std::string,std::string > *)(v1 + 13744));
    if ( *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1824, v1 + 1808);
    *(_DWORD *)(v1 + 1824) = 1504;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13840),
      (const char (*)[22])byte_1A656C40,
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_HIDE_AND_SEEK");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30496),
      (data::ItemLimitType *)(v1 + 1824),
      (const std::pair<std::string,std::string > *)(v1 + 13840));
    if ( *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1840, v1 + 1824);
    *(_DWORD *)(v1 + 1840) = 1505;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 13936),
      (const char (*)[28])byte_1A656C80,
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_FIND_HILICHURL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30568),
      (data::ItemLimitType *)(v1 + 1840),
      (const std::pair<std::string,std::string > *)(v1 + 13936));
    if ( *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1856, v1 + 1840);
    *(_DWORD *)(v1 + 1856) = 1506;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14032),
      (const char (*)[19])byte_1A656CC0,
      (const char (*)[33])"ITEM_LIMIT_FURNITURE_MAKE_CANCEL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30640),
      (data::ItemLimitType *)(v1 + 1856),
      (const std::pair<std::string,std::string > *)(v1 + 14032));
    if ( *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1872, v1 + 1856);
    *(_DWORD *)(v1 + 1872) = 1507;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14128),
      (const char (*)[19])byte_1A656D00,
      (const char (*)[31])"ITEM_LIMIT_HOME_LEVELUP_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30712),
      (data::ItemLimitType *)(v1 + 1872),
      (const std::pair<std::string,std::string > *)(v1 + 14128));
    if ( *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1888, v1 + 1872);
    *(_DWORD *)(v1 + 1888) = 1508;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14224),
      (const char (*)[19])byte_1A656D40,
      (const char (*)[26])"ITEM_LIMIT_FURNITURE_MAKE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30784),
      (data::ItemLimitType *)(v1 + 1888),
      (const std::pair<std::string,std::string > *)(v1 + 14224));
    if ( *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1904, v1 + 1888);
    *(_DWORD *)(v1 + 1904) = 1509;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[42],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14320),
      (const char (*)[28])byte_1A656D80,
      (const char (*)[42])"ITEM_LIMIT_ACTIVITY_CONDITION_MAIL_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30856),
      (data::ItemLimitType *)(v1 + 1904),
      (const std::pair<std::string,std::string > *)(v1 + 14320));
    if ( *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1920, v1 + 1904);
    *(_DWORD *)(v1 + 1920) = 1510;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[42],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14416),
      (const char (*)[29])byte_1A656DC0,
      (const char (*)[42])"ITEM_LIMIT_BATTLE_PASS_NOTIFY_MAIL_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 30928),
      (data::ItemLimitType *)(v1 + 1920),
      (const std::pair<std::string,std::string > *)(v1 + 14416));
    if ( *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1936, v1 + 1920);
    *(_DWORD *)(v1 + 1936) = 1511;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[50],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14512),
      (const char (*)[31])byte_1A656E00,
      (const char (*)[50])"ITEM_LIMIT_ACTIVITY_CHANNELLER_SLAB_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31000),
      (data::ItemLimitType *)(v1 + 1936),
      (const std::pair<std::string,std::string > *)(v1 + 14512));
    if ( *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1952, v1 + 1936);
    *(_DWORD *)(v1 + 1952) = 1512;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14608),
      (const char (*)[16])byte_1A656E40,
      (const char (*)[25])"ITEM_LIMIT_HOME_RESOURCE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31072),
      (data::ItemLimitType *)(v1 + 1952),
      (const std::pair<std::string,std::string > *)(v1 + 14608));
    if ( *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1968, v1 + 1952);
    *(_DWORD *)(v1 + 1968) = 1513;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14704),
      (const char (*)[13])byte_1A656E80,
      (const char (*)[29])"ITEM_LIMIT_OPERATION_WELFARE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31144),
      (data::ItemLimitType *)(v1 + 1968),
      (const std::pair<std::string,std::string > *)(v1 + 14704));
    if ( *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 1984, v1 + 1968);
    *(_DWORD *)(v1 + 1984) = 1601;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[39],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14800),
      (const char (*)[22])byte_1A656EC0,
      (const char (*)[39])"ITEM_LIMIT_ACTIVITY_SUMMER_TIME_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31216),
      (data::ItemLimitType *)(v1 + 1984),
      (const std::pair<std::string,std::string > *)(v1 + 14800));
    if ( *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2000, v1 + 1984);
    *(_DWORD *)(v1 + 2000) = 1602;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14896),
      (const char (*)[25])byte_1A656F00,
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_ECHO_SHELL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31288),
      (data::ItemLimitType *)(v1 + 2000),
      (const std::pair<std::string,std::string > *)(v1 + 14896));
    if ( *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2016, v1 + 2000);
    *(_DWORD *)(v1 + 2016) = 1603;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 14992),
      (const char (*)[22])byte_1A656F40,
      (const char (*)[31])"ITEM_LIMIT_RELIQUARY_DECOMPOSE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31360),
      (data::ItemLimitType *)(v1 + 2016),
      (const std::pair<std::string,std::string > *)(v1 + 14992));
    if ( *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2032, v1 + 2016);
    *(_DWORD *)(v1 + 2032) = 1604;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15088),
      (const char (*)[22])byte_1A656F80,
      (const char (*)[23])"ITEM_LIMIT_HOME_FETTER");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31432),
      (data::ItemLimitType *)(v1 + 2032),
      (const std::pair<std::string,std::string > *)(v1 + 15088));
    if ( *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2048, v1 + 2032);
    *(_DWORD *)(v1 + 2048) = 1605;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15184),
      (const char (*)[19])byte_1A656FC0,
      (const char (*)[29])"ITEM_LIMIT_HOME_EVENT_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31504),
      (data::ItemLimitType *)(v1 + 2048),
      (const std::pair<std::string,std::string > *)(v1 + 15184));
    if ( *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2064, v1 + 2048);
    *(_DWORD *)(v1 + 2064) = 1606;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[42],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15280),
      (const char (*)[25])byte_1A657000,
      (const char (*)[42])"ITEM_LIMIT_ACTIVITY_BUOYANT_COMBAT_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31576),
      (data::ItemLimitType *)(v1 + 2064),
      (const std::pair<std::string,std::string > *)(v1 + 15280));
    if ( *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2080, v1 + 2064);
    *(_DWORD *)(v1 + 2080) = 1607;
    std::pair<std::string,std::string>::pair<char const(&)[34],char const(&)[44],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15376),
      (const char (*)[34])byte_1A657040,
      (const char (*)[44])"ITEM_LIMIT_ACTIVITY_BOUNCE_CONJURING_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31648),
      (data::ItemLimitType *)(v1 + 2080),
      (const std::pair<std::string,std::string > *)(v1 + 15376));
    if ( *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2096, v1 + 2080);
    *(_DWORD *)(v1 + 2096) = 2000;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15472),
      (const char (*)[19])byte_1A6570A0,
      (const char (*)[30])"ITEM_LIMIT_ORAIONOKAMI_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31720),
      (data::ItemLimitType *)(v1 + 2096),
      (const std::pair<std::string,std::string > *)(v1 + 15472));
    if ( *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2112, v1 + 2096);
    *(_DWORD *)(v1 + 2112) = 2001;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15568),
      (const char (*)[13])byte_1A6570E0,
      (const char (*)[26])"ITEM_LIMIT_BOOK_LEAF_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31792),
      (data::ItemLimitType *)(v1 + 2112),
      (const std::pair<std::string,std::string > *)(v1 + 15568));
    if ( *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2128, v1 + 2112);
    *(_DWORD *)(v1 + 2128) = 2002;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15664),
      (const char (*)[22])byte_1A657120,
      (const char (*)[41])"ITEM_LIMIT_EXPLORATION_LINE_LEVEL_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31864),
      (data::ItemLimitType *)(v1 + 2128),
      (const std::pair<std::string,std::string > *)(v1 + 15664));
    if ( *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2144, v1 + 2128);
    *(_DWORD *)(v1 + 2144) = 2003;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15760),
      (const char (*)[25])byte_1A657160,
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_BLITZ_RUSH_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 31936),
      (data::ItemLimitType *)(v1 + 2144),
      (const std::pair<std::string,std::string > *)(v1 + 15760));
    if ( *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2160, v1 + 2144);
    *(_DWORD *)(v1 + 2160) = 2004;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[45],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15856),
      (const char (*)[31])byte_1A6571A0,
      (const char (*)[45])"ITEM_LIMIT_ACTIVITY_BLITZ_RUSH_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32008),
      (data::ItemLimitType *)(v1 + 2160),
      (const std::pair<std::string,std::string > *)(v1 + 15856));
    if ( *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2176, v1 + 2160);
    *(_DWORD *)(v1 + 2176) = 2005;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 15952),
      (const char (*)[25])byte_1A6571E0,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_CHESS_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32080),
      (data::ItemLimitType *)(v1 + 2176),
      (const std::pair<std::string,std::string > *)(v1 + 15952));
    if ( *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2192, v1 + 2176);
    *(_DWORD *)(v1 + 2192) = 2006;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16048),
      (const char (*)[28])byte_1A657220,
      (const char (*)[36])"ITEM_LIMIT_HOME_PLANT_BOX_SEED_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32152),
      (data::ItemLimitType *)(v1 + 2192),
      (const std::pair<std::string,std::string > *)(v1 + 16048));
    if ( *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2208, v1 + 2192);
    *(_DWORD *)(v1 + 2208) = 2007;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16144),
      (const char (*)[19])byte_1A657260,
      (const char (*)[34])"ITEM_LIMIT_HOME_PLANT_GATHER_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32224),
      (data::ItemLimitType *)(v1 + 2208),
      (const std::pair<std::string,std::string > *)(v1 + 16144));
    if ( *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2224, v1 + 2208);
    *(_DWORD *)(v1 + 2224) = 2008;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16240),
      (const char (*)[19])byte_1A6572A0,
      (const char (*)[38])"ITEM_LIMIT_HOME_FURNITURE_MAKE_RETURN");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32296),
      (data::ItemLimitType *)(v1 + 2224),
      (const std::pair<std::string,std::string > *)(v1 + 16240));
    if ( *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2240, v1 + 2224);
    *(_DWORD *)(v1 + 2240) = 2100;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16336),
      (const char (*)[25])byte_1A6572E0,
      (const char (*)[25])"ITEM_LIMIT_ACTIVITY_SUMO");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32368),
      (data::ItemLimitType *)(v1 + 2240),
      (const std::pair<std::string,std::string > *)(v1 + 16336));
    if ( *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2256, v1 + 2240);
    *(_DWORD *)(v1 + 2256) = 2101;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16432),
      (const char (*)[22])byte_1A657320,
      (const char (*)[30])"ITEM_LIMIT_ACTIVITY_LUNA_RITE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32440),
      (data::ItemLimitType *)(v1 + 2256),
      (const std::pair<std::string,std::string > *)(v1 + 16432));
    if ( *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2272, v1 + 2256);
    *(_DWORD *)(v1 + 2272) = 2102;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[23],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16528),
      (const char (*)[13])byte_1A657360,
      (const char (*)[23])"ITEM_LIMIT_FISH_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32512),
      (data::ItemLimitType *)(v1 + 2272),
      (const std::pair<std::string,std::string > *)(v1 + 16528));
    if ( *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2288, v1 + 2272);
    *(_DWORD *)(v1 + 2288) = 2103;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16624),
      (const char (*)[19])byte_1A6573A0,
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_MOONFIN_TRIAL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32584),
      (data::ItemLimitType *)(v1 + 2288),
      (const std::pair<std::string,std::string > *)(v1 + 16624));
    if ( *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2304, v1 + 2288);
    *(_DWORD *)(v1 + 2304) = 2104;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16720),
      (const char (*)[22])byte_1A6573E0,
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_LUNA_RITE_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32656),
      (data::ItemLimitType *)(v1 + 2304),
      (const std::pair<std::string,std::string > *)(v1 + 16720));
    if ( *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2320, v1 + 2304);
    *(_DWORD *)(v1 + 2320) = 2200;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16816),
      (const char (*)[25])byte_1A657420,
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_ROGUELIKE_DUNGEON");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32728),
      (data::ItemLimitType *)(v1 + 2320),
      (const std::pair<std::string,std::string > *)(v1 + 16816));
    if ( *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2336, v1 + 2320);
    *(_DWORD *)(v1 + 2336) = 2201;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[52],true>(
      (std::pair<std::string,std::string > *const)(v1 + 16912),
      (const char (*)[31])byte_1A657460,
      (const char (*)[52])"ITEM_LIMIT_ACTIVITY_ROGUELIKE_DUNGEON_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32800),
      (data::ItemLimitType *)(v1 + 2336),
      (const std::pair<std::string,std::string > *)(v1 + 16912));
    if ( *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2352, v1 + 2336);
    *(_DWORD *)(v1 + 2352) = 2202;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17008),
      (const char (*)[19])byte_1A6574A0,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_PLANT_FLOWER");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32872),
      (data::ItemLimitType *)(v1 + 2352),
      (const std::pair<std::string,std::string > *)(v1 + 17008));
    if ( *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2368, v1 + 2352);
    *(_DWORD *)(v1 + 2368) = 2203;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17104),
      (const char (*)[25])byte_1A6574E0,
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_DIG_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 32944),
      (data::ItemLimitType *)(v1 + 2368),
      (const std::pair<std::string,std::string > *)(v1 + 17104));
    if ( *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2384, v1 + 2368);
    *(_DWORD *)(v1 + 2384) = 2204;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17200),
      (const char (*)[25])byte_1A657520,
      (const char (*)[29])"ITEM_LIMIT_ACTIVITY_DIG_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33016),
      (data::ItemLimitType *)(v1 + 2384),
      (const std::pair<std::string,std::string > *)(v1 + 17200));
    if ( *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2400, v1 + 2384);
    *(_DWORD *)(v1 + 2400) = 2205;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17296),
      (const char (*)[19])byte_1A657560,
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_MUSIC_GAME_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33088),
      (data::ItemLimitType *)(v1 + 2400),
      (const std::pair<std::string,std::string > *)(v1 + 17296));
    if ( *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2416, v1 + 2400);
    *(_DWORD *)(v1 + 2416) = 2300;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17392),
      (const char (*)[19])byte_1A6575A0,
      (const char (*)[26])"ITEM_LIMIT_CAPTURE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33160),
      (data::ItemLimitType *)(v1 + 2416),
      (const std::pair<std::string,std::string > *)(v1 + 17392));
    if ( *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2432, v1 + 2416);
    *(_DWORD *)(v1 + 2432) = 2301;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17488),
      (const char (*)[22])byte_1A6575E0,
      (const char (*)[30])"ITEM_LIMIT_WINTER_CAMP_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33232),
      (data::ItemLimitType *)(v1 + 2432),
      (const std::pair<std::string,std::string > *)(v1 + 17488));
    if ( *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2448, v1 + 2432);
    *(_DWORD *)(v1 + 2448) = 2302;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17584),
      (const char (*)[22])byte_1A657620,
      (const char (*)[28])"ITEM_LIMIT_WINTER_CAMP_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33304),
      (data::ItemLimitType *)(v1 + 2448),
      (const std::pair<std::string,std::string > *)(v1 + 17584));
    if ( *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2464, v1 + 2448);
    *(_DWORD *)(v1 + 2464) = 2303;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17680),
      (const char (*)[22])byte_1A657660,
      (const char (*)[29])"ITEM_LIMIT_CAPTURE_NONE_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33376),
      (data::ItemLimitType *)(v1 + 2464),
      (const std::pair<std::string,std::string > *)(v1 + 17680));
    if ( *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2480, v1 + 2464);
    *(_DWORD *)(v1 + 2480) = 2304;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17776),
      (const char (*)[19])byte_1A6576A0,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_HACHI_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33448),
      (data::ItemLimitType *)(v1 + 2480),
      (const std::pair<std::string,std::string > *)(v1 + 17776));
    if ( *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2496, v1 + 2480);
    *(_DWORD *)(v1 + 2496) = 2400;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17872),
      (const char (*)[22])byte_1A6576E0,
      (const char (*)[27])"ITEM_LIMIT_ACTIVITY_POTION");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33520),
      (data::ItemLimitType *)(v1 + 2496),
      (const std::pair<std::string,std::string > *)(v1 + 17872));
    if ( *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2512, v1 + 2496);
    *(_DWORD *)(v1 + 2512) = 2401;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 17968),
      (const char (*)[25])byte_1A657720,
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_TANUKI_TRAVEL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33592),
      (data::ItemLimitType *)(v1 + 2512),
      (const std::pair<std::string,std::string > *)(v1 + 17968));
    if ( *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2528, v1 + 2512);
    *(_DWORD *)(v1 + 2528) = 2402;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18064),
      (const char (*)[25])byte_1A657760,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_LANTERN_RITE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33664),
      (data::ItemLimitType *)(v1 + 2528),
      (const std::pair<std::string,std::string > *)(v1 + 18064));
    if ( *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2544, v1 + 2528);
    *(_DWORD *)(v1 + 2544) = 2403;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[47],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18160),
      (const char (*)[25])byte_1A6577A0,
      (const char (*)[47])"ITEM_LIMIT_ACTIVITY_LANTERN_RITE_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33736),
      (data::ItemLimitType *)(v1 + 2544),
      (const std::pair<std::string,std::string > *)(v1 + 18160));
    if ( *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2560, v1 + 2544);
    *(_DWORD *)(v1 + 2560) = 2404;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[38],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18256),
      (const char (*)[25])byte_1A6577E0,
      (const char (*)[38])"ITEM_LIMIT_ACTIVITY_LANTERN_RITE_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33808),
      (data::ItemLimitType *)(v1 + 2560),
      (const std::pair<std::string,std::string > *)(v1 + 18256));
    if ( *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2576, v1 + 2560);
    *(_DWORD *)(v1 + 2576) = 2500;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18352),
      (const char (*)[22])byte_1A657820,
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_MICHIAE_MATSURI");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33880),
      (data::ItemLimitType *)(v1 + 2576),
      (const std::pair<std::string,std::string > *)(v1 + 18352));
    if ( *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2592, v1 + 2576);
    *(_DWORD *)(v1 + 2592) = 2501;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[41],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18448),
      (const char (*)[22])byte_1A657860,
      (const char (*)[41])"ITEM_LIMIT_ACTIVITY_MICHIAE_MATSURI_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 33952),
      (data::ItemLimitType *)(v1 + 2592),
      (const std::pair<std::string,std::string > *)(v1 + 18448));
    if ( *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2608, v1 + 2592);
    *(_DWORD *)(v1 + 2608) = 2502;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18544),
      (const char (*)[22])byte_1A6578A0,
      (const char (*)[30])"ITEM_LIMIT_ACTIVITY_BARTENDER");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34024),
      (data::ItemLimitType *)(v1 + 2608),
      (const std::pair<std::string,std::string > *)(v1 + 18544));
    if ( *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2624, v1 + 2608);
    *(_DWORD *)(v1 + 2624) = 2503;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18640),
      (const char (*)[10])byte_1A6578E0,
      (const char (*)[22])"ITEM_LIMIT_UGC_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34096),
      (data::ItemLimitType *)(v1 + 2624),
      (const std::pair<std::string,std::string > *)(v1 + 18640));
    if ( *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2640, v1 + 2624);
    *(_DWORD *)(v1 + 2640) = 2600;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18736),
      (const char (*)[22])byte_1A657920,
      (const char (*)[29])"ITEM_LIMIT_LUMEN_STONE_LEVEL");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34168),
      (data::ItemLimitType *)(v1 + 2640),
      (const std::pair<std::string,std::string > *)(v1 + 18736));
    if ( *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2656, v1 + 2640);
    *(_DWORD *)(v1 + 2656) = 2601;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18832),
      (const char (*)[25])byte_1A657960,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_CRYSTAL_LINK");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34240),
      (data::ItemLimitType *)(v1 + 2656),
      (const std::pair<std::string,std::string > *)(v1 + 18832));
    if ( *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2672, v1 + 2656);
    *(_DWORD *)(v1 + 2672) = 2602;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 18928),
      (const char (*)[19])byte_1A6579A0,
      (const char (*)[26])"ITEM_LIMIT_ACTIVITY_SPICE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34312),
      (data::ItemLimitType *)(v1 + 2672),
      (const std::pair<std::string,std::string > *)(v1 + 18928));
    if ( *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2688, v1 + 2672);
    *(_DWORD *)(v1 + 2688) = 2603;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19024),
      (const char (*)[22])byte_1A6579E0,
      (const char (*)[28])"ITEM_LIMIT_ACTIVITY_IRODORI");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34384),
      (data::ItemLimitType *)(v1 + 2688),
      (const std::pair<std::string,std::string > *)(v1 + 19024));
    if ( *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2704, v1 + 2688);
    *(_DWORD *)(v1 + 2704) = 2604;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[42],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19120),
      (const char (*)[28])byte_1A657A20,
      (const char (*)[42])"ITEM_LIMIT_ACTIVITY_IRODORI_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34456),
      (data::ItemLimitType *)(v1 + 2704),
      (const std::pair<std::string,std::string > *)(v1 + 19120));
    if ( *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2720, v1 + 2704);
    *(_DWORD *)(v1 + 2720) = 2605;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19216),
      (const char (*)[19])byte_1A657A60,
      (const char (*)[26])"ITEM_LIMIT_ACTIVITY_PHOTO");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34528),
      (data::ItemLimitType *)(v1 + 2720),
      (const std::pair<std::string,std::string > *)(v1 + 19216));
    if ( *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2736, v1 + 2720);
    *(_DWORD *)(v1 + 2736) = 2700;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[26],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19312),
      (const char (*)[22])byte_1A657AA0,
      (const char (*)[26])"ITEM_LIMIT_ACTIVITY_GACHA");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34600),
      (data::ItemLimitType *)(v1 + 2736),
      (const std::pair<std::string,std::string > *)(v1 + 19312));
    if ( *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2752, v1 + 2736);
    *(_DWORD *)(v1 + 2752) = 2701;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19408),
      (const char (*)[22])byte_1A657AE0,
      (const char (*)[32])"ITEM_LIMIT_ACTIVITY_ROGUE_DIARY");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34672),
      (data::ItemLimitType *)(v1 + 2752),
      (const std::pair<std::string,std::string > *)(v1 + 19408));
    if ( *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2768, v1 + 2752);
    *(_DWORD *)(v1 + 2768) = 2702;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19504),
      (const char (*)[28])byte_1A657B20,
      (const char (*)[34])"ITEM_LIMIT_COMEBACK_QUESTIONNAIRE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34744),
      (data::ItemLimitType *)(v1 + 2768),
      (const std::pair<std::string,std::string > *)(v1 + 19504));
    if ( *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2784, v1 + 2768);
    *(_DWORD *)(v1 + 2784) = 2703;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19600),
      (const char (*)[31])byte_1A657B60,
      (const char (*)[37])"ITEM_LIMIT_LUMINANCE_STONE_CHALLENGE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34816),
      (data::ItemLimitType *)(v1 + 2784),
      (const std::pair<std::string,std::string > *)(v1 + 19600));
    if ( *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2800, v1 + 2784);
    *(_DWORD *)(v1 + 2800) = 2800;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19696),
      (const char (*)[13])byte_1A657BA0,
      (const char (*)[28])"ITEM_LIMIT_GIVING_TAKE_BACK");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34888),
      (data::ItemLimitType *)(v1 + 2800),
      (const std::pair<std::string,std::string > *)(v1 + 19696));
    if ( *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2816, v1 + 2800);
    *(_DWORD *)(v1 + 2816) = 2801;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19792),
      (const char (*)[25])byte_1A657BE0,
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_SUMMER_TIME_V2");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 34960),
      (data::ItemLimitType *)(v1 + 2816),
      (const std::pair<std::string,std::string > *)(v1 + 19792));
    if ( *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2832, v1 + 2816);
    *(_DWORD *)(v1 + 2832) = 2802;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[49],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19888),
      (const char (*)[31])byte_1A657C20,
      (const char (*)[49])"ITEM_LIMIT_ACTIVITY_SUMMER_TIME_V2_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35032),
      (data::ItemLimitType *)(v1 + 2832),
      (const std::pair<std::string,std::string > *)(v1 + 19888));
    if ( *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2848, v1 + 2832);
    *(_DWORD *)(v1 + 2848) = 2803;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 19984),
      (const char (*)[28])byte_1A657C60,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_ISLAND_PARTY");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35104),
      (data::ItemLimitType *)(v1 + 2848),
      (const std::pair<std::string,std::string > *)(v1 + 19984));
    if ( *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2864, v1 + 2848);
    *(_DWORD *)(v1 + 2864) = 2804;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20080),
      (const char (*)[25])byte_1A657CA0,
      (const char (*)[25])"ITEM_LIMIT_ACTIVITY_GEAR");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35176),
      (data::ItemLimitType *)(v1 + 2864),
      (const std::pair<std::string,std::string > *)(v1 + 20080));
    if ( *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2880, v1 + 2864);
    *(_DWORD *)(v1 + 2880) = 3000;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20176),
      (const char (*)[25])byte_1A657CE0,
      (const char (*)[37])"ITEM_LIMIT_ACTIVITY_GRAVEN_INNOCENCE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35248),
      (data::ItemLimitType *)(v1 + 2880),
      (const std::pair<std::string,std::string > *)(v1 + 20176));
    if ( *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2896, v1 + 2880);
    *(_DWORD *)(v1 + 2896) = 3001;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[51],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20272),
      (const char (*)[31])byte_1A657D20,
      (const char (*)[51])"ITEM_LIMIT_ACTIVITY_GRAVEN_INNOCENCE_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35320),
      (data::ItemLimitType *)(v1 + 2896),
      (const std::pair<std::string,std::string > *)(v1 + 20272));
    if ( *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2912, v1 + 2896);
    *(_DWORD *)(v1 + 2912) = 3002;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20368),
      (const char (*)[13])byte_1A657D60,
      (const char (*)[25])"ITEM_LIMIT_WOOD_EXCHANGE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35392),
      (data::ItemLimitType *)(v1 + 2912),
      (const std::pair<std::string,std::string > *)(v1 + 20368));
    if ( *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2928, v1 + 2912);
    *(_DWORD *)(v1 + 2928) = 3003;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20464),
      (const char (*)[25])byte_1A657DA0,
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_INSTABLE_SPRAY");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35464),
      (data::ItemLimitType *)(v1 + 2928),
      (const std::pair<std::string,std::string > *)(v1 + 20464));
    if ( *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2944, v1 + 2928);
    *(_DWORD *)(v1 + 2944) = 3004;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[36],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20560),
      (const char (*)[25])byte_1A657DE0,
      (const char (*)[36])"ITEM_LIMIT_ACTIVITY_TREASURE_SEELIE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35536),
      (data::ItemLimitType *)(v1 + 2944),
      (const std::pair<std::string,std::string > *)(v1 + 20560));
    if ( *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2960, v1 + 2944);
    *(_DWORD *)(v1 + 2960) = 3005;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20656),
      (const char (*)[28])byte_1A657E20,
      (const char (*)[28])"ITEM_LIMIT_ACTIVITY_MUQADAS");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35608),
      (data::ItemLimitType *)(v1 + 2960),
      (const std::pair<std::string,std::string > *)(v1 + 20656));
    if ( *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2976, v1 + 2960);
    *(_DWORD *)(v1 + 2976) = 3100;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[39],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20752),
      (const char (*)[25])byte_1A657E60,
      (const char (*)[39])"ITEM_LIMIT_ACTIVITY_ROCK_BOARD_EXPLORE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35680),
      (data::ItemLimitType *)(v1 + 2976),
      (const std::pair<std::string,std::string > *)(v1 + 20752));
    if ( *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 2992, v1 + 2976);
    *(_DWORD *)(v1 + 2992) = 3101;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20848),
      (const char (*)[25])byte_1A657EA0,
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_WIND_FIELD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35752),
      (data::ItemLimitType *)(v1 + 2992),
      (const std::pair<std::string,std::string > *)(v1 + 20848));
    if ( *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3008, v1 + 2992);
    *(_DWORD *)(v1 + 3008) = 3102;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 20944),
      (const char (*)[25])byte_1A657EE0,
      (const char (*)[28])"ITEM_LIMIT_ACTIVITY_VINTAGE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35824),
      (data::ItemLimitType *)(v1 + 3008),
      (const std::pair<std::string,std::string > *)(v1 + 20944));
    if ( *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3024, v1 + 3008);
    *(_DWORD *)(v1 + 3024) = 3201;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21040),
      (const char (*)[22])byte_1A657F20,
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_FUNGUS_FIGHTER");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35896),
      (data::ItemLimitType *)(v1 + 3024),
      (const std::pair<std::string,std::string > *)(v1 + 21040));
    if ( *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3040, v1 + 3024);
    *(_DWORD *)(v1 + 3040) = 3202;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[49],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21136),
      (const char (*)[28])byte_1A657F60,
      (const char (*)[49])"ITEM_LIMIT_ACTIVITY_FUNGUS_FIGHTER_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 35968),
      (data::ItemLimitType *)(v1 + 3040),
      (const std::pair<std::string,std::string > *)(v1 + 21136));
    if ( *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3056, v1 + 3040);
    *(_DWORD *)(v1 + 3056) = 3203;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21232),
      (const char (*)[25])byte_1A657FA0,
      (const char (*)[35])"ITEM_LIMIT_ACTIVITY_CHAR_AMUSEMENT");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36040),
      (data::ItemLimitType *)(v1 + 3056),
      (const std::pair<std::string,std::string > *)(v1 + 21232));
    if ( *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3072, v1 + 3056);
    *(_DWORD *)(v1 + 3072) = 3204;
    std::pair<std::string,std::string>::pair<char const(&)[28],char const(&)[40],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21328),
      (const char (*)[28])byte_1A657FE0,
      (const char (*)[40])"ITEM_LIMIT_ACTIVITY_EFFIGY_CHALLENGE_V2");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36112),
      (data::ItemLimitType *)(v1 + 3072),
      (const std::pair<std::string,std::string > *)(v1 + 21328));
    if ( *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3088, v1 + 3072);
    *(_DWORD *)(v1 + 3088) = 3300;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21424),
      (const char (*)[22])byte_1A658020,
      (const char (*)[34])"ITEM_LIMIT_ACTIVITY_BRICK_BREAKER");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36184),
      (data::ItemLimitType *)(v1 + 3088),
      (const std::pair<std::string,std::string > *)(v1 + 21424));
    if ( *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3104, v1 + 3088);
    *(_DWORD *)(v1 + 3104) = 3301;
    std::pair<std::string,std::string>::pair<char const(&)[16],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21520),
      (const char (*)[16])byte_1A658060,
      (const char (*)[25])"ITEM_LIMIT_AVATAR_RENAME");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36256),
      (data::ItemLimitType *)(v1 + 3104),
      (const std::pair<std::string,std::string > *)(v1 + 21520));
    if ( *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3120, v1 + 3104);
    *(_DWORD *)(v1 + 3120) = 3302;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[28],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21616),
      (const char (*)[19])byte_1A6580A0,
      (const char (*)[28])"ITEM_LIMIT_GCG_LEVEL_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36328),
      (data::ItemLimitType *)(v1 + 3120),
      (const std::pair<std::string,std::string > *)(v1 + 21616));
    if ( *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3136, v1 + 3120);
    *(_DWORD *)(v1 + 3136) = 3303;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21712),
      (const char (*)[19])byte_1A6580E0,
      (const char (*)[32])"ITEM_LIMIT_GCG_CHALLENGE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36400),
      (data::ItemLimitType *)(v1 + 3136),
      (const std::pair<std::string,std::string > *)(v1 + 21712));
    if ( *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3152, v1 + 3136);
    *(_DWORD *)(v1 + 3152) = 3304;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21808),
      (const char (*)[19])byte_1A658120,
      (const char (*)[43])"ITEM_LIMIT_GCG_REPEATABLE_CHALLENGE_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36472),
      (data::ItemLimitType *)(v1 + 3152),
      (const std::pair<std::string,std::string > *)(v1 + 21808));
    if ( *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3168, v1 + 3152);
    *(_DWORD *)(v1 + 3168) = 3305;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 21904),
      (const char (*)[25])byte_1A658160,
      (const char (*)[33])"ITEM_LIMIT_ACTIVITY_COIN_COLLECT");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36544),
      (data::ItemLimitType *)(v1 + 3168),
      (const std::pair<std::string,std::string > *)(v1 + 21904));
    if ( *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3184, v1 + 3168);
    *(_DWORD *)(v1 + 3184) = 3306;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22000),
      (const char (*)[22])byte_1A6581A0,
      (const char (*)[34])"ITEM_LIMIT_GCG_PROFICIENCY_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36616),
      (data::ItemLimitType *)(v1 + 3184),
      (const std::pair<std::string,std::string > *)(v1 + 22000));
    if ( *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3200, v1 + 3184);
    *(_DWORD *)(v1 + 3200) = 3400;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22096),
      (const char (*)[25])byte_1A6581E0,
      (const char (*)[32])"ITEM_LIMIT_ACTIVITY_SEA_LAMP_V3");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36688),
      (data::ItemLimitType *)(v1 + 3200),
      (const std::pair<std::string,std::string > *)(v1 + 22096));
    if ( *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3216, v1 + 3200);
    *(_DWORD *)(v1 + 3216) = 3401;
    std::pair<std::string,std::string>::pair<char const(&)[31],char const(&)[46],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22192),
      (const char (*)[31])byte_1A658220,
      (const char (*)[46])"ITEM_LIMIT_ACTIVITY_SEA_LAMP_V3_AVATAR_REWARD");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36760),
      (data::ItemLimitType *)(v1 + 3216),
      (const std::pair<std::string,std::string > *)(v1 + 22192));
    if ( *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3232, v1 + 3216);
    *(_DWORD *)(v1 + 3232) = 3402;
    std::pair<std::string,std::string>::pair<char const(&)[19],char const(&)[25],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22288),
      (const char (*)[19])byte_1A658260,
      (const char (*)[25])"ITEM_LIMIT_COMPOUND_DROP");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36832),
      (data::ItemLimitType *)(v1 + 3232),
      (const std::pair<std::string,std::string > *)(v1 + 22288));
    if ( *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3248, v1 + 3232);
    *(_DWORD *)(v1 + 3248) = 3403;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[43],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22384),
      (const char (*)[22])byte_1A6582A0,
      (const char (*)[43])"ITEM_LIMIT_ACTIVITY_ELECTROHERCULES_BATTLE");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36904),
      (data::ItemLimitType *)(v1 + 3248),
      (const std::pair<std::string,std::string > *)(v1 + 22384));
    if ( *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 3264, v1 + 3248);
    *(_DWORD *)(v1 + 3264) = 3404;
    std::pair<std::string,std::string>::pair<char const(&)[25],char const(&)[31],true>(
      (std::pair<std::string,std::string > *const)(v1 + 22480),
      (const char (*)[25])byte_1A6582E0,
      (const char (*)[31])"ITEM_LIMIT_ACTIVITY_TEAM_CHAIN");
    std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::pair<data::ItemLimitType,true>(
      (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *const)(v1 + 36976),
      (data::ItemLimitType *)(v1 + 3264),
      (const std::pair<std::string,std::string > *)(v1 + 22480));
    std::allocator<std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::ItemLimitType,std::pair<std::string,std::string>>::map(
      &data::getItemLimitTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > >)__PAIR128__(201LL, v1 + 22576),
      (const std::less<data::ItemLimitType> *)(v1 + 32),
      (const std::map<data::ItemLimitType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getItemLimitTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::ItemLimitType,std::pair<std::string,std::string>>::~map,
      &data::getItemLimitTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *)(v1 + 37048);
          i != (std::pair<const data::ItemLimitType,std::pair<std::string,std::string > > *)(v1 + 22576);
          std::pair<data::ItemLimitType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 22576, 14472LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22480));
    v5 = (_DWORD *)(((v1 + 22480) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 3264) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22384));
    v6 = (_DWORD *)(((v1 + 22384) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 3248) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22288));
    v7 = (_DWORD *)(((v1 + 22288) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 3232) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22192));
    v8 = (_DWORD *)(((v1 + 22192) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 3216) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22096));
    v9 = (_DWORD *)(((v1 + 22096) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 3200) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 22000));
    v10 = (_DWORD *)(((v1 + 22000) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 3184) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21904));
    v11 = (_DWORD *)(((v1 + 21904) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 3168) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21808));
    v12 = (_DWORD *)(((v1 + 21808) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 3152) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21712));
    v13 = (_DWORD *)(((v1 + 21712) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 3136) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21616));
    v14 = (_DWORD *)(((v1 + 21616) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 3120) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21520));
    v15 = (_DWORD *)(((v1 + 21520) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 3104) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21424));
    v16 = (_DWORD *)(((v1 + 21424) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 3088) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21328));
    v17 = (_DWORD *)(((v1 + 21328) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 3072) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21232));
    v18 = (_DWORD *)(((v1 + 21232) >> 3) + 2147450880);
    *v18 = -117901064;
    v18[1] = -117901064;
    *(_BYTE *)(((v1 + 3056) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21136));
    v19 = (_DWORD *)(((v1 + 21136) >> 3) + 2147450880);
    *v19 = -117901064;
    v19[1] = -117901064;
    *(_BYTE *)(((v1 + 3040) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 21040));
    v20 = (_DWORD *)(((v1 + 21040) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    *(_BYTE *)(((v1 + 3024) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20944));
    v21 = (_DWORD *)(((v1 + 20944) >> 3) + 2147450880);
    *v21 = -117901064;
    v21[1] = -117901064;
    *(_BYTE *)(((v1 + 3008) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20848));
    v22 = (_DWORD *)(((v1 + 20848) >> 3) + 2147450880);
    *v22 = -117901064;
    v22[1] = -117901064;
    *(_BYTE *)(((v1 + 2992) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20752));
    v23 = (_DWORD *)(((v1 + 20752) >> 3) + 2147450880);
    *v23 = -117901064;
    v23[1] = -117901064;
    *(_BYTE *)(((v1 + 2976) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20656));
    v24 = (_DWORD *)(((v1 + 20656) >> 3) + 2147450880);
    *v24 = -117901064;
    v24[1] = -117901064;
    *(_BYTE *)(((v1 + 2960) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20560));
    v25 = (_DWORD *)(((v1 + 20560) >> 3) + 2147450880);
    *v25 = -117901064;
    v25[1] = -117901064;
    *(_BYTE *)(((v1 + 2944) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20464));
    v26 = (_DWORD *)(((v1 + 20464) >> 3) + 2147450880);
    *v26 = -117901064;
    v26[1] = -117901064;
    *(_BYTE *)(((v1 + 2928) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20368));
    v27 = (_DWORD *)(((v1 + 20368) >> 3) + 2147450880);
    *v27 = -117901064;
    v27[1] = -117901064;
    *(_BYTE *)(((v1 + 2912) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20272));
    v28 = (_DWORD *)(((v1 + 20272) >> 3) + 2147450880);
    *v28 = -117901064;
    v28[1] = -117901064;
    *(_BYTE *)(((v1 + 2896) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20176));
    v29 = (_DWORD *)(((v1 + 20176) >> 3) + 2147450880);
    *v29 = -117901064;
    v29[1] = -117901064;
    *(_BYTE *)(((v1 + 2880) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 20080));
    v30 = (_DWORD *)(((v1 + 20080) >> 3) + 2147450880);
    *v30 = -117901064;
    v30[1] = -117901064;
    *(_BYTE *)(((v1 + 2864) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19984));
    v31 = (_DWORD *)(((v1 + 19984) >> 3) + 2147450880);
    *v31 = -117901064;
    v31[1] = -117901064;
    *(_BYTE *)(((v1 + 2848) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19888));
    v32 = (_DWORD *)(((v1 + 19888) >> 3) + 2147450880);
    *v32 = -117901064;
    v32[1] = -117901064;
    *(_BYTE *)(((v1 + 2832) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19792));
    v33 = (_DWORD *)(((v1 + 19792) >> 3) + 2147450880);
    *v33 = -117901064;
    v33[1] = -117901064;
    *(_BYTE *)(((v1 + 2816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19696));
    v34 = (_DWORD *)(((v1 + 19696) >> 3) + 2147450880);
    *v34 = -117901064;
    v34[1] = -117901064;
    *(_BYTE *)(((v1 + 2800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19600));
    v35 = (_DWORD *)(((v1 + 19600) >> 3) + 2147450880);
    *v35 = -117901064;
    v35[1] = -117901064;
    *(_BYTE *)(((v1 + 2784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19504));
    v36 = (_DWORD *)(((v1 + 19504) >> 3) + 2147450880);
    *v36 = -117901064;
    v36[1] = -117901064;
    *(_BYTE *)(((v1 + 2768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19408));
    v37 = (_DWORD *)(((v1 + 19408) >> 3) + 2147450880);
    *v37 = -117901064;
    v37[1] = -117901064;
    *(_BYTE *)(((v1 + 2752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19312));
    v38 = (_DWORD *)(((v1 + 19312) >> 3) + 2147450880);
    *v38 = -117901064;
    v38[1] = -117901064;
    *(_BYTE *)(((v1 + 2736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19216));
    v39 = (_DWORD *)(((v1 + 19216) >> 3) + 2147450880);
    *v39 = -117901064;
    v39[1] = -117901064;
    *(_BYTE *)(((v1 + 2720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19120));
    v40 = (_DWORD *)(((v1 + 19120) >> 3) + 2147450880);
    *v40 = -117901064;
    v40[1] = -117901064;
    *(_BYTE *)(((v1 + 2704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 19024));
    v41 = (_DWORD *)(((v1 + 19024) >> 3) + 2147450880);
    *v41 = -117901064;
    v41[1] = -117901064;
    *(_BYTE *)(((v1 + 2688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18928));
    v42 = (_DWORD *)(((v1 + 18928) >> 3) + 2147450880);
    *v42 = -117901064;
    v42[1] = -117901064;
    *(_BYTE *)(((v1 + 2672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18832));
    v43 = (_DWORD *)(((v1 + 18832) >> 3) + 2147450880);
    *v43 = -117901064;
    v43[1] = -117901064;
    *(_BYTE *)(((v1 + 2656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18736));
    v44 = (_DWORD *)(((v1 + 18736) >> 3) + 2147450880);
    *v44 = -117901064;
    v44[1] = -117901064;
    *(_BYTE *)(((v1 + 2640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18640));
    v45 = (_DWORD *)(((v1 + 18640) >> 3) + 2147450880);
    *v45 = -117901064;
    v45[1] = -117901064;
    *(_BYTE *)(((v1 + 2624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18544));
    v46 = (_DWORD *)(((v1 + 18544) >> 3) + 2147450880);
    *v46 = -117901064;
    v46[1] = -117901064;
    *(_BYTE *)(((v1 + 2608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18448));
    v47 = (_DWORD *)(((v1 + 18448) >> 3) + 2147450880);
    *v47 = -117901064;
    v47[1] = -117901064;
    *(_BYTE *)(((v1 + 2592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18352));
    v48 = (_DWORD *)(((v1 + 18352) >> 3) + 2147450880);
    *v48 = -117901064;
    v48[1] = -117901064;
    *(_BYTE *)(((v1 + 2576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18256));
    v49 = (_DWORD *)(((v1 + 18256) >> 3) + 2147450880);
    *v49 = -117901064;
    v49[1] = -117901064;
    *(_BYTE *)(((v1 + 2560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18160));
    v50 = (_DWORD *)(((v1 + 18160) >> 3) + 2147450880);
    *v50 = -117901064;
    v50[1] = -117901064;
    *(_BYTE *)(((v1 + 2544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 18064));
    v51 = (_DWORD *)(((v1 + 18064) >> 3) + 2147450880);
    *v51 = -117901064;
    v51[1] = -117901064;
    *(_BYTE *)(((v1 + 2528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17968));
    v52 = (_DWORD *)(((v1 + 17968) >> 3) + 2147450880);
    *v52 = -117901064;
    v52[1] = -117901064;
    *(_BYTE *)(((v1 + 2512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17872));
    v53 = (_DWORD *)(((v1 + 17872) >> 3) + 2147450880);
    *v53 = -117901064;
    v53[1] = -117901064;
    *(_BYTE *)(((v1 + 2496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17776));
    v54 = (_DWORD *)(((v1 + 17776) >> 3) + 2147450880);
    *v54 = -117901064;
    v54[1] = -117901064;
    *(_BYTE *)(((v1 + 2480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17680));
    v55 = (_DWORD *)(((v1 + 17680) >> 3) + 2147450880);
    *v55 = -117901064;
    v55[1] = -117901064;
    *(_BYTE *)(((v1 + 2464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17584));
    v56 = (_DWORD *)(((v1 + 17584) >> 3) + 2147450880);
    *v56 = -117901064;
    v56[1] = -117901064;
    *(_BYTE *)(((v1 + 2448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17488));
    v57 = (_DWORD *)(((v1 + 17488) >> 3) + 2147450880);
    *v57 = -117901064;
    v57[1] = -117901064;
    *(_BYTE *)(((v1 + 2432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17392));
    v58 = (_DWORD *)(((v1 + 17392) >> 3) + 2147450880);
    *v58 = -117901064;
    v58[1] = -117901064;
    *(_BYTE *)(((v1 + 2416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17296));
    v59 = (_DWORD *)(((v1 + 17296) >> 3) + 2147450880);
    *v59 = -117901064;
    v59[1] = -117901064;
    *(_BYTE *)(((v1 + 2400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17200));
    v60 = (_DWORD *)(((v1 + 17200) >> 3) + 2147450880);
    *v60 = -117901064;
    v60[1] = -117901064;
    *(_BYTE *)(((v1 + 2384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17104));
    v61 = (_DWORD *)(((v1 + 17104) >> 3) + 2147450880);
    *v61 = -117901064;
    v61[1] = -117901064;
    *(_BYTE *)(((v1 + 2368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 17008));
    v62 = (_DWORD *)(((v1 + 17008) >> 3) + 2147450880);
    *v62 = -117901064;
    v62[1] = -117901064;
    *(_BYTE *)(((v1 + 2352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16912));
    v63 = (_DWORD *)(((v1 + 16912) >> 3) + 2147450880);
    *v63 = -117901064;
    v63[1] = -117901064;
    *(_BYTE *)(((v1 + 2336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16816));
    v64 = (_DWORD *)(((v1 + 16816) >> 3) + 2147450880);
    *v64 = -117901064;
    v64[1] = -117901064;
    *(_BYTE *)(((v1 + 2320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16720));
    v65 = (_DWORD *)(((v1 + 16720) >> 3) + 2147450880);
    *v65 = -117901064;
    v65[1] = -117901064;
    *(_BYTE *)(((v1 + 2304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16624));
    v66 = (_DWORD *)(((v1 + 16624) >> 3) + 2147450880);
    *v66 = -117901064;
    v66[1] = -117901064;
    *(_BYTE *)(((v1 + 2288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16528));
    v67 = (_DWORD *)(((v1 + 16528) >> 3) + 2147450880);
    *v67 = -117901064;
    v67[1] = -117901064;
    *(_BYTE *)(((v1 + 2272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16432));
    v68 = (_DWORD *)(((v1 + 16432) >> 3) + 2147450880);
    *v68 = -117901064;
    v68[1] = -117901064;
    *(_BYTE *)(((v1 + 2256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16336));
    v69 = (_DWORD *)(((v1 + 16336) >> 3) + 2147450880);
    *v69 = -117901064;
    v69[1] = -117901064;
    *(_BYTE *)(((v1 + 2240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16240));
    v70 = (_DWORD *)(((v1 + 16240) >> 3) + 2147450880);
    *v70 = -117901064;
    v70[1] = -117901064;
    *(_BYTE *)(((v1 + 2224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16144));
    v71 = (_DWORD *)(((v1 + 16144) >> 3) + 2147450880);
    *v71 = -117901064;
    v71[1] = -117901064;
    *(_BYTE *)(((v1 + 2208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 16048));
    v72 = (_DWORD *)(((v1 + 16048) >> 3) + 2147450880);
    *v72 = -117901064;
    v72[1] = -117901064;
    *(_BYTE *)(((v1 + 2192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15952));
    v73 = (_DWORD *)(((v1 + 15952) >> 3) + 2147450880);
    *v73 = -117901064;
    v73[1] = -117901064;
    *(_BYTE *)(((v1 + 2176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15856));
    v74 = (_DWORD *)(((v1 + 15856) >> 3) + 2147450880);
    *v74 = -117901064;
    v74[1] = -117901064;
    *(_BYTE *)(((v1 + 2160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15760));
    v75 = (_DWORD *)(((v1 + 15760) >> 3) + 2147450880);
    *v75 = -117901064;
    v75[1] = -117901064;
    *(_BYTE *)(((v1 + 2144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15664));
    v76 = (_DWORD *)(((v1 + 15664) >> 3) + 2147450880);
    *v76 = -117901064;
    v76[1] = -117901064;
    *(_BYTE *)(((v1 + 2128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15568));
    v77 = (_DWORD *)(((v1 + 15568) >> 3) + 2147450880);
    *v77 = -117901064;
    v77[1] = -117901064;
    *(_BYTE *)(((v1 + 2112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15472));
    v78 = (_DWORD *)(((v1 + 15472) >> 3) + 2147450880);
    *v78 = -117901064;
    v78[1] = -117901064;
    *(_BYTE *)(((v1 + 2096) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15376));
    v79 = (_DWORD *)(((v1 + 15376) >> 3) + 2147450880);
    *v79 = -117901064;
    v79[1] = -117901064;
    *(_BYTE *)(((v1 + 2080) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15280));
    v80 = (_DWORD *)(((v1 + 15280) >> 3) + 2147450880);
    *v80 = -117901064;
    v80[1] = -117901064;
    *(_BYTE *)(((v1 + 2064) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15184));
    v81 = (_DWORD *)(((v1 + 15184) >> 3) + 2147450880);
    *v81 = -117901064;
    v81[1] = -117901064;
    *(_BYTE *)(((v1 + 2048) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 15088));
    v82 = (_DWORD *)(((v1 + 15088) >> 3) + 2147450880);
    *v82 = -117901064;
    v82[1] = -117901064;
    *(_BYTE *)(((v1 + 2032) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14992));
    v83 = (_DWORD *)(((v1 + 14992) >> 3) + 2147450880);
    *v83 = -117901064;
    v83[1] = -117901064;
    *(_BYTE *)(((v1 + 2016) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14896));
    v84 = (_DWORD *)(((v1 + 14896) >> 3) + 2147450880);
    *v84 = -117901064;
    v84[1] = -117901064;
    *(_BYTE *)(((v1 + 2000) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14800));
    v85 = (_DWORD *)(((v1 + 14800) >> 3) + 2147450880);
    *v85 = -117901064;
    v85[1] = -117901064;
    *(_BYTE *)(((v1 + 1984) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14704));
    v86 = (_DWORD *)(((v1 + 14704) >> 3) + 2147450880);
    *v86 = -117901064;
    v86[1] = -117901064;
    *(_BYTE *)(((v1 + 1968) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14608));
    v87 = (_DWORD *)(((v1 + 14608) >> 3) + 2147450880);
    *v87 = -117901064;
    v87[1] = -117901064;
    *(_BYTE *)(((v1 + 1952) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14512));
    v88 = (_DWORD *)(((v1 + 14512) >> 3) + 2147450880);
    *v88 = -117901064;
    v88[1] = -117901064;
    *(_BYTE *)(((v1 + 1936) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14416));
    v89 = (_DWORD *)(((v1 + 14416) >> 3) + 2147450880);
    *v89 = -117901064;
    v89[1] = -117901064;
    *(_BYTE *)(((v1 + 1920) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14320));
    v90 = (_DWORD *)(((v1 + 14320) >> 3) + 2147450880);
    *v90 = -117901064;
    v90[1] = -117901064;
    *(_BYTE *)(((v1 + 1904) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14224));
    v91 = (_DWORD *)(((v1 + 14224) >> 3) + 2147450880);
    *v91 = -117901064;
    v91[1] = -117901064;
    *(_BYTE *)(((v1 + 1888) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14128));
    v92 = (_DWORD *)(((v1 + 14128) >> 3) + 2147450880);
    *v92 = -117901064;
    v92[1] = -117901064;
    *(_BYTE *)(((v1 + 1872) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 14032));
    v93 = (_DWORD *)(((v1 + 14032) >> 3) + 2147450880);
    *v93 = -117901064;
    v93[1] = -117901064;
    *(_BYTE *)(((v1 + 1856) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13936));
    v94 = (_DWORD *)(((v1 + 13936) >> 3) + 2147450880);
    *v94 = -117901064;
    v94[1] = -117901064;
    *(_BYTE *)(((v1 + 1840) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13840));
    v95 = (_DWORD *)(((v1 + 13840) >> 3) + 2147450880);
    *v95 = -117901064;
    v95[1] = -117901064;
    *(_BYTE *)(((v1 + 1824) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13744));
    v96 = (_DWORD *)(((v1 + 13744) >> 3) + 2147450880);
    *v96 = -117901064;
    v96[1] = -117901064;
    *(_BYTE *)(((v1 + 1808) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13648));
    v97 = (_DWORD *)(((v1 + 13648) >> 3) + 2147450880);
    *v97 = -117901064;
    v97[1] = -117901064;
    *(_BYTE *)(((v1 + 1792) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13552));
    v98 = (_DWORD *)(((v1 + 13552) >> 3) + 2147450880);
    *v98 = -117901064;
    v98[1] = -117901064;
    *(_BYTE *)(((v1 + 1776) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13456));
    v99 = (_DWORD *)(((v1 + 13456) >> 3) + 2147450880);
    *v99 = -117901064;
    v99[1] = -117901064;
    *(_BYTE *)(((v1 + 1760) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13360));
    v100 = (_DWORD *)(((v1 + 13360) >> 3) + 2147450880);
    *v100 = -117901064;
    v100[1] = -117901064;
    *(_BYTE *)(((v1 + 1744) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13264));
    v101 = (_DWORD *)(((v1 + 13264) >> 3) + 2147450880);
    *v101 = -117901064;
    v101[1] = -117901064;
    *(_BYTE *)(((v1 + 1728) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13168));
    v102 = (_DWORD *)(((v1 + 13168) >> 3) + 2147450880);
    *v102 = -117901064;
    v102[1] = -117901064;
    *(_BYTE *)(((v1 + 1712) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 13072));
    v103 = (_DWORD *)(((v1 + 13072) >> 3) + 2147450880);
    *v103 = -117901064;
    v103[1] = -117901064;
    *(_BYTE *)(((v1 + 1696) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12976));
    v104 = (_DWORD *)(((v1 + 12976) >> 3) + 2147450880);
    *v104 = -117901064;
    v104[1] = -117901064;
    *(_BYTE *)(((v1 + 1680) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12880));
    v105 = (_DWORD *)(((v1 + 12880) >> 3) + 2147450880);
    *v105 = -117901064;
    v105[1] = -117901064;
    *(_BYTE *)(((v1 + 1664) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12784));
    v106 = (_DWORD *)(((v1 + 12784) >> 3) + 2147450880);
    *v106 = -117901064;
    v106[1] = -117901064;
    *(_BYTE *)(((v1 + 1648) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12688));
    v107 = (_DWORD *)(((v1 + 12688) >> 3) + 2147450880);
    *v107 = -117901064;
    v107[1] = -117901064;
    *(_BYTE *)(((v1 + 1632) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12592));
    v108 = (_DWORD *)(((v1 + 12592) >> 3) + 2147450880);
    *v108 = -117901064;
    v108[1] = -117901064;
    *(_BYTE *)(((v1 + 1616) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12496));
    v109 = (_DWORD *)(((v1 + 12496) >> 3) + 2147450880);
    *v109 = -117901064;
    v109[1] = -117901064;
    *(_BYTE *)(((v1 + 1600) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12400));
    v110 = (_DWORD *)(((v1 + 12400) >> 3) + 2147450880);
    *v110 = -117901064;
    v110[1] = -117901064;
    *(_BYTE *)(((v1 + 1584) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12304));
    v111 = (_DWORD *)(((v1 + 12304) >> 3) + 2147450880);
    *v111 = -117901064;
    v111[1] = -117901064;
    *(_BYTE *)(((v1 + 1568) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12208));
    v112 = (_DWORD *)(((v1 + 12208) >> 3) + 2147450880);
    *v112 = -117901064;
    v112[1] = -117901064;
    *(_BYTE *)(((v1 + 1552) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12112));
    v113 = (_DWORD *)(((v1 + 12112) >> 3) + 2147450880);
    *v113 = -117901064;
    v113[1] = -117901064;
    *(_BYTE *)(((v1 + 1536) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 12016));
    v114 = (_DWORD *)(((v1 + 12016) >> 3) + 2147450880);
    *v114 = -117901064;
    v114[1] = -117901064;
    *(_BYTE *)(((v1 + 1520) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11920));
    v115 = (_DWORD *)(((v1 + 11920) >> 3) + 2147450880);
    *v115 = -117901064;
    v115[1] = -117901064;
    *(_BYTE *)(((v1 + 1504) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11824));
    v116 = (_DWORD *)(((v1 + 11824) >> 3) + 2147450880);
    *v116 = -117901064;
    v116[1] = -117901064;
    *(_BYTE *)(((v1 + 1488) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11728));
    v117 = (_DWORD *)(((v1 + 11728) >> 3) + 2147450880);
    *v117 = -117901064;
    v117[1] = -117901064;
    *(_BYTE *)(((v1 + 1472) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11632));
    v118 = (_DWORD *)(((v1 + 11632) >> 3) + 2147450880);
    *v118 = -117901064;
    v118[1] = -117901064;
    *(_BYTE *)(((v1 + 1456) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11536));
    v119 = (_DWORD *)(((v1 + 11536) >> 3) + 2147450880);
    *v119 = -117901064;
    v119[1] = -117901064;
    *(_BYTE *)(((v1 + 1440) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11440));
    v120 = (_DWORD *)(((v1 + 11440) >> 3) + 2147450880);
    *v120 = -117901064;
    v120[1] = -117901064;
    *(_BYTE *)(((v1 + 1424) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11344));
    v121 = (_DWORD *)(((v1 + 11344) >> 3) + 2147450880);
    *v121 = -117901064;
    v121[1] = -117901064;
    *(_BYTE *)(((v1 + 1408) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11248));
    v122 = (_DWORD *)(((v1 + 11248) >> 3) + 2147450880);
    *v122 = -117901064;
    v122[1] = -117901064;
    *(_BYTE *)(((v1 + 1392) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11152));
    v123 = (_DWORD *)(((v1 + 11152) >> 3) + 2147450880);
    *v123 = -117901064;
    v123[1] = -117901064;
    *(_BYTE *)(((v1 + 1376) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 11056));
    v124 = (_DWORD *)(((v1 + 11056) >> 3) + 2147450880);
    *v124 = -117901064;
    v124[1] = -117901064;
    *(_BYTE *)(((v1 + 1360) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10960));
    v125 = (_DWORD *)(((v1 + 10960) >> 3) + 2147450880);
    *v125 = -117901064;
    v125[1] = -117901064;
    *(_BYTE *)(((v1 + 1344) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10864));
    v126 = (_DWORD *)(((v1 + 10864) >> 3) + 2147450880);
    *v126 = -117901064;
    v126[1] = -117901064;
    *(_BYTE *)(((v1 + 1328) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10768));
    v127 = (_DWORD *)(((v1 + 10768) >> 3) + 2147450880);
    *v127 = -117901064;
    v127[1] = -117901064;
    *(_BYTE *)(((v1 + 1312) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10672));
    v128 = (_DWORD *)(((v1 + 10672) >> 3) + 2147450880);
    *v128 = -117901064;
    v128[1] = -117901064;
    *(_BYTE *)(((v1 + 1296) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10576));
    v129 = (_DWORD *)(((v1 + 10576) >> 3) + 2147450880);
    *v129 = -117901064;
    v129[1] = -117901064;
    *(_BYTE *)(((v1 + 1280) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10480));
    v130 = (_DWORD *)(((v1 + 10480) >> 3) + 2147450880);
    *v130 = -117901064;
    v130[1] = -117901064;
    *(_BYTE *)(((v1 + 1264) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10384));
    v131 = (_DWORD *)(((v1 + 10384) >> 3) + 2147450880);
    *v131 = -117901064;
    v131[1] = -117901064;
    *(_BYTE *)(((v1 + 1248) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10288));
    v132 = (_DWORD *)(((v1 + 10288) >> 3) + 2147450880);
    *v132 = -117901064;
    v132[1] = -117901064;
    *(_BYTE *)(((v1 + 1232) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10192));
    v133 = (_DWORD *)(((v1 + 10192) >> 3) + 2147450880);
    *v133 = -117901064;
    v133[1] = -117901064;
    *(_BYTE *)(((v1 + 1216) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10096));
    v134 = (_DWORD *)(((v1 + 10096) >> 3) + 2147450880);
    *v134 = -117901064;
    v134[1] = -117901064;
    *(_BYTE *)(((v1 + 1200) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 10000));
    v135 = (_DWORD *)(((v1 + 10000) >> 3) + 2147450880);
    *v135 = -117901064;
    v135[1] = -117901064;
    *(_BYTE *)(((v1 + 1184) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9904));
    v136 = (_DWORD *)(((v1 + 9904) >> 3) + 2147450880);
    *v136 = -117901064;
    v136[1] = -117901064;
    *(_BYTE *)(((v1 + 1168) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9808));
    v137 = (_DWORD *)(((v1 + 9808) >> 3) + 2147450880);
    *v137 = -117901064;
    v137[1] = -117901064;
    *(_BYTE *)(((v1 + 1152) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9712));
    v138 = (_DWORD *)(((v1 + 9712) >> 3) + 2147450880);
    *v138 = -117901064;
    v138[1] = -117901064;
    *(_BYTE *)(((v1 + 1136) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9616));
    v139 = (_DWORD *)(((v1 + 9616) >> 3) + 2147450880);
    *v139 = -117901064;
    v139[1] = -117901064;
    *(_BYTE *)(((v1 + 1120) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9520));
    v140 = (_DWORD *)(((v1 + 9520) >> 3) + 2147450880);
    *v140 = -117901064;
    v140[1] = -117901064;
    *(_BYTE *)(((v1 + 1104) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9424));
    v141 = (_DWORD *)(((v1 + 9424) >> 3) + 2147450880);
    *v141 = -117901064;
    v141[1] = -117901064;
    *(_BYTE *)(((v1 + 1088) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9328));
    v142 = (_DWORD *)(((v1 + 9328) >> 3) + 2147450880);
    *v142 = -117901064;
    v142[1] = -117901064;
    *(_BYTE *)(((v1 + 1072) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9232));
    v143 = (_DWORD *)(((v1 + 9232) >> 3) + 2147450880);
    *v143 = -117901064;
    v143[1] = -117901064;
    *(_BYTE *)(((v1 + 1056) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9136));
    v144 = (_DWORD *)(((v1 + 9136) >> 3) + 2147450880);
    *v144 = -117901064;
    v144[1] = -117901064;
    *(_BYTE *)(((v1 + 1040) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 9040));
    v145 = (_DWORD *)(((v1 + 9040) >> 3) + 2147450880);
    *v145 = -117901064;
    v145[1] = -117901064;
    *(_BYTE *)(((v1 + 1024) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8944));
    v146 = (_DWORD *)(((v1 + 8944) >> 3) + 2147450880);
    *v146 = -117901064;
    v146[1] = -117901064;
    *(_BYTE *)(((v1 + 1008) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8848));
    v147 = (_DWORD *)(((v1 + 8848) >> 3) + 2147450880);
    *v147 = -117901064;
    v147[1] = -117901064;
    *(_BYTE *)(((v1 + 992) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8752));
    v148 = (_DWORD *)(((v1 + 8752) >> 3) + 2147450880);
    *v148 = -117901064;
    v148[1] = -117901064;
    *(_BYTE *)(((v1 + 976) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8656));
    v149 = (_DWORD *)(((v1 + 8656) >> 3) + 2147450880);
    *v149 = -117901064;
    v149[1] = -117901064;
    *(_BYTE *)(((v1 + 960) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8560));
    v150 = (_DWORD *)(((v1 + 8560) >> 3) + 2147450880);
    *v150 = -117901064;
    v150[1] = -117901064;
    *(_BYTE *)(((v1 + 944) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8464));
    v151 = (_DWORD *)(((v1 + 8464) >> 3) + 2147450880);
    *v151 = -117901064;
    v151[1] = -117901064;
    *(_BYTE *)(((v1 + 928) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8368));
    v152 = (_DWORD *)(((v1 + 8368) >> 3) + 2147450880);
    *v152 = -117901064;
    v152[1] = -117901064;
    *(_BYTE *)(((v1 + 912) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8272));
    v153 = (_DWORD *)(((v1 + 8272) >> 3) + 2147450880);
    *v153 = -117901064;
    v153[1] = -117901064;
    *(_BYTE *)(((v1 + 896) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8176));
    v154 = (_DWORD *)(((v1 + 8176) >> 3) + 2147450880);
    *v154 = -117901064;
    v154[1] = -117901064;
    *(_BYTE *)(((v1 + 880) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 8080));
    v155 = (_DWORD *)(((v1 + 8080) >> 3) + 2147450880);
    *v155 = -117901064;
    v155[1] = -117901064;
    *(_BYTE *)(((v1 + 864) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7984));
    v156 = (_DWORD *)(((v1 + 7984) >> 3) + 2147450880);
    *v156 = -117901064;
    v156[1] = -117901064;
    *(_BYTE *)(((v1 + 848) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7888));
    v157 = (_DWORD *)(((v1 + 7888) >> 3) + 2147450880);
    *v157 = -117901064;
    v157[1] = -117901064;
    *(_BYTE *)(((v1 + 832) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7792));
    v158 = (_DWORD *)(((v1 + 7792) >> 3) + 2147450880);
    *v158 = -117901064;
    v158[1] = -117901064;
    *(_BYTE *)(((v1 + 816) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7696));
    v159 = (_DWORD *)(((v1 + 7696) >> 3) + 2147450880);
    *v159 = -117901064;
    v159[1] = -117901064;
    *(_BYTE *)(((v1 + 800) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7600));
    v160 = (_DWORD *)(((v1 + 7600) >> 3) + 2147450880);
    *v160 = -117901064;
    v160[1] = -117901064;
    *(_BYTE *)(((v1 + 784) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7504));
    v161 = (_DWORD *)(((v1 + 7504) >> 3) + 2147450880);
    *v161 = -117901064;
    v161[1] = -117901064;
    *(_BYTE *)(((v1 + 768) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7408));
    v162 = (_DWORD *)(((v1 + 7408) >> 3) + 2147450880);
    *v162 = -117901064;
    v162[1] = -117901064;
    *(_BYTE *)(((v1 + 752) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7312));
    v163 = (_DWORD *)(((v1 + 7312) >> 3) + 2147450880);
    *v163 = -117901064;
    v163[1] = -117901064;
    *(_BYTE *)(((v1 + 736) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7216));
    v164 = (_DWORD *)(((v1 + 7216) >> 3) + 2147450880);
    *v164 = -117901064;
    v164[1] = -117901064;
    *(_BYTE *)(((v1 + 720) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7120));
    v165 = (_DWORD *)(((v1 + 7120) >> 3) + 2147450880);
    *v165 = -117901064;
    v165[1] = -117901064;
    *(_BYTE *)(((v1 + 704) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 7024));
    v166 = (_DWORD *)(((v1 + 7024) >> 3) + 2147450880);
    *v166 = -117901064;
    v166[1] = -117901064;
    *(_BYTE *)(((v1 + 688) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6928));
    v167 = (_DWORD *)(((v1 + 6928) >> 3) + 2147450880);
    *v167 = -117901064;
    v167[1] = -117901064;
    *(_BYTE *)(((v1 + 672) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6832));
    v168 = (_DWORD *)(((v1 + 6832) >> 3) + 2147450880);
    *v168 = -117901064;
    v168[1] = -117901064;
    *(_BYTE *)(((v1 + 656) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6736));
    v169 = (_DWORD *)(((v1 + 6736) >> 3) + 2147450880);
    *v169 = -117901064;
    v169[1] = -117901064;
    *(_BYTE *)(((v1 + 640) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6640));
    v170 = (_DWORD *)(((v1 + 6640) >> 3) + 2147450880);
    *v170 = -117901064;
    v170[1] = -117901064;
    *(_BYTE *)(((v1 + 624) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6544));
    v171 = (_DWORD *)(((v1 + 6544) >> 3) + 2147450880);
    *v171 = -117901064;
    v171[1] = -117901064;
    *(_BYTE *)(((v1 + 608) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6448));
    v172 = (_DWORD *)(((v1 + 6448) >> 3) + 2147450880);
    *v172 = -117901064;
    v172[1] = -117901064;
    *(_BYTE *)(((v1 + 592) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6352));
    v173 = (_DWORD *)(((v1 + 6352) >> 3) + 2147450880);
    *v173 = -117901064;
    v173[1] = -117901064;
    *(_BYTE *)(((v1 + 576) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6256));
    v174 = (_DWORD *)(((v1 + 6256) >> 3) + 2147450880);
    *v174 = -117901064;
    v174[1] = -117901064;
    *(_BYTE *)(((v1 + 560) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6160));
    v175 = (_DWORD *)(((v1 + 6160) >> 3) + 2147450880);
    *v175 = -117901064;
    v175[1] = -117901064;
    *(_BYTE *)(((v1 + 544) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 6064));
    v176 = (_DWORD *)(((v1 + 6064) >> 3) + 2147450880);
    *v176 = -117901064;
    v176[1] = -117901064;
    *(_BYTE *)(((v1 + 528) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5968));
    v177 = (_DWORD *)(((v1 + 5968) >> 3) + 2147450880);
    *v177 = -117901064;
    v177[1] = -117901064;
    *(_BYTE *)(((v1 + 512) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5872));
    v178 = (_DWORD *)(((v1 + 5872) >> 3) + 2147450880);
    *v178 = -117901064;
    v178[1] = -117901064;
    *(_BYTE *)(((v1 + 496) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5776));
    v179 = (_DWORD *)(((v1 + 5776) >> 3) + 2147450880);
    *v179 = -117901064;
    v179[1] = -117901064;
    *(_BYTE *)(((v1 + 480) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5680));
    v180 = (_DWORD *)(((v1 + 5680) >> 3) + 2147450880);
    *v180 = -117901064;
    v180[1] = -117901064;
    *(_BYTE *)(((v1 + 464) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5584));
    v181 = (_DWORD *)(((v1 + 5584) >> 3) + 2147450880);
    *v181 = -117901064;
    v181[1] = -117901064;
    *(_BYTE *)(((v1 + 448) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5488));
    v182 = (_DWORD *)(((v1 + 5488) >> 3) + 2147450880);
    *v182 = -117901064;
    v182[1] = -117901064;
    *(_BYTE *)(((v1 + 432) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5392));
    v183 = (_DWORD *)(((v1 + 5392) >> 3) + 2147450880);
    *v183 = -117901064;
    v183[1] = -117901064;
    *(_BYTE *)(((v1 + 416) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5296));
    v184 = (_DWORD *)(((v1 + 5296) >> 3) + 2147450880);
    *v184 = -117901064;
    v184[1] = -117901064;
    *(_BYTE *)(((v1 + 400) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5200));
    v185 = (_DWORD *)(((v1 + 5200) >> 3) + 2147450880);
    *v185 = -117901064;
    v185[1] = -117901064;
    *(_BYTE *)(((v1 + 384) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5104));
    v186 = (_DWORD *)(((v1 + 5104) >> 3) + 2147450880);
    *v186 = -117901064;
    v186[1] = -117901064;
    *(_BYTE *)(((v1 + 368) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 5008));
    v187 = (_DWORD *)(((v1 + 5008) >> 3) + 2147450880);
    *v187 = -117901064;
    v187[1] = -117901064;
    *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4912));
    v188 = (_DWORD *)(((v1 + 4912) >> 3) + 2147450880);
    *v188 = -117901064;
    v188[1] = -117901064;
    *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4816));
    v189 = (_DWORD *)(((v1 + 4816) >> 3) + 2147450880);
    *v189 = -117901064;
    v189[1] = -117901064;
    *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4720));
    v190 = (_DWORD *)(((v1 + 4720) >> 3) + 2147450880);
    *v190 = -117901064;
    v190[1] = -117901064;
    *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4624));
    v191 = (_DWORD *)(((v1 + 4624) >> 3) + 2147450880);
    *v191 = -117901064;
    v191[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4528));
    v192 = (_DWORD *)(((v1 + 4528) >> 3) + 2147450880);
    *v192 = -117901064;
    v192[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4432));
    v193 = (_DWORD *)(((v1 + 4432) >> 3) + 2147450880);
    *v193 = -117901064;
    v193[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4336));
    v194 = (_DWORD *)(((v1 + 4336) >> 3) + 2147450880);
    *v194 = -117901064;
    v194[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4240));
    v195 = (_DWORD *)(((v1 + 4240) >> 3) + 2147450880);
    *v195 = -117901064;
    v195[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4144));
    v196 = (_DWORD *)(((v1 + 4144) >> 3) + 2147450880);
    *v196 = -117901064;
    v196[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 4048));
    v197 = (_DWORD *)(((v1 + 4048) >> 3) + 2147450880);
    *v197 = -117901064;
    v197[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3952));
    v198 = (_DWORD *)(((v1 + 3952) >> 3) + 2147450880);
    *v198 = -117901064;
    v198[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3856));
    v199 = (_DWORD *)(((v1 + 3856) >> 3) + 2147450880);
    *v199 = -117901064;
    v199[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3760));
    v200 = (_DWORD *)(((v1 + 3760) >> 3) + 2147450880);
    *v200 = -117901064;
    v200[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3664));
    v201 = (_DWORD *)(((v1 + 3664) >> 3) + 2147450880);
    *v201 = -117901064;
    v201[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3568));
    v202 = (_DWORD *)(((v1 + 3568) >> 3) + 2147450880);
    *v202 = -117901064;
    v202[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3472));
    v203 = (_DWORD *)(((v1 + 3472) >> 3) + 2147450880);
    *v203 = -117901064;
    v203[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3376));
    v204 = (_DWORD *)(((v1 + 3376) >> 3) + 2147450880);
    *v204 = -117901064;
    v204[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 3280));
  }
  if ( v206 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF9230) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 4664) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_10(v1, 37312LL, v206);
  }
  return &data::getItemLimitTypeEnumMap[abi:cxx11](void)::m;
};

// Line 5799: range 000000000FAE072F-000000000FAE0AA2
const char *__fastcall data::enumValToStr(data::GeneralRoutineType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:5798 64 8 9 iter:5801 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getGeneralRoutineTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::GeneralRoutineType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::GeneralRoutineType,std::pair<std::string,std::string>>::find(map, (const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::GeneralRoutineType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::GeneralRoutineType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      5804);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_GeneralRoutineType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::GeneralRoutineType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5811: range 000000000FAE0AA3-000000000FAE105B
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::GeneralRoutineType>,false,true>::pointer v10; // rax
  data::GeneralRoutineType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::GeneralRoutineType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:5820 96 8 9 <unknown> 128 8 6 s:5810 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getGeneralRoutineTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::GeneralRoutineType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::GeneralRoutineType>::find(
                                                                                               m,
                                                                                               (const std::unordered_map<std::string,data::GeneralRoutineType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::GeneralRoutineType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::GeneralRoutineType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::GeneralRoutineType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GeneralRoutineType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GeneralRoutineType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        5823);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::GeneralRoutineType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::GeneralRoutineType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      5814);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 5832: range 000000000FAE105C-000000000FAE1981
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::GeneralRoutineType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::GeneralRoutineType>,false,true>::pointer v12; // rax
  data::GeneralRoutineType second; // ecx
  char v14; // dl
  char v16[528]; // [rsp+20h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 8 7 "
                        "it:5844 144 8 9 <unknown> 176 8 6 s:5831 208 32 9 <unknown> 272 32 9 <unknown> 336 32 9 <unknown"
                        "> 400 40 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = 61956;
  v4[536862723] = -234881024;
  v4[536862724] = 62194;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862727] = -219021312;
  v4[536862728] = 62194;
  v4[536862729] = -219021312;
  v4[536862730] = 62194;
  v4[536862731] = -219021312;
  v4[536862732] = 62194;
  v4[536862733] = -218103808;
  v4[536862734] = -202116109;
  *(_QWORD *)(v2 + 176) = s;
  if ( *(_QWORD *)(v2 + 176) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::GeneralRoutineType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::GeneralRoutineType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::GeneralRoutineType>::pair<char const(&)[22],data::GeneralRoutineType,true>(
        (std::pair<const std::string,data::GeneralRoutineType> *const)(v2 + 400),
        (const char (*)[22])"ROUTINE_SNOW_MOUNTAIN",
        (data::GeneralRoutineType *)(v2 + 96));
      std::allocator<std::pair<std::string const,data::GeneralRoutineType>>::allocator((std::allocator<std::pair<const std::string,data::GeneralRoutineType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::GeneralRoutineType>::unordered_map(
        &data::enumStrToVal(char const*,data::GeneralRoutineType &)::m,
        (std::initializer_list<std::pair<const std::string,data::GeneralRoutineType> >)__PAIR128__(1LL, v2 + 400),
        0LL,
        (const std::unordered_map<std::string,data::GeneralRoutineType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::GeneralRoutineType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::GeneralRoutineType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::GeneralRoutineType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::GeneralRoutineType>::~unordered_map,
        &data::enumStrToVal(char const*,data::GeneralRoutineType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::GeneralRoutineType>>::~allocator((std::allocator<std::pair<const std::string,data::GeneralRoutineType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::GeneralRoutineType> *)(v2 + 440);
            i != (std::pair<const std::string,data::GeneralRoutineType> *)(v2 + 400);
            std::pair<std::string const,data::GeneralRoutineType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 400) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_BYTE *)(v7 + 4) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v8 = *(const char **)(v2 + 176);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 272),
      v8,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 112, v8);
    *(std::unordered_map<std::string,data::GeneralRoutineType>::iterator *)(v2 + 112) = std::unordered_map<std::string,data::GeneralRoutineType>::find(
                                                                                          &data::enumStrToVal(char const*,data::GeneralRoutineType &)::m,
                                                                                          (const std::unordered_map<std::string,data::GeneralRoutineType>::key_type *)(v2 + 272));
    std::string::~string((void *)(v2 + 272));
    *(_DWORD *)(((v2 + 272) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v2 + 272);
    *(std::unordered_map<std::string,data::GeneralRoutineType>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::GeneralRoutineType>::end(&data::enumStrToVal(char const*,data::GeneralRoutineType &)::m);
    v9 = (char *)(v2 + 144);
    v10 = std::__detail::operator==<std::pair<std::string const,data::GeneralRoutineType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GeneralRoutineType>,true> *)(v2 + 112),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GeneralRoutineType>,true> *)(v2 + 144));
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 336) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 336) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 111) & 7) >= *(_BYTE *)(((v2 + 367) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 336, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 336),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        5847);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 336),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 176));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 336));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::GeneralRoutineType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::GeneralRoutineType>,false,true> *const)(v2 + 112));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 208) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 48 + 31) & 7) >= *(_BYTE *)(((v2 + 239) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 208, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 208),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      5835);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 208),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 208));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 5856: range 000000000FAE1982-000000000FAE1998
const char *__cdecl data::getDescription(data::GeneralRoutineType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 5861: range 000000000FAE1999-000000000FAE1B4E
bool __cdecl data::isValidGeneralRoutineType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:5862 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidGeneralRoutineType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getGeneralRoutineTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::GeneralRoutineType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::GeneralRoutineType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getGeneralRoutineTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::GeneralRoutineType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::GeneralRoutineType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5867: range 000000000FAE1B4F-000000000FAE1CB0
bool __cdecl data::isValidGeneralRoutineTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::GeneralRoutineType> *v5; // rcx
  const std::unordered_map<std::string,data::GeneralRoutineType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidGeneralRoutineTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getGeneralRoutineTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::GeneralRoutineType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::GeneralRoutineType>::end(v5);
  v6 = data::getGeneralRoutineTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::GeneralRoutineType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::GeneralRoutineType>::find(
                                                                                             v6,
                                                                                             name);
  result = std::__detail::operator!=<std::pair<std::string const,data::GeneralRoutineType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GeneralRoutineType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GeneralRoutineType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5872: range 000000000FAE1CB1-000000000FAE20B7
const std::unordered_map<std::string,data::GeneralRoutineType> *__cdecl data::getGeneralRoutineTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::GeneralRoutineType> *i; // r14
  const std::unordered_map<std::string,data::GeneralRoutineType> *result; // rax
  char v6[272]; // [rsp+10h] [rbp-110h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_2(224LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 80 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getGeneralRoutineTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = 61956;
  v3[536862726] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getGeneralRoutineTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getGeneralRoutineTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::GeneralRoutineType>::pair<char const(&)[18],data::GeneralRoutineType,true>(
      (std::pair<const std::string,data::GeneralRoutineType> *const)(v1 + 112),
      (const char (*)[18])"ROUTINE_TYPE_NONE",
      (data::GeneralRoutineType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "ROUTINE_TYPE_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::GeneralRoutineType>::pair<char const(&)[22],data::GeneralRoutineType,true>(
      (std::pair<const std::string,data::GeneralRoutineType> *const)(v1 + 152),
      (const char (*)[22])"ROUTINE_SNOW_MOUNTAIN",
      (data::GeneralRoutineType *)(v1 + 96));
    std::allocator<std::pair<std::string const,data::GeneralRoutineType>>::allocator((std::allocator<std::pair<const std::string,data::GeneralRoutineType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::GeneralRoutineType>::unordered_map(
      &data::getGeneralRoutineTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::GeneralRoutineType> >)__PAIR128__(2LL, v1 + 112),
      0LL,
      (const std::unordered_map<std::string,data::GeneralRoutineType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::GeneralRoutineType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::GeneralRoutineType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getGeneralRoutineTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::GeneralRoutineType>::~unordered_map,
      &data::getGeneralRoutineTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::GeneralRoutineType>>::~allocator((std::allocator<std::pair<const std::string,data::GeneralRoutineType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::GeneralRoutineType> *)(v1 + 192);
          i != (std::pair<const std::string,data::GeneralRoutineType> *)(v1 + 112);
          std::pair<std::string const,data::GeneralRoutineType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getGeneralRoutineTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8018) = -168430091;
  }
  return result;
};

// Line 5882: range 000000000FAE20B8-000000000FAE2675
const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >> *__cdecl data::getGeneralRoutineTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >> *result; // rax
  char v8[560]; // [rsp+10h] [rbp-230h] BYREF

  v1 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(512LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 64 9 <unknown> 208 64 "
                        "9 <unknown> 304 144 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getGeneralRoutineTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = 61956;
  v3[536862725] = -219021312;
  v3[536862726] = 62194;
  v3[536862728] = -219021312;
  v3[536862729] = 62194;
  v3[536862734] = -202116109;
  v3[536862735] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getGeneralRoutineTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getGeneralRoutineTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 112),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[18])"ROUTINE_TYPE_NONE");
    std::pair<data::GeneralRoutineType const,std::pair<std::string,std::string>>::pair<data::GeneralRoutineType,true>(
      (std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > *const)(v1 + 304),
      (data::GeneralRoutineType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[22],char const(&)[22],true>(
      (std::pair<std::string,std::string > *const)(v1 + 208),
      (const char (*)[22])"ROUTINE_SNOW_MOUNTAIN",
      (const char (*)[22])"ROUTINE_SNOW_MOUNTAIN");
    std::pair<data::GeneralRoutineType const,std::pair<std::string,std::string>>::pair<data::GeneralRoutineType,true>(
      (std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > *const)(v1 + 376),
      (data::GeneralRoutineType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 208));
    std::allocator<std::pair<data::GeneralRoutineType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::GeneralRoutineType,std::pair<std::string,std::string>>::map(
      &data::getGeneralRoutineTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > >)__PAIR128__(2LL, v1 + 304),
      (const std::less<data::GeneralRoutineType> *)(v1 + 48),
      (const std::map<data::GeneralRoutineType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getGeneralRoutineTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::GeneralRoutineType,std::pair<std::string,std::string>>::~map,
      &data::getGeneralRoutineTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::GeneralRoutineType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > *)(v1 + 448);
          i != (std::pair<const data::GeneralRoutineType,std::pair<std::string,std::string > > *)(v1 + 304);
          std::pair<data::GeneralRoutineType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 304) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_WORD *)(v5 + 16) = -1800;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 208));
    v6 = (_DWORD *)(((v1 + 208) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 112));
  }
  result = &data::getGeneralRoutineTypeEnumMap[abi:cxx11](void)::m;
  if ( v8 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0LL;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5892: range 000000000FAE2676-000000000FAE29E9
const char *__fastcall data::enumValToStr(data::CaptureCodexShowType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:5891 64 8 9 iter:5894 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getCaptureCodexShowTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::CaptureCodexShowType,std::pair<std::string,std::string>>::find(map, (const std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::CaptureCodexShowType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      5897);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_CaptureCodexShowType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::CaptureCodexShowType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5904: range 000000000FAE29EA-000000000FAE2FA2
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::CaptureCodexShowType>,false,true>::pointer v10; // rax
  data::CaptureCodexShowType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::CaptureCodexShowType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:5913 96 8 9 <unknown> 128 8 6 s:5903 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getCaptureCodexShowTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::CaptureCodexShowType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::CaptureCodexShowType>::find(
                                                                                                 m,
                                                                                                 (const std::unordered_map<std::string,data::CaptureCodexShowType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::CaptureCodexShowType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::CaptureCodexShowType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::CaptureCodexShowType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CaptureCodexShowType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CaptureCodexShowType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        5916);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::CaptureCodexShowType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::CaptureCodexShowType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      5907);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 5925: range 000000000FAE2FA3-000000000FAE396C
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  std::pair<const std::string,data::CaptureCodexShowType> *i; // r14
  unsigned __int64 v7; // rax
  const char *v8; // rsi
  char *v9; // rsi
  bool v10; // al
  common::milog::MiLogStream *v11; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::CaptureCodexShowType>,false,true>::pointer v12; // rax
  data::CaptureCodexShowType second; // ecx
  char v14; // dl
  char v16[592]; // [rsp+20h] [rbp-250h] BYREF

  v2 = (unsigned __int64)v16;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(544LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 8 7 it:5938 176 8 9 <unknown> 208 8 6 s:5924 240 32 9 <unknown> 304 32 9 <unknown"
                        "> 368 32 9 <unknown> 432 80 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234556927;
  v4[536862724] = 61956;
  v4[536862724] = -234881024;
  v4[536862725] = 62194;
  v4[536862725] = -234881024;
  v4[536862726] = 62194;
  v4[536862726] = -234881024;
  v4[536862727] = 62194;
  v4[536862728] = -219021312;
  v4[536862729] = 62194;
  v4[536862730] = -219021312;
  v4[536862731] = 62194;
  v4[536862732] = -219021312;
  v4[536862733] = 62194;
  v4[536862736] = -202116109;
  *(_QWORD *)(v2 + 208) = s;
  if ( *(_QWORD *)(v2 + 208) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::CaptureCodexShowType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::CaptureCodexShowType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, e);
      *(_DWORD *)(v2 + 112) = 1;
      std::pair<std::string const,data::CaptureCodexShowType>::pair<char const(&)[10],data::CaptureCodexShowType,true>(
        (std::pair<const std::string,data::CaptureCodexShowType> *const)(v2 + 432),
        (const char (*)[10])byte_1A65F340,
        (data::CaptureCodexShowType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A65F340);
      *(_DWORD *)(v2 + 128) = 2;
      std::pair<std::string const,data::CaptureCodexShowType>::pair<char const(&)[13],data::CaptureCodexShowType,true>(
        (std::pair<const std::string,data::CaptureCodexShowType> *const)(v2 + 472),
        (const char (*)[13])byte_1A65F380,
        (data::CaptureCodexShowType *)(v2 + 128));
      std::allocator<std::pair<std::string const,data::CaptureCodexShowType>>::allocator((std::allocator<std::pair<const std::string,data::CaptureCodexShowType> > *const)(v2 + 80));
      std::unordered_map<std::string,data::CaptureCodexShowType>::unordered_map(
        &data::enumStrToVal(char const*,data::CaptureCodexShowType &)::m,
        (std::initializer_list<std::pair<const std::string,data::CaptureCodexShowType> >)__PAIR128__(2LL, v2 + 432),
        0LL,
        (const std::unordered_map<std::string,data::CaptureCodexShowType>::hasher *)(v2 + 48),
        (const std::unordered_map<std::string,data::CaptureCodexShowType>::key_equal *)(v2 + 64),
        (const std::unordered_map<std::string,data::CaptureCodexShowType>::allocator_type *)(v2 + 80));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::CaptureCodexShowType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::CaptureCodexShowType>::~unordered_map,
        &data::enumStrToVal(char const*,data::CaptureCodexShowType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::CaptureCodexShowType>>::~allocator((std::allocator<std::pair<const std::string,data::CaptureCodexShowType> > *const)(v2 + 80));
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::CaptureCodexShowType> *)(v2 + 512);
            i != (std::pair<const std::string,data::CaptureCodexShowType> *)(v2 + 432);
            std::pair<std::string const,data::CaptureCodexShowType>::~pair(i) )
      {
        --i;
      }
      v7 = ((v2 + 432) >> 3) + 2147450880;
      *(_DWORD *)v7 = -117901064;
      *(_DWORD *)(v7 + 4) = -117901064;
      *(_WORD *)(v7 + 8) = -1800;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 96);
    v8 = *(const char **)(v2 + 208);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 304),
      v8,
      (const std::allocator<char> *)(v2 + 96));
    if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 144, v8);
    *(std::unordered_map<std::string,data::CaptureCodexShowType>::iterator *)(v2 + 144) = std::unordered_map<std::string,data::CaptureCodexShowType>::find(
                                                                                            &data::enumStrToVal(char const*,data::CaptureCodexShowType &)::m,
                                                                                            (const std::unordered_map<std::string,data::CaptureCodexShowType>::key_type *)(v2 + 304));
    std::string::~string((void *)(v2 + 304));
    *(_DWORD *)(((v2 + 304) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 96);
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 176, v2 + 304);
    *(std::unordered_map<std::string,data::CaptureCodexShowType>::iterator *)(v2 + 176) = std::unordered_map<std::string,data::CaptureCodexShowType>::end(&data::enumStrToVal(char const*,data::CaptureCodexShowType &)::m);
    v9 = (char *)(v2 + 176);
    v10 = std::__detail::operator==<std::pair<std::string const,data::CaptureCodexShowType>,true>(
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CaptureCodexShowType>,true> *)(v2 + 144),
            (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CaptureCodexShowType>,true> *)(v2 + 176));
    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
    if ( v10 )
    {
      *(_DWORD *)(((v2 + 368) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 368) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 113) & 7) >= *(_BYTE *)(((v2 + 399) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 368, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 368),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        5941);
      v11 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 368),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v11, (const char *const *)(v2 + 208));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 368));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v12 = std::__detail::_Node_iterator<std::pair<std::string const,data::CaptureCodexShowType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::CaptureCodexShowType>,false,true> *const)(v2 + 144));
      if ( *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v12->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v12->second);
      }
      second = v12->second;
      v14 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v14 != 0 && (char)((e & 7) + 3) >= v14 )
      {
        LOBYTE(v9) = v14 != 0;
        __asan_report_store4(e, v9);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 240) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 16 + 31) & 7) >= *(_BYTE *)(((v2 + 271) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 240, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 240),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      5928);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 240),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 240));
    result = 0xFFFFFFFFLL;
  }
  if ( v16 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = -168430091;
  }
  return result;
};

// Line 5950: range 000000000FAE396D-000000000FAE3983
const char *__cdecl data::getDescription(data::CaptureCodexShowType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 5955: range 000000000FAE3984-000000000FAE3B39
bool __cdecl data::isValidCaptureCodexShowType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:5956 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidCaptureCodexShowType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getCaptureCodexShowTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::CaptureCodexShowType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getCaptureCodexShowTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::CaptureCodexShowType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 5961: range 000000000FAE3B3A-000000000FAE3C9B
bool __cdecl data::isValidCaptureCodexShowTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::CaptureCodexShowType> *v5; // rcx
  const std::unordered_map<std::string,data::CaptureCodexShowType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidCaptureCodexShowTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getCaptureCodexShowTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::CaptureCodexShowType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::CaptureCodexShowType>::end(v5);
  v6 = data::getCaptureCodexShowTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::CaptureCodexShowType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::CaptureCodexShowType>::find(
                                                                                               v6,
                                                                                               name);
  result = std::__detail::operator!=<std::pair<std::string const,data::CaptureCodexShowType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CaptureCodexShowType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::CaptureCodexShowType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 5966: range 000000000FAE3C9C-000000000FAE415E
const std::unordered_map<std::string,data::CaptureCodexShowType> *__cdecl data::getCaptureCodexShowTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::CaptureCodexShowType> *i; // r14
  const std::unordered_map<std::string,data::CaptureCodexShowType> *result; // rax
  char v6[336]; // [rsp+10h] [rbp-150h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_3(288LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "7 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <"
                        "unknown> 128 120 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getCaptureCodexShowTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862727] = -218103808;
  v3[536862728] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getCaptureCodexShowTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getCaptureCodexShowTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string const,data::CaptureCodexShowType>::pair<char const(&)[29],data::CaptureCodexShowType,true>(
      (std::pair<const std::string,data::CaptureCodexShowType> *const)(v1 + 128),
      (const char (*)[29])"CAPTURE_CODEX_SHOW_TYPE_NONE",
      (data::CaptureCodexShowType *)(v1 + 80));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, "CAPTURE_CODEX_SHOW_TYPE_NONE");
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string const,data::CaptureCodexShowType>::pair<char const(&)[33],data::CaptureCodexShowType,true>(
      (std::pair<const std::string,data::CaptureCodexShowType> *const)(v1 + 168),
      (const char (*)[33])"CAPTURE_CODEX_SHOW_TYPE_NOT_SHOW",
      (data::CaptureCodexShowType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "CAPTURE_CODEX_SHOW_TYPE_NOT_SHOW");
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string const,data::CaptureCodexShowType>::pair<char const(&)[39],data::CaptureCodexShowType,true>(
      (std::pair<const std::string,data::CaptureCodexShowType> *const)(v1 + 208),
      (const char (*)[39])"CAPTURE_CODEX_SHOW_TYPE_CAPTURE_ANIMAL",
      (data::CaptureCodexShowType *)(v1 + 112));
    std::allocator<std::pair<std::string const,data::CaptureCodexShowType>>::allocator((std::allocator<std::pair<const std::string,data::CaptureCodexShowType> > *const)(v1 + 64));
    std::unordered_map<std::string,data::CaptureCodexShowType>::unordered_map(
      &data::getCaptureCodexShowTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::CaptureCodexShowType> >)__PAIR128__(3LL, v1 + 128),
      0LL,
      (const std::unordered_map<std::string,data::CaptureCodexShowType>::hasher *)(v1 + 32),
      (const std::unordered_map<std::string,data::CaptureCodexShowType>::key_equal *)(v1 + 48),
      (const std::unordered_map<std::string,data::CaptureCodexShowType>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getCaptureCodexShowTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::CaptureCodexShowType>::~unordered_map,
      &data::getCaptureCodexShowTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::CaptureCodexShowType>>::~allocator((std::allocator<std::pair<const std::string,data::CaptureCodexShowType> > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::CaptureCodexShowType> *)(v1 + 248);
          i != (std::pair<const std::string,data::CaptureCodexShowType> *)(v1 + 128);
          std::pair<std::string const,data::CaptureCodexShowType>::~pair(i) )
    {
      --i;
    }
  }
  result = &data::getCaptureCodexShowTypeNameMap[abi:cxx11](void)::m;
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = 0;
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v1 >> 3) + 0x7FFF8020) = -168430091;
  }
  return result;
};

// Line 5977: range 000000000FAE415F-000000000FAE485D
const std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >> *__cdecl data::getCaptureCodexShowTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > *i; // r14
  unsigned __int64 v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  char v9[752]; // [rsp+10h] [rbp-2F0h] BYREF

  v1 = (unsigned __int64)v9;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_4(704LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 64 9"
                        " <unknown> 224 64 9 <unknown> 320 64 9 <unknown> 416 216 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getCaptureCodexShowTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234556927;
  v3[536862723] = -234556924;
  v3[536862726] = -218959118;
  v3[536862729] = -218959118;
  v3[536862732] = -218959118;
  v3[536862739] = -218103808;
  v3[536862740] = -202116109;
  v3[536862741] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getCaptureCodexShowTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getCaptureCodexShowTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v0);
    *(_DWORD *)(v1 + 80) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 128),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[29])"CAPTURE_CODEX_SHOW_TYPE_NONE");
    std::pair<data::CaptureCodexShowType const,std::pair<std::string,std::string>>::pair<data::CaptureCodexShowType,true>(
      (std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > *const)(v1 + 416),
      (data::CaptureCodexShowType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[10],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 224),
      (const char (*)[10])byte_1A65F340,
      (const char (*)[33])"CAPTURE_CODEX_SHOW_TYPE_NOT_SHOW");
    std::pair<data::CaptureCodexShowType const,std::pair<std::string,std::string>>::pair<data::CaptureCodexShowType,true>(
      (std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > *const)(v1 + 488),
      (data::CaptureCodexShowType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[13],char const(&)[39],true>(
      (std::pair<std::string,std::string > *const)(v1 + 320),
      (const char (*)[13])byte_1A65F380,
      (const char (*)[39])"CAPTURE_CODEX_SHOW_TYPE_CAPTURE_ANIMAL");
    std::pair<data::CaptureCodexShowType const,std::pair<std::string,std::string>>::pair<data::CaptureCodexShowType,true>(
      (std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > *const)(v1 + 560),
      (data::CaptureCodexShowType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 320));
    std::allocator<std::pair<data::CaptureCodexShowType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    std::map<data::CaptureCodexShowType,std::pair<std::string,std::string>>::map(
      &data::getCaptureCodexShowTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > >)__PAIR128__(3LL, v1 + 416),
      (const std::less<data::CaptureCodexShowType> *)(v1 + 48),
      (const std::map<data::CaptureCodexShowType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 64));
    __cxa_guard_release(&`guard variable for'data::getCaptureCodexShowTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::CaptureCodexShowType,std::pair<std::string,std::string>>::~map,
      &data::getCaptureCodexShowTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::CaptureCodexShowType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > > *const)(v1 + 64));
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > *)(v1 + 632);
          i != (std::pair<const data::CaptureCodexShowType,std::pair<std::string,std::string > > *)(v1 + 416);
          std::pair<data::CaptureCodexShowType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    v5 = ((v1 + 416) >> 3) + 2147450880;
    *(_DWORD *)v5 = -117901064;
    *(_DWORD *)(v5 + 4) = -117901064;
    *(_DWORD *)(v5 + 8) = -117901064;
    *(_DWORD *)(v5 + 12) = -117901064;
    *(_DWORD *)(v5 + 16) = -117901064;
    *(_DWORD *)(v5 + 20) = -117901064;
    *(_WORD *)(v5 + 24) = -1800;
    *(_BYTE *)(v5 + 26) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 320));
    v6 = (_DWORD *)(((v1 + 320) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 224));
    v7 = (_DWORD *)(((v1 + 224) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 128));
  }
  if ( v9 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 88) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return &data::getCaptureCodexShowTypeEnumMap[abi:cxx11](void)::m;
};

// Line 5988: range 000000000FAE485E-000000000FAE4BD1
const char *__fastcall data::enumValToStr(data::GCGChallengeType e, __int64 a2)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // al
  const char *v6; // rsi
  common::milog::MiLogStream *v7; // rdi
  int v8; // ecx
  char v9; // al
  const char *result; // rax
  std::_Rb_tree_const_iterator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > >::pointer v11; // rax
  const std::map<data::GCGChallengeType,std::pair<std::string,std::string >> *map; // [rsp+18h] [rbp-E8h]
  char v13[224]; // [rsp+20h] [rbp-E0h] BYREF

  v2 = (unsigned __int64)v13;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_2(192LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "5 32 4 9 <unknown> 48 4 6 e:5987 64 8 9 iter:5990 96 8 9 <unknown> 128 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumValToStr;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556924;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862725] = -202116109;
  *(_DWORD *)(v2 + 48) = e;
  map = data::getGCGChallengeTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, a2);
  *(std::map<data::GCGChallengeType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::GCGChallengeType,std::pair<std::string,std::string>>::find(map, (const std::map<data::GCGChallengeType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v2 + 48);
  *(std::map<data::GCGChallengeType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::GCGChallengeType,std::pair<std::string,std::string>>::end(map);
  v5 = std::operator==(
         (const std::_Rb_tree_const_iterator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
         (const std::_Rb_tree_const_iterator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumValToStr",
      5993);
    v6 = "invalid e:";
    v7 = common::milog::MiLogStream::operator<<<char [11],(char *[11])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[11])"invalid e:");
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = 4;
    v8 = *(_DWORD *)(v2 + 48);
    v9 = *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000);
    if ( v9 != 0 && v9 <= 3 )
    {
      v7 = (common::milog::MiLogStream *)(v2 + 32);
      LOBYTE(v6) = v9 != 0;
      __asan_report_store4(v2 + 32, v6);
    }
    *(_DWORD *)(v2 + 32) = v8;
    common::milog::MiLogStream::operator<<<unsigned int,(unsigned int *)0>(v7, (const unsigned int *)(v2 + 32));
    *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = "INVALID_GCGChallengeType";
  }
  else
  {
    v11 = std::_Rb_tree_const_iterator<std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>>::operator->((const std::_Rb_tree_const_iterator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > > *const)(v2 + 64));
    result = (const char *)std::string::c_str(&v11->second.second);
  }
  if ( v13 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8014) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6000: range 000000000FAE4BD2-000000000FAE518A
__int64 __fastcall data::enumNameToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  __int64 result; // rax
  const char *v6; // rsi
  char *v7; // rsi
  bool v8; // al
  common::milog::MiLogStream *v9; // rax
  std::__detail::_Node_const_iterator<std::pair<const std::string,data::GCGChallengeType>,false,true>::pointer v10; // rax
  data::GCGChallengeType second; // ecx
  char v12; // dl
  const std::unordered_map<std::string,data::GCGChallengeType> *m; // [rsp+18h] [rbp-188h]
  char v15[384]; // [rsp+20h] [rbp-180h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(352LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "7 48 1 9 <unknown> 64 8 7 it:6009 96 8 9 <unknown> 128 8 6 s:5999 160 32 9 <unknown> 224 32 9 <u"
                        "nknown> 288 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumNameToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -218959360;
  v4[536862723] = -218959360;
  v4[536862724] = -218959360;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -202116109;
  *(_QWORD *)(v2 + 128) = s;
  if ( *(_QWORD *)(v2 + 128) )
  {
    m = data::getGCGChallengeTypeNameMap[abi:cxx11]();
    std::allocator<char>::allocator(v2 + 48);
    v6 = *(const char **)(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      v6,
      (const std::allocator<char> *)(v2 + 48));
    if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 64, v6);
    *(std::unordered_map<std::string,data::GCGChallengeType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::GCGChallengeType>::find(
                                                                                             m,
                                                                                             (const std::unordered_map<std::string,data::GCGChallengeType>::key_type *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 96, v2 + 224);
    *(std::unordered_map<std::string,data::GCGChallengeType>::const_iterator *)(v2 + 96) = std::unordered_map<std::string,data::GCGChallengeType>::end(m);
    v7 = (char *)(v2 + 96);
    v8 = std::__detail::operator==<std::pair<std::string const,data::GCGChallengeType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GCGChallengeType>,true> *)(v2 + 64),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GCGChallengeType>,true> *)(v2 + 96));
    *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumNameToVal",
        6012);
      v9 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v9, (const char *const *)(v2 + 128));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = 0xFFFFFFFFLL;
    }
    else
    {
      v10 = std::__detail::_Node_const_iterator<std::pair<std::string const,data::GCGChallengeType>,false,true>::operator->((const std::__detail::_Node_const_iterator<std::pair<const std::string,data::GCGChallengeType>,false,true> *const)(v2 + 64));
      if ( *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v10->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v10->second);
      }
      second = v10->second;
      v12 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v12 != 0 && (char)((e & 7) + 3) >= v12 )
      {
        LOBYTE(v7) = v12 != 0;
        __asan_report_store4(e, v7);
      }
      *(_DWORD *)e = second;
      result = 0LL;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumNameToVal",
      6003);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 160),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = 0xFFFFFFFFLL;
  }
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = -168430091;
  }
  return result;
};

// Line 6021: range 000000000FAE518B-000000000FAE633A
__int64 __fastcall data::enumStrToVal(const char *s, unsigned __int64 e)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  int v5; // eax
  std::pair<const std::string,data::GCGChallengeType> *i; // r14
  const char *v7; // rsi
  char *v8; // rsi
  bool v9; // al
  common::milog::MiLogStream *v10; // rax
  std::__detail::_Node_iterator<std::pair<const std::string,data::GCGChallengeType>,false,true>::pointer v11; // rax
  data::GCGChallengeType second; // ecx
  char v13; // dl
  unsigned int v14; // ebx
  char v17[1456]; // [rsp+20h] [rbp-5B0h] BYREF

  v2 = (unsigned __int64)v17;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1408LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "27 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 8 7 it:6048 384 8 9 <u"
                        "nknown> 416 8 6 s:6020 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 640 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::enumStrToVal;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234556924;
  v4[536862724] = -234556924;
  v4[536862725] = -234556924;
  v4[536862726] = -234556924;
  v4[536862727] = -234556924;
  v4[536862728] = -234556924;
  v4[536862729] = -234556924;
  v4[536862730] = -234556924;
  v4[536862731] = -218959360;
  v4[536862732] = -218959360;
  v4[536862733] = -218959360;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862760] = -202116109;
  v4[536862761] = -202116109;
  v4[536862762] = -202116109;
  v4[536862763] = -202116109;
  *(_QWORD *)(v2 + 416) = s;
  if ( *(_QWORD *)(v2 + 416) )
  {
    if ( !(_BYTE)`guard variable for'data::enumStrToVal(char const*,data::GCGChallengeType &)::m
      && __cxa_guard_acquire(&`guard variable for'data::enumStrToVal(char const*,data::GCGChallengeType &)::m) )
    {
      if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 96, e);
      *(_DWORD *)(v2 + 96) = 1;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[7],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 640),
        (const char (*)[7])byte_1A65F820,
        (data::GCGChallengeType *)(v2 + 96));
      if ( *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 112, byte_1A65F820);
      *(_DWORD *)(v2 + 112) = 2;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[32],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 680),
        (const char (*)[32])byte_1A65F860,
        (data::GCGChallengeType *)(v2 + 112));
      if ( *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 128, byte_1A65F860);
      *(_DWORD *)(v2 + 128) = 3;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[32],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 720),
        (const char (*)[32])byte_1A65F8A0,
        (data::GCGChallengeType *)(v2 + 128));
      if ( *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 144, byte_1A65F8A0);
      *(_DWORD *)(v2 + 144) = 4;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[29],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 760),
        (const char (*)[29])byte_1A65F8E0,
        (data::GCGChallengeType *)(v2 + 144));
      if ( *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 160, byte_1A65F8E0);
      *(_DWORD *)(v2 + 160) = 5;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[23],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 800),
        (const char (*)[23])byte_1A65F920,
        (data::GCGChallengeType *)(v2 + 160));
      if ( *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 176, byte_1A65F920);
      *(_DWORD *)(v2 + 176) = 6;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[45],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 840),
        (const char (*)[45])byte_1A65F960,
        (data::GCGChallengeType *)(v2 + 176));
      if ( *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 192, byte_1A65F960);
      *(_DWORD *)(v2 + 192) = 7;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[35],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 880),
        (const char (*)[35])byte_1A65F9C0,
        (data::GCGChallengeType *)(v2 + 192));
      if ( *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 208, byte_1A65F9C0);
      *(_DWORD *)(v2 + 208) = 8;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[35],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 920),
        (const char (*)[35])byte_1A65FA20,
        (data::GCGChallengeType *)(v2 + 208));
      if ( *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 224, byte_1A65FA20);
      *(_DWORD *)(v2 + 224) = 9;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[56],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 960),
        (const char (*)[56])byte_1A65FA80,
        (data::GCGChallengeType *)(v2 + 224));
      if ( *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 240, byte_1A65FA80);
      *(_DWORD *)(v2 + 240) = 10;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[39],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 1000),
        (const char (*)[39])byte_1A65FAE0,
        (data::GCGChallengeType *)(v2 + 240));
      if ( *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 256, byte_1A65FAE0);
      *(_DWORD *)(v2 + 256) = 11;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[20],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 1040),
        (const char (*)[20])byte_1A65FB40,
        (data::GCGChallengeType *)(v2 + 256));
      if ( *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 272, byte_1A65FB40);
      *(_DWORD *)(v2 + 272) = 12;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[23],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 1080),
        (const char (*)[23])byte_1A65FB80,
        (data::GCGChallengeType *)(v2 + 272));
      if ( *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 288, byte_1A65FB80);
      *(_DWORD *)(v2 + 288) = 13;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[39],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 1120),
        (const char (*)[39])byte_1A65FBC0,
        (data::GCGChallengeType *)(v2 + 288));
      if ( *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 304, byte_1A65FBC0);
      *(_DWORD *)(v2 + 304) = 14;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[23],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 1160),
        (const char (*)[23])byte_1A65FC20,
        (data::GCGChallengeType *)(v2 + 304));
      if ( *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 320, byte_1A65FC20);
      *(_DWORD *)(v2 + 320) = 15;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[44],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 1200),
        (const char (*)[44])byte_1A65FC60,
        (data::GCGChallengeType *)(v2 + 320));
      if ( *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) <= 3 )
        __asan_report_store4(v2 + 336, byte_1A65FC60);
      *(_DWORD *)(v2 + 336) = 16;
      std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[58],data::GCGChallengeType,true>(
        (std::pair<const std::string,data::GCGChallengeType> *const)(v2 + 1240),
        (const char (*)[58])byte_1A65FCC0,
        (data::GCGChallengeType *)(v2 + 336));
      std::allocator<std::pair<std::string const,data::GCGChallengeType>>::allocator((std::allocator<std::pair<const std::string,data::GCGChallengeType> > *const)(v2 + 64));
      std::unordered_map<std::string,data::GCGChallengeType>::unordered_map(
        &data::enumStrToVal(char const*,data::GCGChallengeType &)::m,
        (std::initializer_list<std::pair<const std::string,data::GCGChallengeType> >)__PAIR128__(16LL, v2 + 640),
        0LL,
        (const std::unordered_map<std::string,data::GCGChallengeType>::hasher *)(v2 + 32),
        (const std::unordered_map<std::string,data::GCGChallengeType>::key_equal *)(v2 + 48),
        (const std::unordered_map<std::string,data::GCGChallengeType>::allocator_type *)(v2 + 64));
      __cxa_guard_release(&`guard variable for'data::enumStrToVal(char const*,data::GCGChallengeType &)::m);
      __cxa_atexit(
        (void (__fastcall *)(void *))std::unordered_map<std::string,data::GCGChallengeType>::~unordered_map,
        &data::enumStrToVal(char const*,data::GCGChallengeType &)::m,
        &_dso_handle);
      std::allocator<std::pair<std::string const,data::GCGChallengeType>>::~allocator((std::allocator<std::pair<const std::string,data::GCGChallengeType> > *const)(v2 + 64));
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
      for ( i = (std::pair<const std::string,data::GCGChallengeType> *)(v2 + 1280);
            i != (std::pair<const std::string,data::GCGChallengeType> *)(v2 + 640);
            std::pair<std::string const,data::GCGChallengeType>::~pair(i) )
      {
        --i;
      }
      __asan_poison_stack_memory(v2 + 640, 640LL);
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
    }
    *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
    *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    v7 = *(const char **)(v2 + 416);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 512),
      v7,
      (const std::allocator<char> *)(v2 + 80));
    if ( *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 352, v7);
    *(std::unordered_map<std::string,data::GCGChallengeType>::iterator *)(v2 + 352) = std::unordered_map<std::string,data::GCGChallengeType>::find(
                                                                                        &data::enumStrToVal(char const*,data::GCGChallengeType &)::m,
                                                                                        (const std::unordered_map<std::string,data::GCGChallengeType>::key_type *)(v2 + 512));
    std::string::~string((void *)(v2 + 512));
    *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
    if ( *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) )
      __asan_report_store8(v2 + 384, v2 + 512);
    *(std::unordered_map<std::string,data::GCGChallengeType>::iterator *)(v2 + 384) = std::unordered_map<std::string,data::GCGChallengeType>::end(&data::enumStrToVal(char const*,data::GCGChallengeType &)::m);
    v8 = (char *)(v2 + 384);
    v9 = std::__detail::operator==<std::pair<std::string const,data::GCGChallengeType>,true>(
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GCGChallengeType>,true> *)(v2 + 352),
           (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GCGChallengeType>,true> *)(v2 + 384));
    *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
    if ( v9 )
    {
      *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 576) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 607) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 576, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 576),
        &common::milog::MiLogDefault::default_log_obj_,
        3u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "enumStrToVal",
        6051);
      v10 = common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(
              (common::milog::MiLogStream *const)(v2 + 576),
              (const char (*)[27])"unrecognized enum string: ");
      common::milog::MiLogStream::operator<<<char const*,(char const**)0>(v10, (const char *const *)(v2 + 416));
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 576));
      v5 = -1;
    }
    else
    {
      v11 = std::__detail::_Node_iterator<std::pair<std::string const,data::GCGChallengeType>,false,true>::operator->((const std::__detail::_Node_iterator<std::pair<const std::string,data::GCGChallengeType>,false,true> *const)(v2 + 352));
      if ( *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) != 0
        && *(_BYTE *)(((unsigned __int64)&v11->second >> 3) + 0x7FFF8000) <= 3 )
      {
        __asan_report_load4(&v11->second);
      }
      second = v11->second;
      v13 = *(_BYTE *)((e >> 3) + 0x7FFF8000);
      if ( v13 != 0 && (char)((e & 7) + 3) >= v13 )
      {
        LOBYTE(v8) = v13 != 0;
        __asan_report_store4(e, v8);
      }
      *(_DWORD *)e = second;
      v5 = 0;
    }
  }
  else
  {
    if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 448, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 448),
      &common::milog::MiLogDefault::default_log_obj_,
      3u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "enumStrToVal",
      6024);
    common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
      (common::milog::MiLogStream *const)(v2 + 448),
      (const char (*)[14])"s is nullptr!");
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
    v5 = -1;
  }
  v14 = v5;
  if ( v17 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8044) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862741) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450956 - (((_DWORD)v4 + 2147450964) & 0xFFFFFFF8) + 100) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1408LL, v17);
  }
  return v14;
};

// Line 6060: range 000000000FAE633B-000000000FAE6351
const char *__cdecl data::getDescription(data::GCGChallengeType e)
{
  __int64 v1; // rsi

  return data::enumValToStr(e, v1);
};

// Line 6065: range 000000000FAE6352-000000000FAE6507
bool __cdecl data::isValidGCGChallengeType(uint32_t n)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r13
  const std::map<data::GCGChallengeType,std::pair<std::string,std::string >> *v5; // rcx
  const std::map<data::GCGChallengeType,std::pair<std::string,std::string >> *v6; // rcx
  bool result; // al
  char v8[160]; // [rsp+10h] [rbp-A0h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(128LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "3 48 4 6 e:6066 64 8 9 <unknown> 96 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidGCGChallengeType;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234556943;
  v4[536862722] = -218959360;
  v4[536862723] = -202116352;
  if ( *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) <= 3 )
    __asan_report_store4(v2 + 48, v1);
  *(_DWORD *)(v2 + 48) = n;
  v5 = data::getGCGChallengeTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 96, v1);
  *(std::map<data::GCGChallengeType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 96) = std::map<data::GCGChallengeType,std::pair<std::string,std::string>>::end(v5);
  v6 = data::getGCGChallengeTypeEnumMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::map<data::GCGChallengeType,std::pair<std::string,std::string >>::const_iterator *)(v2 + 64) = std::map<data::GCGChallengeType,std::pair<std::string,std::string>>::find(v6, (const std::map<data::GCGChallengeType,std::pair<std::string,std::string >>::key_type *)(v2 + 48));
  result = std::operator!=(
             (const std::_Rb_tree_const_iterator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > >::_Self *)(v2 + 64),
             (const std::_Rb_tree_const_iterator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > >::_Self *)(v2 + 96));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6071: range 000000000FAE6508-000000000FAE6669
bool __cdecl data::isValidGCGChallengeTypeName(const std::string *name)
{
  __int64 v1; // rsi
  unsigned __int64 v2; // rbx
  __int64 v3; // rax
  _DWORD *v4; // r12
  const std::unordered_map<std::string,data::GCGChallengeType> *v5; // rcx
  const std::unordered_map<std::string,data::GCGChallengeType> *v6; // rcx
  bool result; // al
  char v8[128]; // [rsp+10h] [rbp-80h] BYREF

  v2 = (unsigned __int64)v8;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_1(96LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "2 32 8 9 <unknown> 64 8 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::isValidGCGChallengeTypeName;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -218959360;
  v4[536862722] = -202116352;
  v5 = data::getGCGChallengeTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 64, v1);
  *(std::unordered_map<std::string,data::GCGChallengeType>::const_iterator *)(v2 + 64) = std::unordered_map<std::string,data::GCGChallengeType>::end(v5);
  v6 = data::getGCGChallengeTypeNameMap[abi:cxx11]();
  if ( *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) )
    __asan_report_store8(v2 + 32, v1);
  *(std::unordered_map<std::string,data::GCGChallengeType>::const_iterator *)(v2 + 32) = std::unordered_map<std::string,data::GCGChallengeType>::find(
                                                                                           v6,
                                                                                           name);
  result = std::__detail::operator!=<std::pair<std::string const,data::GCGChallengeType>,true>(
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GCGChallengeType>,true> *)(v2 + 32),
             (const std::__detail::_Node_iterator_base<std::pair<const std::string,data::GCGChallengeType>,true> *)(v2 + 64));
  if ( v8 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8008) = -168430091;
  }
  return result;
};

// Line 6076: range 000000000FAE666A-000000000FAE7227
const std::unordered_map<std::string,data::GCGChallengeType> *__cdecl data::getGCGChallengeTypeNameMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const std::string,data::GCGChallengeType> *i; // r14
  char v6[1232]; // [rsp+10h] [rbp-4D0h] BYREF

  v1 = (unsigned __int64)v6;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_5(1184LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "21 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 4 9 <unknown> 112 4 9 <unknown> 128 4 9"
                        " <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unknown> 208 4 9 <unkn"
                        "own> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 288 4 9 <unknown> 3"
                        "04 4 9 <unknown> 320 4 9 <unknown> 336 4 9 <unknown> 352 4 9 <unknown> 368 680 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getGCGChallengeTypeNameMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753551;
  v3[536862722] = -234753535;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = -234556924;
  v3[536862731] = 61956;
  v3[536862752] = -218103808;
  v3[536862753] = -202116109;
  v3[536862754] = -202116109;
  v3[536862755] = -202116109;
  v3[536862756] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getGCGChallengeTypeNameMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getGCGChallengeTypeNameMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v0);
    *(_DWORD *)(v1 + 96) = 0;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[19],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 368),
      (const char (*)[19])"GCG_CHALLENGE_NONE",
      (data::GCGChallengeType *)(v1 + 96));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, "GCG_CHALLENGE_NONE");
    *(_DWORD *)(v1 + 112) = 1;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[18],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 408),
      (const char (*)[18])"GCG_CHALLENGE_WIN",
      (data::GCGChallengeType *)(v1 + 112));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, "GCG_CHALLENGE_WIN");
    *(_DWORD *)(v1 + 128) = 2;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[34],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 448),
      (const char (*)[34])"GCG_CHALLENGE_CHARACTER_ALIVE_NUM",
      (data::GCGChallengeType *)(v1 + 128));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, "GCG_CHALLENGE_CHARACTER_ALIVE_NUM");
    *(_DWORD *)(v1 + 144) = 3;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[29],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 488),
      (const char (*)[29])"GCG_CHALLENGE_BEING_HEAL_SUM",
      (data::GCGChallengeType *)(v1 + 144));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, "GCG_CHALLENGE_BEING_HEAL_SUM");
    *(_DWORD *)(v1 + 160) = 4;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[32],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 528),
      (const char (*)[32])"GCG_CHALLENGE_SHIELD_REDUCE_SUM",
      (data::GCGChallengeType *)(v1 + 160));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, "GCG_CHALLENGE_SHIELD_REDUCE_SUM");
    *(_DWORD *)(v1 + 176) = 5;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[37],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 568),
      (const char (*)[37])"GCG_CHALLENGE_ELEMENT_REACTION_TIMES",
      (data::GCGChallengeType *)(v1 + 176));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, "GCG_CHALLENGE_ELEMENT_REACTION_TIMES");
    *(_DWORD *)(v1 + 192) = 6;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[35],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 608),
      (const char (*)[35])"GCG_CHALLENGE_ONE_HIT_DAMAGE_TIMES",
      (data::GCGChallengeType *)(v1 + 192));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, "GCG_CHALLENGE_ONE_HIT_DAMAGE_TIMES");
    *(_DWORD *)(v1 + 208) = 7;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[30],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 648),
      (const char (*)[30])"GCG_CHALLENGE_PLAY_CARD_TIMES",
      (data::GCGChallengeType *)(v1 + 208));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, "GCG_CHALLENGE_PLAY_CARD_TIMES");
    *(_DWORD *)(v1 + 224) = 8;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[27],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 688),
      (const char (*)[27])"GCG_CHALLENGE_SUMMON_TIMES",
      (data::GCGChallengeType *)(v1 + 224));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, "GCG_CHALLENGE_SUMMON_TIMES");
    *(_DWORD *)(v1 + 240) = 9;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[44],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 728),
      (const char (*)[44])"GCG_CHALLENGE_SETTLE_WITH_SKILL_TAG_Q_TIMES",
      (data::GCGChallengeType *)(v1 + 240));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, "GCG_CHALLENGE_SETTLE_WITH_SKILL_TAG_Q_TIMES");
    *(_DWORD *)(v1 + 256) = 10;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[45],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 768),
      (const char (*)[45])"GCG_CHALLENGE_ONE_OPERATION_KILL_COUNT_TIMES",
      (data::GCGChallengeType *)(v1 + 256));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, "GCG_CHALLENGE_ONE_OPERATION_KILL_COUNT_TIMES");
    *(_DWORD *)(v1 + 272) = 11;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[33],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 808),
      (const char (*)[33])"GCG_CHALLENGE_DEAD_CHARACTER_NUM",
      (data::GCGChallengeType *)(v1 + 272));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, "GCG_CHALLENGE_DEAD_CHARACTER_NUM");
    *(_DWORD *)(v1 + 288) = 12;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[24],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 848),
      (const char (*)[24])"GCG_CHALLENGE_ROUND_NUM",
      (data::GCGChallengeType *)(v1 + 288));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, "GCG_CHALLENGE_ROUND_NUM");
    *(_DWORD *)(v1 + 304) = 13;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[49],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 888),
      (const char (*)[49])"GCG_CHALLENGE_REACTION_WITH_TARGET_ELEMENT_TIMES",
      (data::GCGChallengeType *)(v1 + 304));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, "GCG_CHALLENGE_REACTION_WITH_TARGET_ELEMENT_TIMES");
    *(_DWORD *)(v1 + 320) = 14;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[32],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 928),
      (const char (*)[32])"GCG_CHALLENGE_SKILL_TAG_Q_TIMES",
      (data::GCGChallengeType *)(v1 + 320));
    if ( *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 336) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 336, "GCG_CHALLENGE_SKILL_TAG_Q_TIMES");
    *(_DWORD *)(v1 + 336) = 15;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[29],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 968),
      (const char (*)[29])"GCG_CHALLENGE_SUMMON_TIMES_X",
      (data::GCGChallengeType *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 352) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 352, "GCG_CHALLENGE_SUMMON_TIMES_X");
    *(_DWORD *)(v1 + 352) = 16;
    std::pair<std::string const,data::GCGChallengeType>::pair<char const(&)[48],data::GCGChallengeType,true>(
      (std::pair<const std::string,data::GCGChallengeType> *const)(v1 + 1008),
      (const char (*)[48])"GCG_CHALLENGE_PLAY_CARD_WITH_TAG_AND_TYPE_TIMES",
      (data::GCGChallengeType *)(v1 + 352));
    std::allocator<std::pair<std::string const,data::GCGChallengeType>>::allocator((std::allocator<std::pair<const std::string,data::GCGChallengeType> > *const)(v1 + 80));
    std::unordered_map<std::string,data::GCGChallengeType>::unordered_map(
      &data::getGCGChallengeTypeNameMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const std::string,data::GCGChallengeType> >)__PAIR128__(17LL, v1 + 368),
      0LL,
      (const std::unordered_map<std::string,data::GCGChallengeType>::hasher *)(v1 + 48),
      (const std::unordered_map<std::string,data::GCGChallengeType>::key_equal *)(v1 + 64),
      (const std::unordered_map<std::string,data::GCGChallengeType>::allocator_type *)(v1 + 80));
    __cxa_guard_release(&`guard variable for'data::getGCGChallengeTypeNameMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::unordered_map<std::string,data::GCGChallengeType>::~unordered_map,
      &data::getGCGChallengeTypeNameMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<std::string const,data::GCGChallengeType>>::~allocator((std::allocator<std::pair<const std::string,data::GCGChallengeType> > *const)(v1 + 80));
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const std::string,data::GCGChallengeType> *)(v1 + 1048);
          i != (std::pair<const std::string,data::GCGChallengeType> *)(v1 + 368);
          std::pair<std::string const,data::GCGChallengeType>::~pair(i) )
    {
      --i;
    }
  }
  if ( v6 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF808C) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 148) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_5(v1, 1184LL, v6);
  }
  return &data::getGCGChallengeTypeNameMap[abi:cxx11](void)::m;
};

// Line 6101: range 000000000FAE7228-000000000FAE8951
const std::map<data::GCGChallengeType,std::pair<std::string,std::string >> *__cdecl data::getGCGChallengeTypeEnumMap[abi:cxx11]()
{
  __int64 v0; // rsi
  unsigned __int64 v1; // r13
  __int64 v2; // rax
  _DWORD *v3; // r12
  std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *i; // r14
  _DWORD *v5; // rax
  _DWORD *v6; // rax
  _DWORD *v7; // rax
  _DWORD *v8; // rax
  _DWORD *v9; // rax
  _DWORD *v10; // rax
  _DWORD *v11; // rax
  _DWORD *v12; // rax
  _DWORD *v13; // rax
  _DWORD *v14; // rax
  _DWORD *v15; // rax
  _DWORD *v16; // rax
  _DWORD *v17; // rax
  _DWORD *v18; // rax
  _DWORD *v19; // rax
  _DWORD *v20; // rax
  char v22[3376]; // [rsp+10h] [rbp-D30h] BYREF

  v1 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v2 = __asan_stack_malloc_6(3328LL);
    if ( v2 )
      v1 = v2;
  }
  *(_QWORD *)v1 = 1102416563LL;
  *(_QWORD *)(v1 + 8) = "37 32 1 9 <unknown> 48 1 9 <unknown> 64 4 9 <unknown> 80 4 9 <unknown> 96 4 9 <unknown> 112 4 9 "
                        "<unknown> 128 4 9 <unknown> 144 4 9 <unknown> 160 4 9 <unknown> 176 4 9 <unknown> 192 4 9 <unkno"
                        "wn> 208 4 9 <unknown> 224 4 9 <unknown> 240 4 9 <unknown> 256 4 9 <unknown> 272 4 9 <unknown> 28"
                        "8 4 9 <unknown> 304 4 9 <unknown> 320 4 9 <unknown> 336 64 9 <unknown> 432 64 9 <unknown> 528 64"
                        " 9 <unknown> 624 64 9 <unknown> 720 64 9 <unknown> 816 64 9 <unknown> 912 64 9 <unknown> 1008 64"
                        " 9 <unknown> 1104 64 9 <unknown> 1200 64 9 <unknown> 1296 64 9 <unknown> 1392 64 9 <unknown> 148"
                        "8 64 9 <unknown> 1584 64 9 <unknown> 1680 64 9 <unknown> 1776 64 9 <unknown> 1872 64 9 <unknown>"
                        " 1968 1224 9 <unknown>";
  *(_QWORD *)(v1 + 16) = data::getGCGChallengeTypeEnumMap[abi:cxx11];
  v3 = (_DWORD *)(v1 >> 3);
  v3[536862720] = -235802127;
  v3[536862721] = -234753535;
  v3[536862722] = -234556924;
  v3[536862723] = -234556924;
  v3[536862724] = -234556924;
  v3[536862725] = -234556924;
  v3[536862726] = -234556924;
  v3[536862727] = -234556924;
  v3[536862728] = -234556924;
  v3[536862729] = -234556924;
  v3[536862730] = 61956;
  v3[536862732] = -219021312;
  v3[536862733] = 62194;
  v3[536862735] = -219021312;
  v3[536862736] = 62194;
  v3[536862738] = -219021312;
  v3[536862739] = 62194;
  v3[536862741] = -219021312;
  v3[536862742] = 62194;
  v3[536862744] = -219021312;
  v3[536862745] = 62194;
  v3[536862747] = -219021312;
  v3[536862748] = 62194;
  v3[536862750] = -219021312;
  v3[536862751] = 62194;
  v3[536862753] = -219021312;
  v3[536862754] = 62194;
  v3[536862756] = -219021312;
  v3[536862757] = 62194;
  v3[536862759] = -219021312;
  v3[536862760] = 62194;
  v3[536862762] = -219021312;
  v3[536862763] = 62194;
  v3[536862765] = -219021312;
  v3[536862766] = 62194;
  v3[536862768] = -219021312;
  v3[536862769] = 62194;
  v3[536862771] = -219021312;
  v3[536862772] = 62194;
  v3[536862774] = -219021312;
  v3[536862775] = 62194;
  v3[536862777] = -219021312;
  v3[536862778] = 62194;
  v3[536862780] = -219021312;
  v3[536862781] = 62194;
  v3[536862819] = -218103808;
  v3[536862820] = -202116109;
  v3[536862821] = -202116109;
  v3[536862822] = -202116109;
  v3[536862823] = -202116109;
  if ( !(_BYTE)`guard variable for'data::getGCGChallengeTypeEnumMap[abi:cxx11](void)::m
    && __cxa_guard_acquire(&`guard variable for'data::getGCGChallengeTypeEnumMap[abi:cxx11](void)::m) )
  {
    if ( *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 64) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 64, v0);
    *(_DWORD *)(v1 + 64) = 0;
    std::pair<std::string,std::string>::pair<char const(&)[1],char const(&)[19],true>(
      (std::pair<std::string,std::string > *const)(v1 + 336),
      (const char (*)[1])byte_1A5DA060,
      (const char (*)[19])"GCG_CHALLENGE_NONE");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 1968),
      (data::GCGChallengeType *)(v1 + 64),
      (const std::pair<std::string,std::string > *)(v1 + 336));
    if ( *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 80, v1 + 64);
    *(_DWORD *)(v1 + 80) = 1;
    std::pair<std::string,std::string>::pair<char const(&)[7],char const(&)[18],true>(
      (std::pair<std::string,std::string > *const)(v1 + 432),
      (const char (*)[7])byte_1A65F820,
      (const char (*)[18])"GCG_CHALLENGE_WIN");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2040),
      (data::GCGChallengeType *)(v1 + 80),
      (const std::pair<std::string,std::string > *)(v1 + 432));
    if ( *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 96, v1 + 80);
    *(_DWORD *)(v1 + 96) = 2;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[34],true>(
      (std::pair<std::string,std::string > *const)(v1 + 528),
      (const char (*)[32])byte_1A65F860,
      (const char (*)[34])"GCG_CHALLENGE_CHARACTER_ALIVE_NUM");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2112),
      (data::GCGChallengeType *)(v1 + 96),
      (const std::pair<std::string,std::string > *)(v1 + 528));
    if ( *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 112, v1 + 96);
    *(_DWORD *)(v1 + 112) = 3;
    std::pair<std::string,std::string>::pair<char const(&)[32],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 624),
      (const char (*)[32])byte_1A65F8A0,
      (const char (*)[29])"GCG_CHALLENGE_BEING_HEAL_SUM");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2184),
      (data::GCGChallengeType *)(v1 + 112),
      (const std::pair<std::string,std::string > *)(v1 + 624));
    if ( *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 128, v1 + 112);
    *(_DWORD *)(v1 + 128) = 4;
    std::pair<std::string,std::string>::pair<char const(&)[29],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 720),
      (const char (*)[29])byte_1A65F8E0,
      (const char (*)[32])"GCG_CHALLENGE_SHIELD_REDUCE_SUM");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2256),
      (data::GCGChallengeType *)(v1 + 128),
      (const std::pair<std::string,std::string > *)(v1 + 720));
    if ( *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 144, v1 + 128);
    *(_DWORD *)(v1 + 144) = 5;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[37],true>(
      (std::pair<std::string,std::string > *const)(v1 + 816),
      (const char (*)[23])byte_1A65F920,
      (const char (*)[37])"GCG_CHALLENGE_ELEMENT_REACTION_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2328),
      (data::GCGChallengeType *)(v1 + 144),
      (const std::pair<std::string,std::string > *)(v1 + 816));
    if ( *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 160, v1 + 144);
    *(_DWORD *)(v1 + 160) = 6;
    std::pair<std::string,std::string>::pair<char const(&)[45],char const(&)[35],true>(
      (std::pair<std::string,std::string > *const)(v1 + 912),
      (const char (*)[45])byte_1A65F960,
      (const char (*)[35])"GCG_CHALLENGE_ONE_HIT_DAMAGE_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2400),
      (data::GCGChallengeType *)(v1 + 160),
      (const std::pair<std::string,std::string > *)(v1 + 912));
    if ( *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 176, v1 + 160);
    *(_DWORD *)(v1 + 176) = 7;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[30],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1008),
      (const char (*)[35])byte_1A65F9C0,
      (const char (*)[30])"GCG_CHALLENGE_PLAY_CARD_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2472),
      (data::GCGChallengeType *)(v1 + 176),
      (const std::pair<std::string,std::string > *)(v1 + 1008));
    if ( *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 192, v1 + 176);
    *(_DWORD *)(v1 + 192) = 8;
    std::pair<std::string,std::string>::pair<char const(&)[35],char const(&)[27],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1104),
      (const char (*)[35])byte_1A65FA20,
      (const char (*)[27])"GCG_CHALLENGE_SUMMON_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2544),
      (data::GCGChallengeType *)(v1 + 192),
      (const std::pair<std::string,std::string > *)(v1 + 1104));
    if ( *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 208, v1 + 192);
    *(_DWORD *)(v1 + 208) = 9;
    std::pair<std::string,std::string>::pair<char const(&)[56],char const(&)[44],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1200),
      (const char (*)[56])byte_1A65FA80,
      (const char (*)[44])"GCG_CHALLENGE_SETTLE_WITH_SKILL_TAG_Q_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2616),
      (data::GCGChallengeType *)(v1 + 208),
      (const std::pair<std::string,std::string > *)(v1 + 1200));
    if ( *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 224, v1 + 208);
    *(_DWORD *)(v1 + 224) = 10;
    std::pair<std::string,std::string>::pair<char const(&)[39],char const(&)[45],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1296),
      (const char (*)[39])byte_1A65FAE0,
      (const char (*)[45])"GCG_CHALLENGE_ONE_OPERATION_KILL_COUNT_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2688),
      (data::GCGChallengeType *)(v1 + 224),
      (const std::pair<std::string,std::string > *)(v1 + 1296));
    if ( *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 240, v1 + 224);
    *(_DWORD *)(v1 + 240) = 11;
    std::pair<std::string,std::string>::pair<char const(&)[20],char const(&)[33],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1392),
      (const char (*)[20])byte_1A65FB40,
      (const char (*)[33])"GCG_CHALLENGE_DEAD_CHARACTER_NUM");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2760),
      (data::GCGChallengeType *)(v1 + 240),
      (const std::pair<std::string,std::string > *)(v1 + 1392));
    if ( *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 256, v1 + 240);
    *(_DWORD *)(v1 + 256) = 12;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[24],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1488),
      (const char (*)[23])byte_1A65FB80,
      (const char (*)[24])"GCG_CHALLENGE_ROUND_NUM");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2832),
      (data::GCGChallengeType *)(v1 + 256),
      (const std::pair<std::string,std::string > *)(v1 + 1488));
    if ( *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 272, v1 + 256);
    *(_DWORD *)(v1 + 272) = 13;
    std::pair<std::string,std::string>::pair<char const(&)[39],char const(&)[49],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1584),
      (const char (*)[39])byte_1A65FBC0,
      (const char (*)[49])"GCG_CHALLENGE_REACTION_WITH_TARGET_ELEMENT_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2904),
      (data::GCGChallengeType *)(v1 + 272),
      (const std::pair<std::string,std::string > *)(v1 + 1584));
    if ( *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 288, v1 + 272);
    *(_DWORD *)(v1 + 288) = 14;
    std::pair<std::string,std::string>::pair<char const(&)[23],char const(&)[32],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1680),
      (const char (*)[23])byte_1A65FC20,
      (const char (*)[32])"GCG_CHALLENGE_SKILL_TAG_Q_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 2976),
      (data::GCGChallengeType *)(v1 + 288),
      (const std::pair<std::string,std::string > *)(v1 + 1680));
    if ( *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 304, v1 + 288);
    *(_DWORD *)(v1 + 304) = 15;
    std::pair<std::string,std::string>::pair<char const(&)[44],char const(&)[29],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1776),
      (const char (*)[44])byte_1A65FC60,
      (const char (*)[29])"GCG_CHALLENGE_SUMMON_TIMES_X");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 3048),
      (data::GCGChallengeType *)(v1 + 304),
      (const std::pair<std::string,std::string > *)(v1 + 1776));
    if ( *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) != 0 && *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) <= 3 )
      __asan_report_store4(v1 + 320, v1 + 304);
    *(_DWORD *)(v1 + 320) = 16;
    std::pair<std::string,std::string>::pair<char const(&)[58],char const(&)[48],true>(
      (std::pair<std::string,std::string > *const)(v1 + 1872),
      (const char (*)[58])byte_1A65FCC0,
      (const char (*)[48])"GCG_CHALLENGE_PLAY_CARD_WITH_TAG_AND_TYPE_TIMES");
    std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::pair<data::GCGChallengeType,true>(
      (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *const)(v1 + 3120),
      (data::GCGChallengeType *)(v1 + 320),
      (const std::pair<std::string,std::string > *)(v1 + 1872));
    std::allocator<std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>>::allocator((std::allocator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    std::map<data::GCGChallengeType,std::pair<std::string,std::string>>::map(
      &data::getGCGChallengeTypeEnumMap[abi:cxx11](void)::m,
      (std::initializer_list<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > >)__PAIR128__(17LL, v1 + 1968),
      (const std::less<data::GCGChallengeType> *)(v1 + 32),
      (const std::map<data::GCGChallengeType,std::pair<std::string,std::string >>::allocator_type *)(v1 + 48));
    __cxa_guard_release(&`guard variable for'data::getGCGChallengeTypeEnumMap[abi:cxx11](void)::m);
    __cxa_atexit(
      (void (__fastcall *)(void *))std::map<data::GCGChallengeType,std::pair<std::string,std::string>>::~map,
      &data::getGCGChallengeTypeEnumMap[abi:cxx11](void)::m,
      &_dso_handle);
    std::allocator<std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>>::~allocator((std::allocator<std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > > *const)(v1 + 48));
    *(_BYTE *)(((v1 + 48) >> 3) + 0x7FFF8000) = -8;
    *(_BYTE *)(((v1 + 32) >> 3) + 0x7FFF8000) = -8;
    for ( i = (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *)(v1 + 3192);
          i != (std::pair<const data::GCGChallengeType,std::pair<std::string,std::string > > *)(v1 + 1968);
          std::pair<data::GCGChallengeType const,std::pair<std::string,std::string>>::~pair(i) )
    {
      --i;
    }
    __asan_poison_stack_memory(v1 + 1968, 1224LL);
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1872));
    v5 = (_DWORD *)(((v1 + 1872) >> 3) + 2147450880);
    *v5 = -117901064;
    v5[1] = -117901064;
    *(_BYTE *)(((v1 + 320) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1776));
    v6 = (_DWORD *)(((v1 + 1776) >> 3) + 2147450880);
    *v6 = -117901064;
    v6[1] = -117901064;
    *(_BYTE *)(((v1 + 304) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1680));
    v7 = (_DWORD *)(((v1 + 1680) >> 3) + 2147450880);
    *v7 = -117901064;
    v7[1] = -117901064;
    *(_BYTE *)(((v1 + 288) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1584));
    v8 = (_DWORD *)(((v1 + 1584) >> 3) + 2147450880);
    *v8 = -117901064;
    v8[1] = -117901064;
    *(_BYTE *)(((v1 + 272) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1488));
    v9 = (_DWORD *)(((v1 + 1488) >> 3) + 2147450880);
    *v9 = -117901064;
    v9[1] = -117901064;
    *(_BYTE *)(((v1 + 256) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1392));
    v10 = (_DWORD *)(((v1 + 1392) >> 3) + 2147450880);
    *v10 = -117901064;
    v10[1] = -117901064;
    *(_BYTE *)(((v1 + 240) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1296));
    v11 = (_DWORD *)(((v1 + 1296) >> 3) + 2147450880);
    *v11 = -117901064;
    v11[1] = -117901064;
    *(_BYTE *)(((v1 + 224) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1200));
    v12 = (_DWORD *)(((v1 + 1200) >> 3) + 2147450880);
    *v12 = -117901064;
    v12[1] = -117901064;
    *(_BYTE *)(((v1 + 208) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1104));
    v13 = (_DWORD *)(((v1 + 1104) >> 3) + 2147450880);
    *v13 = -117901064;
    v13[1] = -117901064;
    *(_BYTE *)(((v1 + 192) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 1008));
    v14 = (_DWORD *)(((v1 + 1008) >> 3) + 2147450880);
    *v14 = -117901064;
    v14[1] = -117901064;
    *(_BYTE *)(((v1 + 176) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 912));
    v15 = (_DWORD *)(((v1 + 912) >> 3) + 2147450880);
    *v15 = -117901064;
    v15[1] = -117901064;
    *(_BYTE *)(((v1 + 160) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 816));
    v16 = (_DWORD *)(((v1 + 816) >> 3) + 2147450880);
    *v16 = -117901064;
    v16[1] = -117901064;
    *(_BYTE *)(((v1 + 144) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 720));
    v17 = (_DWORD *)(((v1 + 720) >> 3) + 2147450880);
    *v17 = -117901064;
    v17[1] = -117901064;
    *(_BYTE *)(((v1 + 128) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 624));
    v18 = (_DWORD *)(((v1 + 624) >> 3) + 2147450880);
    *v18 = -117901064;
    v18[1] = -117901064;
    *(_BYTE *)(((v1 + 112) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 528));
    v19 = (_DWORD *)(((v1 + 528) >> 3) + 2147450880);
    *v19 = -117901064;
    v19[1] = -117901064;
    *(_BYTE *)(((v1 + 96) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 432));
    v20 = (_DWORD *)(((v1 + 432) >> 3) + 2147450880);
    *v20 = -117901064;
    v20[1] = -117901064;
    *(_BYTE *)(((v1 + 80) >> 3) + 0x7FFF8000) = -8;
    std::pair<std::string,std::string>::~pair((std::pair<std::string,std::string > *const)(v1 + 336));
  }
  if ( v22 == (char *)v1 )
  {
    *(_QWORD *)((v1 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v1 >> 3) + 0x7FFF8198) = 0LL;
    memset(
      (void *)((unsigned __int64)(v3 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v3 + 2147450880 - (((_DWORD)v3 + 2147450888) & 0xFFFFFFF8) + 416) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v1 = 1172321806LL;
    __asan_stack_free_6(v1, 3328LL, v22);
  }
  return &data::getGCGChallengeTypeEnumMap[abi:cxx11](void)::m;
};

// Line 6127: range 000000000FAE8952-000000000FAE9FBD
int32_t __cdecl data::ItemConfig::init(data::ItemConfig *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  common::milog::MiLogStream *v6; // rax
  int v7; // eax
  bool v8; // r15
  common::milog::MiLogStream *v9; // rax
  bool v10; // r15
  common::milog::MiLogStream *v11; // rax
  bool v12; // r15
  common::milog::MiLogStream *v13; // rax
  bool v14; // r15
  common::milog::MiLogStream *v15; // rax
  bool v16; // r15
  common::milog::MiLogStream *v17; // rax
  bool v18; // r15
  common::milog::MiLogStream *v19; // rax
  bool v20; // r15
  common::milog::MiLogStream *v21; // rax
  bool v22; // r15
  common::milog::MiLogStream *v23; // rax
  int32_t v24; // ebx
  char v26[1392]; // [rsp+10h] [rbp-570h] BYREF

  v2 = (unsigned __int64)v26;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1344LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "27 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 32 9 <unknown> 256 32 9 <un"
                        "known> 320 32 9 <unknown> 384 32 9 <unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unk"
                        "nown> 640 32 9 <unknown> 704 32 9 <unknown> 768 32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unkn"
                        "own> 960 32 9 <unknown> 1024 32 9 <unknown> 1088 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <u"
                        "nknown> 1280 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::ItemConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 192),
    "ID",
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 192), &this->id) != 0;
  std::string::~string((void *)(v2 + 192));
  *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 256, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 256),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6130);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 256),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
    v7 = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 320),
      &byte_1A6609E0,
      (const std::allocator<char> *)(v2 + 64));
    v8 = common::tools::TxtFile::Row::assignToEnum<data::ItemType>(
           row,
           (const std::string *)(v2 + 320),
           &this->item_type) != 0;
    std::string::~string((void *)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 384) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 415) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 384, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 384),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6135);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 384),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])byte_1A660A20);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 384));
      v7 = -1;
    }
    else
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 448),
        &byte_1A660A60,
        (const std::allocator<char> *)(v2 + 80));
      v10 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 448), &this->weight) != 0;
      std::string::~string((void *)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6140);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 512),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v11, (const char (*)[27])byte_1A660AA0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        v7 = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 576),
          &byte_1A660AE0,
          (const std::allocator<char> *)(v2 + 96));
        v12 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 576), &this->rank) != 0;
        std::string::~string((void *)(v2 + 576));
        *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( v12 )
        {
          *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 640, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 640),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6145);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 640),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v13, (const char (*)[33])byte_1A660B20);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
          v7 = -1;
        }
        else
        {
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 704),
            &byte_1A660B80,
            (const std::allocator<char> *)(v2 + 112));
          v14 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
                  row,
                  (const std::string *)(v2 + 704),
                  &this->gadget_id) != 0;
          std::string::~string((void *)(v2 + 704));
          *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( v14 )
          {
            *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 768, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 768),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
              "init",
              6150);
            v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 768),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v15, (const char (*)[29])byte_1A660BC0);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
            v7 = -1;
          }
          else
          {
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 832),
              &byte_1A660C00,
              (const std::allocator<char> *)(v2 + 128));
            v16 = common::tools::TxtFile::Row::assignToNum<bool>(row, (const std::string *)(v2 + 832), &this->dropable) != 0;
            std::string::~string((void *)(v2 + 832));
            *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( v16 )
            {
              *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 896, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 896),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                "init",
                6155);
              v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 896),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v17, (const char (*)[30])byte_1A660C40);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
              v7 = -1;
            }
            else
            {
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 960),
                &byte_1A660C80,
                (const std::allocator<char> *)(v2 + 144));
              v18 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
                      row,
                      (const std::string *)(v2 + 960),
                      &this->use_level) != 0;
              std::string::~string((void *)(v2 + 960));
              *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( v18 )
              {
                *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1024, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1024),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                  "init",
                  6160);
                v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1024),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v19, (const char (*)[33])byte_1A660CC0);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
                v7 = -1;
              }
              else
              {
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 160);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1088),
                  &byte_1A660D20,
                  (const std::allocator<char> *)(v2 + 160));
                v20 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
                        row,
                        (const std::string *)(v2 + 1088),
                        &this->global_item_limit) != 0;
                std::string::~string((void *)(v2 + 1088));
                *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 160);
                *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                if ( v20 )
                {
                  *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1152, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1152),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                    "init",
                    6165);
                  v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1152),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                    v21,
                    (const char (*)[39])byte_1A660D60);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
                  v7 = -1;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 176);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1216),
                    &byte_1A660DC0,
                    (const std::allocator<char> *)(v2 + 176));
                  v22 = common::tools::TxtFile::Row::assignToStr(
                          row,
                          (const std::string *)(v2 + 1216),
                          &this->control_type) != 0;
                  std::string::~string((void *)(v2 + 1216));
                  *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 176);
                  *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                  if ( v22 )
                  {
                    *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1280, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1280),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                      "init",
                      6170);
                    v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 1280),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      v23,
                      (const char (*)[36])byte_1A660E00);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
                    v7 = -1;
                  }
                  else
                  {
                    v7 = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v24 = v7;
  if ( v26 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF802C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF807C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF809C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80A4) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1344LL, v26);
  }
  return v24;
};

// Line 6178: range 000000000FAE9FBE-000000000FAEB15A
int32_t __cdecl data::EntityExcelConfig::init(
        data::EntityExcelConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  common::milog::MiLogStream *v6; // rax
  int v7; // eax
  bool v8; // r15
  common::milog::MiLogStream *v9; // rax
  bool v10; // r15
  common::milog::MiLogStream *v11; // rax
  bool v12; // r15
  common::milog::MiLogStream *v13; // rax
  bool v14; // r15
  common::milog::MiLogStream *v15; // rax
  bool v16; // r15
  common::milog::MiLogStream *v17; // rax
  bool v18; // r15
  common::milog::MiLogStream *v19; // rax
  int32_t v20; // ebx
  char v22[1104]; // [rsp+10h] [rbp-450h] BYREF

  v2 = (unsigned __int64)v22;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1056LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <u"
                        "nknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::EntityExcelConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    "ID",
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 160), &this->id) != 0;
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6181);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v7 = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      &byte_1A661000,
      (const std::allocator<char> *)(v2 + 64));
    v8 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 288), &this->name) != 0;
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6186);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 352),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v9, (const char (*)[42])byte_1A661040);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      v7 = -1;
    }
    else
    {
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 416),
        aPrefab,
        (const std::allocator<char> *)(v2 + 80));
      v10 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 416), &this->prefab_path) != 0;
      std::string::~string((void *)(v2 + 416));
      *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 480) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 511) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 480, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 480),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6191);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 480),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v11, (const char (*)[33])byte_1A6610E0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 480));
        v7 = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 96);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 544),
          aPrefabRemote,
          (const std::allocator<char> *)(v2 + 96));
        v12 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 544), &this->prefab_path_remote) != 0;
        std::string::~string((void *)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 96);
        *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
        if ( v12 )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6196);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 608),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v13, (const char (*)[40])byte_1A661180);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          v7 = -1;
        }
        else
        {
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 112);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 672),
            aController,
            (const std::allocator<char> *)(v2 + 112));
          v14 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 672), &this->controller_path) != 0;
          std::string::~string((void *)(v2 + 672));
          *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 112);
          *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
          if ( v14 )
          {
            *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 736, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 736),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
              "init",
              6201);
            v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 736),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v15, (const char (*)[37])byte_1A661220);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
            v7 = -1;
          }
          else
          {
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 128);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 800),
              aControllerRemo,
              (const std::allocator<char> *)(v2 + 128));
            v16 = common::tools::TxtFile::Row::assignToStr(
                    row,
                    (const std::string *)(v2 + 800),
                    &this->controller_path_remote) != 0;
            std::string::~string((void *)(v2 + 800));
            *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 128);
            *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
            if ( v16 )
            {
              *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 864, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 864),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                "init",
                6206);
              v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 864),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v17, (const char (*)[44])byte_1A6612C0);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
              v7 = -1;
            }
            else
            {
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 144);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 928),
                &byte_1A661320,
                (const std::allocator<char> *)(v2 + 144));
              v18 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
                      row,
                      (const std::string *)(v2 + 928),
                      &this->camp_id) != 0;
              std::string::~string((void *)(v2 + 928));
              *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 144);
              *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
              if ( v18 )
              {
                *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 992) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1023) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 992, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 992),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                  "init",
                  6211);
                v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 992),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v19, (const char (*)[33])byte_1A661360);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 992));
                v7 = -1;
              }
              else
              {
                v7 = 0;
              }
            }
          }
        }
      }
    }
  }
  v20 = v7;
  if ( v22 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8060) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8070) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8080) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1056LL, v22);
  }
  return v20;
};

// Line 6219: range 000000000FAEB15C-000000000FAEB6E4
int32_t __cdecl data::FightPropGrowConfig::init(
        data::FightPropGrowConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  char v10[368]; // [rsp+10h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::FightPropGrowConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    &byte_1A6609E0,
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToEnum<data::FightPropType>(row, (const std::string *)(v2 + 64), &this->type) != 0;
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6222);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v6, (const char (*)[27])byte_1A660A20);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      &byte_1A661440,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToEnum<data::GrowCurveType>(
           row,
           (const std::string *)(v2 + 192),
           &this->grow_curve) != 0;
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6227);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])byte_1A661480);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6235: range 000000000FAEB6E6-000000000FAF09B1
int32_t __cdecl data::CreatureExcelConfig::init(
        data::CreatureExcelConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  common::milog::MiLogStream *v6; // rax
  int v7; // eax
  bool v8; // r15
  common::milog::MiLogStream *v9; // rax
  bool v10; // r15
  common::milog::MiLogStream *v11; // rax
  bool v12; // r15
  common::milog::MiLogStream *v13; // rax
  bool v14; // r15
  common::milog::MiLogStream *v15; // rax
  bool v16; // r15
  common::milog::MiLogStream *v17; // rax
  bool v18; // r15
  common::milog::MiLogStream *v19; // rax
  bool v20; // r15
  common::milog::MiLogStream *v21; // rax
  bool v22; // r15
  common::milog::MiLogStream *v23; // rax
  bool v24; // r15
  common::milog::MiLogStream *v25; // rax
  bool v26; // r15
  common::milog::MiLogStream *v27; // rax
  bool v28; // r15
  common::milog::MiLogStream *v29; // rax
  bool v30; // r15
  common::milog::MiLogStream *v31; // rax
  bool v32; // r15
  common::milog::MiLogStream *v33; // rax
  bool v34; // r15
  common::milog::MiLogStream *v35; // rax
  bool v36; // r15
  common::milog::MiLogStream *v37; // rax
  bool v38; // r15
  common::milog::MiLogStream *v39; // rax
  bool v40; // r15
  common::milog::MiLogStream *v41; // rax
  bool v42; // r15
  common::milog::MiLogStream *v43; // rax
  bool v44; // r15
  common::milog::MiLogStream *v45; // rax
  bool v46; // r15
  common::milog::MiLogStream *v47; // rax
  bool v48; // r15
  common::milog::MiLogStream *v49; // rax
  bool v50; // r15
  common::milog::MiLogStream *v51; // rax
  bool v52; // r15
  common::milog::MiLogStream *v53; // rax
  bool v54; // r15
  common::milog::MiLogStream *v55; // rax
  bool v56; // r15
  common::milog::MiLogStream *v57; // rax
  bool v58; // r15
  common::milog::MiLogStream *v59; // rax
  bool v60; // r15
  data::FightPropType *p_type; // r15
  common::milog::MiLogStream *v62; // rax
  common::milog::MiLogStream *v63; // rax
  common::milog::MiLogStream *v64; // rax
  bool v65; // r15
  data::GrowCurveType *p_grow_curve; // r15
  common::milog::MiLogStream *v67; // rax
  common::milog::MiLogStream *v68; // rax
  common::milog::MiLogStream *v69; // rax
  bool v70; // r15
  common::milog::MiLogStream *v71; // rax
  bool v72; // r15
  common::milog::MiLogStream *v73; // rax
  bool v74; // r15
  common::milog::MiLogStream *v75; // rax
  int32_t v76; // ebx
  uint32_t array_count; // [rsp+18h] [rbp-1438h]
  uint32_t i; // [rsp+1Ch] [rbp-1434h]
  char v80[5168]; // [rsp+20h] [rbp-1430h] BYREF

  v2 = (unsigned __int64)v80;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_7(5120LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "101 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9"
                        " <unknown> 128 1 9 <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unkn"
                        "own> 208 1 9 <unknown> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 2"
                        "88 1 9 <unknown> 304 1 9 <unknown> 320 1 9 <unknown> 336 1 9 <unknown> 352 1 9 <unknown> 368 1 9"
                        " <unknown> 384 1 9 <unknown> 400 1 9 <unknown> 416 1 9 <unknown> 432 1 9 <unknown> 448 1 9 <unkn"
                        "own> 464 1 9 <unknown> 480 1 9 <unknown> 496 1 9 <unknown> 512 1 9 <unknown> 528 1 9 <unknown> 5"
                        "44 1 9 <unknown> 560 1 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <unknown> 768 "
                        "32 9 <unknown> 832 32 9 <unknown> 896 32 9 <unknown> 960 32 9 <unknown> 1024 32 9 <unknown> 1088"
                        " 32 9 <unknown> 1152 32 9 <unknown> 1216 32 9 <unknown> 1280 32 9 <unknown> 1344 32 9 <unknown> "
                        "1408 32 9 <unknown> 1472 32 9 <unknown> 1536 32 9 <unknown> 1600 32 9 <unknown> 1664 32 9 <unkno"
                        "wn> 1728 32 9 <unknown> 1792 32 9 <unknown> 1856 32 9 <unknown> 1920 32 9 <unknown> 1984 32 9 <u"
                        "nknown> 2048 32 9 <unknown> 2112 32 9 <unknown> 2176 32 9 <unknown> 2240 32 9 <unknown> 2304 32 "
                        "9 <unknown> 2368 32 9 <unknown> 2432 32 9 <unknown> 2496 32 9 <unknown> 2560 32 9 <unknown> 2624"
                        " 32 9 <unknown> 2688 32 9 <unknown> 2752 32 9 <unknown> 2816 32 9 <unknown> 2880 32 9 <unknown> "
                        "2944 32 9 <unknown> 3008 32 9 <unknown> 3072 32 9 <unknown> 3136 32 9 <unknown> 3200 32 9 <unkno"
                        "wn> 3264 32 9 <unknown> 3328 32 9 <unknown> 3392 32 9 <unknown> 3456 32 9 <unknown> 3520 32 9 <u"
                        "nknown> 3584 32 9 <unknown> 3648 32 9 <unknown> 3712 32 9 <unknown> 3776 32 9 <unknown> 3840 32 "
                        "9 <unknown> 3904 32 9 <unknown> 3968 32 9 <unknown> 4032 32 9 <unknown> 4096 32 9 <unknown> 4160"
                        " 32 9 <unknown> 4224 32 9 <unknown> 4288 32 9 <unknown> 4352 32 9 <unknown> 4416 32 9 <unknown> "
                        "4480 32 9 <unknown> 4544 32 9 <unknown> 4608 32 9 <unknown> 4672 32 9 <unknown> 4736 32 9 <unkno"
                        "wn> 4800 256 13 col_name:6236";
  *(_QWORD *)(v2 + 16) = data::CreatureExcelConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234753535;
  v4[536862730] = -234753535;
  v4[536862731] = -234753535;
  v4[536862732] = -234753535;
  v4[536862733] = -234753535;
  v4[536862734] = -234753535;
  v4[536862735] = -234753535;
  v4[536862736] = -234753535;
  v4[536862737] = -234753535;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862747] = -218959118;
  v4[536862749] = -218959118;
  v4[536862751] = -218959118;
  v4[536862753] = -218959118;
  v4[536862755] = -218959118;
  v4[536862757] = -218959118;
  v4[536862759] = -218959118;
  v4[536862761] = -218959118;
  v4[536862763] = -218959118;
  v4[536862765] = -218959118;
  v4[536862767] = -218959118;
  v4[536862769] = -218959118;
  v4[536862771] = -218959118;
  v4[536862773] = -218959118;
  v4[536862775] = -218959118;
  v4[536862777] = -218959118;
  v4[536862779] = -218959118;
  v4[536862781] = -218959118;
  v4[536862783] = -218959118;
  v4[536862785] = -218959118;
  v4[536862787] = -218959118;
  v4[536862789] = -218959118;
  v4[536862791] = -218959118;
  v4[536862793] = -218959118;
  v4[536862795] = -218959118;
  v4[536862797] = -218959118;
  v4[536862799] = -218959118;
  v4[536862801] = -218959118;
  v4[536862803] = -218959118;
  v4[536862805] = -218959118;
  v4[536862807] = -218959118;
  v4[536862809] = -218959118;
  v4[536862811] = -218959118;
  v4[536862813] = -218959118;
  v4[536862815] = -218959118;
  v4[536862817] = -218959118;
  v4[536862819] = -218959118;
  v4[536862821] = -218959118;
  v4[536862823] = -218959118;
  v4[536862825] = -218959118;
  v4[536862827] = -218959118;
  v4[536862829] = -218959118;
  v4[536862831] = -218959118;
  v4[536862833] = -218959118;
  v4[536862835] = -218959118;
  v4[536862837] = -218959118;
  v4[536862839] = -218959118;
  v4[536862841] = -218959118;
  v4[536862843] = -218959118;
  v4[536862845] = -218959118;
  v4[536862847] = -218959118;
  v4[536862849] = -218959118;
  v4[536862851] = -218959118;
  v4[536862853] = -218959118;
  v4[536862855] = -218959118;
  v4[536862857] = -218959118;
  v4[536862859] = -218959118;
  v4[536862861] = -218959118;
  v4[536862863] = -218959118;
  v4[536862865] = -218959118;
  v4[536862867] = -218959118;
  v4[536862869] = -218959118;
  v4[536862878] = -202116109;
  v4[536862879] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 576),
    "ID",
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 576), &this->id) != 0;
  std::string::~string((void *)(v2 + 576));
  *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 640, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 640),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6240);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 640),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
    v7 = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 704),
      &byte_1A661000,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 704), &this->name) != 0;
    std::string::~string((void *)(v2 + 704));
    *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 768, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 768),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6245);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 768),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v9, (const char (*)[42])byte_1A661040);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
      v7 = -1;
    }
    else
    {
      *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 832),
        aPrefab,
        (const std::allocator<char> *)(v2 + 64));
      v10 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 832), &this->prefab_path) != 0;
      std::string::~string((void *)(v2 + 832));
      *(_DWORD *)(((v2 + 832) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 896) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 896) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 927) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 896, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 896),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6250);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 896),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v11, (const char (*)[33])byte_1A6610E0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 896));
        v7 = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 960),
          aPrefabRemote,
          (const std::allocator<char> *)(v2 + 80));
        v12 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 960), &this->prefab_path_remote) != 0;
        std::string::~string((void *)(v2 + 960));
        *(_DWORD *)(((v2 + 960) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( v12 )
        {
          *(_DWORD *)(((v2 + 1024) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1024) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1055) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1024, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1024),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6255);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1024),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [40],(char *[40])0>(v13, (const char (*)[40])byte_1A661180);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1024));
          v7 = -1;
        }
        else
        {
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 1088),
            aController,
            (const std::allocator<char> *)(v2 + 96));
          v14 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 1088), &this->controller_path) != 0;
          std::string::~string((void *)(v2 + 1088));
          *(_DWORD *)(((v2 + 1088) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( v14 )
          {
            *(_DWORD *)(((v2 + 1152) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1152) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1183) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1152, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1152),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
              "init",
              6260);
            v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1152),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v15, (const char (*)[37])byte_1A661220);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1152));
            v7 = -1;
          }
          else
          {
            *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = 0;
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 112);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1216),
              aControllerRemo,
              (const std::allocator<char> *)(v2 + 112));
            v16 = common::tools::TxtFile::Row::assignToStr(
                    row,
                    (const std::string *)(v2 + 1216),
                    &this->controller_path_remote) != 0;
            std::string::~string((void *)(v2 + 1216));
            *(_DWORD *)(((v2 + 1216) >> 3) + 0x7FFF8000) = -117901064;
            std::allocator<char>::~allocator(v2 + 112);
            *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
            if ( v16 )
            {
              *(_DWORD *)(((v2 + 1280) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1280) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1311) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1280, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1280),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                "init",
                6265);
              v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1280),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              common::milog::MiLogStream::operator<<<char [44],(char *[44])0>(v17, (const char (*)[44])byte_1A6612C0);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1280));
              v7 = -1;
            }
            else
            {
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 128);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1344),
                &byte_1A661320,
                (const std::allocator<char> *)(v2 + 128));
              v18 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
                      row,
                      (const std::string *)(v2 + 1344),
                      &this->camp_id) != 0;
              std::string::~string((void *)(v2 + 1344));
              *(_DWORD *)(((v2 + 1344) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 128);
              *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
              if ( v18 )
              {
                *(_DWORD *)(((v2 + 1408) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1408) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1439) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1408, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1408),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                  "init",
                  6270);
                v19 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1408),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v19, (const char (*)[33])byte_1A661360);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1408));
                v7 = -1;
              }
              else
              {
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = 0;
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 144);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1472),
                  byte_1A625280,
                  (const std::allocator<char> *)(v2 + 144));
                v20 = common::tools::TxtFile::Row::assignToNum<float>(
                        row,
                        (const std::string *)(v2 + 1472),
                        &this->hp_base) != 0;
                std::string::~string((void *)(v2 + 1472));
                *(_DWORD *)(((v2 + 1472) >> 3) + 0x7FFF8000) = -117901064;
                std::allocator<char>::~allocator(v2 + 144);
                *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
                if ( v20 )
                {
                  *(_DWORD *)(((v2 + 1536) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1536) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1567) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1536, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1536),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                    "init",
                    6275);
                  v21 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1536),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                    v21,
                    (const char (*)[36])byte_1A661C60);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1536));
                  v7 = -1;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 160);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1600),
                    byte_1A625340,
                    (const std::allocator<char> *)(v2 + 160));
                  v22 = common::tools::TxtFile::Row::assignToNum<float>(
                          row,
                          (const std::string *)(v2 + 1600),
                          &this->attack_base) != 0;
                  std::string::~string((void *)(v2 + 1600));
                  *(_DWORD *)(((v2 + 1600) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 160);
                  *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
                  if ( v22 )
                  {
                    *(_DWORD *)(((v2 + 1664) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1664) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1695) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1664, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1664),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                      "init",
                      6280);
                    v23 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 1664),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                      v23,
                      (const char (*)[36])byte_1A661CC0);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1664));
                    v7 = -1;
                  }
                  else
                  {
                    *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = 0;
                    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
                    std::allocator<char>::allocator(v2 + 176);
                    std::string::basic_string<std::allocator<char>>(
                      (std::string *const)(v2 + 1728),
                      byte_1A625400,
                      (const std::allocator<char> *)(v2 + 176));
                    v24 = common::tools::TxtFile::Row::assignToNum<float>(
                            row,
                            (const std::string *)(v2 + 1728),
                            &this->defense_base) != 0;
                    std::string::~string((void *)(v2 + 1728));
                    *(_DWORD *)(((v2 + 1728) >> 3) + 0x7FFF8000) = -117901064;
                    std::allocator<char>::~allocator(v2 + 176);
                    *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
                    if ( v24 )
                    {
                      *(_DWORD *)(((v2 + 1792) >> 3) + 0x7FFF8000) = 0;
                      if ( *(char *)(((v2 + 1792) >> 3) + 0x7FFF8000) < 0
                        || *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) != 0
                        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 1823) >> 3) + 0x7FFF8000) )
                      {
                        __asan_report_store_n(v2 + 1792, 32LL);
                      }
                      common::milog::MiLogStream::create(
                        (common::milog::MiLogStream *)(v2 + 1792),
                        &common::milog::MiLogDefault::default_log_obj_,
                        4u,
                        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                        "init",
                        6285);
                      v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                              (common::milog::MiLogStream *const)(v2 + 1792),
                              (const char (*)[16])"[CONFIG_ERROR] ");
                      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                        v25,
                        (const char (*)[36])byte_1A661D20);
                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1792));
                      v7 = -1;
                    }
                    else
                    {
                      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = 0;
                      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
                      std::allocator<char>::allocator(v2 + 192);
                      std::string::basic_string<std::allocator<char>>(
                        (std::string *const)(v2 + 1856),
                        byte_1A6255C0,
                        (const std::allocator<char> *)(v2 + 192));
                      v26 = common::tools::TxtFile::Row::assignToNum<float>(
                              row,
                              (const std::string *)(v2 + 1856),
                              &this->critical) != 0;
                      std::string::~string((void *)(v2 + 1856));
                      *(_DWORD *)(((v2 + 1856) >> 3) + 0x7FFF8000) = -117901064;
                      std::allocator<char>::~allocator(v2 + 192);
                      *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
                      if ( v26 )
                      {
                        *(_DWORD *)(((v2 + 1920) >> 3) + 0x7FFF8000) = 0;
                        if ( *(char *)(((v2 + 1920) >> 3) + 0x7FFF8000) < 0
                          || *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) != 0
                          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 1951) >> 3) + 0x7FFF8000) )
                        {
                          __asan_report_store_n(v2 + 1920, 32LL);
                        }
                        common::milog::MiLogStream::create(
                          (common::milog::MiLogStream *)(v2 + 1920),
                          &common::milog::MiLogDefault::default_log_obj_,
                          4u,
                          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                          "init",
                          6290);
                        v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                (common::milog::MiLogStream *const)(v2 + 1920),
                                (const char (*)[16])"[CONFIG_ERROR] ");
                        common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(
                          v27,
                          (const char (*)[30])byte_1A661D80);
                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1920));
                        v7 = -1;
                      }
                      else
                      {
                        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = 0;
                        *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
                        std::allocator<char>::allocator(v2 + 208);
                        std::string::basic_string<std::allocator<char>>(
                          (std::string *const)(v2 + 1984),
                          byte_1A625600,
                          (const std::allocator<char> *)(v2 + 208));
                        v28 = common::tools::TxtFile::Row::assignToNum<float>(
                                row,
                                (const std::string *)(v2 + 1984),
                                &this->anti_critical) != 0;
                        std::string::~string((void *)(v2 + 1984));
                        *(_DWORD *)(((v2 + 1984) >> 3) + 0x7FFF8000) = -117901064;
                        std::allocator<char>::~allocator(v2 + 208);
                        *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
                        if ( v28 )
                        {
                          *(_DWORD *)(((v2 + 2048) >> 3) + 0x7FFF8000) = 0;
                          if ( *(char *)(((v2 + 2048) >> 3) + 0x7FFF8000) < 0
                            || *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) != 0
                            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 2079) >> 3) + 0x7FFF8000) )
                          {
                            __asan_report_store_n(v2 + 2048, 32LL);
                          }
                          common::milog::MiLogStream::create(
                            (common::milog::MiLogStream *)(v2 + 2048),
                            &common::milog::MiLogDefault::default_log_obj_,
                            4u,
                            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                            "init",
                            6295);
                          v29 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                  (common::milog::MiLogStream *const)(v2 + 2048),
                                  (const char (*)[16])"[CONFIG_ERROR] ");
                          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                            v29,
                            (const char (*)[33])byte_1A661DC0);
                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2048));
                          v7 = -1;
                        }
                        else
                        {
                          *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = 0;
                          *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                          std::allocator<char>::allocator(v2 + 224);
                          std::string::basic_string<std::allocator<char>>(
                            (std::string *const)(v2 + 2112),
                            byte_1A625640,
                            (const std::allocator<char> *)(v2 + 224));
                          v30 = common::tools::TxtFile::Row::assignToNum<float>(
                                  row,
                                  (const std::string *)(v2 + 2112),
                                  &this->critical_hurt) != 0;
                          std::string::~string((void *)(v2 + 2112));
                          *(_DWORD *)(((v2 + 2112) >> 3) + 0x7FFF8000) = -117901064;
                          std::allocator<char>::~allocator(v2 + 224);
                          *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                          if ( v30 )
                          {
                            *(_DWORD *)(((v2 + 2176) >> 3) + 0x7FFF8000) = 0;
                            if ( *(char *)(((v2 + 2176) >> 3) + 0x7FFF8000) < 0
                              || *(_BYTE *)(((v2 + 2207) >> 3) + 0x7FFF8000) != 0
                              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2207) >> 3) + 0x7FFF8000) )
                            {
                              __asan_report_store_n(v2 + 2176, 32LL);
                            }
                            common::milog::MiLogStream::create(
                              (common::milog::MiLogStream *)(v2 + 2176),
                              &common::milog::MiLogDefault::default_log_obj_,
                              4u,
                              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                              "init",
                              6300);
                            v31 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                    (common::milog::MiLogStream *const)(v2 + 2176),
                                    (const char (*)[16])"[CONFIG_ERROR] ");
                            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                              v31,
                              (const char (*)[33])byte_1A661E20);
                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2176));
                            v7 = -1;
                          }
                          else
                          {
                            *(_DWORD *)(((v2 + 2240) >> 3) + 0x7FFF8000) = 0;
                            *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                            std::allocator<char>::allocator(v2 + 240);
                            std::string::basic_string<std::allocator<char>>(
                              (std::string *const)(v2 + 2240),
                              byte_1A625B00,
                              (const std::allocator<char> *)(v2 + 240));
                            v32 = common::tools::TxtFile::Row::assignToNum<float>(
                                    row,
                                    (const std::string *)(v2 + 2240),
                                    &this->fire_sub_hurt) != 0;
                            std::string::~string((void *)(v2 + 2240));
                            *(_DWORD *)(((v2 + 2240) >> 3) + 0x7FFF8000) = -117901064;
                            std::allocator<char>::~allocator(v2 + 240);
                            *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                            if ( v32 )
                            {
                              *(_DWORD *)(((v2 + 2304) >> 3) + 0x7FFF8000) = 0;
                              if ( *(char *)(((v2 + 2304) >> 3) + 0x7FFF8000) < 0
                                || *(_BYTE *)(((v2 + 2335) >> 3) + 0x7FFF8000) != 0
                                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 2335) >> 3) + 0x7FFF8000) )
                              {
                                __asan_report_store_n(v2 + 2304, 32LL);
                              }
                              common::milog::MiLogStream::create(
                                (common::milog::MiLogStream *)(v2 + 2304),
                                &common::milog::MiLogDefault::default_log_obj_,
                                4u,
                                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                "init",
                                6305);
                              v33 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                      (common::milog::MiLogStream *const)(v2 + 2304),
                                      (const char (*)[16])"[CONFIG_ERROR] ");
                              common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                v33,
                                (const char (*)[36])byte_1A661E80);
                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2304));
                              v7 = -1;
                            }
                            else
                            {
                              *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = 0;
                              *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
                              std::allocator<char>::allocator(v2 + 256);
                              std::string::basic_string<std::allocator<char>>(
                                (std::string *const)(v2 + 2368),
                                byte_1A625BC0,
                                (const std::allocator<char> *)(v2 + 256));
                              v34 = common::tools::TxtFile::Row::assignToNum<float>(
                                      row,
                                      (const std::string *)(v2 + 2368),
                                      &this->grass_sub_hurt) != 0;
                              std::string::~string((void *)(v2 + 2368));
                              *(_DWORD *)(((v2 + 2368) >> 3) + 0x7FFF8000) = -117901064;
                              std::allocator<char>::~allocator(v2 + 256);
                              *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                              if ( v34 )
                              {
                                *(_DWORD *)(((v2 + 2432) >> 3) + 0x7FFF8000) = 0;
                                if ( *(char *)(((v2 + 2432) >> 3) + 0x7FFF8000) < 0
                                  || *(_BYTE *)(((v2 + 2463) >> 3) + 0x7FFF8000) != 0
                                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2463) >> 3) + 0x7FFF8000) )
                                {
                                  __asan_report_store_n(v2 + 2432, 32LL);
                                }
                                common::milog::MiLogStream::create(
                                  (common::milog::MiLogStream *)(v2 + 2432),
                                  &common::milog::MiLogDefault::default_log_obj_,
                                  4u,
                                  "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                  "init",
                                  6310);
                                v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                        (common::milog::MiLogStream *const)(v2 + 2432),
                                        (const char (*)[16])"[CONFIG_ERROR] ");
                                common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                  v35,
                                  (const char (*)[36])byte_1A661EE0);
                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2432));
                                v7 = -1;
                              }
                              else
                              {
                                *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = 0;
                                *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
                                std::allocator<char>::allocator(v2 + 272);
                                std::string::basic_string<std::allocator<char>>(
                                  (std::string *const)(v2 + 2496),
                                  byte_1A625B80,
                                  (const std::allocator<char> *)(v2 + 272));
                                v36 = common::tools::TxtFile::Row::assignToNum<float>(
                                        row,
                                        (const std::string *)(v2 + 2496),
                                        &this->water_sub_hurt) != 0;
                                std::string::~string((void *)(v2 + 2496));
                                *(_DWORD *)(((v2 + 2496) >> 3) + 0x7FFF8000) = -117901064;
                                std::allocator<char>::~allocator(v2 + 272);
                                *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
                                if ( v36 )
                                {
                                  *(_DWORD *)(((v2 + 2560) >> 3) + 0x7FFF8000) = 0;
                                  if ( *(char *)(((v2 + 2560) >> 3) + 0x7FFF8000) < 0
                                    || *(_BYTE *)(((v2 + 2591) >> 3) + 0x7FFF8000) != 0
                                    && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 2591) >> 3) + 0x7FFF8000) )
                                  {
                                    __asan_report_store_n(v2 + 2560, 32LL);
                                  }
                                  common::milog::MiLogStream::create(
                                    (common::milog::MiLogStream *)(v2 + 2560),
                                    &common::milog::MiLogDefault::default_log_obj_,
                                    4u,
                                    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                    "init",
                                    6315);
                                  v37 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                          (common::milog::MiLogStream *const)(v2 + 2560),
                                          (const char (*)[16])"[CONFIG_ERROR] ");
                                  common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                    v37,
                                    (const char (*)[36])byte_1A661F40);
                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2560));
                                  v7 = -1;
                                }
                                else
                                {
                                  *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = 0;
                                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 1;
                                  std::allocator<char>::allocator(v2 + 288);
                                  std::string::basic_string<std::allocator<char>>(
                                    (std::string *const)(v2 + 2624),
                                    byte_1A625B40,
                                    (const std::allocator<char> *)(v2 + 288));
                                  v38 = common::tools::TxtFile::Row::assignToNum<float>(
                                          row,
                                          (const std::string *)(v2 + 2624),
                                          &this->elec_sub_hurt) != 0;
                                  std::string::~string((void *)(v2 + 2624));
                                  *(_DWORD *)(((v2 + 2624) >> 3) + 0x7FFF8000) = -117901064;
                                  std::allocator<char>::~allocator(v2 + 288);
                                  *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
                                  if ( v38 )
                                  {
                                    *(_DWORD *)(((v2 + 2688) >> 3) + 0x7FFF8000) = 0;
                                    if ( *(char *)(((v2 + 2688) >> 3) + 0x7FFF8000) < 0
                                      || *(_BYTE *)(((v2 + 2719) >> 3) + 0x7FFF8000) != 0
                                      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2719) >> 3) + 0x7FFF8000) )
                                    {
                                      __asan_report_store_n(v2 + 2688, 32LL);
                                    }
                                    common::milog::MiLogStream::create(
                                      (common::milog::MiLogStream *)(v2 + 2688),
                                      &common::milog::MiLogDefault::default_log_obj_,
                                      4u,
                                      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                      "init",
                                      6320);
                                    v39 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                            (common::milog::MiLogStream *const)(v2 + 2688),
                                            (const char (*)[16])"[CONFIG_ERROR] ");
                                    common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                      v39,
                                      (const char (*)[36])byte_1A661FA0);
                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2688));
                                    v7 = -1;
                                  }
                                  else
                                  {
                                    *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = 0;
                                    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 1;
                                    std::allocator<char>::allocator(v2 + 304);
                                    std::string::basic_string<std::allocator<char>>(
                                      (std::string *const)(v2 + 2752),
                                      byte_1A625C00,
                                      (const std::allocator<char> *)(v2 + 304));
                                    v40 = common::tools::TxtFile::Row::assignToNum<float>(
                                            row,
                                            (const std::string *)(v2 + 2752),
                                            &this->wind_sub_hurt) != 0;
                                    std::string::~string((void *)(v2 + 2752));
                                    *(_DWORD *)(((v2 + 2752) >> 3) + 0x7FFF8000) = -117901064;
                                    std::allocator<char>::~allocator(v2 + 304);
                                    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
                                    if ( v40 )
                                    {
                                      *(_DWORD *)(((v2 + 2816) >> 3) + 0x7FFF8000) = 0;
                                      if ( *(char *)(((v2 + 2816) >> 3) + 0x7FFF8000) < 0
                                        || *(_BYTE *)(((v2 + 2847) >> 3) + 0x7FFF8000) != 0
                                        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 2847) >> 3) + 0x7FFF8000) )
                                      {
                                        __asan_report_store_n(v2 + 2816, 32LL);
                                      }
                                      common::milog::MiLogStream::create(
                                        (common::milog::MiLogStream *)(v2 + 2816),
                                        &common::milog::MiLogDefault::default_log_obj_,
                                        4u,
                                        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                        "init",
                                        6325);
                                      v41 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                              (common::milog::MiLogStream *const)(v2 + 2816),
                                              (const char (*)[16])"[CONFIG_ERROR] ");
                                      common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                        v41,
                                        (const char (*)[36])byte_1A662000);
                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2816));
                                      v7 = -1;
                                    }
                                    else
                                    {
                                      *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = 0;
                                      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 1;
                                      std::allocator<char>::allocator(v2 + 320);
                                      std::string::basic_string<std::allocator<char>>(
                                        (std::string *const)(v2 + 2880),
                                        byte_1A625C80,
                                        (const std::allocator<char> *)(v2 + 320));
                                      v42 = common::tools::TxtFile::Row::assignToNum<float>(
                                              row,
                                              (const std::string *)(v2 + 2880),
                                              &this->ice_sub_hurt) != 0;
                                      std::string::~string((void *)(v2 + 2880));
                                      *(_DWORD *)(((v2 + 2880) >> 3) + 0x7FFF8000) = -117901064;
                                      std::allocator<char>::~allocator(v2 + 320);
                                      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
                                      if ( v42 )
                                      {
                                        *(_DWORD *)(((v2 + 2944) >> 3) + 0x7FFF8000) = 0;
                                        if ( *(char *)(((v2 + 2944) >> 3) + 0x7FFF8000) < 0
                                          || *(_BYTE *)(((v2 + 2975) >> 3) + 0x7FFF8000) != 0
                                          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 2975) >> 3) + 0x7FFF8000) )
                                        {
                                          __asan_report_store_n(v2 + 2944, 32LL);
                                        }
                                        common::milog::MiLogStream::create(
                                          (common::milog::MiLogStream *)(v2 + 2944),
                                          &common::milog::MiLogDefault::default_log_obj_,
                                          4u,
                                          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                          "init",
                                          6330);
                                        v43 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                (common::milog::MiLogStream *const)(v2 + 2944),
                                                (const char (*)[16])"[CONFIG_ERROR] ");
                                        common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                          v43,
                                          (const char (*)[36])byte_1A662060);
                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2944));
                                        v7 = -1;
                                      }
                                      else
                                      {
                                        *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = 0;
                                        *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 1;
                                        std::allocator<char>::allocator(v2 + 336);
                                        std::string::basic_string<std::allocator<char>>(
                                          (std::string *const)(v2 + 3008),
                                          byte_1A625C40,
                                          (const std::allocator<char> *)(v2 + 336));
                                        v44 = common::tools::TxtFile::Row::assignToNum<float>(
                                                row,
                                                (const std::string *)(v2 + 3008),
                                                &this->rock_sub_hurt) != 0;
                                        std::string::~string((void *)(v2 + 3008));
                                        *(_DWORD *)(((v2 + 3008) >> 3) + 0x7FFF8000) = -117901064;
                                        std::allocator<char>::~allocator(v2 + 336);
                                        *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
                                        if ( v44 )
                                        {
                                          *(_DWORD *)(((v2 + 3072) >> 3) + 0x7FFF8000) = 0;
                                          if ( *(char *)(((v2 + 3072) >> 3) + 0x7FFF8000) < 0
                                            || *(_BYTE *)(((v2 + 3103) >> 3) + 0x7FFF8000) != 0
                                            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 3103) >> 3) + 0x7FFF8000) )
                                          {
                                            __asan_report_store_n(v2 + 3072, 32LL);
                                          }
                                          common::milog::MiLogStream::create(
                                            (common::milog::MiLogStream *)(v2 + 3072),
                                            &common::milog::MiLogDefault::default_log_obj_,
                                            4u,
                                            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                            "init",
                                            6335);
                                          v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                  (common::milog::MiLogStream *const)(v2 + 3072),
                                                  (const char (*)[16])"[CONFIG_ERROR] ");
                                          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(
                                            v45,
                                            (const char (*)[36])byte_1A6620C0);
                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3072));
                                          v7 = -1;
                                        }
                                        else
                                        {
                                          *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = 0;
                                          *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 1;
                                          std::allocator<char>::allocator(v2 + 352);
                                          std::string::basic_string<std::allocator<char>>(
                                            (std::string *const)(v2 + 3136),
                                            byte_1A625900,
                                            (const std::allocator<char> *)(v2 + 352));
                                          v46 = common::tools::TxtFile::Row::assignToNum<float>(
                                                  row,
                                                  (const std::string *)(v2 + 3136),
                                                  &this->fire_add_hurt) != 0;
                                          std::string::~string((void *)(v2 + 3136));
                                          *(_DWORD *)(((v2 + 3136) >> 3) + 0x7FFF8000) = -117901064;
                                          std::allocator<char>::~allocator(v2 + 352);
                                          *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
                                          if ( v46 )
                                          {
                                            *(_DWORD *)(((v2 + 3200) >> 3) + 0x7FFF8000) = 0;
                                            if ( *(char *)(((v2 + 3200) >> 3) + 0x7FFF8000) < 0
                                              || *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) != 0
                                              && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3231) >> 3) + 0x7FFF8000) )
                                            {
                                              __asan_report_store_n(v2 + 3200, 32LL);
                                            }
                                            common::milog::MiLogStream::create(
                                              (common::milog::MiLogStream *)(v2 + 3200),
                                              &common::milog::MiLogDefault::default_log_obj_,
                                              4u,
                                              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                              "init",
                                              6340);
                                            v47 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                    (common::milog::MiLogStream *const)(v2 + 3200),
                                                    (const char (*)[16])"[CONFIG_ERROR] ");
                                            common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                              v47,
                                              (const char (*)[42])byte_1A662120);
                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3200));
                                            v7 = -1;
                                          }
                                          else
                                          {
                                            *(_DWORD *)(((v2 + 3264) >> 3) + 0x7FFF8000) = 0;
                                            *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = 1;
                                            std::allocator<char>::allocator(v2 + 368);
                                            std::string::basic_string<std::allocator<char>>(
                                              (std::string *const)(v2 + 3264),
                                              byte_1A6259C0,
                                              (const std::allocator<char> *)(v2 + 368));
                                            v48 = common::tools::TxtFile::Row::assignToNum<float>(
                                                    row,
                                                    (const std::string *)(v2 + 3264),
                                                    &this->grass_add_hurt) != 0;
                                            std::string::~string((void *)(v2 + 3264));
                                            *(_DWORD *)(((v2 + 3264) >> 3) + 0x7FFF8000) = -117901064;
                                            std::allocator<char>::~allocator(v2 + 368);
                                            *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
                                            if ( v48 )
                                            {
                                              *(_DWORD *)(((v2 + 3328) >> 3) + 0x7FFF8000) = 0;
                                              if ( *(char *)(((v2 + 3328) >> 3) + 0x7FFF8000) < 0
                                                || *(_BYTE *)(((v2 + 3359) >> 3) + 0x7FFF8000) != 0
                                                && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 3359) >> 3) + 0x7FFF8000) )
                                              {
                                                __asan_report_store_n(v2 + 3328, 32LL);
                                              }
                                              common::milog::MiLogStream::create(
                                                (common::milog::MiLogStream *)(v2 + 3328),
                                                &common::milog::MiLogDefault::default_log_obj_,
                                                4u,
                                                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                "init",
                                                6345);
                                              v49 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                      (common::milog::MiLogStream *const)(v2 + 3328),
                                                      (const char (*)[16])"[CONFIG_ERROR] ");
                                              common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                v49,
                                                (const char (*)[42])byte_1A662180);
                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3328));
                                              v7 = -1;
                                            }
                                            else
                                            {
                                              *(_DWORD *)(((v2 + 3392) >> 3) + 0x7FFF8000) = 0;
                                              *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 1;
                                              std::allocator<char>::allocator(v2 + 384);
                                              std::string::basic_string<std::allocator<char>>(
                                                (std::string *const)(v2 + 3392),
                                                byte_1A625980,
                                                (const std::allocator<char> *)(v2 + 384));
                                              v50 = common::tools::TxtFile::Row::assignToNum<float>(
                                                      row,
                                                      (const std::string *)(v2 + 3392),
                                                      &this->water_add_hurt) != 0;
                                              std::string::~string((void *)(v2 + 3392));
                                              *(_DWORD *)(((v2 + 3392) >> 3) + 0x7FFF8000) = -117901064;
                                              std::allocator<char>::~allocator(v2 + 384);
                                              *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
                                              if ( v50 )
                                              {
                                                *(_DWORD *)(((v2 + 3456) >> 3) + 0x7FFF8000) = 0;
                                                if ( *(char *)(((v2 + 3456) >> 3) + 0x7FFF8000) < 0
                                                  || *(_BYTE *)(((v2 + 3487) >> 3) + 0x7FFF8000) != 0
                                                  && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3487) >> 3) + 0x7FFF8000) )
                                                {
                                                  __asan_report_store_n(v2 + 3456, 32LL);
                                                }
                                                common::milog::MiLogStream::create(
                                                  (common::milog::MiLogStream *)(v2 + 3456),
                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                  4u,
                                                  "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                  "init",
                                                  6350);
                                                v51 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                        (common::milog::MiLogStream *const)(v2 + 3456),
                                                        (const char (*)[16])"[CONFIG_ERROR] ");
                                                common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                  v51,
                                                  (const char (*)[42])byte_1A6621E0);
                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3456));
                                                v7 = -1;
                                              }
                                              else
                                              {
                                                *(_DWORD *)(((v2 + 3520) >> 3) + 0x7FFF8000) = 0;
                                                *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = 1;
                                                std::allocator<char>::allocator(v2 + 400);
                                                std::string::basic_string<std::allocator<char>>(
                                                  (std::string *const)(v2 + 3520),
                                                  byte_1A625940,
                                                  (const std::allocator<char> *)(v2 + 400));
                                                v52 = common::tools::TxtFile::Row::assignToNum<float>(
                                                        row,
                                                        (const std::string *)(v2 + 3520),
                                                        &this->elec_add_hurt) != 0;
                                                std::string::~string((void *)(v2 + 3520));
                                                *(_DWORD *)(((v2 + 3520) >> 3) + 0x7FFF8000) = -117901064;
                                                std::allocator<char>::~allocator(v2 + 400);
                                                *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
                                                if ( v52 )
                                                {
                                                  *(_DWORD *)(((v2 + 3584) >> 3) + 0x7FFF8000) = 0;
                                                  if ( *(char *)(((v2 + 3584) >> 3) + 0x7FFF8000) < 0
                                                    || *(_BYTE *)(((v2 + 3615) >> 3) + 0x7FFF8000) != 0
                                                    && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 3615) >> 3)
                                                                                         + 0x7FFF8000) )
                                                  {
                                                    __asan_report_store_n(v2 + 3584, 32LL);
                                                  }
                                                  common::milog::MiLogStream::create(
                                                    (common::milog::MiLogStream *)(v2 + 3584),
                                                    &common::milog::MiLogDefault::default_log_obj_,
                                                    4u,
                                                    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                    "init",
                                                    6355);
                                                  v53 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                          (common::milog::MiLogStream *const)(v2 + 3584),
                                                          (const char (*)[16])"[CONFIG_ERROR] ");
                                                  common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                    v53,
                                                    (const char (*)[42])byte_1A662240);
                                                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3584));
                                                  v7 = -1;
                                                }
                                                else
                                                {
                                                  *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = 0;
                                                  *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = 1;
                                                  std::allocator<char>::allocator(v2 + 416);
                                                  std::string::basic_string<std::allocator<char>>(
                                                    (std::string *const)(v2 + 3648),
                                                    byte_1A625A00,
                                                    (const std::allocator<char> *)(v2 + 416));
                                                  v54 = common::tools::TxtFile::Row::assignToNum<float>(
                                                          row,
                                                          (const std::string *)(v2 + 3648),
                                                          &this->wind_add_hurt) != 0;
                                                  std::string::~string((void *)(v2 + 3648));
                                                  *(_DWORD *)(((v2 + 3648) >> 3) + 0x7FFF8000) = -117901064;
                                                  std::allocator<char>::~allocator(v2 + 416);
                                                  *(_BYTE *)(((v2 + 416) >> 3) + 0x7FFF8000) = -8;
                                                  if ( v54 )
                                                  {
                                                    *(_DWORD *)(((v2 + 3712) >> 3) + 0x7FFF8000) = 0;
                                                    if ( *(char *)(((v2 + 3712) >> 3) + 0x7FFF8000) < 0
                                                      || *(_BYTE *)(((v2 + 3743) >> 3) + 0x7FFF8000) != 0
                                                      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3743) >> 3)
                                                                                           + 0x7FFF8000) )
                                                    {
                                                      __asan_report_store_n(v2 + 3712, 32LL);
                                                    }
                                                    common::milog::MiLogStream::create(
                                                      (common::milog::MiLogStream *)(v2 + 3712),
                                                      &common::milog::MiLogDefault::default_log_obj_,
                                                      4u,
                                                      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                      "init",
                                                      6360);
                                                    v55 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                            (common::milog::MiLogStream *const)(v2 + 3712),
                                                            (const char (*)[16])"[CONFIG_ERROR] ");
                                                    common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                      v55,
                                                      (const char (*)[42])byte_1A6622A0);
                                                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3712));
                                                    v7 = -1;
                                                  }
                                                  else
                                                  {
                                                    *(_DWORD *)(((v2 + 3776) >> 3) + 0x7FFF8000) = 0;
                                                    *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = 1;
                                                    std::allocator<char>::allocator(v2 + 432);
                                                    std::string::basic_string<std::allocator<char>>(
                                                      (std::string *const)(v2 + 3776),
                                                      byte_1A625A80,
                                                      (const std::allocator<char> *)(v2 + 432));
                                                    v56 = common::tools::TxtFile::Row::assignToNum<float>(
                                                            row,
                                                            (const std::string *)(v2 + 3776),
                                                            &this->ice_add_hurt) != 0;
                                                    std::string::~string((void *)(v2 + 3776));
                                                    *(_DWORD *)(((v2 + 3776) >> 3) + 0x7FFF8000) = -117901064;
                                                    std::allocator<char>::~allocator(v2 + 432);
                                                    *(_BYTE *)(((v2 + 432) >> 3) + 0x7FFF8000) = -8;
                                                    if ( v56 )
                                                    {
                                                      *(_DWORD *)(((v2 + 3840) >> 3) + 0x7FFF8000) = 0;
                                                      if ( *(char *)(((v2 + 3840) >> 3) + 0x7FFF8000) < 0
                                                        || *(_BYTE *)(((v2 + 3871) >> 3) + 0x7FFF8000) != 0
                                                        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 3871) >> 3)
                                                                                             + 0x7FFF8000) )
                                                      {
                                                        __asan_report_store_n(v2 + 3840, 32LL);
                                                      }
                                                      common::milog::MiLogStream::create(
                                                        (common::milog::MiLogStream *)(v2 + 3840),
                                                        &common::milog::MiLogDefault::default_log_obj_,
                                                        4u,
                                                        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                        "init",
                                                        6365);
                                                      v57 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                              (common::milog::MiLogStream *const)(v2 + 3840),
                                                              (const char (*)[16])"[CONFIG_ERROR] ");
                                                      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                        v57,
                                                        (const char (*)[42])byte_1A662300);
                                                      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3840));
                                                      v7 = -1;
                                                    }
                                                    else
                                                    {
                                                      *(_DWORD *)(((v2 + 3904) >> 3) + 0x7FFF8000) = 0;
                                                      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = 1;
                                                      std::allocator<char>::allocator(v2 + 448);
                                                      std::string::basic_string<std::allocator<char>>(
                                                        (std::string *const)(v2 + 3904),
                                                        byte_1A625A40,
                                                        (const std::allocator<char> *)(v2 + 448));
                                                      v58 = common::tools::TxtFile::Row::assignToNum<float>(
                                                              row,
                                                              (const std::string *)(v2 + 3904),
                                                              &this->rock_add_hurt) != 0;
                                                      std::string::~string((void *)(v2 + 3904));
                                                      *(_DWORD *)(((v2 + 3904) >> 3) + 0x7FFF8000) = -117901064;
                                                      std::allocator<char>::~allocator(v2 + 448);
                                                      *(_BYTE *)(((v2 + 448) >> 3) + 0x7FFF8000) = -8;
                                                      if ( v58 )
                                                      {
                                                        *(_DWORD *)(((v2 + 3968) >> 3) + 0x7FFF8000) = 0;
                                                        if ( *(char *)(((v2 + 3968) >> 3) + 0x7FFF8000) < 0
                                                          || *(_BYTE *)(((v2 + 3999) >> 3) + 0x7FFF8000) != 0
                                                          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 3999) >> 3)
                                                                                               + 0x7FFF8000) )
                                                        {
                                                          __asan_report_store_n(v2 + 3968, 32LL);
                                                        }
                                                        common::milog::MiLogStream::create(
                                                          (common::milog::MiLogStream *)(v2 + 3968),
                                                          &common::milog::MiLogDefault::default_log_obj_,
                                                          4u,
                                                          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                          "init",
                                                          6370);
                                                        v59 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                (common::milog::MiLogStream *const)(v2 + 3968),
                                                                (const char (*)[16])"[CONFIG_ERROR] ");
                                                        common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(
                                                          v59,
                                                          (const char (*)[42])byte_1A662360);
                                                        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 3968));
                                                        v7 = -1;
                                                      }
                                                      else
                                                      {
                                                        std::vector<data::FightPropGrowConfig>::resize(
                                                          &this->prop_grow_curves,
                                                          5uLL);
                                                        array_count = 0;
                                                        for ( i = 0; i <= 4; ++i )
                                                        {
                                                          snprintf((char *)(v2 + 4800), 0x100uLL, asc_1A6623C0, i + 1);
                                                          *(_DWORD *)(((v2 + 4032) >> 3) + 0x7FFF8000) = 0;
                                                          *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = 1;
                                                          std::allocator<char>::allocator(v2 + 464);
                                                          std::string::basic_string<std::allocator<char>>(
                                                            (std::string *const)(v2 + 4032),
                                                            (const char *)(v2 + 4800),
                                                            (const std::allocator<char> *)(v2 + 464));
                                                          v60 = !common::tools::TxtFile::Row::hasKey(
                                                                   row,
                                                                   (const std::string *)(v2 + 4032));
                                                          std::string::~string((void *)(v2 + 4032));
                                                          *(_DWORD *)(((v2 + 4032) >> 3) + 0x7FFF8000) = -117901064;
                                                          std::allocator<char>::~allocator(v2 + 464);
                                                          *(_BYTE *)(((v2 + 464) >> 3) + 0x7FFF8000) = -8;
                                                          if ( !v60 )
                                                          {
                                                            p_type = &std::vector<data::FightPropGrowConfig>::operator[](
                                                                        &this->prop_grow_curves,
                                                                        i)->type;
                                                            *(_DWORD *)(((v2 + 4096) >> 3) + 0x7FFF8000) = 0;
                                                            *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = 1;
                                                            std::allocator<char>::allocator(v2 + 480);
                                                            std::string::basic_string<std::allocator<char>>(
                                                              (std::string *const)(v2 + 4096),
                                                              (const char *)(v2 + 4800),
                                                              (const std::allocator<char> *)(v2 + 480));
                                                            LOBYTE(p_type) = common::tools::TxtFile::Row::assignToEnum<data::FightPropType>(
                                                                               row,
                                                                               (const std::string *)(v2 + 4096),
                                                                               p_type) != 0;
                                                            std::string::~string((void *)(v2 + 4096));
                                                            *(_DWORD *)(((v2 + 4096) >> 3) + 0x7FFF8000) = -117901064;
                                                            std::allocator<char>::~allocator(v2 + 480);
                                                            *(_BYTE *)(((v2 + 480) >> 3) + 0x7FFF8000) = -8;
                                                            if ( (_BYTE)p_type )
                                                            {
                                                              *(_DWORD *)(((v2 + 4160) >> 3) + 0x7FFF8000) = 0;
                                                              if ( *(char *)(((v2 + 4160) >> 3) + 0x7FFF8000) < 0
                                                                || *(_BYTE *)(((v2 + 4191) >> 3) + 0x7FFF8000) != 0
                                                                && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 4191) >> 3) + 0x7FFF8000) )
                                                              {
                                                                __asan_report_store_n(v2 + 4160, 32LL);
                                                              }
                                                              common::milog::MiLogStream::create(
                                                                (common::milog::MiLogStream *)(v2 + 4160),
                                                                &common::milog::MiLogDefault::default_log_obj_,
                                                                4u,
                                                                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                                "init",
                                                                6382);
                                                              v62 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                      (common::milog::MiLogStream *const)(v2 + 4160),
                                                                      (const char (*)[16])"[CONFIG_ERROR] ");
                                                              v63 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                                                                      v62,
                                                                      (const char (*)[14])byte_1A662400);
                                                              v64 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(
                                                                      v63,
                                                                      (const char (*)[256])(v2 + 4800));
                                                              common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
                                                                v64,
                                                                (const char (*)[7])byte_1A662440);
                                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4160));
                                                              v7 = -1;
                                                              goto LABEL_139;
                                                            }
                                                            snprintf((char *)(v2 + 4800), 0x100uLL, asc_1A662480, i + 1);
                                                            *(_DWORD *)(((v2 + 4224) >> 3) + 0x7FFF8000) = 0;
                                                            *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = 1;
                                                            std::allocator<char>::allocator(v2 + 496);
                                                            std::string::basic_string<std::allocator<char>>(
                                                              (std::string *const)(v2 + 4224),
                                                              (const char *)(v2 + 4800),
                                                              (const std::allocator<char> *)(v2 + 496));
                                                            v65 = !common::tools::TxtFile::Row::hasKey(
                                                                     row,
                                                                     (const std::string *)(v2 + 4224));
                                                            std::string::~string((void *)(v2 + 4224));
                                                            *(_DWORD *)(((v2 + 4224) >> 3) + 0x7FFF8000) = -117901064;
                                                            std::allocator<char>::~allocator(v2 + 496);
                                                            *(_BYTE *)(((v2 + 496) >> 3) + 0x7FFF8000) = -8;
                                                            if ( !v65 )
                                                            {
                                                              p_grow_curve = &std::vector<data::FightPropGrowConfig>::operator[](
                                                                                &this->prop_grow_curves,
                                                                                i)->grow_curve;
                                                              *(_DWORD *)(((v2 + 4288) >> 3) + 0x7FFF8000) = 0;
                                                              *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = 1;
                                                              std::allocator<char>::allocator(v2 + 512);
                                                              std::string::basic_string<std::allocator<char>>(
                                                                (std::string *const)(v2 + 4288),
                                                                (const char *)(v2 + 4800),
                                                                (const std::allocator<char> *)(v2 + 512));
                                                              LOBYTE(p_grow_curve) = common::tools::TxtFile::Row::assignToEnum<data::GrowCurveType>(
                                                                                       row,
                                                                                       (const std::string *)(v2 + 4288),
                                                                                       p_grow_curve) != 0;
                                                              std::string::~string((void *)(v2 + 4288));
                                                              *(_DWORD *)(((v2 + 4288) >> 3) + 0x7FFF8000) = -117901064;
                                                              std::allocator<char>::~allocator(v2 + 512);
                                                              *(_BYTE *)(((v2 + 512) >> 3) + 0x7FFF8000) = -8;
                                                              if ( (_BYTE)p_grow_curve )
                                                              {
                                                                *(_DWORD *)(((v2 + 4352) >> 3) + 0x7FFF8000) = 0;
                                                                if ( *(char *)(((v2 + 4352) >> 3) + 0x7FFF8000) < 0
                                                                  || *(_BYTE *)(((v2 + 4383) >> 3) + 0x7FFF8000) != 0
                                                                  && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 4383) >> 3) + 0x7FFF8000) )
                                                                {
                                                                  __asan_report_store_n(v2 + 4352, 32LL);
                                                                }
                                                                common::milog::MiLogStream::create(
                                                                  (common::milog::MiLogStream *)(v2 + 4352),
                                                                  &common::milog::MiLogDefault::default_log_obj_,
                                                                  4u,
                                                                  "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                                  "init",
                                                                  6390);
                                                                v67 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                        (common::milog::MiLogStream *const)(v2 + 4352),
                                                                        (const char (*)[16])"[CONFIG_ERROR] ");
                                                                v68 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                                                                        v67,
                                                                        (const char (*)[14])byte_1A662400);
                                                                v69 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(
                                                                        v68,
                                                                        (const char (*)[256])(v2 + 4800));
                                                                common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(
                                                                  v69,
                                                                  (const char (*)[7])byte_1A662440);
                                                                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4352));
                                                                v7 = -1;
                                                                goto LABEL_139;
                                                              }
                                                              array_count = i + 1;
                                                            }
                                                          }
                                                        }
                                                        std::vector<data::FightPropGrowConfig>::resize(
                                                          &this->prop_grow_curves,
                                                          array_count);
                                                        *(_DWORD *)(((v2 + 4416) >> 3) + 0x7FFF8000) = 0;
                                                        *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = 1;
                                                        std::allocator<char>::allocator(v2 + 528);
                                                        std::string::basic_string<std::allocator<char>>(
                                                          (std::string *const)(v2 + 4416),
                                                          byte_1A6257C0,
                                                          (const std::allocator<char> *)(v2 + 528));
                                                        v70 = common::tools::TxtFile::Row::assignToNum<float>(
                                                                row,
                                                                (const std::string *)(v2 + 4416),
                                                                &this->element_mastery) != 0;
                                                        std::string::~string((void *)(v2 + 4416));
                                                        *(_DWORD *)(((v2 + 4416) >> 3) + 0x7FFF8000) = -117901064;
                                                        std::allocator<char>::~allocator(v2 + 528);
                                                        *(_BYTE *)(((v2 + 528) >> 3) + 0x7FFF8000) = -8;
                                                        if ( v70 )
                                                        {
                                                          *(_DWORD *)(((v2 + 4480) >> 3) + 0x7FFF8000) = 0;
                                                          if ( *(char *)(((v2 + 4480) >> 3) + 0x7FFF8000) < 0
                                                            || *(_BYTE *)(((v2 + 4511) >> 3) + 0x7FFF8000) != 0
                                                            && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 4511) >> 3)
                                                                                                 + 0x7FFF8000) )
                                                          {
                                                            __asan_report_store_n(v2 + 4480, 32LL);
                                                          }
                                                          common::milog::MiLogStream::create(
                                                            (common::milog::MiLogStream *)(v2 + 4480),
                                                            &common::milog::MiLogDefault::default_log_obj_,
                                                            4u,
                                                            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                            "init",
                                                            6399);
                                                          v71 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                  (common::milog::MiLogStream *const)(v2 + 4480),
                                                                  (const char (*)[16])"[CONFIG_ERROR] ");
                                                          common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                                            v71,
                                                            (const char (*)[33])byte_1A6624C0);
                                                          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4480));
                                                          v7 = -1;
                                                        }
                                                        else
                                                        {
                                                          *(_DWORD *)(((v2 + 4544) >> 3) + 0x7FFF8000) = 0;
                                                          *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = 1;
                                                          std::allocator<char>::allocator(v2 + 544);
                                                          std::string::basic_string<std::allocator<char>>(
                                                            (std::string *const)(v2 + 4544),
                                                            byte_1A625800,
                                                            (const std::allocator<char> *)(v2 + 544));
                                                          v72 = common::tools::TxtFile::Row::assignToNum<float>(
                                                                  row,
                                                                  (const std::string *)(v2 + 4544),
                                                                  &this->physical_sub_hurt) != 0;
                                                          std::string::~string((void *)(v2 + 4544));
                                                          *(_DWORD *)(((v2 + 4544) >> 3) + 0x7FFF8000) = -117901064;
                                                          std::allocator<char>::~allocator(v2 + 544);
                                                          *(_BYTE *)(((v2 + 544) >> 3) + 0x7FFF8000) = -8;
                                                          if ( v72 )
                                                          {
                                                            *(_DWORD *)(((v2 + 4608) >> 3) + 0x7FFF8000) = 0;
                                                            if ( *(char *)(((v2 + 4608) >> 3) + 0x7FFF8000) < 0
                                                              || *(_BYTE *)(((v2 + 4639) >> 3) + 0x7FFF8000) != 0
                                                              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 4639) >> 3) + 0x7FFF8000) )
                                                            {
                                                              __asan_report_store_n(v2 + 4608, 32LL);
                                                            }
                                                            common::milog::MiLogStream::create(
                                                              (common::milog::MiLogStream *)(v2 + 4608),
                                                              &common::milog::MiLogDefault::default_log_obj_,
                                                              4u,
                                                              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                              "init",
                                                              6404);
                                                            v73 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                    (common::milog::MiLogStream *const)(v2 + 4608),
                                                                    (const char (*)[16])"[CONFIG_ERROR] ");
                                                            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(
                                                              v73,
                                                              (const char (*)[33])byte_1A662520);
                                                            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4608));
                                                            v7 = -1;
                                                          }
                                                          else
                                                          {
                                                            *(_DWORD *)(((v2 + 4672) >> 3) + 0x7FFF8000) = 0;
                                                            *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = 1;
                                                            std::allocator<char>::allocator(v2 + 560);
                                                            std::string::basic_string<std::allocator<char>>(
                                                              (std::string *const)(v2 + 4672),
                                                              byte_1A625840,
                                                              (const std::allocator<char> *)(v2 + 560));
                                                            v74 = common::tools::TxtFile::Row::assignToNum<float>(
                                                                    row,
                                                                    (const std::string *)(v2 + 4672),
                                                                    &this->physical_add_hurt) != 0;
                                                            std::string::~string((void *)(v2 + 4672));
                                                            *(_DWORD *)(((v2 + 4672) >> 3) + 0x7FFF8000) = -117901064;
                                                            std::allocator<char>::~allocator(v2 + 560);
                                                            *(_BYTE *)(((v2 + 560) >> 3) + 0x7FFF8000) = -8;
                                                            if ( v74 )
                                                            {
                                                              *(_DWORD *)(((v2 + 4736) >> 3) + 0x7FFF8000) = 0;
                                                              if ( *(char *)(((v2 + 4736) >> 3) + 0x7FFF8000) < 0
                                                                || *(_BYTE *)(((v2 + 4767) >> 3) + 0x7FFF8000) != 0
                                                                && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 4767) >> 3) + 0x7FFF8000) )
                                                              {
                                                                __asan_report_store_n(v2 + 4736, 32LL);
                                                              }
                                                              common::milog::MiLogStream::create(
                                                                (common::milog::MiLogStream *)(v2 + 4736),
                                                                &common::milog::MiLogDefault::default_log_obj_,
                                                                4u,
                                                                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                                                                "init",
                                                                6409);
                                                              v75 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                                                                      (common::milog::MiLogStream *const)(v2 + 4736),
                                                                      (const char (*)[16])"[CONFIG_ERROR] ");
                                                              common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(
                                                                v75,
                                                                (const char (*)[39])byte_1A662580);
                                                              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 4736));
                                                              v7 = -1;
                                                            }
                                                            else
                                                            {
                                                              v7 = 0;
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_139:
  v76 = v7;
  if ( v80 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8064) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF806C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8074) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF807C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8084) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF808C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8094) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF809C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80A4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80AC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80B4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80BC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80C4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80CC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80DC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80E4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80EC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80F4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF80FC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8104) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF810C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8114) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF811C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8124) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF812C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8134) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF813C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8144) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF814C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8154) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF815C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8164) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF816C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8174) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF817C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8184) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF818C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8194) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF819C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81A4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81AC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81B4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81BC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81C4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81CC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81D4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81DC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81E4) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF81EC) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81F4) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF81FC) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8204) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF820C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8214) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF821C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8224) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF822C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8234) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF823C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8244) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF824C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8254) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8278) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_7(v2, 5120LL, v80);
  }
  return v76;
};

// Line 6417: range 000000000FAF09B2-000000000FAF0F3A
int32_t __cdecl data::IntervalValue::init(data::IntervalValue *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  char v10[368]; // [rsp+10h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::IntervalValue::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    &byte_1A6625E0,
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToNum<float>(row, (const std::string *)(v2 + 64), (float *)this + 2) != 0;
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6420);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v6, (const char (*)[27])byte_1A662620);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      &byte_1A662660,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToNum<float>(row, (const std::string *)(v2 + 192), (float *)this + 3) != 0;
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6425);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])byte_1A6626A0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6433: range 000000000FAF0F3C-000000000FAF14C4
int32_t __cdecl data::IdCountConfig::init(data::IdCountConfig *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  char v10[368]; // [rsp+10h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::IdCountConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "ID",
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 64), &this->id) != 0;
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6436);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      &byte_1A6626E0,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 192), &this->count) != 0;
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6441);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])byte_1A662720);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6449: range 000000000FAF14C6-000000000FAF1A4E
int32_t __cdecl data::IdCountStrConfig::init(
        data::IdCountStrConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  char v10[368]; // [rsp+10h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::IdCountStrConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    "ID",
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
         row,
         (const std::string *)(v2 + 64),
         (unsigned int *)this + 2) != 0;
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6452);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      &byte_1A6626E0,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToStr(
           row,
           (const std::string *)(v2 + 192),
           (std::string *)((char *)this + 16)) != 0;
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6457);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])byte_1A662720);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6465: range 000000000FAF1A50-000000000FAF1FD8
int32_t __cdecl data::PropValConfig::init(data::PropValConfig *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  char v10[368]; // [rsp+10h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::PropValConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    &byte_1A6609E0,
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToEnum<data::FightPropType>(
         row,
         (const std::string *)(v2 + 64),
         &this->prop_type) != 0;
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6468);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v6, (const char (*)[27])byte_1A660A20);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      off_1A662760,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToNum<float>(row, (const std::string *)(v2 + 192), &this->value) != 0;
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6473);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v9, (const char (*)[24])byte_1A6627A0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6481: range 000000000FAF1FDA-000000000FAF27FC
int32_t __cdecl data::GrowCurveInfo::init(data::GrowCurveInfo *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  bool v10; // r14
  common::milog::MiLogStream *v11; // rax
  char v12[528]; // [rsp+10h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::GrowCurveInfo::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    &byte_1A6609E0,
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToEnum<data::GrowCurveType>(row, (const std::string *)(v2 + 96), &this->type) != 0;
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6484);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v6, (const char (*)[27])byte_1A660A20);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      &byte_1A6628A0,
      (const std::allocator<char> *)(v2 + 64));
    v8 = common::tools::TxtFile::Row::assignToEnum<data::ArithType>(row, (const std::string *)(v2 + 224), &this->arith) != 0;
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6489);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])byte_1A6628E0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = -1;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        off_1A662760,
        (const std::allocator<char> *)(v2 + 80));
      v10 = common::tools::TxtFile::Row::assignToNum<float>(row, (const std::string *)(v2 + 352), &this->value) != 0;
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6494);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v11, (const char (*)[24])byte_1A6627A0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = -1;
      }
      else
      {
        result = 0;
      }
    }
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 6502: range 000000000FAF27FE-000000000FAF3873
int32_t __cdecl data::BaseTalentConfig::init(
        data::BaseTalentConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  common::milog::MiLogStream *v6; // rax
  int v7; // eax
  bool v8; // r15
  data::FightPropType *p_prop_type; // r15
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  bool v13; // r15
  float *p_value; // r15
  common::milog::MiLogStream *v15; // rax
  common::milog::MiLogStream *v16; // rax
  common::milog::MiLogStream *v17; // rax
  bool v18; // r15
  float *v19; // r15
  common::milog::MiLogStream *v20; // rax
  common::milog::MiLogStream *v21; // rax
  common::milog::MiLogStream *v22; // rax
  int32_t v23; // ebx
  uint32_t array_count; // [rsp+14h] [rbp-4DCh]
  uint32_t array_counta; // [rsp+14h] [rbp-4DCh]
  uint32_t i; // [rsp+18h] [rbp-4D8h]
  uint32_t i_0; // [rsp+1Ch] [rbp-4D4h]
  char v29[1232]; // [rsp+20h] [rbp-4D0h] BYREF

  v2 = (unsigned __int64)v29;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1184LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "19 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <u"
                        "nknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 256 13 col_name:6503";
  *(_QWORD *)(v2 + 16) = data::BaseTalentConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862755] = -202116109;
  v4[536862756] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    &byte_1A662AA0,
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 160), &this->open_config) != 0;
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 95) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6507);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [39],(char *[39])0>(v6, (const char (*)[39])byte_1A662AE0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v7 = -1;
    goto LABEL_32;
  }
  std::vector<data::PropValConfig>::resize(&this->add_props, 3uLL);
  array_count = 0;
  for ( i = 0; i <= 2; ++i )
  {
    snprintf((char *)(v2 + 864), 0x100uLL, asc_1A662B40, i + 1);
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      (const char *)(v2 + 864),
      (const std::allocator<char> *)(v2 + 64));
    v8 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 288));
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( !v8 )
    {
      p_prop_type = &std::vector<data::PropValConfig>::operator[](&this->add_props, i)->prop_type;
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        (const char *)(v2 + 864),
        (const std::allocator<char> *)(v2 + 80));
      LOBYTE(p_prop_type) = common::tools::TxtFile::Row::assignToEnum<data::FightPropType>(
                              row,
                              (const std::string *)(v2 + 352),
                              p_prop_type) != 0;
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( (_BYTE)p_prop_type )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6519);
        v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])byte_1A662400);
        v12 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v11, (const char (*)[256])(v2 + 864));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])byte_1A662440);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        v7 = -1;
        goto LABEL_32;
      }
      snprintf((char *)(v2 + 864), 0x100uLL, asc_1A662B80, i + 1);
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 96);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 480),
        (const char *)(v2 + 864),
        (const std::allocator<char> *)(v2 + 96));
      v13 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 480));
      std::string::~string((void *)(v2 + 480));
      *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 96);
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      if ( !v13 )
      {
        p_value = &std::vector<data::PropValConfig>::operator[](&this->add_props, i)->value;
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 112);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 544),
          (const char *)(v2 + 864),
          (const std::allocator<char> *)(v2 + 112));
        LOBYTE(p_value) = common::tools::TxtFile::Row::assignToNum<float>(row, (const std::string *)(v2 + 544), p_value) != 0;
        std::string::~string((void *)(v2 + 544));
        *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 112);
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
        if ( (_BYTE)p_value )
        {
          *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 608, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 608),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6527);
          v15 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 608),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v16 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v15, (const char (*)[14])byte_1A662400);
          v17 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v16, (const char (*)[256])(v2 + 864));
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v17, (const char (*)[7])byte_1A662440);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
          v7 = -1;
          goto LABEL_32;
        }
        array_count = i + 1;
      }
    }
  }
  std::vector<data::PropValConfig>::resize(&this->add_props, array_count);
  std::vector<float>::resize(&this->param_list, 0x14uLL);
  array_counta = 0;
  for ( i_0 = 0; ; ++i_0 )
  {
    if ( i_0 > 0x13 )
    {
      std::vector<float>::resize(&this->param_list, array_counta);
      v7 = 0;
      goto LABEL_32;
    }
    snprintf((char *)(v2 + 864), 0x100uLL, &byte_1A662BC0, i_0 + 1);
    *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 128);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 672),
      (const char *)(v2 + 864),
      (const std::allocator<char> *)(v2 + 128));
    v18 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 672));
    std::string::~string((void *)(v2 + 672));
    *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 128);
    *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
    if ( !v18 )
      break;
LABEL_30:
    ;
  }
  v19 = std::vector<float>::operator[](&this->param_list, i_0);
  *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 144);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 736),
    (const char *)(v2 + 864),
    (const std::allocator<char> *)(v2 + 144));
  LOBYTE(v19) = common::tools::TxtFile::Row::assignToNum<float>(row, (const std::string *)(v2 + 736), v19) != 0;
  std::string::~string((void *)(v2 + 736));
  *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 144);
  *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
  if ( !(_BYTE)v19 )
  {
    array_counta = i_0 + 1;
    goto LABEL_30;
  }
  *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 800, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 800),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
    "init",
    6543);
  v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 800),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v21 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v20, (const char (*)[14])byte_1A662400);
  v22 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v21, (const char (*)[256])(v2 + 864));
  common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v22, (const char (*)[7])byte_1A662440);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
  v7 = -1;
LABEL_32:
  v23 = v7;
  if ( v29 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8068) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF808C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1184LL, v29);
  }
  return v23;
};

// Line 6555: range 000000000FAF3874-000000000FAF4096
int32_t __cdecl data::RandomItemConfig::init(
        data::RandomItemConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  bool v10; // r14
  common::milog::MiLogStream *v11; // rax
  char v12[528]; // [rsp+10h] [rbp-210h] BYREF

  v2 = (unsigned __int64)v12;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(480LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::RandomItemConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "ID",
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 96), &this->item_id) != 0;
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6558);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      &byte_1A6626E0,
      (const std::allocator<char> *)(v2 + 64));
    v8 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 224), &this->count) != 0;
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 95) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6563);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v9, (const char (*)[27])byte_1A662720);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = -1;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        &byte_1A662C00,
        (const std::allocator<char> *)(v2 + 80));
      v10 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 352), &this->weight) != 0;
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6568);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v11, (const char (*)[27])byte_1A662C40);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = -1;
      }
      else
      {
        result = 0;
      }
    }
  }
  if ( v12 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = -168430091;
  }
  return result;
};

// Line 6576: range 000000000FAF4098-000000000FAF4B30
int32_t __cdecl data::BaseServerBuffConfig::init(
        data::BaseServerBuffConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  bool v10; // r14
  common::milog::MiLogStream *v11; // rax
  bool v12; // r14
  common::milog::MiLogStream *v13; // rax
  char v14[656]; // [rsp+10h] [rbp-290h] BYREF

  v2 = (unsigned __int64)v14;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(608LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "12 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 "
                        "9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 32 9 <unknown> 480 32 9"
                        " <unknown> 544 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::BaseServerBuffConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    "ServerBuffID",
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
         row,
         (const std::string *)(v2 + 96),
         &this->server_buff_id) != 0;
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6579);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v6, (const char (*)[33])byte_1A662DA0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      aServerbuff,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToEnum<data::ServerBuffType>(
           row,
           (const std::string *)(v2 + 224),
           &this->server_buff_type) != 0;
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 288) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 319) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 288, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 288),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6584);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 288),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [37],(char *[37])0>(v9, (const char (*)[37])byte_1A662E40);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 288));
      result = -1;
    }
    else
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 64);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 352),
        aAbility_1,
        (const std::allocator<char> *)(v2 + 64));
      v10 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 352), &this->ability_name) != 0;
      std::string::~string((void *)(v2 + 352));
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 64);
      *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 416) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 447) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 416, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 416),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6589);
        v11 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 416),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [34],(char *[34])0>(v11, (const char (*)[34])byte_1A662EE0);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 416));
        result = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 480),
          aModifier_0,
          (const std::allocator<char> *)(v2 + 80));
        v12 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 480), &this->modifier_name) != 0;
        std::string::~string((void *)(v2 + 480));
        *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( v12 )
        {
          *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 544, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 544),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6594);
          v13 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 544),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(v13, (const char (*)[35])byte_1A662F80);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
          result = -1;
        }
        else
        {
          result = 0;
        }
      }
    }
  }
  if ( v14 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8020) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8048) = -168430091;
  }
  return result;
};

// Line 6602: range 000000000FAF4B32-000000000FAF5372
int32_t __cdecl data::WatcherTriggerConfig::init(
        data::WatcherTriggerConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  std::string *v9; // r14
  common::milog::MiLogStream *v10; // rax
  common::milog::MiLogStream *v11; // rax
  common::milog::MiLogStream *v12; // rax
  uint32_t array_count; // [rsp+18h] [rbp-318h]
  uint32_t i; // [rsp+1Ch] [rbp-314h]
  char v15[784]; // [rsp+20h] [rbp-310h] BYREF

  v2 = (unsigned __int64)v15;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(736LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "9 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 32 9 <unknown> 160 32 9 <unknown> 224 32"
                        " 9 <unknown> 288 32 9 <unknown> 352 32 9 <unknown> 416 256 13 col_name:6603";
  *(_QWORD *)(v2 + 16) = data::WatcherTriggerConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862724] = -218959118;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862741] = -202116109;
  v4[536862742] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 96),
    &byte_1A6609E0,
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToEnum<data::WatcherTriggerType>(
         row,
         (const std::string *)(v2 + 96),
         &this->trigger_type) != 0;
  std::string::~string((void *)(v2 + 96));
  *(_DWORD *)(((v2 + 96) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 160) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 191) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 160, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 160),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6607);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 160),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v6, (const char (*)[27])byte_1A660A20);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 160));
    result = -1;
    goto LABEL_18;
  }
  std::vector<std::string>::resize(&this->param_list, 5uLL);
  array_count = 0;
  for ( i = 0; ; ++i )
  {
    if ( i > 4 )
    {
      std::vector<std::string>::resize(&this->param_list, array_count);
      result = 0;
      goto LABEL_18;
    }
    snprintf((char *)(v2 + 416), 0x100uLL, &byte_1A662BC0, i + 1);
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 224),
      (const char *)(v2 + 416),
      (const std::allocator<char> *)(v2 + 64));
    v8 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 224));
    std::string::~string((void *)(v2 + 224));
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( !v8 )
      break;
LABEL_16:
    ;
  }
  v9 = std::vector<std::string>::operator[](&this->param_list, i);
  *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 80);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 288),
    (const char *)(v2 + 416),
    (const std::allocator<char> *)(v2 + 80));
  LOBYTE(v9) = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 288), v9) != 0;
  std::string::~string((void *)(v2 + 288));
  *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 80);
  *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
  if ( !(_BYTE)v9 )
  {
    array_count = i + 1;
    goto LABEL_16;
  }
  *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 352, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 352),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
    "init",
    6619);
  v10 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 352),
          (const char (*)[16])"[CONFIG_ERROR] ");
  v11 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v10, (const char (*)[14])byte_1A662400);
  v12 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v11, (const char (*)[256])(v2 + 416));
  common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v12, (const char (*)[7])byte_1A662440);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
  result = -1;
LABEL_18:
  if ( v15 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8010) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8030) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8058) = -168430091;
  }
  return result;
};

// Line 6631: range 000000000FAF5374-000000000FAF6287
int32_t __cdecl data::WatcherConfig::init(data::WatcherConfig *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  common::milog::MiLogStream *v6; // rax
  int v7; // eax
  bool v8; // r15
  common::milog::MiLogStream *v9; // rax
  bool v10; // r15
  std::string *v11; // r15
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  bool v15; // r15
  common::milog::MiLogStream *v16; // rax
  bool v17; // r15
  common::milog::MiLogStream *v18; // rax
  int32_t v19; // ebx
  uint32_t array_count; // [rsp+18h] [rbp-4B8h]
  uint32_t i; // [rsp+1Ch] [rbp-4B4h]
  char v23[1200]; // [rsp+20h] [rbp-4B0h] BYREF

  v2 = (unsigned __int64)v23;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1152LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "18 32 1 9 <unknown> 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 "
                        "<unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <"
                        "unknown> 448 32 9 <unknown> 512 32 9 <unknown> 576 32 9 <unknown> 640 32 9 <unknown> 704 32 9 <u"
                        "nknown> 768 32 9 <unknown> 832 256 13 col_name:6632";
  *(_QWORD *)(v2 + 16) = data::WatcherConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862739] = -218959118;
  v4[536862741] = -218959118;
  v4[536862743] = -218959118;
  v4[536862745] = -218959118;
  v4[536862754] = -202116109;
  v4[536862755] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 128),
    "ID",
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 128), &this->id) != 0;
  std::string::~string((void *)(v2 + 128));
  *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 192) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 33) & 7) >= *(_BYTE *)(((v2 + 223) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 192, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 192),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6636);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 192),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 192));
    v7 = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 256),
      asc_1A663200,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToEnum<data::WatcherTriggerType>(
           row,
           (const std::string *)(v2 + 256),
           &this->trigger_config.trigger_type) != 0;
    std::string::~string((void *)(v2 + 256));
    *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 320, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 320),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6641);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 320),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [41],(char *[41])0>(v9, (const char (*)[41])byte_1A663240);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
      v7 = -1;
    }
    else
    {
      std::vector<std::string>::resize(&this->trigger_config.param_list, 5uLL);
      array_count = 0;
      for ( i = 0; i <= 4; ++i )
      {
        snprintf((char *)(v2 + 832), 0x100uLL, asc_1A6632A0, i + 1);
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 64);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 384),
          (const char *)(v2 + 832),
          (const std::allocator<char> *)(v2 + 64));
        v10 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 384));
        std::string::~string((void *)(v2 + 384));
        *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 64);
        *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
        if ( !v10 )
        {
          v11 = std::vector<std::string>::operator[](&this->trigger_config.param_list, i);
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 80);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 448),
            (const char *)(v2 + 832),
            (const std::allocator<char> *)(v2 + 80));
          LOBYTE(v11) = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 448), v11) != 0;
          std::string::~string((void *)(v2 + 448));
          *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 80);
          *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
          if ( (_BYTE)v11 )
          {
            *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 512, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 512),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
              "init",
              6653);
            v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 512),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v12,
                    (const char (*)[14])byte_1A662400);
            v14 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(
                    v13,
                    (const char (*)[256])(v2 + 832));
            common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])byte_1A662440);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
            v7 = -1;
            goto LABEL_30;
          }
          array_count = i + 1;
        }
      }
      std::vector<std::string>::resize(&this->trigger_config.param_list, array_count);
      *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 96);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 576),
        &byte_1A6632E0,
        (const std::allocator<char> *)(v2 + 96));
      v15 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
              row,
              (const std::string *)(v2 + 576),
              &this->progress) != 0;
      std::string::~string((void *)(v2 + 576));
      *(_DWORD *)(((v2 + 576) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 96);
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      if ( v15 )
      {
        *(_DWORD *)(((v2 + 640) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 640) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 671) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 640, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 640),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6662);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 640),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v16, (const char (*)[27])byte_1A663320);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 640));
        v7 = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 112);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 704),
          &byte_1A663360,
          (const std::allocator<char> *)(v2 + 112));
        v17 = common::tools::TxtFile::Row::assignToNum<bool>(row, (const std::string *)(v2 + 704), &this->is_disuse) != 0;
        std::string::~string((void *)(v2 + 704));
        *(_DWORD *)(((v2 + 704) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 112);
        *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
        if ( v17 )
        {
          *(_DWORD *)(((v2 + 768) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 768) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 799) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 768, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 768),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6667);
          v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 768),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [30],(char *[30])0>(v18, (const char (*)[30])byte_1A6633A0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 768));
          v7 = -1;
        }
        else
        {
          v7 = 0;
        }
      }
    }
  }
LABEL_30:
  v19 = v7;
  if ( v23 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF803C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF804C) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8054) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF805C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8064) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8088) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1152LL, v23);
  }
  return v19;
};

// Line 6675: range 000000000FAF6288-000000000FAF7419
int32_t __cdecl data::QuestGuide::init(data::QuestGuide *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r15
  common::milog::MiLogStream *v6; // rax
  int v7; // eax
  bool v8; // r15
  common::milog::MiLogStream *v9; // rax
  bool v10; // r15
  std::string *v11; // r15
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  bool v15; // r15
  common::milog::MiLogStream *v16; // rax
  bool v17; // r15
  common::milog::MiLogStream *v18; // rax
  bool v19; // r15
  common::milog::MiLogStream *v20; // rax
  int32_t v21; // ebx
  uint32_t array_count; // [rsp+18h] [rbp-558h]
  uint32_t i; // [rsp+1Ch] [rbp-554h]
  char v25[1360]; // [rsp+20h] [rbp-550h] BYREF

  v2 = (unsigned __int64)v25;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1312LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "21 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 32 9 <unknown> 224 32 9 <unknown> 288 32 9 <unknown> 352 32 9 <"
                        "unknown> 416 32 9 <unknown> 480 32 9 <unknown> 544 32 9 <unknown> 608 32 9 <unknown> 672 32 9 <u"
                        "nknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown> 992 256 13 col_name:6676";
  *(_QWORD *)(v2 + 16) = data::QuestGuide::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862726] = -218959118;
  v4[536862728] = -218959118;
  v4[536862730] = -218959118;
  v4[536862732] = -218959118;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862759] = -202116109;
  v4[536862760] = -202116109;
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 160),
    &byte_1A6609E0,
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToEnum<data::QuestGuideType>(
         row,
         (const std::string *)(v2 + 160),
         &this->type) != 0;
  std::string::~string((void *)(v2 + 160));
  *(_DWORD *)(((v2 + 160) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 224) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 224) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 255) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 224, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 224),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6680);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 224),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v6, (const char (*)[27])byte_1A660A20);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 224));
    v7 = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 288),
      &byte_1A663580,
      (const std::allocator<char> *)(v2 + 64));
    v8 = common::tools::TxtFile::Row::assignToEnum<data::QuestGuideAuto>(
           row,
           (const std::string *)(v2 + 288),
           &this->auto_guide) != 0;
    std::string::~string((void *)(v2 + 288));
    *(_DWORD *)(((v2 + 288) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 352) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 352) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 383) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 352, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 352),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6685);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 352),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [42],(char *[42])0>(v9, (const char (*)[42])byte_1A6635C0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 352));
      v7 = -1;
    }
    else
    {
      std::vector<std::string>::resize(&this->param, 5uLL);
      array_count = 0;
      for ( i = 0; i <= 4; ++i )
      {
        snprintf((char *)(v2 + 992), 0x100uLL, &byte_1A662BC0, i + 1);
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 80);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 416),
          (const char *)(v2 + 992),
          (const std::allocator<char> *)(v2 + 80));
        v10 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 416));
        std::string::~string((void *)(v2 + 416));
        *(_DWORD *)(((v2 + 416) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 80);
        *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
        if ( !v10 )
        {
          v11 = std::vector<std::string>::operator[](&this->param, i);
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 96);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 480),
            (const char *)(v2 + 992),
            (const std::allocator<char> *)(v2 + 96));
          LOBYTE(v11) = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 480), v11) != 0;
          std::string::~string((void *)(v2 + 480));
          *(_DWORD *)(((v2 + 480) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 96);
          *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
          if ( (_BYTE)v11 )
          {
            *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 544) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 575) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 544, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 544),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
              "init",
              6697);
            v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 544),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(
                    v12,
                    (const char (*)[14])byte_1A662400);
            v14 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(
                    v13,
                    (const char (*)[256])(v2 + 992));
            common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])byte_1A662440);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 544));
            v7 = -1;
            goto LABEL_34;
          }
          array_count = i + 1;
        }
      }
      std::vector<std::string>::resize(&this->param, array_count);
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 112);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 608),
        &byte_1A663620,
        (const std::allocator<char> *)(v2 + 112));
      v15 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
              row,
              (const std::string *)(v2 + 608),
              &this->guide_scene) != 0;
      std::string::~string((void *)(v2 + 608));
      *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 112);
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      if ( v15 )
      {
        *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 672) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 703) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 672, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 672),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6706);
        v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 672),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v16, (const char (*)[29])byte_1A663660);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 672));
        v7 = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 128);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 736),
          &byte_1A6636A0,
          (const std::allocator<char> *)(v2 + 128));
        v17 = common::tools::TxtFile::Row::assignToEnum<data::QuestGuideStyle>(
                row,
                (const std::string *)(v2 + 736),
                &this->guide_style) != 0;
        std::string::~string((void *)(v2 + 736));
        *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 128);
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
        if ( v17 )
        {
          *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 800, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 800),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6711);
          v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 800),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v18, (const char (*)[27])byte_1A6636E0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
          v7 = -1;
        }
        else
        {
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 144);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 864),
            &byte_1A663720,
            (const std::allocator<char> *)(v2 + 144));
          v19 = common::tools::TxtFile::Row::assignToEnum<data::QuestGuideLayer>(
                  row,
                  (const std::string *)(v2 + 864),
                  &this->guide_layer) != 0;
          std::string::~string((void *)(v2 + 864));
          *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 144);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
          if ( v19 )
          {
            *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 928) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 928, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 928),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
              "init",
              6716);
            v20 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 928),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v20, (const char (*)[33])byte_1A663760);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 928));
            v7 = -1;
          }
          else
          {
            v7 = 0;
          }
        }
      }
    }
  }
LABEL_34:
  v21 = v7;
  if ( v25 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8018) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8028) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8040) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8058) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8060) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8068) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8070) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8078) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF809C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1312LL, v25);
  }
  return v21;
};

// Line 6724: range 000000000FAF741A-000000000FAF7FA5
int32_t __cdecl data::FetterConditionConfig::init(
        data::FetterConditionConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  int32_t v6; // r14d
  common::milog::MiLogStream *v7; // rax
  unsigned __int64 v8; // rax
  _DWORD *v9; // rax
  bool v10; // r15
  unsigned __int64 v11; // rax
  char *i; // r14
  _DWORD *v13; // rax
  common::milog::MiLogStream *v14; // rax
  int32_t result; // eax
  bool t; // [rsp+8h] [rbp-2E8h]
  bool ta; // [rsp+8h] [rbp-2E8h]
  char v18[720]; // [rsp+20h] [rbp-2D0h] BYREF

  v2 = (unsigned __int64)v18;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_4(672LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "13 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 24 "
                        "9 <unknown> 192 32 12 val_str:6725 256 32 9 <unknown> 320 32 9 <unknown> 384 32 9 <unknown> 448 "
                        "32 9 <unknown> 512 32 9 <unknown> 576 64 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::FetterConditionConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234881024;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -218959118;
  v4[536862731] = -218959118;
  v4[536862733] = -218959118;
  v4[536862735] = -218959118;
  v4[536862737] = -218959118;
  v4[536862740] = -202116109;
  std::string::basic_string(v2 + 192);
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 256),
    &byte_1A6609E0,
    (const std::allocator<char> *)(v2 + 48));
  t = common::tools::TxtFile::Row::assignToEnum<data::FetterCondType>(
        row,
        (const std::string *)(v2 + 256),
        &this->cond_type) != 0;
  std::string::~string((void *)(v2 + 256));
  *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( t )
  {
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 320) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 95) & 7) >= *(_BYTE *)(((v2 + 351) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 320, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 320),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6728);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 320),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [27],(char *[27])0>(v5, (const char (*)[27])byte_1A660A20);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 320));
    *(_DWORD *)(((v2 + 320) >> 3) + 0x7FFF8000) = -117901064;
    v6 = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 384),
      &byte_1A6638C0,
      (const std::allocator<char> *)(v2 + 64));
    ta = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 384), (std::string *)(v2 + 192)) != 0;
    std::string::~string((void *)(v2 + 384));
    *(_DWORD *)(((v2 + 384) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( ta )
    {
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 448) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 96 + 63) & 7) >= *(_BYTE *)(((v2 + 479) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 448, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 448),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6733);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 448),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v7, (const char (*)[33])byte_1A663900);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 448));
      *(_DWORD *)(((v2 + 448) >> 3) + 0x7FFF8000) = -117901064;
      v6 = -1;
    }
    else
    {
      v8 = ((v2 + 128) >> 3) + 2147450880;
      *(_WORD *)v8 = 0;
      *(_BYTE *)(v8 + 2) = 0;
      v9 = (_DWORD *)(((v2 + 576) >> 3) + 2147450880);
      *v9 = 0;
      v9[1] = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 576),
        ";",
        (const std::allocator<char> *)(v2 + 80));
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 96);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 608),
        ",",
        (const std::allocator<char> *)(v2 + 96));
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 112));
      std::vector<std::string>::vector(
        (std::vector<std::string> *const)(v2 + 128),
        (std::initializer_list<std::string >)__PAIR128__(2LL, v2 + 576),
        (const std::vector<std::string>::allocator_type *)(v2 + 112));
      v10 = common::tools::StringUtils::splitToListBySeps<unsigned int>(
              (const std::string *)(v2 + 192),
              (const std::vector<std::string> *)(v2 + 128),
              &this->param_list,
              1) != 0;
      std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 128));
      v11 = ((v2 + 128) >> 3) + 2147450880;
      *(_WORD *)v11 = -1800;
      *(_BYTE *)(v11 + 2) = -8;
      std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 112));
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      for ( i = (char *)(v2 + 640); i != (char *)(v2 + 576); std::string::~string(i) )
        i -= 32;
      v13 = (_DWORD *)(((v2 + 576) >> 3) + 2147450880);
      *v13 = -117901064;
      v13[1] = -117901064;
      std::allocator<char>::~allocator(v2 + 96);
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 512) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 96 + 127) & 7) >= *(_BYTE *)(((v2 + 543) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 512, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 512),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6738);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 512),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [33],(char *[33])0>(v14, (const char (*)[33])byte_1A663900);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 512));
        *(_DWORD *)(((v2 + 512) >> 3) + 0x7FFF8000) = -117901064;
        v6 = -1;
      }
      else
      {
        v6 = 0;
      }
    }
  }
  std::string::~string((void *)(v2 + 192));
  result = v6;
  if ( v18 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF801C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8024) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF802C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8034) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF803C) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF804C) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8038) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8048) = 0xF5F5F5F5F5F5F5F5LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8050) = -168430091;
  }
  return result;
};

// Line 6746: range 000000000FAF7FA6-000000000FAFAF16
int32_t __cdecl data::FetterConfig::init(data::FetterConfig *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r15
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r13
  common::milog::MiLogStream *v6; // rax
  int32_t v7; // r13d
  bool v8; // r13
  common::milog::MiLogStream *v9; // rax
  bool v10; // r13
  data::FetterCondType *p_cond_type; // r13
  common::milog::MiLogStream *v12; // rax
  common::milog::MiLogStream *v13; // rax
  common::milog::MiLogStream *v14; // rax
  bool v15; // r13
  bool v16; // r13
  common::milog::MiLogStream *v17; // rax
  common::milog::MiLogStream *v18; // rax
  common::milog::MiLogStream *v19; // rax
  std::vector<unsigned int> *p_param_list; // r13
  unsigned __int64 v21; // rax
  _DWORD *v22; // rax
  bool v23; // r14
  unsigned __int64 v24; // rax
  char *j; // r13
  _DWORD *v26; // rax
  common::milog::MiLogStream *v27; // rax
  bool v28; // r13
  data::FetterCondType *v29; // r13
  common::milog::MiLogStream *v30; // rax
  common::milog::MiLogStream *v31; // rax
  common::milog::MiLogStream *v32; // rax
  bool v33; // r13
  bool v34; // r13
  common::milog::MiLogStream *v35; // rax
  common::milog::MiLogStream *v36; // rax
  common::milog::MiLogStream *v37; // rax
  std::vector<unsigned int> *v38; // r13
  unsigned __int64 v39; // rax
  _DWORD *v40; // rax
  bool v41; // r14
  unsigned __int64 v42; // rax
  char *k; // r13
  _DWORD *v44; // rax
  common::milog::MiLogStream *v45; // rax
  bool v46; // r13
  data::FetterCondType *v47; // r13
  common::milog::MiLogStream *v48; // rax
  common::milog::MiLogStream *v49; // rax
  common::milog::MiLogStream *v50; // rax
  bool v51; // r13
  bool v52; // r13
  common::milog::MiLogStream *v53; // rax
  common::milog::MiLogStream *v54; // rax
  common::milog::MiLogStream *v55; // rax
  std::vector<unsigned int> *v56; // r13
  unsigned __int64 v57; // rax
  _DWORD *v58; // rax
  bool v59; // r14
  unsigned __int64 v60; // rax
  char *m; // r13
  _DWORD *v62; // rax
  common::milog::MiLogStream *v63; // rax
  std::initializer_list<std::string > __l; // [rsp+10h] [rbp-BC0h]
  std::initializer_list<std::string > v66; // [rsp+20h] [rbp-BB0h]
  std::initializer_list<std::string > v67; // [rsp+30h] [rbp-BA0h]
  uint32_t array_count; // [rsp+50h] [rbp-B80h]
  uint32_t array_counta; // [rsp+50h] [rbp-B80h]
  uint32_t array_countb; // [rsp+50h] [rbp-B80h]
  uint32_t i; // [rsp+54h] [rbp-B7Ch]
  uint32_t i_0; // [rsp+58h] [rbp-B78h]
  uint32_t i_1; // [rsp+5Ch] [rbp-B74h]
  char v74[2928]; // [rsp+60h] [rbp-B70h] BYREF

  v2 = (unsigned __int64)v74;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_6(2880LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "56 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 1 9 <unknown> 3"
                        "04 1 9 <unknown> 320 1 9 <unknown> 336 1 9 <unknown> 352 1 9 <unknown> 368 1 9 <unknown> 384 1 9"
                        " <unknown> 400 1 9 <unknown> 416 24 9 <unknown> 480 24 9 <unknown> 544 24 9 <unknown> 608 32 12 "
                        "val_str:6749 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 "
                        "9 <unknown> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 "
                        "32 9 <unknown> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 32 9 <unknown> 1"
                        "568 32 9 <unknown> 1632 32 9 <unknown> 1696 32 9 <unknown> 1760 32 9 <unknown> 1824 32 9 <unknow"
                        "n> 1888 32 9 <unknown> 1952 32 9 <unknown> 2016 32 9 <unknown> 2080 32 9 <unknown> 2144 32 9 <un"
                        "known> 2208 32 9 <unknown> 2272 64 9 <unknown> 2368 64 9 <unknown> 2464 64 9 <unknown> 2560 256 "
                        "13 col_name:6747";
  *(_QWORD *)(v2 + 16) = data::FetterConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234753535;
  v4[536862730] = -234753535;
  v4[536862731] = -234753535;
  v4[536862732] = -234753535;
  v4[536862733] = -234881024;
  v4[536862734] = -218959118;
  v4[536862735] = -234881024;
  v4[536862736] = -218959118;
  v4[536862737] = -234881024;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862768] = -218959118;
  v4[536862770] = -218959118;
  v4[536862772] = -218959118;
  v4[536862774] = -218959118;
  v4[536862776] = -218959118;
  v4[536862778] = -218959118;
  v4[536862780] = -218959118;
  v4[536862782] = -218959118;
  v4[536862784] = -218959118;
  v4[536862786] = -218959118;
  v4[536862788] = -218959118;
  v4[536862790] = -218959118;
  v4[536862793] = -218959118;
  v4[536862796] = -218959118;
  v4[536862799] = -218959118;
  v4[536862808] = -202116109;
  v4[536862809] = -202116109;
  std::string::basic_string(v2 + 608);
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 672),
    "ID",
    (const std::allocator<char> *)(v2 + 48));
  v5 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 672), &this->fetter_id) != 0;
  std::string::~string((void *)(v2 + 672));
  *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 736, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 736),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6752);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 736),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [23],(char *[23])0>(v6, (const char (*)[23])byte_1A6609A0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
    *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
    goto LABEL_76;
  }
  *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 64);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 800),
    &byte_1A663E20,
    (const std::allocator<char> *)(v2 + 64));
  v8 = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 800), &this->avatar_id) != 0;
  std::string::~string((void *)(v2 + 800));
  *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 64);
  *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
  if ( v8 )
  {
    *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 864) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 895) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 864, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 864),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6757);
    v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 864),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v9, (const char (*)[29])byte_1A663E60);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 864));
    *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
    goto LABEL_76;
  }
  std::vector<data::FetterConditionConfig>::resize(&this->open_conds, 5uLL);
  array_count = 0;
  for ( i = 0; i <= 4; ++i )
  {
    snprintf((char *)(v2 + 2560), 0x100uLL, &byte_1A663EA0, i + 1);
    *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 80);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 928),
      (const char *)(v2 + 2560),
      (const std::allocator<char> *)(v2 + 80));
    v10 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 928));
    std::string::~string((void *)(v2 + 928));
    *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 80);
    *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
    if ( !v10 )
    {
      p_cond_type = &std::vector<data::FetterConditionConfig>::operator[](&this->open_conds, i)->cond_type;
      *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 96);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 992),
        (const char *)(v2 + 2560),
        (const std::allocator<char> *)(v2 + 96));
      LOBYTE(p_cond_type) = common::tools::TxtFile::Row::assignToEnum<data::FetterCondType>(
                              row,
                              (const std::string *)(v2 + 992),
                              p_cond_type) != 0;
      std::string::~string((void *)(v2 + 992));
      *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 96);
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      if ( (_BYTE)p_cond_type )
      {
        *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1056, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1056),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6769);
        v12 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1056),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v13 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v12, (const char (*)[14])byte_1A662400);
        v14 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v13, (const char (*)[256])(v2 + 2560));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v14, (const char (*)[7])byte_1A662440);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1056));
        *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
        v7 = -1;
        goto LABEL_76;
      }
      snprintf((char *)(v2 + 2560), 0x100uLL, &byte_1A663EE0, i + 1);
      *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 112);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 1120),
        (const char *)(v2 + 2560),
        (const std::allocator<char> *)(v2 + 112));
      v15 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 1120));
      std::string::~string((void *)(v2 + 1120));
      *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 112);
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      if ( !v15 )
      {
        *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 128);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 1184),
          (const char *)(v2 + 2560),
          (const std::allocator<char> *)(v2 + 128));
        v16 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 1184), (std::string *)(v2 + 608)) != 0;
        std::string::~string((void *)(v2 + 1184));
        *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 128);
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
        if ( v16 )
        {
          *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1248) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1248, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1248),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6777);
          v17 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1248),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v18 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v17, (const char (*)[14])byte_1A662400);
          v19 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v18, (const char (*)[256])(v2 + 2560));
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v19, (const char (*)[7])byte_1A662440);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1248));
          *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -117901064;
          v7 = -1;
          goto LABEL_76;
        }
        p_param_list = &std::vector<data::FetterConditionConfig>::operator[](&this->open_conds, i)->param_list;
        v21 = ((v2 + 416) >> 3) + 2147450880;
        *(_WORD *)v21 = 0;
        *(_BYTE *)(v21 + 2) = 0;
        v22 = (_DWORD *)(((v2 + 2272) >> 3) + 2147450880);
        *v22 = 0;
        v22[1] = 0;
        *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 144);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 2272),
          ";",
          (const std::allocator<char> *)(v2 + 144));
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 160);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 2304),
          ",",
          (const std::allocator<char> *)(v2 + 160));
        __l._M_array = (std::initializer_list<std::string >::iterator)(v2 + 2272);
        __l._M_len = 2LL;
        *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
        std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 176));
        std::vector<std::string>::vector(
          (std::vector<std::string> *const)(v2 + 416),
          __l,
          (const std::vector<std::string>::allocator_type *)(v2 + 176));
        v23 = common::tools::StringUtils::splitToListBySeps<unsigned int>(
                (const std::string *)(v2 + 608),
                (const std::vector<std::string> *)(v2 + 416),
                p_param_list,
                1) != 0;
        std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 416));
        v24 = ((v2 + 416) >> 3) + 2147450880;
        *(_WORD *)v24 = -1800;
        *(_BYTE *)(v24 + 2) = -8;
        std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 176));
        *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
        for ( j = (char *)(v2 + 2336); j != (char *)(v2 + 2272); std::string::~string(j) )
          j -= 32;
        v26 = (_DWORD *)(((v2 + 2272) >> 3) + 2147450880);
        *v26 = -117901064;
        v26[1] = -117901064;
        std::allocator<char>::~allocator(v2 + 160);
        *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
        std::allocator<char>::~allocator(v2 + 144);
        *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
        if ( v23 )
        {
          *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1312) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1312, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1312),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6782);
          v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1312),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v27, (const char (*)[47])byte_1A663F20);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1312));
          *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -117901064;
          v7 = -1;
          goto LABEL_76;
        }
        array_count = i + 1;
      }
    }
  }
  std::vector<data::FetterConditionConfig>::resize(&this->open_conds, array_count);
  std::vector<data::FetterConditionConfig>::resize(&this->finish_conds, 5uLL);
  array_counta = 0;
  for ( i_0 = 0; i_0 <= 4; ++i_0 )
  {
    snprintf((char *)(v2 + 2560), 0x100uLL, &byte_1A663F80, i_0 + 1);
    *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 192);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1376),
      (const char *)(v2 + 2560),
      (const std::allocator<char> *)(v2 + 192));
    v28 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 1376));
    std::string::~string((void *)(v2 + 1376));
    *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 192);
    *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
    if ( !v28 )
    {
      v29 = &std::vector<data::FetterConditionConfig>::operator[](&this->finish_conds, i_0)->cond_type;
      *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 208);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 1440),
        (const char *)(v2 + 2560),
        (const std::allocator<char> *)(v2 + 208));
      LOBYTE(v29) = common::tools::TxtFile::Row::assignToEnum<data::FetterCondType>(
                      row,
                      (const std::string *)(v2 + 1440),
                      v29) != 0;
      std::string::~string((void *)(v2 + 1440));
      *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 208);
      *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
      if ( (_BYTE)v29 )
      {
        *(_DWORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1504) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1535) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1504, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1504),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6798);
        v30 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1504),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v31 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v30, (const char (*)[14])byte_1A662400);
        v32 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v31, (const char (*)[256])(v2 + 2560));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v32, (const char (*)[7])byte_1A662440);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1504));
        *(_DWORD *)(((v2 + 1504) >> 3) + 0x7FFF8000) = -117901064;
        v7 = -1;
        goto LABEL_76;
      }
      snprintf((char *)(v2 + 2560), 0x100uLL, &byte_1A663FC0, i_0 + 1);
      *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 224);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 1568),
        (const char *)(v2 + 2560),
        (const std::allocator<char> *)(v2 + 224));
      v33 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 1568));
      std::string::~string((void *)(v2 + 1568));
      *(_DWORD *)(((v2 + 1568) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 224);
      *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
      if ( !v33 )
      {
        *(_DWORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 240);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 1632),
          (const char *)(v2 + 2560),
          (const std::allocator<char> *)(v2 + 240));
        v34 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 1632), (std::string *)(v2 + 608)) != 0;
        std::string::~string((void *)(v2 + 1632));
        *(_DWORD *)(((v2 + 1632) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 240);
        *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
        if ( v34 )
        {
          *(_DWORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1696) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 1727) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1696, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1696),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6806);
          v35 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1696),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          v36 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v35, (const char (*)[14])byte_1A662400);
          v37 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v36, (const char (*)[256])(v2 + 2560));
          common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v37, (const char (*)[7])byte_1A662440);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1696));
          *(_DWORD *)(((v2 + 1696) >> 3) + 0x7FFF8000) = -117901064;
          v7 = -1;
          goto LABEL_76;
        }
        v38 = &std::vector<data::FetterConditionConfig>::operator[](&this->finish_conds, i_0)->param_list;
        v39 = ((v2 + 480) >> 3) + 2147450880;
        *(_WORD *)v39 = 0;
        *(_BYTE *)(v39 + 2) = 0;
        v40 = (_DWORD *)(((v2 + 2368) >> 3) + 2147450880);
        *v40 = 0;
        v40[1] = 0;
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 256);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 2368),
          ";",
          (const std::allocator<char> *)(v2 + 256));
        *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 272);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 2400),
          ",",
          (const std::allocator<char> *)(v2 + 272));
        v66._M_array = (std::initializer_list<std::string >::iterator)(v2 + 2368);
        v66._M_len = 2LL;
        *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = 1;
        std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 288));
        std::vector<std::string>::vector(
          (std::vector<std::string> *const)(v2 + 480),
          v66,
          (const std::vector<std::string>::allocator_type *)(v2 + 288));
        v41 = common::tools::StringUtils::splitToListBySeps<unsigned int>(
                (const std::string *)(v2 + 608),
                (const std::vector<std::string> *)(v2 + 480),
                v38,
                1) != 0;
        std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 480));
        v42 = ((v2 + 480) >> 3) + 2147450880;
        *(_WORD *)v42 = -1800;
        *(_BYTE *)(v42 + 2) = -8;
        std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 288));
        *(_BYTE *)(((v2 + 288) >> 3) + 0x7FFF8000) = -8;
        for ( k = (char *)(v2 + 2432); k != (char *)(v2 + 2368); std::string::~string(k) )
          k -= 32;
        v44 = (_DWORD *)(((v2 + 2368) >> 3) + 2147450880);
        *v44 = -117901064;
        v44[1] = -117901064;
        std::allocator<char>::~allocator(v2 + 272);
        *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
        std::allocator<char>::~allocator(v2 + 256);
        *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
        if ( v41 )
        {
          *(_DWORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 1760) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1791) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 1760, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 1760),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6811);
          v45 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 1760),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v45, (const char (*)[47])byte_1A664000);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1760));
          *(_DWORD *)(((v2 + 1760) >> 3) + 0x7FFF8000) = -117901064;
          v7 = -1;
          goto LABEL_76;
        }
        array_counta = i_0 + 1;
      }
    }
  }
  std::vector<data::FetterConditionConfig>::resize(&this->finish_conds, array_counta);
  std::vector<data::FetterConditionConfig>::resize(&this->conceal_conds, 5uLL);
  array_countb = 0;
  for ( i_1 = 0; ; ++i_1 )
  {
    if ( i_1 > 4 )
    {
      std::vector<data::FetterConditionConfig>::resize(&this->conceal_conds, array_countb);
      v7 = 0;
      goto LABEL_76;
    }
    snprintf((char *)(v2 + 2560), 0x100uLL, &byte_1A664060, i_1 + 1);
    *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 304);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 1824),
      (const char *)(v2 + 2560),
      (const std::allocator<char> *)(v2 + 304));
    v46 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 1824));
    std::string::~string((void *)(v2 + 1824));
    *(_DWORD *)(((v2 + 1824) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 304);
    *(_BYTE *)(((v2 + 304) >> 3) + 0x7FFF8000) = -8;
    if ( !v46 )
    {
      v47 = &std::vector<data::FetterConditionConfig>::operator[](&this->conceal_conds, i_1)->cond_type;
      *(_DWORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 320);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 1888),
        (const char *)(v2 + 2560),
        (const std::allocator<char> *)(v2 + 320));
      LOBYTE(v47) = common::tools::TxtFile::Row::assignToEnum<data::FetterCondType>(
                      row,
                      (const std::string *)(v2 + 1888),
                      v47) != 0;
      std::string::~string((void *)(v2 + 1888));
      *(_DWORD *)(((v2 + 1888) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 320);
      *(_BYTE *)(((v2 + 320) >> 3) + 0x7FFF8000) = -8;
      if ( (_BYTE)v47 )
      {
        *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 1952) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 1983) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 1983) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 1952, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 1952),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6827);
        v48 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 1952),
                (const char (*)[16])"[CONFIG_ERROR] ");
        v49 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v48, (const char (*)[14])byte_1A662400);
        v50 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v49, (const char (*)[256])(v2 + 2560));
        common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v50, (const char (*)[7])byte_1A662440);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1952));
        *(_DWORD *)(((v2 + 1952) >> 3) + 0x7FFF8000) = -117901064;
        v7 = -1;
        goto LABEL_76;
      }
      snprintf((char *)(v2 + 2560), 0x100uLL, &byte_1A6640A0, i_1 + 1);
      *(_DWORD *)(((v2 + 2016) >> 3) + 0x7FFF8000) = 0;
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 336);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 2016),
        (const char *)(v2 + 2560),
        (const std::allocator<char> *)(v2 + 336));
      v51 = !common::tools::TxtFile::Row::hasKey(row, (const std::string *)(v2 + 2016));
      std::string::~string((void *)(v2 + 2016));
      *(_DWORD *)(((v2 + 2016) >> 3) + 0x7FFF8000) = -117901064;
      std::allocator<char>::~allocator(v2 + 336);
      *(_BYTE *)(((v2 + 336) >> 3) + 0x7FFF8000) = -8;
      if ( !v51 )
        break;
    }
LABEL_74:
    ;
  }
  *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = 0;
  *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 352);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 2080),
    (const char *)(v2 + 2560),
    (const std::allocator<char> *)(v2 + 352));
  v52 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 2080), (std::string *)(v2 + 608)) != 0;
  std::string::~string((void *)(v2 + 2080));
  *(_DWORD *)(((v2 + 2080) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 352);
  *(_BYTE *)(((v2 + 352) >> 3) + 0x7FFF8000) = -8;
  if ( v52 )
  {
    *(_DWORD *)(((v2 + 2144) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 2144) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 2175) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 2144, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 2144),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6835);
    v53 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
            (common::milog::MiLogStream *const)(v2 + 2144),
            (const char (*)[16])"[CONFIG_ERROR] ");
    v54 = common::milog::MiLogStream::operator<<<char [14],(char *[14])0>(v53, (const char (*)[14])byte_1A662400);
    v55 = common::milog::MiLogStream::operator<<<char [256],(char *[256])0>(v54, (const char (*)[256])(v2 + 2560));
    common::milog::MiLogStream::operator<<<char [7],(char *[7])0>(v55, (const char (*)[7])byte_1A662440);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2144));
    *(_DWORD *)(((v2 + 2144) >> 3) + 0x7FFF8000) = -117901064;
    v7 = -1;
    goto LABEL_76;
  }
  v56 = &std::vector<data::FetterConditionConfig>::operator[](&this->conceal_conds, i_1)->param_list;
  v57 = ((v2 + 544) >> 3) + 2147450880;
  *(_WORD *)v57 = 0;
  *(_BYTE *)(v57 + 2) = 0;
  v58 = (_DWORD *)(((v2 + 2464) >> 3) + 2147450880);
  *v58 = 0;
  v58[1] = 0;
  *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 368);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 2464),
    ";",
    (const std::allocator<char> *)(v2 + 368));
  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = 1;
  std::allocator<char>::allocator(v2 + 384);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 2496),
    ",",
    (const std::allocator<char> *)(v2 + 384));
  v67._M_array = (std::initializer_list<std::string >::iterator)(v2 + 2464);
  v67._M_len = 2LL;
  *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = 1;
  std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 400));
  std::vector<std::string>::vector(
    (std::vector<std::string> *const)(v2 + 544),
    v67,
    (const std::vector<std::string>::allocator_type *)(v2 + 400));
  v59 = common::tools::StringUtils::splitToListBySeps<unsigned int>(
          (const std::string *)(v2 + 608),
          (const std::vector<std::string> *)(v2 + 544),
          v56,
          1) != 0;
  std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 544));
  v60 = ((v2 + 544) >> 3) + 2147450880;
  *(_WORD *)v60 = -1800;
  *(_BYTE *)(v60 + 2) = -8;
  std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 400));
  *(_BYTE *)(((v2 + 400) >> 3) + 0x7FFF8000) = -8;
  for ( m = (char *)(v2 + 2528); m != (char *)(v2 + 2464); std::string::~string(m) )
    m -= 32;
  v62 = (_DWORD *)(((v2 + 2464) >> 3) + 2147450880);
  *v62 = -117901064;
  v62[1] = -117901064;
  std::allocator<char>::~allocator(v2 + 384);
  *(_BYTE *)(((v2 + 384) >> 3) + 0x7FFF8000) = -8;
  std::allocator<char>::~allocator(v2 + 368);
  *(_BYTE *)(((v2 + 368) >> 3) + 0x7FFF8000) = -8;
  if ( !v59 )
  {
    array_countb = i_1 + 1;
    goto LABEL_74;
  }
  *(_DWORD *)(((v2 + 2208) >> 3) + 0x7FFF8000) = 0;
  if ( *(char *)(((v2 + 2208) >> 3) + 0x7FFF8000) < 0
    || *(_BYTE *)(((v2 + 2239) >> 3) + 0x7FFF8000) != 0
    && (char)((v2 - 65) & 7) >= *(_BYTE *)(((v2 + 2239) >> 3) + 0x7FFF8000) )
  {
    __asan_report_store_n(v2 + 2208, 32LL);
  }
  common::milog::MiLogStream::create(
    (common::milog::MiLogStream *)(v2 + 2208),
    &common::milog::MiLogDefault::default_log_obj_,
    4u,
    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
    "init",
    6840);
  v63 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
          (common::milog::MiLogStream *const)(v2 + 2208),
          (const char (*)[16])"[CONFIG_ERROR] ");
  common::milog::MiLogStream::operator<<<char [47],(char *[47])0>(v63, (const char (*)[47])byte_1A6640E0);
  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 2208));
  *(_DWORD *)(((v2 + 2208) >> 3) + 0x7FFF8000) = -117901064;
  v7 = -1;
LABEL_76:
  std::string::~string((void *)(v2 + 608));
  if ( v74 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8044) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862722) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450880 - (((_DWORD)v4 + 2147450888) & 0xFFFFFFF8) + 76) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF8050) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8138) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862742) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450960 - (((_DWORD)v4 + 2147450968) & 0xFFFFFFF8) + 240) & 0xFFFFFFF8) >> 3));
    *(_QWORD *)((v2 >> 3) + 0x7FFF8160) = 0LL;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_6(v2, 2880LL, v74);
  }
  return v7;
};

// Line 6852: range 000000000FAFAF18-000000000FAFB4A0
int32_t __cdecl data::SGVConfig::init(data::SGVConfig *const this, const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  bool v5; // r14
  common::milog::MiLogStream *v6; // rax
  int32_t result; // eax
  bool v8; // r14
  common::milog::MiLogStream *v9; // rax
  char v10[368]; // [rsp+10h] [rbp-170h] BYREF

  v2 = (unsigned __int64)v10;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_3(320LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "6 32 1 9 <unknown> 48 1 9 <unknown> 64 32 9 <unknown> 128 32 9 <unknown> 192 32 9 <unknown> 256 32 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::SGVConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753535;
  v4[536862723] = -218959118;
  v4[536862725] = -218959118;
  v4[536862727] = -218959118;
  v4[536862729] = -202116109;
  std::allocator<char>::allocator(v2 + 32);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 64),
    off_1A664140,
    (const std::allocator<char> *)(v2 + 32));
  v5 = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 64), &this->key) != 0;
  std::string::~string((void *)(v2 + 64));
  *(_DWORD *)(((v2 + 64) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 32);
  *(_BYTE *)(((v2 + 32) >> 3) + 0x7FFF8000) = -8;
  if ( v5 )
  {
    *(_DWORD *)(((v2 + 128) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 128) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 - 97) & 7) >= *(_BYTE *)(((v2 + 159) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 128, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 128),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6855);
    v6 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 128),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v6, (const char (*)[24])byte_1A664180);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 128));
    result = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 48);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 192),
      off_1A662760,
      (const std::allocator<char> *)(v2 + 48));
    v8 = common::tools::TxtFile::Row::assignToNum<float>(row, (const std::string *)(v2 + 192), &this->value) != 0;
    std::string::~string((void *)(v2 + 192));
    *(_DWORD *)(((v2 + 192) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 48);
    *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
    if ( v8 )
    {
      *(_DWORD *)(((v2 + 256) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 256) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 + 31) & 7) >= *(_BYTE *)(((v2 + 287) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 256, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 256),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6860);
      v9 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 256),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [24],(char *[24])0>(v9, (const char (*)[24])byte_1A6627A0);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 256));
      result = -1;
    }
    else
    {
      result = 0;
    }
  }
  if ( v10 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8014) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF801C) = 0;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8024) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0xF5F5F5F5F5F5F5F5LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0xF5F5F5F5F5F5F5F5LL;
  }
  return result;
};

// Line 6868: range 000000000FAFB4A2-000000000FAFD3A2
int32_t __cdecl data::CustomSlotConfig::init(
        data::CustomSlotConfig *const this,
        const common::tools::TxtFile::Row *row)
{
  unsigned __int64 v2; // r13
  __int64 v3; // rax
  _DWORD *v4; // r12
  common::milog::MiLogStream *v5; // rax
  int32_t v6; // r14d
  common::milog::MiLogStream *v7; // rax
  unsigned __int64 v8; // rax
  _DWORD *v9; // rax
  bool v10; // r15
  unsigned __int64 v11; // rax
  char *i; // r14
  _DWORD *v13; // rax
  common::milog::MiLogStream *v14; // rax
  bool v15; // r14
  common::milog::MiLogStream *v16; // rax
  bool v17; // r14
  common::milog::MiLogStream *v18; // rax
  unsigned __int64 v19; // rax
  _DWORD *v20; // rax
  bool v21; // r15
  unsigned __int64 v22; // rax
  char *j; // r14
  _DWORD *v24; // rax
  common::milog::MiLogStream *v25; // rax
  bool v26; // r14
  common::milog::MiLogStream *v27; // rax
  unsigned __int64 v28; // rax
  _DWORD *v29; // rax
  bool v30; // r15
  unsigned __int64 v31; // rax
  char *k; // r14
  _DWORD *v33; // rax
  common::milog::MiLogStream *v34; // rax
  bool v35; // r14
  common::milog::MiLogStream *v36; // rax
  bool t; // [rsp+0h] [rbp-770h]
  bool ta; // [rsp+0h] [rbp-770h]
  std::initializer_list<std::string > __l; // [rsp+10h] [rbp-760h]
  std::initializer_list<std::string > v41; // [rsp+20h] [rbp-750h]
  char v42[1840]; // [rsp+40h] [rbp-730h] BYREF

  v2 = (unsigned __int64)v42;
  if ( _asan_option_detect_stack_use_after_return )
  {
    v3 = __asan_stack_malloc_5(1792LL);
    if ( v3 )
      v2 = v3;
  }
  *(_QWORD *)v2 = 1102416563LL;
  *(_QWORD *)(v2 + 8) = "37 48 1 9 <unknown> 64 1 9 <unknown> 80 1 9 <unknown> 96 1 9 <unknown> 112 1 9 <unknown> 128 1 9"
                        " <unknown> 144 1 9 <unknown> 160 1 9 <unknown> 176 1 9 <unknown> 192 1 9 <unknown> 208 1 9 <unkn"
                        "own> 224 1 9 <unknown> 240 1 9 <unknown> 256 1 9 <unknown> 272 1 9 <unknown> 288 24 9 <unknown> "
                        "352 24 9 <unknown> 416 24 9 <unknown> 480 32 12 val_str:6869 544 32 9 <unknown> 608 32 9 <unknow"
                        "n> 672 32 9 <unknown> 736 32 9 <unknown> 800 32 9 <unknown> 864 32 9 <unknown> 928 32 9 <unknown"
                        "> 992 32 9 <unknown> 1056 32 9 <unknown> 1120 32 9 <unknown> 1184 32 9 <unknown> 1248 32 9 <unkn"
                        "own> 1312 32 9 <unknown> 1376 32 9 <unknown> 1440 32 9 <unknown> 1504 64 9 <unknown> 1600 64 9 <"
                        "unknown> 1696 64 9 <unknown>";
  *(_QWORD *)(v2 + 16) = data::CustomSlotConfig::init;
  v4 = (_DWORD *)(v2 >> 3);
  v4[536862720] = -235802127;
  v4[536862721] = -234753551;
  v4[536862722] = -234753535;
  v4[536862723] = -234753535;
  v4[536862724] = -234753535;
  v4[536862725] = -234753535;
  v4[536862726] = -234753535;
  v4[536862727] = -234753535;
  v4[536862728] = -234753535;
  v4[536862729] = -234881024;
  v4[536862730] = -218959118;
  v4[536862731] = -234881024;
  v4[536862732] = -218959118;
  v4[536862733] = -234881024;
  v4[536862734] = -218959118;
  v4[536862736] = -218959118;
  v4[536862738] = -218959118;
  v4[536862740] = -218959118;
  v4[536862742] = -218959118;
  v4[536862744] = -218959118;
  v4[536862746] = -218959118;
  v4[536862748] = -218959118;
  v4[536862750] = -218959118;
  v4[536862752] = -218959118;
  v4[536862754] = -218959118;
  v4[536862756] = -218959118;
  v4[536862758] = -218959118;
  v4[536862760] = -218959118;
  v4[536862762] = -218959118;
  v4[536862764] = -218959118;
  v4[536862766] = -218959118;
  v4[536862769] = -218959118;
  v4[536862772] = -218959118;
  v4[536862775] = -202116109;
  std::string::basic_string(v2 + 480);
  std::allocator<char>::allocator(v2 + 48);
  std::string::basic_string<std::allocator<char>>(
    (std::string *const)(v2 + 544),
    &byte_1A664480,
    (const std::allocator<char> *)(v2 + 48));
  t = common::tools::TxtFile::Row::assignToNum<unsigned int>(row, (const std::string *)(v2 + 544), &this->slot_id) != 0;
  std::string::~string((void *)(v2 + 544));
  *(_DWORD *)(((v2 + 544) >> 3) + 0x7FFF8000) = -117901064;
  std::allocator<char>::~allocator(v2 + 48);
  *(_BYTE *)(((v2 + 48) >> 3) + 0x7FFF8000) = -8;
  if ( t )
  {
    *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = 0;
    if ( *(char *)(((v2 + 608) >> 3) + 0x7FFF8000) < 0
      || *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) != 0
      && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 639) >> 3) + 0x7FFF8000) )
    {
      __asan_report_store_n(v2 + 608, 32LL);
    }
    common::milog::MiLogStream::create(
      (common::milog::MiLogStream *)(v2 + 608),
      &common::milog::MiLogDefault::default_log_obj_,
      4u,
      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
      "init",
      6872);
    v5 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
           (common::milog::MiLogStream *const)(v2 + 608),
           (const char (*)[16])"[CONFIG_ERROR] ");
    common::milog::MiLogStream::operator<<<char [29],(char *[29])0>(v5, (const char (*)[29])byte_1A6644C0);
    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 608));
    *(_DWORD *)(((v2 + 608) >> 3) + 0x7FFF8000) = -117901064;
    v6 = -1;
  }
  else
  {
    *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = 0;
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = 1;
    std::allocator<char>::allocator(v2 + 64);
    std::string::basic_string<std::allocator<char>>(
      (std::string *const)(v2 + 672),
      &byte_1A664500,
      (const std::allocator<char> *)(v2 + 64));
    ta = common::tools::TxtFile::Row::assignToStr(row, (const std::string *)(v2 + 672), (std::string *)(v2 + 480)) != 0;
    std::string::~string((void *)(v2 + 672));
    *(_DWORD *)(((v2 + 672) >> 3) + 0x7FFF8000) = -117901064;
    std::allocator<char>::~allocator(v2 + 64);
    *(_BYTE *)(((v2 + 64) >> 3) + 0x7FFF8000) = -8;
    if ( ta )
    {
      *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = 0;
      if ( *(char *)(((v2 + 736) >> 3) + 0x7FFF8000) < 0
        || *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) != 0
        && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 767) >> 3) + 0x7FFF8000) )
      {
        __asan_report_store_n(v2 + 736, 32LL);
      }
      common::milog::MiLogStream::create(
        (common::milog::MiLogStream *)(v2 + 736),
        &common::milog::MiLogDefault::default_log_obj_,
        4u,
        "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
        "init",
        6877);
      v7 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
             (common::milog::MiLogStream *const)(v2 + 736),
             (const char (*)[16])"[CONFIG_ERROR] ");
      common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(v7, (const char (*)[35])byte_1A664540);
      common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 736));
      *(_DWORD *)(((v2 + 736) >> 3) + 0x7FFF8000) = -117901064;
      v6 = -1;
    }
    else
    {
      v8 = ((v2 + 288) >> 3) + 2147450880;
      *(_WORD *)v8 = 0;
      *(_BYTE *)(v8 + 2) = 0;
      v9 = (_DWORD *)(((v2 + 1504) >> 3) + 2147450880);
      *v9 = 0;
      v9[1] = 0;
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 80);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 1504),
        ";",
        (const std::allocator<char> *)(v2 + 80));
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = 1;
      std::allocator<char>::allocator(v2 + 96);
      std::string::basic_string<std::allocator<char>>(
        (std::string *const)(v2 + 1536),
        ",",
        (const std::allocator<char> *)(v2 + 96));
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = 1;
      std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 112));
      std::vector<std::string>::vector(
        (std::vector<std::string> *const)(v2 + 288),
        (std::initializer_list<std::string >)__PAIR128__(2LL, v2 + 1504),
        (const std::vector<std::string>::allocator_type *)(v2 + 112));
      v10 = common::tools::StringUtils::splitToListBySeps<unsigned int>(
              (const std::string *)(v2 + 480),
              (const std::vector<std::string> *)(v2 + 288),
              &this->optional_parts_id_list,
              1) != 0;
      std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 288));
      v11 = ((v2 + 288) >> 3) + 2147450880;
      *(_WORD *)v11 = -1800;
      *(_BYTE *)(v11 + 2) = -8;
      std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 112));
      *(_BYTE *)(((v2 + 112) >> 3) + 0x7FFF8000) = -8;
      for ( i = (char *)(v2 + 1568); i != (char *)(v2 + 1504); std::string::~string(i) )
        i -= 32;
      v13 = (_DWORD *)(((v2 + 1504) >> 3) + 2147450880);
      *v13 = -117901064;
      v13[1] = -117901064;
      std::allocator<char>::~allocator(v2 + 96);
      *(_BYTE *)(((v2 + 96) >> 3) + 0x7FFF8000) = -8;
      std::allocator<char>::~allocator(v2 + 80);
      *(_BYTE *)(((v2 + 80) >> 3) + 0x7FFF8000) = -8;
      if ( v10 )
      {
        *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = 0;
        if ( *(char *)(((v2 + 800) >> 3) + 0x7FFF8000) < 0
          || *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) != 0
          && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 831) >> 3) + 0x7FFF8000) )
        {
          __asan_report_store_n(v2 + 800, 32LL);
        }
        common::milog::MiLogStream::create(
          (common::milog::MiLogStream *)(v2 + 800),
          &common::milog::MiLogDefault::default_log_obj_,
          4u,
          "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
          "init",
          6882);
        v14 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                (common::milog::MiLogStream *const)(v2 + 800),
                (const char (*)[16])"[CONFIG_ERROR] ");
        common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(v14, (const char (*)[35])byte_1A664540);
        common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 800));
        *(_DWORD *)(((v2 + 800) >> 3) + 0x7FFF8000) = -117901064;
        v6 = -1;
      }
      else
      {
        *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = 0;
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = 1;
        std::allocator<char>::allocator(v2 + 128);
        std::string::basic_string<std::allocator<char>>(
          (std::string *const)(v2 + 864),
          &byte_1A6645A0,
          (const std::allocator<char> *)(v2 + 128));
        v15 = common::tools::TxtFile::Row::assignToNum<bool>(row, (const std::string *)(v2 + 864), &this->is_necessary) != 0;
        std::string::~string((void *)(v2 + 864));
        *(_DWORD *)(((v2 + 864) >> 3) + 0x7FFF8000) = -117901064;
        std::allocator<char>::~allocator(v2 + 128);
        *(_BYTE *)(((v2 + 128) >> 3) + 0x7FFF8000) = -8;
        if ( v15 )
        {
          *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = 0;
          if ( *(char *)(((v2 + 928) >> 3) + 0x7FFF8000) < 0
            || *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) != 0
            && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 959) >> 3) + 0x7FFF8000) )
          {
            __asan_report_store_n(v2 + 928, 32LL);
          }
          common::milog::MiLogStream::create(
            (common::milog::MiLogStream *)(v2 + 928),
            &common::milog::MiLogDefault::default_log_obj_,
            4u,
            "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
            "init",
            6887);
          v16 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                  (common::milog::MiLogStream *const)(v2 + 928),
                  (const char (*)[16])"[CONFIG_ERROR] ");
          common::milog::MiLogStream::operator<<<char [36],(char *[36])0>(v16, (const char (*)[36])byte_1A6645E0);
          common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 928));
          *(_DWORD *)(((v2 + 928) >> 3) + 0x7FFF8000) = -117901064;
          v6 = -1;
        }
        else
        {
          *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = 0;
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = 1;
          std::allocator<char>::allocator(v2 + 144);
          std::string::basic_string<std::allocator<char>>(
            (std::string *const)(v2 + 992),
            &byte_1A664640,
            (const std::allocator<char> *)(v2 + 144));
          v17 = common::tools::TxtFile::Row::assignToStr(
                  row,
                  (const std::string *)(v2 + 992),
                  (std::string *)(v2 + 480)) != 0;
          std::string::~string((void *)(v2 + 992));
          *(_DWORD *)(((v2 + 992) >> 3) + 0x7FFF8000) = -117901064;
          std::allocator<char>::~allocator(v2 + 144);
          *(_BYTE *)(((v2 + 144) >> 3) + 0x7FFF8000) = -8;
          if ( v17 )
          {
            *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = 0;
            if ( *(char *)(((v2 + 1056) >> 3) + 0x7FFF8000) < 0
              || *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) != 0
              && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1087) >> 3) + 0x7FFF8000) )
            {
              __asan_report_store_n(v2 + 1056, 32LL);
            }
            common::milog::MiLogStream::create(
              (common::milog::MiLogStream *)(v2 + 1056),
              &common::milog::MiLogDefault::default_log_obj_,
              4u,
              "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
              "init",
              6892);
            v18 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                    (common::milog::MiLogStream *const)(v2 + 1056),
                    (const char (*)[16])"[CONFIG_ERROR] ");
            common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(v18, (const char (*)[35])byte_1A664680);
            common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1056));
            *(_DWORD *)(((v2 + 1056) >> 3) + 0x7FFF8000) = -117901064;
            v6 = -1;
          }
          else
          {
            v19 = ((v2 + 352) >> 3) + 2147450880;
            *(_WORD *)v19 = 0;
            *(_BYTE *)(v19 + 2) = 0;
            v20 = (_DWORD *)(((v2 + 1600) >> 3) + 2147450880);
            *v20 = 0;
            v20[1] = 0;
            *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 160);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1600),
              ";",
              (const std::allocator<char> *)(v2 + 160));
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = 1;
            std::allocator<char>::allocator(v2 + 176);
            std::string::basic_string<std::allocator<char>>(
              (std::string *const)(v2 + 1632),
              ",",
              (const std::allocator<char> *)(v2 + 176));
            __l._M_array = (std::initializer_list<std::string >::iterator)(v2 + 1600);
            __l._M_len = 2LL;
            *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = 1;
            std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 192));
            std::vector<std::string>::vector(
              (std::vector<std::string> *const)(v2 + 352),
              __l,
              (const std::vector<std::string>::allocator_type *)(v2 + 192));
            v21 = common::tools::StringUtils::splitToListBySeps<unsigned int>(
                    (const std::string *)(v2 + 480),
                    (const std::vector<std::string> *)(v2 + 352),
                    &this->default_parts_id_list,
                    1) != 0;
            std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 352));
            v22 = ((v2 + 352) >> 3) + 2147450880;
            *(_WORD *)v22 = -1800;
            *(_BYTE *)(v22 + 2) = -8;
            std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 192));
            *(_BYTE *)(((v2 + 192) >> 3) + 0x7FFF8000) = -8;
            for ( j = (char *)(v2 + 1664); j != (char *)(v2 + 1600); std::string::~string(j) )
              j -= 32;
            v24 = (_DWORD *)(((v2 + 1600) >> 3) + 2147450880);
            *v24 = -117901064;
            v24[1] = -117901064;
            std::allocator<char>::~allocator(v2 + 176);
            *(_BYTE *)(((v2 + 176) >> 3) + 0x7FFF8000) = -8;
            std::allocator<char>::~allocator(v2 + 160);
            *(_BYTE *)(((v2 + 160) >> 3) + 0x7FFF8000) = -8;
            if ( v21 )
            {
              *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = 0;
              if ( *(char *)(((v2 + 1120) >> 3) + 0x7FFF8000) < 0
                || *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) != 0
                && (char)((v2 + 127) & 7) >= *(_BYTE *)(((v2 + 1151) >> 3) + 0x7FFF8000) )
              {
                __asan_report_store_n(v2 + 1120, 32LL);
              }
              common::milog::MiLogStream::create(
                (common::milog::MiLogStream *)(v2 + 1120),
                &common::milog::MiLogDefault::default_log_obj_,
                4u,
                "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                "init",
                6897);
              v25 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                      (common::milog::MiLogStream *const)(v2 + 1120),
                      (const char (*)[16])"[CONFIG_ERROR] ");
              common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(v25, (const char (*)[35])byte_1A664680);
              common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1120));
              *(_DWORD *)(((v2 + 1120) >> 3) + 0x7FFF8000) = -117901064;
              v6 = -1;
            }
            else
            {
              *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = 0;
              *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = 1;
              std::allocator<char>::allocator(v2 + 208);
              std::string::basic_string<std::allocator<char>>(
                (std::string *const)(v2 + 1184),
                &byte_1A6646E0,
                (const std::allocator<char> *)(v2 + 208));
              v26 = common::tools::TxtFile::Row::assignToStr(
                      row,
                      (const std::string *)(v2 + 1184),
                      (std::string *)(v2 + 480)) != 0;
              std::string::~string((void *)(v2 + 1184));
              *(_DWORD *)(((v2 + 1184) >> 3) + 0x7FFF8000) = -117901064;
              std::allocator<char>::~allocator(v2 + 208);
              *(_BYTE *)(((v2 + 208) >> 3) + 0x7FFF8000) = -8;
              if ( v26 )
              {
                *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = 0;
                if ( *(char *)(((v2 + 1248) >> 3) + 0x7FFF8000) < 0
                  || *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) != 0
                  && (char)((v2 - 32 + 31) & 7) >= *(_BYTE *)(((v2 + 1279) >> 3) + 0x7FFF8000) )
                {
                  __asan_report_store_n(v2 + 1248, 32LL);
                }
                common::milog::MiLogStream::create(
                  (common::milog::MiLogStream *)(v2 + 1248),
                  &common::milog::MiLogDefault::default_log_obj_,
                  4u,
                  "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                  "init",
                  6902);
                v27 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                        (common::milog::MiLogStream *const)(v2 + 1248),
                        (const char (*)[16])"[CONFIG_ERROR] ");
                common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(v27, (const char (*)[38])byte_1A664720);
                common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1248));
                *(_DWORD *)(((v2 + 1248) >> 3) + 0x7FFF8000) = -117901064;
                v6 = -1;
              }
              else
              {
                v28 = ((v2 + 416) >> 3) + 2147450880;
                *(_WORD *)v28 = 0;
                *(_BYTE *)(v28 + 2) = 0;
                v29 = (_DWORD *)(((v2 + 1696) >> 3) + 2147450880);
                *v29 = 0;
                v29[1] = 0;
                *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 224);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1696),
                  ";",
                  (const std::allocator<char> *)(v2 + 224));
                *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = 1;
                std::allocator<char>::allocator(v2 + 240);
                std::string::basic_string<std::allocator<char>>(
                  (std::string *const)(v2 + 1728),
                  ",",
                  (const std::allocator<char> *)(v2 + 240));
                v41._M_array = (std::initializer_list<std::string >::iterator)(v2 + 1696);
                v41._M_len = 2LL;
                *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = 1;
                std::allocator<std::string>::allocator((std::allocator<std::string > *const)(v2 + 256));
                std::vector<std::string>::vector(
                  (std::vector<std::string> *const)(v2 + 416),
                  v41,
                  (const std::vector<std::string>::allocator_type *)(v2 + 256));
                v30 = common::tools::StringUtils::splitToListBySeps<unsigned int>(
                        (const std::string *)(v2 + 480),
                        (const std::vector<std::string> *)(v2 + 416),
                        &this->pass_part_id_list,
                        1) != 0;
                std::vector<std::string>::~vector((std::vector<std::string> *const)(v2 + 416));
                v31 = ((v2 + 416) >> 3) + 2147450880;
                *(_WORD *)v31 = -1800;
                *(_BYTE *)(v31 + 2) = -8;
                std::allocator<std::string>::~allocator((std::allocator<std::string > *const)(v2 + 256));
                *(_BYTE *)(((v2 + 256) >> 3) + 0x7FFF8000) = -8;
                for ( k = (char *)(v2 + 1760); k != (char *)(v2 + 1696); std::string::~string(k) )
                  k -= 32;
                v33 = (_DWORD *)(((v2 + 1696) >> 3) + 2147450880);
                *v33 = -117901064;
                v33[1] = -117901064;
                std::allocator<char>::~allocator(v2 + 240);
                *(_BYTE *)(((v2 + 240) >> 3) + 0x7FFF8000) = -8;
                std::allocator<char>::~allocator(v2 + 224);
                *(_BYTE *)(((v2 + 224) >> 3) + 0x7FFF8000) = -8;
                if ( v30 )
                {
                  *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = 0;
                  if ( *(char *)(((v2 + 1312) >> 3) + 0x7FFF8000) < 0
                    || *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) != 0
                    && (char)((v2 + 63) & 7) >= *(_BYTE *)(((v2 + 1343) >> 3) + 0x7FFF8000) )
                  {
                    __asan_report_store_n(v2 + 1312, 32LL);
                  }
                  common::milog::MiLogStream::create(
                    (common::milog::MiLogStream *)(v2 + 1312),
                    &common::milog::MiLogDefault::default_log_obj_,
                    4u,
                    "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                    "init",
                    6907);
                  v34 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                          (common::milog::MiLogStream *const)(v2 + 1312),
                          (const char (*)[16])"[CONFIG_ERROR] ");
                  common::milog::MiLogStream::operator<<<char [38],(char *[38])0>(
                    v34,
                    (const char (*)[38])byte_1A664720);
                  common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1312));
                  *(_DWORD *)(((v2 + 1312) >> 3) + 0x7FFF8000) = -117901064;
                  v6 = -1;
                }
                else
                {
                  *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = 0;
                  *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = 1;
                  std::allocator<char>::allocator(v2 + 272);
                  std::string::basic_string<std::allocator<char>>(
                    (std::string *const)(v2 + 1376),
                    &byte_1A664780,
                    (const std::allocator<char> *)(v2 + 272));
                  v35 = common::tools::TxtFile::Row::assignToNum<unsigned int>(
                          row,
                          (const std::string *)(v2 + 1376),
                          &this->init_parts_id) != 0;
                  std::string::~string((void *)(v2 + 1376));
                  *(_DWORD *)(((v2 + 1376) >> 3) + 0x7FFF8000) = -117901064;
                  std::allocator<char>::~allocator(v2 + 272);
                  *(_BYTE *)(((v2 + 272) >> 3) + 0x7FFF8000) = -8;
                  if ( v35 )
                  {
                    *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = 0;
                    if ( *(char *)(((v2 + 1440) >> 3) + 0x7FFF8000) < 0
                      || *(_BYTE *)(((v2 + 1471) >> 3) + 0x7FFF8000) != 0
                      && (char)((v2 - 96 + 31) & 7) >= *(_BYTE *)(((v2 + 1471) >> 3) + 0x7FFF8000) )
                    {
                      __asan_report_store_n(v2 + 1440, 32LL);
                    }
                    common::milog::MiLogStream::create(
                      (common::milog::MiLogStream *)(v2 + 1440),
                      &common::milog::MiLogDefault::default_log_obj_,
                      4u,
                      "./src/txt_data_auto/ComponentDefines/CommonExcelConfig.gen.cpp",
                      "init",
                      6912);
                    v36 = common::milog::MiLogStream::operator<<<char [16],(char *[16])0>(
                            (common::milog::MiLogStream *const)(v2 + 1440),
                            (const char (*)[16])"[CONFIG_ERROR] ");
                    common::milog::MiLogStream::operator<<<char [35],(char *[35])0>(
                      v36,
                      (const char (*)[35])byte_1A6647C0);
                    common::milog::MiLogStream::~MiLogStream((common::milog::MiLogStream *const)(v2 + 1440));
                    *(_DWORD *)(((v2 + 1440) >> 3) + 0x7FFF8000) = -117901064;
                    v6 = -1;
                  }
                  else
                  {
                    v6 = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  std::string::~string((void *)(v2 + 480));
  if ( v42 == (char *)v2 )
  {
    *(_QWORD *)((v2 >> 3) + 0x7FFF8000) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8008) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8010) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8018) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8020) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8028) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8030) = 0LL;
    *(_DWORD *)((v2 >> 3) + 0x7FFF8038) = 0;
    *(_QWORD *)((v2 >> 3) + 0x7FFF8040) = 0LL;
    *(_QWORD *)((v2 >> 3) + 0x7FFF80D8) = 0LL;
    memset(
      (void *)((unsigned __int64)(v4 + 536862738) & 0xFFFFFFFFFFFFFFF8LL),
      0,
      8LL * ((((_DWORD)v4 + 2147450944 - (((_DWORD)v4 + 2147450952) & 0xFFFFFFF8) + 160) & 0xFFFFFFF8) >> 3));
  }
  else
  {
    *(_QWORD *)v2 = 1172321806LL;
    __asan_stack_free_5(v2, 1792LL, v42);
  }
  return v6;
};
